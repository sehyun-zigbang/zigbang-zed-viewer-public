function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  });
  return Object.freeze(n);
}

var glErrorShadow = {};

function error(msg) {
  if (window.console && window.console.error) {
    window.console.error(msg);
  }
}

function log$1(msg) {
  if (window.console && window.console.log) {
    window.console.log(msg);
  }
}

function synthesizeGLError(err, opt_msg) {
  glErrorShadow[err] = true;

  if (opt_msg !== undefined) {
    error(opt_msg);
  }
}

function wrapGLError(gl) {
  var f = gl.getError;

  gl.getError = function () {
    var err;

    do {
      err = f.apply(gl);

      if (err != gl.NO_ERROR) {
        glErrorShadow[err] = true;
      }
    } while (err != gl.NO_ERROR);

    for (var err in glErrorShadow) {
      if (glErrorShadow[err]) {
        delete glErrorShadow[err];
        return parseInt(err);
      }
    }

    return gl.NO_ERROR;
  };
}

var WebGLVertexArrayObjectOES = function WebGLVertexArrayObjectOES(ext) {
  var gl = ext.gl;
  this.ext = ext;
  this.isAlive = true;
  this.hasBeenBound = false;
  this.elementArrayBuffer = null;
  this.attribs = new Array(ext.maxVertexAttribs);

  for (var n = 0; n < this.attribs.length; n++) {
    var attrib = new WebGLVertexArrayObjectOES.VertexAttrib(gl);
    this.attribs[n] = attrib;
  }

  this.maxAttrib = 0;
};

WebGLVertexArrayObjectOES.VertexAttrib = function VertexAttrib(gl) {
  this.enabled = false;
  this.buffer = null;
  this.size = 4;
  this.type = gl.FLOAT;
  this.normalized = false;
  this.stride = 16;
  this.offset = 0;
  this.cached = "";
  this.recache();
};

WebGLVertexArrayObjectOES.VertexAttrib.prototype.recache = function recache() {
  this.cached = [this.size, this.type, this.normalized, this.stride, this.offset].join(":");
};

var OESVertexArrayObject = function OESVertexArrayObject(gl) {
  var self = this;
  this.gl = gl;
  wrapGLError(gl);
  var original = this.original = {
    getParameter: gl.getParameter,
    enableVertexAttribArray: gl.enableVertexAttribArray,
    disableVertexAttribArray: gl.disableVertexAttribArray,
    bindBuffer: gl.bindBuffer,
    getVertexAttrib: gl.getVertexAttrib,
    vertexAttribPointer: gl.vertexAttribPointer
  };

  gl.getParameter = function getParameter(pname) {
    if (pname == self.VERTEX_ARRAY_BINDING_OES) {
      if (self.currentVertexArrayObject == self.defaultVertexArrayObject) {
        return null;
      } else {
        return self.currentVertexArrayObject;
      }
    }

    return original.getParameter.apply(this, arguments);
  };

  gl.enableVertexAttribArray = function enableVertexAttribArray(index) {
    var vao = self.currentVertexArrayObject;
    vao.maxAttrib = Math.max(vao.maxAttrib, index);
    var attrib = vao.attribs[index];
    attrib.enabled = true;
    return original.enableVertexAttribArray.apply(this, arguments);
  };

  gl.disableVertexAttribArray = function disableVertexAttribArray(index) {
    var vao = self.currentVertexArrayObject;
    vao.maxAttrib = Math.max(vao.maxAttrib, index);
    var attrib = vao.attribs[index];
    attrib.enabled = false;
    return original.disableVertexAttribArray.apply(this, arguments);
  };

  gl.bindBuffer = function bindBuffer(target, buffer) {
    switch (target) {
      case gl.ARRAY_BUFFER:
        self.currentArrayBuffer = buffer;
        break;

      case gl.ELEMENT_ARRAY_BUFFER:
        self.currentVertexArrayObject.elementArrayBuffer = buffer;
        break;
    }

    return original.bindBuffer.apply(this, arguments);
  };

  gl.getVertexAttrib = function getVertexAttrib(index, pname) {
    var vao = self.currentVertexArrayObject;
    var attrib = vao.attribs[index];

    switch (pname) {
      case gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:
        return attrib.buffer;

      case gl.VERTEX_ATTRIB_ARRAY_ENABLED:
        return attrib.enabled;

      case gl.VERTEX_ATTRIB_ARRAY_SIZE:
        return attrib.size;

      case gl.VERTEX_ATTRIB_ARRAY_STRIDE:
        return attrib.stride;

      case gl.VERTEX_ATTRIB_ARRAY_TYPE:
        return attrib.type;

      case gl.VERTEX_ATTRIB_ARRAY_NORMALIZED:
        return attrib.normalized;

      default:
        return original.getVertexAttrib.apply(this, arguments);
    }
  };

  gl.vertexAttribPointer = function vertexAttribPointer(indx, size, type, normalized, stride, offset) {
    var vao = self.currentVertexArrayObject;
    vao.maxAttrib = Math.max(vao.maxAttrib, indx);
    var attrib = vao.attribs[indx];
    attrib.buffer = self.currentArrayBuffer;
    attrib.size = size;
    attrib.type = type;
    attrib.normalized = normalized;
    attrib.stride = stride;
    attrib.offset = offset;
    attrib.recache();
    return original.vertexAttribPointer.apply(this, arguments);
  };

  if (gl.instrumentExtension) {
    gl.instrumentExtension(this, "OES_vertex_array_object");
  }

  gl.canvas.addEventListener('webglcontextrestored', function () {
    log$1("OESVertexArrayObject emulation library context restored");
    self.reset_();
  }, true);
  this.reset_();
};

OESVertexArrayObject.prototype.VERTEX_ARRAY_BINDING_OES = 0x85B5;

OESVertexArrayObject.prototype.reset_ = function reset_() {
  var contextWasLost = this.vertexArrayObjects !== undefined;

  if (contextWasLost) {
    for (var ii = 0; ii < this.vertexArrayObjects.length; ++ii) {
      this.vertexArrayObjects.isAlive = false;
    }
  }

  var gl = this.gl;
  this.maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
  this.defaultVertexArrayObject = new WebGLVertexArrayObjectOES(this);
  this.currentVertexArrayObject = null;
  this.currentArrayBuffer = null;
  this.vertexArrayObjects = [this.defaultVertexArrayObject];
  this.bindVertexArrayOES(null);
};

OESVertexArrayObject.prototype.createVertexArrayOES = function createVertexArrayOES() {
  var arrayObject = new WebGLVertexArrayObjectOES(this);
  this.vertexArrayObjects.push(arrayObject);
  return arrayObject;
};

OESVertexArrayObject.prototype.deleteVertexArrayOES = function deleteVertexArrayOES(arrayObject) {
  arrayObject.isAlive = false;
  this.vertexArrayObjects.splice(this.vertexArrayObjects.indexOf(arrayObject), 1);

  if (this.currentVertexArrayObject == arrayObject) {
    this.bindVertexArrayOES(null);
  }
};

OESVertexArrayObject.prototype.isVertexArrayOES = function isVertexArrayOES(arrayObject) {
  if (arrayObject && arrayObject instanceof WebGLVertexArrayObjectOES) {
    if (arrayObject.hasBeenBound && arrayObject.ext == this) {
      return true;
    }
  }

  return false;
};

OESVertexArrayObject.prototype.bindVertexArrayOES = function bindVertexArrayOES(arrayObject) {
  var gl = this.gl;

  if (arrayObject && !arrayObject.isAlive) {
    synthesizeGLError(gl.INVALID_OPERATION, "bindVertexArrayOES: attempt to bind deleted arrayObject");
    return;
  }

  var original = this.original;
  var oldVAO = this.currentVertexArrayObject;
  this.currentVertexArrayObject = arrayObject || this.defaultVertexArrayObject;
  this.currentVertexArrayObject.hasBeenBound = true;
  var newVAO = this.currentVertexArrayObject;

  if (oldVAO == newVAO) {
    return;
  }

  if (!oldVAO || newVAO.elementArrayBuffer != oldVAO.elementArrayBuffer) {
    original.bindBuffer.call(gl, gl.ELEMENT_ARRAY_BUFFER, newVAO.elementArrayBuffer);
  }

  var currentBinding = this.currentArrayBuffer;
  var maxAttrib = Math.max(oldVAO ? oldVAO.maxAttrib : 0, newVAO.maxAttrib);

  for (var n = 0; n <= maxAttrib; n++) {
    var attrib = newVAO.attribs[n];
    var oldAttrib = oldVAO ? oldVAO.attribs[n] : null;

    if (!oldVAO || attrib.enabled != oldAttrib.enabled) {
      if (attrib.enabled) {
        original.enableVertexAttribArray.call(gl, n);
      } else {
        original.disableVertexAttribArray.call(gl, n);
      }
    }

    if (attrib.enabled) {
      var bufferChanged = false;

      if (!oldVAO || attrib.buffer != oldAttrib.buffer) {
        if (currentBinding != attrib.buffer) {
          original.bindBuffer.call(gl, gl.ARRAY_BUFFER, attrib.buffer);
          currentBinding = attrib.buffer;
        }

        bufferChanged = true;
      }

      if (bufferChanged || attrib.cached != oldAttrib.cached) {
        original.vertexAttribPointer.call(gl, n, attrib.size, attrib.type, attrib.normalized, attrib.stride, attrib.offset);
      }
    }
  }

  if (this.currentArrayBuffer != currentBinding) {
    original.bindBuffer.call(gl, gl.ARRAY_BUFFER, this.currentArrayBuffer);
  }
};

const setupVertexArrayObject = function setupVertexArrayObject(gl) {
  if (gl.getSupportedExtensions) {
    var exts = gl.getSupportedExtensions();

    if (exts.indexOf("OES_vertex_array_object") != -1) {
      return;
    }
  } else if (gl.getExtension) {
    var vao = gl.getExtension("OES_vertex_array_object");

    if (vao) {
      return;
    }
  }

  if (gl.getSupportedExtensions) {
    var original_getSupportedExtensions = gl.getSupportedExtensions;

    gl.getSupportedExtensions = function getSupportedExtensions() {
      var list = original_getSupportedExtensions.call(this) || [];
      list.push("OES_vertex_array_object");
      return list;
    };
  }

  var original_getExtension = gl.getExtension;

  gl.getExtension = function getExtension(name) {
    if (name == "OES_vertex_array_object") {
      if (!gl.__OESVertexArrayObject) {
        gl.__OESVertexArrayObject = new OESVertexArrayObject(gl);
      }

      return gl.__OESVertexArrayObject;
    }

    if (original_getExtension) {
      return original_getExtension.call(this, name);
    } else {
      return null;
    }
  };
};

const TRACEID_RENDER_FRAME = 'RenderFrame';
const TRACEID_RENDER_PASS = 'RenderPass';
const TRACEID_RENDER_PASS_DETAIL = 'RenderPassDetail';
const TRACEID_RENDER_ACTION = 'RenderAction';
const TRACEID_RENDER_TARGET_ALLOC = 'RenderTargetAlloc';
const TRACEID_TEXTURE_ALLOC = 'TextureAlloc';
const TRACEID_SHADER_ALLOC = 'ShaderAlloc';
const TRACEID_VRAM_TEXTURE = 'VRAM.Texture';
const TRACEID_VRAM_VB = 'VRAM.Vb';
const TRACEID_VRAM_IB = 'VRAM.Ib';

const version = '1.57.1';
const revision = '256dd83c2';
const config = {};
const common = {};
const apps = {};
const data = {};

const _typeLookup$1 = function () {
  const result = {};
  const names = ['Array', 'Object', 'Function', 'Date', 'RegExp', 'Float32Array'];

  for (let i = 0; i < names.length; i++) result['[object ' + names[i] + ']'] = names[i].toLowerCase();

  return result;
}();

function type$1(obj) {
  if (obj === null) {
    return 'null';
  }

  const type = typeof obj;

  if (type === 'undefined' || type === 'number' || type === 'string' || type === 'boolean') {
    return type;
  }

  return _typeLookup$1[Object.prototype.toString.call(obj)];
}

function extend$1(target, ex) {
  for (const prop in ex) {
    const copy = ex[prop];

    if (type$1(copy) === 'object') {
      target[prop] = extend$1({}, copy);
    } else if (type$1(copy) === 'array') {
      target[prop] = extend$1([], copy);
    } else {
      target[prop] = copy;
    }
  }

  return target;
}

function isDefined(o) {
  let a;
  return o !== a;
}

class EventHandler {
  constructor() {
    this._callbacks = {};
    this._callbackActive = {};
  }

  initEventHandler() {
    this._callbacks = {};
    this._callbackActive = {};
  }

  _addCallback(name, callback, scope, once = false) {
    if (!name || typeof name !== 'string' || !callback) return;
    if (!this._callbacks[name]) this._callbacks[name] = [];
    if (this._callbackActive[name] && this._callbackActive[name] === this._callbacks[name]) this._callbackActive[name] = this._callbackActive[name].slice();

    this._callbacks[name].push({
      callback: callback,
      scope: scope || this,
      once: once
    });
  }

  on(name, callback, scope) {
    this._addCallback(name, callback, scope, false);

    return this;
  }

  off(name, callback, scope) {
    if (name) {
      if (this._callbackActive[name] && this._callbackActive[name] === this._callbacks[name]) this._callbackActive[name] = this._callbackActive[name].slice();
    } else {
      for (const key in this._callbackActive) {
        if (!this._callbacks[key]) continue;
        if (this._callbacks[key] !== this._callbackActive[key]) continue;
        this._callbackActive[key] = this._callbackActive[key].slice();
      }
    }

    if (!name) {
      this._callbacks = {};
    } else if (!callback) {
      if (this._callbacks[name]) this._callbacks[name] = [];
    } else {
      const events = this._callbacks[name];
      if (!events) return this;
      let count = events.length;

      for (let i = 0; i < count; i++) {
        if (events[i].callback !== callback) continue;
        if (scope && events[i].scope !== scope) continue;
        events[i--] = events[--count];
      }

      events.length = count;
    }

    return this;
  }

  fire(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    if (!name || !this._callbacks[name]) return this;
    let callbacks;

    if (!this._callbackActive[name]) {
      this._callbackActive[name] = this._callbacks[name];
    } else {
      if (this._callbackActive[name] === this._callbacks[name]) this._callbackActive[name] = this._callbackActive[name].slice();
      callbacks = this._callbacks[name].slice();
    }

    for (let i = 0; (callbacks || this._callbackActive[name]) && i < (callbacks || this._callbackActive[name]).length; i++) {
      const evt = (callbacks || this._callbackActive[name])[i];
      evt.callback.call(evt.scope, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

      if (evt.once) {
        const existingCallback = this._callbacks[name];
        const ind = existingCallback ? existingCallback.indexOf(evt) : -1;

        if (ind !== -1) {
          if (this._callbackActive[name] === existingCallback) this._callbackActive[name] = this._callbackActive[name].slice();

          this._callbacks[name].splice(ind, 1);
        }
      }
    }

    if (!callbacks) this._callbackActive[name] = null;
    return this;
  }

  once(name, callback, scope) {
    this._addCallback(name, callback, scope, true);

    return this;
  }

  hasEvent(name) {
    return this._callbacks[name] && this._callbacks[name].length !== 0 || false;
  }

}

const events = {
  attach: function (target) {
    const ev = events;
    target._addCallback = ev._addCallback;
    target.on = ev.on;
    target.off = ev.off;
    target.fire = ev.fire;
    target.once = ev.once;
    target.hasEvent = ev.hasEvent;
    target._callbacks = {};
    target._callbackActive = {};
    return target;
  },
  _addCallback: EventHandler.prototype._addCallback,
  on: EventHandler.prototype.on,
  off: EventHandler.prototype.off,
  fire: EventHandler.prototype.fire,
  once: EventHandler.prototype.once,
  hasEvent: EventHandler.prototype.hasEvent
};

const guid = {
  create: function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }
};

const path = {
  delimiter: '/',
  join: function () {
    const num = arguments.length;
    let result = arguments[0];

    for (let index = 0; index < num - 1; ++index) {
      const one = arguments[index];
      const two = arguments[index + 1];

      if (!isDefined(one) || !isDefined(two)) {
        throw new Error('undefined argument to pc.path.join');
      }

      if (two[0] === path.delimiter) {
        result = two;
        continue;
      }

      if (one && two && one[one.length - 1] !== path.delimiter && two[0] !== path.delimiter) {
        result += path.delimiter + two;
      } else {
        result += two;
      }
    }

    return result;
  },
  normalize: function (pathname) {
    const lead = pathname.startsWith(path.delimiter);
    const trail = pathname.endsWith(path.delimiter);
    const parts = pathname.split('/');
    let result = '';
    let cleaned = [];

    for (let i = 0; i < parts.length; i++) {
      if (parts[i] === '') continue;
      if (parts[i] === '.') continue;

      if (parts[i] === '..' && cleaned.length > 0) {
        cleaned = cleaned.slice(0, cleaned.length - 2);
        continue;
      }

      if (i > 0) cleaned.push(path.delimiter);
      cleaned.push(parts[i]);
    }

    result = cleaned.join('');

    if (!lead && result[0] === path.delimiter) {
      result = result.slice(1);
    }

    if (trail && result[result.length - 1] !== path.delimiter) {
      result += path.delimiter;
    }

    return result;
  },
  split: function (pathname) {
    const parts = pathname.split(path.delimiter);
    const tail = parts.slice(parts.length - 1)[0];
    const head = parts.slice(0, parts.length - 1).join(path.delimiter);
    return [head, tail];
  },
  getBasename: function (pathname) {
    return path.split(pathname)[1];
  },
  getDirectory: function (pathname) {
    const parts = pathname.split(path.delimiter);
    return parts.slice(0, parts.length - 1).join(path.delimiter);
  },
  getExtension: function (pathname) {
    const ext = pathname.split('?')[0].split('.').pop();

    if (ext !== pathname) {
      return '.' + ext;
    }

    return '';
  },
  isRelativePath: function (pathname) {
    return pathname.charAt(0) !== '/' && pathname.match(/:\/\//) === null;
  },
  extractPath: function (pathname) {
    let result = '';
    const parts = pathname.split('/');
    let i = 0;

    if (parts.length > 1) {
      if (path.isRelativePath(pathname)) {
        if (parts[0] === '.') {
          for (i = 0; i < parts.length - 1; ++i) {
            result += i === 0 ? parts[i] : '/' + parts[i];
          }
        } else if (parts[0] === '..') {
          for (i = 0; i < parts.length - 1; ++i) {
            result += i === 0 ? parts[i] : '/' + parts[i];
          }
        } else {
          result = '.';

          for (i = 0; i < parts.length - 1; ++i) {
            result += '/' + parts[i];
          }
        }
      } else {
        for (i = 0; i < parts.length - 1; ++i) {
          result += i === 0 ? parts[i] : '/' + parts[i];
        }
      }
    }

    return result;
  }
};

let desktop = false;
let mobile = false;
let windows = false;
let xbox = false;
let android = false;
let ios = false;
let touch = false;
let gamepads = false;
let workers = false;
let passiveEvents = false;

if (typeof navigator !== 'undefined') {
  const ua = navigator.userAgent;
  if (/(windows|mac os|linux|cros)/i.test(ua)) desktop = true;
  if (/xbox/i.test(ua)) xbox = true;

  if (/(windows phone|iemobile|wpdesktop)/i.test(ua)) {
    desktop = false;
    mobile = true;
    windows = true;
  } else if (/android/i.test(ua)) {
    desktop = false;
    mobile = true;
    android = true;
  } else if (/ip([ao]d|hone)/i.test(ua)) {
    desktop = false;
    mobile = true;
    ios = true;
  }

  if (typeof window !== 'undefined') {
    touch = 'ontouchstart' in window || 'maxTouchPoints' in navigator && navigator.maxTouchPoints > 0;
  }

  gamepads = 'getGamepads' in navigator;
  workers = typeof Worker !== 'undefined';

  try {
    const opts = Object.defineProperty({}, 'passive', {
      get: function () {
        passiveEvents = true;
        return false;
      }
    });
    window.addEventListener('testpassive', null, opts);
    window.removeEventListener('testpassive', null, opts);
  } catch (e) {}
}

const environment = typeof window !== 'undefined' ? 'browser' : 'node';
const platform = {
  environment: environment,
  global: environment === 'browser' ? window : global,
  browser: environment === 'browser',
  desktop: desktop,
  mobile: mobile,
  ios: ios,
  android: android,
  windows: windows,
  xbox: xbox,
  gamepads: gamepads,
  touch: touch,
  workers: workers,
  passiveEvents: passiveEvents
};

const ASCII_LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';
const ASCII_UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
const ASCII_LETTERS = ASCII_LOWERCASE + ASCII_UPPERCASE;
const HIGH_SURROGATE_BEGIN = 0xD800;
const HIGH_SURROGATE_END = 0xDBFF;
const LOW_SURROGATE_BEGIN = 0xDC00;
const LOW_SURROGATE_END = 0xDFFF;
const ZERO_WIDTH_JOINER = 0x200D;
const REGIONAL_INDICATOR_BEGIN = 0x1F1E6;
const REGIONAL_INDICATOR_END = 0x1F1FF;
const FITZPATRICK_MODIFIER_BEGIN = 0x1F3FB;
const FITZPATRICK_MODIFIER_END = 0x1F3FF;
const DIACRITICAL_MARKS_BEGIN = 0x20D0;
const DIACRITICAL_MARKS_END = 0x20FF;
const VARIATION_MODIFIER_BEGIN = 0xFE00;
const VARIATION_MODIFIER_END = 0xFE0F;

function getCodePointData(string, i = 0) {
  const size = string.length;

  if (i < 0 || i >= size) {
    return null;
  }

  const first = string.charCodeAt(i);

  if (size > 1 && first >= HIGH_SURROGATE_BEGIN && first <= HIGH_SURROGATE_END) {
    const second = string.charCodeAt(i + 1);

    if (second >= LOW_SURROGATE_BEGIN && second <= LOW_SURROGATE_END) {
      return {
        code: (first - HIGH_SURROGATE_BEGIN) * 0x400 + second - LOW_SURROGATE_BEGIN + 0x10000,
        long: true
      };
    }
  }

  return {
    code: first,
    long: false
  };
}

function isCodeBetween(string, begin, end) {
  if (!string) return false;
  const codeData = getCodePointData(string);

  if (codeData) {
    const code = codeData.code;
    return code >= begin && code <= end;
  }

  return false;
}

function numCharsToTakeForNextSymbol(string, index) {
  if (index === string.length - 1) {
    return 1;
  }

  if (isCodeBetween(string[index], HIGH_SURROGATE_BEGIN, HIGH_SURROGATE_END)) {
    const first = string.substring(index, index + 2);
    const second = string.substring(index + 2, index + 4);

    if (isCodeBetween(second, FITZPATRICK_MODIFIER_BEGIN, FITZPATRICK_MODIFIER_END) || isCodeBetween(first, REGIONAL_INDICATOR_BEGIN, REGIONAL_INDICATOR_END) && isCodeBetween(second, REGIONAL_INDICATOR_BEGIN, REGIONAL_INDICATOR_END)) {
      return 4;
    }

    if (isCodeBetween(second, VARIATION_MODIFIER_BEGIN, VARIATION_MODIFIER_END)) {
      return 3;
    }

    return 2;
  }

  if (isCodeBetween(string[index + 1], VARIATION_MODIFIER_BEGIN, VARIATION_MODIFIER_END)) {
    return 2;
  }

  return 1;
}

const string = {
  ASCII_LOWERCASE: ASCII_LOWERCASE,
  ASCII_UPPERCASE: ASCII_UPPERCASE,
  ASCII_LETTERS: ASCII_LETTERS,
  format: function (s) {
    for (let i = 1; i < arguments.length; i++) {
      s = s.replace('{' + (i - 1) + '}', arguments[i]);
    }

    return s;
  },
  toBool: function (s, strict = false) {
    if (s === 'true') {
      return true;
    }

    if (strict) {
      if (s === 'false') {
        return false;
      }

      throw new TypeError('Not a boolean string');
    }

    return false;
  },
  getCodePoint: function (string, i) {
    const codePointData = getCodePointData(string, i);
    return codePointData && codePointData.code;
  },
  getCodePoints: function (string) {
    if (typeof string !== 'string') {
      throw new TypeError('Not a string');
    }

    let i = 0;
    const arr = [];
    let codePoint;

    while (!!(codePoint = getCodePointData(string, i))) {
      arr.push(codePoint.code);
      i += codePoint.long ? 2 : 1;
    }

    return arr;
  },
  getSymbols: function (string) {
    if (typeof string !== 'string') {
      throw new TypeError('Not a string');
    }

    let index = 0;
    const length = string.length;
    const output = [];
    let take = 0;
    let ch;

    while (index < length) {
      take += numCharsToTakeForNextSymbol(string, index + take);
      ch = string[index + take];

      if (isCodeBetween(ch, DIACRITICAL_MARKS_BEGIN, DIACRITICAL_MARKS_END)) {
        ch = string[index + take++];
      }

      if (isCodeBetween(ch, VARIATION_MODIFIER_BEGIN, VARIATION_MODIFIER_END)) {
        ch = string[index + take++];
      }

      if (ch && ch.charCodeAt(0) === ZERO_WIDTH_JOINER) {
        ch = string[index + take++];
        continue;
      }

      const char = string.substring(index, index + take);
      output.push(char);
      index += take;
      take = 0;
    }

    return output;
  },
  fromCodePoint: function () {
    const chars = [];
    let current;
    let codePoint;
    let units;

    for (let i = 0; i < arguments.length; ++i) {
      current = Number(arguments[i]);
      codePoint = current - 0x10000;
      units = current > 0xFFFF ? [(codePoint >> 10) + 0xD800, codePoint % 0x400 + 0xDC00] : [current];
      chars.push(String.fromCharCode.apply(null, units));
    }

    return chars.join('');
  }
};

class IndexedList {
  constructor() {
    this._list = [];
    this._index = {};
  }

  push(key, item) {
    if (this._index[key]) {
      throw Error('Key already in index ' + key);
    }

    const location = this._list.push(item) - 1;
    this._index[key] = location;
  }

  has(key) {
    return this._index[key] !== undefined;
  }

  get(key) {
    const location = this._index[key];

    if (location !== undefined) {
      return this._list[location];
    }

    return null;
  }

  remove(key) {
    const location = this._index[key];

    if (location !== undefined) {
      this._list.splice(location, 1);

      delete this._index[key];

      for (key in this._index) {
        const idx = this._index[key];

        if (idx > location) {
          this._index[key] = idx - 1;
        }
      }

      return true;
    }

    return false;
  }

  list() {
    return this._list;
  }

  clear() {
    this._list.length = 0;

    for (const prop in this._index) {
      delete this._index[prop];
    }
  }

}

const cachedResult = func => {
  const uninitToken = {};
  let result = uninitToken;
  return () => {
    if (result === uninitToken) {
      result = func();
    }

    return result;
  };
};

class Impl {
  static loadScript(url, callback) {
    const s = document.createElement('script');
    s.setAttribute('src', url);

    s.onload = () => {
      callback(null);
    };

    s.onerror = () => {
      callback(`Failed to load script='${url}'`);
    };

    document.body.appendChild(s);
  }

  static loadWasm(moduleName, config, callback) {
    const loadUrl = Impl.wasmSupported() && config.glueUrl && config.wasmUrl ? config.glueUrl : config.fallbackUrl;

    if (loadUrl) {
      Impl.loadScript(loadUrl, err => {
        if (err) {
          callback(err, null);
        } else {
          const module = window[moduleName];
          window[moduleName] = undefined;
          module({
            locateFile: () => config.wasmUrl,
            onAbort: () => {
              callback('wasm module aborted.');
            }
          }).then(instance => {
            callback(null, instance);
          });
        }
      });
    } else {
      callback('No supported wasm modules found.', null);
    }
  }

  static getModule(name) {
    if (!Impl.modules.hasOwnProperty(name)) {
      Impl.modules[name] = {
        config: null,
        initializing: false,
        instance: null,
        callbacks: []
      };
    }

    return Impl.modules[name];
  }

  static initialize(moduleName, module) {
    if (module.initializing) {
      return;
    }

    const config = module.config;

    if (config.glueUrl || config.wasmUrl || config.fallbackUrl) {
      module.initializing = true;
      Impl.loadWasm(moduleName, config, (err, instance) => {
        if (err) {
          if (config.errorHandler) {
            config.errorHandler(err);
          } else {
            console.error(`failed to initialize module=${moduleName} error=${err}`);
          }
        } else {
          module.instance = instance;
          module.callbacks.forEach(callback => {
            callback(instance);
          });
        }
      });
    }
  }

}

Impl.modules = {};
Impl.wasmSupported = cachedResult(() => {
  try {
    if (typeof WebAssembly === "object" && typeof WebAssembly.instantiate === "function") {
      const module = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));
      if (module instanceof WebAssembly.Module) return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;
    }
  } catch (e) {}

  return false;
});

class WasmModule {
  static setConfig(moduleName, config) {
    const module = Impl.getModule(moduleName);
    module.config = config;

    if (module.callbacks.length > 0) {
      Impl.initialize(moduleName, module);
    }
  }

  static getInstance(moduleName, callback) {
    const module = Impl.getModule(moduleName);

    if (module.instance) {
      callback(module.instance);
    } else {
      module.callbacks.push(callback);

      if (module.config) {
        Impl.initialize(moduleName, module);
      }
    }
  }

}

class ReadStream {
  constructor(arraybuffer) {
    this.arraybuffer = arraybuffer;
    this.dataView = new DataView(arraybuffer);
    this.offset = 0;
    this.stack = [];
  }

  get remainingBytes() {
    return this.dataView.byteLength - this.offset;
  }

  reset(offset = 0) {
    this.offset = offset;
  }

  skip(bytes) {
    this.offset += bytes;
  }

  align(bytes) {
    this.offset = this.offset + bytes - 1 & ~(bytes - 1);
  }

  _inc(amount) {
    this.offset += amount;
    return this.offset - amount;
  }

  readChar() {
    return String.fromCharCode(this.dataView.getUint8(this.offset++));
  }

  readChars(numChars) {
    let result = '';

    for (let i = 0; i < numChars; ++i) {
      result += this.readChar();
    }

    return result;
  }

  readU8() {
    return this.dataView.getUint8(this.offset++);
  }

  readU16() {
    return this.dataView.getUint16(this._inc(2), true);
  }

  readU32() {
    return this.dataView.getUint32(this._inc(4), true);
  }

  readU64() {
    return this.readU32() + 2 ** 32 * this.readU32();
  }

  readU32be() {
    return this.dataView.getUint32(this._inc(4), false);
  }

  readArray(result) {
    for (let i = 0; i < result.length; ++i) {
      result[i] = this.readU8();
    }
  }

  readLine() {
    const view = this.dataView;
    let result = '';

    while (true) {
      if (this.offset >= view.byteLength) {
        break;
      }

      const c = String.fromCharCode(this.readU8());

      if (c === '\n') {
        break;
      }

      result += c;
    }

    return result;
  }

}

class SortedLoopArray {
  constructor(args) {
    this.items = [];
    this.length = 0;
    this.loopIndex = -1;
    this._sortBy = args.sortBy;
    this._sortHandler = this._doSort.bind(this);
  }

  _binarySearch(item) {
    let left = 0;
    let right = this.items.length - 1;
    const search = item[this._sortBy];
    let middle;
    let current;

    while (left <= right) {
      middle = Math.floor((left + right) / 2);
      current = this.items[middle][this._sortBy];

      if (current <= search) {
        left = middle + 1;
      } else if (current > search) {
        right = middle - 1;
      }
    }

    return left;
  }

  _doSort(a, b) {
    const sortBy = this._sortBy;
    return a[sortBy] - b[sortBy];
  }

  insert(item) {
    const index = this._binarySearch(item);

    this.items.splice(index, 0, item);
    this.length++;

    if (this.loopIndex >= index) {
      this.loopIndex++;
    }
  }

  append(item) {
    this.items.push(item);
    this.length++;
  }

  remove(item) {
    const idx = this.items.indexOf(item);
    if (idx < 0) return;
    this.items.splice(idx, 1);
    this.length--;

    if (this.loopIndex >= idx) {
      this.loopIndex--;
    }
  }

  sort() {
    const current = this.loopIndex >= 0 ? this.items[this.loopIndex] : null;
    this.items.sort(this._sortHandler);

    if (current !== null) {
      this.loopIndex = this.items.indexOf(current);
    }
  }

}

class Tags extends EventHandler {
  constructor(parent) {
    super();
    this._index = {};
    this._list = [];
    this._parent = parent;
  }

  add() {
    let changed = false;

    const tags = this._processArguments(arguments, true);

    if (!tags.length) return changed;

    for (let i = 0; i < tags.length; i++) {
      if (this._index[tags[i]]) continue;
      changed = true;
      this._index[tags[i]] = true;

      this._list.push(tags[i]);

      this.fire('add', tags[i], this._parent);
    }

    if (changed) this.fire('change', this._parent);
    return changed;
  }

  remove() {
    let changed = false;
    if (!this._list.length) return changed;

    const tags = this._processArguments(arguments, true);

    if (!tags.length) return changed;

    for (let i = 0; i < tags.length; i++) {
      if (!this._index[tags[i]]) continue;
      changed = true;
      delete this._index[tags[i]];

      this._list.splice(this._list.indexOf(tags[i]), 1);

      this.fire('remove', tags[i], this._parent);
    }

    if (changed) this.fire('change', this._parent);
    return changed;
  }

  clear() {
    if (!this._list.length) return;

    const tags = this._list.slice(0);

    this._list = [];
    this._index = {};

    for (let i = 0; i < tags.length; i++) this.fire('remove', tags[i], this._parent);

    this.fire('change', this._parent);
  }

  has() {
    if (!this._list.length) return false;
    return this._has(this._processArguments(arguments));
  }

  _has(tags) {
    if (!this._list.length || !tags.length) return false;

    for (let i = 0; i < tags.length; i++) {
      if (tags[i].length === 1) {
        if (this._index[tags[i][0]]) return true;
      } else {
        let multiple = true;

        for (let t = 0; t < tags[i].length; t++) {
          if (this._index[tags[i][t]]) continue;
          multiple = false;
          break;
        }

        if (multiple) return true;
      }
    }

    return false;
  }

  list() {
    return this._list.slice(0);
  }

  _processArguments(args, flat) {
    const tags = [];
    let tmp = [];
    if (!args || !args.length) return tags;

    for (let i = 0; i < args.length; i++) {
      if (args[i] instanceof Array) {
        if (!flat) tmp = [];

        for (let t = 0; t < args[i].length; t++) {
          if (typeof args[i][t] !== 'string') continue;

          if (flat) {
            tags.push(args[i][t]);
          } else {
            tmp.push(args[i][t]);
          }
        }

        if (!flat && tmp.length) tags.push(tmp);
      } else if (typeof args[i] === 'string') {
        if (flat) {
          tags.push(args[i]);
        } else {
          tags.push([args[i]]);
        }
      }
    }

    return tags;
  }

  get size() {
    return this._list.length;
  }

}

const now = typeof window !== 'undefined' && window.performance && window.performance.now && window.performance.timing ? performance.now.bind(performance) : Date.now;

class Timer {
  constructor() {
    this._isRunning = false;
    this._a = 0;
    this._b = 0;
  }

  start() {
    this._isRunning = true;
    this._a = now();
  }

  stop() {
    this._isRunning = false;
    this._b = now();
  }

  getMilliseconds() {
    return this._b - this._a;
  }

}

function createURI(options) {
  let s = '';

  if ((options.authority || options.scheme) && (options.host || options.hostpath)) {
    throw new Error('Can\'t have \'scheme\' or \'authority\' and \'host\' or \'hostpath\' option');
  }

  if (options.host && options.hostpath) {
    throw new Error('Can\'t have \'host\' and \'hostpath\' option');
  }

  if (options.path && options.hostpath) {
    throw new Error('Can\'t have \'path\' and \'hostpath\' option');
  }

  if (options.scheme) {
    s += options.scheme + ':';
  }

  if (options.authority) {
    s += '//' + options.authority;
  }

  if (options.host) {
    s += options.host;
  }

  if (options.path) {
    s += options.path;
  }

  if (options.hostpath) {
    s += options.hostpath;
  }

  if (options.query) {
    s += '?' + options.query;
  }

  if (options.fragment) {
    s += '#' + options.fragment;
  }

  return s;
}

const re = /^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;

class URI {
  constructor(uri) {
    const result = uri.match(re);
    this.scheme = result[2];
    this.authority = result[4];
    this.path = result[5];
    this.query = result[7];
    this.fragment = result[9];
  }

  toString() {
    let s = '';

    if (this.scheme) {
      s += this.scheme + ':';
    }

    if (this.authority) {
      s += '//' + this.authority;
    }

    s += this.path;

    if (this.query) {
      s += '?' + this.query;
    }

    if (this.fragment) {
      s += '#' + this.fragment;
    }

    return s;
  }

  getQuery() {
    const result = {};

    if (this.query) {
      const queryParams = decodeURIComponent(this.query).split('&');

      for (const queryParam of queryParams) {
        const pair = queryParam.split('=');
        result[pair[0]] = pair[1];
      }
    }

    return result;
  }

  setQuery(params) {
    let q = '';

    for (const key in params) {
      if (params.hasOwnProperty(key)) {
        if (q !== '') {
          q += '&';
        }

        q += encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
      }
    }

    this.query = q;
  }

}

class Tracing {
  static set(channel, enabled = true) {}

  static get(channel) {
    return Tracing._traceChannels.has(channel);
  }

}

Tracing._traceChannels = new Set();

const math$1 = {
  DEG_TO_RAD: Math.PI / 180,
  RAD_TO_DEG: 180 / Math.PI,
  clamp: function (value, min, max) {
    if (value >= max) return max;
    if (value <= min) return min;
    return value;
  },
  intToBytes24: function (i) {
    const r = i >> 16 & 0xff;
    const g = i >> 8 & 0xff;
    const b = i & 0xff;
    return [r, g, b];
  },
  intToBytes32: function (i) {
    const r = i >> 24 & 0xff;
    const g = i >> 16 & 0xff;
    const b = i >> 8 & 0xff;
    const a = i & 0xff;
    return [r, g, b, a];
  },
  bytesToInt24: function (r, g, b) {
    if (r.length) {
      b = r[2];
      g = r[1];
      r = r[0];
    }

    return r << 16 | g << 8 | b;
  },
  bytesToInt32: function (r, g, b, a) {
    if (r.length) {
      a = r[3];
      b = r[2];
      g = r[1];
      r = r[0];
    }

    return (r << 24 | g << 16 | b << 8 | a) >>> 0;
  },
  lerp: function (a, b, alpha) {
    return a + (b - a) * math$1.clamp(alpha, 0, 1);
  },
  lerpAngle: function (a, b, alpha) {
    if (b - a > 180) {
      b -= 360;
    }

    if (b - a < -180) {
      b += 360;
    }

    return math$1.lerp(a, b, math$1.clamp(alpha, 0, 1));
  },
  powerOfTwo: function (x) {
    return x !== 0 && !(x & x - 1);
  },
  nextPowerOfTwo: function (val) {
    val--;
    val |= val >> 1;
    val |= val >> 2;
    val |= val >> 4;
    val |= val >> 8;
    val |= val >> 16;
    val++;
    return val;
  },
  random: function (min, max) {
    const diff = max - min;
    return Math.random() * diff + min;
  },
  smoothstep: function (min, max, x) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  },
  smootherstep: function (min, max, x) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  },
  roundUp: function (numToRound, multiple) {
    if (multiple === 0) return numToRound;
    return Math.ceil(numToRound / multiple) * multiple;
  },
  between: function (num, a, b, inclusive) {
    const min = Math.min(a, b);
    const max = Math.max(a, b);
    return inclusive ? num >= min && num <= max : num > min && num < max;
  }
};

class Http {
  get(url, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    return this.request('GET', url, options, callback);
  }

  post(url, data, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options.postdata = data;
    return this.request('POST', url, options, callback);
  }

  put(url, data, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options.postdata = data;
    return this.request('PUT', url, options, callback);
  }

  del(url, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    return this.request('DELETE', url, options, callback);
  }

  request(method, url, options, callback) {
    let uri, query, postdata;
    let errored = false;

    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    if (options.retry) {
      options = Object.assign({
        retries: 0,
        maxRetries: 5
      }, options);
    }

    options.callback = callback;

    if (options.async == null) {
      options.async = true;
    }

    if (options.headers == null) {
      options.headers = {};
    }

    if (options.postdata != null) {
      if (options.postdata instanceof Document) {
        postdata = options.postdata;
      } else if (options.postdata instanceof FormData) {
        postdata = options.postdata;
      } else if (options.postdata instanceof Object) {
        let contentType = options.headers['Content-Type'];

        if (contentType === undefined) {
          options.headers['Content-Type'] = Http.ContentType.FORM_URLENCODED;
          contentType = options.headers['Content-Type'];
        }

        switch (contentType) {
          case Http.ContentType.FORM_URLENCODED:
            {
              postdata = '';
              let bFirstItem = true;

              for (const key in options.postdata) {
                if (options.postdata.hasOwnProperty(key)) {
                  if (bFirstItem) {
                    bFirstItem = false;
                  } else {
                    postdata += '&';
                  }

                  const encodedKey = encodeURIComponent(key);
                  const encodedValue = encodeURIComponent(options.postdata[key]);
                  postdata += `${encodedKey}=${encodedValue}`;
                }
              }

              break;
            }

          default:
          case Http.ContentType.JSON:
            if (contentType == null) {
              options.headers['Content-Type'] = Http.ContentType.JSON;
            }

            postdata = JSON.stringify(options.postdata);
            break;
        }
      } else {
        postdata = options.postdata;
      }
    }

    if (options.cache === false) {
      const timestamp = now();
      uri = new URI(url);

      if (!uri.query) {
        uri.query = 'ts=' + timestamp;
      } else {
        uri.query = uri.query + '&ts=' + timestamp;
      }

      url = uri.toString();
    }

    if (options.query) {
      uri = new URI(url);
      query = extend$1(uri.getQuery(), options.query);
      uri.setQuery(query);
      url = uri.toString();
    }

    const xhr = new XMLHttpRequest();
    xhr.open(method, url, options.async);
    xhr.withCredentials = options.withCredentials !== undefined ? options.withCredentials : false;
    xhr.responseType = options.responseType || this._guessResponseType(url);

    for (const header in options.headers) {
      if (options.headers.hasOwnProperty(header)) {
        xhr.setRequestHeader(header, options.headers[header]);
      }
    }

    xhr.onreadystatechange = () => {
      this._onReadyStateChange(method, url, options, xhr);
    };

    xhr.onerror = () => {
      this._onError(method, url, options, xhr);

      errored = true;
    };

    try {
      xhr.send(postdata);
    } catch (e) {
      if (!errored) {
        options.error(xhr.status, xhr, e);
      }
    }

    return xhr;
  }

  _guessResponseType(url) {
    const uri = new URI(url);
    const ext = path.getExtension(uri.path);

    if (Http.binaryExtensions.indexOf(ext) >= 0) {
      return Http.ResponseType.ARRAY_BUFFER;
    }

    if (ext === '.xml') {
      return Http.ResponseType.DOCUMENT;
    }

    return Http.ResponseType.TEXT;
  }

  _isBinaryContentType(contentType) {
    const binTypes = [Http.ContentType.MP4, Http.ContentType.WAV, Http.ContentType.OGG, Http.ContentType.MP3, Http.ContentType.BIN, Http.ContentType.DDS, Http.ContentType.BASIS, Http.ContentType.GLB, Http.ContentType.OPUS];

    if (binTypes.indexOf(contentType) >= 0) {
      return true;
    }

    return false;
  }

  _onReadyStateChange(method, url, options, xhr) {
    if (xhr.readyState === 4) {
      switch (xhr.status) {
        case 0:
          {
            if (xhr.responseURL && xhr.responseURL.startsWith('file:///')) {
              this._onSuccess(method, url, options, xhr);
            } else {
              this._onError(method, url, options, xhr);
            }

            break;
          }

        case 200:
        case 201:
        case 206:
        case 304:
          {
            this._onSuccess(method, url, options, xhr);

            break;
          }

        default:
          {
            this._onError(method, url, options, xhr);

            break;
          }
      }
    }
  }

  _onSuccess(method, url, options, xhr) {
    let response;
    let contentType;
    const header = xhr.getResponseHeader('Content-Type');

    if (header) {
      const parts = header.split(';');
      contentType = parts[0].trim();
    }

    try {
      if (contentType === Http.ContentType.JSON || url.split('?')[0].endsWith('.json')) {
        response = JSON.parse(xhr.responseText);
      } else if (this._isBinaryContentType(contentType)) {
        response = xhr.response;
      } else {
        if (xhr.responseType === Http.ResponseType.ARRAY_BUFFER) {
          response = xhr.response;
        } else if (xhr.responseType === Http.ResponseType.BLOB || xhr.responseType === Http.ResponseType.JSON) {
          response = xhr.response;
        } else {
          if (xhr.responseType === Http.ResponseType.DOCUMENT || contentType === Http.ContentType.XML) {
            response = xhr.responseXML;
          } else {
            response = xhr.responseText;
          }
        }
      }

      options.callback(null, response);
    } catch (err) {
      options.callback(err);
    }
  }

  _onError(method, url, options, xhr) {
    if (options.retrying) {
      return;
    }

    if (options.retry && options.retries < options.maxRetries) {
      options.retries++;
      options.retrying = true;
      const retryDelay = math$1.clamp(Math.pow(2, options.retries) * Http.retryDelay, 0, options.maxRetryDelay || 5000);
      console.log(`${method}: ${url} - Error ${xhr.status}. Retrying in ${retryDelay} ms`);
      setTimeout(() => {
        options.retrying = false;
        this.request(method, url, options, options.callback);
      }, retryDelay);
    } else {
      options.callback(xhr.status === 0 ? 'Network error' : xhr.status, null);
    }
  }

}

Http.ContentType = {
  FORM_URLENCODED: 'application/x-www-form-urlencoded',
  GIF: 'image/gif',
  JPEG: 'image/jpeg',
  DDS: 'image/dds',
  JSON: 'application/json',
  PNG: 'image/png',
  TEXT: 'text/plain',
  XML: 'application/xml',
  WAV: 'audio/x-wav',
  OGG: 'audio/ogg',
  MP3: 'audio/mpeg',
  MP4: 'audio/mp4',
  AAC: 'audio/aac',
  BIN: 'application/octet-stream',
  BASIS: 'image/basis',
  GLB: 'model/gltf-binary',
  OPUS: 'audio/ogg; codecs="opus"'
};
Http.ResponseType = {
  TEXT: 'text',
  ARRAY_BUFFER: 'arraybuffer',
  BLOB: 'blob',
  DOCUMENT: 'document',
  JSON: 'json'
};
Http.binaryExtensions = ['.model', '.wav', '.ogg', '.mp3', '.mp4', '.m4a', '.aac', '.dds', '.basis', '.glb', '.opus'];
Http.retryDelay = 100;
const http = new Http();

const CURVE_LINEAR$2 = 0;
const CURVE_SMOOTHSTEP$1 = 1;
const CURVE_CATMULL$1 = 2;
const CURVE_CARDINAL$1 = 3;
const CURVE_SPLINE$2 = 4;
const CURVE_STEP$2 = 5;

class Color {
  constructor(r = 0, g = 0, b = 0, a = 1) {
    const length = r.length;

    if (length === 3 || length === 4) {
      this.r = r[0];
      this.g = r[1];
      this.b = r[2];
      this.a = r[3] !== undefined ? r[3] : 1;
    } else {
      this.r = r;
      this.g = g;
      this.b = b;
      this.a = a;
    }
  }

  clone() {
    const cstr = this.constructor;
    return new cstr(this.r, this.g, this.b, this.a);
  }

  copy(rhs) {
    this.r = rhs.r;
    this.g = rhs.g;
    this.b = rhs.b;
    this.a = rhs.a;
    return this;
  }

  equals(rhs) {
    return this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a;
  }

  set(r, g, b, a = 1) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    return this;
  }

  lerp(lhs, rhs, alpha) {
    this.r = lhs.r + alpha * (rhs.r - lhs.r);
    this.g = lhs.g + alpha * (rhs.g - lhs.g);
    this.b = lhs.b + alpha * (rhs.b - lhs.b);
    this.a = lhs.a + alpha * (rhs.a - lhs.a);
    return this;
  }

  fromString(hex) {
    const i = parseInt(hex.replace('#', '0x'), 16);
    let bytes;

    if (hex.length > 7) {
      bytes = math$1.intToBytes32(i);
    } else {
      bytes = math$1.intToBytes24(i);
      bytes[3] = 255;
    }

    this.set(bytes[0] / 255, bytes[1] / 255, bytes[2] / 255, bytes[3] / 255);
    return this;
  }

  toString(alpha) {
    let s = '#' + ((1 << 24) + (Math.round(this.r * 255) << 16) + (Math.round(this.g * 255) << 8) + Math.round(this.b * 255)).toString(16).slice(1);

    if (alpha === true) {
      const a = Math.round(this.a * 255).toString(16);

      if (this.a < 16 / 255) {
        s += '0' + a;
      } else {
        s += a;
      }
    }

    return s;
  }

}

Color.BLACK = Object.freeze(new Color(0, 0, 0, 1));
Color.BLUE = Object.freeze(new Color(0, 0, 1, 1));
Color.CYAN = Object.freeze(new Color(0, 1, 1, 1));
Color.GRAY = Object.freeze(new Color(0.5, 0.5, 0.5, 1));
Color.GREEN = Object.freeze(new Color(0, 1, 0, 1));
Color.MAGENTA = Object.freeze(new Color(1, 0, 1, 1));
Color.RED = Object.freeze(new Color(1, 0, 0, 1));
Color.WHITE = Object.freeze(new Color(1, 1, 1, 1));
Color.YELLOW = Object.freeze(new Color(1, 1, 0, 1));

class CurveEvaluator$1 {
  constructor(curve, time = 0) {
    this._curve = curve;
    this._left = -Infinity;
    this._right = Infinity;
    this._recip = 0;
    this._p0 = 0;
    this._p1 = 0;
    this._m0 = 0;
    this._m1 = 0;

    this._reset(time);
  }

  evaluate(time, forceReset = false) {
    if (forceReset || time < this._left || time >= this._right) {
      this._reset(time);
    }

    let result;
    const type = this._curve.type;

    if (type === CURVE_STEP$2) {
      result = this._p0;
    } else {
      const t = this._recip === 0 ? 0 : (time - this._left) * this._recip;

      if (type === CURVE_LINEAR$2) {
        result = math$1.lerp(this._p0, this._p1, t);
      } else if (type === CURVE_SMOOTHSTEP$1) {
        result = math$1.lerp(this._p0, this._p1, t * t * (3 - 2 * t));
      } else {
        result = this._evaluateHermite(this._p0, this._p1, this._m0, this._m1, t);
      }
    }

    return result;
  }

  _reset(time) {
    const keys = this._curve.keys;
    const len = keys.length;

    if (!len) {
      this._left = -Infinity;
      this._right = Infinity;
      this._recip = 0;
      this._p0 = this._p1 = this._m0 = this._m1 = 0;
    } else {
      if (time < keys[0][0]) {
        this._left = -Infinity;
        this._right = keys[0][0];
        this._recip = 0;
        this._p0 = this._p1 = keys[0][1];
        this._m0 = this._m1 = 0;
      } else if (time >= keys[len - 1][0]) {
        this._left = keys[len - 1][0];
        this._right = Infinity;
        this._recip = 0;
        this._p0 = this._p1 = keys[len - 1][1];
        this._m0 = this._m1 = 0;
      } else {
        let index = 0;

        while (time >= keys[index + 1][0]) {
          index++;
        }

        this._left = keys[index][0];
        this._right = keys[index + 1][0];
        const diff = 1.0 / (this._right - this._left);
        this._recip = isFinite(diff) ? diff : 0;
        this._p0 = keys[index][1];
        this._p1 = keys[index + 1][1];

        if (this._isHermite()) {
          this._calcTangents(keys, index);
        }
      }
    }
  }

  _isHermite() {
    return this._curve.type === CURVE_CATMULL$1 || this._curve.type === CURVE_CARDINAL$1 || this._curve.type === CURVE_SPLINE$2;
  }

  _calcTangents(keys, index) {
    let a;
    const b = keys[index];
    const c = keys[index + 1];
    let d;

    if (index === 0) {
      a = [keys[0][0] + (keys[0][0] - keys[1][0]), keys[0][1] + (keys[0][1] - keys[1][1])];
    } else {
      a = keys[index - 1];
    }

    if (index === keys.length - 2) {
      d = [keys[index + 1][0] + (keys[index + 1][0] - keys[index][0]), keys[index + 1][1] + (keys[index + 1][1] - keys[index][1])];
    } else {
      d = keys[index + 2];
    }

    if (this._curve.type === CURVE_SPLINE$2) {
      const s1_ = 2 * (c[0] - b[0]) / (c[0] - a[0]);
      const s2_ = 2 * (c[0] - b[0]) / (d[0] - b[0]);
      this._m0 = this._curve.tension * (isFinite(s1_) ? s1_ : 0) * (c[1] - a[1]);
      this._m1 = this._curve.tension * (isFinite(s2_) ? s2_ : 0) * (d[1] - b[1]);
    } else {
      const s1 = (c[0] - b[0]) / (b[0] - a[0]);
      const s2 = (c[0] - b[0]) / (d[0] - c[0]);
      const a_ = b[1] + (a[1] - b[1]) * (isFinite(s1) ? s1 : 0);
      const d_ = c[1] + (d[1] - c[1]) * (isFinite(s2) ? s2 : 0);
      const tension = this._curve.type === CURVE_CATMULL$1 ? 0.5 : this._curve.tension;
      this._m0 = tension * (c[1] - a_);
      this._m1 = tension * (d_ - b[1]);
    }
  }

  _evaluateHermite(p0, p1, m0, m1, t) {
    const t2 = t * t;
    const twot = t + t;
    const omt = 1 - t;
    const omt2 = omt * omt;
    return p0 * ((1 + twot) * omt2) + m0 * (t * omt2) + p1 * (t2 * (3 - twot)) + m1 * (t2 * (t - 1));
  }

}

class Curve$1 {
  constructor(data) {
    this.keys = [];
    this.type = CURVE_SMOOTHSTEP$1;
    this.tension = 0.5;
    this._eval = new CurveEvaluator$1(this);

    if (data) {
      for (let i = 0; i < data.length - 1; i += 2) {
        this.keys.push([data[i], data[i + 1]]);
      }
    }

    this.sort();
  }

  get length() {
    return this.keys.length;
  }

  add(time, value) {
    const keys = this.keys;
    const len = keys.length;
    let i = 0;

    for (; i < len; i++) {
      if (keys[i][0] > time) {
        break;
      }
    }

    const key = [time, value];
    this.keys.splice(i, 0, key);
    return key;
  }

  get(index) {
    return this.keys[index];
  }

  sort() {
    this.keys.sort(function (a, b) {
      return a[0] - b[0];
    });
  }

  value(time) {
    return this._eval.evaluate(time, true);
  }

  closest(time) {
    const keys = this.keys;
    const length = keys.length;
    let min = 2;
    let result = null;

    for (let i = 0; i < length; i++) {
      const diff = Math.abs(time - keys[i][0]);

      if (min >= diff) {
        min = diff;
        result = keys[i];
      } else {
        break;
      }
    }

    return result;
  }

  clone() {
    const result = new this.constructor();
    result.keys = extend$1(result.keys, this.keys);
    result.type = this.type;
    result.tension = this.tension;
    return result;
  }

  quantize(precision) {
    precision = Math.max(precision, 2);
    const values = new Float32Array(precision);
    const step = 1.0 / (precision - 1);
    values[0] = this._eval.evaluate(0, true);

    for (let i = 1; i < precision; i++) {
      values[i] = this._eval.evaluate(step * i);
    }

    return values;
  }

  quantizeClamped(precision, min, max) {
    const result = this.quantize(precision);

    for (let i = 0; i < result.length; ++i) {
      result[i] = Math.min(max, Math.max(min, result[i]));
    }

    return result;
  }

}

class CurveSet$1 {
  constructor() {
    this.curves = [];
    this._type = CURVE_SMOOTHSTEP$1;

    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++) {
        this.curves.push(new Curve$1(arguments[i]));
      }
    } else {
      if (arguments.length === 0) {
        this.curves.push(new Curve$1());
      } else {
        const arg = arguments[0];

        if (typeof arg === 'number') {
          for (let i = 0; i < arg; i++) {
            this.curves.push(new Curve$1());
          }
        } else {
          for (let i = 0; i < arg.length; i++) {
            this.curves.push(new Curve$1(arg[i]));
          }
        }
      }
    }
  }

  get length() {
    return this.curves.length;
  }

  set type(value) {
    this._type = value;

    for (let i = 0; i < this.curves.length; i++) {
      this.curves[i].type = value;
    }
  }

  get type() {
    return this._type;
  }

  get(index) {
    return this.curves[index];
  }

  value(time, result = []) {
    const length = this.curves.length;
    result.length = length;

    for (let i = 0; i < length; i++) {
      result[i] = this.curves[i].value(time);
    }

    return result;
  }

  clone() {
    const result = new this.constructor();
    result.curves = [];

    for (let i = 0; i < this.curves.length; i++) {
      result.curves.push(this.curves[i].clone());
    }

    result._type = this._type;
    return result;
  }

  quantize(precision) {
    precision = Math.max(precision, 2);
    const numCurves = this.curves.length;
    const values = new Float32Array(precision * numCurves);
    const step = 1.0 / (precision - 1);

    for (let c = 0; c < numCurves; c++) {
      const ev = new CurveEvaluator$1(this.curves[c]);

      for (let i = 0; i < precision; i++) {
        values[i * numCurves + c] = ev.evaluate(step * i);
      }
    }

    return values;
  }

  quantizeClamped(precision, min, max) {
    const result = this.quantize(precision);

    for (let i = 0; i < result.length; ++i) {
      result[i] = Math.min(max, Math.max(min, result[i]));
    }

    return result;
  }

}

class Vec3 {
  constructor(x = 0, y = 0, z = 0) {
    if (x.length === 3) {
      this.x = x[0];
      this.y = x[1];
      this.z = x[2];
    } else {
      this.x = x;
      this.y = y;
      this.z = z;
    }
  }

  add(rhs) {
    this.x += rhs.x;
    this.y += rhs.y;
    this.z += rhs.z;
    return this;
  }

  add2(lhs, rhs) {
    this.x = lhs.x + rhs.x;
    this.y = lhs.y + rhs.y;
    this.z = lhs.z + rhs.z;
    return this;
  }

  addScalar(scalar) {
    this.x += scalar;
    this.y += scalar;
    this.z += scalar;
    return this;
  }

  clone() {
    const cstr = this.constructor;
    return new cstr(this.x, this.y, this.z);
  }

  copy(rhs) {
    this.x = rhs.x;
    this.y = rhs.y;
    this.z = rhs.z;
    return this;
  }

  cross(lhs, rhs) {
    const lx = lhs.x;
    const ly = lhs.y;
    const lz = lhs.z;
    const rx = rhs.x;
    const ry = rhs.y;
    const rz = rhs.z;
    this.x = ly * rz - ry * lz;
    this.y = lz * rx - rz * lx;
    this.z = lx * ry - rx * ly;
    return this;
  }

  distance(rhs) {
    const x = this.x - rhs.x;
    const y = this.y - rhs.y;
    const z = this.z - rhs.z;
    return Math.sqrt(x * x + y * y + z * z);
  }

  div(rhs) {
    this.x /= rhs.x;
    this.y /= rhs.y;
    this.z /= rhs.z;
    return this;
  }

  div2(lhs, rhs) {
    this.x = lhs.x / rhs.x;
    this.y = lhs.y / rhs.y;
    this.z = lhs.z / rhs.z;
    return this;
  }

  divScalar(scalar) {
    this.x /= scalar;
    this.y /= scalar;
    this.z /= scalar;
    return this;
  }

  dot(rhs) {
    return this.x * rhs.x + this.y * rhs.y + this.z * rhs.z;
  }

  equals(rhs) {
    return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z;
  }

  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }

  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }

  lerp(lhs, rhs, alpha) {
    this.x = lhs.x + alpha * (rhs.x - lhs.x);
    this.y = lhs.y + alpha * (rhs.y - lhs.y);
    this.z = lhs.z + alpha * (rhs.z - lhs.z);
    return this;
  }

  mul(rhs) {
    this.x *= rhs.x;
    this.y *= rhs.y;
    this.z *= rhs.z;
    return this;
  }

  mul2(lhs, rhs) {
    this.x = lhs.x * rhs.x;
    this.y = lhs.y * rhs.y;
    this.z = lhs.z * rhs.z;
    return this;
  }

  mulScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  }

  normalize() {
    const lengthSq = this.x * this.x + this.y * this.y + this.z * this.z;

    if (lengthSq > 0) {
      const invLength = 1 / Math.sqrt(lengthSq);
      this.x *= invLength;
      this.y *= invLength;
      this.z *= invLength;
    }

    return this;
  }

  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }

  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }

  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }

  min(rhs) {
    if (rhs.x < this.x) this.x = rhs.x;
    if (rhs.y < this.y) this.y = rhs.y;
    if (rhs.z < this.z) this.z = rhs.z;
    return this;
  }

  max(rhs) {
    if (rhs.x > this.x) this.x = rhs.x;
    if (rhs.y > this.y) this.y = rhs.y;
    if (rhs.z > this.z) this.z = rhs.z;
    return this;
  }

  project(rhs) {
    const a_dot_b = this.x * rhs.x + this.y * rhs.y + this.z * rhs.z;
    const b_dot_b = rhs.x * rhs.x + rhs.y * rhs.y + rhs.z * rhs.z;
    const s = a_dot_b / b_dot_b;
    this.x = rhs.x * s;
    this.y = rhs.y * s;
    this.z = rhs.z * s;
    return this;
  }

  set(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }

  sub(rhs) {
    this.x -= rhs.x;
    this.y -= rhs.y;
    this.z -= rhs.z;
    return this;
  }

  sub2(lhs, rhs) {
    this.x = lhs.x - rhs.x;
    this.y = lhs.y - rhs.y;
    this.z = lhs.z - rhs.z;
    return this;
  }

  subScalar(scalar) {
    this.x -= scalar;
    this.y -= scalar;
    this.z -= scalar;
    return this;
  }

  toString() {
    return `[${this.x}, ${this.y}, ${this.z}]`;
  }

}

Vec3.ZERO = Object.freeze(new Vec3(0, 0, 0));
Vec3.ONE = Object.freeze(new Vec3(1, 1, 1));
Vec3.UP = Object.freeze(new Vec3(0, 1, 0));
Vec3.DOWN = Object.freeze(new Vec3(0, -1, 0));
Vec3.RIGHT = Object.freeze(new Vec3(1, 0, 0));
Vec3.LEFT = Object.freeze(new Vec3(-1, 0, 0));
Vec3.FORWARD = Object.freeze(new Vec3(0, 0, -1));
Vec3.BACK = Object.freeze(new Vec3(0, 0, 1));

class Mat3 {
  constructor() {
    const data = new Float32Array(9);
    data[0] = data[4] = data[8] = 1;
    this.data = data;
  }

  clone() {
    const cstr = this.constructor;
    return new cstr().copy(this);
  }

  copy(rhs) {
    const src = rhs.data;
    const dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    return this;
  }

  set(src) {
    const dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    return this;
  }

  equals(rhs) {
    const l = this.data;
    const r = rhs.data;
    return l[0] === r[0] && l[1] === r[1] && l[2] === r[2] && l[3] === r[3] && l[4] === r[4] && l[5] === r[5] && l[6] === r[6] && l[7] === r[7] && l[8] === r[8];
  }

  isIdentity() {
    const m = this.data;
    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 1 && m[5] === 0 && m[6] === 0 && m[7] === 0 && m[8] === 1;
  }

  setIdentity() {
    const m = this.data;
    m[0] = 1;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 1;
    m[5] = 0;
    m[6] = 0;
    m[7] = 0;
    m[8] = 1;
    return this;
  }

  toString() {
    return '[' + this.data.join(', ') + ']';
  }

  transpose() {
    const m = this.data;
    let tmp;
    tmp = m[1];
    m[1] = m[3];
    m[3] = tmp;
    tmp = m[2];
    m[2] = m[6];
    m[6] = tmp;
    tmp = m[5];
    m[5] = m[7];
    m[7] = tmp;
    return this;
  }

  setFromMat4(m) {
    const src = m.data;
    const dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[4];
    dst[4] = src[5];
    dst[5] = src[6];
    dst[6] = src[8];
    dst[7] = src[9];
    dst[8] = src[10];
    return this;
  }

  transformVector(vec, res = new Vec3()) {
    const m = this.data;
    const x = vec.x;
    const y = vec.y;
    const z = vec.z;
    res.x = x * m[0] + y * m[3] + z * m[6];
    res.y = x * m[1] + y * m[4] + z * m[7];
    res.z = x * m[2] + y * m[5] + z * m[8];
    return res;
  }

}

Mat3.IDENTITY = Object.freeze(new Mat3());
Mat3.ZERO = Object.freeze(new Mat3().set([0, 0, 0, 0, 0, 0, 0, 0, 0]));

class Vec2 {
  constructor(x = 0, y = 0) {
    if (x.length === 2) {
      this.x = x[0];
      this.y = x[1];
    } else {
      this.x = x;
      this.y = y;
    }
  }

  add(rhs) {
    this.x += rhs.x;
    this.y += rhs.y;
    return this;
  }

  add2(lhs, rhs) {
    this.x = lhs.x + rhs.x;
    this.y = lhs.y + rhs.y;
    return this;
  }

  addScalar(scalar) {
    this.x += scalar;
    this.y += scalar;
    return this;
  }

  clone() {
    const cstr = this.constructor;
    return new cstr(this.x, this.y);
  }

  copy(rhs) {
    this.x = rhs.x;
    this.y = rhs.y;
    return this;
  }

  cross(rhs) {
    return this.x * rhs.y - this.y * rhs.x;
  }

  distance(rhs) {
    const x = this.x - rhs.x;
    const y = this.y - rhs.y;
    return Math.sqrt(x * x + y * y);
  }

  div(rhs) {
    this.x /= rhs.x;
    this.y /= rhs.y;
    return this;
  }

  div2(lhs, rhs) {
    this.x = lhs.x / rhs.x;
    this.y = lhs.y / rhs.y;
    return this;
  }

  divScalar(scalar) {
    this.x /= scalar;
    this.y /= scalar;
    return this;
  }

  dot(rhs) {
    return this.x * rhs.x + this.y * rhs.y;
  }

  equals(rhs) {
    return this.x === rhs.x && this.y === rhs.y;
  }

  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }

  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }

  lerp(lhs, rhs, alpha) {
    this.x = lhs.x + alpha * (rhs.x - lhs.x);
    this.y = lhs.y + alpha * (rhs.y - lhs.y);
    return this;
  }

  mul(rhs) {
    this.x *= rhs.x;
    this.y *= rhs.y;
    return this;
  }

  mul2(lhs, rhs) {
    this.x = lhs.x * rhs.x;
    this.y = lhs.y * rhs.y;
    return this;
  }

  mulScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }

  normalize() {
    const lengthSq = this.x * this.x + this.y * this.y;

    if (lengthSq > 0) {
      const invLength = 1 / Math.sqrt(lengthSq);
      this.x *= invLength;
      this.y *= invLength;
    }

    return this;
  }

  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }

  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }

  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }

  min(rhs) {
    if (rhs.x < this.x) this.x = rhs.x;
    if (rhs.y < this.y) this.y = rhs.y;
    return this;
  }

  max(rhs) {
    if (rhs.x > this.x) this.x = rhs.x;
    if (rhs.y > this.y) this.y = rhs.y;
    return this;
  }

  set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }

  sub(rhs) {
    this.x -= rhs.x;
    this.y -= rhs.y;
    return this;
  }

  sub2(lhs, rhs) {
    this.x = lhs.x - rhs.x;
    this.y = lhs.y - rhs.y;
    return this;
  }

  subScalar(scalar) {
    this.x -= scalar;
    this.y -= scalar;
    return this;
  }

  toString() {
    return `[${this.x}, ${this.y}]`;
  }

  static angleRad(lhs, rhs) {
    return Math.atan2(lhs.x * rhs.y - lhs.y * rhs.x, lhs.x * rhs.x + lhs.y * rhs.y);
  }

}

Vec2.ZERO = Object.freeze(new Vec2(0, 0));
Vec2.ONE = Object.freeze(new Vec2(1, 1));
Vec2.UP = Object.freeze(new Vec2(0, 1));
Vec2.DOWN = Object.freeze(new Vec2(0, -1));
Vec2.RIGHT = Object.freeze(new Vec2(1, 0));
Vec2.LEFT = Object.freeze(new Vec2(-1, 0));

class Vec4 {
  constructor(x = 0, y = 0, z = 0, w = 0) {
    if (x.length === 4) {
      this.x = x[0];
      this.y = x[1];
      this.z = x[2];
      this.w = x[3];
    } else {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
  }

  add(rhs) {
    this.x += rhs.x;
    this.y += rhs.y;
    this.z += rhs.z;
    this.w += rhs.w;
    return this;
  }

  add2(lhs, rhs) {
    this.x = lhs.x + rhs.x;
    this.y = lhs.y + rhs.y;
    this.z = lhs.z + rhs.z;
    this.w = lhs.w + rhs.w;
    return this;
  }

  addScalar(scalar) {
    this.x += scalar;
    this.y += scalar;
    this.z += scalar;
    this.w += scalar;
    return this;
  }

  clone() {
    const cstr = this.constructor;
    return new cstr(this.x, this.y, this.z, this.w);
  }

  copy(rhs) {
    this.x = rhs.x;
    this.y = rhs.y;
    this.z = rhs.z;
    this.w = rhs.w;
    return this;
  }

  div(rhs) {
    this.x /= rhs.x;
    this.y /= rhs.y;
    this.z /= rhs.z;
    this.w /= rhs.w;
    return this;
  }

  div2(lhs, rhs) {
    this.x = lhs.x / rhs.x;
    this.y = lhs.y / rhs.y;
    this.z = lhs.z / rhs.z;
    this.w = lhs.w / rhs.w;
    return this;
  }

  divScalar(scalar) {
    this.x /= scalar;
    this.y /= scalar;
    this.z /= scalar;
    this.w /= scalar;
    return this;
  }

  dot(rhs) {
    return this.x * rhs.x + this.y * rhs.y + this.z * rhs.z + this.w * rhs.w;
  }

  equals(rhs) {
    return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z && this.w === rhs.w;
  }

  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }

  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }

  lerp(lhs, rhs, alpha) {
    this.x = lhs.x + alpha * (rhs.x - lhs.x);
    this.y = lhs.y + alpha * (rhs.y - lhs.y);
    this.z = lhs.z + alpha * (rhs.z - lhs.z);
    this.w = lhs.w + alpha * (rhs.w - lhs.w);
    return this;
  }

  mul(rhs) {
    this.x *= rhs.x;
    this.y *= rhs.y;
    this.z *= rhs.z;
    this.w *= rhs.w;
    return this;
  }

  mul2(lhs, rhs) {
    this.x = lhs.x * rhs.x;
    this.y = lhs.y * rhs.y;
    this.z = lhs.z * rhs.z;
    this.w = lhs.w * rhs.w;
    return this;
  }

  mulScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
    return this;
  }

  normalize() {
    const lengthSq = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

    if (lengthSq > 0) {
      const invLength = 1 / Math.sqrt(lengthSq);
      this.x *= invLength;
      this.y *= invLength;
      this.z *= invLength;
      this.w *= invLength;
    }

    return this;
  }

  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }

  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }

  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }

  min(rhs) {
    if (rhs.x < this.x) this.x = rhs.x;
    if (rhs.y < this.y) this.y = rhs.y;
    if (rhs.z < this.z) this.z = rhs.z;
    if (rhs.w < this.w) this.w = rhs.w;
    return this;
  }

  max(rhs) {
    if (rhs.x > this.x) this.x = rhs.x;
    if (rhs.y > this.y) this.y = rhs.y;
    if (rhs.z > this.z) this.z = rhs.z;
    if (rhs.w > this.w) this.w = rhs.w;
    return this;
  }

  set(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  }

  sub(rhs) {
    this.x -= rhs.x;
    this.y -= rhs.y;
    this.z -= rhs.z;
    this.w -= rhs.w;
    return this;
  }

  sub2(lhs, rhs) {
    this.x = lhs.x - rhs.x;
    this.y = lhs.y - rhs.y;
    this.z = lhs.z - rhs.z;
    this.w = lhs.w - rhs.w;
    return this;
  }

  subScalar(scalar) {
    this.x -= scalar;
    this.y -= scalar;
    this.z -= scalar;
    this.w -= scalar;
    return this;
  }

  toString() {
    return `[${this.x}, ${this.y}, ${this.z}, ${this.w}]`;
  }

}

Vec4.ZERO = Object.freeze(new Vec4(0, 0, 0, 0));
Vec4.ONE = Object.freeze(new Vec4(1, 1, 1, 1));

const _halfSize$1 = new Vec2();

const x = new Vec3();
const y = new Vec3();
const z = new Vec3();
const scale = new Vec3();

class Mat4 {
  constructor() {
    const data = new Float32Array(16);
    data[0] = data[5] = data[10] = data[15] = 1;
    this.data = data;
  }

  static _getPerspectiveHalfSize(halfSize, fov, aspect, znear, fovIsHorizontal) {
    if (fovIsHorizontal) {
      halfSize.x = znear * Math.tan(fov * Math.PI / 360);
      halfSize.y = halfSize.x / aspect;
    } else {
      halfSize.y = znear * Math.tan(fov * Math.PI / 360);
      halfSize.x = halfSize.y * aspect;
    }
  }

  add2(lhs, rhs) {
    const a = lhs.data,
          b = rhs.data,
          r = this.data;
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    r[3] = a[3] + b[3];
    r[4] = a[4] + b[4];
    r[5] = a[5] + b[5];
    r[6] = a[6] + b[6];
    r[7] = a[7] + b[7];
    r[8] = a[8] + b[8];
    r[9] = a[9] + b[9];
    r[10] = a[10] + b[10];
    r[11] = a[11] + b[11];
    r[12] = a[12] + b[12];
    r[13] = a[13] + b[13];
    r[14] = a[14] + b[14];
    r[15] = a[15] + b[15];
    return this;
  }

  add(rhs) {
    return this.add2(this, rhs);
  }

  clone() {
    const cstr = this.constructor;
    return new cstr().copy(this);
  }

  copy(rhs) {
    const src = rhs.data,
          dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    dst[9] = src[9];
    dst[10] = src[10];
    dst[11] = src[11];
    dst[12] = src[12];
    dst[13] = src[13];
    dst[14] = src[14];
    dst[15] = src[15];
    return this;
  }

  equals(rhs) {
    const l = this.data,
          r = rhs.data;
    return l[0] === r[0] && l[1] === r[1] && l[2] === r[2] && l[3] === r[3] && l[4] === r[4] && l[5] === r[5] && l[6] === r[6] && l[7] === r[7] && l[8] === r[8] && l[9] === r[9] && l[10] === r[10] && l[11] === r[11] && l[12] === r[12] && l[13] === r[13] && l[14] === r[14] && l[15] === r[15];
  }

  isIdentity() {
    const m = this.data;
    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 0 && m[5] === 1 && m[6] === 0 && m[7] === 0 && m[8] === 0 && m[9] === 0 && m[10] === 1 && m[11] === 0 && m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1;
  }

  mul2(lhs, rhs) {
    const a = lhs.data;
    const b = rhs.data;
    const r = this.data;
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];
    let b0, b1, b2, b3;
    b0 = b[0];
    b1 = b[1];
    b2 = b[2];
    b3 = b[3];
    r[0] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;
    r[1] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;
    r[2] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;
    r[3] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    r[4] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;
    r[5] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;
    r[6] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;
    r[7] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    r[8] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;
    r[9] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;
    r[10] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;
    r[11] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    r[12] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;
    r[13] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;
    r[14] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;
    r[15] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;
    return this;
  }

  mulAffine2(lhs, rhs) {
    const a = lhs.data;
    const b = rhs.data;
    const r = this.data;
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    let b0, b1, b2;
    b0 = b[0];
    b1 = b[1];
    b2 = b[2];
    r[0] = a00 * b0 + a10 * b1 + a20 * b2;
    r[1] = a01 * b0 + a11 * b1 + a21 * b2;
    r[2] = a02 * b0 + a12 * b1 + a22 * b2;
    r[3] = 0;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    r[4] = a00 * b0 + a10 * b1 + a20 * b2;
    r[5] = a01 * b0 + a11 * b1 + a21 * b2;
    r[6] = a02 * b0 + a12 * b1 + a22 * b2;
    r[7] = 0;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    r[8] = a00 * b0 + a10 * b1 + a20 * b2;
    r[9] = a01 * b0 + a11 * b1 + a21 * b2;
    r[10] = a02 * b0 + a12 * b1 + a22 * b2;
    r[11] = 0;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    r[12] = a00 * b0 + a10 * b1 + a20 * b2 + a30;
    r[13] = a01 * b0 + a11 * b1 + a21 * b2 + a31;
    r[14] = a02 * b0 + a12 * b1 + a22 * b2 + a32;
    r[15] = 1;
    return this;
  }

  mul(rhs) {
    return this.mul2(this, rhs);
  }

  transformPoint(vec, res = new Vec3()) {
    const m = this.data;
    const x = vec.x;
    const y = vec.y;
    const z = vec.z;
    res.x = x * m[0] + y * m[4] + z * m[8] + m[12];
    res.y = x * m[1] + y * m[5] + z * m[9] + m[13];
    res.z = x * m[2] + y * m[6] + z * m[10] + m[14];
    return res;
  }

  transformVector(vec, res = new Vec3()) {
    const m = this.data;
    const x = vec.x;
    const y = vec.y;
    const z = vec.z;
    res.x = x * m[0] + y * m[4] + z * m[8];
    res.y = x * m[1] + y * m[5] + z * m[9];
    res.z = x * m[2] + y * m[6] + z * m[10];
    return res;
  }

  transformVec4(vec, res = new Vec4()) {
    const m = this.data;
    const x = vec.x;
    const y = vec.y;
    const z = vec.z;
    const w = vec.w;
    res.x = x * m[0] + y * m[4] + z * m[8] + w * m[12];
    res.y = x * m[1] + y * m[5] + z * m[9] + w * m[13];
    res.z = x * m[2] + y * m[6] + z * m[10] + w * m[14];
    res.w = x * m[3] + y * m[7] + z * m[11] + w * m[15];
    return res;
  }

  setLookAt(position, target, up) {
    z.sub2(position, target).normalize();
    y.copy(up).normalize();
    x.cross(y, z).normalize();
    y.cross(z, x);
    const r = this.data;
    r[0] = x.x;
    r[1] = x.y;
    r[2] = x.z;
    r[3] = 0;
    r[4] = y.x;
    r[5] = y.y;
    r[6] = y.z;
    r[7] = 0;
    r[8] = z.x;
    r[9] = z.y;
    r[10] = z.z;
    r[11] = 0;
    r[12] = position.x;
    r[13] = position.y;
    r[14] = position.z;
    r[15] = 1;
    return this;
  }

  setFrustum(left, right, bottom, top, znear, zfar) {
    const temp1 = 2 * znear;
    const temp2 = right - left;
    const temp3 = top - bottom;
    const temp4 = zfar - znear;
    const r = this.data;
    r[0] = temp1 / temp2;
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = temp1 / temp3;
    r[6] = 0;
    r[7] = 0;
    r[8] = (right + left) / temp2;
    r[9] = (top + bottom) / temp3;
    r[10] = (-zfar - znear) / temp4;
    r[11] = -1;
    r[12] = 0;
    r[13] = 0;
    r[14] = -temp1 * zfar / temp4;
    r[15] = 0;
    return this;
  }

  setPerspective(fov, aspect, znear, zfar, fovIsHorizontal) {
    Mat4._getPerspectiveHalfSize(_halfSize$1, fov, aspect, znear, fovIsHorizontal);

    return this.setFrustum(-_halfSize$1.x, _halfSize$1.x, -_halfSize$1.y, _halfSize$1.y, znear, zfar);
  }

  setOrtho(left, right, bottom, top, near, far) {
    const r = this.data;
    r[0] = 2 / (right - left);
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 2 / (top - bottom);
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = -2 / (far - near);
    r[11] = 0;
    r[12] = -(right + left) / (right - left);
    r[13] = -(top + bottom) / (top - bottom);
    r[14] = -(far + near) / (far - near);
    r[15] = 1;
    return this;
  }

  setFromAxisAngle(axis, angle) {
    angle *= math$1.DEG_TO_RAD;
    const x = axis.x;
    const y = axis.y;
    const z = axis.z;
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    const t = 1 - c;
    const tx = t * x;
    const ty = t * y;
    const m = this.data;
    m[0] = tx * x + c;
    m[1] = tx * y + s * z;
    m[2] = tx * z - s * y;
    m[3] = 0;
    m[4] = tx * y - s * z;
    m[5] = ty * y + c;
    m[6] = ty * z + s * x;
    m[7] = 0;
    m[8] = tx * z + s * y;
    m[9] = ty * z - x * s;
    m[10] = t * z * z + c;
    m[11] = 0;
    m[12] = 0;
    m[13] = 0;
    m[14] = 0;
    m[15] = 1;
    return this;
  }

  setTranslate(x, y, z) {
    const m = this.data;
    m[0] = 1;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 0;
    m[5] = 1;
    m[6] = 0;
    m[7] = 0;
    m[8] = 0;
    m[9] = 0;
    m[10] = 1;
    m[11] = 0;
    m[12] = x;
    m[13] = y;
    m[14] = z;
    m[15] = 1;
    return this;
  }

  setScale(x, y, z) {
    const m = this.data;
    m[0] = x;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 0;
    m[5] = y;
    m[6] = 0;
    m[7] = 0;
    m[8] = 0;
    m[9] = 0;
    m[10] = z;
    m[11] = 0;
    m[12] = 0;
    m[13] = 0;
    m[14] = 0;
    m[15] = 1;
    return this;
  }

  setViewport(x, y, width, height) {
    const m = this.data;
    m[0] = width * 0.5;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 0;
    m[5] = height * 0.5;
    m[6] = 0;
    m[7] = 0;
    m[8] = 0;
    m[9] = 0;
    m[10] = 0.5;
    m[11] = 0;
    m[12] = x + width * 0.5;
    m[13] = y + height * 0.5;
    m[14] = 0.5;
    m[15] = 1;
    return this;
  }

  invert() {
    const m = this.data;
    const a00 = m[0];
    const a01 = m[1];
    const a02 = m[2];
    const a03 = m[3];
    const a10 = m[4];
    const a11 = m[5];
    const a12 = m[6];
    const a13 = m[7];
    const a20 = m[8];
    const a21 = m[9];
    const a22 = m[10];
    const a23 = m[11];
    const a30 = m[12];
    const a31 = m[13];
    const a32 = m[14];
    const a33 = m[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    const det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (det === 0) {
      this.setIdentity();
    } else {
      const invDet = 1 / det;
      m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      m[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      m[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      m[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      m[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      m[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      m[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      m[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      m[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
    }

    return this;
  }

  set(src) {
    const dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    dst[9] = src[9];
    dst[10] = src[10];
    dst[11] = src[11];
    dst[12] = src[12];
    dst[13] = src[13];
    dst[14] = src[14];
    dst[15] = src[15];
    return this;
  }

  setIdentity() {
    const m = this.data;
    m[0] = 1;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 0;
    m[5] = 1;
    m[6] = 0;
    m[7] = 0;
    m[8] = 0;
    m[9] = 0;
    m[10] = 1;
    m[11] = 0;
    m[12] = 0;
    m[13] = 0;
    m[14] = 0;
    m[15] = 1;
    return this;
  }

  setTRS(t, r, s) {
    const qx = r.x;
    const qy = r.y;
    const qz = r.z;
    const qw = r.w;
    const sx = s.x;
    const sy = s.y;
    const sz = s.z;
    const x2 = qx + qx;
    const y2 = qy + qy;
    const z2 = qz + qz;
    const xx = qx * x2;
    const xy = qx * y2;
    const xz = qx * z2;
    const yy = qy * y2;
    const yz = qy * z2;
    const zz = qz * z2;
    const wx = qw * x2;
    const wy = qw * y2;
    const wz = qw * z2;
    const m = this.data;
    m[0] = (1 - (yy + zz)) * sx;
    m[1] = (xy + wz) * sx;
    m[2] = (xz - wy) * sx;
    m[3] = 0;
    m[4] = (xy - wz) * sy;
    m[5] = (1 - (xx + zz)) * sy;
    m[6] = (yz + wx) * sy;
    m[7] = 0;
    m[8] = (xz + wy) * sz;
    m[9] = (yz - wx) * sz;
    m[10] = (1 - (xx + yy)) * sz;
    m[11] = 0;
    m[12] = t.x;
    m[13] = t.y;
    m[14] = t.z;
    m[15] = 1;
    return this;
  }

  transpose() {
    let tmp;
    const m = this.data;
    tmp = m[1];
    m[1] = m[4];
    m[4] = tmp;
    tmp = m[2];
    m[2] = m[8];
    m[8] = tmp;
    tmp = m[3];
    m[3] = m[12];
    m[12] = tmp;
    tmp = m[6];
    m[6] = m[9];
    m[9] = tmp;
    tmp = m[7];
    m[7] = m[13];
    m[13] = tmp;
    tmp = m[11];
    m[11] = m[14];
    m[14] = tmp;
    return this;
  }

  invertTo3x3(res) {
    const m = this.data;
    const r = res.data;
    const m0 = m[0];
    const m1 = m[1];
    const m2 = m[2];
    const m4 = m[4];
    const m5 = m[5];
    const m6 = m[6];
    const m8 = m[8];
    const m9 = m[9];
    const m10 = m[10];
    const a11 = m10 * m5 - m6 * m9;
    const a21 = -m10 * m1 + m2 * m9;
    const a31 = m6 * m1 - m2 * m5;
    const a12 = -m10 * m4 + m6 * m8;
    const a22 = m10 * m0 - m2 * m8;
    const a32 = -m6 * m0 + m2 * m4;
    const a13 = m9 * m4 - m5 * m8;
    const a23 = -m9 * m0 + m1 * m8;
    const a33 = m5 * m0 - m1 * m4;
    const det = m0 * a11 + m1 * a12 + m2 * a13;

    if (det === 0) {
      return this;
    }

    const idet = 1 / det;
    r[0] = idet * a11;
    r[1] = idet * a21;
    r[2] = idet * a31;
    r[3] = idet * a12;
    r[4] = idet * a22;
    r[5] = idet * a32;
    r[6] = idet * a13;
    r[7] = idet * a23;
    r[8] = idet * a33;
    return this;
  }

  getTranslation(t = new Vec3()) {
    return t.set(this.data[12], this.data[13], this.data[14]);
  }

  getX(x = new Vec3()) {
    return x.set(this.data[0], this.data[1], this.data[2]);
  }

  getY(y = new Vec3()) {
    return y.set(this.data[4], this.data[5], this.data[6]);
  }

  getZ(z = new Vec3()) {
    return z.set(this.data[8], this.data[9], this.data[10]);
  }

  getScale(scale = new Vec3()) {
    this.getX(x);
    this.getY(y);
    this.getZ(z);
    scale.set(x.length(), y.length(), z.length());
    return scale;
  }

  setFromEulerAngles(ex, ey, ez) {
    ex *= math$1.DEG_TO_RAD;
    ey *= math$1.DEG_TO_RAD;
    ez *= math$1.DEG_TO_RAD;
    const s1 = Math.sin(-ex);
    const c1 = Math.cos(-ex);
    const s2 = Math.sin(-ey);
    const c2 = Math.cos(-ey);
    const s3 = Math.sin(-ez);
    const c3 = Math.cos(-ez);
    const m = this.data;
    m[0] = c2 * c3;
    m[1] = -c2 * s3;
    m[2] = s2;
    m[3] = 0;
    m[4] = c1 * s3 + c3 * s1 * s2;
    m[5] = c1 * c3 - s1 * s2 * s3;
    m[6] = -c2 * s1;
    m[7] = 0;
    m[8] = s1 * s3 - c1 * c3 * s2;
    m[9] = c3 * s1 + c1 * s2 * s3;
    m[10] = c1 * c2;
    m[11] = 0;
    m[12] = 0;
    m[13] = 0;
    m[14] = 0;
    m[15] = 1;
    return this;
  }

  getEulerAngles(eulers = new Vec3()) {
    this.getScale(scale);
    const sx = scale.x;
    const sy = scale.y;
    const sz = scale.z;
    if (sx === 0 || sy === 0 || sz === 0) return eulers.set(0, 0, 0);
    const m = this.data;
    const y = Math.asin(-m[2] / sx);
    const halfPi = Math.PI * 0.5;
    let x, z;

    if (y < halfPi) {
      if (y > -halfPi) {
        x = Math.atan2(m[6] / sy, m[10] / sz);
        z = Math.atan2(m[1] / sx, m[0] / sx);
      } else {
        z = 0;
        x = -Math.atan2(m[4] / sy, m[5] / sy);
      }
    } else {
      z = 0;
      x = Math.atan2(m[4] / sy, m[5] / sy);
    }

    return eulers.set(x, y, z).mulScalar(math$1.RAD_TO_DEG);
  }

  toString() {
    return '[' + this.data.join(', ') + ']';
  }

}

Mat4.IDENTITY = Object.freeze(new Mat4());
Mat4.ZERO = Object.freeze(new Mat4().set([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));

class Quat {
  constructor(x = 0, y = 0, z = 0, w = 1) {
    if (x.length === 4) {
      this.x = x[0];
      this.y = x[1];
      this.z = x[2];
      this.w = x[3];
    } else {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
  }

  clone() {
    const cstr = this.constructor;
    return new cstr(this.x, this.y, this.z, this.w);
  }

  conjugate() {
    this.x *= -1;
    this.y *= -1;
    this.z *= -1;
    return this;
  }

  copy(rhs) {
    this.x = rhs.x;
    this.y = rhs.y;
    this.z = rhs.z;
    this.w = rhs.w;
    return this;
  }

  equals(rhs) {
    return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z && this.w === rhs.w;
  }

  getAxisAngle(axis) {
    let rad = Math.acos(this.w) * 2;
    const s = Math.sin(rad / 2);

    if (s !== 0) {
      axis.x = this.x / s;
      axis.y = this.y / s;
      axis.z = this.z / s;

      if (axis.x < 0 || axis.y < 0 || axis.z < 0) {
        axis.x *= -1;
        axis.y *= -1;
        axis.z *= -1;
        rad *= -1;
      }
    } else {
      axis.x = 1;
      axis.y = 0;
      axis.z = 0;
    }

    return rad * math$1.RAD_TO_DEG;
  }

  getEulerAngles(eulers = new Vec3()) {
    let x, y, z;
    const qx = this.x;
    const qy = this.y;
    const qz = this.z;
    const qw = this.w;
    const a2 = 2 * (qw * qy - qx * qz);

    if (a2 <= -0.99999) {
      x = 2 * Math.atan2(qx, qw);
      y = -Math.PI / 2;
      z = 0;
    } else if (a2 >= 0.99999) {
      x = 2 * Math.atan2(qx, qw);
      y = Math.PI / 2;
      z = 0;
    } else {
      x = Math.atan2(2 * (qw * qx + qy * qz), 1 - 2 * (qx * qx + qy * qy));
      y = Math.asin(a2);
      z = Math.atan2(2 * (qw * qz + qx * qy), 1 - 2 * (qy * qy + qz * qz));
    }

    return eulers.set(x, y, z).mulScalar(math$1.RAD_TO_DEG);
  }

  invert() {
    return this.conjugate().normalize();
  }

  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }

  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }

  mul(rhs) {
    const q1x = this.x;
    const q1y = this.y;
    const q1z = this.z;
    const q1w = this.w;
    const q2x = rhs.x;
    const q2y = rhs.y;
    const q2z = rhs.z;
    const q2w = rhs.w;
    this.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;
    this.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;
    this.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;
    this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
    return this;
  }

  mul2(lhs, rhs) {
    const q1x = lhs.x;
    const q1y = lhs.y;
    const q1z = lhs.z;
    const q1w = lhs.w;
    const q2x = rhs.x;
    const q2y = rhs.y;
    const q2z = rhs.z;
    const q2w = rhs.w;
    this.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;
    this.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;
    this.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;
    this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
    return this;
  }

  normalize() {
    let len = this.length();

    if (len === 0) {
      this.x = this.y = this.z = 0;
      this.w = 1;
    } else {
      len = 1 / len;
      this.x *= len;
      this.y *= len;
      this.z *= len;
      this.w *= len;
    }

    return this;
  }

  set(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  }

  setFromAxisAngle(axis, angle) {
    angle *= 0.5 * math$1.DEG_TO_RAD;
    const sa = Math.sin(angle);
    const ca = Math.cos(angle);
    this.x = sa * axis.x;
    this.y = sa * axis.y;
    this.z = sa * axis.z;
    this.w = ca;
    return this;
  }

  setFromEulerAngles(ex, ey, ez) {
    if (ex instanceof Vec3) {
      const vec = ex;
      ex = vec.x;
      ey = vec.y;
      ez = vec.z;
    }

    const halfToRad = 0.5 * math$1.DEG_TO_RAD;
    ex *= halfToRad;
    ey *= halfToRad;
    ez *= halfToRad;
    const sx = Math.sin(ex);
    const cx = Math.cos(ex);
    const sy = Math.sin(ey);
    const cy = Math.cos(ey);
    const sz = Math.sin(ez);
    const cz = Math.cos(ez);
    this.x = sx * cy * cz - cx * sy * sz;
    this.y = cx * sy * cz + sx * cy * sz;
    this.z = cx * cy * sz - sx * sy * cz;
    this.w = cx * cy * cz + sx * sy * sz;
    return this;
  }

  setFromMat4(m) {
    let m00, m01, m02, m10, m11, m12, m20, m21, m22, s, rs, lx, ly, lz;
    m = m.data;
    m00 = m[0];
    m01 = m[1];
    m02 = m[2];
    m10 = m[4];
    m11 = m[5];
    m12 = m[6];
    m20 = m[8];
    m21 = m[9];
    m22 = m[10];
    lx = m00 * m00 + m01 * m01 + m02 * m02;
    if (lx === 0) return this;
    lx = 1 / Math.sqrt(lx);
    ly = m10 * m10 + m11 * m11 + m12 * m12;
    if (ly === 0) return this;
    ly = 1 / Math.sqrt(ly);
    lz = m20 * m20 + m21 * m21 + m22 * m22;
    if (lz === 0) return this;
    lz = 1 / Math.sqrt(lz);
    m00 *= lx;
    m01 *= lx;
    m02 *= lx;
    m10 *= ly;
    m11 *= ly;
    m12 *= ly;
    m20 *= lz;
    m21 *= lz;
    m22 *= lz;
    const tr = m00 + m11 + m22;

    if (tr >= 0) {
      s = Math.sqrt(tr + 1);
      this.w = s * 0.5;
      s = 0.5 / s;
      this.x = (m12 - m21) * s;
      this.y = (m20 - m02) * s;
      this.z = (m01 - m10) * s;
    } else {
      if (m00 > m11) {
        if (m00 > m22) {
          rs = m00 - (m11 + m22) + 1;
          rs = Math.sqrt(rs);
          this.x = rs * 0.5;
          rs = 0.5 / rs;
          this.w = (m12 - m21) * rs;
          this.y = (m01 + m10) * rs;
          this.z = (m02 + m20) * rs;
        } else {
          rs = m22 - (m00 + m11) + 1;
          rs = Math.sqrt(rs);
          this.z = rs * 0.5;
          rs = 0.5 / rs;
          this.w = (m01 - m10) * rs;
          this.x = (m20 + m02) * rs;
          this.y = (m21 + m12) * rs;
        }
      } else if (m11 > m22) {
        rs = m11 - (m22 + m00) + 1;
        rs = Math.sqrt(rs);
        this.y = rs * 0.5;
        rs = 0.5 / rs;
        this.w = (m20 - m02) * rs;
        this.z = (m12 + m21) * rs;
        this.x = (m10 + m01) * rs;
      } else {
        rs = m22 - (m00 + m11) + 1;
        rs = Math.sqrt(rs);
        this.z = rs * 0.5;
        rs = 0.5 / rs;
        this.w = (m01 - m10) * rs;
        this.x = (m20 + m02) * rs;
        this.y = (m21 + m12) * rs;
      }
    }

    return this;
  }

  slerp(lhs, rhs, alpha) {
    const lx = lhs.x;
    const ly = lhs.y;
    const lz = lhs.z;
    const lw = lhs.w;
    let rx = rhs.x;
    let ry = rhs.y;
    let rz = rhs.z;
    let rw = rhs.w;
    let cosHalfTheta = lw * rw + lx * rx + ly * ry + lz * rz;

    if (cosHalfTheta < 0) {
      rw = -rw;
      rx = -rx;
      ry = -ry;
      rz = -rz;
      cosHalfTheta = -cosHalfTheta;
    }

    if (Math.abs(cosHalfTheta) >= 1) {
      this.w = lw;
      this.x = lx;
      this.y = ly;
      this.z = lz;
      return this;
    }

    const halfTheta = Math.acos(cosHalfTheta);
    const sinHalfTheta = Math.sqrt(1 - cosHalfTheta * cosHalfTheta);

    if (Math.abs(sinHalfTheta) < 0.001) {
      this.w = lw * 0.5 + rw * 0.5;
      this.x = lx * 0.5 + rx * 0.5;
      this.y = ly * 0.5 + ry * 0.5;
      this.z = lz * 0.5 + rz * 0.5;
      return this;
    }

    const ratioA = Math.sin((1 - alpha) * halfTheta) / sinHalfTheta;
    const ratioB = Math.sin(alpha * halfTheta) / sinHalfTheta;
    this.w = lw * ratioA + rw * ratioB;
    this.x = lx * ratioA + rx * ratioB;
    this.y = ly * ratioA + ry * ratioB;
    this.z = lz * ratioA + rz * ratioB;
    return this;
  }

  transformVector(vec, res = new Vec3()) {
    const x = vec.x,
          y = vec.y,
          z = vec.z;
    const qx = this.x,
          qy = this.y,
          qz = this.z,
          qw = this.w;
    const ix = qw * x + qy * z - qz * y;
    const iy = qw * y + qz * x - qx * z;
    const iz = qw * z + qx * y - qy * x;
    const iw = -qx * x - qy * y - qz * z;
    res.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    res.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    res.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return res;
  }

  toString() {
    return `[${this.x}, ${this.y}, ${this.z}, ${this.w}]`;
  }

}

Quat.IDENTITY = Object.freeze(new Quat(0, 0, 0, 1));
Quat.ZERO = Object.freeze(new Quat(0, 0, 0, 0));

const tmpVecA$2 = new Vec3();
const tmpVecB$1 = new Vec3();
const tmpVecC = new Vec3();
const tmpVecD = new Vec3();
const tmpVecE = new Vec3();

class BoundingBox {
  constructor(center = new Vec3(), halfExtents = new Vec3(0.5, 0.5, 0.5)) {
    this.center = center;
    this.halfExtents = halfExtents;
    this._min = new Vec3();
    this._max = new Vec3();
  }

  add(other) {
    const tc = this.center;
    const tcx = tc.x;
    const tcy = tc.y;
    const tcz = tc.z;
    const th = this.halfExtents;
    const thx = th.x;
    const thy = th.y;
    const thz = th.z;
    let tminx = tcx - thx;
    let tmaxx = tcx + thx;
    let tminy = tcy - thy;
    let tmaxy = tcy + thy;
    let tminz = tcz - thz;
    let tmaxz = tcz + thz;
    const oc = other.center;
    const ocx = oc.x;
    const ocy = oc.y;
    const ocz = oc.z;
    const oh = other.halfExtents;
    const ohx = oh.x;
    const ohy = oh.y;
    const ohz = oh.z;
    const ominx = ocx - ohx;
    const omaxx = ocx + ohx;
    const ominy = ocy - ohy;
    const omaxy = ocy + ohy;
    const ominz = ocz - ohz;
    const omaxz = ocz + ohz;
    if (ominx < tminx) tminx = ominx;
    if (omaxx > tmaxx) tmaxx = omaxx;
    if (ominy < tminy) tminy = ominy;
    if (omaxy > tmaxy) tmaxy = omaxy;
    if (ominz < tminz) tminz = ominz;
    if (omaxz > tmaxz) tmaxz = omaxz;
    tc.x = (tminx + tmaxx) * 0.5;
    tc.y = (tminy + tmaxy) * 0.5;
    tc.z = (tminz + tmaxz) * 0.5;
    th.x = (tmaxx - tminx) * 0.5;
    th.y = (tmaxy - tminy) * 0.5;
    th.z = (tmaxz - tminz) * 0.5;
  }

  copy(src) {
    this.center.copy(src.center);
    this.halfExtents.copy(src.halfExtents);
  }

  clone() {
    return new BoundingBox(this.center.clone(), this.halfExtents.clone());
  }

  intersects(other) {
    const aMax = this.getMax();
    const aMin = this.getMin();
    const bMax = other.getMax();
    const bMin = other.getMin();
    return aMin.x <= bMax.x && aMax.x >= bMin.x && aMin.y <= bMax.y && aMax.y >= bMin.y && aMin.z <= bMax.z && aMax.z >= bMin.z;
  }

  _intersectsRay(ray, point) {
    const tMin = tmpVecA$2.copy(this.getMin()).sub(ray.origin);
    const tMax = tmpVecB$1.copy(this.getMax()).sub(ray.origin);
    const dir = ray.direction;

    if (dir.x === 0) {
      tMin.x = tMin.x < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
      tMax.x = tMax.x < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
    } else {
      tMin.x /= dir.x;
      tMax.x /= dir.x;
    }

    if (dir.y === 0) {
      tMin.y = tMin.y < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
      tMax.y = tMax.y < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
    } else {
      tMin.y /= dir.y;
      tMax.y /= dir.y;
    }

    if (dir.z === 0) {
      tMin.z = tMin.z < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
      tMax.z = tMax.z < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
    } else {
      tMin.z /= dir.z;
      tMax.z /= dir.z;
    }

    const realMin = tmpVecC.set(Math.min(tMin.x, tMax.x), Math.min(tMin.y, tMax.y), Math.min(tMin.z, tMax.z));
    const realMax = tmpVecD.set(Math.max(tMin.x, tMax.x), Math.max(tMin.y, tMax.y), Math.max(tMin.z, tMax.z));
    const minMax = Math.min(Math.min(realMax.x, realMax.y), realMax.z);
    const maxMin = Math.max(Math.max(realMin.x, realMin.y), realMin.z);
    const intersects = minMax >= maxMin && maxMin >= 0;
    if (intersects) point.copy(ray.direction).mulScalar(maxMin).add(ray.origin);
    return intersects;
  }

  _fastIntersectsRay(ray) {
    const diff = tmpVecA$2;
    const cross = tmpVecB$1;
    const prod = tmpVecC;
    const absDiff = tmpVecD;
    const absDir = tmpVecE;
    const rayDir = ray.direction;
    diff.sub2(ray.origin, this.center);
    absDiff.set(Math.abs(diff.x), Math.abs(diff.y), Math.abs(diff.z));
    prod.mul2(diff, rayDir);
    if (absDiff.x > this.halfExtents.x && prod.x >= 0) return false;
    if (absDiff.y > this.halfExtents.y && prod.y >= 0) return false;
    if (absDiff.z > this.halfExtents.z && prod.z >= 0) return false;
    absDir.set(Math.abs(rayDir.x), Math.abs(rayDir.y), Math.abs(rayDir.z));
    cross.cross(rayDir, diff);
    cross.set(Math.abs(cross.x), Math.abs(cross.y), Math.abs(cross.z));
    if (cross.x > this.halfExtents.y * absDir.z + this.halfExtents.z * absDir.y) return false;
    if (cross.y > this.halfExtents.x * absDir.z + this.halfExtents.z * absDir.x) return false;
    if (cross.z > this.halfExtents.x * absDir.y + this.halfExtents.y * absDir.x) return false;
    return true;
  }

  intersectsRay(ray, point) {
    if (point) {
      return this._intersectsRay(ray, point);
    }

    return this._fastIntersectsRay(ray);
  }

  setMinMax(min, max) {
    this.center.add2(max, min).mulScalar(0.5);
    this.halfExtents.sub2(max, min).mulScalar(0.5);
  }

  getMin() {
    return this._min.copy(this.center).sub(this.halfExtents);
  }

  getMax() {
    return this._max.copy(this.center).add(this.halfExtents);
  }

  containsPoint(point) {
    const min = this.getMin();
    const max = this.getMax();

    if (point.x < min.x || point.x > max.x || point.y < min.y || point.y > max.y || point.z < min.z || point.z > max.z) {
      return false;
    }

    return true;
  }

  setFromTransformedAabb(aabb, m, ignoreScale = false) {
    const ac = aabb.center;
    const ar = aabb.halfExtents;
    const d = m.data;
    let mx0 = d[0];
    let mx1 = d[4];
    let mx2 = d[8];
    let my0 = d[1];
    let my1 = d[5];
    let my2 = d[9];
    let mz0 = d[2];
    let mz1 = d[6];
    let mz2 = d[10];

    if (ignoreScale) {
      let lengthSq = mx0 * mx0 + mx1 * mx1 + mx2 * mx2;

      if (lengthSq > 0) {
        const invLength = 1 / Math.sqrt(lengthSq);
        mx0 *= invLength;
        mx1 *= invLength;
        mx2 *= invLength;
      }

      lengthSq = my0 * my0 + my1 * my1 + my2 * my2;

      if (lengthSq > 0) {
        const invLength = 1 / Math.sqrt(lengthSq);
        my0 *= invLength;
        my1 *= invLength;
        my2 *= invLength;
      }

      lengthSq = mz0 * mz0 + mz1 * mz1 + mz2 * mz2;

      if (lengthSq > 0) {
        const invLength = 1 / Math.sqrt(lengthSq);
        mz0 *= invLength;
        mz1 *= invLength;
        mz2 *= invLength;
      }
    }

    this.center.set(d[12] + mx0 * ac.x + mx1 * ac.y + mx2 * ac.z, d[13] + my0 * ac.x + my1 * ac.y + my2 * ac.z, d[14] + mz0 * ac.x + mz1 * ac.y + mz2 * ac.z);
    this.halfExtents.set(Math.abs(mx0) * ar.x + Math.abs(mx1) * ar.y + Math.abs(mx2) * ar.z, Math.abs(my0) * ar.x + Math.abs(my1) * ar.y + Math.abs(my2) * ar.z, Math.abs(mz0) * ar.x + Math.abs(mz1) * ar.y + Math.abs(mz2) * ar.z);
  }

  static computeMinMax(vertices, min, max, numVerts = vertices.length / 3) {
    if (numVerts > 0) {
      min.set(vertices[0], vertices[1], vertices[2]);
      max.set(vertices[0], vertices[1], vertices[2]);

      for (let i = 1; i < numVerts; i++) {
        const x = vertices[i * 3 + 0];
        const y = vertices[i * 3 + 1];
        const z = vertices[i * 3 + 2];
        if (x < min.x) min.x = x;
        if (y < min.y) min.y = y;
        if (z < min.z) min.z = z;
        if (x > max.x) max.x = x;
        if (y > max.y) max.y = y;
        if (z > max.z) max.z = z;
      }
    }
  }

  compute(vertices, numVerts) {
    BoundingBox.computeMinMax(vertices, tmpVecA$2, tmpVecB$1, numVerts);
    this.setMinMax(tmpVecA$2, tmpVecB$1);
  }

  intersectsBoundingSphere(sphere) {
    const sq = this._distanceToBoundingSphereSq(sphere);

    if (sq <= sphere.radius * sphere.radius) {
      return true;
    }

    return false;
  }

  _distanceToBoundingSphereSq(sphere) {
    const boxMin = this.getMin();
    const boxMax = this.getMax();
    let sq = 0;
    const axis = ['x', 'y', 'z'];

    for (let i = 0; i < 3; ++i) {
      let out = 0;
      const pn = sphere.center[axis[i]];
      const bMin = boxMin[axis[i]];
      const bMax = boxMax[axis[i]];
      let val = 0;

      if (pn < bMin) {
        val = bMin - pn;
        out += val * val;
      }

      if (pn > bMax) {
        val = pn - bMax;
        out += val * val;
      }

      sq += out;
    }

    return sq;
  }

  _expand(expandMin, expandMax) {
    tmpVecA$2.add2(this.getMin(), expandMin);
    tmpVecB$1.add2(this.getMax(), expandMax);
    this.setMinMax(tmpVecA$2, tmpVecB$1);
  }

}

const tmpVecA$1 = new Vec3();
const tmpVecB = new Vec3();

class BoundingSphere {
  constructor(center = new Vec3(), radius = 0.5) {
    this.center = center;
    this.radius = radius;
  }

  containsPoint(point) {
    const lenSq = tmpVecA$1.sub2(point, this.center).lengthSq();
    const r = this.radius;
    return lenSq < r * r;
  }

  intersectsRay(ray, point) {
    const m = tmpVecA$1.copy(ray.origin).sub(this.center);
    const b = m.dot(tmpVecB.copy(ray.direction).normalize());
    const c = m.dot(m) - this.radius * this.radius;
    if (c > 0 && b > 0) return false;
    const discr = b * b - c;
    if (discr < 0) return false;
    const t = Math.abs(-b - Math.sqrt(discr));
    if (point) point.copy(ray.direction).mulScalar(t).add(ray.origin);
    return true;
  }

  intersectsBoundingSphere(sphere) {
    tmpVecA$1.sub2(sphere.center, this.center);
    const totalRadius = sphere.radius + this.radius;

    if (tmpVecA$1.lengthSq() <= totalRadius * totalRadius) {
      return true;
    }

    return false;
  }

}

const BLEND_SUBTRACTIVE = 0;
const BLEND_ADDITIVE = 1;
const BLEND_NORMAL = 2;
const BLEND_NONE = 3;
const BLEND_PREMULTIPLIED = 4;
const BLEND_MULTIPLICATIVE = 5;
const BLEND_ADDITIVEALPHA = 6;
const BLEND_MULTIPLICATIVE2X = 7;
const BLEND_SCREEN = 8;
const BLEND_MIN = 9;
const BLEND_MAX = 10;
const FOG_NONE = 'none';
const FOG_LINEAR = 'linear';
const FOG_EXP = 'exp';
const FOG_EXP2 = 'exp2';
const FRESNEL_NONE = 0;
const FRESNEL_SCHLICK = 2;
const LAYER_HUD = 0;
const LAYER_GIZMO = 1;
const LAYER_FX = 2;
const LAYER_WORLD = 15;
const LAYERID_WORLD = 0;
const LAYERID_DEPTH = 1;
const LAYERID_SKYBOX = 2;
const LAYERID_IMMEDIATE = 3;
const LAYERID_UI = 4;
const LIGHTTYPE_DIRECTIONAL = 0;
const LIGHTTYPE_OMNI = 1;
const LIGHTTYPE_POINT = LIGHTTYPE_OMNI;
const LIGHTTYPE_SPOT = 2;
const LIGHTTYPE_COUNT = 3;
const LIGHTSHAPE_PUNCTUAL = 0;
const LIGHTSHAPE_RECT = 1;
const LIGHTSHAPE_DISK = 2;
const LIGHTSHAPE_SPHERE = 3;
const LIGHTFALLOFF_LINEAR = 0;
const LIGHTFALLOFF_INVERSESQUARED = 1;
const SHADOW_PCF3 = 0;
const SHADOW_DEPTH = 0;
const SHADOW_VSM8 = 1;
const SHADOW_VSM16 = 2;
const SHADOW_VSM32 = 3;
const SHADOW_PCF5 = 4;
const SHADOW_PCF1 = 5;
const SHADOW_COUNT = 6;
const shadowTypeToString = {};
shadowTypeToString[SHADOW_PCF3] = 'PCF3';
shadowTypeToString[SHADOW_VSM8] = 'VSM8';
shadowTypeToString[SHADOW_VSM16] = 'VSM16';
shadowTypeToString[SHADOW_VSM32] = 'VSM32';
shadowTypeToString[SHADOW_PCF5] = 'PCF5';
shadowTypeToString[SHADOW_PCF1] = 'PCF1';
const BLUR_BOX = 0;
const BLUR_GAUSSIAN = 1;
const PARTICLESORT_NONE = 0;
const PARTICLESORT_DISTANCE = 1;
const PARTICLESORT_NEWER_FIRST = 2;
const PARTICLESORT_OLDER_FIRST = 3;
const PARTICLEMODE_GPU = 0;
const PARTICLEMODE_CPU = 1;
const EMITTERSHAPE_BOX = 0;
const EMITTERSHAPE_SPHERE = 1;
const PARTICLEORIENTATION_SCREEN = 0;
const PARTICLEORIENTATION_WORLD = 1;
const PARTICLEORIENTATION_EMITTER = 2;
const PROJECTION_PERSPECTIVE = 0;
const PROJECTION_ORTHOGRAPHIC = 1;
const RENDERSTYLE_SOLID = 0;
const RENDERSTYLE_WIREFRAME = 1;
const RENDERSTYLE_POINTS = 2;
const CUBEPROJ_NONE = 0;
const CUBEPROJ_BOX = 1;
const SPECULAR_PHONG = 0;
const SPECULAR_BLINN = 1;
const DETAILMODE_MUL = 'mul';
const DETAILMODE_ADD = 'add';
const DETAILMODE_SCREEN = 'screen';
const DETAILMODE_OVERLAY = 'overlay';
const DETAILMODE_MIN = 'min';
const DETAILMODE_MAX = 'max';
const GAMMA_NONE = 0;
const GAMMA_SRGB = 1;
const GAMMA_SRGBFAST = 2;
const GAMMA_SRGBHDR = 3;
const TONEMAP_LINEAR = 0;
const TONEMAP_FILMIC = 1;
const TONEMAP_HEJL = 2;
const TONEMAP_ACES = 3;
const TONEMAP_ACES2 = 4;
const SPECOCC_NONE = 0;
const SPECOCC_AO = 1;
const SPECOCC_GLOSSDEPENDENT = 2;
const SHADERDEF_NOSHADOW = 1;
const SHADERDEF_SKIN = 2;
const SHADERDEF_UV0 = 4;
const SHADERDEF_UV1 = 8;
const SHADERDEF_VCOLOR = 16;
const SHADERDEF_INSTANCING = 32;
const SHADERDEF_LM = 64;
const SHADERDEF_DIRLM = 128;
const SHADERDEF_SCREENSPACE = 256;
const SHADERDEF_TANGENTS = 512;
const SHADERDEF_MORPH_POSITION = 1024;
const SHADERDEF_MORPH_NORMAL = 2048;
const SHADERDEF_MORPH_TEXTURE_BASED = 4096;
const SHADERDEF_LMAMBIENT = 8192;
const LINEBATCH_WORLD = 0;
const LINEBATCH_OVERLAY = 1;
const LINEBATCH_GIZMO = 2;
const SHADOWUPDATE_NONE = 0;
const SHADOWUPDATE_THISFRAME = 1;
const SHADOWUPDATE_REALTIME = 2;
const SORTKEY_FORWARD = 0;
const SORTKEY_DEPTH = 1;
const MASK_AFFECT_DYNAMIC = 1;
const MASK_AFFECT_LIGHTMAPPED = 2;
const MASK_BAKE = 4;
const SHADER_FORWARD = 0;
const SHADER_FORWARDHDR = 1;
const SHADER_DEPTH = 2;
const SHADER_PICK = 3;
const SHADER_SHADOW = 4;
const SHADERTYPE_FORWARD = 'forward';
const SHADERTYPE_DEPTH = 'depth';
const SHADERTYPE_PICK = 'pick';
const SHADERTYPE_SHADOW = 'shadow';
const SPRITE_RENDERMODE_SIMPLE = 0;
const SPRITE_RENDERMODE_SLICED = 1;
const SPRITE_RENDERMODE_TILED = 2;
const BAKE_COLOR = 0;
const BAKE_COLORDIR = 1;
const VIEW_CENTER = 0;
const VIEW_LEFT = 1;
const VIEW_RIGHT = 2;
const SORTMODE_NONE = 0;
const SORTMODE_MANUAL = 1;
const SORTMODE_MATERIALMESH = 2;
const SORTMODE_BACK2FRONT = 3;
const SORTMODE_FRONT2BACK = 4;
const SORTMODE_CUSTOM = 5;
const COMPUPDATED_INSTANCES = 1;
const COMPUPDATED_LIGHTS = 2;
const COMPUPDATED_CAMERAS = 4;
const COMPUPDATED_BLEND = 8;
const ASPECT_AUTO = 0;
const ASPECT_MANUAL = 1;
const ORIENTATION_HORIZONTAL = 0;
const ORIENTATION_VERTICAL = 1;

const _frustumPoints = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];

class Frustum {
  constructor() {
    this.planes = [];

    for (let i = 0; i < 6; i++) this.planes[i] = [];
  }

  setFromMat4(matrix) {
    const vpm = matrix.data;
    let plane;
    const planes = this.planes;
    plane = planes[0];
    plane[0] = vpm[3] - vpm[0];
    plane[1] = vpm[7] - vpm[4];
    plane[2] = vpm[11] - vpm[8];
    plane[3] = vpm[15] - vpm[12];
    let t = Math.sqrt(plane[0] * plane[0] + plane[1] * plane[1] + plane[2] * plane[2]);
    plane[0] /= t;
    plane[1] /= t;
    plane[2] /= t;
    plane[3] /= t;
    plane = planes[1];
    plane[0] = vpm[3] + vpm[0];
    plane[1] = vpm[7] + vpm[4];
    plane[2] = vpm[11] + vpm[8];
    plane[3] = vpm[15] + vpm[12];
    t = Math.sqrt(plane[0] * plane[0] + plane[1] * plane[1] + plane[2] * plane[2]);
    plane[0] /= t;
    plane[1] /= t;
    plane[2] /= t;
    plane[3] /= t;
    plane = planes[2];
    plane[0] = vpm[3] + vpm[1];
    plane[1] = vpm[7] + vpm[5];
    plane[2] = vpm[11] + vpm[9];
    plane[3] = vpm[15] + vpm[13];
    t = Math.sqrt(plane[0] * plane[0] + plane[1] * plane[1] + plane[2] * plane[2]);
    plane[0] /= t;
    plane[1] /= t;
    plane[2] /= t;
    plane[3] /= t;
    plane = planes[3];
    plane[0] = vpm[3] - vpm[1];
    plane[1] = vpm[7] - vpm[5];
    plane[2] = vpm[11] - vpm[9];
    plane[3] = vpm[15] - vpm[13];
    t = Math.sqrt(plane[0] * plane[0] + plane[1] * plane[1] + plane[2] * plane[2]);
    plane[0] /= t;
    plane[1] /= t;
    plane[2] /= t;
    plane[3] /= t;
    plane = planes[4];
    plane[0] = vpm[3] - vpm[2];
    plane[1] = vpm[7] - vpm[6];
    plane[2] = vpm[11] - vpm[10];
    plane[3] = vpm[15] - vpm[14];
    t = Math.sqrt(plane[0] * plane[0] + plane[1] * plane[1] + plane[2] * plane[2]);
    plane[0] /= t;
    plane[1] /= t;
    plane[2] /= t;
    plane[3] /= t;
    plane = planes[5];
    plane[0] = vpm[3] + vpm[2];
    plane[1] = vpm[7] + vpm[6];
    plane[2] = vpm[11] + vpm[10];
    plane[3] = vpm[15] + vpm[14];
    t = Math.sqrt(plane[0] * plane[0] + plane[1] * plane[1] + plane[2] * plane[2]);
    plane[0] /= t;
    plane[1] /= t;
    plane[2] /= t;
    plane[3] /= t;
  }

  containsPoint(point) {
    let p, plane;

    for (p = 0; p < 6; p++) {
      plane = this.planes[p];

      if (plane[0] * point.x + plane[1] * point.y + plane[2] * point.z + plane[3] <= 0) {
        return false;
      }
    }

    return true;
  }

  containsSphere(sphere) {
    let c = 0;
    let d;
    let p;
    const sr = sphere.radius;
    const sc = sphere.center;
    const scx = sc.x;
    const scy = sc.y;
    const scz = sc.z;
    const planes = this.planes;
    let plane;

    for (p = 0; p < 6; p++) {
      plane = planes[p];
      d = plane[0] * scx + plane[1] * scy + plane[2] * scz + plane[3];
      if (d <= -sr) return 0;
      if (d > sr) c++;
    }

    return c === 6 ? 2 : 1;
  }

  static getPoints(camera, near, far) {
    near = near || camera._nearClip;
    far = far || camera._farClip;
    const fov = camera._fov * Math.PI / 180.0;
    let y = camera._projection === PROJECTION_PERSPECTIVE ? Math.tan(fov / 2.0) * near : camera._orthoHeight;
    let x = y * camera._aspectRatio;
    const points = _frustumPoints;
    points[0].x = x;
    points[0].y = -y;
    points[0].z = -near;
    points[1].x = x;
    points[1].y = y;
    points[1].z = -near;
    points[2].x = -x;
    points[2].y = y;
    points[2].z = -near;
    points[3].x = -x;
    points[3].y = -y;
    points[3].z = -near;

    if (camera._projection === PROJECTION_PERSPECTIVE) {
      y = Math.tan(fov / 2.0) * far;
      x = y * camera._aspectRatio;
    }

    points[4].x = x;
    points[4].y = -y;
    points[4].z = -far;
    points[5].x = x;
    points[5].y = y;
    points[5].z = -far;
    points[6].x = -x;
    points[6].y = y;
    points[6].z = -far;
    points[7].x = -x;
    points[7].y = -y;
    points[7].z = -far;
    return points;
  }

}

class Ray {
  constructor(origin = new Vec3(), direction = new Vec3(0, 0, -1)) {
    this.origin = origin;
    this.direction = direction;
  }

  set(origin, direction) {
    this.origin.copy(origin);
    this.direction.copy(direction);
    return this;
  }

}

const tmpRay = new Ray();
const tmpVec3$2 = new Vec3();
const tmpSphere = new BoundingSphere();
const tmpMat4$1 = new Mat4();

class OrientedBox {
  constructor(worldTransform = new Mat4(), halfExtents = new Vec3(0.5, 0.5, 0.5)) {
    this.halfExtents = halfExtents;
    this._modelTransform = worldTransform.clone().invert();
    this._worldTransform = worldTransform.clone();
    this._aabb = new BoundingBox(new Vec3(), this.halfExtents);
  }

  set worldTransform(value) {
    this._worldTransform.copy(value);

    this._modelTransform.copy(value).invert();
  }

  get worldTransform() {
    return this._worldTransform;
  }

  intersectsRay(ray, point) {
    this._modelTransform.transformPoint(ray.origin, tmpRay.origin);

    this._modelTransform.transformVector(ray.direction, tmpRay.direction);

    if (point) {
      const result = this._aabb._intersectsRay(tmpRay, point);

      tmpMat4$1.copy(this._modelTransform).invert().transformPoint(point, point);
      return result;
    }

    return this._aabb._fastIntersectsRay(tmpRay);
  }

  containsPoint(point) {
    this._modelTransform.transformPoint(point, tmpVec3$2);

    return this._aabb.containsPoint(tmpVec3$2);
  }

  intersectsBoundingSphere(sphere) {
    this._modelTransform.transformPoint(sphere.center, tmpSphere.center);

    tmpSphere.radius = sphere.radius;

    if (this._aabb.intersectsBoundingSphere(tmpSphere)) {
      return true;
    }

    return false;
  }

}

const tmpVecA = new Vec3();

class Plane {
  constructor(point = new Vec3(), normal = new Vec3(0, 0, 1)) {
    this.point = point;
    this.normal = normal;
  }

  intersectsLine(start, end, point) {
    const d = -this.normal.dot(this.point);
    const d0 = this.normal.dot(start) + d;
    const d1 = this.normal.dot(end) + d;
    const t = d0 / (d0 - d1);
    const intersects = t >= 0 && t <= 1;
    if (intersects && point) point.lerp(start, end, t);
    return intersects;
  }

  intersectsRay(ray, point) {
    const pointToOrigin = tmpVecA.sub2(this.point, ray.origin);
    const t = this.normal.dot(pointToOrigin) / this.normal.dot(ray.direction);
    const intersects = t >= 0;
    if (intersects && point) point.copy(ray.direction).mulScalar(t).add(ray.origin);
    return intersects;
  }

}

const ADDRESS_REPEAT = 0;
const ADDRESS_CLAMP_TO_EDGE = 1;
const ADDRESS_MIRRORED_REPEAT = 2;
const BLENDMODE_ZERO = 0;
const BLENDMODE_ONE = 1;
const BLENDMODE_SRC_COLOR = 2;
const BLENDMODE_ONE_MINUS_SRC_COLOR = 3;
const BLENDMODE_DST_COLOR = 4;
const BLENDMODE_ONE_MINUS_DST_COLOR = 5;
const BLENDMODE_SRC_ALPHA = 6;
const BLENDMODE_SRC_ALPHA_SATURATE = 7;
const BLENDMODE_ONE_MINUS_SRC_ALPHA = 8;
const BLENDMODE_DST_ALPHA = 9;
const BLENDMODE_ONE_MINUS_DST_ALPHA = 10;
const BLENDMODE_CONSTANT_COLOR = 11;
const BLENDMODE_ONE_MINUS_CONSTANT_COLOR = 12;
const BLENDMODE_CONSTANT_ALPHA = 13;
const BLENDMODE_ONE_MINUS_CONSTANT_ALPHA = 14;
const BLENDEQUATION_ADD = 0;
const BLENDEQUATION_SUBTRACT = 1;
const BLENDEQUATION_REVERSE_SUBTRACT = 2;
const BLENDEQUATION_MIN = 3;
const BLENDEQUATION_MAX = 4;
const BUFFER_STATIC = 0;
const BUFFER_DYNAMIC = 1;
const BUFFER_STREAM = 2;
const BUFFER_GPUDYNAMIC = 3;
const CLEARFLAG_COLOR = 1;
const CLEARFLAG_DEPTH = 2;
const CLEARFLAG_STENCIL = 4;
const CUBEFACE_POSX = 0;
const CUBEFACE_NEGX = 1;
const CUBEFACE_POSY = 2;
const CUBEFACE_NEGY = 3;
const CUBEFACE_POSZ = 4;
const CUBEFACE_NEGZ = 5;
const CULLFACE_NONE = 0;
const CULLFACE_BACK = 1;
const CULLFACE_FRONT = 2;
const CULLFACE_FRONTANDBACK = 3;
const FILTER_NEAREST = 0;
const FILTER_LINEAR = 1;
const FILTER_NEAREST_MIPMAP_NEAREST = 2;
const FILTER_NEAREST_MIPMAP_LINEAR = 3;
const FILTER_LINEAR_MIPMAP_NEAREST = 4;
const FILTER_LINEAR_MIPMAP_LINEAR = 5;
const FUNC_NEVER = 0;
const FUNC_LESS = 1;
const FUNC_EQUAL = 2;
const FUNC_LESSEQUAL = 3;
const FUNC_GREATER = 4;
const FUNC_NOTEQUAL = 5;
const FUNC_GREATEREQUAL = 6;
const FUNC_ALWAYS = 7;
const INDEXFORMAT_UINT8 = 0;
const INDEXFORMAT_UINT16 = 1;
const INDEXFORMAT_UINT32 = 2;
const PIXELFORMAT_A8 = 0;
const PIXELFORMAT_L8 = 1;
const PIXELFORMAT_L8_A8 = 2;
const PIXELFORMAT_R5_G6_B5 = 3;
const PIXELFORMAT_R5_G5_B5_A1 = 4;
const PIXELFORMAT_R4_G4_B4_A4 = 5;
const PIXELFORMAT_R8_G8_B8 = 6;
const PIXELFORMAT_R8_G8_B8_A8 = 7;
const PIXELFORMAT_DXT1 = 8;
const PIXELFORMAT_DXT3 = 9;
const PIXELFORMAT_DXT5 = 10;
const PIXELFORMAT_RGB16F = 11;
const PIXELFORMAT_RGBA16F = 12;
const PIXELFORMAT_RGB32F = 13;
const PIXELFORMAT_RGBA32F = 14;
const PIXELFORMAT_R32F = 15;
const PIXELFORMAT_DEPTH = 16;
const PIXELFORMAT_DEPTHSTENCIL = 17;
const PIXELFORMAT_111110F = 18;
const PIXELFORMAT_SRGB = 19;
const PIXELFORMAT_SRGBA = 20;
const PIXELFORMAT_ETC1 = 21;
const PIXELFORMAT_ETC2_RGB = 22;
const PIXELFORMAT_ETC2_RGBA = 23;
const PIXELFORMAT_PVRTC_2BPP_RGB_1 = 24;
const PIXELFORMAT_PVRTC_2BPP_RGBA_1 = 25;
const PIXELFORMAT_PVRTC_4BPP_RGB_1 = 26;
const PIXELFORMAT_PVRTC_4BPP_RGBA_1 = 27;
const PIXELFORMAT_ASTC_4x4 = 28;
const PIXELFORMAT_ATC_RGB = 29;
const PIXELFORMAT_ATC_RGBA = 30;
const PRIMITIVE_POINTS = 0;
const PRIMITIVE_LINES = 1;
const PRIMITIVE_LINELOOP = 2;
const PRIMITIVE_LINESTRIP = 3;
const PRIMITIVE_TRIANGLES = 4;
const PRIMITIVE_TRISTRIP = 5;
const PRIMITIVE_TRIFAN = 6;
const SEMANTIC_POSITION = "POSITION";
const SEMANTIC_NORMAL = "NORMAL";
const SEMANTIC_TANGENT = "TANGENT";
const SEMANTIC_BLENDWEIGHT = "BLENDWEIGHT";
const SEMANTIC_BLENDINDICES = "BLENDINDICES";
const SEMANTIC_COLOR = "COLOR";
const SEMANTIC_TEXCOORD = "TEXCOORD";
const SEMANTIC_TEXCOORD0 = "TEXCOORD0";
const SEMANTIC_TEXCOORD1 = "TEXCOORD1";
const SEMANTIC_TEXCOORD2 = "TEXCOORD2";
const SEMANTIC_TEXCOORD3 = "TEXCOORD3";
const SEMANTIC_TEXCOORD4 = "TEXCOORD4";
const SEMANTIC_TEXCOORD5 = "TEXCOORD5";
const SEMANTIC_TEXCOORD6 = "TEXCOORD6";
const SEMANTIC_TEXCOORD7 = "TEXCOORD7";
const SEMANTIC_ATTR = "ATTR";
const SEMANTIC_ATTR0 = "ATTR0";
const SEMANTIC_ATTR1 = "ATTR1";
const SEMANTIC_ATTR2 = "ATTR2";
const SEMANTIC_ATTR3 = "ATTR3";
const SEMANTIC_ATTR4 = "ATTR4";
const SEMANTIC_ATTR5 = "ATTR5";
const SEMANTIC_ATTR6 = "ATTR6";
const SEMANTIC_ATTR7 = "ATTR7";
const SEMANTIC_ATTR8 = "ATTR8";
const SEMANTIC_ATTR9 = "ATTR9";
const SEMANTIC_ATTR10 = "ATTR10";
const SEMANTIC_ATTR11 = "ATTR11";
const SEMANTIC_ATTR12 = "ATTR12";
const SEMANTIC_ATTR13 = "ATTR13";
const SEMANTIC_ATTR14 = "ATTR14";
const SEMANTIC_ATTR15 = "ATTR15";
const SHADERTAG_MATERIAL = 1;
const STENCILOP_KEEP = 0;
const STENCILOP_ZERO = 1;
const STENCILOP_REPLACE = 2;
const STENCILOP_INCREMENT = 3;
const STENCILOP_INCREMENTWRAP = 4;
const STENCILOP_DECREMENT = 5;
const STENCILOP_DECREMENTWRAP = 6;
const STENCILOP_INVERT = 7;
const TEXTURELOCK_READ = 1;
const TEXTURELOCK_WRITE = 2;
const TEXTURETYPE_DEFAULT = 'default';
const TEXTURETYPE_RGBM = 'rgbm';
const TEXTURETYPE_RGBE = 'rgbe';
const TEXTURETYPE_RGBP = 'rgbp';
const TEXTURETYPE_SWIZZLEGGGR = 'swizzleGGGR';
const TEXHINT_NONE = 0;
const TEXHINT_SHADOWMAP = 1;
const TEXHINT_ASSET = 2;
const TEXHINT_LIGHTMAP = 3;
const TEXTUREDIMENSION_1D = '1d';
const TEXTUREDIMENSION_2D = '2d';
const TEXTUREDIMENSION_2D_ARRAY = '2d-array';
const TEXTUREDIMENSION_CUBE = 'cube';
const TEXTUREDIMENSION_CUBE_ARRAY = 'cube-array';
const TEXTUREDIMENSION_3D = '3d';
const SAMPLETYPE_FLOAT = 'float';
const SAMPLETYPE_UNFILTERABLE_FLOAT = 'unfilterable-float';
const SAMPLETYPE_DEPTH = 'depth';
const TEXTUREPROJECTION_NONE = "none";
const TEXTUREPROJECTION_CUBE = "cube";
const TEXTUREPROJECTION_EQUIRECT = "equirect";
const TEXTUREPROJECTION_OCTAHEDRAL = "octahedral";
const TYPE_INT8 = 0;
const TYPE_UINT8 = 1;
const TYPE_INT16 = 2;
const TYPE_UINT16 = 3;
const TYPE_INT32 = 4;
const TYPE_UINT32 = 5;
const TYPE_FLOAT32 = 6;
const UNIFORMTYPE_BOOL = 0;
const UNIFORMTYPE_INT = 1;
const UNIFORMTYPE_FLOAT = 2;
const UNIFORMTYPE_VEC2 = 3;
const UNIFORMTYPE_VEC3 = 4;
const UNIFORMTYPE_VEC4 = 5;
const UNIFORMTYPE_IVEC2 = 6;
const UNIFORMTYPE_IVEC3 = 7;
const UNIFORMTYPE_IVEC4 = 8;
const UNIFORMTYPE_BVEC2 = 9;
const UNIFORMTYPE_BVEC3 = 10;
const UNIFORMTYPE_BVEC4 = 11;
const UNIFORMTYPE_MAT2 = 12;
const UNIFORMTYPE_MAT3 = 13;
const UNIFORMTYPE_MAT4 = 14;
const UNIFORMTYPE_TEXTURE2D = 15;
const UNIFORMTYPE_TEXTURECUBE = 16;
const UNIFORMTYPE_FLOATARRAY = 17;
const UNIFORMTYPE_TEXTURE2D_SHADOW = 18;
const UNIFORMTYPE_TEXTURECUBE_SHADOW = 19;
const UNIFORMTYPE_TEXTURE3D = 20;
const UNIFORMTYPE_VEC2ARRAY = 21;
const UNIFORMTYPE_VEC3ARRAY = 22;
const UNIFORMTYPE_VEC4ARRAY = 23;
const uniformTypeToName = ['bool', 'int', 'float', 'vec2', 'vec3', 'vec4', 'ivec2', 'ivec3', 'ivec4', 'bec2', 'bec3', 'bec4', 'mat2', 'mat3', 'mat4', 'sampler2D', 'samplerCube', '', 'sampler2DShadow', 'samplerCubeShadow', 'sampler3D', '', '', ''];
const DEVICETYPE_WEBGL = 'webgl';
const DEVICETYPE_WEBGPU = 'webgpu';
const SHADERSTAGE_VERTEX = 1;
const SHADERSTAGE_FRAGMENT = 2;
const SHADERSTAGE_COMPUTE = 4;
const BINDGROUP_VIEW = 0;
const BINDGROUP_MESH = 1;
const UNIFORM_BUFFER_DEFAULT_SLOT_NAME = 'default';
const bindGroupNames = ['view', 'mesh'];
const typedArrayTypes = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array];
const typedArrayTypesByteSize = [1, 1, 2, 2, 4, 4, 4];
const typedArrayToType = {
  "Int8Array": TYPE_INT8,
  "Uint8Array": TYPE_UINT8,
  "Int16Array": TYPE_INT16,
  "Uint16Array": TYPE_UINT16,
  "Int32Array": TYPE_INT32,
  "Uint32Array": TYPE_UINT32,
  "Float32Array": TYPE_FLOAT32
};
const typedArrayIndexFormats = [Uint8Array, Uint16Array, Uint32Array];
const typedArrayIndexFormatsByteSize = [1, 2, 4];
const semanticToLocation = {};
semanticToLocation[SEMANTIC_POSITION] = 0;
semanticToLocation[SEMANTIC_NORMAL] = 1;
semanticToLocation[SEMANTIC_BLENDWEIGHT] = 2;
semanticToLocation[SEMANTIC_BLENDINDICES] = 3;
semanticToLocation[SEMANTIC_COLOR] = 4;
semanticToLocation[SEMANTIC_TEXCOORD0] = 5;
semanticToLocation[SEMANTIC_TEXCOORD1] = 6;
semanticToLocation[SEMANTIC_TEXCOORD2] = 7;
semanticToLocation[SEMANTIC_TEXCOORD3] = 8;
semanticToLocation[SEMANTIC_TEXCOORD4] = 9;
semanticToLocation[SEMANTIC_TEXCOORD5] = 10;
semanticToLocation[SEMANTIC_TEXCOORD6] = 11;
semanticToLocation[SEMANTIC_TEXCOORD7] = 12;
semanticToLocation[SEMANTIC_TANGENT] = 13;
semanticToLocation[SEMANTIC_ATTR0] = 0;
semanticToLocation[SEMANTIC_ATTR1] = 1;
semanticToLocation[SEMANTIC_ATTR2] = 2;
semanticToLocation[SEMANTIC_ATTR3] = 3;
semanticToLocation[SEMANTIC_ATTR4] = 4;
semanticToLocation[SEMANTIC_ATTR5] = 5;
semanticToLocation[SEMANTIC_ATTR6] = 6;
semanticToLocation[SEMANTIC_ATTR7] = 7;
semanticToLocation[SEMANTIC_ATTR8] = 8;
semanticToLocation[SEMANTIC_ATTR9] = 9;
semanticToLocation[SEMANTIC_ATTR10] = 10;
semanticToLocation[SEMANTIC_ATTR11] = 11;
semanticToLocation[SEMANTIC_ATTR12] = 12;
semanticToLocation[SEMANTIC_ATTR13] = 13;
semanticToLocation[SEMANTIC_ATTR14] = 14;
semanticToLocation[SEMANTIC_ATTR15] = 15;
const CHUNKAPI_1_51 = '1.51';
const CHUNKAPI_1_55 = '1.55';
const CHUNKAPI_1_56 = '1.56';
const CHUNKAPI_1_57 = '1.57';

let id$7 = 0;

class VertexBuffer {
  constructor(graphicsDevice, format, numVertices, usage = BUFFER_STATIC, initialData) {
    this.device = graphicsDevice;
    this.format = format;
    this.numVertices = numVertices;
    this.usage = usage;
    this.id = id$7++;
    this.impl = graphicsDevice.createVertexBufferImpl(this, format);
    this.instancing = false;
    this.numBytes = format.verticesByteSize ? format.verticesByteSize : format.size * numVertices;
    this.adjustVramSizeTracking(graphicsDevice._vram, this.numBytes);

    if (initialData) {
      this.setData(initialData);
    } else {
      this.storage = new ArrayBuffer(this.numBytes);
    }

    this.device.buffers.push(this);
  }

  destroy() {
    const device = this.device;
    const idx = device.buffers.indexOf(this);

    if (idx !== -1) {
      device.buffers.splice(idx, 1);
    }

    if (this.impl.initialized) {
      this.impl.destroy(device);
      this.adjustVramSizeTracking(device._vram, -this.storage.byteLength);
    }
  }

  adjustVramSizeTracking(vram, size) {
    vram.vb += size;
  }

  loseContext() {
    this.impl.loseContext();
  }

  getFormat() {
    return this.format;
  }

  getUsage() {
    return this.usage;
  }

  getNumVertices() {
    return this.numVertices;
  }

  lock() {
    return this.storage;
  }

  unlock() {
    this.impl.unlock(this);
  }

  setData(data) {
    if (data.byteLength !== this.numBytes) {
      return false;
    }

    this.storage = data;
    this.unlock();
    return true;
  }

}

function hashCode(str) {
  let hash = 0;

  for (let i = 0, len = str.length; i < len; i++) {
    hash = (hash << 5) - hash + str.charCodeAt(i);
    hash |= 0;
  }

  return hash;
}

class VertexFormat {
  constructor(graphicsDevice, description, vertexCount) {
    this._elements = [];
    this.hasUv0 = false;
    this.hasUv1 = false;
    this.hasColor = false;
    this.hasTangents = false;
    this.verticesByteSize = 0;
    this.vertexCount = vertexCount;
    this.interleaved = vertexCount === undefined;
    this.size = description.reduce((total, desc) => {
      return total + Math.ceil(desc.components * typedArrayTypesByteSize[desc.type] / 4) * 4;
    }, 0);
    let offset = 0,
        elementSize;

    for (let i = 0, len = description.length; i < len; i++) {
      const elementDesc = description[i];
      elementSize = elementDesc.components * typedArrayTypesByteSize[elementDesc.type];

      if (vertexCount) {
        offset = math$1.roundUp(offset, elementSize);
      }

      const element = {
        name: elementDesc.semantic,
        offset: vertexCount ? offset : elementDesc.hasOwnProperty('offset') ? elementDesc.offset : offset,
        stride: vertexCount ? elementSize : elementDesc.hasOwnProperty('stride') ? elementDesc.stride : this.size,
        dataType: elementDesc.type,
        numComponents: elementDesc.components,
        normalize: elementDesc.normalize === undefined ? false : elementDesc.normalize,
        size: elementSize
      };

      this._elements.push(element);

      if (vertexCount) {
        offset += elementSize * vertexCount;
      } else {
        offset += Math.ceil(elementSize / 4) * 4;
      }

      if (elementDesc.semantic === SEMANTIC_TEXCOORD0) {
        this.hasUv0 = true;
      } else if (elementDesc.semantic === SEMANTIC_TEXCOORD1) {
        this.hasUv1 = true;
      } else if (elementDesc.semantic === SEMANTIC_COLOR) {
        this.hasColor = true;
      } else if (elementDesc.semantic === SEMANTIC_TANGENT) {
        this.hasTangents = true;
      }
    }

    if (vertexCount) {
      this.verticesByteSize = offset;
    }

    this._evaluateHash();
  }

  get elements() {
    return this._elements;
  }

  static get defaultInstancingFormat() {
    if (!VertexFormat._defaultInstancingFormat) {
      VertexFormat._defaultInstancingFormat = new VertexFormat(null, [{
        semantic: SEMANTIC_ATTR12,
        components: 4,
        type: TYPE_FLOAT32
      }, {
        semantic: SEMANTIC_ATTR13,
        components: 4,
        type: TYPE_FLOAT32
      }, {
        semantic: SEMANTIC_ATTR14,
        components: 4,
        type: TYPE_FLOAT32
      }, {
        semantic: SEMANTIC_ATTR15,
        components: 4,
        type: TYPE_FLOAT32
      }]);
    }

    return VertexFormat._defaultInstancingFormat;
  }

  _evaluateHash() {
    let stringElementBatch;
    const stringElementsBatch = [];
    let stringElementRender;
    const stringElementsRender = [];
    const len = this._elements.length;

    for (let i = 0; i < len; i++) {
      const element = this._elements[i];
      stringElementBatch = element.name;
      stringElementBatch += element.dataType;
      stringElementBatch += element.numComponents;
      stringElementBatch += element.normalize;
      stringElementsBatch.push(stringElementBatch);
      stringElementRender = stringElementBatch;
      stringElementRender += element.offset;
      stringElementRender += element.stride;
      stringElementRender += element.size;
      stringElementsRender.push(stringElementRender);
    }

    stringElementsBatch.sort();
    this.batchingHash = hashCode(stringElementsBatch.join());
    this.renderingingHashString = stringElementsRender.join('_');
    this.renderingingHash = hashCode(this.renderingingHashString);
  }

}

VertexFormat._defaultInstancingFormat = null;

class DeviceCache {
  constructor() {
    this._cache = new Map();
  }

  get(device, onCreate) {
    if (!this._cache.has(device)) {
      this._cache.set(device, onCreate());

      device.on('destroy', () => {
        this.remove(device);
      });
    }

    return this._cache.get(device);
  }

  remove(device) {
    var _this$_cache$get;

    (_this$_cache$get = this._cache.get(device)) == null ? void 0 : _this$_cache$get.destroy();

    this._cache.delete(device);
  }

}

const _postEffectQuadDraw = {
  type: PRIMITIVE_TRISTRIP,
  base: 0,
  count: 4,
  indexed: false
};
const postEffectDeviceCache = new DeviceCache();

function getPostEffectQuadVB(device) {
  return postEffectDeviceCache.get(device, () => {
    const vertexFormat = new VertexFormat(device, [{
      semantic: SEMANTIC_POSITION,
      components: 2,
      type: TYPE_FLOAT32
    }]);
    const positions = new Float32Array(8);
    positions.set([-1, -1, 1, -1, -1, 1, 1, 1]);
    return new VertexBuffer(device, vertexFormat, 4, BUFFER_STATIC, positions);
  });
}

function drawQuadWithShader(device, target, shader, rect, scissorRect, useBlend = false) {
  const oldRt = device.renderTarget;
  device.setRenderTarget(target);
  device.updateBegin();
  let x, y, w, h;
  let sx, sy, sw, sh;

  if (!rect) {
    w = target ? target.width : device.width;
    h = target ? target.height : device.height;
    x = 0;
    y = 0;
  } else {
    x = rect.x;
    y = rect.y;
    w = rect.z;
    h = rect.w;
  }

  if (!scissorRect) {
    sx = x;
    sy = y;
    sw = w;
    sh = h;
  } else {
    sx = scissorRect.x;
    sy = scissorRect.y;
    sw = scissorRect.z;
    sh = scissorRect.w;
  }

  const oldVx = device.vx;
  const oldVy = device.vy;
  const oldVw = device.vw;
  const oldVh = device.vh;
  device.setViewport(x, y, w, h);
  const oldSx = device.sx;
  const oldSy = device.sy;
  const oldSw = device.sw;
  const oldSh = device.sh;
  device.setScissor(sx, sy, sw, sh);
  const oldDepthTest = device.getDepthTest();
  const oldDepthWrite = device.getDepthWrite();
  const oldCullMode = device.getCullMode();
  const oldWR = device.writeRed;
  const oldWG = device.writeGreen;
  const oldWB = device.writeBlue;
  const oldWA = device.writeAlpha;
  device.setDepthTest(false);
  device.setDepthWrite(false);
  device.setCullMode(CULLFACE_NONE);
  device.setColorWrite(true, true, true, true);
  if (!useBlend) device.setBlending(false);
  device.setVertexBuffer(getPostEffectQuadVB(device), 0);
  device.setShader(shader);
  device.draw(_postEffectQuadDraw);
  device.setDepthTest(oldDepthTest);
  device.setDepthWrite(oldDepthWrite);
  device.setCullMode(oldCullMode);
  device.setColorWrite(oldWR, oldWG, oldWB, oldWA);
  device.updateEnd();
  device.setRenderTarget(oldRt);
  device.updateBegin();
  device.setViewport(oldVx, oldVy, oldVw, oldVh);
  device.setScissor(oldSx, oldSy, oldSw, oldSh);
}

function drawTexture(device, texture, target, shader, rect, scissorRect, useBlend = false) {
  shader = shader || device.getCopyShader();
  device.constantTexSource.setValue(texture);
  drawQuadWithShader(device, target, shader, rect, scissorRect, useBlend);
}

const KEYWORD = /[ \t]*#(ifn?def|if|endif|else|elif|define|undef|extension)/g;
const DEFINE = /define[ \t]+([^\n]+)\r?(?:\n|$)/g;
const EXTENSION = /extension[ \t]+([\w-]+)[ \t]*:[ \t]*enable/g;
const UNDEF = /undef[ \t]+([^\n]+)\r?(?:\n|$)/g;
const IF = /(ifdef|ifndef|if)[ \t]*([^\r\n]+)\r?\n/g;
const ENDIF = /(endif|else|elif)([ \t]+[^\r\n]+)?\r?(?:\n|$)/g;
const IDENTIFIER$1 = /([\w-]+)/;
const DEFINED = /(!|\s)?defined\(([\w-]+)\)/;
const INVALID = /[><=|&+-]/g;

class Preprocessor {
  static run(source) {
    source = source.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm, '$1');
    source = source.split(/\r?\n/).map(line => line.trimEnd()).join('\n');
    source = this._preprocess(source);

    if (source !== null) {
      source = source.split(/\r?\n/).map(line => line.trim() === '' ? '' : line).join('\n');
      source = source.replace(/(\n\n){3,}/gm, '\n\n');
    }

    return source;
  }

  static _preprocess(source) {
    const originalSource = source;
    const stack = [];
    let error = false;
    const defines = new Map();
    let match;

    while ((match = KEYWORD.exec(source)) !== null) {
      const keyword = match[1];

      switch (keyword) {
        case 'define':
          {
            DEFINE.lastIndex = match.index;
            const define = DEFINE.exec(source);
            error || (error = define === null);
            const expression = define[1];
            IDENTIFIER$1.lastIndex = define.index;
            const identifierValue = IDENTIFIER$1.exec(expression);
            const identifier = identifierValue[1];
            let value = expression.substring(identifier.length).trim();
            if (value === "") value = "true";

            const keep = Preprocessor._keep(stack);

            if (keep) {
              defines.set(identifier, value);
            }

            KEYWORD.lastIndex = define.index + define[0].length;
            break;
          }

        case 'undef':
          {
            UNDEF.lastIndex = match.index;
            const undef = UNDEF.exec(source);
            const identifier = undef[1].trim();

            const keep = Preprocessor._keep(stack);

            if (keep) {
              defines.delete(identifier);
            }

            KEYWORD.lastIndex = undef.index + undef[0].length;
            break;
          }

        case 'extension':
          {
            EXTENSION.lastIndex = match.index;
            const extension = EXTENSION.exec(source);
            error || (error = extension === null);

            if (extension) {
              const identifier = extension[1];

              const keep = Preprocessor._keep(stack);

              if (keep) {
                defines.set(identifier, "true");
              }
            }

            KEYWORD.lastIndex = extension.index + extension[0].length;
            break;
          }

        case 'ifdef':
        case 'ifndef':
        case 'if':
          {
            IF.lastIndex = match.index;
            const iff = IF.exec(source);
            const expression = iff[2];
            const evaluated = Preprocessor.evaluate(expression, defines);
            error || (error = evaluated.error);
            let result = evaluated.result;

            if (keyword === 'ifndef') {
              result = !result;
            }

            stack.push({
              anyKeep: result,
              keep: result,
              start: match.index,
              end: IF.lastIndex
            });
            KEYWORD.lastIndex = iff.index + iff[0].length;
            break;
          }

        case 'endif':
        case 'else':
        case 'elif':
          {
            ENDIF.lastIndex = match.index;
            const endif = ENDIF.exec(source);
            const blockInfo = stack.pop();
            const blockCode = blockInfo.keep ? source.substring(blockInfo.end, match.index) : "";
            source = source.substring(0, blockInfo.start) + blockCode + source.substring(ENDIF.lastIndex);
            KEYWORD.lastIndex = blockInfo.start + blockCode.length;
            const endifCommand = endif[1];

            if (endifCommand === 'else' || endifCommand === 'elif') {
              let result = false;

              if (!blockInfo.anyKeep) {
                if (endifCommand === 'else') {
                  result = !blockInfo.keep;
                } else {
                  const evaluated = Preprocessor.evaluate(endif[2], defines);
                  result = evaluated.result;
                  error || (error = evaluated.error);
                }
              }

              stack.push({
                anyKeep: blockInfo.anyKeep || result,
                keep: result,
                start: KEYWORD.lastIndex,
                end: KEYWORD.lastIndex
              });
            }

            break;
          }
      }
    }

    if (error) {
      console.warn("Failed to preprocess shader: ", {
        source: originalSource
      });
      return originalSource;
    }

    return source;
  }

  static _keep(stack) {
    for (let i = 0; i < stack.length; i++) {
      if (!stack[i].keep) return false;
    }

    return true;
  }

  static evaluate(expression, defines) {
    const correct = INVALID.exec(expression) === null;
    let invert = false;
    const defined = DEFINED.exec(expression);

    if (defined) {
      invert = defined[1] === '!';
      expression = defined[2];
    }

    expression = expression.trim();
    let exists = defines.has(expression);

    if (invert) {
      exists = !exists;
    }

    return {
      result: exists,
      error: !correct
    };
  }

}

let id$6 = 0;

class Shader {
  constructor(graphicsDevice, definition) {
    this.meshUniformBufferFormat = void 0;
    this.meshBindGroupFormat = void 0;
    this.id = id$6++;
    this.device = graphicsDevice;
    this.definition = definition;
    this.name = definition.name || 'Untitled';
    definition.vshader = Preprocessor.run(definition.vshader);
    definition.fshader = Preprocessor.run(definition.fshader);
    this.init();
    this.impl = graphicsDevice.createShaderImpl(this);
  }

  init() {
    this.ready = false;
    this.failed = false;
  }

  destroy() {
    this.impl.destroy(this);
  }

  loseContext() {
    this.init();
    this.impl.loseContext();
  }

  restoreContext() {
    this.impl.restoreContext(this.device, this);
  }

}

var alphaTestPS = `
uniform float alpha_ref;

void alphaTest(float a) {
    if (a < alpha_ref) discard;
}
`;

var ambientConstantPS = `
void addAmbient() {
    dDiffuseLight += light_globalAmbient;
}
`;

var ambientEnvPS = `
#ifndef ENV_ATLAS
#define ENV_ATLAS
uniform sampler2D texture_envAtlas;
#endif

void addAmbient() {
    vec3 dir = normalize(cubeMapRotate(dNormalW) * vec3(-1.0, 1.0, 1.0));
    vec2 uv = mapUv(toSphericalUv(dir), vec4(128.0, 256.0 + 128.0, 64.0, 32.0) / atlasSize);

    vec4 raw = texture2D(texture_envAtlas, uv);
    vec3 linear = $DECODE(raw);
    dDiffuseLight += processEnvironment(linear);
}
`;

var ambientSHPS = `
uniform vec3 ambientSH[9];

void addAmbient() {
    vec3 n = cubeMapRotate(dNormalW);

    vec3 color =
        ambientSH[0] +
        ambientSH[1] * n.x +
        ambientSH[2] * n.y +
        ambientSH[3] * n.z +
        ambientSH[4] * n.x * n.z +
        ambientSH[5] * n.z * n.y +
        ambientSH[6] * n.y * n.x +
        ambientSH[7] * (3.0 * n.z * n.z - 1.0) +
        ambientSH[8] * (n.x * n.x - n.y * n.y);

    dDiffuseLight += processEnvironment(max(color, vec3(0.0)));
}
`;

var aoPS = `

void getAO() {
    dAo = 1.0;

    #ifdef MAPTEXTURE
    dAo *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    dAo *= saturate(vVertexColor.$VC);
    #endif
}
`;

var aoDiffuseOccPS = `
void occludeDiffuse() {
    dDiffuseLight *= dAo;
}
`;

var aoSpecOccPS = `
uniform float material_occludeSpecularIntensity;

void occludeSpecular() {
    // approximated specular occlusion from AO
    float specPow = exp2(dGlossiness * 11.0);
    // http://research.tri-ace.com/Data/cedec2011_RealtimePBR_Implementation_e.pptx
    float specOcc = saturate(pow(dot(dNormalW, dViewDirW) + dAo, 0.01*specPow) - 1.0 + dAo);
    specOcc = mix(1.0, specOcc, material_occludeSpecularIntensity);

    dSpecularLight *= specOcc;
    dReflection *= specOcc;
}
`;

var aoSpecOccConstPS = `
void occludeSpecular() {
    // approximated specular occlusion from AO
    float specPow = exp2(dGlossiness * 11.0);
    // http://research.tri-ace.com/Data/cedec2011_RealtimePBR_Implementation_e.pptx
    float specOcc = saturate(pow(dot(dNormalW, dViewDirW) + dAo, 0.01*specPow) - 1.0 + dAo);

    dSpecularLight *= specOcc;
    dReflection *= specOcc;
}
`;

var aoSpecOccConstSimplePS = `
void occludeSpecular() {
    dSpecularLight *= dAo;
    dReflection *= dAo;
}
`;

var aoSpecOccSimplePS = `
uniform float material_occludeSpecularIntensity;

void occludeSpecular() {
    float specOcc = mix(1.0, dAo, material_occludeSpecularIntensity);
    dSpecularLight *= specOcc;
    dReflection *= specOcc;
}
`;

var basePS = `
uniform vec3 view_position;

uniform vec3 light_globalAmbient;

float square(float x) {
    return x*x;
}

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec3 saturate(vec3 x) {
    return clamp(x, vec3(0.0), vec3(1.0));
}
`;

var baseVS = `
attribute vec3 vertex_position;
attribute vec3 vertex_normal;
attribute vec4 vertex_tangent;
attribute vec2 vertex_texCoord0;
attribute vec2 vertex_texCoord1;
attribute vec4 vertex_color;

uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;

vec3 dPositionW;
mat4 dModelMatrix;
mat3 dNormalMatrix;
`;

var baseNineSlicedPS = `
#define NINESLICED

varying vec2 vMask;
varying vec2 vTiledUv;

uniform mediump vec4 innerOffset;
uniform mediump vec2 outerScale;
uniform mediump vec4 atlasRect;

vec2 nineSlicedUv;
`;

var baseNineSlicedVS = `
#define NINESLICED

varying vec2 vMask;
varying vec2 vTiledUv;

uniform mediump vec4 innerOffset;
uniform mediump vec2 outerScale;
uniform mediump vec4 atlasRect;
`;

var baseNineSlicedTiledPS = `
#define NINESLICED
#define NINESLICETILED

varying vec2 vMask;
varying vec2 vTiledUv;

uniform mediump vec4 innerOffset;
uniform mediump vec2 outerScale;
uniform mediump vec4 atlasRect;

vec2 nineSlicedUv;
`;

var biasConstPS = `
#define SHADOWBIAS

float getShadowBias(float resolution, float maxBias) {
    return maxBias;
}
`;

var blurVSMPS = `
varying vec2 vUv0;

uniform sampler2D source;
uniform vec2 pixelOffset;

#ifdef GAUSS
uniform float weight[SAMPLES];
#endif

#ifdef PACKED
float decodeFloatRG(vec2 rg) {
    return rg.y*(1.0/255.0) + rg.x;
}

vec2 encodeFloatRG( float v ) {
    vec2 enc = vec2(1.0, 255.0) * v;
    enc = fract(enc);
    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);
    return enc;
}
#endif

void main(void) {
    vec3 moments = vec3(0.0);
    vec2 uv = vUv0 - pixelOffset * (float(SAMPLES) * 0.5);
    for (int i=0; i<SAMPLES; i++) {
        vec4 c = texture2D(source, uv + pixelOffset * float(i));

        #ifdef PACKED
        c.xy = vec2(decodeFloatRG(c.xy), decodeFloatRG(c.zw));
        #endif

        #ifdef GAUSS
        moments += c.xyz * weight[i];
        #else
        moments += c.xyz;
        #endif
    }

    #ifndef GAUSS
    moments /= float(SAMPLES);
    #endif

    #ifdef PACKED
    gl_FragColor = vec4(encodeFloatRG(moments.x), encodeFloatRG(moments.y));
    #else
    gl_FragColor = vec4(moments.x, moments.y, moments.z, 1.0);
    #endif
}
`;

var clearCoatPS = `
#ifdef MAPFLOAT
uniform float material_clearCoat;
#endif

void getClearCoat() {
    ccSpecularity = 1.0;

    #ifdef MAPFLOAT
    ccSpecularity *= material_clearCoat;
    #endif

    #ifdef MAPTEXTURE
    ccSpecularity *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    ccSpecularity *= saturate(vVertexColor.$VC);
    #endif
}
`;

var clearCoatGlossPS = `
#ifdef MAPFLOAT
uniform float material_clearCoatGlossiness;
#endif

void getClearCoatGlossiness() {
    ccGlossiness = 1.0;

    #ifdef MAPFLOAT
    ccGlossiness *= material_clearCoatGlossiness;
    #endif

    #ifdef MAPTEXTURE
    ccGlossiness *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    ccGlossiness *= saturate(vVertexColor.$VC);
    #endif

    ccGlossiness += 0.0000001;
}
`;

var clearCoatNormalPS = `
#ifdef MAPTEXTURE
uniform float material_clearCoatBumpiness;
#endif

void getClearCoatNormal() {
#ifdef MAPTEXTURE
    vec3 normalMap = unpackNormal(texture2DBias($SAMPLER, $UV, textureBias));
    normalMap = mix(vec3(0.0, 0.0, 1.0), normalMap, material_clearCoatBumpiness);
    ccNormalW = normalize(dTBN * normalMap);
#else
    ccNormalW = dVertexNormalW;
#endif
}
`;

var clusteredLightUtilsPS = `
// Converts unnormalized direction vector to a cubemap face index [0..5] and uv coordinates within the face in [0..1] range.
// Additionally offset to a tile in atlas within 3x3 subdivision is provided
vec2 getCubemapFaceCoordinates(const vec3 dir, out float faceIndex, out vec2 tileOffset)
{
    vec3 vAbs = abs(dir);
    float ma;
    vec2 uv;
    if (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y) {   // front / back

        faceIndex = dir.z < 0.0 ? 5.0 : 4.0;
        ma = 0.5 / vAbs.z;
        uv = vec2(dir.z < 0.0 ? -dir.x : dir.x, -dir.y);

        tileOffset.x = 2.0;
        tileOffset.y = dir.z < 0.0 ? 1.0 : 0.0;

    } else if(vAbs.y >= vAbs.x) {  // top index 2, bottom index 3

        faceIndex = dir.y < 0.0 ? 3.0 : 2.0;
        ma = 0.5 / vAbs.y;
        uv = vec2(dir.x, dir.y < 0.0 ? -dir.z : dir.z);

        tileOffset.x = 1.0;
        tileOffset.y = dir.y < 0.0 ? 1.0 : 0.0;

    } else {    // left / right

        faceIndex = dir.x < 0.0 ? 1.0 : 0.0;
        ma = 0.5 / vAbs.x;
        uv = vec2(dir.x < 0.0 ? dir.z : -dir.z, -dir.y);

        tileOffset.x = 0.0;
        tileOffset.y = dir.x < 0.0 ? 1.0 : 0.0;

    }
    return uv * ma + 0.5;
}

// converts unnormalized direction vector to a texture coordinate for a cubemap face stored within texture atlas described by the viewport
vec2 getCubemapAtlasCoordinates(const vec3 omniAtlasViewport, float shadowEdgePixels, float shadowTextureResolution, const vec3 dir) {

    float faceIndex;
    vec2 tileOffset;
    vec2 uv = getCubemapFaceCoordinates(dir, faceIndex, tileOffset);

    // move uv coordinates inwards inside to compensate for larger fov when rendering shadow into atlas
    float atlasFaceSize = omniAtlasViewport.z;
    float tileSize = shadowTextureResolution * atlasFaceSize;
    float offset = shadowEdgePixels / tileSize;
    uv = uv * vec2(1.0 - offset * 2.0) + vec2(offset * 1.0);

    // scale uv coordinates to cube face area within the viewport
    uv *= atlasFaceSize;

    // offset into face of the atlas (3x3 grid)
    uv += tileOffset * atlasFaceSize;

    // offset into the atlas viewport
    uv += omniAtlasViewport.xy;

    return uv;
}
`;

var clusteredLightCookiesPS = `
vec3 _getCookieClustered(sampler2D tex, vec2 uv, float intensity, bool isRgb, vec4 cookieChannel) {
    vec4 pixel = mix(vec4(1.0), texture2D(tex, uv), intensity);
    return isRgb == true ? pixel.rgb : vec3(dot(pixel, cookieChannel));
}

// getCookie2D for clustered lighting including channel selector
vec3 getCookie2DClustered(sampler2D tex, mat4 transform, vec3 worldPosition, float intensity, bool isRgb, vec4 cookieChannel) {
    vec4 projPos = transform * vec4(worldPosition, 1.0);
    return _getCookieClustered(tex, projPos.xy / projPos.w, intensity, isRgb, cookieChannel);
}

// getCookie for clustered omni light with the cookie texture being stored in the cookie atlas
vec3 getCookieCubeClustered(sampler2D tex, vec3 dir, float intensity, bool isRgb, vec4 cookieChannel, float shadowTextureResolution, float shadowEdgePixels, vec3 omniAtlasViewport) {
    vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);
    return _getCookieClustered(tex, uv, intensity, isRgb, cookieChannel);
}
`;

var clusteredLightShadowsPS = `
// Clustered Omni Sampling using atlas

#ifdef GL2

    #if defined(CLUSTER_SHADOW_TYPE_PCF1)

    float getShadowOmniClusteredPCF1(sampler2DShadow shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {

        float shadowTextureResolution = shadowParams.x;
        vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);

        float shadowZ = length(dir) * shadowParams.w + shadowParams.z;
        return texture(shadowMap, vec3(uv, shadowZ));
    }

    #endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF3)

    float getShadowOmniClusteredPCF3(sampler2DShadow shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {

        float shadowTextureResolution = shadowParams.x;
        vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);

        float shadowZ = length(dir) * shadowParams.w + shadowParams.z;
        dShadowCoord = vec3(uv, shadowZ);
        return getShadowPCF3x3(shadowMap, shadowParams.xyz);
    }

    #endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF5)

    float getShadowOmniClusteredPCF5(sampler2DShadow shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {

        float shadowTextureResolution = shadowParams.x;
        vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);

        float shadowZ = length(dir) * shadowParams.w + shadowParams.z;
        dShadowCoord = vec3(uv, shadowZ);
        return getShadowPCF5x5(shadowMap, shadowParams.xyz);
    }

    #endif

#else

    #if defined(CLUSTER_SHADOW_TYPE_PCF1)

    float getShadowOmniClusteredPCF1(sampler2D shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {

        float shadowTextureResolution = shadowParams.x;
        vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);

        // no filter shadow sampling
        float depth = unpackFloat(texture2D(shadowMap, uv));
        float shadowZ = length(dir) * shadowParams.w + shadowParams.z;
        return depth > shadowZ ? 1.0 : 0.0;
    }

    #endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF3)

    float getShadowOmniClusteredPCF3(sampler2D shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {

        float shadowTextureResolution = shadowParams.x;
        vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);

        // pcf3
        float shadowZ = length(dir) * shadowParams.w + shadowParams.z;
        dShadowCoord = vec3(uv, shadowZ);
        return getShadowPCF3x3(shadowMap, shadowParams.xyz);
    }

    #endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF5)

    // we don't have PCF5 implementation for webgl1, use PCF3
    float getShadowOmniClusteredPCF5(sampler2D shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {

        float shadowTextureResolution = shadowParams.x;
        vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);

        // pcf3
        float shadowZ = length(dir) * shadowParams.w + shadowParams.z;
        dShadowCoord = vec3(uv, shadowZ);
        return getShadowPCF3x3(shadowMap, shadowParams.xyz);
    }

    #endif

#endif


// Clustered Spot Sampling using atlas

#ifdef GL2

    #if defined(CLUSTER_SHADOW_TYPE_PCF1)

    float getShadowSpotClusteredPCF1(sampler2DShadow shadowMap, vec4 shadowParams) {
        return texture(shadowMap, dShadowCoord);
    }

    #endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF3)

    float getShadowSpotClusteredPCF3(sampler2DShadow shadowMap, vec4 shadowParams) {
        return getShadowSpotPCF3x3(shadowMap, shadowParams);
    }

    #endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF5)

    float getShadowSpotClusteredPCF5(sampler2DShadow shadowMap, vec4 shadowParams) {
        return getShadowPCF5x5(shadowMap, shadowParams.xyz);
    }
    #endif

#else

    #if defined(CLUSTER_SHADOW_TYPE_PCF1)

    float getShadowSpotClusteredPCF1(sampler2D shadowMap, vec4 shadowParams) {

        float depth = unpackFloat(texture2D(shadowMap, dShadowCoord.xy));

        return depth > dShadowCoord.z ? 1.0 : 0.0;

    }

    #endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF3)

    float getShadowSpotClusteredPCF3(sampler2D shadowMap, vec4 shadowParams) {
        return getShadowSpotPCF3x3(shadowMap, shadowParams);
    }

    #endif

    #if defined(CLUSTER_SHADOW_TYPE_PCF5)

    // we don't have PCF5 implementation for webgl1, use PCF3
    float getShadowSpotClusteredPCF5(sampler2D shadowMap, vec4 shadowParams) {
        return getShadowSpotPCF3x3(shadowMap, shadowParams);
    }

    #endif

#endif
`;

var clusteredLightPS = `
uniform sampler2D clusterWorldTexture;
uniform sampler2D lightsTexture8;
uniform highp sampler2D lightsTextureFloat;

// complex ifdef expression are not supported, handle it here
// defined(CLUSTER_COOKIES) || defined(CLUSTER_SHADOWS)
#if defined(CLUSTER_COOKIES)
    #define CLUSTER_COOKIES_OR_SHADOWS
#endif
#if defined(CLUSTER_SHADOWS)
    #define CLUSTER_COOKIES_OR_SHADOWS
#endif

#ifdef CLUSTER_SHADOWS
    #ifdef GL2
        // TODO: when VSM shadow is supported, it needs to use sampler2D in webgl2
        uniform sampler2DShadow shadowAtlasTexture;
    #else
        uniform sampler2D shadowAtlasTexture;
    #endif
#endif

#ifdef CLUSTER_COOKIES
    uniform sampler2D cookieAtlasTexture;
#endif

uniform float clusterPixelsPerCell;
uniform vec3 clusterCellsCountByBoundsSize;
uniform vec4 lightsTextureInvSize;
uniform vec3 clusterTextureSize;
uniform vec3 clusterBoundsMin;
uniform vec3 clusterBoundsDelta;
uniform vec3 clusterCellsDot;
uniform vec3 clusterCellsMax;
uniform vec2 clusterCompressionLimit0;
uniform vec2 shadowAtlasParams;

// structure storing light properties of a clustered light
struct ClusterLightData {

    // v coordinate to look up the light textures
    float lightV;

    // type of the light (spot or omni)
    float type;

    // area light shape
    float shape;

    // area light sizes / orientation
    vec3 halfWidth;
    vec3 halfHeight;

    // light follow mode
    float falloffMode;

    // 0.0 if the light doesn't cast shadows
    float shadowIntensity;

    // shadow bias values
    float shadowBias;
    float shadowNormalBias;

    // world space position
    vec3 position;

    // world space direction (spot light only)
    vec3 direction;

    // range of the light
    float range;

    // spot light inner and outer angle cosine
    float innerConeAngleCos;
    float outerConeAngleCos;

    // color
    vec3 color;

    // atlas viewport for omni light shadow and cookie (.xy is offset to the viewport slot, .z is size of the face in the atlas)
    vec3 omniAtlasViewport;

    // 1.0 if the light has a cookie texture
    float cookie;

    // 1.0 if cookie texture is rgb, otherwise it is using a single channel selectable by cookieChannelMask
    float cookieRgb;

    // intensity of the cookie
    float cookieIntensity;

    // channel mask - one of the channels has 1, the others are 0
    vec4 cookieChannelMask;

    // light mask
    float mask;
};

// Note: on some devices (tested on Pixel 3A XL), this matrix when stored inside the light struct has lower precision compared to
// when stored outside, so we store it outside to avoid spot shadow flickering. This might need to be done to other / all members
// of the structure if further similar issues are observed.

// shadow (spot light only) / cookie projection matrix
mat4 lightProjectionMatrix;

// macros for light properties
#define isClusteredLightCastShadow(light) ( light.shadowIntensity > 0.0 )
#define isClusteredLightCookie(light) (light.cookie > 0.5 )
#define isClusteredLightCookieRgb(light) (light.cookieRgb > 0.5 )
#define isClusteredLightSpot(light) ( light.type > 0.5 )
#define isClusteredLightFalloffLinear(light) ( light.falloffMode < 0.5 )

// macros to test light shape
// Note: Following functions need to be called serially in listed order as they do not test both '>' and '<'
#define isClusteredLightArea(light) ( light.shape > 0.1 )
#define isClusteredLightRect(light) ( light.shape < 0.3 )
#define isClusteredLightDisk(light) ( light.shape < 0.6 )

// macro to test light mask (mesh accepts dynamic vs lightmapped lights)
#ifdef CLUSTER_MESH_DYNAMIC_LIGHTS
    // accept lights marked as dynamic or both dynamic and lightmapped
    #define acceptLightMask(light) ( light.mask < 0.75)
#else
    // accept lights marked as lightmapped or both dynamic and lightmapped
    #define acceptLightMask(light) ( light.mask > 0.25)
#endif

vec4 decodeClusterLowRange4Vec4(vec4 d0, vec4 d1, vec4 d2, vec4 d3) {
    return vec4(
        bytes2floatRange4(d0, -2.0, 2.0),
        bytes2floatRange4(d1, -2.0, 2.0),
        bytes2floatRange4(d2, -2.0, 2.0),
        bytes2floatRange4(d3, -2.0, 2.0)
    );
}

// use LOD sampling if supported to sample data textures as it has better chance of getting skipped inside dynamic branches
#ifdef SUPPORTS_TEXLOD
    #define textureData(texture, uv) texture2DLodEXT(texture, uv, 0.0)
#else
    #define textureData(texture, uv) texture2D(texture, uv)
#endif

vec4 sampleLightsTexture8(const ClusterLightData clusterLightData, float index) {
    return textureData(lightsTexture8, vec2(index * lightsTextureInvSize.z, clusterLightData.lightV));
}

vec4 sampleLightTextureF(const ClusterLightData clusterLightData, float index) {
    return textureData(lightsTextureFloat, vec2(index * lightsTextureInvSize.x, clusterLightData.lightV));
}

void decodeClusterLightCore(inout ClusterLightData clusterLightData, float lightIndex) {

    // read omni light properties
    clusterLightData.lightV = (lightIndex + 0.5) * lightsTextureInvSize.w;

    // shared data from 8bit texture
    vec4 lightInfo = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_FLAGS);
    clusterLightData.type = lightInfo.x;
    clusterLightData.shape = lightInfo.y;
    clusterLightData.falloffMode = lightInfo.z;
    clusterLightData.shadowIntensity = lightInfo.w;

    // color
    vec4 colorA = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_COLOR_A);
    vec4 colorB = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_COLOR_B);
    clusterLightData.color = vec3(bytes2float2(colorA.xy), bytes2float2(colorA.zw), bytes2float2(colorB.xy)) * clusterCompressionLimit0.y;

    // cookie
    clusterLightData.cookie = colorB.z;

    // light mask
    clusterLightData.mask = colorB.w;

    #ifdef CLUSTER_TEXTURE_FLOAT

        vec4 lightPosRange = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_POSITION_RANGE);
        clusterLightData.position = lightPosRange.xyz;
        clusterLightData.range = lightPosRange.w;

        // spot light direction
        vec4 lightDir_Unused = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_SPOT_DIRECTION);
        clusterLightData.direction = lightDir_Unused.xyz;

    #else   // 8bit

        vec4 encPosX = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_POSITION_X);
        vec4 encPosY = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_POSITION_Y);
        vec4 encPosZ = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_POSITION_Z);
        clusterLightData.position = vec3(bytes2float4(encPosX), bytes2float4(encPosY), bytes2float4(encPosZ)) * clusterBoundsDelta + clusterBoundsMin;

        vec4 encRange = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_RANGE);
        clusterLightData.range = bytes2float4(encRange) * clusterCompressionLimit0.x;

        // spot light direction
        vec4 encDirX = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SPOT_DIRECTION_X);
        vec4 encDirY = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SPOT_DIRECTION_Y);
        vec4 encDirZ = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SPOT_DIRECTION_Z);
        clusterLightData.direction = vec3(bytes2float4(encDirX), bytes2float4(encDirY), bytes2float4(encDirZ)) * 2.0 - 1.0;

    #endif
}

void decodeClusterLightSpot(inout ClusterLightData clusterLightData) {

    // spot light cos angles
    vec4 coneAngle = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SPOT_ANGLES);
    clusterLightData.innerConeAngleCos = bytes2float2(coneAngle.xy) * 2.0 - 1.0;
    clusterLightData.outerConeAngleCos = bytes2float2(coneAngle.zw) * 2.0 - 1.0;
}

void decodeClusterLightOmniAtlasViewport(inout ClusterLightData clusterLightData) {
    #ifdef CLUSTER_TEXTURE_FLOAT
        clusterLightData.omniAtlasViewport = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_0).xyz;
    #else
        vec4 viewportA = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_ATLAS_VIEWPORT_A);
        vec4 viewportB = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_ATLAS_VIEWPORT_B);
        clusterLightData.omniAtlasViewport = vec3(bytes2float2(viewportA.xy), bytes2float2(viewportA.zw), bytes2float2(viewportB.xy));
    #endif
}

void decodeClusterLightAreaData(inout ClusterLightData clusterLightData) {
    #ifdef CLUSTER_TEXTURE_FLOAT
        clusterLightData.halfWidth = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_AREA_DATA_WIDTH).xyz;
        clusterLightData.halfHeight = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_AREA_DATA_HEIGHT).xyz;
    #else
        vec4 areaWidthX = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_WIDTH_X);
        vec4 areaWidthY = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_WIDTH_Y);
        vec4 areaWidthZ = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_WIDTH_Z);
        clusterLightData.halfWidth = vec3(mantissaExponent2Float(areaWidthX), mantissaExponent2Float(areaWidthY), mantissaExponent2Float(areaWidthZ));

        vec4 areaHeightX = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_HEIGHT_X);
        vec4 areaHeightY = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_HEIGHT_Y);
        vec4 areaHeightZ = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_HEIGHT_Z);
        clusterLightData.halfHeight = vec3(mantissaExponent2Float(areaHeightX), mantissaExponent2Float(areaHeightY), mantissaExponent2Float(areaHeightZ));
    #endif
}

void decodeClusterLightProjectionMatrixData(inout ClusterLightData clusterLightData) {
    
    // shadow matrix
    #ifdef CLUSTER_TEXTURE_FLOAT
        vec4 m0 = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_0);
        vec4 m1 = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_1);
        vec4 m2 = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_2);
        vec4 m3 = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_3);
    #else
        vec4 m00 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_00);
        vec4 m01 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_01);
        vec4 m02 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_02);
        vec4 m03 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_03);
        vec4 m0 = decodeClusterLowRange4Vec4(m00, m01, m02, m03);

        vec4 m10 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_10);
        vec4 m11 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_11);
        vec4 m12 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_12);
        vec4 m13 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_13);
        vec4 m1 = decodeClusterLowRange4Vec4(m10, m11, m12, m13);

        vec4 m20 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_20);
        vec4 m21 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_21);
        vec4 m22 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_22);
        vec4 m23 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_23);
        vec4 m2 = decodeClusterLowRange4Vec4(m20, m21, m22, m23);

        vec4 m30 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_30);
        vec4 m31 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_31);
        vec4 m32 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_32);
        vec4 m33 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_33);
        vec4 m3 = vec4(mantissaExponent2Float(m30), mantissaExponent2Float(m31), mantissaExponent2Float(m32), mantissaExponent2Float(m33));
    #endif
    
    lightProjectionMatrix = mat4(m0, m1, m2, m3);
}

void decodeClusterLightShadowData(inout ClusterLightData clusterLightData) {
    
    // shadow biases
    vec4 biases = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SHADOW_BIAS);
    clusterLightData.shadowBias = bytes2floatRange2(biases.xy, -1.0, 20.0),
    clusterLightData.shadowNormalBias = bytes2float2(biases.zw);
}

void decodeClusterLightCookieData(inout ClusterLightData clusterLightData) {

    vec4 cookieA = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_COOKIE_A);
    clusterLightData.cookieIntensity = cookieA.x;
    clusterLightData.cookieRgb = cookieA.y;

    clusterLightData.cookieChannelMask = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_COOKIE_B);
}

void evaluateLight(ClusterLightData light) {

    dAtten3 = vec3(1.0);

    // evaluate omni part of the light
    getLightDirPoint(light.position);

    #ifdef CLUSTER_AREALIGHTS

    // distance attenuation
    if (isClusteredLightArea(light)) { // area light

        // area lights
        decodeClusterLightAreaData(light);

        // handle light shape
        if (isClusteredLightRect(light)) {
            calcRectLightValues(light.position, light.halfWidth, light.halfHeight);
        } else if (isClusteredLightDisk(light)) {
            calcDiskLightValues(light.position, light.halfWidth, light.halfHeight);
        } else { // sphere
            calcSphereLightValues(light.position, light.halfWidth, light.halfHeight);
        }

        dAtten = getFalloffWindow(light.range);

    } else

    #endif

    {   // punctual light

        if (isClusteredLightFalloffLinear(light))
            dAtten = getFalloffLinear(light.range);
        else
            dAtten = getFalloffInvSquared(light.range);
    }

    if (dAtten > 0.00001) {

        #ifdef CLUSTER_AREALIGHTS

        if (isClusteredLightArea(light)) { // area light

            // handle light shape
            if (isClusteredLightRect(light)) {
                dAttenD = getRectLightDiffuse() * 16.0;
            } else if (isClusteredLightDisk(light)) {
                dAttenD = getDiskLightDiffuse() * 16.0;
            } else { // sphere
                dAttenD = getSphereLightDiffuse() * 16.0;
            }

        } else

        #endif

        {
            dAtten *= getLightDiffuse();
        }

        // spot light falloff
        if (isClusteredLightSpot(light)) {
            decodeClusterLightSpot(light);
            dAtten *= getSpotEffect(light.direction, light.innerConeAngleCos, light.outerConeAngleCos);
        }

        #if defined(CLUSTER_COOKIES_OR_SHADOWS)

        if (dAtten > 0.00001) {

            // shadow / cookie
            if (isClusteredLightCastShadow(light) || isClusteredLightCookie(light)) {

                // shared shadow / cookie data depends on light type
                if (isClusteredLightSpot(light)) {
                    decodeClusterLightProjectionMatrixData(light);
                } else {
                    decodeClusterLightOmniAtlasViewport(light);
                }

                float shadowTextureResolution = shadowAtlasParams.x;
                float shadowEdgePixels = shadowAtlasParams.y;

                #ifdef CLUSTER_COOKIES

                // cookie
                if (isClusteredLightCookie(light)) {
                    decodeClusterLightCookieData(light);

                    if (isClusteredLightSpot(light)) {
                        dAtten3 = getCookie2DClustered(cookieAtlasTexture, lightProjectionMatrix, vPositionW, light.cookieIntensity, isClusteredLightCookieRgb(light), light.cookieChannelMask);
                    } else {
                        dAtten3 = getCookieCubeClustered(cookieAtlasTexture, dLightDirW, light.cookieIntensity, isClusteredLightCookieRgb(light), light.cookieChannelMask, shadowTextureResolution, shadowEdgePixels, light.omniAtlasViewport);
                    }
                }

                #endif

                #ifdef CLUSTER_SHADOWS

                // shadow
                if (isClusteredLightCastShadow(light)) {
                    decodeClusterLightShadowData(light);

                    vec4 shadowParams = vec4(shadowTextureResolution, light.shadowNormalBias, light.shadowBias, 1.0 / light.range);

                    if (isClusteredLightSpot(light)) {

                        // spot shadow
                        getShadowCoordPerspZbufferNormalOffset(lightProjectionMatrix, shadowParams);
                        
                        #if defined(CLUSTER_SHADOW_TYPE_PCF1)
                            float shadow = getShadowSpotClusteredPCF1(shadowAtlasTexture, shadowParams);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF3)
                            float shadow = getShadowSpotClusteredPCF3(shadowAtlasTexture, shadowParams);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF5)
                            float shadow = getShadowSpotClusteredPCF5(shadowAtlasTexture, shadowParams);
                        #endif
                        dAtten *= mix(1.0, shadow, light.shadowIntensity);

                    } else {

                        // omni shadow
                        normalOffsetPointShadow(shadowParams);  // normalBias adjusted for distance

                        #if defined(CLUSTER_SHADOW_TYPE_PCF1)
                            float shadow = getShadowOmniClusteredPCF1(shadowAtlasTexture, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dLightDirW);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF3)
                            float shadow = getShadowOmniClusteredPCF3(shadowAtlasTexture, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dLightDirW);
                        #elif defined(CLUSTER_SHADOW_TYPE_PCF5)
                            float shadow = getShadowOmniClusteredPCF5(shadowAtlasTexture, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dLightDirW);
                        #endif
                        dAtten *= mix(1.0, shadow, light.shadowIntensity);
                    }
                }

                #endif
            }
        }

        #endif

        // diffuse / specular / clearcoat
        #ifdef CLUSTER_AREALIGHTS

        if (isClusteredLightArea(light)) { // area light

            // area light diffuse
            {
                vec3 areaDiffuse = (dAttenD * dAtten) * light.color * dAtten3;

                #if defined(LIT_SPECULAR)
                    #if defined(LIT_CONSERVE_ENERGY)
                        areaDiffuse = mix(areaDiffuse, vec3(0), dLTCSpecFres);
                    #endif
                #endif

                // area light diffuse - it does not mix diffuse lighting into specular attenuation
                dDiffuseLight += areaDiffuse;
            }

            // specular and clear coat are material settings and get included by a define based on the material
            #ifdef LIT_SPECULAR

                // area light specular
                float areaLightSpecular;

                if (isClusteredLightRect(light)) {
                    areaLightSpecular = getRectLightSpecular();
                } else if (isClusteredLightDisk(light)) {
                    areaLightSpecular = getDiskLightSpecular();
                } else { // sphere
                    areaLightSpecular = getSphereLightSpecular();
                }

                dSpecularLight += dLTCSpecFres * areaLightSpecular * dAtten * light.color * dAtten3;

                #ifdef LIT_CLEARCOAT

                    // area light specular clear coat
                    float areaLightSpecularCC;

                    if (isClusteredLightRect(light)) {
                        areaLightSpecularCC = getRectLightSpecularCC();
                    } else if (isClusteredLightDisk(light)) {
                        areaLightSpecularCC = getDiskLightSpecularCC();
                    } else { // sphere
                        areaLightSpecularCC = getSphereLightSpecularCC();
                    }

                    ccSpecularLight += ccLTCSpecFres * areaLightSpecularCC * dAtten * light.color  * dAtten3;

                #endif

            #endif

        } else

        #endif

        {    // punctual light

            // punctual light diffuse
            {
                vec3 punctualDiffuse = dAtten * light.color * dAtten3;

                #if defined(CLUSTER_AREALIGHTS)
                #if defined(LIT_SPECULAR)
                #if defined(LIT_CONSERVE_ENERGY)
                    punctualDiffuse = mix(punctualDiffuse, vec3(0), dSpecularity);
                #endif
                #endif
                #endif

                dDiffuseLight += punctualDiffuse;
            }
   
            // specular and clear coat are material settings and get included by a define based on the material
            #ifdef LIT_SPECULAR

                vec3 halfDir = normalize(-dLightDirNormW + dViewDirW);
                
                // specular
                #ifdef LIT_SPECULAR_FRESNEL
                    dSpecularLight += getLightSpecular(halfDir) * dAtten * light.color * dAtten3 * getFresnel(dot(dViewDirW, halfDir), dSpecularity);
                #else
                    dSpecularLight += getLightSpecular(halfDir) * dAtten * light.color * dAtten3 * dSpecularity;
                #endif

                #ifdef LIT_CLEARCOAT
                    #ifdef LIT_SPECULAR_FRESNEL
                        ccSpecularLight += getLightSpecularCC(halfDir) * dAtten * light.color * dAtten3 * getFresnelCC(dot(dViewDirW, halfDir));
                    #else
                        ccSpecularLight += getLightSpecularCC(halfDir) * dAtten * light.color * dAtten3;
                    #endif
                #endif

                #ifdef LIT_SHEEN
                    sSpecularLight += getLightSpecularSheen(halfDir) * dAtten * light.color * dAtten3;
                #endif

            #endif
        }
    }
}

void evaluateClusterLight(float lightIndex) {

    // decode core light data from textures
    ClusterLightData clusterLightData;
    decodeClusterLightCore(clusterLightData, lightIndex);

    // evaluate light if it uses accepted light mask
    if (acceptLightMask(clusterLightData))
        evaluateLight(clusterLightData);
}

void addClusteredLights() {
    // world space position to 3d integer cell cordinates in the cluster structure
    vec3 cellCoords = floor((vPositionW - clusterBoundsMin) * clusterCellsCountByBoundsSize);

    // no lighting when cell coordinate is out of range
    if (!(any(lessThan(cellCoords, vec3(0.0))) || any(greaterThanEqual(cellCoords, clusterCellsMax)))) {

        // cell index (mapping from 3d cell coordinates to linear memory)
        float cellIndex = dot(clusterCellsDot, cellCoords);

        // convert cell index to uv coordinates
        float clusterV = floor(cellIndex * clusterTextureSize.y);
        float clusterU = cellIndex - (clusterV * clusterTextureSize.x);
        clusterV = (clusterV + 0.5) * clusterTextureSize.z;

        // loop over maximum possible number of supported light cells
        const float maxLightCells = 256.0 / 4.0;  // 8 bit index, each stores 4 lights
        for (float lightCellIndex = 0.5; lightCellIndex < maxLightCells; lightCellIndex++) {

            vec4 lightIndices = textureData(clusterWorldTexture, vec2(clusterTextureSize.y * (clusterU + lightCellIndex), clusterV));
            vec4 indices = lightIndices * 255.0;

            // evaluate up to 4 lights. This is written using a loop instead of manually unrolling to keep shader compile time smaller
            for (int i = 0; i < 4; i++) {
                
                if (indices.x <= 0.0)
                    return;

                evaluateClusterLight(indices.x); 
                indices = indices.yzwx;
            }

            // end of the cell array
            if (lightCellIndex > clusterPixelsPerCell) {
                break;
            }
        }
    }
}
`;

var combinePS = `
vec3 combineColor() {
    vec3 ret = vec3(0);
#ifdef LIT_OLD_AMBIENT
    ret += (dDiffuseLight - light_globalAmbient) * dAlbedo + material_ambient * light_globalAmbient;
#else
    ret += dAlbedo * dDiffuseLight;
#endif
#ifdef LIT_SPECULAR
    ret += dSpecularLight;
#endif
#ifdef LIT_REFLECTIONS
    ret += dReflection.rgb * dReflection.a;
#endif

#ifdef LIT_SHEEN
    float sheenScaling = 1.0 - max(max(sSpecularity.r, sSpecularity.g), sSpecularity.b) * 0.157;
    ret = ret * sheenScaling + (sSpecularLight + sReflection.rgb) * sSpecularity;
#endif
#ifdef LIT_CLEARCOAT
    float clearCoatScaling = 1.0 - ccFresnel * ccSpecularity;
    ret = ret * clearCoatScaling + (ccSpecularLight + ccReflection.rgb) * ccSpecularity;
#endif

    return ret;
}
`;

var cookiePS = `
// light cookie functionality for non-clustered lights
vec4 getCookie2D(sampler2D tex, mat4 transform, float intensity) {
    vec4 projPos = transform * vec4(vPositionW, 1.0);
    projPos.xy /= projPos.w;
    return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);
}

vec4 getCookie2DClip(sampler2D tex, mat4 transform, float intensity) {
    vec4 projPos = transform * vec4(vPositionW, 1.0);
    projPos.xy /= projPos.w;
    if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);
    return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);
}

vec4 getCookie2DXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {
    vec4 projPos = transform * vec4(vPositionW, 1.0);
    projPos.xy /= projPos.w;
    projPos.xy += cookieOffset;
    vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);
    return mix(vec4(1.0), texture2D(tex, uv), intensity);
}

vec4 getCookie2DClipXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {
    vec4 projPos = transform * vec4(vPositionW, 1.0);
    projPos.xy /= projPos.w;
    projPos.xy += cookieOffset;
    if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);
    vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);
    return mix(vec4(1.0), texture2D(tex, uv), intensity);
}

vec4 getCookieCube(samplerCube tex, mat4 transform, float intensity) {
    return mix(vec4(1.0), textureCube(tex, dLightDirNormW * mat3(transform)), intensity);
}
`;

var cubeMapProjectBoxPS = `
uniform vec3 envBoxMin, envBoxMax;

vec3 cubeMapProject(vec3 nrdir) {
    nrdir = cubeMapRotate(nrdir);

    vec3 rbmax = (envBoxMax - vPositionW) / nrdir;
    vec3 rbmin = (envBoxMin - vPositionW) / nrdir;

    vec3 rbminmax;
    rbminmax.x = nrdir.x>0.0? rbmax.x : rbmin.x;
    rbminmax.y = nrdir.y>0.0? rbmax.y : rbmin.y;
    rbminmax.z = nrdir.z>0.0? rbmax.z : rbmin.z;

    float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);

    vec3 posonbox = vPositionW + nrdir * fa;
    vec3 envBoxPos = (envBoxMin + envBoxMax) * 0.5;
    return normalize(posonbox - envBoxPos);
}
`;

var cubeMapProjectNonePS = `
vec3 cubeMapProject(vec3 dir) {
    return cubeMapRotate(dir);
}
`;

var cubeMapRotatePS = `
#ifdef CUBEMAP_ROTATION
uniform mat3 cubeMapRotationMatrix;
#endif

vec3 cubeMapRotate(vec3 refDir) {
#ifdef CUBEMAP_ROTATION
    return refDir * cubeMapRotationMatrix;
#else
    return refDir;
#endif
}
`;

var decodePS = `
vec3 decodeLinear(vec4 raw) {
    return raw.rgb;
}

float decodeGamma(float raw) {
    return pow(raw, 2.2);
}

vec3 decodeGamma(vec3 raw) {
    return pow(raw, vec3(2.2));
}

vec3 decodeGamma(vec4 raw) {
    return pow(raw.xyz, vec3(2.2));
}

vec3 decodeRGBM(vec4 raw) {
    vec3 color = (8.0 * raw.a) * raw.rgb;
    return color * color;
}

vec3 decodeRGBP(vec4 raw) {
    vec3 color = raw.rgb * (-raw.a * 7.0 + 8.0);
    return color * color;
}

vec3 decodeRGBE(vec4 raw) {
    if (raw.a == 0.0) {
        return vec3(0.0, 0.0, 0.0);
    } else {
        return raw.xyz * pow(2.0, raw.w * 255.0 - 128.0);
    }
}

vec4 passThrough(vec4 raw) {
    return raw;
}
`;

var detailModesPS = `
vec3 detailMode_mul(vec3 c1, vec3 c2) {
    return c1 * c2;
}

vec3 detailMode_add(vec3 c1, vec3 c2) {
    return c1 + c2;
}

// https://en.wikipedia.org/wiki/Blend_modes#Screen
vec3 detailMode_screen(vec3 c1, vec3 c2) {
    return 1.0 - (1.0 - c1)*(1.0 - c2);
}

// https://en.wikipedia.org/wiki/Blend_modes#Overlay
vec3 detailMode_overlay(vec3 c1, vec3 c2) {
    return mix(1.0 - 2.0*(1.0 - c1)*(1.0 - c2), 2.0*c1*c2, step(c1, vec3(0.5)));
}

vec3 detailMode_min(vec3 c1, vec3 c2) {
    return min(c1, c2);
}

vec3 detailMode_max(vec3 c1, vec3 c2) {
    return max(c1, c2);
}
`;

var diffusePS = `
#ifdef MAPCOLOR
uniform vec3 material_diffuse;
#endif

void getAlbedo() {
    dAlbedo = vec3(1.0);

#ifdef MAPCOLOR
    dAlbedo *= material_diffuse.rgb;
#endif

#ifdef MAPTEXTURE
    vec3 albedoBase = $DECODE(texture2DBias($SAMPLER, $UV, textureBias)).$CH;
    dAlbedo *= addAlbedoDetail(albedoBase);
#endif

#ifdef MAPVERTEX
    dAlbedo *= gammaCorrectInput(saturate(vVertexColor.$VC));
#endif
}
`;

var diffuseDetailMapPS = `
vec3 addAlbedoDetail(vec3 albedo) {
#ifdef MAPTEXTURE
    vec3 albedoDetail = $DECODE(texture2DBias($SAMPLER, $UV, textureBias)).$CH;
    return detailMode_$DETAILMODE(albedo, albedoDetail);
#else
    return albedo;
#endif
}
`;

var emissivePS = `
#ifdef MAPCOLOR
uniform vec3 material_emissive;
#endif

#ifdef MAPFLOAT
uniform float material_emissiveIntensity;
#endif

void getEmission() {
    dEmission = vec3(1.0);

    #ifdef MAPFLOAT
    dEmission *= material_emissiveIntensity;
    #endif

    #ifdef MAPCOLOR
    dEmission *= material_emissive;
    #endif

    #ifdef MAPTEXTURE
    dEmission *= $DECODE(texture2DBias($SAMPLER, $UV, textureBias)).$CH;
    #endif

    #ifdef MAPVERTEX
    dEmission *= gammaCorrectInput(saturate(vVertexColor.$VC));
    #endif
}
`;

var encodePS = `
vec4 encodeLinear(vec3 source) {
    return vec4(source, 1.0);
}

vec4 encodeGamma(vec3 source) {
    return vec4(pow(source + 0.0000001, vec3(1.0 / 2.2)), 1.0);
}

vec4 encodeRGBM(vec3 source) { // modified RGBM
    vec4 result;
    result.rgb = pow(source.rgb, vec3(0.5));
    result.rgb *= 1.0 / 8.0;

    result.a = saturate( max( max( result.r, result.g ), max( result.b, 1.0 / 255.0 ) ) );
    result.a = ceil(result.a * 255.0) / 255.0;

    result.rgb /= result.a;
    return result;
}

vec4 encodeRGBP(vec3 source) {
    // convert incoming linear to gamma(ish)
    vec3 gamma = pow(source, vec3(0.5));

    // calculate the maximum component clamped to 1..8
    float maxVal = min(8.0, max(1.0, max(gamma.x, max(gamma.y, gamma.z))));

    // calculate storage factor
    float v = 1.0 - ((maxVal - 1.0) / 7.0);

    // round the value for storage in 8bit channel
    v = ceil(v * 255.0) / 255.0;

    return vec4(gamma / (-v * 7.0 + 8.0), v);    
}

vec4 encodeRGBE(vec3 source) {
    float maxVal = max(source.x, max(source.y, source.z));
    if (maxVal < 1e-32) {
        return vec4(0, 0, 0, 0);
    } else {
        float e = ceil(log2(maxVal));
        return vec4(source / pow(2.0, e), (e + 128.0) / 255.0);
    }
}
`;

var endPS = `
    gl_FragColor.rgb = combineColor();

    gl_FragColor.rgb += dEmission;
    gl_FragColor.rgb = addFog(gl_FragColor.rgb);

    #ifndef HDR
    gl_FragColor.rgb = toneMap(gl_FragColor.rgb);
    gl_FragColor.rgb = gammaCorrectOutput(gl_FragColor.rgb);
    #endif
`;

var endVS = `
`;

var envAtlasPS = `
// the envAtlas is fixed at 512 pixels. every equirect is generated with 1 pixel boundary.
const float atlasSize = 512.0;
const float seamSize = 1.0 / atlasSize;

// map a normalized equirect UV to the given rectangle (taking 1 pixel seam into account).
vec2 mapUv(vec2 uv, vec4 rect) {
    return vec2(mix(rect.x + seamSize, rect.x + rect.z - seamSize, uv.x),
                mix(rect.y + seamSize, rect.y + rect.w - seamSize, uv.y));
}

// map a normalized equirect UV and roughness level to the correct atlas rect.
vec2 mapRoughnessUv(vec2 uv, float level) {
    float t = 1.0 / exp2(level);
    return mapUv(uv, vec4(0, 1.0 - t, t, t * 0.5));
}

// map shiny level UV
vec2 mapShinyUv(vec2 uv, float level) {
    float t = 1.0 / exp2(level);
    return mapUv(uv, vec4(1.0 - t, 1.0 - t, t, t * 0.5));
}
`;

var envConstPS = `
vec3 processEnvironment(vec3 color) {
    return color;
}
`;

var envMultiplyPS = `
uniform float skyboxIntensity;

vec3 processEnvironment(vec3 color) {
    return color * skyboxIntensity;
}
`;

var extensionPS = `
`;

var extensionVS = `
`;

var falloffInvSquaredPS = `
float getFalloffWindow(float lightRadius) {
    float sqrDist = dot(dLightDirW, dLightDirW);
    float invRadius = 1.0 / lightRadius;
    return square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );
}

float getFalloffInvSquared(float lightRadius) {
    float sqrDist = dot(dLightDirW, dLightDirW);
    float falloff = 1.0 / (sqrDist + 1.0);
    float invRadius = 1.0 / lightRadius;

    falloff *= 16.0;
    falloff *= square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );

    return falloff;
}
`;

var falloffLinearPS = `
float getFalloffLinear(float lightRadius) {
    float d = length(dLightDirW);
    return max(((lightRadius - d) / lightRadius), 0.0);
}
`;

var fixCubemapSeamsNonePS = `
vec3 fixSeams(vec3 vec, float mipmapIndex) {
    return vec;
}

vec3 fixSeams(vec3 vec) {
    return vec;
}

vec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {
    return vec;
}

vec3 calcSeam(vec3 vec) {
    return vec3(0);
}

vec3 applySeam(vec3 vec, vec3 seam, float scale) {
    return vec;
}
`;

var fixCubemapSeamsStretchPS = `
vec3 fixSeams(vec3 vec, float mipmapIndex) {
    vec3 avec = abs(vec);
    float scale = 1.0 - exp2(mipmapIndex) / 128.0;
    float M = max(max(avec.x, avec.y), avec.z);
    if (avec.x != M) vec.x *= scale;
    if (avec.y != M) vec.y *= scale;
    if (avec.z != M) vec.z *= scale;
    return vec;
}

vec3 fixSeams(vec3 vec) {
    vec3 avec = abs(vec);
    float scale = 1.0 - 1.0 / 128.0;
    float M = max(max(avec.x, avec.y), avec.z);
    if (avec.x != M) vec.x *= scale;
    if (avec.y != M) vec.y *= scale;
    if (avec.z != M) vec.z *= scale;
    return vec;
}

vec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {
    vec3 avec = abs(vec);
    float scale = invRecMipSize;
    float M = max(max(avec.x, avec.y), avec.z);
    if (avec.x != M) vec.x *= scale;
    if (avec.y != M) vec.y *= scale;
    if (avec.z != M) vec.z *= scale;
    return vec;
}

vec3 calcSeam(vec3 vec) {
    vec3 avec = abs(vec);
    float M = max(avec.x, max(avec.y, avec.z));
    return vec3(avec.x != M ? 1.0 : 0.0,
                avec.y != M ? 1.0 : 0.0,
                avec.z != M ? 1.0 : 0.0);
}

vec3 applySeam(vec3 vec, vec3 seam, float scale) {
    return vec * (seam * -scale + vec3(1.0));
}
`;

var floatUnpackingPS = `
// float unpacking functionality, complimentary to float-packing.js
float bytes2float2(vec2 data) {
    return dot(data, vec2(1.0, 1.0 / 255.0));
}

float bytes2float3(vec3 data) {
    return dot(data, vec3(1.0, 1.0 / 255.0, 1.0 / 65025.0));
}

float bytes2float4(vec4 data) {
    return dot(data, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));
}

float bytes2floatRange2(vec2 data, float min, float max) {
    return mix(min, max, bytes2float2(data));
}

float bytes2floatRange3(vec3 data, float min, float max) {
    return mix(min, max, bytes2float3(data));
}

float bytes2floatRange4(vec4 data, float min, float max) {
    return mix(min, max, bytes2float4(data));
}

float mantissaExponent2Float(vec4 pack)
{
    float value = bytes2floatRange3(pack.xyz, -1.0, 1.0);
    float exponent = floor(pack.w * 255.0 - 127.0);
    return value * exp2(exponent);
}
`;

var fogExpPS = `
uniform vec3 fog_color;
uniform float fog_density;
float dBlendModeFogFactor = 1.0;

vec3 addFog(vec3 color) {
    float depth = gl_FragCoord.z / gl_FragCoord.w;
    float fogFactor = exp(-depth * fog_density);
    fogFactor = clamp(fogFactor, 0.0, 1.0);
    return mix(fog_color * dBlendModeFogFactor, color, fogFactor);
}
`;

var fogExp2PS = `
uniform vec3 fog_color;
uniform float fog_density;
float dBlendModeFogFactor = 1.0;

vec3 addFog(vec3 color) {
    float depth = gl_FragCoord.z / gl_FragCoord.w;
    float fogFactor = exp(-depth * depth * fog_density * fog_density);
    fogFactor = clamp(fogFactor, 0.0, 1.0);
    return mix(fog_color * dBlendModeFogFactor, color, fogFactor);
}
`;

var fogLinearPS = `
uniform vec3 fog_color;
uniform float fog_start;
uniform float fog_end;
float dBlendModeFogFactor = 1.0;

vec3 addFog(vec3 color) {
    float depth = gl_FragCoord.z / gl_FragCoord.w;
    float fogFactor = (fog_end - depth) / (fog_end - fog_start);
    fogFactor = clamp(fogFactor, 0.0, 1.0);
    return mix(fog_color * dBlendModeFogFactor, color, fogFactor);
}
`;

var fogNonePS = `
float dBlendModeFogFactor = 1.0;

vec3 addFog(vec3 color) {
    return color;
}
`;

var fresnelSchlickPS = `
// Schlick's approximation
vec3 getFresnel(float cosTheta, vec3 f0) {
    float fresnel = pow(1.0 - max(cosTheta, 0.0), 5.0);
    float glossSq = dGlossiness * dGlossiness;
    vec3 ret = f0 + (max(vec3(glossSq), f0) - f0) * fresnel;
    #ifdef LIT_IRIDESCENCE
        return mix(ret, dIridescenceFresnel, vec3(dIridescence));
    #else
        return ret;
    #endif    
}

float getFresnelCC(float cosTheta) {
    float fresnel = pow(1.0 - max(cosTheta, 0.0), 5.0);
    return 0.04 + (1.0 - 0.04) * fresnel;
}
`;

var fullscreenQuadPS = `
varying vec2 vUv0;

uniform sampler2D source;

void main(void) {
    gl_FragColor = texture2D(source, vUv0);
}
`;

var fullscreenQuadVS = `
attribute vec2 vertex_position;

varying vec2 vUv0;

void main(void)
{
    gl_Position = vec4(vertex_position, 0.5, 1.0);
    vUv0 = vertex_position.xy*0.5+0.5;
}
`;

var gamma1_0PS = `
float gammaCorrectInput(float color) {
    return color;
}

vec3 gammaCorrectInput(vec3 color) {
    return color;
}

vec4 gammaCorrectInput(vec4 color) {
    return color;
}

vec3 gammaCorrectOutput(vec3 color) {
    return color;
}
`;

var gamma2_2PS = `
float gammaCorrectInput(float color) {
    return decodeGamma(color);
}

vec3 gammaCorrectInput(vec3 color) {
    return decodeGamma(color);
}

vec4 gammaCorrectInput(vec4 color) {
    return vec4(decodeGamma(color.xyz), color.w);
}

vec3 gammaCorrectOutput(vec3 color) {
#ifdef HDR
    return color;
#else
    return pow(color + 0.0000001, vec3(1.0 / 2.2));
#endif
}
`;

var gles2PS = `
#define texture2DBias texture2D
`;

var gles3PS = `
#define varying in
out highp vec4 pc_fragColor;
#define gl_FragColor pc_fragColor
#define texture2D texture
#define texture2DBias texture
#define textureCube texture
#define texture2DProj textureProj
#define texture2DLodEXT textureLod
#define texture2DProjLodEXT textureProjLod
#define textureCubeLodEXT textureLod
#define texture2DGradEXT textureGrad
#define texture2DProjGradEXT textureProjGrad
#define textureCubeGradEXT textureGrad
#define GL2
#define SUPPORTS_TEXLOD
`;

var gles3VS = `
#define attribute in
#define varying out
#define texture2D texture
#define GL2
#define VERTEXSHADER
`;

var glossPS = `
#ifdef MAPFLOAT
uniform float material_shininess;
#endif

void getGlossiness() {
    dGlossiness = 1.0;

    #ifdef MAPFLOAT
    dGlossiness *= material_shininess;
    #endif

    #ifdef MAPTEXTURE
    dGlossiness *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    dGlossiness *= saturate(vVertexColor.$VC);
    #endif

    dGlossiness += 0.0000001;
}
`;

var iridescenceDiffractionPS = `
uniform float material_iridescenceRefractionIndex;

#ifndef PI
#define PI 3.14159265
#endif

float iridescence_iorToFresnel(float transmittedIor, float incidentIor) {
    return pow((transmittedIor - incidentIor) / (transmittedIor + incidentIor), 2.0);
}

vec3 iridescence_iorToFresnel(vec3 transmittedIor, float incidentIor) {
    return pow((transmittedIor - vec3(incidentIor)) / (transmittedIor + vec3(incidentIor)), vec3(2.0));
}

vec3 iridescence_fresnelToIor(vec3 f0) {
    vec3 sqrtF0 = sqrt(f0);
    return (vec3(1.0) + sqrtF0) / (vec3(1.0) - sqrtF0);
}

vec3 iridescence_sensitivity(float opd, vec3 shift) {
    float phase = 2.0 * PI * opd * 1.0e-9;
    const vec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);
    const vec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);
    const vec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);

    vec3 xyz = val * sqrt(2.0 * PI * var) * cos(pos * phase + shift) * exp(-pow(phase, 2.0) * var);
    xyz.x += 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow(phase, 2.0));
    xyz /= vec3(1.0685e-07);

    const mat3 XYZ_TO_REC709 = mat3(
        3.2404542, -0.9692660,  0.0556434,
       -1.5371385,  1.8760108, -0.2040259,
       -0.4985314,  0.0415560,  1.0572252
    );

    return XYZ_TO_REC709 * xyz;
}

float iridescence_fresnel(float cosTheta, float f0) {
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x2 = x * x;
    float x5 = x * x2 * x2;
    return f0 + (1.0 - f0) * x5;
} 

vec3 iridescence_fresnel(float cosTheta, vec3 f0) {
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x2 = x * x;
    float x5 = x * x2 * x2; 
    return f0 + (vec3(1.0) - f0) * x5;
}

vec3 calcIridescence(float outsideIor, float cosTheta, vec3 base_f0) {

    float iridescenceIor = mix(outsideIor, material_iridescenceRefractionIndex, smoothstep(0.0, 0.03, dIridescenceThickness));
    float sinTheta2Sq = pow(outsideIor / iridescenceIor, 2.0) * (1.0 - pow(cosTheta, 2.0));
    float cosTheta2Sq = 1.0 - sinTheta2Sq;

    if (cosTheta2Sq < 0.0) {
        return vec3(1.0);
    }

    float cosTheta2 = sqrt(cosTheta2Sq);

    float r0 = iridescence_iorToFresnel(iridescenceIor, outsideIor);
    float r12 = iridescence_fresnel(cosTheta, r0);
    float r21 = r12;
    float t121 = 1.0 - r12;

    float phi12 = iridescenceIor < outsideIor ? PI : 0.0;
    float phi21 = PI - phi12;

    vec3 baseIor = iridescence_fresnelToIor(base_f0 + vec3(0.0001));
    vec3 r1 = iridescence_iorToFresnel(baseIor, iridescenceIor);
    vec3 r23 = iridescence_fresnel(cosTheta2, r1);

    vec3 phi23 = vec3(0.0);
    if (baseIor[0] < iridescenceIor) phi23[0] = PI;
    if (baseIor[1] < iridescenceIor) phi23[1] = PI;
    if (baseIor[2] < iridescenceIor) phi23[2] = PI;
    float opd = 2.0 * iridescenceIor * dIridescenceThickness * cosTheta2;
    vec3 phi = vec3(phi21) + phi23; 

    vec3 r123Sq = clamp(r12 * r23, 1e-5, 0.9999);
    vec3 r123 = sqrt(r123Sq);
    vec3 rs = pow(t121, 2.0) * r23 / (1.0 - r123Sq);

    vec3 c0 = r12 + rs;
    vec3 i = c0;

    vec3 cm = rs - t121;
    for (int m = 1; m <= 2; m++) {
        cm *= r123;
        vec3 sm = 2.0 * iridescence_sensitivity(float(m) * opd, float(m) * phi);
        i += cm * sm;
    }
    return max(i, vec3(0.0));
}

void getIridescence(float cosTheta) {
    dIridescenceFresnel = calcIridescence(1.0, cosTheta, dSpecularity);
}
`;

var iridescencePS = `
#ifdef MAPFLOAT
uniform float material_iridescence;
#endif

void getIridescence() {
    float iridescence = 1.0;

    #ifdef MAPFLOAT
    iridescence *= material_iridescence;
    #endif

    #ifdef MAPTEXTURE
    iridescence *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    dIridescence = iridescence; 
}
`;

var iridescenceThicknessPS = `
uniform float material_iridescenceThicknessMax;

#ifdef MAPTEXTURE
uniform float material_iridescenceThicknessMin;
#endif

void getIridescenceThickness() {

    #ifdef MAPTEXTURE
    float blend = texture2DBias($SAMPLER, $UV, textureBias).$CH;
    float iridescenceThickness = mix(material_iridescenceThicknessMin, material_iridescenceThicknessMax, blend);
    #else
    float iridescenceThickness = material_iridescenceThicknessMax;
    #endif

    dIridescenceThickness = iridescenceThickness; 
}
`;

var instancingVS = `
attribute vec4 instance_line1;
attribute vec4 instance_line2;
attribute vec4 instance_line3;
attribute vec4 instance_line4;
`;

var lightDiffuseLambertPS = `
float getLightDiffuse() {
    return max(dot(dNormalW, -dLightDirNormW), 0.0);
}
`;

var lightDirPointPS = `
void getLightDirPoint(vec3 lightPosW) {
    dLightDirW = vPositionW - lightPosW;
    dLightDirNormW = normalize(dLightDirW);
    dLightPosW = lightPosW;
}
`;

var lightmapAddPS = `
void addLightMap() {
    dDiffuseLight += dLightmap;
}
`;

var lightmapDirAddPS = `
void addLightMap() {
    if (dot(dLightmapDir, dLightmapDir) < 0.0001) {
        dDiffuseLight += dLightmap;
    } else {
        dLightDirNormW = dLightmapDir;

        float vlight = saturate(dot(dLightDirNormW, -dVertexNormalW));
        float flight = saturate(dot(dLightDirNormW, -dNormalW));
        float nlight = (flight / max(vlight, 0.01)) * 0.5;

        dDiffuseLight += dLightmap * nlight * 2.0;

        vec3 halfDirW = normalize(-dLightmapDir + dViewDirW);
        vec3 specularLight = dLightmap * getLightSpecular(halfDirW);

        #ifdef LIT_SPECULAR_FRESNEL
        specularLight *= getFresnel(dot(dViewDirW, halfDirW), dSpecularity);
        #endif

        dSpecularLight += specularLight;
    }
}
`;

var lightmapDirPS = `
uniform sampler2D texture_lightMap;
uniform sampler2D texture_dirLightMap;

void getLightMap() {
    dLightmap = $DECODE(texture2DBias(texture_lightMap, $UV, textureBias)).$CH;

    vec3 dir = texture2DBias(texture_dirLightMap, $UV, textureBias).xyz * 2.0 - 1.0;
    float dirDot = dot(dir, dir);
    dLightmapDir = (dirDot > 0.001) ? dir / sqrt(dirDot) : vec3(0.0);
}
`;

var lightmapSinglePS = `
void getLightMap() {
    dLightmap = vec3(1.0);

    #ifdef MAPTEXTURE
    dLightmap *= $DECODE(texture2DBias($SAMPLER, $UV, textureBias)).$CH;
    #endif

    #ifdef MAPVERTEX
    dLightmap *= saturate(vVertexColor.$VC);
    #endif
}
`;

var lightSpecularAnisoGGXPS = `
// Anisotropic GGX
float calcLightSpecular(float tGlossiness, vec3 tNormalW, vec3 h) {
    float PI = 3.141592653589793;
    float roughness = max((1.0 - tGlossiness) * (1.0 - tGlossiness), 0.001);
    float anisotropy = material_anisotropy * roughness;
 
    float at = max((roughness + anisotropy), roughness / 4.0);
    float ab = max((roughness - anisotropy), roughness / 4.0);

    float NoH = dot(tNormalW, h);
    float ToH = dot(dTBN[0], h);
    float BoH = dot(dTBN[1], h);

    float a2 = at * ab;
    vec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);
    float v2 = dot(v, v);
    float w2 = a2 / v2;
    float D = a2 * w2 * w2 * (1.0 / PI);

    float ToV = dot(dTBN[0], dViewDirW);
    float BoV = dot(dTBN[1], dViewDirW);
    float ToL = dot(dTBN[0], -dLightDirNormW);
    float BoL = dot(dTBN[1], -dLightDirNormW);
    float NoV = dot(tNormalW, dViewDirW);
    float NoL = dot(tNormalW, -dLightDirNormW);

    float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));
    float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));
    float G = 0.5 / (lambdaV + lambdaL);

    return D * G;
}

float getLightSpecular(vec3 h) {
    return calcLightSpecular(dGlossiness, dNormalW, h);
}

#ifdef LIT_CLEARCOAT
float getLightSpecularCC(vec3 h) {
    return calcLightSpecular(ccGlossiness, ccNormalW, h);
}
#endif
`;

var lightSpecularBlinnPS = `
// Energy-conserving (hopefully) Blinn-Phong
float calcLightSpecular(float tGlossiness, vec3 tNormalW, vec3 h) {
    float nh = max( dot( h, tNormalW ), 0.0 );

    float specPow = exp2(tGlossiness * 11.0); // glossiness is linear, power is not; 0 - 2048

    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little
    specPow = max(specPow, 0.0001);

    return pow(nh, specPow) * (specPow + 2.0) / 8.0;
}

float getLightSpecular(vec3 h) {
    return calcLightSpecular(dGlossiness, dNormalW, h);
}

#ifdef LIT_CLEARCOAT
float getLightSpecularCC(vec3 h) {
    return calcLightSpecular(ccGlossiness, ccNormalW, h);
}
#endif
`;

var lightSpecularPhongPS = `
float calcLightSpecular(float tGlossiness, vec3 tReflDirW, vec3 h) {
    float specPow = tGlossiness;

    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little
    return pow(max(dot(tReflDirW, -dLightDirNormW), 0.0), specPow + 0.0001);
}

float getLightSpecular(vec3 h) {
    return calcLightSpecular(dGlossiness, dReflDirW, h);
}

#ifdef LIT_CLEARCOAT
float getLightSpecularCC(vec3 h) {
    return calcLightSpecular(ccGlossiness, ccReflDirW,h );
}
#endif
`;

var lightSheenPS = `

float sheenD(vec3 normal, vec3 h, float roughness) {
    float invR = 1.0 / (roughness * roughness);
    float cos2h = max(dot(normal, h), 0.0);
    cos2h *= cos2h;
    float sin2h = max(1.0 - cos2h, 0.0078125);
    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);
}

float sheenV(vec3 normal, vec3 view, vec3 light) {
    float NoV = max(dot(normal, view), 0.000001);
    float NoL = max(dot(normal, light), 0.000001);
    return 1.0 / (4.0 * (NoL + NoV - NoL * NoV));
}

float getLightSpecularSheen(vec3 h) {
    float D = sheenD(dNormalW, h, sGlossiness);
    float V = sheenV(dNormalW, dViewDirW, -dLightDirNormW);
    return D * V;
}
`;

var ltc = `
// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines
// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt
// code: https://github.com/selfshadow/ltc_code/

mat3 transposeMat3( const in mat3 m ) {
    mat3 tmp;
    tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
    tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
    tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
    return tmp;
}

vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
    const float LUT_SIZE = 64.0;
    const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
    const float LUT_BIAS = 0.5 / LUT_SIZE;
    float dotNV = saturate( dot( N, V ) );
    // texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )
    vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
    uv = uv * LUT_SCALE + LUT_BIAS;
    return uv;
}

float LTC_ClippedSphereFormFactor( const in vec3 f ) {
    // Real-Time Area Lighting: a Journey from Research to Production (p.102)
    // An approximation of the form factor of a horizon-clipped rectangle.
    float l = length( f );
    return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}

vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
    float x = dot( v1, v2 );
    float y = abs( x );
    // rational polynomial approximation to theta / sin( theta ) / 2PI
    float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
    float b = 3.4175940 + ( 4.1616724 + y ) * y;
    float v = a / b;
    float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
    return cross( v1, v2 ) * theta_sintheta;
}

struct Coords {
    vec3 coord0;
    vec3 coord1;
    vec3 coord2;
    vec3 coord3;
};

float LTC_EvaluateRect( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in Coords rectCoords) {
    // bail if point is on back side of plane of light
    // assumes ccw winding order of light vertices
    vec3 v1 = rectCoords.coord1 - rectCoords.coord0;
    vec3 v2 = rectCoords.coord3 - rectCoords.coord0;
    
    vec3 lightNormal = cross( v1, v2 );
    // if( dot( lightNormal, P - rectCoords.coord0 ) < 0.0 ) return 0.0;
    float factor = sign(-dot( lightNormal, P - rectCoords.coord0 ));

    // construct orthonormal basis around N
    vec3 T1, T2;
    T1 = normalize( V - N * dot( V, N ) );
    T2 =  factor * cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system
    // compute transform
    mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
    // transform rect
    vec3 coords[ 4 ];
    coords[ 0 ] = mat * ( rectCoords.coord0 - P );
    coords[ 1 ] = mat * ( rectCoords.coord1 - P );
    coords[ 2 ] = mat * ( rectCoords.coord2 - P );
    coords[ 3 ] = mat * ( rectCoords.coord3 - P );
    // project rect onto sphere
    coords[ 0 ] = normalize( coords[ 0 ] );
    coords[ 1 ] = normalize( coords[ 1 ] );
    coords[ 2 ] = normalize( coords[ 2 ] );
    coords[ 3 ] = normalize( coords[ 3 ] );
    // calculate vector form factor
    vec3 vectorFormFactor = vec3( 0.0 );
    vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
    vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
    vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
    vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
    // adjust for horizon clipping
    float result = LTC_ClippedSphereFormFactor( vectorFormFactor );

    return result;
}

Coords dLTCCoords;
Coords getLTCLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){
    Coords coords;
    coords.coord0 = lightPos + halfWidth - halfHeight;
    coords.coord1 = lightPos - halfWidth - halfHeight;
    coords.coord2 = lightPos - halfWidth + halfHeight;
    coords.coord3 = lightPos + halfWidth + halfHeight;
    return coords;
}

float dSphereRadius;
Coords getSphereLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){
    // used for simple sphere light falloff
    // also, the code only handles a spherical light, it cannot be non-uniformly scaled in world space, and so we enforce it here
    dSphereRadius = max(length(halfWidth), length(halfHeight));

    // Billboard the 2d light quad to reflection vector, as it's used for specular. This allows us to use disk math for the sphere.
    vec3 f = reflect(normalize(lightPos - view_position), vNormalW);
    vec3 w = normalize(cross(f, halfHeight));
    vec3 h = normalize(cross(f, w));

    return getLTCLightCoords(lightPos, w * dSphereRadius, h * dSphereRadius);
}

// used for LTC LUT texture lookup
vec2 dLTCUV;
#ifdef LIT_CLEARCOAT
vec2 ccLTCUV;
#endif
vec2 getLTCLightUV(float tGlossiness, vec3 tNormalW)
{
    float roughness = max((1.0 - tGlossiness) * (1.0 - tGlossiness), 0.001);
    return LTC_Uv( tNormalW, dViewDirW, roughness );
}

//used for energy conservation and to modulate specular
vec3 dLTCSpecFres;
#ifdef LIT_CLEARCOAT
vec3 ccLTCSpecFres;
#endif
vec3 getLTCLightSpecFres(vec2 uv, vec3 tSpecularity)
{
    vec4 t2 = texture2D( areaLightsLutTex2, uv );

    #ifdef AREA_R8_G8_B8_A8_LUTS
    t2 *= vec4(0.693103,1,1,1);
    t2 += vec4(0.306897,0,0,0);
    #endif

    return tSpecularity * t2.x + ( vec3( 1.0 ) - tSpecularity) * t2.y;
}

void calcLTCLightValues()
{
    dLTCUV = getLTCLightUV(dGlossiness, dNormalW);
    dLTCSpecFres = getLTCLightSpecFres(dLTCUV, dSpecularity); 

#ifdef LIT_CLEARCOAT
    ccLTCUV = getLTCLightUV(ccGlossiness, ccNormalW);
    ccLTCSpecFres = getLTCLightSpecFres(ccLTCUV, vec3(ccSpecularity));
#endif
}

void calcRectLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)
{
    dLTCCoords = getLTCLightCoords(lightPos, halfWidth, halfHeight);
}
void calcDiskLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)
{
    calcRectLightValues(lightPos, halfWidth, halfHeight);
}
void calcSphereLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)
{
    dLTCCoords = getSphereLightCoords(lightPos, halfWidth, halfHeight);
}

// An extended version of the implementation from
// "How to solve a cubic equation, revisited"
// http://momentsingraphics.de/?p=105
vec3 SolveCubic(vec4 Coefficient)
{
    float pi = 3.14159;
    // Normalize the polynomial
    Coefficient.xyz /= Coefficient.w;
    // Divide middle coefficients by three
    Coefficient.yz /= 3.0;

    float A = Coefficient.w;
    float B = Coefficient.z;
    float C = Coefficient.y;
    float D = Coefficient.x;

    // Compute the Hessian and the discriminant
    vec3 Delta = vec3(
        -Coefficient.z * Coefficient.z + Coefficient.y,
        -Coefficient.y * Coefficient.z + Coefficient.x,
        dot(vec2(Coefficient.z, -Coefficient.y), Coefficient.xy)
    );

    float Discriminant = dot(vec2(4.0 * Delta.x, -Delta.y), Delta.zy);

    vec3 RootsA, RootsD;

    vec2 xlc, xsc;

    // Algorithm A
    {
        float A_a = 1.0;
        float C_a = Delta.x;
        float D_a = -2.0 * B * Delta.x + Delta.y;

        // Take the cubic root of a normalized complex number
        float Theta = atan(sqrt(Discriminant), -D_a) / 3.0;

        float x_1a = 2.0 * sqrt(-C_a) * cos(Theta);
        float x_3a = 2.0 * sqrt(-C_a) * cos(Theta + (2.0 / 3.0) * pi);

        float xl;
        if ((x_1a + x_3a) > 2.0 * B)
            xl = x_1a;
        else
            xl = x_3a;

        xlc = vec2(xl - B, A);
    }

    // Algorithm D
    {
        float A_d = D;
        float C_d = Delta.z;
        float D_d = -D * Delta.y + 2.0 * C * Delta.z;

        // Take the cubic root of a normalized complex number
        float Theta = atan(D * sqrt(Discriminant), -D_d) / 3.0;

        float x_1d = 2.0 * sqrt(-C_d) * cos(Theta);
        float x_3d = 2.0 * sqrt(-C_d) * cos(Theta + (2.0 / 3.0) * pi);

        float xs;
        if (x_1d + x_3d < 2.0 * C)
            xs = x_1d;
        else
            xs = x_3d;

        xsc = vec2(-D, xs + C);
    }

    float E =  xlc.y * xsc.y;
    float F = -xlc.x * xsc.y - xlc.y * xsc.x;
    float G =  xlc.x * xsc.x;

    vec2 xmc = vec2(C * F - B * G, -B * F + C * E);

    vec3 Root = vec3(xsc.x / xsc.y, xmc.x / xmc.y, xlc.x / xlc.y);

    if (Root.x < Root.y && Root.x < Root.z)
        Root.xyz = Root.yxz;
    else if (Root.z < Root.x && Root.z < Root.y)
        Root.xyz = Root.xzy;

    return Root;
}

float LTC_EvaluateDisk(vec3 N, vec3 V, vec3 P, mat3 Minv, Coords points)
{
    // construct orthonormal basis around N
    vec3 T1, T2;
    T1 = normalize(V - N * dot(V, N));
    T2 = cross(N, T1);

    // rotate area light in (T1, T2, N) basis
    //mat3 R = transpose(mat3(T1, T2, N));
    mat3 R = transposeMat3( mat3( T1, T2, N ) );
    // polygon (allocate 5 vertices for clipping)
    vec3 L_[ 3 ];
    L_[ 0 ] = R * ( points.coord0 - P );
    L_[ 1 ] = R * ( points.coord1 - P );
    L_[ 2 ] = R * ( points.coord2 - P );

    vec3 Lo_i = vec3(0);

    // init ellipse
    vec3 C  = 0.5 * (L_[0] + L_[2]);
    vec3 V1 = 0.5 * (L_[1] - L_[2]);
    vec3 V2 = 0.5 * (L_[1] - L_[0]);

    C  = Minv * C;
    V1 = Minv * V1;
    V2 = Minv * V2;

    //if(dot(cross(V1, V2), C) > 0.0)
    //    return 0.0;

    // compute eigenvectors of ellipse
    float a, b;
    float d11 = dot(V1, V1);
    float d22 = dot(V2, V2);
    float d12 = dot(V1, V2);
    if (abs(d12) / sqrt(d11 * d22) > 0.0001)
    {
        float tr = d11 + d22;
        float det = -d12 * d12 + d11 * d22;

        // use sqrt matrix to solve for eigenvalues
        det = sqrt(det);
        float u = 0.5 * sqrt(tr - 2.0 * det);
        float v = 0.5 * sqrt(tr + 2.0 * det);
        float e_max = (u + v) * (u + v);
        float e_min = (u - v) * (u - v);

        vec3 V1_, V2_;

        if (d11 > d22)
        {
            V1_ = d12 * V1 + (e_max - d11) * V2;
            V2_ = d12 * V1 + (e_min - d11) * V2;
        }
        else
        {
            V1_ = d12*V2 + (e_max - d22)*V1;
            V2_ = d12*V2 + (e_min - d22)*V1;
        }

        a = 1.0 / e_max;
        b = 1.0 / e_min;
        V1 = normalize(V1_);
        V2 = normalize(V2_);
    }
    else
    {
        a = 1.0 / dot(V1, V1);
        b = 1.0 / dot(V2, V2);
        V1 *= sqrt(a);
        V2 *= sqrt(b);
    }

    vec3 V3 = cross(V1, V2);
    if (dot(C, V3) < 0.0)
        V3 *= -1.0;

    float L  = dot(V3, C);
    float x0 = dot(V1, C) / L;
    float y0 = dot(V2, C) / L;

    float E1 = inversesqrt(a);
    float E2 = inversesqrt(b);

    a *= L * L;
    b *= L * L;

    float c0 = a * b;
    float c1 = a * b * (1.0 + x0 * x0 + y0 * y0) - a - b;
    float c2 = 1.0 - a * (1.0 + x0 * x0) - b * (1.0 + y0 * y0);
    float c3 = 1.0;

    vec3 roots = SolveCubic(vec4(c0, c1, c2, c3));
    float e1 = roots.x;
    float e2 = roots.y;
    float e3 = roots.z;

    vec3 avgDir = vec3(a * x0 / (a - e2), b * y0 / (b - e2), 1.0);

    mat3 rotate = mat3(V1, V2, V3);

    avgDir = rotate * avgDir;
    avgDir = normalize(avgDir);

    float L1 = sqrt(-e2 / e3);
    float L2 = sqrt(-e2 / e1);

    float formFactor = L1 * L2 * inversesqrt((1.0 + L1 * L1) * (1.0 + L2 * L2));
    
    const float LUT_SIZE = 64.0;
    const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
    const float LUT_BIAS = 0.5 / LUT_SIZE;

    // use tabulated horizon-clipped sphere
    vec2 uv = vec2(avgDir.z * 0.5 + 0.5, formFactor);
    uv = uv*LUT_SCALE + LUT_BIAS;

    float scale = texture2D( areaLightsLutTex2, uv ).w;

    return formFactor*scale;
}

float getRectLightDiffuse() {
    return LTC_EvaluateRect( dNormalW, dViewDirW, vPositionW, mat3( 1.0 ), dLTCCoords );
}

float getDiskLightDiffuse() {
    return LTC_EvaluateDisk( dNormalW, dViewDirW, vPositionW, mat3( 1.0 ), dLTCCoords );
}

float getSphereLightDiffuse() {
    // NB: this could be improved further with distance based wrap lighting
    float falloff = dSphereRadius / (dot(dLightDirW, dLightDirW) + dSphereRadius);
    return getLightDiffuse()*falloff;
}

mat3 getLTCLightInvMat(vec2 uv)
{
    vec4 t1 = texture2D( areaLightsLutTex1, uv );

    #ifdef AREA_R8_G8_B8_A8_LUTS
    t1 *= vec4(1.001, 0.3239, 0.60437568, 1.0);
    t1 += vec4(0.0, -0.2976, -0.01381, 0.0);
    #endif

    return mat3(
        vec3( t1.x, 0, t1.y ),
        vec3(    0, 1,    0 ),
        vec3( t1.z, 0, t1.w )
    );
}

float calcRectLightSpecular(vec3 tNormalW, vec2 uv) {
    mat3 mInv = getLTCLightInvMat(uv);
    return LTC_EvaluateRect( tNormalW, dViewDirW, vPositionW, mInv, dLTCCoords );
}

float getRectLightSpecular() {
    return calcRectLightSpecular(dNormalW, dLTCUV);
}

#ifdef LIT_CLEARCOAT
float getRectLightSpecularCC() {
    return calcRectLightSpecular(ccNormalW, ccLTCUV);
}
#endif

float calcDiskLightSpecular(vec3 tNormalW, vec2 uv) {
    mat3 mInv = getLTCLightInvMat(uv);
    return LTC_EvaluateDisk( tNormalW, dViewDirW, vPositionW, mInv, dLTCCoords );
}

float getDiskLightSpecular() {
    return calcDiskLightSpecular(dNormalW, dLTCUV);
}

#ifdef LIT_CLEARCOAT
float getDiskLightSpecularCC() {
    return calcDiskLightSpecular(ccNormalW, ccLTCUV);
}
#endif

float getSphereLightSpecular() {
    return calcDiskLightSpecular(dNormalW, dLTCUV);
}

#ifdef LIT_CLEARCOAT
float getSphereLightSpecularCC() {
    return calcDiskLightSpecular(ccNormalW, ccLTCUV);
}
#endif
`;

var metalnessPS = `
#ifdef MAPFLOAT
uniform float material_metalness;
#endif

void getMetalness() {
    float metalness = 1.0;

    #ifdef MAPFLOAT
    metalness *= material_metalness;
    #endif

    #ifdef MAPTEXTURE
    metalness *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    metalness *= saturate(vVertexColor.$VC);
    #endif

    dMetalness = metalness;
}
`;

var msdfPS = `
uniform sampler2D texture_msdfMap;

#ifdef GL_OES_standard_derivatives
#define USE_FWIDTH
#endif

#ifdef GL2
#define USE_FWIDTH
#endif

float median(float r, float g, float b) {
    return max(min(r, g), min(max(r, g), b));
}

float map (float min, float max, float v) {
    return (v - min) / (max - min);
}

uniform float font_sdfIntensity; // intensity is used to boost the value read from the SDF, 0 is no boost, 1.0 is max boost
uniform float font_pxrange;      // the number of pixels between inside and outside the font in SDF
uniform float font_textureWidth; // the width of the texture atlas

#ifdef UNIFORM_TEXT_PARAMETERS
uniform vec4 outline_color;
uniform float outline_thickness;
uniform vec4 shadow_color;
uniform vec2 shadow_offset;
#else
varying vec4 outline_color;
varying float outline_thickness;
varying vec4 shadow_color;
varying vec2 shadow_offset;
#endif

vec4 applyMsdf(vec4 color) {
    // sample the field
    vec3 tsample = texture2D(texture_msdfMap, vUv0).rgb;
    vec2 uvShdw = vUv0 - shadow_offset;
    vec3 ssample = texture2D(texture_msdfMap, uvShdw).rgb;
    // get the signed distance value
    float sigDist = median(tsample.r, tsample.g, tsample.b);
    float sigDistShdw = median(ssample.r, ssample.g, ssample.b);

    // smoothing limit - smaller value makes for sharper but more aliased text, especially on angles
    // too large value (0.5) creates a dark glow around the letters
    float smoothingMax = 0.2;

    #ifdef USE_FWIDTH
    // smoothing depends on size of texture on screen
    vec2 w = fwidth(vUv0);
    float smoothing = clamp(w.x * font_textureWidth / font_pxrange, 0.0, smoothingMax);
    #else
    float font_size = 16.0; // TODO fix this
    // smoothing gets smaller as the font size gets bigger
    // don't have fwidth we can approximate from font size, this doesn't account for scaling
    // so a big font scaled down will be wrong...
    float smoothing = clamp(font_pxrange / font_size, 0.0, smoothingMax);
    #endif

    float mapMin = 0.05;
    float mapMax = clamp(1.0 - font_sdfIntensity, mapMin, 1.0);

    // remap to a smaller range (used on smaller font sizes)
    float sigDistInner = map(mapMin, mapMax, sigDist);
    float sigDistOutline = map(mapMin, mapMax, sigDist + outline_thickness);
    sigDistShdw = map(mapMin, mapMax, sigDistShdw + outline_thickness);

    float center = 0.5;
    // calculate smoothing and use to generate opacity
    float inside = smoothstep(center-smoothing, center+smoothing, sigDistInner);
    float outline = smoothstep(center-smoothing, center+smoothing, sigDistOutline);
    float shadow = smoothstep(center-smoothing, center+smoothing, sigDistShdw);

    vec4 tcolor = (outline > inside) ? outline * vec4(outline_color.a * outline_color.rgb, outline_color.a) : vec4(0.0);
    tcolor = mix(tcolor, color, inside);

    vec4 scolor = (shadow > outline) ? shadow * vec4(shadow_color.a * shadow_color.rgb, shadow_color.a) : tcolor;
    tcolor = mix(scolor, tcolor, outline);
    
    return tcolor;
}
`;

var metalnessModulatePS = `

uniform float material_f0;

void getMetalnessModulate() {
    vec3 dielectricF0 = material_f0 * dSpecularity;
    dSpecularity = mix(dielectricF0, dAlbedo, dMetalness);
    dAlbedo *= 1.0 - dMetalness;
}
`;

var msdfVS = `
attribute vec3 vertex_outlineParameters;
attribute vec3 vertex_shadowParameters;

varying vec4 outline_color;
varying float outline_thickness;
varying vec4 shadow_color;
varying vec2 shadow_offset;

void unpackMsdfParams() {
    vec3 little = mod(vertex_outlineParameters, 256.);
    vec3 big = (vertex_outlineParameters - little) / 256.;

    outline_color.rb = little.xy / 255.;
    outline_color.ga = big.xy / 255.;

    // _outlineThicknessScale === 0.2
    outline_thickness = little.z / 255. * 0.2;

    little = mod(vertex_shadowParameters, 256.);
    big = (vertex_shadowParameters - little) / 256.;

    shadow_color.rb = little.xy / 255.;
    shadow_color.ga = big.xy / 255.;

    // vec2(little.z, big.z) / 127. - 1. remaps shadow offset from [0, 254] to [-1, 1]
    // _shadowOffsetScale === 0.005
    shadow_offset = (vec2(little.z, big.z) / 127. - 1.) * 0.005;
}
`;

var normalVS = `
#ifdef MORPHING_TEXTURE_BASED_NORMAL
uniform highp sampler2D morphNormalTex;
#endif

vec3 getNormal() {
    #ifdef SKIN
    dNormalMatrix = mat3(dModelMatrix[0].xyz, dModelMatrix[1].xyz, dModelMatrix[2].xyz);
    #elif defined(INSTANCING)
    dNormalMatrix = mat3(instance_line1.xyz, instance_line2.xyz, instance_line3.xyz);
    #else
    dNormalMatrix = matrix_normal;
    #endif

    vec3 tempNormal = vertex_normal;

    #ifdef MORPHING
    #ifdef MORPHING_NRM03
    tempNormal += morph_weights_a[0] * morph_nrm0;
    tempNormal += morph_weights_a[1] * morph_nrm1;
    tempNormal += morph_weights_a[2] * morph_nrm2;
    tempNormal += morph_weights_a[3] * morph_nrm3;
    #endif
    #ifdef MORPHING_NRM47
    tempNormal += morph_weights_b[0] * morph_nrm4;
    tempNormal += morph_weights_b[1] * morph_nrm5;
    tempNormal += morph_weights_b[2] * morph_nrm6;
    tempNormal += morph_weights_b[3] * morph_nrm7;
    #endif
    #endif

    #ifdef MORPHING_TEXTURE_BASED_NORMAL
    // apply morph offset from texture
    vec2 morphUV = getTextureMorphCoords();
    vec3 morphNormal = texture2D(morphNormalTex, morphUV).xyz;
    tempNormal += morphNormal;
    #endif

    return normalize(dNormalMatrix * tempNormal);
}
`;

var normalDetailMapPS = `
#ifdef MAPTEXTURE
uniform float material_normalDetailMapBumpiness;

vec3 blendNormals(vec3 n1, vec3 n2) {
    // https://blog.selfshadow.com/publications/blending-in-detail/#detail-oriented
    n1 += vec3(0, 0, 1);
    n2 *= vec3(-1, -1, 1);
    return n1 * dot(n1, n2) / n1.z - n2;
}
#endif

vec3 addNormalDetail(vec3 normalMap) {
#ifdef MAPTEXTURE
    vec3 normalDetailMap = unpackNormal(texture2DBias($SAMPLER, $UV, textureBias));
    normalDetailMap = mix(vec3(0.0, 0.0, 1.0), normalDetailMap, material_normalDetailMapBumpiness);
    return blendNormals(normalMap, normalDetailMap);
#else
    return normalMap;
#endif
}
`;

var normalInstancedVS = `
vec3 getNormal() {
    dNormalMatrix = mat3(instance_line1.xyz, instance_line2.xyz, instance_line3.xyz);
    return normalize(dNormalMatrix * vertex_normal);
}
`;

var normalMapPS = `
#ifdef MAPTEXTURE
uniform float material_bumpiness;
#endif

void getNormal() {
#ifdef MAPTEXTURE
    vec3 normalMap = unpackNormal(texture2DBias($SAMPLER, $UV, textureBias));
    normalMap = mix(vec3(0.0, 0.0, 1.0), normalMap, material_bumpiness);
    dNormalW = normalize(dTBN * addNormalDetail(normalMap));
#else
    dNormalW = dVertexNormalW;
#endif
}
`;

var normalSkinnedVS = `
vec3 getNormal() {
    dNormalMatrix = mat3(dModelMatrix[0].xyz, dModelMatrix[1].xyz, dModelMatrix[2].xyz);
    return normalize(dNormalMatrix * vertex_normal);
}
`;

var normalXYPS = `
vec3 unpackNormal(vec4 nmap) {
    vec3 normal;
    normal.xy = nmap.wy * 2.0 - 1.0;
    normal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));
    return normal;
}
`;

var normalXYZPS = `
vec3 unpackNormal(vec4 nmap) {
    return nmap.xyz * 2.0 - 1.0;
}
`;

var opacityPS = `
#ifdef MAPFLOAT
uniform float material_opacity;
#endif

void getOpacity() {
    dAlpha = 1.0;

    #ifdef MAPFLOAT
    dAlpha *= material_opacity;
    #endif

    #ifdef MAPTEXTURE
    dAlpha *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    dAlpha *= clamp(vVertexColor.$VC, 0.0, 1.0);
    #endif
}
`;

var outputAlphaPS = `
gl_FragColor.a = dAlpha;
`;

var outputAlphaOpaquePS = `
    gl_FragColor.a = 1.0;
`;

var outputAlphaPremulPS = `
gl_FragColor.rgb *= dAlpha;
gl_FragColor.a = dAlpha;
`;

var outputTex2DPS = `
varying vec2 vUv0;

uniform sampler2D source;

void main(void) {
    gl_FragColor = texture2D(source, vUv0);
}
`;

var packDepthPS = `
// Packing a float in GLSL with multiplication and mod
// http://blog.gradientstudios.com/2012/08/23/shadow-map-improvement
vec4 packFloat(float depth) {
    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);
    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);

    // combination of mod and multiplication and division works better
    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);
    res -= res.xxyz * bit_mask;
    return res;
}
`;

var sheenPS = `

#ifdef MAPCOLOR
uniform vec3 material_sheen;
#endif

void getSheen() {
    vec3 sheenColor = vec3(1, 1, 1);

    #ifdef MAPCOLOR
    sheenColor *= material_sheen;
    #endif

    #ifdef MAPTEXTURE
    sheenColor *= $DECODE(texture2DBias($SAMPLER, $UV, textureBias)).$CH;
    #endif

    #ifdef MAPVERTEX
    sheenColor *= saturate(vVertexColor.$VC);
    #endif

    sSpecularity = sheenColor;
}
`;

var sheenGlossPS = `
#ifdef MAPFLOAT
uniform float material_sheenGlossiness;
#endif

void getSheenGlossiness() {
    float sheenGlossiness = 1.0;

    #ifdef MAPFLOAT
    sheenGlossiness *= material_sheenGlossiness;
    #endif

    #ifdef MAPTEXTURE
    sheenGlossiness *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    sheenGlossiness *= saturate(vVertexColor.$VC);
    #endif

    sheenGlossiness += 0.0000001;
    sGlossiness = sheenGlossiness;
}
`;

var parallaxPS = `
uniform float material_heightMapFactor;

void getParallax() {
    float parallaxScale = material_heightMapFactor;

    float height = texture2DBias($SAMPLER, $UV, textureBias).$CH;
    height = height * parallaxScale - parallaxScale*0.5;
    vec3 viewDirT = dViewDirW * dTBN;

    viewDirT.z += 0.42;
    dUvOffset = height * (viewDirT.xy / viewDirT.z);
}
`;

var particlePS = `
varying vec4 texCoordsAlphaLife;

uniform sampler2D colorMap;
uniform sampler2D colorParam;
uniform float graphSampleSize;
uniform float graphNumSamples;

#ifndef CAMERAPLANES
#define CAMERAPLANES
uniform vec4 camera_params;
#endif

uniform float softening;
uniform float colorMult;

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

#ifndef UNPACKFLOAT
#define UNPACKFLOAT
float unpackFloat(vec4 rgbaDepth) {
    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);
    float depth = dot(rgbaDepth, bitShift);
    return depth;
}
#endif

void main(void) {
    vec4 tex  = gammaCorrectInput(texture2D(colorMap, vec2(texCoordsAlphaLife.x, 1.0 - texCoordsAlphaLife.y)));
    vec4 ramp = gammaCorrectInput(texture2D(colorParam, vec2(texCoordsAlphaLife.w, 0.0)));
    ramp.rgb *= colorMult;

    ramp.a += texCoordsAlphaLife.z;

    vec3 rgb = tex.rgb * ramp.rgb;
    float a  = tex.a * ramp.a;
`;

var particleVS = `
vec3 unpack3NFloats(float src) {
    float r = fract(src);
    float g = fract(src * 256.0);
    float b = fract(src * 65536.0);
    return vec3(r, g, b);
}

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec4 tex1Dlod_lerp(highp sampler2D tex, vec2 tc) {
    return mix( texture2D(tex,tc), texture2D(tex,tc + graphSampleSize), fract(tc.x*graphNumSamples) );
}

vec4 tex1Dlod_lerp(highp sampler2D tex, vec2 tc, out vec3 w) {
    vec4 a = texture2D(tex,tc);
    vec4 b = texture2D(tex,tc + graphSampleSize);
    float c = fract(tc.x*graphNumSamples);

    vec3 unpackedA = unpack3NFloats(a.w);
    vec3 unpackedB = unpack3NFloats(b.w);
    w = mix(unpackedA, unpackedB, c);

    return mix(a, b, c);
}

vec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix) {
    float c = cos(pRotation);
    float s = sin(pRotation);

    mat2 m = mat2(c, -s, s, c);
    rotMatrix = m;

    return m * quadXY;
}

vec3 billboard(vec3 InstanceCoords, vec2 quadXY) {
    #ifdef SCREEN_SPACE
        vec3 pos = vec3(-1, 0, 0) * quadXY.x + vec3(0, -1, 0) * quadXY.y;
    #else
        vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;
    #endif

    return pos;
}

vec3 customFace(vec3 InstanceCoords, vec2 quadXY) {
    vec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;
    return pos;
}

vec2 safeNormalize(vec2 v) {
    float l = length(v);
    return (l > 1e-06) ? v / l : v;
}

void main(void) {
    vec3 meshLocalPos = particle_vertexData.xyz;
    float id = floor(particle_vertexData.w);

    float rndFactor = fract(sin(id + 1.0 + seed));
    vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));

    float uv = id / numParticlesPot;
    readInput(uv);

#ifdef LOCAL_SPACE
    inVel = mat3(matrix_model) * inVel;
#endif
    vec2 velocityV = safeNormalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used

    float particleLifetime = lifetime;

    if (inLife <= 0.0 || inLife > particleLifetime || !inShow) meshLocalPos = vec3(0.0);
    vec2 quadXY = meshLocalPos.xy;
    float nlife = clamp(inLife / particleLifetime, 0.0, 1.0);

    vec3 paramDiv;
    vec4 params = tex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);
    float scale = params.y;
    float scaleDiv = paramDiv.x;
    float alphaDiv = paramDiv.z;

    scale += (scaleDiv * 2.0 - 1.0) * scaleDivMult * fract(rndFactor*10000.0);

#ifndef USE_MESH
    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0), nlife);
#else
    texCoordsAlphaLife = vec4(particle_uv, (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0), nlife);
#endif

    vec3 particlePos = inPos;
    vec3 particlePosMoved = vec3(0.0);

    mat2 rotMatrix;
`;

var particleAnimFrameClampVS = `
    float animFrame = min(floor(texCoordsAlphaLife.w * animTexParams.y) + animTexParams.x, animTexParams.z);
`;

var particleAnimFrameLoopVS = `
    float animFrame = floor(mod(texCoordsAlphaLife.w * animTexParams.y + animTexParams.x, animTexParams.z + 1.0));
`;

var particleAnimTexVS = `
    float animationIndex;

    if (animTexIndexParams.y == 1.0) {
        animationIndex = floor((animTexParams.w + 1.0) * rndFactor3.z) * (animTexParams.z + 1.0);
    } else {
        animationIndex = animTexIndexParams.x * (animTexParams.z + 1.0);
    }

    float atlasX = (animationIndex + animFrame) * animTexTilesParams.x;
    float atlasY = 1.0 - floor(atlasX + 1.0) * animTexTilesParams.y;
    atlasX = fract(atlasX);

    texCoordsAlphaLife.xy *= animTexTilesParams.xy;
    texCoordsAlphaLife.xy += vec2(atlasX, atlasY);
`;

var particleInputFloatPS = `
void readInput(float uv) {
    vec4 tex = texture2D(particleTexIN, vec2(uv, 0.25));
    vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.75));

    inPos = tex.xyz;
    inVel = tex2.xyz;
    inAngle = (tex.w < 0.0? -tex.w : tex.w) - 1000.0;
    inShow = tex.w >= 0.0;
    inLife = tex2.w;
}
`;

var particleInputRgba8PS = `
//RG=X, BA=Y
//RG=Z, BA=A
//RGB=V, A=visMode
//RGBA=life

#define PI2 6.283185307179586

uniform vec3 inBoundsSize;
uniform vec3 inBoundsCenter;

uniform float maxVel;

float decodeFloatRG(vec2 rg) {
    return rg.y*(1.0/255.0) + rg.x;
}

float decodeFloatRGBA( vec4 rgba ) {
  return dot( rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );
}

void readInput(float uv) {
    vec4 tex0 = texture2D(particleTexIN, vec2(uv, 0.125));
    vec4 tex1 = texture2D(particleTexIN, vec2(uv, 0.375));
    vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.625));
    vec4 tex3 = texture2D(particleTexIN, vec2(uv, 0.875));

    inPos = vec3(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));
    inPos = (inPos - vec3(0.5)) * inBoundsSize + inBoundsCenter;

    inVel = tex2.xyz;
    inVel = (inVel - vec3(0.5)) * maxVel;

    inAngle = decodeFloatRG(tex1.ba) * PI2;
    inShow = tex2.a > 0.5;

    inLife = decodeFloatRGBA(tex3);
    float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));
    float maxPosLife = lifetime+1.0;
    inLife = inLife * (maxNegLife + maxPosLife) - maxNegLife;
}
`;

var particleOutputFloatPS = `
void writeOutput() {
    if (gl_FragCoord.y<1.0) {
        gl_FragColor = vec4(outPos, (outAngle + 1000.0) * visMode);
    } else {
        gl_FragColor = vec4(outVel, outLife);
    }
}
`;

var particleOutputRgba8PS = `
uniform vec3 outBoundsMul;
uniform vec3 outBoundsAdd;

vec2 encodeFloatRG( float v ) {
    vec2 enc = vec2(1.0, 255.0) * v;
    enc = fract(enc);
    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);
    return enc;
}

vec4 encodeFloatRGBA( float v ) {
    vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;
    enc = fract(enc);
    enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);
    return enc;
}

void writeOutput() {
    outPos = outPos * outBoundsMul + outBoundsAdd;
    outAngle = fract(outAngle / PI2);

    outVel = (outVel / maxVel) + vec3(0.5); // TODO: mul

    float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));
    float maxPosLife = lifetime+1.0;
    outLife = (outLife + maxNegLife) / (maxNegLife + maxPosLife);

    if (gl_FragCoord.y < 1.0) {
        gl_FragColor = vec4(encodeFloatRG(outPos.x), encodeFloatRG(outPos.y));
    } else if (gl_FragCoord.y < 2.0) {
        gl_FragColor = vec4(encodeFloatRG(outPos.z), encodeFloatRG(outAngle));
    } else if (gl_FragCoord.y < 3.0) {
        gl_FragColor = vec4(outVel, visMode*0.5+0.5);
    } else {
        gl_FragColor = encodeFloatRGBA(outLife);
    }
}
`;

var particleUpdaterAABBPS = `
uniform mat3 spawnBounds;
uniform vec3 spawnPosInnerRatio;

vec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {
    vec3 pos = inBounds - vec3(0.5);

    vec3 posAbs = abs(pos);
    vec3 maxPos = vec3(max(posAbs.x, max(posAbs.y, posAbs.z)));

    vec3 edge = maxPos + (vec3(0.5) - maxPos) * spawnPosInnerRatio;

    pos.x = edge.x * (maxPos.x == posAbs.x ? sign(pos.x) : 2.0 * pos.x);
    pos.y = edge.y * (maxPos.y == posAbs.y ? sign(pos.y) : 2.0 * pos.y);
    pos.z = edge.z * (maxPos.z == posAbs.z ? sign(pos.z) : 2.0 * pos.z);

#ifndef LOCAL_SPACE
    return emitterPos + spawnBounds * pos;
#else
    return spawnBounds * pos;
#endif
}

void addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {
    localVelocity -= vec3(0, 0, initialVelocity);
}
`;

var particleUpdaterEndPS = `
    writeOutput();
}
`;

var particleUpdaterInitPS = `
varying vec2 vUv0;

uniform highp sampler2D particleTexIN;
uniform highp sampler2D internalTex0;
uniform highp sampler2D internalTex1;
uniform highp sampler2D internalTex2;
uniform highp sampler2D internalTex3;

uniform mat3 emitterMatrix, emitterMatrixInv;
uniform vec3 emitterScale;

uniform vec3 emitterPos, frameRandom, localVelocityDivMult, velocityDivMult;
uniform float delta, rate, rateDiv, lifetime, numParticles, rotSpeedDivMult, radialSpeedDivMult, seed;
uniform float startAngle, startAngle2;
uniform float initialVelocity;

uniform float graphSampleSize;
uniform float graphNumSamples;

vec3 inPos;
vec3 inVel;
float inAngle;
bool inShow;
float inLife;
float visMode;

vec3 outPos;
vec3 outVel;
float outAngle;
bool outShow;
float outLife;
`;

var particleUpdaterNoRespawnPS = `
    if (outLife >= lifetime) {
        outLife -= max(lifetime, (numParticles - 1.0) * particleRate);
        visMode = -1.0;
    }
`;

var particleUpdaterOnStopPS = `
    visMode = outLife < 0.0? -1.0: visMode;
`;

var particleUpdaterRespawnPS = `
    if (outLife >= lifetime) {
        outLife -= max(lifetime, (numParticles - 1.0) * particleRate);
        visMode = 1.0;
    }
    visMode = outLife < 0.0? 1.0: visMode;
`;

var particleUpdaterSpherePS = `
uniform float spawnBoundsSphere;
uniform float spawnBoundsSphereInnerRatio;

vec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {
    float rnd4 = fract(rndFactor * 1000.0);
    vec3 norm = normalize(inBounds.xyz - vec3(0.5));
    float r = rnd4 * (1.0 - spawnBoundsSphereInnerRatio) + spawnBoundsSphereInnerRatio;
#ifndef LOCAL_SPACE
    return emitterPos + norm * r * spawnBoundsSphere;
#else
    return norm * r * spawnBoundsSphere;
#endif
}

void addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {
    localVelocity += normalize(inBounds - vec3(0.5)) * initialVelocity;
}
`;

var particleUpdaterStartPS = `
float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec3 unpack3NFloats(float src) {
    float r = fract(src);
    float g = fract(src * 256.0);
    float b = fract(src * 65536.0);
    return vec3(r, g, b);
}

vec3 tex1Dlod_lerp(highp sampler2D tex, vec2 tc, out vec3 w) {
    vec4 a = texture2D(tex, tc);
    vec4 b = texture2D(tex, tc + graphSampleSize);
    float c = fract(tc.x * graphNumSamples);

    vec3 unpackedA = unpack3NFloats(a.w);
    vec3 unpackedB = unpack3NFloats(b.w);
    w = mix(unpackedA, unpackedB, c);

    return mix(a.xyz, b.xyz, c);
}

#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)
vec4 hash41(float p) {
    vec4 p4 = fract(vec4(p) * HASHSCALE4);
    p4 += dot(p4, p4.wzxy+19.19);
    return fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));
}

void main(void) {
    if (gl_FragCoord.x > numParticles) discard;

    readInput(vUv0.x);
    visMode = inShow? 1.0 : -1.0;

    vec4 rndFactor = hash41(gl_FragCoord.x + seed);

    float particleRate = rate + rateDiv * rndFactor.x;

    outLife = inLife + delta;
    float nlife = clamp(outLife / lifetime, 0.0, 1.0);

    vec3 localVelocityDiv;
    vec3 velocityDiv;
    vec3 paramDiv;
    vec3 localVelocity = tex1Dlod_lerp(internalTex0, vec2(nlife, 0), localVelocityDiv);
    vec3 velocity =      tex1Dlod_lerp(internalTex1, vec2(nlife, 0), velocityDiv);
    vec3 params =        tex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);
    float rotSpeed = params.x;
    float rotSpeedDiv = paramDiv.y;

    vec3 radialParams = tex1Dlod_lerp(internalTex3, vec2(nlife, 0), paramDiv);
    float radialSpeed = radialParams.x;
    float radialSpeedDiv = radialParams.y;

    bool respawn = inLife <= 0.0 || outLife >= lifetime;
    inPos = respawn ? calcSpawnPosition(rndFactor.xyz, rndFactor.x) : inPos;
    inAngle = respawn ? mix(startAngle, startAngle2, rndFactor.x) : inAngle;

#ifndef LOCAL_SPACE
    vec3 radialVel = inPos - emitterPos;
#else
    vec3 radialVel = inPos;
#endif
    radialVel = (dot(radialVel, radialVel) > 1.0E-8) ? radialSpeed * normalize(radialVel) : vec3(0.0);
    radialVel += (radialSpeedDiv * vec3(2.0) - vec3(1.0)) * radialSpeedDivMult * rndFactor.xyz;

    localVelocity +=    (localVelocityDiv * vec3(2.0) - vec3(1.0)) * localVelocityDivMult * rndFactor.xyz;
    velocity +=         (velocityDiv * vec3(2.0) - vec3(1.0)) * velocityDivMult * rndFactor.xyz;
    rotSpeed +=         (rotSpeedDiv * 2.0 - 1.0) * rotSpeedDivMult * rndFactor.y;

    addInitialVelocity(localVelocity, rndFactor.xyz);

#ifndef LOCAL_SPACE
    outVel = emitterMatrix * localVelocity + (radialVel + velocity) * emitterScale;
#else
    outVel = (localVelocity + radialVel) / emitterScale + emitterMatrixInv * velocity;
#endif

    outPos = inPos + outVel * delta;
    outAngle = inAngle + rotSpeed * delta;
`;

var particle_billboardVS = `
    quadXY = rotate(quadXY, inAngle, rotMatrix);
    vec3 localPos = billboard(particlePos, quadXY);
`;

var particle_blendAddPS = `
    dBlendModeFogFactor = 0.0;
    rgb *= saturate(gammaCorrectInput(max(a, 0.0)));
    if ((rgb.r + rgb.g + rgb.b) < 0.000001) discard;
`;

var particle_blendMultiplyPS = `
    rgb = mix(vec3(1.0), rgb, vec3(a));
    if (rgb.r + rgb.g + rgb.b > 2.99) discard;
`;

var particle_blendNormalPS = `
    if (a < 0.01) discard;
`;

var particle_cpuVS = `
attribute vec4 particle_vertexData;   // XYZ = world pos, W = life
attribute vec4 particle_vertexData2;  // X = angle, Y = scale, Z = alpha, W = velocity.x
attribute vec4 particle_vertexData3;  // XYZ = particle local pos, W = velocity.y
attribute float particle_vertexData4; // particle id
#ifndef USE_MESH
#define VDATA5TYPE vec2
#else
#define VDATA5TYPE vec4
#endif
attribute VDATA5TYPE particle_vertexData5; // VDATA4TYPE depends on useMesh property. Start with X = velocity.z, Y = particle ID and for mesh particles proceeds with Z = mesh UV.x, W = mesh UV.y

uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;

#ifndef VIEWMATRIX
#define VIEWMATRIX
uniform mat4 matrix_view;
#endif

uniform mat3 matrix_normal;
uniform mat4 matrix_viewInverse;

uniform float numParticles;
uniform float lifetime;
uniform float stretch;
uniform float seed;
uniform vec3 wrapBounds, emitterScale, faceTangent, faceBinorm;
uniform sampler2D texLifeAndSourcePosOUT;
uniform highp sampler2D internalTex0;
uniform highp sampler2D internalTex1;
uniform highp sampler2D internalTex2;
uniform vec3 emitterPos;

varying vec4 texCoordsAlphaLife;

vec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix)
{
    float c = cos(pRotation);
    float s = sin(pRotation);
    //vec4 rotationMatrix = vec4(c, -s, s, c);

    mat2 m = mat2(c, -s, s, c);
    rotMatrix = m;

    return m * quadXY;
}

vec3 billboard(vec3 InstanceCoords, vec2 quadXY)
{
    vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;
    return pos;
}

vec3 customFace(vec3 InstanceCoords, vec2 quadXY)
{
    vec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;
    return pos;
}

void main(void)
{
    vec3 particlePos = particle_vertexData.xyz;
    vec3 inPos = particlePos;
    vec3 vertPos = particle_vertexData3.xyz;
    vec3 inVel = vec3(particle_vertexData2.w, particle_vertexData3.w, particle_vertexData5.x);

    float id = floor(particle_vertexData4);
    float rndFactor = fract(sin(id + 1.0 + seed));
    vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));

#ifdef LOCAL_SPACE
    inVel = mat3(matrix_model) * inVel;
#endif
    vec2 velocityV = normalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used

    vec2 quadXY = vertPos.xy;

#ifdef USE_MESH
    texCoordsAlphaLife = vec4(particle_vertexData5.zw, particle_vertexData2.z, particle_vertexData.w);
#else
    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, particle_vertexData2.z, particle_vertexData.w);
#endif
    mat2 rotMatrix;

    float inAngle = particle_vertexData2.x;
    vec3 particlePosMoved = vec3(0.0);
    vec3 meshLocalPos = particle_vertexData3.xyz;
`;

var particle_cpu_endVS = `
    localPos *= particle_vertexData2.y * emitterScale;
    localPos += particlePos;

    gl_Position = matrix_viewProjection * vec4(localPos, 1.0);
`;

var particle_customFaceVS = `
    quadXY = rotate(quadXY, inAngle, rotMatrix);
    vec3 localPos = customFace(particlePos, quadXY);
`;

var particle_endPS = `
    rgb = addFog(rgb);
    rgb = toneMap(rgb);
    rgb = gammaCorrectOutput(rgb);
    gl_FragColor = vec4(rgb, a);
}
`;

var particle_endVS = `
    localPos *= scale * emitterScale;
    localPos += particlePos;

    #ifdef SCREEN_SPACE
    gl_Position = vec4(localPos.x, localPos.y, 0.0, 1.0);
    #else
    gl_Position = matrix_viewProjection * vec4(localPos.xyz, 1.0);
    #endif
`;

var particle_halflambertPS = `
    vec3 negNormal = normal*0.5+0.5;
    vec3 posNormal = -normal*0.5+0.5;
    negNormal *= negNormal;
    posNormal *= posNormal;
`;

var particle_initVS = `
attribute vec4 particle_vertexData; // XYZ = particle position, W = particle ID + random factor
#ifdef USE_MESH
attribute vec2 particle_uv;         // mesh UV
#endif

uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform mat4 matrix_viewInverse;

#ifndef VIEWMATRIX
#define VIEWMATRIX
uniform mat4 matrix_view;
#endif

uniform float numParticles, numParticlesPot;
uniform float graphSampleSize;
uniform float graphNumSamples;
uniform float stretch;
uniform vec3 wrapBounds;
uniform vec3 emitterScale, emitterPos, faceTangent, faceBinorm;
uniform float rate, rateDiv, lifetime, deltaRandomnessStatic, scaleDivMult, alphaDivMult, seed, delta;
uniform sampler2D particleTexOUT, particleTexIN;
uniform highp sampler2D internalTex0;
uniform highp sampler2D internalTex1;
uniform highp sampler2D internalTex2;

#ifndef CAMERAPLANES
#define CAMERAPLANES
uniform vec4 camera_params;
#endif

varying vec4 texCoordsAlphaLife;

vec3 inPos;
vec3 inVel;
float inAngle;
bool inShow;
float inLife;
`;

var particle_lambertPS = `
    vec3 negNormal = max(normal, vec3(0.0));
    vec3 posNormal = max(-normal, vec3(0.0));
`;

var particle_lightingPS = `
    vec3 light = negNormal.x*lightCube[0] + posNormal.x*lightCube[1] +
                        negNormal.y*lightCube[2] + posNormal.y*lightCube[3] +
                        negNormal.z*lightCube[4] + posNormal.z*lightCube[5];

    rgb *= light;
`;

var particle_localShiftVS = `
    particlePos = (matrix_model * vec4(particlePos, 1.0)).xyz;
`;

var particle_meshVS = `
    vec3 localPos = meshLocalPos;
    localPos.xy = rotate(localPos.xy, inAngle, rotMatrix);
    localPos.yz = rotate(localPos.yz, inAngle, rotMatrix);

    billboard(particlePos, quadXY);
`;

var particle_normalVS = `
    Normal = normalize(localPos + matrix_viewInverse[2].xyz);
`;

var particle_normalMapPS = `
    vec3 normalMap = normalize(texture2D(normalMap, vec2(texCoordsAlphaLife.x, 1.0 - texCoordsAlphaLife.y)).xyz * 2.0 - 1.0);
    vec3 normal = ParticleMat * normalMap;
`;

var particle_pointAlongVS = `
    inAngle = atan(velocityV.x, velocityV.y); // not the fastest way, but easier to plug in; TODO: create rot matrix right from vectors

`;

var particle_softPS = `
    float depth = getLinearScreenDepth();
    float particleDepth = vDepth;
    float depthDiff = saturate(abs(particleDepth - depth) * softening);
    a *= depthDiff;
`;

var particle_softVS = `
    vDepth = getLinearDepth(localPos);
`;

var particle_stretchVS = `
    vec3 moveDir = inVel * stretch;
    vec3 posPrev = particlePos - moveDir;
    posPrev += particlePosMoved;

    vec2 centerToVertexV = normalize((mat3(matrix_view) * localPos).xy);

    float interpolation = dot(-velocityV, centerToVertexV) * 0.5 + 0.5;

    particlePos = mix(particlePos, posPrev, interpolation);
`;

var particle_TBNVS = `
    mat3 rot3 = mat3(rotMatrix[0][0], rotMatrix[0][1], 0.0, rotMatrix[1][0], rotMatrix[1][1], 0.0, 0.0, 0.0, 1.0);
    ParticleMat = mat3(-matrix_viewInverse[0].xyz, -matrix_viewInverse[1].xyz, matrix_viewInverse[2].xyz) * rot3;
`;

var particle_wrapVS = `
    vec3 origParticlePos = particlePos;
    particlePos -= matrix_model[3].xyz;
    particlePos = mod(particlePos, wrapBounds) - wrapBounds * 0.5;
    particlePos += matrix_model[3].xyz;
    particlePosMoved = particlePos - origParticlePos;
`;

var precisionTestPS = `
void main(void) {
    gl_FragColor = vec4(2147483648.0);
}
`;

var precisionTest2PS = `
uniform sampler2D source;

vec4 packFloat(float depth) {
    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);
    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);

    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);
    res -= res.xxyz * bit_mask;
    return res;
}

void main(void) {
    float c = texture2D(source, vec2(0.0)).r;
    float diff = abs(c - 2147483648.0) / 2147483648.0;
    gl_FragColor = packFloat(diff);
}
`;

var reflDirPS = `
void getReflDir() {
    dReflDirW = normalize(-reflect(dViewDirW, dNormalW));
}
`;

var reflDirAnisoPS = `
void getReflDir() {
    float roughness = sqrt(1.0 - min(dGlossiness, 1.0));
    float anisotropy = material_anisotropy * roughness;
    vec3 anisotropicDirection = anisotropy >= 0.0 ? dTBN[1] : dTBN[0];
    vec3 anisotropicTangent = cross(anisotropicDirection, dViewDirW);
    vec3 anisotropicNormal = cross(anisotropicTangent, anisotropicDirection);
    vec3 bentNormal = normalize(mix(normalize(dNormalW), normalize(anisotropicNormal), anisotropy));
    dReflDirW = reflect(-dViewDirW, bentNormal);
}
`;

var reflectionCCPS = `
#ifdef LIT_CLEARCOAT
void addReflectionCC() {
    ccReflection += calcReflection(ccReflDirW, ccGlossiness);
}
#endif
`;

var reflectionCubePS = `
uniform samplerCube texture_cubeMap;
uniform float material_reflectivity;

vec3 calcReflection(vec3 tReflDirW, float tGlossiness) {
    vec3 lookupVec = fixSeams(cubeMapProject(tReflDirW));
    lookupVec.x *= -1.0;
    return $DECODE(textureCube(texture_cubeMap, lookupVec));
}

void addReflection() {   
    dReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);
}
`;

var reflectionEnvHQPS = `
#ifndef ENV_ATLAS
#define ENV_ATLAS
uniform sampler2D texture_envAtlas;
#endif
uniform samplerCube texture_cubeMap;
uniform float material_reflectivity;

vec3 calcReflection(vec3 tReflDirW, float tGlossiness) {
    vec3 dir = cubeMapProject(tReflDirW) * vec3(-1.0, 1.0, 1.0);
    vec2 uv = toSphericalUv(dir);

    // calculate roughness level
    float level = saturate(1.0 - tGlossiness) * 5.0;
    float ilevel = floor(level);
    float flevel = level - ilevel;

    vec3 sharp = $DECODE(textureCube(texture_cubeMap, fixSeams(dir)));
    vec3 roughA = $DECODE(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel)));
    vec3 roughB = $DECODE(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel + 1.0)));

    return processEnvironment(mix(sharp, mix(roughA, roughB, flevel), min(level, 1.0)));
}

void addReflection() {   
    dReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);
}
`;

var reflectionEnvPS = `
#ifndef ENV_ATLAS
#define ENV_ATLAS
uniform sampler2D texture_envAtlas;
#endif
uniform float material_reflectivity;

// calculate mip level for shiny reflection given equirect coords uv.
float shinyMipLevel(vec2 uv) {
    vec2 dx = dFdx(uv);
    vec2 dy = dFdy(uv);

    // calculate second dF at 180 degrees
    vec2 uv2 = vec2(fract(uv.x + 0.5), uv.y);
    vec2 dx2 = dFdx(uv2);
    vec2 dy2 = dFdy(uv2);

    // calculate min of both sets of dF to handle discontinuity at the azim edge
    float maxd = min(max(dot(dx, dx), dot(dy, dy)), max(dot(dx2, dx2), dot(dy2, dy2)));

    return clamp(0.5 * log2(maxd) - 1.0 + textureBias, 0.0, 5.0);
}

vec3 calcReflection(vec3 tReflDirW, float tGlossiness) {
    vec3 dir = cubeMapProject(tReflDirW) * vec3(-1.0, 1.0, 1.0);
    vec2 uv = toSphericalUv(dir);

    // calculate roughness level
    float level = saturate(1.0 - tGlossiness) * 5.0;
    float ilevel = floor(level);

    // accessing the shiny (top level) reflection - perform manual mipmap lookup
    float level2 = shinyMipLevel(uv * atlasSize);
    float ilevel2 = floor(level2);

    vec2 uv0, uv1;
    float weight;
    if (ilevel == 0.0) {
        uv0 = mapShinyUv(uv, ilevel2);
        uv1 = mapShinyUv(uv, ilevel2 + 1.0);
        weight = level2 - ilevel2;
    } else {
        // accessing rough reflection - just sample the same part twice
        uv0 = uv1 = mapRoughnessUv(uv, ilevel);
        weight = 0.0;
    }

    vec3 linearA = $DECODE(texture2D(texture_envAtlas, uv0));
    vec3 linearB = $DECODE(texture2D(texture_envAtlas, uv1));
    vec3 linear0 = mix(linearA, linearB, weight);
    vec3 linear1 = $DECODE(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel + 1.0)));

    return processEnvironment(mix(linear0, linear1, level - ilevel));
}

void addReflection() {   
    dReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);
}
`;

var reflectionSpherePS = `
#ifndef VIEWMATRIX
#define VIEWMATRIX
uniform mat4 matrix_view;
#endif
uniform sampler2D texture_sphereMap;
uniform float material_reflectivity;

vec3 calcReflection(vec3 tReflDirW, float tGlossiness) {
    vec3 reflDirV = (mat3(matrix_view) * tReflDirW).xyz;

    float m = 2.0 * sqrt( dot(reflDirV.xy, reflDirV.xy) + (reflDirV.z+1.0)*(reflDirV.z+1.0) );
    vec2 sphereMapUv = reflDirV.xy / m + 0.5;

    return $DECODE(texture2D(texture_sphereMap, sphereMapUv));
}

void addReflection() {   
    dReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);
}
`;

var reflectionSphereLowPS = `
uniform sampler2D texture_sphereMap;
uniform float material_reflectivity;

vec3 calcReflection(vec3 tReflDirW, float tGlossiness) {
    vec3 reflDirV = vNormalV;

    vec2 sphereMapUv = reflDirV.xy * 0.5 + 0.5;
    return $DECODE(texture2D(texture_sphereMap, sphereMapUv));
}

void addReflection() {   
    dReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);
}
`;

var reflectionSheenPS = `

void addReflectionSheen() {
    float NoV = dot(dNormalW, dViewDirW);
    float alphaG = sGlossiness * sGlossiness;

    // Avoid using a LUT and approximate the values analytically
    float a = sGlossiness < 0.25 ? -339.2 * alphaG + 161.4 * sGlossiness - 25.9 : -8.48 * alphaG + 14.3 * sGlossiness - 9.95;
    float b = sGlossiness < 0.25 ? 44.0 * alphaG - 23.7 * sGlossiness + 3.26 : 1.97 * alphaG - 3.27 * sGlossiness + 0.72;
    float DG = exp( a * NoV + b ) + ( sGlossiness < 0.25 ? 0.0 : 0.1 * ( sGlossiness - 0.25 ) );
    sReflection += calcReflection(dNormalW, 0.0) * saturate(DG);
}
`;

var refractionCubePS = `
uniform float material_refractionIndex;

vec3 refract2(vec3 viewVec, vec3 Normal, float IOR) {
    float vn = dot(viewVec, Normal);
    float k = 1.0 - IOR * IOR * (1.0 - vn * vn);
    vec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * Normal;
    return refrVec;
}

void addRefraction() {
    // use same reflection code with refraction vector
    vec3 tmpDir = dReflDirW;
    vec4 tmpRefl = dReflection;
    dReflDirW = refract2(-dViewDirW, dNormalW, material_refractionIndex);
    dReflection = vec4(0);
    addReflection();
    dDiffuseLight = mix(dDiffuseLight, dReflection.rgb * dAlbedo, dTransmission);
    dReflection = tmpRefl;
    dReflDirW = tmpDir;
}
`;

var refractionDynamicPS = `
uniform float material_refractionIndex;
uniform float material_invAttenuationDistance;
uniform vec3 material_attenuation;

vec3 refract2(vec3 viewVec, vec3 Normal, float IOR) {
    float vn = dot(viewVec, Normal);
    float k = 1.0 - IOR * IOR * (1.0 - vn * vn);
    vec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * Normal;
    return refrVec;
}

void addRefraction() {

    // Extract scale from the model transform
    vec3 modelScale;
    modelScale.x = length(vec3(matrix_model[0].xyz));
    modelScale.y = length(vec3(matrix_model[1].xyz));
    modelScale.z = length(vec3(matrix_model[2].xyz));

    // Calculate the refraction vector, scaled by the thickness and scale of the object
    vec3 refractionVector = normalize(refract(-dViewDirW, dNormalW, material_refractionIndex)) * dThickness * modelScale;

    // The refraction point is the entry point + vector to exit point
    vec4 pointOfRefraction = vec4(vPositionW + refractionVector, 1.0);

    // Project to texture space so we can sample it
    vec4 projectionPoint = matrix_viewProjection * pointOfRefraction;
    vec2 uv = projectionPoint.xy / projectionPoint.ww;
    uv += vec2(1.0);
    uv *= vec2(0.5);

    #ifdef GL2
        // Use IOR and roughness to select mip
        float iorToRoughness = (1.0 - dGlossiness) * clamp((1.0 / material_refractionIndex) * 2.0 - 2.0, 0.0, 1.0);
        float refractionLod = log2(uScreenSize.x) * iorToRoughness;
        vec3 refraction = texture2DLodEXT(uSceneColorMap, uv, refractionLod).rgb;
    #else
        vec3 refraction = texture2D(uSceneColorMap, uv).rgb;
    #endif

    // Transmittance is our final refraction color
    vec3 transmittance;
    if (material_invAttenuationDistance != 0.0)
    {
        vec3 attenuation = -log(material_attenuation) * material_invAttenuationDistance;
        transmittance = exp(-attenuation * length(refractionVector));
    }
    else
    {
        transmittance = refraction;
    }

    // Apply fresnel effect on refraction
    vec3 fresnel = vec3(1.0) - getFresnel(dot(dViewDirW, dNormalW), dSpecularity);
    dDiffuseLight = mix(dDiffuseLight, refraction * transmittance * fresnel, dTransmission);
}
`;

var reprojectPS = `
// This shader requires the following #DEFINEs:
//
// PROCESS_FUNC - must be one of reproject, prefilter
// DECODE_FUNC - must be one of decodeRGBM, decodeRGBE, decodeGamma or decodeLinear
// ENCODE_FUNC - must be one of encodeRGBM, encodeRGBE, encideGamma or encodeLinear
// SOURCE_FUNC - must be one of sampleCubemap, sampleEquirect, sampleOctahedral
// TARGET_FUNC - must be one of getDirectionCubemap, getDirectionEquirect, getDirectionOctahedral
//
// When filtering:
// NUM_SAMPLES - number of samples
// NUM_SAMPLES_SQRT - sqrt of number of samples
//
// SUPPORTS_TEXLOD - whether supports texlod is supported

varying vec2 vUv0;

// source
uniform sampler2D sourceTex;
uniform samplerCube sourceCube;

// samples
uniform sampler2D samplesTex;
uniform vec2 samplesTexInverseSize;

// params:
// x - target cubemap face 0..6
// y - specular power (when prefiltering)
// z - source cubemap seam scale (0 to disable)
// w - target cubemap size for seam calc (0 to disable)
uniform vec4 params;

// params2:
// x - target image total pixels
// y - source cubemap size
uniform vec2 params2;

float targetFace() { return params.x; }
float specularPower() { return params.y; }
float sourceCubeSeamScale() { return params.z; }
float targetCubeSeamScale() { return params.w; }

float targetTotalPixels() { return params2.x; }
float sourceTotalPixels() { return params2.y; }

float PI = 3.141592653589793;

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

${decodePS}
${encodePS}

//-- supported projections

vec3 modifySeams(vec3 dir, float scale) {
    vec3 adir = abs(dir);
    float M = max(max(adir.x, adir.y), adir.z);
    return dir / M * vec3(
        adir.x == M ? 1.0 : scale,
        adir.y == M ? 1.0 : scale,
        adir.z == M ? 1.0 : scale
    );
}

vec2 toSpherical(vec3 dir) {
    return vec2(dir.xz == vec2(0.0) ? 0.0 : atan(dir.x, dir.z), asin(dir.y));
}

vec3 fromSpherical(vec2 uv) {
    return vec3(cos(uv.y) * sin(uv.x),
                sin(uv.y),
                cos(uv.y) * cos(uv.x));
}

vec3 getDirectionEquirect() {
    return fromSpherical((vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0) * vec2(PI, PI * 0.5));
}

vec4 sampleEquirect(vec2 sph) {
    vec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;
    return texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));
}

vec4 sampleEquirect(vec3 dir) {
    return sampleEquirect(toSpherical(dir));
}

vec4 sampleCubemap(vec3 dir) {
    return textureCube(sourceCube, modifySeams(dir, 1.0 - sourceCubeSeamScale()));
}

vec4 sampleCubemap(vec2 sph) {
    return sampleCubemap(fromSpherical(sph));
}

vec4 sampleEquirect(vec2 sph, float mipLevel) {
    vec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;
#ifdef SUPPORTS_TEXLOD
    return texture2DLodEXT(sourceTex, vec2(uv.x, 1.0 - uv.y), mipLevel);
#else
    return texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));
#endif
}

vec4 sampleEquirect(vec3 dir, float mipLevel) {
    return sampleEquirect(toSpherical(dir), mipLevel);
}

vec4 sampleCubemap(vec3 dir, float mipLevel) {
#ifdef SUPPORTS_TEXLOD
    return textureCubeLodEXT(sourceCube, modifySeams(dir, 1.0 - exp2(mipLevel) * sourceCubeSeamScale()), mipLevel);
#else
    return textureCube(sourceCube, modifySeams(dir, 1.0 - exp2(mipLevel) * sourceCubeSeamScale()));
#endif
}

vec4 sampleCubemap(vec2 sph, float mipLevel) {
    return sampleCubemap(fromSpherical(sph), mipLevel);
}

// octahedral code, based on http://jcgt.org/published/0003/02/01
// "Survey of Efficient Representations for Independent Unit Vectors" by Cigolle, Donow, Evangelakos, Mara, McGuire, Meyer

float signNotZero(float k){
    return(k >= 0.0) ? 1.0 : -1.0;
}

vec2 signNotZero(vec2 v) {
    return vec2(signNotZero(v.x), signNotZero(v.y));
}

// Returns a unit vector. Argument o is an octahedral vector packed via octEncode, on the [-1, +1] square
vec3 octDecode(vec2 o) {
    vec3 v = vec3(o.x, 1.0 - abs(o.x) - abs(o.y), o.y);
    if (v.y < 0.0) {
        v.xz = (1.0 - abs(v.zx)) * signNotZero(v.xz);
    }
    return normalize(v);
}

vec3 getDirectionOctahedral() {
    return octDecode(vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0);
}

// Assumes that v is a unit vector. The result is an octahedral vector on the [-1, +1] square
vec2 octEncode(in vec3 v) {
    float l1norm = abs(v.x) + abs(v.y) + abs(v.z);
    vec2 result = v.xz * (1.0 / l1norm);
    if (v.y < 0.0) {
        result = (1.0 - abs(result.yx)) * signNotZero(result.xy);
    }
    return result;
}

vec4 sampleOctahedral(vec3 dir) {
    vec2 uv = octEncode(dir) * 0.5 + 0.5;
    return texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));
}

vec4 sampleOctahedral(vec2 sph) {
    return sampleOctahedral(fromSpherical(sph));
}

vec4 sampleOctahedral(vec3 dir, float mipLevel) {
    vec2 uv = octEncode(dir) * 0.5 + 0.5;
#ifdef SUPPORTS_TEXLOD
    return texture2DLodEXT(sourceTex, vec2(uv.x, 1.0 - uv.y), mipLevel);
#else
    return texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));
#endif
}

vec4 sampleOctahedral(vec2 sph, float mipLevel) {
    return sampleOctahedral(fromSpherical(sph), mipLevel);
}

/////////////////////////////////////////////////////////////////////

vec3 getDirectionCubemap() {
    vec2 st = vUv0 * 2.0 - 1.0;
    float face = targetFace();

    vec3 vec;
    if (face == 0.0) {
        vec = vec3(1, -st.y, -st.x);
    } else if (face == 1.0) {
        vec = vec3(-1, -st.y, st.x);
    } else if (face == 2.0) {
        vec = vec3(st.x, 1, st.y);
    } else if (face == 3.0) {
        vec = vec3(st.x, -1, -st.y);
    } else if (face == 4.0) {
        vec = vec3(st.x, -st.y, 1);
    } else {
        vec = vec3(-st.x, -st.y, -1);
    }

    return normalize(modifySeams(vec, 1.0 / (1.0 - targetCubeSeamScale())));
}

mat3 matrixFromVector(vec3 n) { // frisvad
    float a = 1.0 / (1.0 + n.z);
    float b = -n.x * n.y * a;
    vec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);
    vec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);
    return mat3(b1, b2, n);
}

mat3 matrixFromVectorSlow(vec3 n) {
    vec3 up = (1.0 - abs(n.y) <= 0.0000001) ? vec3(0.0, 0.0, n.y > 0.0 ? 1.0 : -1.0) : vec3(0.0, 1.0, 0.0);
    vec3 x = normalize(cross(up, n));
    vec3 y = cross(n, x);
    return mat3(x, y, n);
}

vec4 reproject() {
    if (NUM_SAMPLES <= 1) {
        // single sample
        return ENCODE_FUNC(DECODE_FUNC(SOURCE_FUNC(TARGET_FUNC())));
    } else {
        // multi sample
        vec3 t = TARGET_FUNC();
        vec3 tu = dFdx(t);
        vec3 tv = dFdy(t);

        vec3 result = vec3(0.0);
        for (float u = 0.0; u < NUM_SAMPLES_SQRT; ++u) {
            for (float v = 0.0; v < NUM_SAMPLES_SQRT; ++v) {
                result += DECODE_FUNC(SOURCE_FUNC(normalize(t +
                                                            tu * (u / NUM_SAMPLES_SQRT - 0.5) +
                                                            tv * (v / NUM_SAMPLES_SQRT - 0.5))));
            }
        }
        return ENCODE_FUNC(result / (NUM_SAMPLES_SQRT * NUM_SAMPLES_SQRT));
    }
}

vec4 unpackFloat = vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0);

void unpackSample(int i, out vec3 L, out float mipLevel) {
    float u = (float(i * 4) + 0.5) * samplesTexInverseSize.x;
    float v = (floor(u) + 0.5) * samplesTexInverseSize.y;

    vec4 raw;
    raw.x = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
    raw.y = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
    raw.z = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
    raw.w = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat);

    L.xyz = raw.xyz * 2.0 - 1.0;
    mipLevel = raw.w * 8.0;
}

// convolve an environment given pre-generated samples
vec4 prefilterSamples() {
    // construct vector space given target direction
    mat3 vecSpace = matrixFromVectorSlow(TARGET_FUNC());

    vec3 L;
    float mipLevel;

    vec3 result = vec3(0.0);
    float totalWeight = 0.0;
    for (int i = 0; i < NUM_SAMPLES; ++i) {
        unpackSample(i, L, mipLevel);
        result += DECODE_FUNC(SOURCE_FUNC(vecSpace * L, mipLevel)) * L.z;
        totalWeight += L.z;
    }

    return ENCODE_FUNC(result / totalWeight);
}

// unweighted version of prefilterSamples
vec4 prefilterSamplesUnweighted() {
    // construct vector space given target direction
    mat3 vecSpace = matrixFromVectorSlow(TARGET_FUNC());

    vec3 L;
    float mipLevel;

    vec3 result = vec3(0.0);
    float totalWeight = 0.0;
    for (int i = 0; i < NUM_SAMPLES; ++i) {
        unpackSample(i, L, mipLevel);
        result += DECODE_FUNC(SOURCE_FUNC(vecSpace * L, mipLevel));
    }

    return ENCODE_FUNC(result / float(NUM_SAMPLES));
}

void main(void) {
    gl_FragColor = PROCESS_FUNC();
}
`;

var screenDepthPS = `
uniform highp sampler2D uSceneDepthMap;

#ifndef SCREENSIZE
#define SCREENSIZE
uniform vec4 uScreenSize;
#endif

#ifndef VIEWMATRIX
#define VIEWMATRIX
uniform mat4 matrix_view;
#endif



#ifndef CAMERAPLANES
#define CAMERAPLANES
uniform vec4 camera_params; // 1 / camera_far,      camera_far,     camera_near,        is_ortho
#endif

#ifdef GL2
float linearizeDepth(float z) {
    if (camera_params.w == 0.0)
        return (camera_params.z * camera_params.y) / (camera_params.y + z * (camera_params.z - camera_params.y));
    else
        return camera_params.z + z * (camera_params.y - camera_params.z);
}
#else
#ifndef UNPACKFLOAT
#define UNPACKFLOAT
float unpackFloat(vec4 rgbaDepth) {
    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);
    return dot(rgbaDepth, bitShift);
}
#endif
#endif

// Retrieves rendered linear camera depth by UV
float getLinearScreenDepth(vec2 uv) {
    #ifdef GL2
        return linearizeDepth(texture2D(uSceneDepthMap, uv).r);
    #else
        return unpackFloat(texture2D(uSceneDepthMap, uv)) * camera_params.y;
    #endif
}

#ifndef VERTEXSHADER
// Retrieves rendered linear camera depth under the current pixel
float getLinearScreenDepth() {
    vec2 uv = gl_FragCoord.xy * uScreenSize.zw;
    return getLinearScreenDepth(uv);
}
#endif

// Generates linear camera depth for the given world position
float getLinearDepth(vec3 pos) {
    return -(matrix_view * vec4(pos, 1.0)).z;
}
`;

var shadowCascadesPS = `
const float maxCascades = 4.0;

// shadow matrix for selected cascade
mat4 cascadeShadowMat;

// function which selects a shadow projection matrix based on cascade distances 
void getShadowCascadeMatrix(mat4 shadowMatrixPalette[4], float shadowCascadeDistances[4], float shadowCascadeCount) {

    // depth in 0 .. far plane range
    float depth = 1.0 / gl_FragCoord.w;

    // find cascade index based on the depth (loop as there is no per component vec compare operator in webgl)
    float cascadeIndex = 0.0;
    for (float i = 0.0; i < maxCascades; i++) {
        if (depth < shadowCascadeDistances[int(i)]) {
            cascadeIndex = i;
            break;
        }
    }

    // limit to actual number of used cascades
    cascadeIndex = min(cascadeIndex, shadowCascadeCount - 1.0);

    // pick shadow matrix
    #ifdef GL2
        cascadeShadowMat = shadowMatrixPalette[int(cascadeIndex)];
    #else
        // webgl 1 does not allow non-cost index array lookup
        if (cascadeIndex == 0.0) {
            cascadeShadowMat = shadowMatrixPalette[0];
        }
        else if (cascadeIndex == 1.0) {
            cascadeShadowMat = shadowMatrixPalette[1];
        }
        else if (cascadeIndex == 2.0) {
            cascadeShadowMat = shadowMatrixPalette[2];
        }
        else {
            cascadeShadowMat = shadowMatrixPalette[3];
        }
    #endif
}

void fadeShadow(float shadowCascadeDistances[4]) {                  

    // if the pixel is past the shadow distance, remove shadow
    // this enforces straight line instead of corner of shadow which moves when camera rotates  
    float depth = 1.0 / gl_FragCoord.w;
    if (depth > shadowCascadeDistances[int(maxCascades - 1.0)]) {
        dShadowCoord.z = -9999999.0;
    }
}
`;

var shadowCommonPS = `
void normalOffsetPointShadow(vec4 shadowParams) {
    float distScale = length(dLightDirW);
    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale; //0.02
    vec3 dir = wPos - dLightPosW;
    dLightDirW = dir;
}
`;

var shadowCoordPS = `
void _getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {
    dShadowCoord = (shadowMatrix * vec4(wPos, 1.0)).xyz;
    dShadowCoord.z = saturate(dShadowCoord.z) - 0.0001;

    #ifdef SHADOWBIAS
    dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);
    #endif
}

void _getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {
    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);
    projPos.xy /= projPos.w;
    dShadowCoord.xy = projPos.xy;
    dShadowCoord.z = length(dLightDirW) * shadowParams.w;

    #ifdef SHADOWBIAS
    dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);
    #endif
}

void getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams) {
    _getShadowCoordOrtho(shadowMatrix, shadowParams, vPositionW);
}

void getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams) {
    _getShadowCoordPersp(shadowMatrix, shadowParams, vPositionW);
}

void getShadowCoordPerspNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {
    float distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW)); // fov?
    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;

    _getShadowCoordPersp(shadowMatrix, shadowParams, wPos);
}

void getShadowCoordOrthoNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {
    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0); //0.08

    _getShadowCoordOrtho(shadowMatrix, shadowParams, wPos);
}
`;

var shadowCoordPerspZbufferPS = `
void _getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {
    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);
    projPos.xyz /= projPos.w;
    dShadowCoord = projPos.xyz;
    // depth bias is already applied on render
}

void getShadowCoordPerspZbufferNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {
    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y;
    _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, wPos);
}

void getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams) {
    _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, vPositionW);
}
`;

var shadowEVSMPS = `
float VSM$(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {
    vec3 moments = texture2D(tex, texCoords).xyz;
    return calculateEVSM(moments, Z, vsmBias, exponent);
}

float getShadowVSM$(sampler2D shadowMap, vec3 shadowParams, float exponent) {
    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);
}

float getShadowSpotVSM$(sampler2D shadowMap, vec4 shadowParams, float exponent) {
    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);
}
`;

var shadowEVSMnPS = `
float VSM$(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {
    float pixelSize = 1.0 / resolution;
    texCoords -= vec2(pixelSize);
    vec3 s00 = texture2D(tex, texCoords).xyz;
    vec3 s10 = texture2D(tex, texCoords + vec2(pixelSize, 0)).xyz;
    vec3 s01 = texture2D(tex, texCoords + vec2(0, pixelSize)).xyz;
    vec3 s11 = texture2D(tex, texCoords + vec2(pixelSize)).xyz;
    vec2 fr = fract(texCoords * resolution);
    vec3 h0 = mix(s00, s10, fr.x);
    vec3 h1 = mix(s01, s11, fr.x);
    vec3 moments = mix(h0, h1, fr.y);
    return calculateEVSM(moments, Z, vsmBias, exponent);
}

float getShadowVSM$(sampler2D shadowMap, vec3 shadowParams, float exponent) {
    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);
}

float getShadowSpotVSM$(sampler2D shadowMap, vec4 shadowParams, float exponent) {
    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);
}
`;

var shadowStandardPS = `
vec3 lessThan2(vec3 a, vec3 b) {
    return clamp((b - a)*1000.0, 0.0, 1.0); // softer version
}

#ifndef UNPACKFLOAT
#define UNPACKFLOAT
float unpackFloat(vec4 rgbaDepth) {
    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);
    return dot(rgbaDepth, bitShift);
}
#endif

// ----- Direct/Spot Sampling -----

#ifdef GL2
float _getShadowPCF3x3(sampler2DShadow shadowMap, vec3 shadowParams) {
    float z = dShadowCoord.z;
    vec2 uv = dShadowCoord.xy * shadowParams.x; // 1 unit - 1 texel
    float shadowMapSizeInv = 1.0 / shadowParams.x;
    vec2 base_uv = floor(uv + 0.5);
    float s = (uv.x + 0.5 - base_uv.x);
    float t = (uv.y + 0.5 - base_uv.y);
    base_uv -= vec2(0.5);
    base_uv *= shadowMapSizeInv;

    float sum = 0.0;

    float uw0 = (3.0 - 2.0 * s);
    float uw1 = (1.0 + 2.0 * s);

    float u0 = (2.0 - s) / uw0 - 1.0;
    float u1 = s / uw1 + 1.0;

    float vw0 = (3.0 - 2.0 * t);
    float vw1 = (1.0 + 2.0 * t);

    float v0 = (2.0 - t) / vw0 - 1.0;
    float v1 = t / vw1 + 1.0;

    u0 = u0 * shadowMapSizeInv + base_uv.x;
    v0 = v0 * shadowMapSizeInv + base_uv.y;

    u1 = u1 * shadowMapSizeInv + base_uv.x;
    v1 = v1 * shadowMapSizeInv + base_uv.y;

    sum += uw0 * vw0 * texture(shadowMap, vec3(u0, v0, z));
    sum += uw1 * vw0 * texture(shadowMap, vec3(u1, v0, z));
    sum += uw0 * vw1 * texture(shadowMap, vec3(u0, v1, z));
    sum += uw1 * vw1 * texture(shadowMap, vec3(u1, v1, z));

    sum *= 1.0f / 16.0;
    return sum;
}

float getShadowPCF3x3(sampler2DShadow shadowMap, vec3 shadowParams) {
    return _getShadowPCF3x3(shadowMap, shadowParams);
}

float getShadowSpotPCF3x3(sampler2DShadow shadowMap, vec4 shadowParams) {
    return _getShadowPCF3x3(shadowMap, shadowParams.xyz);
}
#else
float _xgetShadowPCF3x3(mat3 depthKernel, sampler2D shadowMap, vec3 shadowParams) {
    mat3 shadowKernel;
    vec3 shadowCoord = dShadowCoord;
    vec3 shadowZ = vec3(shadowCoord.z);
    shadowKernel[0] = vec3(greaterThan(depthKernel[0], shadowZ));
    shadowKernel[1] = vec3(greaterThan(depthKernel[1], shadowZ));
    shadowKernel[2] = vec3(greaterThan(depthKernel[2], shadowZ));

    vec2 fractionalCoord = fract( shadowCoord.xy * shadowParams.x );

    shadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);
    shadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);

    vec4 shadowValues;
    shadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);
    shadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);
    shadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);
    shadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);

    return dot( shadowValues, vec4( 1.0 ) ) * 0.25;
}

float _getShadowPCF3x3(sampler2D shadowMap, vec3 shadowParams) {
    vec3 shadowCoord = dShadowCoord;

    float xoffset = 1.0 / shadowParams.x; // 1/shadow map width
    float dx0 = -xoffset;
    float dx1 = xoffset;

    mat3 depthKernel;
    depthKernel[0][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, dx0)));
    depthKernel[0][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, 0.0)));
    depthKernel[0][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, dx1)));
    depthKernel[1][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(0.0, dx0)));
    depthKernel[1][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy));
    depthKernel[1][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(0.0, dx1)));
    depthKernel[2][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, dx0)));
    depthKernel[2][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, 0.0)));
    depthKernel[2][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, dx1)));

    return _xgetShadowPCF3x3(depthKernel, shadowMap, shadowParams);
}

float getShadowPCF3x3(sampler2D shadowMap, vec3 shadowParams) {
    return _getShadowPCF3x3(shadowMap, shadowParams);
}

float getShadowSpotPCF3x3(sampler2D shadowMap, vec4 shadowParams) {
    return _getShadowPCF3x3(shadowMap, shadowParams.xyz);
}
#endif


// ----- Omni Sampling -----

float _getShadowPoint(samplerCube shadowMap, vec4 shadowParams, vec3 dir) {

    vec3 tc = normalize(dir);
    vec3 tcAbs = abs(tc);

    vec4 dirX = vec4(1,0,0, tc.x);
    vec4 dirY = vec4(0,1,0, tc.y);
    float majorAxisLength = tc.z;
    if ((tcAbs.x > tcAbs.y) && (tcAbs.x > tcAbs.z)) {
        dirX = vec4(0,0,1, tc.z);
        dirY = vec4(0,1,0, tc.y);
        majorAxisLength = tc.x;
    } else if ((tcAbs.y > tcAbs.x) && (tcAbs.y > tcAbs.z)) {
        dirX = vec4(1,0,0, tc.x);
        dirY = vec4(0,0,1, tc.z);
        majorAxisLength = tc.y;
    }

    float shadowParamsInFaceSpace = ((1.0/shadowParams.x) * 2.0) * abs(majorAxisLength);

    vec3 xoffset = (dirX.xyz * shadowParamsInFaceSpace);
    vec3 yoffset = (dirY.xyz * shadowParamsInFaceSpace);
    vec3 dx0 = -xoffset;
    vec3 dy0 = -yoffset;
    vec3 dx1 = xoffset;
    vec3 dy1 = yoffset;

    mat3 shadowKernel;
    mat3 depthKernel;

    depthKernel[0][0] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy0));
    depthKernel[0][1] = unpackFloat(textureCube(shadowMap, tc + dx0));
    depthKernel[0][2] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy1));
    depthKernel[1][0] = unpackFloat(textureCube(shadowMap, tc + dy0));
    depthKernel[1][1] = unpackFloat(textureCube(shadowMap, tc));
    depthKernel[1][2] = unpackFloat(textureCube(shadowMap, tc + dy1));
    depthKernel[2][0] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy0));
    depthKernel[2][1] = unpackFloat(textureCube(shadowMap, tc + dx1));
    depthKernel[2][2] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy1));

    vec3 shadowZ = vec3(length(dir) * shadowParams.w + shadowParams.z);

    shadowKernel[0] = vec3(lessThan2(depthKernel[0], shadowZ));
    shadowKernel[1] = vec3(lessThan2(depthKernel[1], shadowZ));
    shadowKernel[2] = vec3(lessThan2(depthKernel[2], shadowZ));

    vec2 uv = (vec2(dirX.w, dirY.w) / abs(majorAxisLength)) * 0.5;

    vec2 fractionalCoord = fract( uv * shadowParams.x );

    shadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);
    shadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);

    vec4 shadowValues;
    shadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);
    shadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);
    shadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);
    shadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);

    return 1.0 - dot( shadowValues, vec4( 1.0 ) ) * 0.25;
}

float getShadowPointPCF3x3(samplerCube shadowMap, vec4 shadowParams) {
    return _getShadowPoint(shadowMap, shadowParams, dLightDirW);
}
`;

var shadowStandardGL2PS = `
float _getShadowPCF5x5(sampler2DShadow shadowMap, vec3 shadowParams) {
    // http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/

    float z = dShadowCoord.z;
    vec2 uv = dShadowCoord.xy * shadowParams.x; // 1 unit - 1 texel
    float shadowMapSizeInv = 1.0 / shadowParams.x;
    vec2 base_uv = floor(uv + 0.5);
    float s = (uv.x + 0.5 - base_uv.x);
    float t = (uv.y + 0.5 - base_uv.y);
    base_uv -= vec2(0.5);
    base_uv *= shadowMapSizeInv;


    float uw0 = (4.0 - 3.0 * s);
    float uw1 = 7.0;
    float uw2 = (1.0 + 3.0 * s);

    float u0 = (3.0 - 2.0 * s) / uw0 - 2.0;
    float u1 = (3.0 + s) / uw1;
    float u2 = s / uw2 + 2.0;

    float vw0 = (4.0 - 3.0 * t);
    float vw1 = 7.0;
    float vw2 = (1.0 + 3.0 * t);

    float v0 = (3.0 - 2.0 * t) / vw0 - 2.0;
    float v1 = (3.0 + t) / vw1;
    float v2 = t / vw2 + 2.0;

    float sum = 0.0;

    u0 = u0 * shadowMapSizeInv + base_uv.x;
    v0 = v0 * shadowMapSizeInv + base_uv.y;

    u1 = u1 * shadowMapSizeInv + base_uv.x;
    v1 = v1 * shadowMapSizeInv + base_uv.y;

    u2 = u2 * shadowMapSizeInv + base_uv.x;
    v2 = v2 * shadowMapSizeInv + base_uv.y;

    sum += uw0 * vw0 * texture(shadowMap, vec3(u0, v0, z));
    sum += uw1 * vw0 * texture(shadowMap, vec3(u1, v0, z));
    sum += uw2 * vw0 * texture(shadowMap, vec3(u2, v0, z));

    sum += uw0 * vw1 * texture(shadowMap, vec3(u0, v1, z));
    sum += uw1 * vw1 * texture(shadowMap, vec3(u1, v1, z));
    sum += uw2 * vw1 * texture(shadowMap, vec3(u2, v1, z));

    sum += uw0 * vw2 * texture(shadowMap, vec3(u0, v2, z));
    sum += uw1 * vw2 * texture(shadowMap, vec3(u1, v2, z));
    sum += uw2 * vw2 * texture(shadowMap, vec3(u2, v2, z));

    sum *= 1.0f / 144.0;

    sum = gammaCorrectInput(sum); // gives softer gradient
    sum = saturate(sum);

    return sum;
}

float getShadowPCF5x5(sampler2DShadow shadowMap, vec3 shadowParams) {
    return _getShadowPCF5x5(shadowMap, shadowParams);
}

float getShadowSpotPCF5x5(sampler2DShadow shadowMap, vec4 shadowParams) {
    return _getShadowPCF5x5(shadowMap, shadowParams.xyz);
}
`;

var shadowVSM8PS = `
float calculateVSM8(vec3 moments, float Z, float vsmBias) {
    float VSMBias = vsmBias;//0.01 * 0.25;
    float depthScale = VSMBias * Z;
    float minVariance1 = depthScale * depthScale;
    return chebyshevUpperBound(moments.xy, Z, minVariance1, 0.1);
}

float decodeFloatRG(vec2 rg) {
    return rg.y*(1.0/255.0) + rg.x;
}

float VSM8(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {
    vec4 c = texture2D(tex, texCoords);
    vec3 moments = vec3(decodeFloatRG(c.xy), decodeFloatRG(c.zw), 0.0);
    return calculateVSM8(moments, Z, vsmBias);
}

float getShadowVSM8(sampler2D shadowMap, vec3 shadowParams, float exponent) {
    return VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, 0.0);
}

float getShadowSpotVSM8(sampler2D shadowMap, vec4 shadowParams, float exponent) {
    return VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, 0.0);
}
`;

var shadowVSM_commonPS = `
float linstep(float a, float b, float v) {
    return saturate((v - a) / (b - a));
}

float reduceLightBleeding(float pMax, float amount) {
   // Remove the [0, amount] tail and linearly rescale (amount, 1].
   return linstep(amount, 1.0, pMax);
}

float chebyshevUpperBound(vec2 moments, float mean, float minVariance, float lightBleedingReduction) {
    // Compute variance
    float variance = moments.y - (moments.x * moments.x);
    variance = max(variance, minVariance);

    // Compute probabilistic upper bound
    float d = mean - moments.x;
    float pMax = variance / (variance + (d * d));

    pMax = reduceLightBleeding(pMax, lightBleedingReduction);

    // One-tailed Chebyshev
    return (mean <= moments.x ? 1.0 : pMax);
}

float calculateEVSM(vec3 moments, float Z, float vsmBias, float exponent) {
    Z = 2.0 * Z - 1.0;
    float warpedDepth = exp(exponent * Z);

    moments.xy += vec2(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments.z);

    float VSMBias = vsmBias;//0.01 * 0.25;
    float depthScale = VSMBias * exponent * warpedDepth;
    float minVariance1 = depthScale * depthScale;
    return chebyshevUpperBound(moments.xy, warpedDepth, minVariance1, 0.1);
}
`;

var skinBatchConstVS = `
attribute float vertex_boneIndices;

uniform vec4 matrix_pose[BONE_LIMIT * 3];

mat4 getBoneMatrix(const in float i) {
    // read 4x3 matrix
    vec4 v1 = matrix_pose[int(3.0 * i)];
    vec4 v2 = matrix_pose[int(3.0 * i + 1.0)];
    vec4 v3 = matrix_pose[int(3.0 * i + 2.0)];

    // transpose to 4x4 matrix
    return mat4(
        v1.x, v2.x, v3.x, 0,
        v1.y, v2.y, v3.y, 0,
        v1.z, v2.z, v3.z, 0,
        v1.w, v2.w, v3.w, 1
    );
}
`;

var skinBatchTexVS = `
attribute float vertex_boneIndices;

uniform highp sampler2D texture_poseMap;
uniform vec4 texture_poseMapSize;

mat4 getBoneMatrix(const in float i) {
    float j = i * 3.0;
    float dx = texture_poseMapSize.z;
    float dy = texture_poseMapSize.w;

    float y = floor(j * dx);
    float x = j - (y * texture_poseMapSize.x);
    y = dy * (y + 0.5);

    // read elements of 4x3 matrix
    vec4 v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));
    vec4 v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));
    vec4 v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));

    // transpose to 4x4 matrix
    return mat4(
        v1.x, v2.x, v3.x, 0,
        v1.y, v2.y, v3.y, 0,
        v1.z, v2.z, v3.z, 0,
        v1.w, v2.w, v3.w, 1
    );
}
`;

var skinConstVS = `
attribute vec4 vertex_boneWeights;
attribute vec4 vertex_boneIndices;

uniform vec4 matrix_pose[BONE_LIMIT * 3];

void getBoneMatrix(const in float i, out vec4 v1, out vec4 v2, out vec4 v3) {
    // read 4x3 matrix
    v1 = matrix_pose[int(3.0 * i)];
    v2 = matrix_pose[int(3.0 * i + 1.0)];
    v3 = matrix_pose[int(3.0 * i + 2.0)];
}

mat4 getSkinMatrix(const in vec4 indices, const in vec4 weights) {
    // get 4 bone matrices
    vec4 a1, a2, a3;
    getBoneMatrix(indices.x, a1, a2, a3);

    vec4 b1, b2, b3;
    getBoneMatrix(indices.y, b1, b2, b3);

    vec4 c1, c2, c3;
    getBoneMatrix(indices.z, c1, c2, c3);

    vec4 d1, d2, d3;
    getBoneMatrix(indices.w, d1, d2, d3);

    // multiply them by weights and add up to get final 4x3 matrix
    vec4 v1 = a1 * weights.x + b1 * weights.y + c1 * weights.z + d1 * weights.w;
    vec4 v2 = a2 * weights.x + b2 * weights.y + c2 * weights.z + d2 * weights.w;
    vec4 v3 = a3 * weights.x + b3 * weights.y + c3 * weights.z + d3 * weights.w;

    // add up weights
    float one = dot(weights, vec4(1.0));

    // transpose to 4x4 matrix
    return mat4(
        v1.x, v2.x, v3.x, 0,
        v1.y, v2.y, v3.y, 0,
        v1.z, v2.z, v3.z, 0,
        v1.w, v2.w, v3.w, one
    );
}
`;

var skinTexVS = `
attribute vec4 vertex_boneWeights;
attribute vec4 vertex_boneIndices;

uniform highp sampler2D texture_poseMap;
uniform vec4 texture_poseMapSize;

void getBoneMatrix(const in float i, out vec4 v1, out vec4 v2, out vec4 v3) {
    float j = i * 3.0;
    float dx = texture_poseMapSize.z;
    float dy = texture_poseMapSize.w;
    
    float y = floor(j * dx);
    float x = j - (y * texture_poseMapSize.x);
    y = dy * (y + 0.5);

    // read elements of 4x3 matrix
    v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));
    v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));
    v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));
}

mat4 getSkinMatrix(const in vec4 indices, const in vec4 weights) {
    // get 4 bone matrices
    vec4 a1, a2, a3;
    getBoneMatrix(indices.x, a1, a2, a3);

    vec4 b1, b2, b3;
    getBoneMatrix(indices.y, b1, b2, b3);

    vec4 c1, c2, c3;
    getBoneMatrix(indices.z, c1, c2, c3);

    vec4 d1, d2, d3;
    getBoneMatrix(indices.w, d1, d2, d3);

    // multiply them by weights and add up to get final 4x3 matrix
    vec4 v1 = a1 * weights.x + b1 * weights.y + c1 * weights.z + d1 * weights.w;
    vec4 v2 = a2 * weights.x + b2 * weights.y + c2 * weights.z + d2 * weights.w;
    vec4 v3 = a3 * weights.x + b3 * weights.y + c3 * weights.z + d3 * weights.w;

    // add up weights
    float one = dot(weights, vec4(1.0));

    // transpose to 4x4 matrix
    return mat4(
        v1.x, v2.x, v3.x, 0,
        v1.y, v2.y, v3.y, 0,
        v1.z, v2.z, v3.z, 0,
        v1.w, v2.w, v3.w, one
    );
}
`;

var skyboxEnvPS = `
varying vec3 vViewDir;

uniform sampler2D texture_envAtlas;
uniform float mipLevel;

void main(void) {
    vec3 dir = vViewDir * vec3(-1.0, 1.0, 1.0);
    vec2 uv = toSphericalUv(normalize(dir));

    vec3 linear = $DECODE(texture2D(texture_envAtlas, mapRoughnessUv(uv, mipLevel)));

    gl_FragColor = vec4(gammaCorrectOutput(toneMap(processEnvironment(linear))), 1.0);
}
`;

var skyboxHDRPS = `
varying vec3 vViewDir;

uniform samplerCube texture_cubeMap;

void main(void) {
    vec3 dir=vViewDir;
    dir.x *= -1.0;

    vec3 linear = $DECODE(textureCube(texture_cubeMap, fixSeamsStatic(dir, $FIXCONST)));

    gl_FragColor = vec4(gammaCorrectOutput(toneMap(processEnvironment(linear))), 1.0);
}
`;

var skyboxVS = `
attribute vec3 aPosition;

#ifndef VIEWMATRIX
#define VIEWMATRIX
uniform mat4 matrix_view;
#endif

uniform mat4 matrix_projectionSkybox;
uniform mat3 cubeMapRotationMatrix;

varying vec3 vViewDir;

void main(void) {
    mat4 view = matrix_view;
    view[3][0] = view[3][1] = view[3][2] = 0.0;
    gl_Position = matrix_projectionSkybox * view * vec4(aPosition, 1.0);

    // Force skybox to far Z, regardless of the clip planes on the camera
    // Subtract a tiny fudge factor to ensure floating point errors don't
    // still push pixels beyond far Z. See:
    // http://www.opengl.org/discussion_boards/showthread.php/171867-skybox-problem

    gl_Position.z = gl_Position.w - 0.00001;
    vViewDir = aPosition * cubeMapRotationMatrix;
}
`;

var specularPS = `

#ifdef MAPCOLOR
uniform vec3 material_specular;
#endif

void getSpecularity() {
    vec3 specularColor = vec3(1,1,1);

    #ifdef MAPCOLOR
    specularColor *= material_specular;
    #endif

    #ifdef MAPTEXTURE
    specularColor *= $DECODE(texture2DBias($SAMPLER, $UV, textureBias)).$CH;
    #endif

    #ifdef MAPVERTEX
    specularColor *= saturate(vVertexColor.$VC);
    #endif

    dSpecularity = specularColor;
}
`;

var sphericalPS = `
// equirectangular helper functions
const float PI = 3.141592653589793;

vec2 toSpherical(vec3 dir) {
    return vec2(dir.xz == vec2(0.0) ? 0.0 : atan(dir.x, dir.z), asin(dir.y));
}

vec2 toSphericalUv(vec3 dir) {
    vec2 uv = toSpherical(dir) / vec2(PI * 2.0, PI) + 0.5;
    return vec2(uv.x, 1.0 - uv.y);
}
`;

var specularityFactorPS = `

#ifdef MAPFLOAT
uniform float material_specularityFactor;
#endif

void getSpecularityFactor() {
    float specularityFactor = 1.0;

    #ifdef MAPFLOAT
    specularityFactor *= material_specularityFactor;
    #endif

    #ifdef MAPTEXTURE
    specularityFactor *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    specularityFactor *= saturate(vVertexColor.$VC);
    #endif

    dSpecularityFactor = specularityFactor;
}
`;

var spotPS = `
float getSpotEffect(vec3 lightSpotDirW, float lightInnerConeAngle, float lightOuterConeAngle) {
    float cosAngle = dot(dLightDirNormW, lightSpotDirW);
    return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);
}
`;

var startPS = `
void main(void) {
    dReflection = vec4(0);

    #ifdef LIT_CLEARCOAT
    ccSpecularLight = vec3(0);
    ccReflection = vec3(0);
    #endif
`;

var startVS = `
void main(void) {
    gl_Position = getPosition();
`;

var startNineSlicedPS = `
    nineSlicedUv = vUv0;
    nineSlicedUv.y = 1.0 - nineSlicedUv.y;

`;

var startNineSlicedTiledPS = `
    vec2 tileMask = step(vMask, vec2(0.99999));
    vec2 tileSize = 0.5 * (innerOffset.xy + innerOffset.zw);
    vec2 tileScale = vec2(1.0) / (vec2(1.0) - tileSize);
    vec2 clampedUv = mix(innerOffset.xy * 0.5, vec2(1.0) - innerOffset.zw * 0.5, fract((vTiledUv - tileSize) * tileScale));
    clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;
    nineSlicedUv = vUv0 * tileMask + clampedUv * (vec2(1.0) - tileMask);
    nineSlicedUv.y = 1.0 - nineSlicedUv.y;
    
`;

var storeEVSMPS = `
float exponent = VSM_EXPONENT;

depth = 2.0 * depth - 1.0;
depth =  exp(exponent * depth);
gl_FragColor = vec4(depth, depth*depth, 1.0, 1.0);
`;

var tangentBinormalVS = `
vec3 getTangent() {
    return normalize(dNormalMatrix * vertex_tangent.xyz);
}

vec3 getBinormal() {
    return cross(vNormalW, vTangentW) * vertex_tangent.w;
}

vec3 getObjectSpaceUp() {
    return normalize(dNormalMatrix * vec3(0, 1, 0));
}
`;

var TBNPS = `
void getTBN() {
    dTBN = mat3(normalize(dTangentW), normalize(dBinormalW), normalize(dVertexNormalW));
}
`;

var TBNderivativePS = `
uniform float tbnBasis;

// http://www.thetenthplanet.de/archives/1180
void getTBN() {
    vec2 uv = $UV;

    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( vPositionW );
    vec3 dp2 = dFdy( vPositionW );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );

    // solve the linear system
    vec3 dp2perp = cross( dp2, dVertexNormalW );
    vec3 dp1perp = cross( dVertexNormalW, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

    // construct a scale-invariant frame
    float denom = max( dot(T,T), dot(B,B) );
    float invmax = (denom == 0.0) ? 0.0 : tbnBasis / sqrt( denom );
    dTBN = mat3(T * invmax, -B * invmax, dVertexNormalW );
}
`;

var TBNfastPS = `
void getTBN() {
    dTBN = mat3(dTangentW, dBinormalW, dVertexNormalW);
}
`;

var TBNObjectSpacePS = `
void getTBN() {

    vec3 B = cross(dVertexNormalW, vObjectSpaceUpW);
    vec3 T = cross(dVertexNormalW, B);

    if (dot(B,B)==0.0) // deal with case when vObjectSpaceUpW dVertexNormalW are parallel
    {
        float major=max(max(dVertexNormalW.x, dVertexNormalW.y),dVertexNormalW.z);

        if (dVertexNormalW.x==major)
        {
            B=cross(dVertexNormalW, vec3(0,1,0));
            T=cross(dVertexNormalW, B);
        }
        else if (dVertexNormalW.y==major)
        {
            B=cross(dVertexNormalW, vec3(0,0,1));
            T=cross(dVertexNormalW, B);
        }
        else if (dVertexNormalW.z==major)
        {
            B=cross(dVertexNormalW, vec3(1,0,0));
            T=cross(dVertexNormalW, B);
        }
    }

    dTBN = mat3(normalize(T), normalize(B), normalize(dVertexNormalW));
}
`;

var textureSamplePS = `
vec4 texture2DSRGB(sampler2D tex, vec2 uv) {
    return gammaCorrectInput(texture2D(tex, uv));
}

vec4 texture2DSRGB(sampler2D tex, vec2 uv, float bias) {
    return gammaCorrectInput(texture2D(tex, uv, bias));
}

vec3 texture2DRGBM(sampler2D tex, vec2 uv) {
    return decodeRGBM(texture2D(tex, uv));
}

vec3 texture2DRGBM(sampler2D tex, vec2 uv, float bias) {
    return decodeRGBM(texture2D(tex, uv, bias));
}

vec3 texture2DRGBE(sampler2D tex, vec2 uv) {
    return decodeRGBM(texture2D(tex, uv));
}

vec3 texture2DRGBE(sampler2D tex, vec2 uv, float bias) {
    return decodeRGBM(texture2D(tex, uv, bias));
}
`;

var thicknessPS = `
#ifdef MAPFLOAT
uniform float material_thickness;
#endif

void getThickness() {
    dThickness = 1.0;

    #ifdef MAPFLOAT
    dThickness *= material_thickness;
    #endif

    #ifdef MAPTEXTURE
    dThickness *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
    #endif

    #ifdef MAPVERTEX
    dThickness *= saturate(vVertexColor.$VC);
    #endif
}
`;

var tonemappingAcesPS = `
uniform float exposure;

vec3 toneMap(vec3 color) {
    float tA = 2.51;
    float tB = 0.03;
    float tC = 2.43;
    float tD = 0.59;
    float tE = 0.14;
    vec3 x = color * exposure;
    return (x*(tA*x+tB))/(x*(tC*x+tD)+tE);
}
`;

var tonemappingAces2PS = `
uniform float exposure;

// ACES approximation by Stephen Hill

// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
const mat3 ACESInputMat = mat3(
    0.59719, 0.35458, 0.04823,
    0.07600, 0.90834, 0.01566,
    0.02840, 0.13383, 0.83777
);

// ODT_SAT => XYZ => D60_2_D65 => sRGB
const mat3 ACESOutputMat = mat3(
     1.60475, -0.53108, -0.07367,
    -0.10208,  1.10813, -0.00605,
    -0.00327, -0.07276,  1.07602
);

vec3 RRTAndODTFit(vec3 v) {
    vec3 a = v * (v + 0.0245786) - 0.000090537;
    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;
    return a / b;
}

vec3 toneMap(vec3 color) {
    color *= exposure;
    color = color * ACESInputMat;

    // Apply RRT and ODT
    color = RRTAndODTFit(color);
    color = color * ACESOutputMat;

    // Clamp to [0, 1]
    color = clamp(color, 0.0, 1.0);

    return color;
}
`;

var tonemappingFilmicPS = `
const float A =  0.15;
const float B =  0.50;
const float C =  0.10;
const float D =  0.20;
const float E =  0.02;
const float F =  0.30;
const float W =  11.2;

uniform float exposure;

vec3 uncharted2Tonemap(vec3 x) {
   return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 toneMap(vec3 color) {
    color = uncharted2Tonemap(color * exposure);
    vec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W,W,W));
    color = color * whiteScale;

    return color;
}
`;

var tonemappingHejlPS = `
uniform float exposure;

vec3 toneMap(vec3 color) {
    color *= exposure;
    const float  A = 0.22, B = 0.3, C = .1, D = 0.2, E = .01, F = 0.3;
    const float Scl = 1.25;

    vec3 h = max( vec3(0.0), color - vec3(0.004) );
    return (h*((Scl*A)*h+Scl*vec3(C*B,C*B,C*B))+Scl*vec3(D*E,D*E,D*E)) / (h*(A*h+vec3(B,B,B))+vec3(D*F,D*F,D*F)) - Scl*vec3(E/F,E/F,E/F);
}
`;

var tonemappingLinearPS = `
uniform float exposure;

vec3 toneMap(vec3 color) {
    return color * exposure;
}
`;

var tonemappingNonePS = `
vec3 toneMap(vec3 color) {
    return color;
}
`;

var transformVS = `
#ifdef PIXELSNAP
uniform vec4 uScreenSize;
#endif

#ifdef SCREENSPACE
uniform float projectionFlipY;
#endif

#ifdef MORPHING
uniform vec4 morph_weights_a;
uniform vec4 morph_weights_b;
#endif

#ifdef MORPHING_TEXTURE_BASED
uniform vec4 morph_tex_params;

vec2 getTextureMorphCoords() {
    float vertexId = morph_vertex_id;
    vec2 textureSize = morph_tex_params.xy;
    vec2 invTextureSize = morph_tex_params.zw;

    // turn vertexId into int grid coordinates
    float morphGridV = floor(vertexId * invTextureSize.x);
    float morphGridU = vertexId - (morphGridV * textureSize.x);

    // convert grid coordinates to uv coordinates with half pixel offset
    return (vec2(morphGridU, morphGridV) * invTextureSize) + (0.5 * invTextureSize);
}
#endif

#ifdef MORPHING_TEXTURE_BASED_POSITION
uniform highp sampler2D morphPositionTex;
#endif

mat4 getModelMatrix() {
    #ifdef DYNAMICBATCH
    return getBoneMatrix(vertex_boneIndices);
    #elif defined(SKIN)
    return matrix_model * getSkinMatrix(vertex_boneIndices, vertex_boneWeights);
    #elif defined(INSTANCING)
    return mat4(instance_line1, instance_line2, instance_line3, instance_line4);
    #else
    return matrix_model;
    #endif
}

vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec3 localPos = vertex_position;

    #ifdef NINESLICED
    // outer and inner vertices are at the same position, scale both
    localPos.xz *= outerScale;

    // offset inner vertices inside
    // (original vertices must be in [-1;1] range)
    vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));
    vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));
    localPos.xz += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;

    vTiledUv = (localPos.xz - outerScale + innerOffset.xy) * -0.5 + 1.0; // uv = local pos - inner corner

    localPos.xz *= -0.5; // move from -1;1 to -0.5;0.5
    localPos = localPos.xzy;
    #endif

    #ifdef MORPHING
    #ifdef MORPHING_POS03
    localPos.xyz += morph_weights_a[0] * morph_pos0;
    localPos.xyz += morph_weights_a[1] * morph_pos1;
    localPos.xyz += morph_weights_a[2] * morph_pos2;
    localPos.xyz += morph_weights_a[3] * morph_pos3;
    #endif // MORPHING_POS03
    #ifdef MORPHING_POS47
    localPos.xyz += morph_weights_b[0] * morph_pos4;
    localPos.xyz += morph_weights_b[1] * morph_pos5;
    localPos.xyz += morph_weights_b[2] * morph_pos6;
    localPos.xyz += morph_weights_b[3] * morph_pos7;
    #endif // MORPHING_POS47
    #endif // MORPHING

    #ifdef MORPHING_TEXTURE_BASED_POSITION
    // apply morph offset from texture
    vec2 morphUV = getTextureMorphCoords();
    vec3 morphPos = texture2D(morphPositionTex, morphUV).xyz;
    localPos += morphPos;
    #endif

    vec4 posW = dModelMatrix * vec4(localPos, 1.0);
    #ifdef SCREENSPACE
    posW.zw = vec2(0.0, 1.0);
    #endif
    dPositionW = posW.xyz;

    vec4 screenPos;
    #ifdef UV1LAYOUT
    screenPos = vec4(vertex_texCoord1.xy * 2.0 - 1.0, 0.5, 1);
    #else
    #ifdef SCREENSPACE
    screenPos = posW;
    screenPos.y *= projectionFlipY;
    #else
    screenPos = matrix_viewProjection * posW;
    #endif

    #ifdef PIXELSNAP
    // snap vertex to a pixel boundary
    screenPos.xy = (screenPos.xy * 0.5) + 0.5;
    screenPos.xy *= uScreenSize.xy;
    screenPos.xy = floor(screenPos.xy);
    screenPos.xy *= uScreenSize.zw;
    screenPos.xy = (screenPos.xy * 2.0) - 1.0;
    #endif
    #endif

    return screenPos;
}

vec3 getWorldPosition() {
    return dPositionW;
}
`;

var transformDeclVS = `
attribute vec3 vertex_position;

uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;

vec3 dPositionW;
mat4 dModelMatrix;
`;

var transmissionPS = `

#ifdef MAPFLOAT
uniform float material_refraction;
#endif

void getRefraction() {
    float refraction = 1.0;

    #ifdef MAPFLOAT
    refraction = material_refraction;
    #endif

    #ifdef MAPTEXTURE
    refraction *= gammaCorrectInput(texture2DBias($SAMPLER, $UV, textureBias)).$CH;
    #endif

    #ifdef MAPVERTEX
    refraction *= saturate(vVertexColor.$VC);
    #endif

    dTransmission = refraction;
}
`;

var uv0VS = `
#ifdef NINESLICED
vec2 getUv0() {
    vec2 uv = vertex_position.xz;

    // offset inner vertices inside
    // (original vertices must be in [-1;1] range)
    vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));
    vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));
    uv += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;

    uv = uv * -0.5 + 0.5;
    uv = uv * atlasRect.zw + atlasRect.xy;

    vMask = vertex_texCoord0.xy;

    return uv;
}
#else
vec2 getUv0() {
    return vertex_texCoord0;
}
#endif
`;

var uv1VS = `
vec2 getUv1() {
    return vertex_texCoord1;
}
`;

var viewDirPS = `
void getViewDir() {
    dViewDirW = normalize(view_position - vPositionW);
}
`;

var viewNormalVS = `
#ifndef VIEWMATRIX
#define VIEWMATRIX
uniform mat4 matrix_view;
#endif

vec3 getViewNormal() {
    return mat3(matrix_view) * vNormalW;
}
`;

var webgpuPS = `

layout(location = 0) out highp vec4 pc_fragColor;
#define gl_FragColor pc_fragColor

#define texture2D(res, uv) texture(sampler2D(res, res ## _sampler), uv)
#define texture2DBias(res, uv, bias) texture(sampler2D(res, res ## _sampler), uv, bias)
#define texture2DLodEXT(res, uv, lod) textureLod(sampler2D(res, res ## _sampler), uv, lod)

// TODO: implement other texture sampling macros
// #define textureCube texture
// #define texture2DProj textureProj
// #define texture2DProjLodEXT textureProjLod
// #define textureCubeLodEXT textureLod
// #define texture2DGradEXT textureGrad
// #define texture2DProjGradEXT textureProjGrad
// #define textureCubeGradEXT textureGrad
#define GL2
#define SUPPORTS_TEXLOD
`;

var webgpuVS = `
#define texture2D(res, uv) texture(sampler2D(res, res ## _sampler), uv)

#define GL2
#define VERTEXSHADER
`;

const shaderChunks = {
  alphaTestPS,
  ambientConstantPS,
  ambientEnvPS,
  ambientSHPS,
  aoPS,
  aoDiffuseOccPS,
  aoSpecOccPS,
  aoSpecOccConstPS,
  aoSpecOccConstSimplePS,
  aoSpecOccSimplePS,
  basePS,
  baseVS,
  baseNineSlicedPS,
  baseNineSlicedVS,
  baseNineSlicedTiledPS,
  biasConstPS,
  blurVSMPS,
  clearCoatPS,
  clearCoatGlossPS,
  clearCoatNormalPS,
  clusteredLightCookiesPS,
  clusteredLightShadowsPS,
  clusteredLightUtilsPS,
  clusteredLightPS,
  combinePS,
  cookiePS,
  cubeMapProjectBoxPS,
  cubeMapProjectNonePS,
  cubeMapRotatePS,
  detailModesPS,
  diffusePS,
  diffuseDetailMapPS,
  decodePS,
  emissivePS,
  encodePS,
  endPS,
  endVS,
  envAtlasPS,
  envConstPS,
  envMultiplyPS,
  extensionPS,
  extensionVS,
  falloffInvSquaredPS,
  falloffLinearPS,
  fixCubemapSeamsNonePS,
  fixCubemapSeamsStretchPS,
  floatUnpackingPS,
  fogExpPS,
  fogExp2PS,
  fogLinearPS,
  fogNonePS,
  fresnelSchlickPS,
  fullscreenQuadPS,
  fullscreenQuadVS,
  gamma1_0PS,
  gamma2_2PS,
  gles2PS,
  gles3PS,
  gles3VS,
  glossPS,
  iridescenceDiffractionPS,
  iridescencePS,
  iridescenceThicknessPS,
  instancingVS,
  lightDiffuseLambertPS,
  lightDirPointPS,
  lightmapAddPS,
  lightmapDirAddPS,
  lightmapDirPS,
  lightmapSinglePS,
  lightSpecularAnisoGGXPS,
  lightSpecularBlinnPS,
  lightSpecularPhongPS,
  lightSheenPS,
  ltc,
  metalnessPS,
  metalnessModulatePS,
  msdfPS,
  msdfVS,
  normalVS,
  normalDetailMapPS,
  normalInstancedVS,
  normalMapPS,
  normalSkinnedVS,
  normalXYPS,
  normalXYZPS,
  opacityPS,
  outputAlphaPS,
  outputAlphaOpaquePS,
  outputAlphaPremulPS,
  outputTex2DPS,
  packDepthPS,
  sheenPS,
  sheenGlossPS,
  parallaxPS,
  particlePS,
  particleVS,
  particleAnimFrameClampVS,
  particleAnimFrameLoopVS,
  particleAnimTexVS,
  particleInputFloatPS,
  particleInputRgba8PS,
  particleOutputFloatPS,
  particleOutputRgba8PS,
  particleUpdaterAABBPS,
  particleUpdaterEndPS,
  particleUpdaterInitPS,
  particleUpdaterNoRespawnPS,
  particleUpdaterOnStopPS,
  particleUpdaterRespawnPS,
  particleUpdaterSpherePS,
  particleUpdaterStartPS,
  particle_billboardVS,
  particle_blendAddPS,
  particle_blendMultiplyPS,
  particle_blendNormalPS,
  particle_cpuVS,
  particle_cpu_endVS,
  particle_customFaceVS,
  particle_endPS,
  particle_endVS,
  particle_halflambertPS,
  particle_initVS,
  particle_lambertPS,
  particle_lightingPS,
  particle_localShiftVS,
  particle_meshVS,
  particle_normalVS,
  particle_normalMapPS,
  particle_pointAlongVS,
  particle_softPS,
  particle_softVS,
  particle_stretchVS,
  particle_TBNVS,
  particle_wrapVS,
  precisionTestPS,
  precisionTest2PS,
  reflDirPS,
  reflDirAnisoPS,
  reflectionCCPS,
  reflectionCubePS,
  reflectionEnvHQPS,
  reflectionEnvPS,
  reflectionSpherePS,
  reflectionSphereLowPS,
  reflectionSheenPS,
  refractionCubePS,
  refractionDynamicPS,
  reprojectPS,
  screenDepthPS,
  shadowCascadesPS,
  shadowCommonPS,
  shadowCoordPS,
  shadowCoordPerspZbufferPS,
  shadowEVSMPS,
  shadowEVSMnPS,
  shadowStandardPS,
  shadowStandardGL2PS,
  shadowVSM8PS,
  shadowVSM_commonPS,
  skinBatchConstVS,
  skinBatchTexVS,
  skinConstVS,
  skinTexVS,
  skyboxEnvPS,
  skyboxHDRPS,
  skyboxVS,
  specularPS,
  sphericalPS,
  specularityFactorPS,
  spotPS,
  startPS,
  startVS,
  startNineSlicedPS,
  startNineSlicedTiledPS,
  storeEVSMPS,
  tangentBinormalVS,
  TBNPS,
  TBNderivativePS,
  TBNfastPS,
  TBNObjectSpacePS,
  textureSamplePS,
  thicknessPS,
  tonemappingAcesPS,
  tonemappingAces2PS,
  tonemappingFilmicPS,
  tonemappingHejlPS,
  tonemappingLinearPS,
  tonemappingNonePS,
  transformVS,
  transformDeclVS,
  transmissionPS,
  uv0VS,
  uv1VS,
  viewDirPS,
  viewNormalVS,
  webgpuPS,
  webgpuVS
};

class ShaderPass {
  static getType(shaderPass) {
    switch (shaderPass) {
      case SHADER_FORWARD:
      case SHADER_FORWARDHDR:
        return SHADERTYPE_FORWARD;

      case SHADER_DEPTH:
        return SHADERTYPE_DEPTH;

      case SHADER_PICK:
        return SHADERTYPE_PICK;

      default:
        return shaderPass >= SHADER_SHADOW && shaderPass < SHADER_SHADOW + SHADOW_COUNT * LIGHTTYPE_COUNT ? SHADERTYPE_SHADOW : SHADERTYPE_FORWARD;
    }
  }

  static isForward(pass) {
    return this.getType(pass) === SHADERTYPE_FORWARD;
  }

  static isShadow(pass) {
    return this.getType(pass) === SHADERTYPE_SHADOW;
  }

  static toLightType(pass) {
    const shadowMode = pass - SHADER_SHADOW;
    return Math.floor(shadowMode / SHADOW_COUNT);
  }

  static toShadowType(pass) {
    const shadowMode = pass - SHADER_SHADOW;
    const lightType = Math.floor(shadowMode / SHADOW_COUNT);
    return shadowMode - lightType * SHADOW_COUNT;
  }

  static getShadow(lightType, shadowType) {
    const shadowMode = shadowType + lightType * SHADOW_COUNT;
    const pass = SHADER_SHADOW + shadowMode;
    return pass;
  }

  static getPassShaderDefine(pass) {
    if (pass === SHADER_PICK) {
      return '#define PICK_PASS\n';
    } else if (pass === SHADER_DEPTH) {
      return '#define DEPTH_PASS\n';
    } else if (ShaderPass.isShadow(pass)) {
      return '#define SHADOW_PASS\n';
    }

    return '';
  }

}

function gammaCode(value, chunks) {
  if (!chunks) chunks = shaderChunks;

  if (value === GAMMA_SRGB || value === GAMMA_SRGBFAST) {
    return chunks.gamma2_2PS ? chunks.gamma2_2PS : shaderChunks.gamma2_2PS;
  } else if (value === GAMMA_SRGBHDR) {
    return "#define HDR\n" + (chunks.gamma2_2PS ? chunks.gamma2_2PS : shaderChunks.gamma2_2PS);
  }

  return chunks.gamma1_0PS ? chunks.gamma1_0PS : shaderChunks.gamma1_0PS;
}

function tonemapCode(value, chunks) {
  if (!chunks) chunks = shaderChunks;

  if (value === TONEMAP_FILMIC) {
    return chunks.tonemappingFilmicPS ? chunks.tonemappingFilmicPS : shaderChunks.tonemappingFilmicPS;
  } else if (value === TONEMAP_LINEAR) {
    return chunks.tonemappingLinearPS ? chunks.tonemappingLinearPS : shaderChunks.tonemappingLinearPS;
  } else if (value === TONEMAP_HEJL) {
    return chunks.tonemappingHejlPS ? chunks.tonemappingHejlPS : shaderChunks.tonemappingHejlPS;
  } else if (value === TONEMAP_ACES) {
    return chunks.tonemappingAcesPS ? chunks.tonemappingAcesPS : shaderChunks.tonemappingAcesPS;
  } else if (value === TONEMAP_ACES2) {
    return chunks.tonemappingAces2PS ? chunks.tonemappingAces2PS : shaderChunks.tonemappingAces2PS;
  }

  return chunks.tonemapingNonePS ? chunks.tonemapingNonePS : shaderChunks.tonemappingNonePS;
}

function fogCode(value, chunks) {
  if (!chunks) chunks = shaderChunks;

  if (value === 'linear') {
    return chunks.fogLinearPS ? chunks.fogLinearPS : shaderChunks.fogLinearPS;
  } else if (value === 'exp') {
    return chunks.fogExpPS ? chunks.fogExpPS : shaderChunks.fogExpPS;
  } else if (value === 'exp2') {
    return chunks.fogExp2PS ? chunks.fogExp2PS : shaderChunks.fogExp2PS;
  }

  return chunks.fogNonePS ? chunks.fogNonePS : shaderChunks.fogNonePS;
}

function skinCode(device, chunks) {
  if (!chunks) chunks = shaderChunks;

  if (device.supportsBoneTextures) {
    return chunks.skinTexVS;
  }

  return "#define BONE_LIMIT " + device.getBoneLimit() + "\n" + chunks.skinConstVS;
}

function precisionCode(device, forcePrecision, shadowPrecision) {
  let code = '';

  if (device.deviceType === DEVICETYPE_WEBGL) {
    if (forcePrecision && forcePrecision !== 'highp' && forcePrecision !== 'mediump' && forcePrecision !== 'lowp') {
      forcePrecision = null;
    }

    if (forcePrecision) {
      if (forcePrecision === 'highp' && device.maxPrecision !== 'highp') {
        forcePrecision = 'mediump';
      }

      if (forcePrecision === 'mediump' && device.maxPrecision === 'lowp') {
        forcePrecision = 'lowp';
      }
    }

    const precision = forcePrecision ? forcePrecision : device.precision;
    code = `precision ${precision} float;\n`;

    if (shadowPrecision && device.webgl2) {
      code += `precision ${precision} sampler2DShadow;\n`;
    }
  }

  return code;
}

function versionCode(device) {
  if (device.deviceType === DEVICETYPE_WEBGPU) {
    return '#version 450\n';
  }

  return device.webgl2 ? "#version 300 es\n" : "";
}

function getShaderNameCode(name) {
  return `#define SHADER_NAME ${name}\n`;
}

function vertexIntro(device, name, pass, extensionCode) {
  let code = versionCode(device);

  if (device.deviceType === DEVICETYPE_WEBGPU) {
    code += shaderChunks.webgpuVS;
  } else {
    if (extensionCode) {
      code += extensionCode + "\n";
    }

    if (device.webgl2) {
      code += shaderChunks.gles3VS;
    }
  }

  code += getShaderNameCode(name);
  code += ShaderPass.getPassShaderDefine(pass);
  return code;
}

function fragmentIntro(device, name, pass, extensionCode, forcePrecision) {
  let code = versionCode(device);

  if (device.deviceType === DEVICETYPE_WEBGPU) {
    code += shaderChunks.webgpuPS;
  } else {
    if (extensionCode) {
      code += extensionCode + "\n";
    }

    if (device.webgl2) {
      code += shaderChunks.gles3PS;
    } else {
      if (device.extStandardDerivatives) {
        code += "#extension GL_OES_standard_derivatives : enable\n";
      }

      if (device.extTextureLod) {
        code += "#extension GL_EXT_shader_texture_lod : enable\n";
        code += "#define SUPPORTS_TEXLOD\n";
      }

      code += shaderChunks.gles2PS;
    }
  }

  code += precisionCode(device, forcePrecision, true);
  code += getShaderNameCode(name);
  code += ShaderPass.getPassShaderDefine(pass);
  return code;
}

function dummyFragmentCode() {
  return "void main(void) {gl_FragColor = vec4(0.0);}";
}

function begin() {
  return 'void main(void)\n{\n';
}

function end() {
  return '}\n';
}

const attrib2Semantic = {
  vertex_position: SEMANTIC_POSITION,
  vertex_normal: SEMANTIC_NORMAL,
  vertex_tangent: SEMANTIC_TANGENT,
  vertex_texCoord0: SEMANTIC_TEXCOORD0,
  vertex_texCoord1: SEMANTIC_TEXCOORD1,
  vertex_texCoord2: SEMANTIC_TEXCOORD2,
  vertex_texCoord3: SEMANTIC_TEXCOORD3,
  vertex_texCoord4: SEMANTIC_TEXCOORD4,
  vertex_texCoord5: SEMANTIC_TEXCOORD5,
  vertex_texCoord6: SEMANTIC_TEXCOORD6,
  vertex_texCoord7: SEMANTIC_TEXCOORD7,
  vertex_color: SEMANTIC_COLOR,
  vertex_boneIndices: SEMANTIC_BLENDINDICES,
  vertex_boneWeights: SEMANTIC_BLENDWEIGHT
};

function collectAttribs(vsCode) {
  const attribs = {};
  let attrs = 0;
  let found = vsCode.indexOf("attribute");

  while (found >= 0) {
    if (found > 0 && vsCode[found - 1] === "/") break;
    const endOfLine = vsCode.indexOf(';', found);
    const startOfAttribName = vsCode.lastIndexOf(' ', endOfLine);
    const attribName = vsCode.substring(startOfAttribName + 1, endOfLine);
    const semantic = attrib2Semantic[attribName];

    if (semantic !== undefined) {
      attribs[attribName] = semantic;
    } else {
      attribs[attribName] = "ATTR" + attrs;
      attrs++;
    }

    found = vsCode.indexOf("attribute", found + 1);
  }

  return attribs;
}

function createShader(device, vsName, psName, useTransformFeedback = false) {
  let vsCode = shaderChunks[vsName];
  let psCode = precisionCode(device) + "\n" + shaderChunks[psName];
  const attribs = collectAttribs(vsCode);

  if (device.deviceType === DEVICETYPE_WEBGPU) {
    vsCode = versionCode(device) + shaderChunks.webgpuVS + vsCode;
    psCode = versionCode(device) + shaderChunks.webgpuPS + psCode;
  } else if (device.webgl2) {
    vsCode = versionCode(device) + shaderChunks.gles3VS + vsCode;
    psCode = versionCode(device) + shaderChunks.gles3PS + psCode;
  }

  return new Shader(device, {
    attributes: attribs,
    vshader: vsCode,
    fshader: psCode,
    useTransformFeedback: useTransformFeedback,
    name: `${vsName}_${psName}`
  });
}

function createShaderFromCode(device, vsCode, psCode, uName, useTransformFeedback = false, psPreamble = "") {
  const shaderCache = device.programLib._cache;
  const cached = shaderCache[uName];
  if (cached !== undefined) return cached;
  psCode = precisionCode(device) + "\n" + (psCode || dummyFragmentCode());
  const attribs = collectAttribs(vsCode);

  if (device.deviceType === DEVICETYPE_WEBGPU) {
    vsCode = versionCode(device) + shaderChunks.webgpuVS + vsCode;
    psCode = versionCode(device) + shaderChunks.webgpuPS + psCode;
  } else if (device.webgl2) {
    vsCode = versionCode(device) + shaderChunks.gles3VS + vsCode;
    psCode = versionCode(device) + shaderChunks.gles3PS + psCode;
  }

  shaderCache[uName] = new Shader(device, {
    name: uName,
    attributes: attribs,
    vshader: vsCode,
    fshader: psPreamble + psCode,
    useTransformFeedback: useTransformFeedback
  });
  return shaderCache[uName];
}

shaderChunks.collectAttribs = collectAttribs;
shaderChunks.createShader = createShader;
shaderChunks.createShaderFromCode = createShaderFromCode;

class Version {
  constructor() {
    this.globalId = 0;
    this.revision = 0;
  }

  equals(other) {
    return this.globalId === other.globalId && this.revision === other.revision;
  }

  copy(other) {
    this.globalId = other.globalId;
    this.revision = other.revision;
  }

  reset() {
    this.globalId = 0;
    this.revision = 0;
  }

}

let idCounter = 0;

class VersionedObject {
  constructor() {
    idCounter++;
    this.version = new Version();
    this.version.globalId = idCounter;
  }

  increment() {
    this.version.revision++;
  }

}

class ScopeId {
  constructor(name) {
    this.name = name;
    this.value = null;
    this.versionObject = new VersionedObject();
  }

  toJSON(key) {
    return undefined;
  }

  setValue(value) {
    this.value = value;
    this.versionObject.increment();
  }

  getValue() {
    return this.value;
  }

}

class ScopeSpace {
  constructor(name) {
    this.name = name;
    this.variables = new Map();
  }

  resolve(name) {
    if (!this.variables.has(name)) {
      this.variables.set(name, new ScopeId(name));
    }

    return this.variables.get(name);
  }

  removeValue(value) {
    for (const uniformName in this.variables) {
      const uniform = this.variables[uniformName];

      if (uniform.value === value) {
        uniform.value = null;
      }
    }
  }

}

const decodeTable = {
  'linear': 'decodeLinear',
  'srgb': 'decodeGamma',
  'rgbm': 'decodeRGBM',
  'rgbe': 'decodeRGBE',
  'rgbp': 'decodeRGBP'
};
const encodeTable = {
  'linear': 'encodeLinear',
  'srgb': 'encodeGamma',
  'rgbm': 'encodeRGBM',
  'rgbe': 'encodeRGBE',
  'rgbp': 'encodeRGBP'
};

class ChunkUtils {
  static decodeFunc(encoding) {
    return decodeTable[encoding] || 'decodeGamma';
  }

  static encodeFunc(encoding) {
    return encodeTable[encoding] || 'encodeGamma';
  }

}

const oneDiv255 = 1 / 255;
const floatView = new Float32Array(1);
const int32View = new Int32Array(floatView.buffer);

class FloatPacking {
  static float2Half(value) {
    floatView[0] = value;
    const x = int32View[0];
    let bits = x >> 16 & 0x8000;
    let m = x >> 12 & 0x07ff;
    const e = x >> 23 & 0xff;

    if (e < 103) {
      return bits;
    }

    if (e > 142) {
      bits |= 0x7c00;
      bits |= (e === 255 ? 0 : 1) && x & 0x007fffff;
      return bits;
    }

    if (e < 113) {
      m |= 0x0800;
      bits |= (m >> 114 - e) + (m >> 113 - e & 1);
      return bits;
    }

    bits |= e - 112 << 10 | m >> 1;
    bits += m & 1;
    return bits;
  }

  static float2Bytes(value, array, offset, numBytes) {
    const enc1 = 255.0 * value % 1;
    array[offset + 0] = Math.round((value % 1 - oneDiv255 * enc1) * 255);

    if (numBytes > 1) {
      const enc2 = 65025.0 * value % 1;
      array[offset + 1] = Math.round((enc1 - oneDiv255 * enc2) * 255);

      if (numBytes > 2) {
        const enc3 = 16581375.0 * value % 1;
        array[offset + 2] = Math.round((enc2 - oneDiv255 * enc3) * 255);

        if (numBytes > 3) {
          array[offset + 3] = Math.round(enc3 * 255);
        }
      }
    }
  }

  static float2BytesRange(value, array, offset, min, max, numBytes) {
    value = math$1.clamp((value - min) / (max - min), 0, 1);
    FloatPacking.float2Bytes(value, array, offset, numBytes);
  }

  static float2MantissaExponent(value, array, offset, numBytes) {
    const exponent = Math.floor(Math.log2(Math.abs(value))) + 1;
    value /= Math.pow(2, exponent);
    FloatPacking.float2BytesRange(value, array, offset, -1, 1, numBytes - 1);
    array[offset + numBytes - 1] = Math.round(exponent + 127);
  }

}

let _pixelSizeTable = null;
let _blockSizeTable = null;
let id$5 = 0;

class Texture {
  constructor(graphicsDevice, options) {
    this.id = id$5++;
    this.device = graphicsDevice;
    this.name = null;
    this._width = 4;
    this._height = 4;
    this._depth = 1;
    this._format = PIXELFORMAT_R8_G8_B8_A8;
    this.type = TEXTURETYPE_DEFAULT;
    this.projection = TEXTUREPROJECTION_NONE;
    this._cubemap = false;
    this._volume = false;
    this.fixCubemapSeams = false;
    this._flipY = false;
    this._premultiplyAlpha = false;
    this._isRenderTarget = false;
    this._mipmaps = true;
    this._minFilter = FILTER_LINEAR_MIPMAP_LINEAR;
    this._magFilter = FILTER_LINEAR;
    this._anisotropy = 1;
    this._addressU = ADDRESS_REPEAT;
    this._addressV = ADDRESS_REPEAT;
    this._addressW = ADDRESS_REPEAT;
    this._compareOnRead = false;
    this._compareFunc = FUNC_LESS;

    if (options !== undefined) {
      if (options.name !== undefined) {
        this.name = options.name;
      }

      this._width = options.width !== undefined ? options.width : this._width;
      this._height = options.height !== undefined ? options.height : this._height;
      this._format = options.format !== undefined ? options.format : this._format;

      if (options.hasOwnProperty('type')) {
        this.type = options.type;
      } else if (options.hasOwnProperty('rgbm')) {
        this.type = options.rgbm ? TEXTURETYPE_RGBM : TEXTURETYPE_DEFAULT;
      } else if (options.hasOwnProperty('swizzleGGGR')) {
        this.type = options.swizzleGGGR ? TEXTURETYPE_SWIZZLEGGGR : TEXTURETYPE_DEFAULT;
      }

      if (options.mipmaps !== undefined) {
        this._mipmaps = options.mipmaps;
      } else {
        this._mipmaps = options.autoMipmap !== undefined ? options.autoMipmap : this._mipmaps;
      }

      this._levels = options.levels;
      this._cubemap = options.cubemap !== undefined ? options.cubemap : this._cubemap;
      this.fixCubemapSeams = options.fixCubemapSeams !== undefined ? options.fixCubemapSeams : this.fixCubemapSeams;

      if (this._cubemap) {
        this.projection = TEXTUREPROJECTION_CUBE;
      } else if (options.projection && options.projection !== TEXTUREPROJECTION_CUBE) {
        this.projection = options.projection;
      }

      this._minFilter = options.minFilter !== undefined ? options.minFilter : this._minFilter;
      this._magFilter = options.magFilter !== undefined ? options.magFilter : this._magFilter;
      this._anisotropy = options.anisotropy !== undefined ? options.anisotropy : this._anisotropy;
      this._addressU = options.addressU !== undefined ? options.addressU : this._addressU;
      this._addressV = options.addressV !== undefined ? options.addressV : this._addressV;
      this._compareOnRead = options.compareOnRead !== undefined ? options.compareOnRead : this._compareOnRead;
      this._compareFunc = options._compareFunc !== undefined ? options._compareFunc : this._compareFunc;
      this._flipY = options.flipY !== undefined ? options.flipY : this._flipY;
      this._premultiplyAlpha = options.premultiplyAlpha !== undefined ? options.premultiplyAlpha : this._premultiplyAlpha;

      if (graphicsDevice.webgl2) {
        this._depth = options.depth !== undefined ? options.depth : this._depth;
        this._volume = options.volume !== undefined ? options.volume : this._volume;
        this._addressW = options.addressW !== undefined ? options.addressW : this._addressW;
      }
    }

    this._compressed = this._format === PIXELFORMAT_DXT1 || this._format === PIXELFORMAT_DXT3 || this._format === PIXELFORMAT_DXT5 || this._format >= PIXELFORMAT_ETC1;
    this._invalid = false;
    this._lockedLevel = -1;

    if (!this._levels) {
      this._levels = this._cubemap ? [[null, null, null, null, null, null]] : [null];
    }

    this.dirtyAll();
    this._gpuSize = 0;
    this.impl = graphicsDevice.createTextureImpl(this);
    graphicsDevice.textures.push(this);
  }

  destroy() {
    if (this.device) {
      const device = this.device;
      const idx = device.textures.indexOf(this);

      if (idx !== -1) {
        device.textures.splice(idx, 1);
      }

      device.scope.removeValue(this);
      this.impl.destroy(device);
      this.adjustVramSizeTracking(device._vram, -this._gpuSize);
      this._levels = null;
      this.device = null;
    }
  }

  loseContext() {
    this.impl.loseContext();
    this.dirtyAll();
  }

  adjustVramSizeTracking(vram, size) {
    vram.tex += size;
  }

  set minFilter(v) {
    if (this._minFilter !== v) {
      this._minFilter = v;
      this._parameterFlags |= 1;
    }
  }

  get minFilter() {
    return this._minFilter;
  }

  set magFilter(v) {
    if (this._magFilter !== v) {
      this._magFilter = v;
      this._parameterFlags |= 2;
    }
  }

  get magFilter() {
    return this._magFilter;
  }

  set addressU(v) {
    if (this._addressU !== v) {
      this._addressU = v;
      this._parameterFlags |= 4;
    }
  }

  get addressU() {
    return this._addressU;
  }

  set addressV(v) {
    if (this._addressV !== v) {
      this._addressV = v;
      this._parameterFlags |= 8;
    }
  }

  get addressV() {
    return this._addressV;
  }

  set addressW(addressW) {
    if (!this.device.webgl2) return;

    if (!this._volume) {
      return;
    }

    if (addressW !== this._addressW) {
      this._addressW = addressW;
      this._parameterFlags |= 16;
    }
  }

  get addressW() {
    return this._addressW;
  }

  set compareOnRead(v) {
    if (this._compareOnRead !== v) {
      this._compareOnRead = v;
      this._parameterFlags |= 32;
    }
  }

  get compareOnRead() {
    return this._compareOnRead;
  }

  set compareFunc(v) {
    if (this._compareFunc !== v) {
      this._compareFunc = v;
      this._parameterFlags |= 64;
    }
  }

  get compareFunc() {
    return this._compareFunc;
  }

  set anisotropy(v) {
    if (this._anisotropy !== v) {
      this._anisotropy = v;
      this._parameterFlags |= 128;
    }
  }

  get anisotropy() {
    return this._anisotropy;
  }

  set autoMipmap(v) {
    this._mipmaps = v;
  }

  get autoMipmap() {
    return this._mipmaps;
  }

  set mipmaps(v) {
    if (this._mipmaps !== v) {
      this._mipmaps = v;
      if (v) this._needsMipmapsUpload = true;
    }
  }

  get mipmaps() {
    return this._mipmaps;
  }

  get width() {
    return this._width;
  }

  get height() {
    return this._height;
  }

  get depth() {
    return this._depth;
  }

  get format() {
    return this._format;
  }

  get cubemap() {
    return this._cubemap;
  }

  get gpuSize() {
    const mips = this.pot && this._mipmaps && !(this._compressed && this._levels.length === 1);
    return Texture.calcGpuSize(this._width, this._height, this._depth, this._format, mips, this._cubemap);
  }

  get volume() {
    return this._volume;
  }

  set flipY(flipY) {
    if (this._flipY !== flipY) {
      this._flipY = flipY;
      this._needsUpload = true;
    }
  }

  get flipY() {
    return this._flipY;
  }

  set premultiplyAlpha(premultiplyAlpha) {
    if (this._premultiplyAlpha !== premultiplyAlpha) {
      this._premultiplyAlpha = premultiplyAlpha;
      this._needsUpload = true;
    }
  }

  get premultiplyAlpha() {
    return this._premultiplyAlpha;
  }

  get pot() {
    return math$1.powerOfTwo(this._width) && math$1.powerOfTwo(this._height);
  }

  get encoding() {
    switch (this.type) {
      case TEXTURETYPE_RGBM:
        return 'rgbm';

      case TEXTURETYPE_RGBE:
        return 'rgbe';

      case TEXTURETYPE_RGBP:
        return 'rgbp';

      default:
        return this.format === PIXELFORMAT_RGB16F || this.format === PIXELFORMAT_RGB32F || this.format === PIXELFORMAT_RGBA16F || this.format === PIXELFORMAT_RGBA32F ? 'linear' : 'srgb';
    }
  }

  static calcGpuSize(width, height, depth, format, mipmaps, cubemap) {
    if (!_pixelSizeTable) {
      _pixelSizeTable = [];
      _pixelSizeTable[PIXELFORMAT_A8] = 1;
      _pixelSizeTable[PIXELFORMAT_L8] = 1;
      _pixelSizeTable[PIXELFORMAT_L8_A8] = 2;
      _pixelSizeTable[PIXELFORMAT_R5_G6_B5] = 2;
      _pixelSizeTable[PIXELFORMAT_R5_G5_B5_A1] = 2;
      _pixelSizeTable[PIXELFORMAT_R4_G4_B4_A4] = 2;
      _pixelSizeTable[PIXELFORMAT_R8_G8_B8] = 4;
      _pixelSizeTable[PIXELFORMAT_R8_G8_B8_A8] = 4;
      _pixelSizeTable[PIXELFORMAT_RGB16F] = 8;
      _pixelSizeTable[PIXELFORMAT_RGBA16F] = 8;
      _pixelSizeTable[PIXELFORMAT_RGB32F] = 16;
      _pixelSizeTable[PIXELFORMAT_RGBA32F] = 16;
      _pixelSizeTable[PIXELFORMAT_R32F] = 4;
      _pixelSizeTable[PIXELFORMAT_DEPTH] = 4;
      _pixelSizeTable[PIXELFORMAT_DEPTHSTENCIL] = 4;
      _pixelSizeTable[PIXELFORMAT_111110F] = 4;
      _pixelSizeTable[PIXELFORMAT_SRGB] = 4;
      _pixelSizeTable[PIXELFORMAT_SRGBA] = 4;
    }

    if (!_blockSizeTable) {
      _blockSizeTable = [];
      _blockSizeTable[PIXELFORMAT_ETC1] = 8;
      _blockSizeTable[PIXELFORMAT_ETC2_RGB] = 8;
      _blockSizeTable[PIXELFORMAT_PVRTC_2BPP_RGB_1] = 8;
      _blockSizeTable[PIXELFORMAT_PVRTC_2BPP_RGBA_1] = 8;
      _blockSizeTable[PIXELFORMAT_PVRTC_4BPP_RGB_1] = 8;
      _blockSizeTable[PIXELFORMAT_PVRTC_4BPP_RGBA_1] = 8;
      _blockSizeTable[PIXELFORMAT_DXT1] = 8;
      _blockSizeTable[PIXELFORMAT_ATC_RGB] = 8;
      _blockSizeTable[PIXELFORMAT_ETC2_RGBA] = 16;
      _blockSizeTable[PIXELFORMAT_DXT3] = 16;
      _blockSizeTable[PIXELFORMAT_DXT5] = 16;
      _blockSizeTable[PIXELFORMAT_ASTC_4x4] = 16;
      _blockSizeTable[PIXELFORMAT_ATC_RGBA] = 16;
    }

    const pixelSize = _pixelSizeTable.hasOwnProperty(format) ? _pixelSizeTable[format] : 0;
    const blockSize = _blockSizeTable.hasOwnProperty(format) ? _blockSizeTable[format] : 0;
    let result = 0;

    while (1) {
      if (pixelSize > 0) {
        result += width * height * depth * pixelSize;
      } else {
        let blockWidth = Math.floor((width + 3) / 4);
        const blockHeight = Math.floor((height + 3) / 4);
        const blockDepth = Math.floor((depth + 3) / 4);

        if (format === PIXELFORMAT_PVRTC_2BPP_RGB_1 || format === PIXELFORMAT_PVRTC_2BPP_RGBA_1) {
          blockWidth = Math.max(Math.floor(blockWidth / 2), 1);
        }

        result += blockWidth * blockHeight * blockDepth * blockSize;
      }

      if (!mipmaps || width === 1 && height === 1 && depth === 1) {
        break;
      }

      width = Math.max(Math.floor(width / 2), 1);
      height = Math.max(Math.floor(height / 2), 1);
      depth = Math.max(Math.floor(depth / 2), 1);
    }

    return result * (cubemap ? 6 : 1);
  }

  dirtyAll() {
    this._levelsUpdated = this._cubemap ? [[true, true, true, true, true, true]] : [true];
    this._needsUpload = true;
    this._needsMipmapsUpload = this._mipmaps;
    this._mipmapsUploaded = false;
    this._parameterFlags = 255;
  }

  lock(options = {}) {
    if (options.level === undefined) {
      options.level = 0;
    }

    if (options.face === undefined) {
      options.face = 0;
    }

    if (options.mode === undefined) {
      options.mode = TEXTURELOCK_WRITE;
    }

    this._lockedLevel = options.level;

    if (this._levels[options.level] === null) {
      switch (this._format) {
        case PIXELFORMAT_A8:
        case PIXELFORMAT_L8:
          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth);
          break;

        case PIXELFORMAT_L8_A8:
          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 2);
          break;

        case PIXELFORMAT_R5_G6_B5:
        case PIXELFORMAT_R5_G5_B5_A1:
        case PIXELFORMAT_R4_G4_B4_A4:
          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth);
          break;

        case PIXELFORMAT_R8_G8_B8:
          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 3);
          break;

        case PIXELFORMAT_R8_G8_B8_A8:
          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 4);
          break;

        case PIXELFORMAT_DXT1:
          this._levels[options.level] = new Uint8Array(Math.floor((this._width + 3) / 4) * Math.floor((this._height + 3) / 4) * 8 * this._depth);
          break;

        case PIXELFORMAT_DXT3:
        case PIXELFORMAT_DXT5:
          this._levels[options.level] = new Uint8Array(Math.floor((this._width + 3) / 4) * Math.floor((this._height + 3) / 4) * 16 * this._depth);
          break;

        case PIXELFORMAT_RGB16F:
          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth * 3);
          break;

        case PIXELFORMAT_RGB32F:
          this._levels[options.level] = new Float32Array(this._width * this._height * this._depth * 3);
          break;

        case PIXELFORMAT_RGBA16F:
          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth * 4);
          break;

        case PIXELFORMAT_RGBA32F:
          this._levels[options.level] = new Float32Array(this._width * this._height * this._depth * 4);
          break;
      }
    }

    return this._levels[options.level];
  }

  setSource(source, mipLevel = 0) {
    let invalid = false;
    let width, height;

    if (this._cubemap) {
      if (source[0]) {
        width = source[0].width || 0;
        height = source[0].height || 0;

        for (let i = 0; i < 6; i++) {
          const face = source[i];

          if (!face || face.width !== width || face.height !== height || !this.device._isBrowserInterface(face)) {
            invalid = true;
            break;
          }
        }
      } else {
        invalid = true;
      }

      if (!invalid) {
        for (let i = 0; i < 6; i++) {
          if (this._levels[mipLevel][i] !== source[i]) this._levelsUpdated[mipLevel][i] = true;
        }
      }
    } else {
      if (!this.device._isBrowserInterface(source)) invalid = true;

      if (!invalid) {
        if (source !== this._levels[mipLevel]) this._levelsUpdated[mipLevel] = true;
        width = source.width;
        height = source.height;
      }
    }

    if (invalid) {
      this._width = 4;
      this._height = 4;

      if (this._cubemap) {
        for (let i = 0; i < 6; i++) {
          this._levels[mipLevel][i] = null;
          this._levelsUpdated[mipLevel][i] = true;
        }
      } else {
        this._levels[mipLevel] = null;
        this._levelsUpdated[mipLevel] = true;
      }
    } else {
      if (mipLevel === 0) {
        this._width = width;
        this._height = height;
      }

      this._levels[mipLevel] = source;
    }

    if (this._invalid !== invalid || !invalid) {
      this._invalid = invalid;
      this.upload();
    }
  }

  getSource(mipLevel = 0) {
    return this._levels[mipLevel];
  }

  unlock() {
    if (this._lockedLevel === -1) ;

    this.upload();
    this._lockedLevel = -1;
  }

  upload() {
    this._needsUpload = true;
    this._needsMipmapsUpload = this._mipmaps;
  }

  getDds() {
    let fsize = 128;
    let idx = 0;

    while (this._levels[idx]) {
      if (!this.cubemap) {
        const mipSize = this._levels[idx].length;

        if (!mipSize) {
          return undefined;
        }

        fsize += mipSize;
      } else {
        for (let face = 0; face < 6; face++) {
          if (!this._levels[idx][face]) {
            return undefined;
          }

          const mipSize = this._levels[idx][face].length;

          if (!mipSize) {
            return undefined;
          }

          fsize += mipSize;
        }
      }

      fsize += this._levels[idx].length;
      idx++;
    }

    const buff = new ArrayBuffer(fsize);
    const header = new Uint32Array(buff, 0, 128 / 4);
    const DDS_MAGIC = 542327876;
    const DDS_HEADER_SIZE = 124;
    const DDS_FLAGS_REQUIRED = 0x01 | 0x02 | 0x04 | 0x1000 | 0x80000;
    const DDS_FLAGS_MIPMAP = 0x20000;
    const DDS_PIXELFORMAT_SIZE = 32;
    const DDS_PIXELFLAGS_RGBA8 = 0x01 | 0x40;
    const DDS_CAPS_REQUIRED = 0x1000;
    const DDS_CAPS_MIPMAP = 0x400000;
    const DDS_CAPS_COMPLEX = 0x8;
    const DDS_CAPS2_CUBEMAP = 0x200 | 0x400 | 0x800 | 0x1000 | 0x2000 | 0x4000 | 0x8000;
    let flags = DDS_FLAGS_REQUIRED;
    if (this._levels.length > 1) flags |= DDS_FLAGS_MIPMAP;
    let caps = DDS_CAPS_REQUIRED;
    if (this._levels.length > 1) caps |= DDS_CAPS_MIPMAP;
    if (this._levels.length > 1 || this.cubemap) caps |= DDS_CAPS_COMPLEX;
    const caps2 = this.cubemap ? DDS_CAPS2_CUBEMAP : 0;
    header[0] = DDS_MAGIC;
    header[1] = DDS_HEADER_SIZE;
    header[2] = flags;
    header[3] = this.height;
    header[4] = this.width;
    header[5] = this.width * this.height * 4;
    header[6] = 0;
    header[7] = this._levels.length;

    for (let i = 0; i < 11; i++) {
      header[8 + i] = 0;
    }

    header[19] = DDS_PIXELFORMAT_SIZE;
    header[20] = DDS_PIXELFLAGS_RGBA8;
    header[21] = 0;
    header[22] = 32;
    header[23] = 0x00FF0000;
    header[24] = 0x0000FF00;
    header[25] = 0x000000FF;
    header[26] = 0xFF000000;
    header[27] = caps;
    header[28] = caps2;
    header[29] = 0;
    header[30] = 0;
    header[31] = 0;
    let offset = 128;

    if (!this.cubemap) {
      for (let i = 0; i < this._levels.length; i++) {
        const level = this._levels[i];
        const mip = new Uint8Array(buff, offset, level.length);

        for (let j = 0; j < level.length; j++) {
          mip[j] = level[j];
        }

        offset += level.length;
      }
    } else {
      for (let face = 0; face < 6; face++) {
        for (let i = 0; i < this._levels.length; i++) {
          const level = this._levels[i][face];
          const mip = new Uint8Array(buff, offset, level.length);

          for (let j = 0; j < level.length; j++) {
            mip[j] = level[j];
          }

          offset += level.length;
        }
      }
    }

    return buff;
  }

}

const _deviceCoord = new Vec3();

const _halfSize = new Vec3();

const _point = new Vec3();

const _invViewProjMat = new Mat4();

class Camera {
  constructor() {
    this._aspectRatio = 16 / 9;
    this._aspectRatioMode = ASPECT_AUTO;
    this._calculateProjection = null;
    this._calculateTransform = null;
    this._clearColor = new Color(0.75, 0.75, 0.75, 1);
    this._clearColorBuffer = true;
    this._clearDepth = 1;
    this._clearDepthBuffer = true;
    this._clearStencil = 0;
    this._clearStencilBuffer = true;
    this._cullingMask = 0xFFFFFFFF;
    this._cullFaces = true;
    this._farClip = 1000;
    this._flipFaces = false;
    this._fov = 45;
    this._frustumCulling = true;
    this._horizontalFov = false;
    this._layers = [LAYERID_WORLD, LAYERID_DEPTH, LAYERID_SKYBOX, LAYERID_UI, LAYERID_IMMEDIATE];
    this._layersSet = new Set(this._layers);
    this._nearClip = 0.1;
    this._node = null;
    this._orthoHeight = 10;
    this._projection = PROJECTION_PERSPECTIVE;
    this._rect = new Vec4(0, 0, 1, 1);
    this._renderTarget = null;
    this._scissorRect = new Vec4(0, 0, 1, 1);
    this._scissorRectClear = false;
    this._aperture = 16.0;
    this._shutter = 1.0 / 1000.0;
    this._sensitivity = 1000;
    this._projMat = new Mat4();
    this._projMatDirty = true;
    this._projMatSkybox = new Mat4();
    this._viewMat = new Mat4();
    this._viewMatDirty = true;
    this._viewProjMat = new Mat4();
    this._viewProjMatDirty = true;
    this.frustum = new Frustum();
  }

  get fullSizeClearRect() {
    const rect = this._scissorRectClear ? this.scissorRect : this._rect;
    return rect.x === 0 && rect.y === 0 && rect.z === 1 && rect.w === 1;
  }

  set aspectRatio(newValue) {
    if (this._aspectRatio !== newValue) {
      this._aspectRatio = newValue;
      this._projMatDirty = true;
    }
  }

  get aspectRatio() {
    return this._aspectRatio;
  }

  set aspectRatioMode(newValue) {
    if (this._aspectRatioMode !== newValue) {
      this._aspectRatioMode = newValue;
      this._projMatDirty = true;
    }
  }

  get aspectRatioMode() {
    return this._aspectRatioMode;
  }

  set calculateProjection(newValue) {
    this._calculateProjection = newValue;
    this._projMatDirty = true;
  }

  get calculateProjection() {
    return this._calculateProjection;
  }

  set calculateTransform(newValue) {
    this._calculateTransform = newValue;
  }

  get calculateTransform() {
    return this._calculateTransform;
  }

  set clearColor(newValue) {
    this._clearColor.copy(newValue);
  }

  get clearColor() {
    return this._clearColor;
  }

  set clearColorBuffer(newValue) {
    this._clearColorBuffer = newValue;
  }

  get clearColorBuffer() {
    return this._clearColorBuffer;
  }

  set clearDepth(newValue) {
    this._clearDepth = newValue;
  }

  get clearDepth() {
    return this._clearDepth;
  }

  set clearDepthBuffer(newValue) {
    this._clearDepthBuffer = newValue;
  }

  get clearDepthBuffer() {
    return this._clearDepthBuffer;
  }

  set clearStencil(newValue) {
    this._clearStencil = newValue;
  }

  get clearStencil() {
    return this._clearStencil;
  }

  set clearStencilBuffer(newValue) {
    this._clearStencilBuffer = newValue;
  }

  get clearStencilBuffer() {
    return this._clearStencilBuffer;
  }

  set cullingMask(newValue) {
    this._cullingMask = newValue;
  }

  get cullingMask() {
    return this._cullingMask;
  }

  set cullFaces(newValue) {
    this._cullFaces = newValue;
  }

  get cullFaces() {
    return this._cullFaces;
  }

  set farClip(newValue) {
    if (this._farClip !== newValue) {
      this._farClip = newValue;
      this._projMatDirty = true;
    }
  }

  get farClip() {
    return this._farClip;
  }

  set flipFaces(newValue) {
    this._flipFaces = newValue;
  }

  get flipFaces() {
    return this._flipFaces;
  }

  set fov(newValue) {
    if (this._fov !== newValue) {
      this._fov = newValue;
      this._projMatDirty = true;
    }
  }

  get fov() {
    return this._fov;
  }

  set frustumCulling(newValue) {
    this._frustumCulling = newValue;
  }

  get frustumCulling() {
    return this._frustumCulling;
  }

  set horizontalFov(newValue) {
    if (this._horizontalFov !== newValue) {
      this._horizontalFov = newValue;
      this._projMatDirty = true;
    }
  }

  get horizontalFov() {
    return this._horizontalFov;
  }

  set layers(newValue) {
    this._layers = newValue.slice(0);
    this._layersSet = new Set(this._layers);
  }

  get layers() {
    return this._layers;
  }

  get layersSet() {
    return this._layersSet;
  }

  set nearClip(newValue) {
    if (this._nearClip !== newValue) {
      this._nearClip = newValue;
      this._projMatDirty = true;
    }
  }

  get nearClip() {
    return this._nearClip;
  }

  set node(newValue) {
    this._node = newValue;
  }

  get node() {
    return this._node;
  }

  set orthoHeight(newValue) {
    if (this._orthoHeight !== newValue) {
      this._orthoHeight = newValue;
      this._projMatDirty = true;
    }
  }

  get orthoHeight() {
    return this._orthoHeight;
  }

  set projection(newValue) {
    if (this._projection !== newValue) {
      this._projection = newValue;
      this._projMatDirty = true;
    }
  }

  get projection() {
    return this._projection;
  }

  get projectionMatrix() {
    this._evaluateProjectionMatrix();

    return this._projMat;
  }

  set rect(newValue) {
    this._rect.copy(newValue);
  }

  get rect() {
    return this._rect;
  }

  set renderTarget(newValue) {
    this._renderTarget = newValue;
  }

  get renderTarget() {
    return this._renderTarget;
  }

  set scissorRect(newValue) {
    this._scissorRect.copy(newValue);
  }

  get scissorRect() {
    return this._scissorRect;
  }

  get viewMatrix() {
    if (this._viewMatDirty) {
      const wtm = this._node.getWorldTransform();

      this._viewMat.copy(wtm).invert();

      this._viewMatDirty = false;
    }

    return this._viewMat;
  }

  set aperture(newValue) {
    this._aperture = newValue;
  }

  get aperture() {
    return this._aperture;
  }

  set sensitivity(newValue) {
    this._sensitivity = newValue;
  }

  get sensitivity() {
    return this._sensitivity;
  }

  set shutter(newValue) {
    this._shutter = newValue;
  }

  get shutter() {
    return this._shutter;
  }

  clone() {
    return new Camera().copy(this);
  }

  copy(other) {
    this.aspectRatio = other.aspectRatio;
    this.aspectRatioMode = other.aspectRatioMode;
    this.calculateProjection = other.calculateProjection;
    this.calculateTransform = other.calculateTransform;
    this.clearColor = other.clearColor;
    this.clearColorBuffer = other.clearColorBuffer;
    this.clearDepth = other.clearDepth;
    this.clearDepthBuffer = other.clearDepthBuffer;
    this.clearStencil = other.clearStencil;
    this.clearStencilBuffer = other.clearStencilBuffer;
    this.cullFaces = other.cullFaces;
    this.cullingMask = other.cullingMask;
    this.farClip = other.farClip;
    this.flipFaces = other.flipFaces;
    this.fov = other.fov;
    this.frustumCulling = other.frustumCulling;
    this.horizontalFov = other.horizontalFov;
    this.layers = other.layers;
    this.nearClip = other.nearClip;
    this.orthoHeight = other.orthoHeight;
    this.projection = other.projection;
    this.rect = other.rect;
    this.renderTarget = other.renderTarget;
    this.scissorRect = other.scissorRect;
    this.aperture = other.aperture;
    this.shutter = other.shutter;
    this.sensitivity = other.sensitivity;
    return this;
  }

  _updateViewProjMat() {
    if (this._projMatDirty || this._viewMatDirty || this._viewProjMatDirty) {
      this._viewProjMat.mul2(this.projectionMatrix, this.viewMatrix);

      this._viewProjMatDirty = false;
    }
  }

  worldToScreen(worldCoord, cw, ch, screenCoord = new Vec3()) {
    this._updateViewProjMat();

    this._viewProjMat.transformPoint(worldCoord, screenCoord);

    const vpm = this._viewProjMat.data;
    const w = worldCoord.x * vpm[3] + worldCoord.y * vpm[7] + worldCoord.z * vpm[11] + 1 * vpm[15];
    screenCoord.x = (screenCoord.x / w + 1) * 0.5 * cw;
    screenCoord.y = (1 - screenCoord.y / w) * 0.5 * ch;
    return screenCoord;
  }

  screenToWorld(x, y, z, cw, ch, worldCoord = new Vec3()) {
    const range = this._farClip - this._nearClip;

    _deviceCoord.set(x / cw, (ch - y) / ch, z / range);

    _deviceCoord.mulScalar(2);

    _deviceCoord.sub(Vec3.ONE);

    if (this._projection === PROJECTION_PERSPECTIVE) {
      Mat4._getPerspectiveHalfSize(_halfSize, this._fov, this._aspectRatio, this._nearClip, this._horizontalFov);

      _halfSize.x *= _deviceCoord.x;
      _halfSize.y *= _deviceCoord.y;

      const invView = this._node.getWorldTransform();

      _halfSize.z = -this._nearClip;
      invView.transformPoint(_halfSize, _point);

      const cameraPos = this._node.getPosition();

      worldCoord.sub2(_point, cameraPos);
      worldCoord.normalize();
      worldCoord.mulScalar(z);
      worldCoord.add(cameraPos);
    } else {
      this._updateViewProjMat();

      _invViewProjMat.copy(this._viewProjMat).invert();

      _invViewProjMat.transformPoint(_deviceCoord, worldCoord);
    }

    return worldCoord;
  }

  _evaluateProjectionMatrix() {
    if (this._projMatDirty) {
      if (this._projection === PROJECTION_PERSPECTIVE) {
        this._projMat.setPerspective(this._fov, this._aspectRatio, this._nearClip, this._farClip, this._horizontalFov);

        this._projMatSkybox.copy(this._projMat);
      } else {
        const y = this._orthoHeight;
        const x = y * this._aspectRatio;

        this._projMat.setOrtho(-x, x, -y, y, this._nearClip, this._farClip);

        this._projMatSkybox.setPerspective(this._fov, this._aspectRatio, this._nearClip, this._farClip);
      }

      this._projMatDirty = false;
    }
  }

  getProjectionMatrixSkybox() {
    this._evaluateProjectionMatrix();

    return this._projMatSkybox;
  }

  getExposure() {
    const ev100 = Math.log2(this._aperture * this._aperture / this._shutter * 100.0 / this._sensitivity);
    return 1.0 / (Math.pow(2.0, ev100) * 1.2);
  }

  getScreenSize(sphere) {
    if (this._projection === PROJECTION_PERSPECTIVE) {
      const distance = this._node.getPosition().distance(sphere.center);

      if (distance < sphere.radius) {
        return 1;
      }

      const viewAngle = Math.asin(sphere.radius / distance);
      const sphereViewHeight = Math.tan(viewAngle);
      const screenViewHeight = Math.tan(this._fov / 2 * math$1.DEG_TO_RAD);
      return Math.min(sphereViewHeight / screenViewHeight, 1);
    }

    return math$1.clamp(sphere.radius / this._orthoHeight, 0, 1);
  }

}

const scaleCompensatePosTransform = new Mat4();
const scaleCompensatePos = new Vec3();
const scaleCompensateRot = new Quat();
const scaleCompensateRot2 = new Quat();
const scaleCompensateScale = new Vec3();
const scaleCompensateScaleForParent = new Vec3();
const tmpMat4 = new Mat4();
const tmpQuat = new Quat();
const position$1 = new Vec3();
const invParentWtm$1 = new Mat4();
const rotation = new Quat();
const invParentRot = new Quat();
const matrix = new Mat4();
const target = new Vec3();
const up = new Vec3();

class GraphNode extends EventHandler {
  constructor(name = 'Untitled') {
    super();
    this.name = name;
    this.tags = new Tags(this);
    this._labels = {};
    this.localPosition = new Vec3();
    this.localRotation = new Quat();
    this.localScale = new Vec3(1, 1, 1);
    this.localEulerAngles = new Vec3();
    this.position = new Vec3();
    this.rotation = new Quat();
    this.eulerAngles = new Vec3();
    this._scale = null;
    this.localTransform = new Mat4();
    this._dirtyLocal = false;
    this._aabbVer = 0;
    this._frozen = false;
    this.worldTransform = new Mat4();
    this._dirtyWorld = false;
    this._normalMatrix = new Mat3();
    this._dirtyNormal = true;
    this._right = null;
    this._up = null;
    this._forward = null;
    this._parent = null;
    this._children = [];
    this._graphDepth = 0;
    this._enabled = true;
    this._enabledInHierarchy = false;
    this.scaleCompensation = false;
  }

  get right() {
    if (!this._right) {
      this._right = new Vec3();
    }

    return this.getWorldTransform().getX(this._right).normalize();
  }

  get up() {
    if (!this._up) {
      this._up = new Vec3();
    }

    return this.getWorldTransform().getY(this._up).normalize();
  }

  get forward() {
    if (!this._forward) {
      this._forward = new Vec3();
    }

    return this.getWorldTransform().getZ(this._forward).normalize().mulScalar(-1);
  }

  get normalMatrix() {
    const normalMat = this._normalMatrix;

    if (this._dirtyNormal) {
      this.getWorldTransform().invertTo3x3(normalMat);
      normalMat.transpose();
      this._dirtyNormal = false;
    }

    return normalMat;
  }

  set enabled(enabled) {
    if (this._enabled !== enabled) {
      var _this$_parent;

      this._enabled = enabled;

      if (enabled && (_this$_parent = this._parent) != null && _this$_parent.enabled || !enabled) {
        this._notifyHierarchyStateChanged(this, enabled);
      }
    }
  }

  get enabled() {
    return this._enabled && this._enabledInHierarchy;
  }

  get parent() {
    return this._parent;
  }

  get path() {
    let node = this._parent;

    if (!node) {
      return '';
    }

    let result = this.name;

    while (node && node._parent) {
      result = `${node.name}/${result}`;
      node = node._parent;
    }

    return result;
  }

  get root() {
    let result = this;

    while (result._parent) {
      result = result._parent;
    }

    return result;
  }

  get children() {
    return this._children;
  }

  get graphDepth() {
    return this._graphDepth;
  }

  _notifyHierarchyStateChanged(node, enabled) {
    node._onHierarchyStateChanged(enabled);

    const c = node._children;

    for (let i = 0, len = c.length; i < len; i++) {
      if (c[i]._enabled) this._notifyHierarchyStateChanged(c[i], enabled);
    }
  }

  _onHierarchyStateChanged(enabled) {
    this._enabledInHierarchy = enabled;
    if (enabled && !this._frozen) this._unfreezeParentToRoot();
  }

  _cloneInternal(clone) {
    clone.name = this.name;
    const tags = this.tags._list;
    clone.tags.clear();

    for (let i = 0; i < tags.length; i++) clone.tags.add(tags[i]);

    clone._labels = Object.assign({}, this._labels);
    clone.localPosition.copy(this.localPosition);
    clone.localRotation.copy(this.localRotation);
    clone.localScale.copy(this.localScale);
    clone.localEulerAngles.copy(this.localEulerAngles);
    clone.position.copy(this.position);
    clone.rotation.copy(this.rotation);
    clone.eulerAngles.copy(this.eulerAngles);
    clone.localTransform.copy(this.localTransform);
    clone._dirtyLocal = this._dirtyLocal;
    clone.worldTransform.copy(this.worldTransform);
    clone._dirtyWorld = this._dirtyWorld;
    clone._dirtyNormal = this._dirtyNormal;
    clone._aabbVer = this._aabbVer + 1;
    clone._enabled = this._enabled;
    clone.scaleCompensation = this.scaleCompensation;
    clone._enabledInHierarchy = false;
  }

  clone() {
    const clone = new this.constructor();

    this._cloneInternal(clone);

    return clone;
  }

  copy(source) {
    source._cloneInternal(this);

    return this;
  }

  find(attr, value) {
    let result,
        results = [];
    const len = this._children.length;

    if (attr instanceof Function) {
      const fn = attr;
      result = fn(this);
      if (result) results.push(this);

      for (let i = 0; i < len; i++) {
        const descendants = this._children[i].find(fn);

        if (descendants.length) results = results.concat(descendants);
      }
    } else {
      let testValue;

      if (this[attr]) {
        if (this[attr] instanceof Function) {
          testValue = this[attr]();
        } else {
          testValue = this[attr];
        }

        if (testValue === value) results.push(this);
      }

      for (let i = 0; i < len; ++i) {
        const descendants = this._children[i].find(attr, value);

        if (descendants.length) results = results.concat(descendants);
      }
    }

    return results;
  }

  findOne(attr, value) {
    const len = this._children.length;
    let result = null;

    if (attr instanceof Function) {
      const fn = attr;
      result = fn(this);
      if (result) return this;

      for (let i = 0; i < len; i++) {
        result = this._children[i].findOne(fn);
        if (result) return result;
      }
    } else {
      let testValue;

      if (this[attr]) {
        if (this[attr] instanceof Function) {
          testValue = this[attr]();
        } else {
          testValue = this[attr];
        }

        if (testValue === value) {
          return this;
        }
      }

      for (let i = 0; i < len; i++) {
        result = this._children[i].findOne(attr, value);
        if (result !== null) return result;
      }
    }

    return null;
  }

  findByTag() {
    const query = arguments;
    const results = [];

    const queryNode = (node, checkNode) => {
      if (checkNode && node.tags.has(...query)) {
        results.push(node);
      }

      for (let i = 0; i < node._children.length; i++) {
        queryNode(node._children[i], true);
      }
    };

    queryNode(this, false);
    return results;
  }

  findByName(name) {
    if (this.name === name) return this;

    for (let i = 0; i < this._children.length; i++) {
      const found = this._children[i].findByName(name);

      if (found !== null) return found;
    }

    return null;
  }

  findByPath(path) {
    const parts = Array.isArray(path) ? path : path.split('/');
    let result = this;

    for (let i = 0, imax = parts.length; i < imax; ++i) {
      result = result.children.find(c => c.name === parts[i]);

      if (!result) {
        return null;
      }
    }

    return result;
  }

  forEach(callback, thisArg) {
    callback.call(thisArg, this);
    const children = this._children;

    for (let i = 0; i < children.length; i++) {
      children[i].forEach(callback, thisArg);
    }
  }

  isDescendantOf(node) {
    let parent = this._parent;

    while (parent) {
      if (parent === node) return true;
      parent = parent._parent;
    }

    return false;
  }

  isAncestorOf(node) {
    return node.isDescendantOf(this);
  }

  getEulerAngles() {
    this.getWorldTransform().getEulerAngles(this.eulerAngles);
    return this.eulerAngles;
  }

  getLocalEulerAngles() {
    this.localRotation.getEulerAngles(this.localEulerAngles);
    return this.localEulerAngles;
  }

  getLocalPosition() {
    return this.localPosition;
  }

  getLocalRotation() {
    return this.localRotation;
  }

  getLocalScale() {
    return this.localScale;
  }

  getLocalTransform() {
    if (this._dirtyLocal) {
      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);
      this._dirtyLocal = false;
    }

    return this.localTransform;
  }

  getPosition() {
    this.getWorldTransform().getTranslation(this.position);
    return this.position;
  }

  getRotation() {
    this.rotation.setFromMat4(this.getWorldTransform());
    return this.rotation;
  }

  getScale() {
    if (!this._scale) {
      this._scale = new Vec3();
    }

    return this.getWorldTransform().getScale(this._scale);
  }

  getWorldTransform() {
    if (!this._dirtyLocal && !this._dirtyWorld) return this.worldTransform;
    if (this._parent) this._parent.getWorldTransform();

    this._sync();

    return this.worldTransform;
  }

  reparent(parent, index) {
    const current = this._parent;
    if (current) current.removeChild(this);

    if (parent) {
      if (index >= 0) {
        parent.insertChild(this, index);
      } else {
        parent.addChild(this);
      }
    }
  }

  setLocalEulerAngles(x, y, z) {
    this.localRotation.setFromEulerAngles(x, y, z);
    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  setLocalPosition(x, y, z) {
    if (x instanceof Vec3) {
      this.localPosition.copy(x);
    } else {
      this.localPosition.set(x, y, z);
    }

    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  setLocalRotation(x, y, z, w) {
    if (x instanceof Quat) {
      this.localRotation.copy(x);
    } else {
      this.localRotation.set(x, y, z, w);
    }

    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  setLocalScale(x, y, z) {
    if (x instanceof Vec3) {
      this.localScale.copy(x);
    } else {
      this.localScale.set(x, y, z);
    }

    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  _dirtifyLocal() {
    if (!this._dirtyLocal) {
      this._dirtyLocal = true;
      if (!this._dirtyWorld) this._dirtifyWorld();
    }
  }

  _unfreezeParentToRoot() {
    let p = this._parent;

    while (p) {
      p._frozen = false;
      p = p._parent;
    }
  }

  _dirtifyWorld() {
    if (!this._dirtyWorld) this._unfreezeParentToRoot();

    this._dirtifyWorldInternal();
  }

  _dirtifyWorldInternal() {
    if (!this._dirtyWorld) {
      this._frozen = false;
      this._dirtyWorld = true;

      for (let i = 0; i < this._children.length; i++) {
        if (!this._children[i]._dirtyWorld) this._children[i]._dirtifyWorldInternal();
      }
    }

    this._dirtyNormal = true;
    this._aabbVer++;
  }

  setPosition(x, y, z) {
    if (x instanceof Vec3) {
      position$1.copy(x);
    } else {
      position$1.set(x, y, z);
    }

    if (this._parent === null) {
      this.localPosition.copy(position$1);
    } else {
      invParentWtm$1.copy(this._parent.getWorldTransform()).invert();
      invParentWtm$1.transformPoint(position$1, this.localPosition);
    }

    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  setRotation(x, y, z, w) {
    if (x instanceof Quat) {
      rotation.copy(x);
    } else {
      rotation.set(x, y, z, w);
    }

    if (this._parent === null) {
      this.localRotation.copy(rotation);
    } else {
      const parentRot = this._parent.getRotation();

      invParentRot.copy(parentRot).invert();
      this.localRotation.copy(invParentRot).mul(rotation);
    }

    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  setEulerAngles(x, y, z) {
    this.localRotation.setFromEulerAngles(x, y, z);

    if (this._parent !== null) {
      const parentRot = this._parent.getRotation();

      invParentRot.copy(parentRot).invert();
      this.localRotation.mul2(invParentRot, this.localRotation);
    }

    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  addChild(node) {
    this._prepareInsertChild(node);

    this._children.push(node);

    this._onInsertChild(node);
  }

  addChildAndSaveTransform(node) {
    const wPos = node.getPosition();
    const wRot = node.getRotation();

    this._prepareInsertChild(node);

    node.setPosition(tmpMat4.copy(this.worldTransform).invert().transformPoint(wPos));
    node.setRotation(tmpQuat.copy(this.getRotation()).invert().mul(wRot));

    this._children.push(node);

    this._onInsertChild(node);
  }

  insertChild(node, index) {
    this._prepareInsertChild(node);

    this._children.splice(index, 0, node);

    this._onInsertChild(node);
  }

  _prepareInsertChild(node) {
    if (node._parent) {
      node._parent.removeChild(node);
    }
  }

  _fireOnHierarchy(name, nameHierarchy, parent) {
    this.fire(name, parent);

    for (let i = 0; i < this._children.length; i++) {
      this._children[i]._fireOnHierarchy(nameHierarchy, nameHierarchy, parent);
    }
  }

  _onInsertChild(node) {
    node._parent = this;
    const enabledInHierarchy = node._enabled && this.enabled;

    if (node._enabledInHierarchy !== enabledInHierarchy) {
      node._enabledInHierarchy = enabledInHierarchy;

      node._notifyHierarchyStateChanged(node, enabledInHierarchy);
    }

    node._updateGraphDepth();

    node._dirtifyWorld();

    if (this._frozen) node._unfreezeParentToRoot();

    node._fireOnHierarchy('insert', 'inserthierarchy', this);

    if (this.fire) this.fire('childinsert', node);
  }

  _updateGraphDepth() {
    this._graphDepth = this._parent ? this._parent._graphDepth + 1 : 0;

    for (let i = 0, len = this._children.length; i < len; i++) {
      this._children[i]._updateGraphDepth();
    }
  }

  removeChild(child) {
    const index = this._children.indexOf(child);

    if (index === -1) {
      return;
    }

    this._children.splice(index, 1);

    child._parent = null;

    child._fireOnHierarchy('remove', 'removehierarchy', this);

    this.fire('childremove', child);
  }

  _sync() {
    if (this._dirtyLocal) {
      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);
      this._dirtyLocal = false;
    }

    if (this._dirtyWorld) {
      if (this._parent === null) {
        this.worldTransform.copy(this.localTransform);
      } else {
        if (this.scaleCompensation) {
          let parentWorldScale;
          const parent = this._parent;
          let scale = this.localScale;
          let parentToUseScaleFrom = parent;

          if (parentToUseScaleFrom) {
            while (parentToUseScaleFrom && parentToUseScaleFrom.scaleCompensation) {
              parentToUseScaleFrom = parentToUseScaleFrom._parent;
            }

            if (parentToUseScaleFrom) {
              parentToUseScaleFrom = parentToUseScaleFrom._parent;

              if (parentToUseScaleFrom) {
                parentWorldScale = parentToUseScaleFrom.worldTransform.getScale();
                scaleCompensateScale.mul2(parentWorldScale, this.localScale);
                scale = scaleCompensateScale;
              }
            }
          }

          scaleCompensateRot2.setFromMat4(parent.worldTransform);
          scaleCompensateRot.mul2(scaleCompensateRot2, this.localRotation);
          let tmatrix = parent.worldTransform;

          if (parent.scaleCompensation) {
            scaleCompensateScaleForParent.mul2(parentWorldScale, parent.getLocalScale());
            scaleCompensatePosTransform.setTRS(parent.worldTransform.getTranslation(scaleCompensatePos), scaleCompensateRot2, scaleCompensateScaleForParent);
            tmatrix = scaleCompensatePosTransform;
          }

          tmatrix.transformPoint(this.localPosition, scaleCompensatePos);
          this.worldTransform.setTRS(scaleCompensatePos, scaleCompensateRot, scale);
        } else {
          this.worldTransform.mulAffine2(this._parent.worldTransform, this.localTransform);
        }
      }

      this._dirtyWorld = false;
    }
  }

  syncHierarchy() {
    if (!this._enabled) return;
    if (this._frozen) return;
    this._frozen = true;

    if (this._dirtyLocal || this._dirtyWorld) {
      this._sync();
    }

    const children = this._children;

    for (let i = 0, len = children.length; i < len; i++) {
      children[i].syncHierarchy();
    }
  }

  lookAt(x, y, z, ux = 0, uy = 1, uz = 0) {
    if (x instanceof Vec3) {
      target.copy(x);

      if (y instanceof Vec3) {
        up.copy(y);
      } else {
        up.copy(Vec3.UP);
      }
    } else if (z === undefined) {
      return;
    } else {
      target.set(x, y, z);
      up.set(ux, uy, uz);
    }

    matrix.setLookAt(this.getPosition(), target, up);
    rotation.setFromMat4(matrix);
    this.setRotation(rotation);
  }

  translate(x, y, z) {
    if (x instanceof Vec3) {
      position$1.copy(x);
    } else {
      position$1.set(x, y, z);
    }

    position$1.add(this.getPosition());
    this.setPosition(position$1);
  }

  translateLocal(x, y, z) {
    if (x instanceof Vec3) {
      position$1.copy(x);
    } else {
      position$1.set(x, y, z);
    }

    this.localRotation.transformVector(position$1, position$1);
    this.localPosition.add(position$1);
    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  rotate(x, y, z) {
    rotation.setFromEulerAngles(x, y, z);

    if (this._parent === null) {
      this.localRotation.mul2(rotation, this.localRotation);
    } else {
      const rot = this.getRotation();

      const parentRot = this._parent.getRotation();

      invParentRot.copy(parentRot).invert();
      rotation.mul2(invParentRot, rotation);
      this.localRotation.mul2(rotation, rot);
    }

    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  rotateLocal(x, y, z) {
    rotation.setFromEulerAngles(x, y, z);
    this.localRotation.mul(rotation);
    if (!this._dirtyLocal) this._dirtifyLocal();
  }

}

const _viewMat = new Mat4();

const _viewProjMat = new Mat4();

const _viewportMatrix = new Mat4();

class LightCamera {
  static create(name, lightType, face) {
    const camera = new Camera();
    camera.node = new GraphNode(name);
    camera.aspectRatio = 1;
    camera.aspectRatioMode = ASPECT_MANUAL;
    camera._scissorRectClear = true;

    switch (lightType) {
      case LIGHTTYPE_OMNI:
        camera.node.setRotation(LightCamera.pointLightRotations[face]);
        camera.fov = 90;
        camera.projection = PROJECTION_PERSPECTIVE;
        break;

      case LIGHTTYPE_SPOT:
        camera.projection = PROJECTION_PERSPECTIVE;
        break;

      case LIGHTTYPE_DIRECTIONAL:
        camera.projection = PROJECTION_ORTHOGRAPHIC;
        break;
    }

    return camera;
  }

  static evalSpotCookieMatrix(light) {
    let cookieCamera = LightCamera._spotCookieCamera;

    if (!cookieCamera) {
      cookieCamera = LightCamera.create('SpotCookieCamera', LIGHTTYPE_SPOT);
      LightCamera._spotCookieCamera = cookieCamera;
    }

    cookieCamera.fov = light._outerConeAngle * 2;
    const cookieNode = cookieCamera._node;
    cookieNode.setPosition(light._node.getPosition());
    cookieNode.setRotation(light._node.getRotation());
    cookieNode.rotateLocal(-90, 0, 0);

    _viewMat.setTRS(cookieNode.getPosition(), cookieNode.getRotation(), Vec3.ONE).invert();

    _viewProjMat.mul2(cookieCamera.projectionMatrix, _viewMat);

    const cookieMatrix = light.cookieMatrix;
    const rectViewport = light.atlasViewport;

    _viewportMatrix.setViewport(rectViewport.x, rectViewport.y, rectViewport.z, rectViewport.w);

    cookieMatrix.mul2(_viewportMatrix, _viewProjMat);
    return cookieMatrix;
  }

}

LightCamera.pointLightRotations = [new Quat().setFromEulerAngles(0, 90, 180), new Quat().setFromEulerAngles(0, -90, 180), new Quat().setFromEulerAngles(90, 0, 0), new Quat().setFromEulerAngles(-90, 0, 0), new Quat().setFromEulerAngles(0, 180, 180), new Quat().setFromEulerAngles(0, 0, 180)];
LightCamera._spotCookieCamera = null;

const epsilon$1 = 0.000001;
const tempVec3$1 = new Vec3();
const tempAreaLightSizes = new Float32Array(6);
const areaHalfAxisWidth = new Vec3(-0.5, 0, 0);
const areaHalfAxisHeight = new Vec3(0, 0, 0.5);
const TextureIndex8 = {
  FLAGS: 0,
  COLOR_A: 1,
  COLOR_B: 2,
  SPOT_ANGLES: 3,
  SHADOW_BIAS: 4,
  COOKIE_A: 5,
  COOKIE_B: 6,
  COUNT_ALWAYS: 7,
  POSITION_X: 7,
  POSITION_Y: 8,
  POSITION_Z: 9,
  RANGE: 10,
  SPOT_DIRECTION_X: 11,
  SPOT_DIRECTION_Y: 12,
  SPOT_DIRECTION_Z: 13,
  PROJ_MAT_00: 14,
  ATLAS_VIEWPORT_A: 14,
  PROJ_MAT_01: 15,
  ATLAS_VIEWPORT_B: 15,
  PROJ_MAT_02: 16,
  PROJ_MAT_03: 17,
  PROJ_MAT_10: 18,
  PROJ_MAT_11: 19,
  PROJ_MAT_12: 20,
  PROJ_MAT_13: 21,
  PROJ_MAT_20: 22,
  PROJ_MAT_21: 23,
  PROJ_MAT_22: 24,
  PROJ_MAT_23: 25,
  PROJ_MAT_30: 26,
  PROJ_MAT_31: 27,
  PROJ_MAT_32: 28,
  PROJ_MAT_33: 29,
  AREA_DATA_WIDTH_X: 30,
  AREA_DATA_WIDTH_Y: 31,
  AREA_DATA_WIDTH_Z: 32,
  AREA_DATA_HEIGHT_X: 33,
  AREA_DATA_HEIGHT_Y: 34,
  AREA_DATA_HEIGHT_Z: 35,
  COUNT: 36
};
const TextureIndexFloat = {
  POSITION_RANGE: 0,
  SPOT_DIRECTION: 1,
  PROJ_MAT_0: 2,
  ATLAS_VIEWPORT: 2,
  PROJ_MAT_1: 3,
  PROJ_MAT_2: 4,
  PROJ_MAT_3: 5,
  AREA_DATA_WIDTH: 6,
  AREA_DATA_HEIGHT: 7,
  COUNT: 8
};

class LightsBuffer {
  static initShaderDefines() {
    const clusterTextureFormat = LightsBuffer.lightTextureFormat === LightsBuffer.FORMAT_FLOAT ? 'FLOAT' : '8BIT';
    LightsBuffer.shaderDefines = `
            \n#define CLUSTER_TEXTURE_${clusterTextureFormat}
            ${LightsBuffer.buildShaderDefines(TextureIndex8, 'CLUSTER_TEXTURE_8_')}
            ${LightsBuffer.buildShaderDefines(TextureIndexFloat, 'CLUSTER_TEXTURE_F_')}
        `;
  }

  static buildShaderDefines(object, prefix) {
    let str = '';
    Object.keys(object).forEach(key => {
      str += `\n#define ${prefix}${key} ${object[key]}.5`;
    });
    return str;
  }

  static init(device) {
    LightsBuffer.lightTextureFormat = device.extTextureFloat && device.maxTextures > 8 ? LightsBuffer.FORMAT_FLOAT : LightsBuffer.FORMAT_8BIT;
    LightsBuffer.initShaderDefines();
  }

  static createTexture(device, width, height, format, name) {
    const tex = new Texture(device, {
      name: name,
      width: width,
      height: height,
      mipmaps: false,
      format: format,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      type: TEXTURETYPE_DEFAULT,
      magFilter: FILTER_NEAREST,
      minFilter: FILTER_NEAREST,
      anisotropy: 1
    });
    return tex;
  }

  constructor(device) {
    this.device = device;
    this.cookiesEnabled = false;
    this.shadowsEnabled = false;
    this.areaLightsEnabled = false;
    this.maxLights = 255;
    let pixelsPerLight8 = TextureIndex8.COUNT_ALWAYS;
    let pixelsPerLightFloat = 0;

    if (LightsBuffer.lightTextureFormat === LightsBuffer.FORMAT_FLOAT) {
      pixelsPerLightFloat = TextureIndexFloat.COUNT;
    } else {
      pixelsPerLight8 = TextureIndex8.COUNT;
    }

    this.lights8 = new Uint8ClampedArray(4 * pixelsPerLight8 * this.maxLights);
    this.lightsTexture8 = LightsBuffer.createTexture(this.device, pixelsPerLight8, this.maxLights, PIXELFORMAT_R8_G8_B8_A8, 'LightsTexture8');
    this._lightsTexture8Id = this.device.scope.resolve('lightsTexture8');

    if (pixelsPerLightFloat) {
      this.lightsFloat = new Float32Array(4 * pixelsPerLightFloat * this.maxLights);
      this.lightsTextureFloat = LightsBuffer.createTexture(this.device, pixelsPerLightFloat, this.maxLights, PIXELFORMAT_RGBA32F, 'LightsTextureFloat');
      this._lightsTextureFloatId = this.device.scope.resolve('lightsTextureFloat');
    } else {
      this.lightsFloat = null;
      this.lightsTextureFloat = null;
      this._lightsTextureFloatId = undefined;
    }

    this._lightsTextureInvSizeId = this.device.scope.resolve('lightsTextureInvSize');
    this._lightsTextureInvSizeData = new Float32Array(4);
    this._lightsTextureInvSizeData[0] = pixelsPerLightFloat ? 1.0 / this.lightsTextureFloat.width : 0;
    this._lightsTextureInvSizeData[1] = pixelsPerLightFloat ? 1.0 / this.lightsTextureFloat.height : 0;
    this._lightsTextureInvSizeData[2] = 1.0 / this.lightsTexture8.width;
    this._lightsTextureInvSizeData[3] = 1.0 / this.lightsTexture8.height;
    this.invMaxColorValue = 0;
    this.invMaxAttenuation = 0;
    this.boundsMin = new Vec3();
    this.boundsDelta = new Vec3();
  }

  destroy() {
    if (this.lightsTexture8) {
      this.lightsTexture8.destroy();
      this.lightsTexture8 = null;
    }

    if (this.lightsTextureFloat) {
      this.lightsTextureFloat.destroy();
      this.lightsTextureFloat = null;
    }
  }

  setCompressionRanges(maxAttenuation, maxColorValue) {
    this.invMaxColorValue = 1 / maxColorValue;
    this.invMaxAttenuation = 1 / maxAttenuation;
  }

  setBounds(min, delta) {
    this.boundsMin.copy(min);
    this.boundsDelta.copy(delta);
  }

  uploadTextures() {
    if (this.lightsTextureFloat) {
      this.lightsTextureFloat.lock().set(this.lightsFloat);
      this.lightsTextureFloat.unlock();
    }

    this.lightsTexture8.lock().set(this.lights8);
    this.lightsTexture8.unlock();
  }

  updateUniforms() {
    this._lightsTexture8Id.setValue(this.lightsTexture8);

    if (LightsBuffer.lightTextureFormat === LightsBuffer.FORMAT_FLOAT) {
      this._lightsTextureFloatId.setValue(this.lightsTextureFloat);
    }

    this._lightsTextureInvSizeId.setValue(this._lightsTextureInvSizeData);
  }

  getSpotDirection(direction, spot) {
    const mat = spot._node.getWorldTransform();

    mat.getY(direction).mulScalar(-1);
    direction.normalize();
  }

  getLightAreaSizes(light) {
    const mat = light._node.getWorldTransform();

    mat.transformVector(areaHalfAxisWidth, tempVec3$1);
    tempAreaLightSizes[0] = tempVec3$1.x;
    tempAreaLightSizes[1] = tempVec3$1.y;
    tempAreaLightSizes[2] = tempVec3$1.z;
    mat.transformVector(areaHalfAxisHeight, tempVec3$1);
    tempAreaLightSizes[3] = tempVec3$1.x;
    tempAreaLightSizes[4] = tempVec3$1.y;
    tempAreaLightSizes[5] = tempVec3$1.z;
    return tempAreaLightSizes;
  }

  addLightDataFlags(data8, index, light, isSpot, castShadows, shadowIntensity) {
    data8[index + 0] = isSpot ? 255 : 0;
    data8[index + 1] = light._shape * 64;
    data8[index + 2] = light._falloffMode * 255;
    data8[index + 3] = castShadows ? shadowIntensity * 255 : 0;
  }

  addLightDataColor(data8, index, light, gammaCorrection, isCookie) {
    const invMaxColorValue = this.invMaxColorValue;
    const color = gammaCorrection ? light._linearFinalColor : light._finalColor;
    FloatPacking.float2Bytes(color[0] * invMaxColorValue, data8, index + 0, 2);
    FloatPacking.float2Bytes(color[1] * invMaxColorValue, data8, index + 2, 2);
    FloatPacking.float2Bytes(color[2] * invMaxColorValue, data8, index + 4, 2);
    data8[index + 6] = isCookie ? 255 : 0;
    const isDynamic = !!(light.mask & MASK_AFFECT_DYNAMIC);
    const isLightmapped = !!(light.mask & MASK_AFFECT_LIGHTMAPPED);
    data8[index + 7] = isDynamic && isLightmapped ? 127 : isLightmapped ? 255 : 0;
  }

  addLightDataSpotAngles(data8, index, light) {
    FloatPacking.float2Bytes(light._innerConeAngleCos * (0.5 - epsilon$1) + 0.5, data8, index + 0, 2);
    FloatPacking.float2Bytes(light._outerConeAngleCos * (0.5 - epsilon$1) + 0.5, data8, index + 2, 2);
  }

  addLightDataShadowBias(data8, index, light) {
    const lightRenderData = light.getRenderData(null, 0);

    const biases = light._getUniformBiasValues(lightRenderData);

    FloatPacking.float2BytesRange(biases.bias, data8, index, -1, 20, 2);
    FloatPacking.float2Bytes(biases.normalBias, data8, index + 2, 2);
  }

  addLightDataPositionRange(data8, index, light, pos) {
    const normPos = tempVec3$1.sub2(pos, this.boundsMin).div(this.boundsDelta);
    FloatPacking.float2Bytes(normPos.x, data8, index + 0, 4);
    FloatPacking.float2Bytes(normPos.y, data8, index + 4, 4);
    FloatPacking.float2Bytes(normPos.z, data8, index + 8, 4);
    FloatPacking.float2Bytes(light.attenuationEnd * this.invMaxAttenuation, data8, index + 12, 4);
  }

  addLightDataSpotDirection(data8, index, light) {
    this.getSpotDirection(tempVec3$1, light);
    FloatPacking.float2Bytes(tempVec3$1.x * (0.5 - epsilon$1) + 0.5, data8, index + 0, 4);
    FloatPacking.float2Bytes(tempVec3$1.y * (0.5 - epsilon$1) + 0.5, data8, index + 4, 4);
    FloatPacking.float2Bytes(tempVec3$1.z * (0.5 - epsilon$1) + 0.5, data8, index + 8, 4);
  }

  addLightDataLightProjMatrix(data8, index, lightProjectionMatrix) {
    const matData = lightProjectionMatrix.data;

    for (let m = 0; m < 12; m++) FloatPacking.float2BytesRange(matData[m], data8, index + 4 * m, -2, 2, 4);

    for (let m = 12; m < 16; m++) {
      FloatPacking.float2MantissaExponent(matData[m], data8, index + 4 * m, 4);
    }
  }

  addLightDataCookies(data8, index, light) {
    const isRgb = light._cookieChannel === 'rgb';
    data8[index + 0] = Math.floor(light.cookieIntensity * 255);
    data8[index + 1] = isRgb ? 255 : 0;

    if (!isRgb) {
      const channel = light._cookieChannel;
      data8[index + 4] = channel === 'rrr' ? 255 : 0;
      data8[index + 5] = channel === 'ggg' ? 255 : 0;
      data8[index + 6] = channel === 'bbb' ? 255 : 0;
      data8[index + 7] = channel === 'aaa' ? 255 : 0;
    }
  }

  addLightAtlasViewport(data8, index, atlasViewport) {
    FloatPacking.float2Bytes(atlasViewport.x, data8, index + 0, 2);
    FloatPacking.float2Bytes(atlasViewport.y, data8, index + 2, 2);
    FloatPacking.float2Bytes(atlasViewport.z / 3, data8, index + 4, 2);
  }

  addLightAreaSizes(data8, index, light) {
    const areaSizes = this.getLightAreaSizes(light);

    for (let i = 0; i < 6; i++) {
      FloatPacking.float2MantissaExponent(areaSizes[i], data8, index + 4 * i, 4);
    }
  }

  addLightData(light, lightIndex, gammaCorrection) {
    const isSpot = light._type === LIGHTTYPE_SPOT;
    const hasAtlasViewport = light.atlasViewportAllocated;
    const isCookie = this.cookiesEnabled && !!light._cookie && hasAtlasViewport;
    const isArea = this.areaLightsEnabled && light.shape !== LIGHTSHAPE_PUNCTUAL;
    const castShadows = this.shadowsEnabled && light.castShadows && hasAtlasViewport;

    const pos = light._node.getPosition();

    let lightProjectionMatrix = null;
    let atlasViewport = null;

    if (isSpot) {
      if (castShadows) {
        const lightRenderData = light.getRenderData(null, 0);
        lightProjectionMatrix = lightRenderData.shadowMatrix;
      } else if (isCookie) {
        lightProjectionMatrix = LightCamera.evalSpotCookieMatrix(light);
      }
    } else {
      if (castShadows || isCookie) {
        atlasViewport = light.atlasViewport;
      }
    }

    const data8 = this.lights8;
    const data8Start = lightIndex * this.lightsTexture8.width * 4;
    this.addLightDataFlags(data8, data8Start + 4 * TextureIndex8.FLAGS, light, isSpot, castShadows, light.shadowIntensity);
    this.addLightDataColor(data8, data8Start + 4 * TextureIndex8.COLOR_A, light, gammaCorrection, isCookie);

    if (isSpot) {
      this.addLightDataSpotAngles(data8, data8Start + 4 * TextureIndex8.SPOT_ANGLES, light);
    }

    if (light.castShadows) {
      this.addLightDataShadowBias(data8, data8Start + 4 * TextureIndex8.SHADOW_BIAS, light);
    }

    if (isCookie) {
      this.addLightDataCookies(data8, data8Start + 4 * TextureIndex8.COOKIE_A, light);
    }

    if (LightsBuffer.lightTextureFormat === LightsBuffer.FORMAT_FLOAT) {
      const dataFloat = this.lightsFloat;
      const dataFloatStart = lightIndex * this.lightsTextureFloat.width * 4;
      dataFloat[dataFloatStart + 4 * TextureIndexFloat.POSITION_RANGE + 0] = pos.x;
      dataFloat[dataFloatStart + 4 * TextureIndexFloat.POSITION_RANGE + 1] = pos.y;
      dataFloat[dataFloatStart + 4 * TextureIndexFloat.POSITION_RANGE + 2] = pos.z;
      dataFloat[dataFloatStart + 4 * TextureIndexFloat.POSITION_RANGE + 3] = light.attenuationEnd;

      if (isSpot) {
        this.getSpotDirection(tempVec3$1, light);
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.SPOT_DIRECTION + 0] = tempVec3$1.x;
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.SPOT_DIRECTION + 1] = tempVec3$1.y;
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.SPOT_DIRECTION + 2] = tempVec3$1.z;
      }

      if (lightProjectionMatrix) {
        const matData = lightProjectionMatrix.data;

        for (let m = 0; m < 16; m++) dataFloat[dataFloatStart + 4 * TextureIndexFloat.PROJ_MAT_0 + m] = matData[m];
      }

      if (atlasViewport) {
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.ATLAS_VIEWPORT + 0] = atlasViewport.x;
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.ATLAS_VIEWPORT + 1] = atlasViewport.y;
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.ATLAS_VIEWPORT + 2] = atlasViewport.z / 3;
      }

      if (isArea) {
        const areaSizes = this.getLightAreaSizes(light);
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.AREA_DATA_WIDTH + 0] = areaSizes[0];
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.AREA_DATA_WIDTH + 1] = areaSizes[1];
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.AREA_DATA_WIDTH + 2] = areaSizes[2];
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.AREA_DATA_HEIGHT + 0] = areaSizes[3];
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.AREA_DATA_HEIGHT + 1] = areaSizes[4];
        dataFloat[dataFloatStart + 4 * TextureIndexFloat.AREA_DATA_HEIGHT + 2] = areaSizes[5];
      }
    } else {
      this.addLightDataPositionRange(data8, data8Start + 4 * TextureIndex8.POSITION_X, light, pos);

      if (isSpot) {
        this.addLightDataSpotDirection(data8, data8Start + 4 * TextureIndex8.SPOT_DIRECTION_X, light);
      }

      if (lightProjectionMatrix) {
        this.addLightDataLightProjMatrix(data8, data8Start + 4 * TextureIndex8.PROJ_MAT_00, lightProjectionMatrix);
      }

      if (atlasViewport) {
        this.addLightAtlasViewport(data8, data8Start + 4 * TextureIndex8.ATLAS_VIEWPORT_A, atlasViewport);
      }

      if (isArea) {
        this.addLightAreaSizes(data8, data8Start + 4 * TextureIndex8.AREA_DATA_WIDTH_X, light);
      }
    }
  }

}

LightsBuffer.FORMAT_FLOAT = 0;
LightsBuffer.FORMAT_8BIT = 1;
LightsBuffer.lightTextureFormat = LightsBuffer.FORMAT_8BIT;
LightsBuffer.shaderDefines = '';

const builtinAttributes = {
  vertex_normal: SEMANTIC_NORMAL,
  vertex_tangent: SEMANTIC_TANGENT,
  vertex_texCoord0: SEMANTIC_TEXCOORD0,
  vertex_texCoord1: SEMANTIC_TEXCOORD1,
  vertex_color: SEMANTIC_COLOR,
  vertex_boneWeights: SEMANTIC_BLENDWEIGHT,
  vertex_boneIndices: SEMANTIC_BLENDINDICES
};
const builtinVaryings = {
  vVertexColor: "vec4",
  vPositionW: "vec3",
  vNormalV: "vec3",
  vNormalW: "vec3",
  vTangentW: "vec3",
  vBinormalW: "vec3",
  vObjectSpaceUpW: "vec3",
  vUv0: "vec2",
  vUv1: "vec2"
};

class LitShader {
  constructor(device, options) {
    this.device = device;
    this.options = options;
    this.attributes = {
      vertex_position: SEMANTIC_POSITION
    };

    if (options.chunks) {
      this.chunks = {};
      const userChunks = options.chunks;

      for (const chunkName in shaderChunks) {
        if (userChunks.hasOwnProperty(chunkName)) {
          const chunk = userChunks[chunkName];

          for (const a in builtinAttributes) {
            if (builtinAttributes.hasOwnProperty(a) && chunk.indexOf(a) >= 0) {
              this.attributes[a] = builtinAttributes[a];
            }
          }

          this.chunks[chunkName] = chunk;
        } else {
          this.chunks[chunkName] = shaderChunks[chunkName];
        }
      }
    } else {
      this.chunks = shaderChunks;
    }

    this.lighting = options.lights.length > 0 || !!options.dirLightMap || !!options.clusteredLightingEnabled;
    this.reflections = !!options.reflectionSource;
    if (!options.useSpecular) options.specularMap = options.glossMap = null;
    this.shadowPass = ShaderPass.isShadow(options.pass);
    this.needsNormal = this.lighting || this.reflections || options.useSpecular || options.ambientSH || options.heightMap || options.enableGGXSpecular || options.clusteredLightingEnabled && !this.shadowPass || options.clearCoatNormalMap;
    this.needsSceneColor = options.useDynamicRefraction;
    this.needsScreenSize = options.useDynamicRefraction;
    this.needsTransforms = options.useDynamicRefraction;
    this.varyings = "";
    this.vshader = null;
    this.frontendDecl = null;
    this.frontendCode = null;
    this.frontendFunc = null;
    this.lightingUv = null;
    this.defines = [];
    this.fshader = null;
  }

  _vsAddBaseCode(code, chunks, options) {
    code += chunks.baseVS;

    if (options.nineSlicedMode === SPRITE_RENDERMODE_SLICED || options.nineSlicedMode === SPRITE_RENDERMODE_TILED) {
      code += chunks.baseNineSlicedVS;
    }

    return code;
  }

  _vsAddTransformCode(code, device, chunks, options) {
    code += this.chunks.transformVS;
    return code;
  }

  _setMapTransform(codes, name, id, uv) {
    const checkId = id + uv * 100;

    if (!codes[3][checkId]) {
      const varName = `texture_${name}MapTransform`;
      codes[0] += `uniform vec3 ${varName}0;\n`;
      codes[0] += `uniform vec3 ${varName}1;\n`;
      codes[1] += `varying vec2 vUV${uv}_${id};\n`;
      codes[2] += `   vUV${uv}_${id} = vec2(dot(vec3(uv${uv}, 1), ${varName}0), dot(vec3(uv${uv}, 1), ${varName}1));\n`;
      codes[3][checkId] = true;
    }

    return codes;
  }

  _fsGetBaseCode() {
    const options = this.options;
    const chunks = this.chunks;
    let result = this.chunks.basePS;

    if (options.nineSlicedMode === SPRITE_RENDERMODE_SLICED) {
      result += chunks.baseNineSlicedPS;
    } else if (options.nineSlicedMode === SPRITE_RENDERMODE_TILED) {
      result += chunks.baseNineSlicedTiledPS;
    }

    return result;
  }

  _fsGetStartCode(code, device, chunks, options) {
    let result = chunks.startPS;

    if (options.nineSlicedMode === SPRITE_RENDERMODE_SLICED) {
      result += chunks.startNineSlicedPS;
    } else if (options.nineSlicedMode === SPRITE_RENDERMODE_TILED) {
      result += chunks.startNineSlicedTiledPS;
    }

    return result;
  }

  _directionalShadowMapProjection(light, shadowCoordArgs, shadowParamArg, lightIndex, coordsFunctionName) {
    let code = "";

    if (light.numCascades > 1) {
      code += `getShadowCascadeMatrix(light${lightIndex}_shadowMatrixPalette, light${lightIndex}_shadowCascadeDistances, light${lightIndex}_shadowCascadeCount);\n`;
      shadowCoordArgs = `(cascadeShadowMat, ${shadowParamArg});\n`;
    }

    code += coordsFunctionName + shadowCoordArgs;
    code += `fadeShadow(light${lightIndex}_shadowCascadeDistances);\n`;
    return code;
  }

  _nonPointShadowMapProjection(device, light, shadowMatArg, shadowParamArg, lightIndex) {
    const shadowCoordArgs = `(${shadowMatArg}, ${shadowParamArg});\n`;

    if (!light._normalOffsetBias || light._isVsm) {
      if (light._type === LIGHTTYPE_SPOT) {
        if (light._isPcf && (device.webgl2 || device.extStandardDerivatives)) {
          return "       getShadowCoordPerspZbuffer" + shadowCoordArgs;
        }

        return "       getShadowCoordPersp" + shadowCoordArgs;
      }

      return this._directionalShadowMapProjection(light, shadowCoordArgs, shadowParamArg, lightIndex, "getShadowCoordOrtho");
    }

    if (light._type === LIGHTTYPE_SPOT) {
      if (light._isPcf && (device.webgl2 || device.extStandardDerivatives)) {
        return "       getShadowCoordPerspZbufferNormalOffset" + shadowCoordArgs;
      }

      return "       getShadowCoordPerspNormalOffset" + shadowCoordArgs;
    }

    return this._directionalShadowMapProjection(light, shadowCoordArgs, shadowParamArg, lightIndex, "getShadowCoordOrthoNormalOffset");
  }

  _getLightSourceShapeString(shape) {
    switch (shape) {
      case LIGHTSHAPE_RECT:
        return 'Rect';

      case LIGHTSHAPE_DISK:
        return 'Disk';

      case LIGHTSHAPE_SPHERE:
        return 'Sphere';

      default:
        return '';
    }
  }

  generateVertexShader(useUv, useUnmodifiedUv, mapTransforms) {
    const device = this.device;
    const options = this.options;
    const chunks = this.chunks;
    let code = '';
    let codeBody = '';
    code = this._vsAddBaseCode(code, chunks, options);
    codeBody += "   vPositionW    = getWorldPosition();\n";

    if (this.options.pass === SHADER_DEPTH) {
      code += 'varying float vDepth;\n';
      code += '#ifndef VIEWMATRIX\n';
      code += '#define VIEWMATRIX\n';
      code += 'uniform mat4 matrix_view;\n';
      code += '#endif\n';
      code += '#ifndef CAMERAPLANES\n';
      code += '#define CAMERAPLANES\n';
      code += 'uniform vec4 camera_params;\n\n';
      code += '#endif\n';
      codeBody += "    vDepth = -(matrix_view * vec4(vPositionW,1.0)).z * camera_params.x;\n";
    }

    if (this.options.useInstancing) {
      this.attributes.instance_line1 = SEMANTIC_ATTR12;
      this.attributes.instance_line2 = SEMANTIC_ATTR13;
      this.attributes.instance_line3 = SEMANTIC_ATTR14;
      this.attributes.instance_line4 = SEMANTIC_ATTR15;
      code += chunks.instancingVS;
    }

    if (this.needsNormal) {
      this.attributes.vertex_normal = SEMANTIC_NORMAL;
      codeBody += "   vNormalW = getNormal();\n";

      if (options.reflectionSource === 'sphereMap' && device.fragmentUniformsCount <= 16) {
        code += chunks.viewNormalVS;
        codeBody += "   vNormalV    = getViewNormal();\n";
      }

      if (options.hasTangents && (options.heightMap || options.normalMap || options.enableGGXSpecular)) {
        this.attributes.vertex_tangent = SEMANTIC_TANGENT;
        code += chunks.tangentBinormalVS;
        codeBody += "   vTangentW   = getTangent();\n";
        codeBody += "   vBinormalW  = getBinormal();\n";
      } else if (options.enableGGXSpecular) {
        code += chunks.tangentBinormalVS;
        codeBody += "   vObjectSpaceUpW  = getObjectSpaceUp();\n";
      }
    }

    const maxUvSets = 2;

    for (let i = 0; i < maxUvSets; i++) {
      if (useUv[i]) {
        this.attributes["vertex_texCoord" + i] = "TEXCOORD" + i;
        code += chunks["uv" + i + "VS"];
        codeBody += "   vec2 uv" + i + " = getUv" + i + "();\n";
      }

      if (useUnmodifiedUv[i]) {
        codeBody += "   vUv" + i + " = uv" + i + ";\n";
      }
    }

    const codes = [code, this.varyings, codeBody, []];
    mapTransforms.forEach(mapTransform => {
      this._setMapTransform(codes, mapTransform.name, mapTransform.id, mapTransform.uv);
    });
    code = codes[0];
    this.varyings = codes[1];
    codeBody = codes[2];

    if (options.vertexColors) {
      this.attributes.vertex_color = SEMANTIC_COLOR;
      codeBody += "   vVertexColor = vertex_color;\n";
    }

    if (options.msdf && options.msdfTextAttribute) {
      this.attributes.vertex_outlineParameters = SEMANTIC_ATTR8;
      this.attributes.vertex_shadowParameters = SEMANTIC_ATTR9;
      codeBody += "    unpackMsdfParams();\n";
      code += chunks.msdfVS;
    }

    if (options.useMorphPosition || options.useMorphNormal) {
      if (options.useMorphTextureBased) {
        code += "#define MORPHING_TEXTURE_BASED\n";

        if (options.useMorphPosition) {
          code += "#define MORPHING_TEXTURE_BASED_POSITION\n";
        }

        if (options.useMorphNormal) {
          code += "#define MORPHING_TEXTURE_BASED_NORMAL\n";
        }

        this.attributes.morph_vertex_id = SEMANTIC_ATTR15;
        code += "attribute float morph_vertex_id;\n";
      } else {
        code += "#define MORPHING\n";

        if (options.useMorphPosition) {
          this.attributes.morph_pos0 = SEMANTIC_ATTR8;
          this.attributes.morph_pos1 = SEMANTIC_ATTR9;
          this.attributes.morph_pos2 = SEMANTIC_ATTR10;
          this.attributes.morph_pos3 = SEMANTIC_ATTR11;
          code += "#define MORPHING_POS03\n";
          code += "attribute vec3 morph_pos0;\n";
          code += "attribute vec3 morph_pos1;\n";
          code += "attribute vec3 morph_pos2;\n";
          code += "attribute vec3 morph_pos3;\n";
        } else if (options.useMorphNormal) {
          this.attributes.morph_nrm0 = SEMANTIC_ATTR8;
          this.attributes.morph_nrm1 = SEMANTIC_ATTR9;
          this.attributes.morph_nrm2 = SEMANTIC_ATTR10;
          this.attributes.morph_nrm3 = SEMANTIC_ATTR11;
          code += "#define MORPHING_NRM03\n";
          code += "attribute vec3 morph_nrm0;\n";
          code += "attribute vec3 morph_nrm1;\n";
          code += "attribute vec3 morph_nrm2;\n";
          code += "attribute vec3 morph_nrm3;\n";
        }

        if (!options.useMorphNormal) {
          this.attributes.morph_pos4 = SEMANTIC_ATTR12;
          this.attributes.morph_pos5 = SEMANTIC_ATTR13;
          this.attributes.morph_pos6 = SEMANTIC_ATTR14;
          this.attributes.morph_pos7 = SEMANTIC_ATTR15;
          code += "#define MORPHING_POS47\n";
          code += "attribute vec3 morph_pos4;\n";
          code += "attribute vec3 morph_pos5;\n";
          code += "attribute vec3 morph_pos6;\n";
          code += "attribute vec3 morph_pos7;\n";
        } else {
          this.attributes.morph_nrm4 = SEMANTIC_ATTR12;
          this.attributes.morph_nrm5 = SEMANTIC_ATTR13;
          this.attributes.morph_nrm6 = SEMANTIC_ATTR14;
          this.attributes.morph_nrm7 = SEMANTIC_ATTR15;
          code += "#define MORPHING_NRM47\n";
          code += "attribute vec3 morph_nrm4;\n";
          code += "attribute vec3 morph_nrm5;\n";
          code += "attribute vec3 morph_nrm6;\n";
          code += "attribute vec3 morph_nrm7;\n";
        }
      }
    }

    if (options.skin) {
      this.attributes.vertex_boneWeights = SEMANTIC_BLENDWEIGHT;
      this.attributes.vertex_boneIndices = SEMANTIC_BLENDINDICES;
      code += skinCode(device, chunks);
      code += "#define SKIN\n";
    } else if (options.useInstancing) {
      code += "#define INSTANCING\n";
    }

    if (options.screenSpace) {
      code += "#define SCREENSPACE\n";
    }

    if (options.pixelSnap) {
      code += "#define PIXELSNAP\n";
    }

    code = this._vsAddTransformCode(code, device, chunks, options);

    if (this.needsNormal) {
      code += chunks.normalVS;
    }

    code += "\n";
    code += chunks.startVS;
    code += codeBody;
    code += chunks.endVS;
    code += "}";
    Object.keys(builtinVaryings).forEach(v => {
      if (code.indexOf(v) >= 0) {
        this.varyings += `varying ${builtinVaryings[v]} ${v};\n`;
      }
    });
    const startCode = vertexIntro(device, 'LitShader', this.options.pass, chunks.extensionVS);
    this.vshader = startCode + this.varyings + code;
  }

  _fsGetBeginCode() {
    const device = this.device;
    const chunks = this.chunks;
    const precision = this.options.forceFragmentPrecision;
    let code = fragmentIntro(device, 'LitShader', this.options.pass, chunks.extensionPS, precision);

    for (let i = 0; i < this.defines.length; i++) {
      code += `#define ${this.defines[i]}\n`;
    }

    return code;
  }

  _fsGetPickPassCode() {
    let code = this._fsGetBeginCode();

    code += "uniform vec4 uColor;\n";
    code += this.varyings;
    code += this.frontendDecl;
    code += this.frontendCode;
    code += begin();
    code += this.frontendFunc;
    code += "    gl_FragColor = uColor;\n";
    code += end();
    return code;
  }

  _fsGetDepthPassCode() {
    const chunks = this.chunks;

    let code = this._fsGetBeginCode();

    code += 'varying float vDepth;\n';
    code += this.varyings;
    code += chunks.packDepthPS;
    code += this.frontendDecl;
    code += this.frontendCode;
    code += begin();
    code += this.frontendFunc;
    code += "    gl_FragColor = packFloat(vDepth);\n";
    code += end();
    return code;
  }

  _fsGetShadowPassCode() {
    const device = this.device;
    const options = this.options;
    const chunks = this.chunks;
    const varyings = this.varyings;
    const lightType = ShaderPass.toLightType(options.pass);
    const shadowType = ShaderPass.toShadowType(options.pass);

    let code = this._fsGetBeginCode();

    if (device.extStandardDerivatives && !device.webgl2) {
      code += 'uniform vec2 polygonOffset;\n';
    }

    if (shadowType === SHADOW_VSM32) {
      if (device.textureFloatHighPrecision) {
        code += '#define VSM_EXPONENT 15.0\n\n';
      } else {
        code += '#define VSM_EXPONENT 5.54\n\n';
      }
    } else if (shadowType === SHADOW_VSM16) {
      code += '#define VSM_EXPONENT 5.54\n\n';
    }

    if (lightType !== LIGHTTYPE_DIRECTIONAL) {
      code += 'uniform vec3 view_position;\n';
      code += 'uniform float light_radius;\n';
    }

    code += varyings;
    code += this.frontendDecl;
    code += this.frontendCode;

    if (shadowType === SHADOW_PCF3 && (!device.webgl2 || lightType === LIGHTTYPE_OMNI)) {
      code += chunks.packDepthPS;
    } else if (shadowType === SHADOW_VSM8) {
      code += "vec2 encodeFloatRG( float v ) {\n";
      code += "    vec2 enc = vec2(1.0, 255.0) * v;\n";
      code += "    enc = fract(enc);\n";
      code += "    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n";
      code += "    return enc;\n";
      code += "}\n\n";
    }

    code += begin();
    code += this.frontendFunc;
    const isVsm = shadowType === SHADOW_VSM8 || shadowType === SHADOW_VSM16 || shadowType === SHADOW_VSM32;
    const applySlopeScaleBias = !device.webgl2 && device.extStandardDerivatives;

    if (lightType === LIGHTTYPE_OMNI || isVsm && lightType !== LIGHTTYPE_DIRECTIONAL) {
      code += "    float depth = min(distance(view_position, vPositionW) / light_radius, 0.99999);\n";
    } else {
      code += "    float depth = gl_FragCoord.z;\n";
    }

    if (applySlopeScaleBias) {
      code += "    float minValue = 2.3374370500153186e-10; //(1.0 / 255.0) / (256.0 * 256.0 * 256.0);\n";
      code += "    depth += polygonOffset.x * max(abs(dFdx(depth)), abs(dFdy(depth))) + minValue * polygonOffset.y;\n";
    }

    if (shadowType === SHADOW_PCF3 && (!device.webgl2 || lightType === LIGHTTYPE_OMNI && !options.clusteredLightingEnabled)) {
      code += "    gl_FragColor = packFloat(depth);\n";
    } else if (shadowType === SHADOW_PCF3 || shadowType === SHADOW_PCF5) {
      code += "    gl_FragColor = vec4(1.0);\n";

      if (options.clusteredLightingEnabled && lightType === LIGHTTYPE_OMNI && device.webgl2) {
        code += "    gl_FragDepth = depth;\n";
      }
    } else if (shadowType === SHADOW_VSM8) {
      code += "    gl_FragColor = vec4(encodeFloatRG(depth), encodeFloatRG(depth*depth));\n";
    } else {
      code += chunks.storeEVSMPS;
    }

    code += end();
    return code;
  }

  _fsGetLitPassCode() {
    const device = this.device;
    const options = this.options;
    const chunks = this.chunks;
    let code = "";

    if (options.opacityFadesSpecular === false) {
      code += 'uniform float material_alphaFade;\n';
    }

    if (options.useSpecular) {
      this.defines.push("LIT_SPECULAR");

      if (this.reflections) {
        this.defines.push("LIT_REFLECTIONS");
      }

      if (options.clearCoat) {
        this.defines.push("LIT_CLEARCOAT");
      }

      if (options.fresnelModel > 0) {
        this.defines.push("LIT_SPECULAR_FRESNEL");
      }

      if (options.conserveEnergy) {
        this.defines.push("LIT_CONSERVE_ENERGY");
      }

      if (options.sheen) {
        this.defines.push("LIT_SHEEN");
      }

      if (options.iridescence) {
        this.defines.push("LIT_IRIDESCENCE");
      }
    }

    const shadowTypeUsed = [];
    let numShadowLights = 0;
    let shadowedDirectionalLightUsed = false;
    let useVsm = false;
    let usePerspZbufferShadow = false;
    let hasAreaLights = options.lights.some(function (light) {
      return light._shape && light._shape !== LIGHTSHAPE_PUNCTUAL;
    });

    if (options.clusteredLightingEnabled && options.clusteredLightingAreaLightsEnabled) {
      hasAreaLights = true;
    }

    let areaLutsPrecision = 'highp';

    if (device.areaLightLutFormat === PIXELFORMAT_R8_G8_B8_A8) {
      code += "#define AREA_R8_G8_B8_A8_LUTS\n";
      areaLutsPrecision = 'lowp';
    }

    if (hasAreaLights || options.clusteredLightingEnabled) {
      code += "#define AREA_LIGHTS\n";
      code += `uniform ${areaLutsPrecision} sampler2D areaLightsLutTex1;\n`;
      code += `uniform ${areaLutsPrecision} sampler2D areaLightsLutTex2;\n`;
    }

    for (let i = 0; i < options.lights.length; i++) {
      const light = options.lights[i];
      const lightType = light._type;
      if (options.clusteredLightingEnabled && lightType !== LIGHTTYPE_DIRECTIONAL) continue;
      const lightShape = hasAreaLights && light._shape ? light._shape : LIGHTSHAPE_PUNCTUAL;
      code += "uniform vec3 light" + i + "_color;\n";

      if (lightType === LIGHTTYPE_DIRECTIONAL) {
        code += "uniform vec3 light" + i + "_direction;\n";
      } else {
        code += "uniform vec3 light" + i + "_position;\n";
        code += "uniform float light" + i + "_radius;\n";

        if (lightType === LIGHTTYPE_SPOT) {
          code += "uniform vec3 light" + i + "_direction;\n";
          code += "uniform float light" + i + "_innerConeAngle;\n";
          code += "uniform float light" + i + "_outerConeAngle;\n";
        }
      }

      if (lightShape !== LIGHTSHAPE_PUNCTUAL) {
        if (lightType === LIGHTTYPE_DIRECTIONAL) {
          code += "uniform vec3 light" + i + "_position;\n";
        }

        code += "uniform vec3 light" + i + "_halfWidth;\n";
        code += "uniform vec3 light" + i + "_halfHeight;\n";
      }

      if (light.castShadows && !options.noShadow) {
        code += "uniform mat4 light" + i + "_shadowMatrix;\n";
        code += "uniform float light" + i + "_shadowIntensity;\n";

        if (lightType === LIGHTTYPE_DIRECTIONAL) {
          code += "uniform mat4 light" + i + "_shadowMatrixPalette[4];\n";
          code += "uniform float light" + i + "_shadowCascadeDistances[4];\n";
          code += "uniform float light" + i + "_shadowCascadeCount;\n";
        }

        if (lightType !== LIGHTTYPE_DIRECTIONAL) {
          code += "uniform vec4 light" + i + "_shadowParams;\n";
        } else {
          shadowedDirectionalLightUsed = true;
          code += "uniform vec3 light" + i + "_shadowParams;\n";
        }

        if (lightType === LIGHTTYPE_OMNI) {
          code += "uniform samplerCube light" + i + "_shadowMap;\n";
        } else {
          if (light._isPcf && device.webgl2) {
            code += "uniform sampler2DShadow light" + i + "_shadowMap;\n";
          } else {
            code += "uniform sampler2D light" + i + "_shadowMap;\n";
          }
        }

        numShadowLights++;
        shadowTypeUsed[light._shadowType] = true;
        if (light._isVsm) useVsm = true;
        if (light._isPcf && (device.webgl2 || device.extStandardDerivatives) && lightType === LIGHTTYPE_SPOT) usePerspZbufferShadow = true;
      }

      if (light._cookie) {
        if (light._cookie._cubemap) {
          if (lightType === LIGHTTYPE_OMNI) {
            code += "uniform samplerCube light" + i + "_cookie;\n";
            code += "uniform float light" + i + "_cookieIntensity;\n";
            if (!light.castShadows || options.noShadow) code += "uniform mat4 light" + i + "_shadowMatrix;\n";
          }
        } else {
          if (lightType === LIGHTTYPE_SPOT) {
            code += "uniform sampler2D light" + i + "_cookie;\n";
            code += "uniform float light" + i + "_cookieIntensity;\n";
            if (!light.castShadows || options.noShadow) code += "uniform mat4 light" + i + "_shadowMatrix;\n";

            if (light._cookieTransform) {
              code += "uniform vec4 light" + i + "_cookieMatrix;\n";
              code += "uniform vec2 light" + i + "_cookieOffset;\n";
            }
          }
        }
      }
    }

    code += "\n";
    const hasTBN = this.needsNormal && (options.normalMap || options.clearCoatNormalMap || options.enableGGXSpecular && !options.heightMap);

    if (hasTBN) {
      if (options.hasTangents) {
        code += options.fastTbn ? chunks.TBNfastPS : chunks.TBNPS;
      } else {
        if (device.extStandardDerivatives && (options.normalMap || options.clearCoatNormalMap)) {
          code += chunks.TBNderivativePS.replace(/\$UV/g, this.lightingUv);
        } else {
          code += chunks.TBNObjectSpacePS;
        }
      }
    }

    code += chunks.sphericalPS;
    code += chunks.decodePS;
    code += gammaCode(options.gamma, chunks);
    code += tonemapCode(options.toneMap, chunks);
    code += fogCode(options.fog, chunks);
    code += this.frontendCode;

    if (options.useCubeMapRotation) {
      code += "#define CUBEMAP_ROTATION\n";
    }

    if (this.needsNormal) {
      code += chunks.cubeMapRotatePS;
      code += options.cubeMapProjection > 0 ? chunks.cubeMapProjectBoxPS : chunks.cubeMapProjectNonePS;
      code += options.skyboxIntensity ? chunks.envMultiplyPS : chunks.envConstPS;
    }

    if (this.lighting && options.useSpecular || this.reflections) {
      if (options.useMetalness) {
        code += chunks.metalnessModulatePS;
      }

      if (options.fresnelModel === FRESNEL_SCHLICK) {
        code += chunks.fresnelSchlickPS;
      }

      if (options.iridescence) {
        code += chunks.iridescenceDiffractionPS;
      }
    }

    const useAo = options.aoMap || options.aoVertexColor;

    if (useAo) {
      code += chunks.aoDiffuseOccPS;

      switch (options.occludeSpecular) {
        case SPECOCC_AO:
          code += options.occludeSpecularFloat ? chunks.aoSpecOccSimplePS : chunks.aoSpecOccConstSimplePS;
          break;

        case SPECOCC_GLOSSDEPENDENT:
          code += options.occludeSpecularFloat ? chunks.aoSpecOccPS : chunks.aoSpecOccConstPS;
          break;
      }
    }

    if (options.reflectionSource === 'envAtlasHQ') {
      code += options.fixSeams ? chunks.fixCubemapSeamsStretchPS : chunks.fixCubemapSeamsNonePS;
      code += chunks.envAtlasPS;
      code += chunks.reflectionEnvHQPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.reflectionEncoding));
    } else if (options.reflectionSource === 'envAtlas') {
      code += chunks.envAtlasPS;
      code += chunks.reflectionEnvPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.reflectionEncoding));
    } else if (options.reflectionSource === 'cubeMap') {
      code += options.fixSeams ? chunks.fixCubemapSeamsStretchPS : chunks.fixCubemapSeamsNonePS;
      code += chunks.reflectionCubePS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.reflectionEncoding));
    } else if (options.reflectionSource === 'sphereMap') {
      const scode = device.fragmentUniformsCount > 16 ? chunks.reflectionSpherePS : chunks.reflectionSphereLowPS;
      code += scode.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.reflectionEncoding));
    }

    if (this.reflections) {
      if (options.clearCoat) {
        code += chunks.reflectionCCPS;
      }

      if (options.sheen) {
        code += chunks.reflectionSheenPS;
      }
    }

    if (options.refraction) {
      if (options.useDynamicRefraction) {
        code += chunks.refractionDynamicPS;
      } else if (this.reflections) {
        code += chunks.refractionCubePS;
      }
    }

    if (options.sheen) {
      code += chunks.lightSheenPS;
    }

    if (options.clusteredLightingEnabled) {
      code += chunks.clusteredLightUtilsPS;
      if (options.clusteredLightingCookiesEnabled) code += chunks.clusteredLightCookiesPS;

      if (options.clusteredLightingShadowsEnabled && !options.noShadow) {
        shadowTypeUsed[SHADOW_PCF3] = true;
        shadowTypeUsed[SHADOW_PCF5] = true;
      }

      usePerspZbufferShadow = true;
    }

    if (numShadowLights > 0 || options.clusteredLightingEnabled) {
      if (shadowedDirectionalLightUsed) {
        code += chunks.shadowCascadesPS;
      }

      if (shadowTypeUsed[SHADOW_PCF3]) {
        code += chunks.shadowStandardPS;
      }

      if (shadowTypeUsed[SHADOW_PCF5] && device.webgl2) {
        code += chunks.shadowStandardGL2PS;
      }

      if (useVsm) {
        code += chunks.shadowVSM_commonPS;

        if (shadowTypeUsed[SHADOW_VSM8]) {
          code += chunks.shadowVSM8PS;
        }

        if (shadowTypeUsed[SHADOW_VSM16]) {
          code += device.extTextureHalfFloatLinear ? chunks.shadowEVSMPS.replace(/\$/g, "16") : chunks.shadowEVSMnPS.replace(/\$/g, "16");
        }

        if (shadowTypeUsed[SHADOW_VSM32]) {
          code += device.extTextureFloatLinear ? chunks.shadowEVSMPS.replace(/\$/g, "32") : chunks.shadowEVSMnPS.replace(/\$/g, "32");
        }
      }

      if (!(device.webgl2 || device.extStandardDerivatives)) {
        code += chunks.biasConstPS;
      }

      code += chunks.shadowCoordPS + chunks.shadowCommonPS;
      if (usePerspZbufferShadow) code += chunks.shadowCoordPerspZbufferPS;
    }

    if (options.enableGGXSpecular) code += "uniform float material_anisotropy;\n";

    if (this.lighting) {
      code += chunks.lightDiffuseLambertPS;
      if (hasAreaLights || options.clusteredLightingEnabled) code += chunks.ltc;
    }

    code += '\n';
    let useOldAmbient = false;

    if (options.useSpecular) {
      if (this.lighting) {
        code += options.shadingModel === SPECULAR_PHONG ? chunks.lightSpecularPhongPS : options.enableGGXSpecular ? chunks.lightSpecularAnisoGGXPS : chunks.lightSpecularBlinnPS;
      }

      if (!options.fresnelModel && !this.reflections && !options.diffuseMap) {
        code += "    uniform vec3 material_ambient;\n";
        code += "#define LIT_OLD_AMBIENT";
        useOldAmbient = true;
      }
    }

    code += chunks.combinePS;

    if (options.lightMap || options.lightVertexColor) {
      code += options.useSpecular && options.dirLightMap ? chunks.lightmapDirAddPS : chunks.lightmapAddPS;
    }

    const addAmbient = !options.lightMap && !options.lightVertexColor || options.lightMapWithoutAmbient;

    if (addAmbient) {
      if (options.ambientSource === 'ambientSH') {
        code += chunks.ambientSHPS;
      } else if (options.ambientSource === 'envAtlas') {
        if (options.reflectionSource !== 'envAtlas' && options.reflectionSource !== 'envAtlasHQ') {
          code += chunks.envAtlasPS;
        }

        code += chunks.ambientEnvPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.ambientEncoding));
      } else {
        code += chunks.ambientConstantPS;
      }
    }

    if (options.ambientTint && !useOldAmbient) {
      code += "uniform vec3 material_ambient;\n";
    }

    if (options.msdf) {
      if (!options.msdfTextAttribute) {
        code += "\n#define UNIFORM_TEXT_PARAMETERS";
      }

      code += chunks.msdfPS;
    }

    if (this.needsNormal) {
      code += chunks.viewDirPS;

      if (options.useSpecular) {
        code += options.enableGGXSpecular ? chunks.reflDirAnisoPS : chunks.reflDirPS;
      }
    }

    let hasPointLights = false;
    let usesLinearFalloff = false;
    let usesInvSquaredFalloff = false;
    let usesSpot = false;
    let usesCookie = false;
    let usesCookieNow;

    if (options.clusteredLightingEnabled && this.lighting) {
      usesSpot = true;
      hasPointLights = true;
      usesLinearFalloff = true;
      usesCookie = true;
      code += chunks.floatUnpackingPS;
      if (options.lightMaskDynamic) code += "\n#define CLUSTER_MESH_DYNAMIC_LIGHTS";
      if (options.clusteredLightingCookiesEnabled) code += "\n#define CLUSTER_COOKIES";

      if (options.clusteredLightingShadowsEnabled && !options.noShadow) {
        code += "\n#define CLUSTER_SHADOWS";
        code += "\n#define CLUSTER_SHADOW_TYPE_" + shadowTypeToString[options.clusteredLightingShadowType];
      }

      if (options.clusteredLightingAreaLightsEnabled) code += "\n#define CLUSTER_AREALIGHTS";
      code += LightsBuffer.shaderDefines;

      if (options.clusteredLightingShadowsEnabled && !options.noShadow) {
        code += chunks.clusteredLightShadowsPS;
      }

      code += chunks.clusteredLightPS;
    }

    if (options.twoSidedLighting) code += "uniform float twoSidedLightingNegScaleFactor;\n";
    code += this._fsGetStartCode(code, device, chunks, options);

    if (this.needsNormal) {
      if (options.twoSidedLighting) {
        code += "    dVertexNormalW = normalize(gl_FrontFacing ? vNormalW * twoSidedLightingNegScaleFactor : -vNormalW * twoSidedLightingNegScaleFactor);\n";
      } else {
        code += "    dVertexNormalW = normalize(vNormalW);\n";
      }

      if ((options.heightMap || options.normalMap) && options.hasTangents) {
        if (options.twoSidedLighting) {
          code += "    dTangentW = gl_FrontFacing ? vTangentW * twoSidedLightingNegScaleFactor : -vTangentW * twoSidedLightingNegScaleFactor;\n";
          code += "    dBinormalW = gl_FrontFacing ? vBinormalW * twoSidedLightingNegScaleFactor : -vBinormalW * twoSidedLightingNegScaleFactor;\n";
        } else {
          code += "    dTangentW = vTangentW;\n";
          code += "    dBinormalW = vBinormalW;\n";
        }
      }

      code += "    getViewDir();\n";

      if (hasTBN) {
        code += "    getTBN();\n";
      }
    }

    code += this.frontendFunc;

    if (this.needsNormal) {
      if (options.useSpecular) {
        code += "    getReflDir();\n";
      }

      if (options.clearCoat) {
        code += "    ccReflDirW = normalize(-reflect(dViewDirW, ccNormalW));\n";
      }
    }

    if (this.lighting && options.useSpecular || this.reflections) {
      if (options.useMetalness) {
        code += "    getMetalnessModulate();\n";
      }

      if (options.iridescence) {
        code += "    getIridescence(saturate(dot(dViewDirW, dNormalW)));\n";
      }
    }

    if (addAmbient) {
      code += "    addAmbient();\n";

      if (options.separateAmbient) {
        code += `
                    vec3 dAmbientLight = dDiffuseLight;
                    dDiffuseLight = vec3(0);
                `;
      }
    }

    if (options.ambientTint && !useOldAmbient) {
      code += "    dDiffuseLight *= material_ambient;\n";
    }

    if (useAo && !options.occludeDirect) {
      code += "    occludeDiffuse();\n";
    }

    if (options.lightMap || options.lightVertexColor) {
      code += "    addLightMap();\n";
    }

    if (this.lighting || this.reflections) {
      if (this.reflections) {
        if (options.clearCoat) {
          code += "    addReflectionCC();\n";

          if (options.fresnelModel > 0) {
            code += "    ccFresnel = getFresnelCC(dot(dViewDirW, ccNormalW));\n";
            code += "    ccReflection.rgb *= ccFresnel;\n";
          } else {
            code += "    ccFresnel = 0.0;\n";
          }
        }

        if (options.useSpecularityFactor) {
          code += "    ccReflection.rgb *= dSpecularityFactor;\n";
        }

        if (options.sheen) {
          code += "    addReflectionSheen();\n";
        }

        code += "    addReflection();\n";

        if (options.fresnelModel > 0) {
          code += "    dReflection.rgb *= getFresnel(dot(dViewDirW, dNormalW), dSpecularity);\n";
        } else {
          code += "    dReflection.rgb *= dSpecularity;\n";
        }

        if (options.useSpecularityFactor) {
          code += "    dReflection.rgb *= dSpecularityFactor;\n";
        }
      }

      if (hasAreaLights) {
        code += "    dSpecularLight *= dSpecularity;\n";

        if (options.useSpecular) {
          code += "    calcLTCLightValues();\n";
        }
      }

      for (let i = 0; i < options.lights.length; i++) {
        const light = options.lights[i];
        const lightType = light._type;

        if (options.clusteredLightingEnabled && lightType !== LIGHTTYPE_DIRECTIONAL) {
          continue;
        }

        usesCookieNow = false;
        const lightShape = hasAreaLights && light._shape ? light.shape : LIGHTSHAPE_PUNCTUAL;
        const shapeString = hasAreaLights && light._shape ? this._getLightSourceShapeString(lightShape) : '';

        if (lightShape !== LIGHTSHAPE_PUNCTUAL) {
          code += "    calc" + shapeString + "LightValues(light" + i + "_position, light" + i + "_halfWidth, light" + i + "_halfHeight);\n";
        }

        if (lightType === LIGHTTYPE_DIRECTIONAL) {
          code += "    dLightDirNormW = light" + i + "_direction;\n";
          code += "    dAtten = 1.0;\n";
        } else {
          if (light._cookie) {
            if (lightType === LIGHTTYPE_SPOT && !light._cookie._cubemap) {
              usesCookie = true;
              usesCookieNow = true;
            } else if (lightType === LIGHTTYPE_OMNI && light._cookie._cubemap) {
              usesCookie = true;
              usesCookieNow = true;
            }
          }

          code += "    getLightDirPoint(light" + i + "_position);\n";
          hasPointLights = true;

          if (usesCookieNow) {
            if (lightType === LIGHTTYPE_SPOT) {
              code += "    dAtten3 = getCookie2D" + (light._cookieFalloff ? "" : "Clip") + (light._cookieTransform ? "Xform" : "") + "(light" + i + "_cookie, light" + i + "_shadowMatrix, light" + i + "_cookieIntensity" + (light._cookieTransform ? ", light" + i + "_cookieMatrix, light" + i + "_cookieOffset" : "") + ")." + light._cookieChannel + ";\n";
            } else {
              code += "    dAtten3 = getCookieCube(light" + i + "_cookie, light" + i + "_shadowMatrix, light" + i + "_cookieIntensity)." + light._cookieChannel + ";\n";
            }
          }

          if (lightShape === LIGHTSHAPE_PUNCTUAL) {
            if (light._falloffMode === LIGHTFALLOFF_LINEAR) {
              code += "    dAtten = getFalloffLinear(light" + i + "_radius);\n";
              usesLinearFalloff = true;
            } else {
              code += "    dAtten = getFalloffInvSquared(light" + i + "_radius);\n";
              usesInvSquaredFalloff = true;
            }
          } else {
            code += "    dAtten = getFalloffWindow(light" + i + "_radius);\n";
            usesInvSquaredFalloff = true;
          }

          code += "    if (dAtten > 0.00001) {\n";

          if (lightType === LIGHTTYPE_SPOT) {
            if (!(usesCookieNow && !light._cookieFalloff)) {
              code += "    dAtten *= getSpotEffect(light" + i + "_direction, light" + i + "_innerConeAngle, light" + i + "_outerConeAngle);\n";
              usesSpot = true;
            }
          }
        }

        if (lightShape !== LIGHTSHAPE_PUNCTUAL) {
          if (lightType === LIGHTTYPE_DIRECTIONAL) {
            code += "    dAttenD = getLightDiffuse();\n";
          } else {
            code += "    dAttenD = get" + shapeString + "LightDiffuse() * 16.0;\n";
          }
        } else {
          code += "    dAtten *= getLightDiffuse();\n";
        }

        if (light.castShadows && !options.noShadow) {
          let shadowReadMode = null;
          let evsmExp;

          if (light._shadowType === SHADOW_VSM8) {
            shadowReadMode = "VSM8";
            evsmExp = "0.0";
          } else if (light._shadowType === SHADOW_VSM16) {
            shadowReadMode = "VSM16";
            evsmExp = "5.54";
          } else if (light._shadowType === SHADOW_VSM32) {
            shadowReadMode = "VSM32";

            if (device.textureFloatHighPrecision) {
              evsmExp = "15.0";
            } else {
              evsmExp = "5.54";
            }
          } else if (light._shadowType === SHADOW_PCF5) {
            shadowReadMode = "PCF5x5";
          } else {
            shadowReadMode = "PCF3x3";
          }

          if (shadowReadMode !== null) {
            if (lightType === LIGHTTYPE_OMNI) {
              const shadowCoordArgs = "(light" + i + "_shadowMap, light" + i + "_shadowParams);\n";

              if (light._normalOffsetBias) {
                code += "    normalOffsetPointShadow(light" + i + "_shadowParams);\n";
              }

              code += `    float shadow${i} = getShadowPoint${shadowReadMode}${shadowCoordArgs}`;
              code += `    dAtten *= mix(1.0, shadow${i}, light${i}_shadowIntensity);\n`;
            } else {
              const shadowMatArg = `light${i}_shadowMatrix`;
              const shadowParamArg = `light${i}_shadowParams`;
              code += this._nonPointShadowMapProjection(device, options.lights[i], shadowMatArg, shadowParamArg, i);
              if (lightType === LIGHTTYPE_SPOT) shadowReadMode = "Spot" + shadowReadMode;
              code += `    float shadow${i} = getShadow${shadowReadMode}(light${i}_shadowMap, light${i}_shadowParams${light._isVsm ? ", " + evsmExp : ""});\n`;
              code += `    dAtten *= mix(1.0, shadow${i}, light${i}_shadowIntensity);\n`;
            }
          }
        }

        if (lightShape !== LIGHTSHAPE_PUNCTUAL) {
          if (options.conserveEnergy && options.useSpecular) {
            code += "    dDiffuseLight += mix((dAttenD * dAtten) * light" + i + "_color" + (usesCookieNow ? " * dAtten3" : "") + ", vec3(0), dLTCSpecFres);\n";
          } else {
            code += "    dDiffuseLight += (dAttenD * dAtten) * light" + i + "_color" + (usesCookieNow ? " * dAtten3" : "") + ";\n";
          }
        } else {
          if (hasAreaLights && options.conserveEnergy && options.useSpecular) {
            code += "    dDiffuseLight += mix(dAtten * light" + i + "_color" + (usesCookieNow ? " * dAtten3" : "") + ", vec3(0), dSpecularity);\n";
          } else {
            code += "    dDiffuseLight += dAtten * light" + i + "_color" + (usesCookieNow ? " * dAtten3" : "") + ";\n";
          }
        }

        if (options.useSpecular) {
          code += "    dHalfDirW = normalize(-dLightDirNormW + dViewDirW);\n";
        }

        if (lightShape !== LIGHTSHAPE_PUNCTUAL) {
          if (options.clearCoat) code += "    ccSpecularLight += ccLTCSpecFres * get" + shapeString + "LightSpecularCC() * dAtten * light" + i + "_color" + (usesCookieNow ? " * dAtten3" : "") + ";\n";
          if (options.useSpecular) code += "    dSpecularLight += dLTCSpecFres * get" + shapeString + "LightSpecular() * dAtten * light" + i + "_color" + (usesCookieNow ? " * dAtten3" : "") + ";\n";
        } else {
          var calcFresnel = false;

          if (lightType === LIGHTTYPE_DIRECTIONAL && options.fresnelModel > 0) {
            calcFresnel = true;
          }

          if (options.clearCoat) {
            code += "    ccSpecularLight += getLightSpecularCC(dHalfDirW) * dAtten * light" + i + "_color";
            code += usesCookieNow ? " * dAtten3" : "";
            code += calcFresnel ? " * getFresnelCC(dot(dViewDirW, dHalfDirW))" : "";
            code += ";\n";
          }

          if (options.sheen) {
            code += "    sSpecularLight += getLightSpecularSheen(dHalfDirW) * dAtten * light" + i + "_color";
            code += usesCookieNow ? " * dAtten3" : "";
            code += ";\n";
          }

          if (options.useSpecular) {
            code += "    dSpecularLight += getLightSpecular(dHalfDirW) * dAtten * light" + i + "_color";
            code += usesCookieNow ? " * dAtten3" : "";
            code += calcFresnel ? " * getFresnel(dot(dViewDirW, dHalfDirW), dSpecularity)" : "";
            code += ";\n";
          }
        }

        if (lightType !== LIGHTTYPE_DIRECTIONAL) {
          code += "    }\n";
        }

        code += "\n";
      }

      if (options.clusteredLightingEnabled && this.lighting) {
        usesLinearFalloff = true;
        usesInvSquaredFalloff = true;
        hasPointLights = true;
        code += "    addClusteredLights();\n";
      }

      if (hasAreaLights) {
        if (options.clearCoat) {
          code += "    ccSpecularity = 1.0;\n";
        }

        if (options.useSpecular) {
          code += "    dSpecularity = vec3(1);\n";
        }
      }

      if (options.refraction) {
        code += "    addRefraction();\n";
      }
    }

    code += "\n";

    if (useAo) {
      if (options.occludeDirect) {
        code += "    occludeDiffuse();\n";
      }

      if (options.occludeSpecular === SPECOCC_AO || options.occludeSpecular === SPECOCC_GLOSSDEPENDENT) {
        code += "    occludeSpecular();\n";
      }
    }

    if (options.useSpecularityFactor) {
      code += "    dSpecularLight *= dSpecularityFactor;\n";
    }

    if (options.opacityFadesSpecular === false) {
      if (options.blendType === BLEND_NORMAL || options.blendType === BLEND_PREMULTIPLIED) {
        code += "float specLum = dot((dSpecularLight + dReflection.rgb * dReflection.a), vec3( 0.2126, 0.7152, 0.0722 ));\n";
        code += "#ifdef LIT_CLEARCOAT\n specLum += dot(ccSpecularLight * ccSpecularity + ccReflection.rgb * ccSpecularity, vec3( 0.2126, 0.7152, 0.0722 ));\n#endif\n";
        code += "dAlpha = clamp(dAlpha + gammaCorrectInput(specLum), 0.0, 1.0);\n";
      }

      code += "dAlpha *= material_alphaFade;\n";
    }

    code += chunks.endPS;

    if (options.blendType === BLEND_NORMAL || options.blendType === BLEND_ADDITIVEALPHA || options.alphaToCoverage) {
      code += chunks.outputAlphaPS;
    } else if (options.blendType === BLEND_PREMULTIPLIED) {
      code += chunks.outputAlphaPremulPS;
    } else {
      code += chunks.outputAlphaOpaquePS;
    }

    if (options.msdf) {
      code += "    gl_FragColor = applyMsdf(gl_FragColor);\n";
    }

    code += "\n";
    code += end();

    if (hasPointLights) {
      code = chunks.lightDirPointPS + code;
    }

    if (usesLinearFalloff) {
      code = chunks.falloffLinearPS + code;
    }

    if (usesInvSquaredFalloff) {
      code = chunks.falloffInvSquaredPS + code;
    }

    if (usesSpot) {
      code = chunks.spotPS + code;
    }

    if (usesCookie && !options.clusteredLightingEnabled) {
      code = chunks.cookiePS + code;
    }

    let structCode = "";
    if (code.includes("dReflection")) structCode += "vec4 dReflection;\n";
    if (code.includes("dTBN")) structCode += "mat3 dTBN;\n";
    if (code.includes("dVertexNormalW")) structCode += "vec3 dVertexNormalW;\n";
    if (code.includes("dTangentW")) structCode += "vec3 dTangentW;\n";
    if (code.includes("dBinormalW")) structCode += "vec3 dBinormalW;\n";
    if (code.includes("dViewDirW")) structCode += "vec3 dViewDirW;\n";
    if (code.includes("dReflDirW")) structCode += "vec3 dReflDirW;\n";
    if (code.includes("dHalfDirW")) structCode += "vec3 dHalfDirW;\n";
    if (code.includes("dDiffuseLight")) structCode += "vec3 dDiffuseLight;\n";
    if (code.includes("dSpecularLight")) structCode += "vec3 dSpecularLight;\n";
    if (code.includes("dLightDirNormW")) structCode += "vec3 dLightDirNormW;\n";
    if (code.includes("dLightDirW")) structCode += "vec3 dLightDirW;\n";
    if (code.includes("dLightPosW")) structCode += "vec3 dLightPosW;\n";
    if (code.includes("dShadowCoord")) structCode += "vec3 dShadowCoord;\n";
    if (code.includes("dAtten")) structCode += "float dAtten;\n";
    if (code.includes("dAttenD")) structCode += "float dAttenD;\n";
    if (code.includes("dAtten3")) structCode += "vec3 dAtten3;\n";
    if (code.includes("dMsdf")) structCode += "vec4 dMsdf;\n";
    if (code.includes("ccFresnel")) structCode += "float ccFresnel;\n";
    if (code.includes("ccReflection")) structCode += "vec3 ccReflection;\n";
    if (code.includes("ccReflDirW")) structCode += "vec3 ccReflDirW;\n";
    if (code.includes("ccSpecularLight")) structCode += "vec3 ccSpecularLight;\n";
    if (code.includes("ccSpecularityNoFres")) structCode += "float ccSpecularityNoFres;\n";
    if (code.includes("sSpecularLight")) structCode += "vec3 sSpecularLight;\n";
    if (code.includes("sReflection")) structCode += "vec3 sReflection;\n";
    const result = this._fsGetBeginCode() + this.varyings + this._fsGetBaseCode() + (options.detailModes ? chunks.detailModesPS : "") + structCode + this.frontendDecl + code;
    return result;
  }

  generateFragmentShader(frontendDecl, frontendCode, frontendFunc, lightingUv) {
    const options = this.options;
    this.frontendDecl = frontendDecl;
    this.frontendCode = frontendCode;
    this.frontendFunc = frontendFunc;
    this.lightingUv = lightingUv;

    if (options.pass === SHADER_PICK) {
      this.fshader = this._fsGetPickPassCode();
    } else if (options.pass === SHADER_DEPTH) {
      this.fshader = this._fsGetDepthPassCode();
    } else if (this.shadowPass) {
      this.fshader = this._fsGetShadowPassCode();
    } else if (options.customFragmentShader) {
      this.fshader = this._fsGetBeginCode() + options.customFragmentShader;
    } else {
      this.fshader = this._fsGetLitPassCode();
    }
  }

  getDefinition() {
    const result = {
      attributes: this.attributes,
      vshader: this.vshader,
      fshader: this.fshader
    };

    if (ShaderPass.isForward(this.options.pass)) {
      result.tag = SHADERTAG_MATERIAL;
    }

    return result;
  }

}

class ChunkBuilder {
  constructor() {
    this.code = '';
  }

  append(...chunks) {
    chunks.forEach(chunk => {
      if (chunk.endsWith('\n')) {
        this.code += chunk;
      } else {
        this.code += chunk + '\n';
      }
    });
  }

  prepend(...chunks) {
    chunks.forEach(chunk => {
      if (chunk.endsWith('\n')) {
        this.code = chunk + this.code;
      } else {
        this.code = chunk + '\n' + this.code;
      }
    });
  }

}

const _matTex2D = [];
const standard = {
  optionsContext: {},
  optionsContextMin: {},
  generateKey: function (options) {
    const buildPropertiesList = function buildPropertiesList(options) {
      const props = [];

      for (const prop in options) {
        if (options.hasOwnProperty(prop) && prop !== "chunks" && prop !== "lights") props.push(prop);
      }

      return props.sort();
    };

    let props;

    if (options === this.optionsContextMin) {
      if (!this.propsMin) this.propsMin = buildPropertiesList(options);
      props = this.propsMin;
    } else if (options === this.optionsContext) {
      if (!this.props) this.props = buildPropertiesList(options);
      props = this.props;
    } else {
      props = buildPropertiesList(options);
    }

    let key = "standard";

    for (let i = 0; i < props.length; i++) {
      if (options[props[i]]) key += props[i] + options[props[i]];
    }

    if (options.chunks) {
      const chunks = [];

      for (const p in options.chunks) {
        if (options.chunks.hasOwnProperty(p)) {
          chunks.push(p + options.chunks[p]);
        }
      }

      chunks.sort();
      key += chunks;
    }

    if (options.lights) {
      const isClustered = options.clusteredLightingEnabled;

      for (let i = 0; i < options.lights.length; i++) {
        const light = options.lights[i];

        if (!isClustered || light._type === LIGHTTYPE_DIRECTIONAL) {
          key += light.key;
        }
      }
    }

    return hashCode(key);
  },
  _getUvSourceExpression: function (transformPropName, uVPropName, options) {
    const transformId = options[transformPropName];
    const uvChannel = options[uVPropName];
    const isMainPass = ShaderPass.isForward(options.pass);
    let expression;

    if (isMainPass && options.nineSlicedMode === SPRITE_RENDERMODE_SLICED) {
      expression = "nineSlicedUv";
    } else if (isMainPass && options.nineSlicedMode === SPRITE_RENDERMODE_TILED) {
      expression = "nineSlicedUv";
    } else {
      if (transformId === 0) {
        expression = "vUv" + uvChannel;
      } else {
        expression = "vUV" + uvChannel + "_" + transformId;
      }

      if (options.heightMap && transformPropName !== "heightMapTransform") {
        expression += " + dUvOffset";
      }
    }

    return expression;
  },
  _addMapDef: function (name, enabled) {
    return enabled ? `#define ${name}\n` : `#undef ${name}\n`;
  },
  _addMapDefs: function (float, color, vertex, map) {
    return this._addMapDef("MAPFLOAT", float) + this._addMapDef("MAPCOLOR", color) + this._addMapDef("MAPVERTEX", vertex) + this._addMapDef("MAPTEXTURE", map);
  },
  _addMap: function (propName, chunkName, options, chunks, mapping, encoding = null) {
    const mapPropName = propName + "Map";
    const uVPropName = mapPropName + "Uv";
    const identifierPropName = mapPropName + "Identifier";
    const transformPropName = mapPropName + "Transform";
    const channelPropName = mapPropName + "Channel";
    const vertexColorChannelPropName = propName + "VertexColorChannel";
    const tintPropName = propName + "Tint";
    const vertexColorPropName = propName + "VertexColor";
    const detailModePropName = propName + "Mode";
    const tintOption = options[tintPropName];
    const vertexColorOption = options[vertexColorPropName];
    const textureOption = options[mapPropName];
    const textureIdentifier = options[identifierPropName];
    const detailModeOption = options[detailModePropName];
    let subCode = chunks[chunkName];

    if (textureOption) {
      const uv = this._getUvSourceExpression(transformPropName, uVPropName, options);

      subCode = subCode.replace(/\$UV/g, uv).replace(/\$CH/g, options[channelPropName]);

      if (mapping && subCode.search(/\$SAMPLER/g) !== -1) {
        let samplerName = "texture_" + mapPropName;
        const alias = mapping[textureIdentifier];

        if (alias) {
          samplerName = alias;
        } else {
          mapping[textureIdentifier] = samplerName;
        }

        subCode = subCode.replace(/\$SAMPLER/g, samplerName);
      }

      if (encoding) {
        if (options[channelPropName] === 'aaa') {
          subCode = subCode.replace(/\$DECODE/g, 'passThrough');
        } else {
          subCode = subCode.replace(/\$DECODE/g, ChunkUtils.decodeFunc(!options.gamma && encoding === 'srgb' ? 'linear' : encoding));
        }

        if (subCode.indexOf('$texture2DSAMPLE')) {
          const decodeTable = {
            linear: 'texture2D',
            srgb: 'texture2DSRGB',
            rgbm: 'texture2DRGBM',
            rgbe: 'texture2DRGBE'
          };
          subCode = subCode.replace(/\$texture2DSAMPLE/g, decodeTable[encoding] || 'texture2D');
        }
      }
    }

    if (vertexColorOption) {
      subCode = subCode.replace(/\$VC/g, options[vertexColorChannelPropName]);
    }

    if (detailModeOption) {
      subCode = subCode.replace(/\$DETAILMODE/g, detailModeOption);
    }

    const isFloatTint = !!(tintOption & 1);
    const isVecTint = !!(tintOption & 2);
    subCode = this._addMapDefs(isFloatTint, isVecTint, vertexColorOption, textureOption) + subCode;
    return subCode.replace(/\$/g, "");
  },
  _correctChannel: function (p, chan, _matTex2D) {
    if (_matTex2D[p] > 0) {
      if (_matTex2D[p] < chan.length) {
        return chan.substring(0, _matTex2D[p]);
      } else if (_matTex2D[p] > chan.length) {
        let str = chan;
        const chr = str.charAt(str.length - 1);
        const addLen = _matTex2D[p] - str.length;

        for (let i = 0; i < addLen; i++) str += chr;

        return str;
      }

      return chan;
    }
  },
  createShaderDefinition: function (device, options) {
    const litShader = new LitShader(device, options);
    const useUv = [];
    const useUnmodifiedUv = [];
    const mapTransforms = [];
    const maxUvSets = 2;
    const textureMapping = {};

    for (const p in _matTex2D) {
      const mname = p + "Map";

      if (options[p + "VertexColor"]) {
        const cname = p + "VertexColorChannel";
        options[cname] = this._correctChannel(p, options[cname], _matTex2D);
      }

      if (options[mname]) {
        const cname = mname + "Channel";
        const tname = mname + "Transform";
        const uname = mname + "Uv";
        options[uname] = Math.min(options[uname], maxUvSets - 1);
        options[cname] = this._correctChannel(p, options[cname], _matTex2D);
        const uvSet = options[uname];
        useUv[uvSet] = true;
        useUnmodifiedUv[uvSet] = useUnmodifiedUv[uvSet] || options[mname] && !options[tname];

        if (options[tname]) {
          mapTransforms.push({
            name: p,
            id: options[tname],
            uv: options[uname]
          });
        }
      }
    }

    if (options.forceUv1) {
      useUv[1] = true;
      useUnmodifiedUv[1] = useUnmodifiedUv[1] !== undefined ? useUnmodifiedUv[1] : true;
    }

    litShader.generateVertexShader(useUv, useUnmodifiedUv, mapTransforms);

    if (options.shadingModel === SPECULAR_PHONG) {
      options.fresnelModel = 0;
      options.ambientSH = false;
    } else {
      options.fresnelModel = options.fresnelModel === 0 ? FRESNEL_SCHLICK : options.fresnelModel;
    }

    const decl = new ChunkBuilder();
    const code = new ChunkBuilder();
    const func = new ChunkBuilder();
    let lightingUv = "";

    if (options.nineSlicedMode === SPRITE_RENDERMODE_TILED) {
      decl.append(`const float textureBias = -1000.0;`);
    } else {
      decl.append(`uniform float textureBias;`);
    }

    if (ShaderPass.isForward(options.pass)) {
      if (options.heightMap) {
        decl.append("vec2 dUvOffset;");
        code.append(this._addMap("height", "parallaxPS", options, litShader.chunks, textureMapping));
        func.append("getParallax();");
      }

      if (options.blendType !== BLEND_NONE || options.alphaTest || options.alphaToCoverage) {
        decl.append("float dAlpha;");
        code.append(this._addMap("opacity", "opacityPS", options, litShader.chunks, textureMapping));
        func.append("getOpacity();");

        if (options.alphaTest) {
          code.append(litShader.chunks.alphaTestPS);
          func.append("alphaTest(dAlpha);");
        }
      } else {
        decl.append("float dAlpha = 1.0;");
      }

      if (litShader.needsNormal) {
        if (options.normalMap || options.clearCoatNormalMap) {
          code.append(options.packedNormal ? litShader.chunks.normalXYPS : litShader.chunks.normalXYZPS);

          if (!options.hasTangents) {
            const baseName = options.normalMap ? "normalMap" : "clearCoatNormalMap";
            lightingUv = this._getUvSourceExpression(`${baseName}Transform`, `${baseName}Uv`, options);
          }
        }

        decl.append("vec3 dNormalW;");
        code.append(this._addMap("normalDetail", "normalDetailMapPS", options, litShader.chunks, textureMapping));
        code.append(this._addMap("normal", "normalMapPS", options, litShader.chunks, textureMapping));
        func.append("getNormal();");
      }

      if (litShader.needsSceneColor) {
        decl.append("uniform sampler2D uSceneColorMap;");
      }

      if (litShader.needsScreenSize) {
        decl.append("uniform vec4 uScreenSize;");
      }

      if (litShader.needsTransforms) {
        decl.append("uniform mat4 matrix_viewProjection;");
        decl.append("uniform mat4 matrix_model;");
      }

      decl.append("vec3 dAlbedo;");

      if (options.diffuseDetail) {
        code.append(this._addMap("diffuseDetail", "diffuseDetailMapPS", options, litShader.chunks, textureMapping, options.diffuseDetailEncoding));
      }

      code.append(this._addMap("diffuse", "diffusePS", options, litShader.chunks, textureMapping, options.diffuseEncoding));
      func.append("getAlbedo();");

      if (options.refraction) {
        decl.append("float dTransmission;");
        code.append(this._addMap("refraction", "transmissionPS", options, litShader.chunks, textureMapping));
        func.append("getRefraction();");
        decl.append("float dThickness;");
        code.append(this._addMap("thickness", "thicknessPS", options, litShader.chunks, textureMapping));
        func.append("getThickness();");
      }

      if (options.iridescence) {
        decl.append("vec3 dIridescenceFresnel;");
        decl.append("float dIridescence;");
        code.append(this._addMap("iridescence", "iridescencePS", options, litShader.chunks, textureMapping));
        func.append("getIridescence();");
        decl.append("float dIridescenceThickness;");
        code.append(this._addMap("iridescenceThickness", "iridescenceThicknessPS", options, litShader.chunks, textureMapping));
        func.append("getIridescenceThickness();");
      }

      if (litShader.lighting && options.useSpecular || litShader.reflections) {
        decl.append("vec3 dSpecularity;");
        decl.append("float dGlossiness;");

        if (options.sheen) {
          decl.append("vec3 sSpecularity;");
          code.append(this._addMap("sheen", "sheenPS", options, litShader.chunks, textureMapping, options.sheenEncoding));
          func.append("getSheen();");
          decl.append("float sGlossiness;");
          code.append(this._addMap("sheenGlossiness", "sheenGlossPS", options, litShader.chunks, textureMapping));
          func.append("getSheenGlossiness();");
        }

        if (options.useMetalness) {
          decl.append("float dMetalness;");
          code.append(this._addMap("metalness", "metalnessPS", options, litShader.chunks, textureMapping));
          func.append("getMetalness();");
        }

        if (options.useSpecularityFactor) {
          decl.append("float dSpecularityFactor;");
          code.append(this._addMap("specularityFactor", "specularityFactorPS", options, litShader.chunks, textureMapping));
          func.append("getSpecularityFactor();");
        }

        if (options.useSpecularColor) {
          code.append(this._addMap("specular", "specularPS", options, litShader.chunks, textureMapping, options.specularEncoding));
        } else {
          code.append("void getSpecularity() { dSpecularity = vec3(1); }");
        }

        code.append(this._addMap("gloss", "glossPS", options, litShader.chunks, textureMapping));
        func.append("getGlossiness();");
        func.append("getSpecularity();");
      } else {
        decl.append("vec3 dSpecularity = vec3(0.0);");
        decl.append("float dGlossiness = 0.0;");
      }

      if (options.aoMap || options.aoVertexColor) {
        decl.append("float dAo;");
        code.append(this._addMap("ao", "aoPS", options, litShader.chunks, textureMapping));
        func.append("getAO();");
      }

      decl.append("vec3 dEmission;");
      code.append(this._addMap("emissive", "emissivePS", options, litShader.chunks, textureMapping, options.emissiveEncoding));
      func.append("getEmission();");

      if (options.clearCoat > 0) {
        decl.append("float ccSpecularity;");
        decl.append("float ccGlossiness;");
        decl.append("vec3 ccNormalW;");
        code.append(this._addMap("clearCoat", "clearCoatPS", options, litShader.chunks, textureMapping));
        code.append(this._addMap("clearCoatGloss", "clearCoatGlossPS", options, litShader.chunks, textureMapping));
        code.append(this._addMap("clearCoatNormal", "clearCoatNormalPS", options, litShader.chunks, textureMapping));
        func.append("getClearCoat();");
        func.append("getClearCoatGlossiness();");
        func.append("getClearCoatNormal();");
      }

      if (options.lightMap || options.lightVertexColor) {
        const lightmapDir = options.dirLightMap && options.useSpecular;
        const lightmapChunkPropName = lightmapDir ? 'lightmapDirPS' : 'lightmapSinglePS';
        decl.append("vec3 dLightmap;");

        if (lightmapDir) {
          decl.append("vec3 dLightmapDir;");
        }

        code.append(this._addMap("light", lightmapChunkPropName, options, litShader.chunks, textureMapping, options.lightMapEncoding));
        func.append("getLightMap();");
      }

      if (code.code.indexOf('texture2DSRGB') !== -1 || code.code.indexOf('texture2DRGBM') !== -1 || code.code.indexOf('texture2DRGBE') !== -1) {
        code.prepend(litShader.chunks.textureSamplePS);
      }
    } else {
      if (options.alphaTest) {
        decl.append("float dAlpha;");
        code.append(this._addMap("opacity", "opacityPS", options, litShader.chunks, textureMapping));
        code.append(litShader.chunks.alphaTestPS);
        func.append("getOpacity();");
        func.append("alphaTest(dAlpha);");
      }
    }

    for (const texture in textureMapping) {
      decl.append(`uniform sampler2D ${textureMapping[texture]};`);
    }

    func.code = `\n${func.code.split('\n').map(l => `    ${l}`).join('\n')}\n\n`;
    litShader.generateFragmentShader(decl.code, code.code, func.code, lightingUv);
    return litShader.getDefinition();
  }
};

const _goldenAngle = 2.399963229728653;
const random = {
  circlePoint: function (point) {
    const r = Math.sqrt(Math.random());
    const theta = Math.random() * 2 * Math.PI;
    point.x = r * Math.cos(theta);
    point.y = r * Math.sin(theta);
  },
  circlePointDeterministic: function (point, index, numPoints) {
    const theta = index * _goldenAngle;
    const r = Math.sqrt(index) / Math.sqrt(numPoints);
    point.x = r * Math.cos(theta);
    point.y = r * Math.sin(theta);
  },
  spherePointDeterministic: function (point, index, numPoints, start = 0, end = 1) {
    start = 1 - 2 * start;
    end = 1 - 2 * end;
    const y = math$1.lerp(start, end, index / numPoints);
    const radius = Math.sqrt(1 - y * y);
    const theta = _goldenAngle * index;
    point.x = Math.cos(theta) * radius;
    point.y = y;
    point.z = Math.sin(theta) * radius;
  },
  radicalInverse: function (i) {
    let bits = (i << 16 | i >>> 16) >>> 0;
    bits = ((bits & 0x55555555) << 1 | (bits & 0xAAAAAAAA) >>> 1) >>> 0;
    bits = ((bits & 0x33333333) << 2 | (bits & 0xCCCCCCCC) >>> 2) >>> 0;
    bits = ((bits & 0x0F0F0F0F) << 4 | (bits & 0xF0F0F0F0) >>> 4) >>> 0;
    bits = ((bits & 0x00FF00FF) << 8 | (bits & 0xFF00FF00) >>> 8) >>> 0;
    return bits * 2.3283064365386963e-10;
  }
};

const getProjectionName = projection => {
  switch (projection) {
    case TEXTUREPROJECTION_CUBE:
      return "Cubemap";

    case TEXTUREPROJECTION_OCTAHEDRAL:
      return "Octahedral";

    default:
      return "Equirect";
  }
};

const packFloat32ToRGBA8 = (value, array, offset) => {
  if (value <= 0) {
    array[offset + 0] = 0;
    array[offset + 1] = 0;
    array[offset + 2] = 0;
    array[offset + 3] = 0;
  } else if (value >= 1.0) {
    array[offset + 0] = 255;
    array[offset + 1] = 0;
    array[offset + 2] = 0;
    array[offset + 3] = 0;
  } else {
    let encX = 1 * value % 1;
    let encY = 255 * value % 1;
    let encZ = 65025 * value % 1;
    const encW = 16581375.0 * value % 1;
    encX -= encY / 255;
    encY -= encZ / 255;
    encZ -= encW / 255;
    array[offset + 0] = Math.min(255, Math.floor(encX * 256));
    array[offset + 1] = Math.min(255, Math.floor(encY * 256));
    array[offset + 2] = Math.min(255, Math.floor(encZ * 256));
    array[offset + 3] = Math.min(255, Math.floor(encW * 256));
  }
};

const packSamples = samples => {
  const numSamples = samples.length;
  const w = Math.min(numSamples, 512);
  const h = Math.ceil(numSamples / w);
  const data = new Uint8Array(w * h * 4);
  let off = 0;

  for (let i = 0; i < numSamples; ++i) {
    packFloat32ToRGBA8(samples[i * 4 + 0] * 0.5 + 0.5, data, off + 0);
    packFloat32ToRGBA8(samples[i * 4 + 1] * 0.5 + 0.5, data, off + 4);
    packFloat32ToRGBA8(samples[i * 4 + 2] * 0.5 + 0.5, data, off + 8);
    packFloat32ToRGBA8(samples[i * 4 + 3] / 8, data, off + 12);
    off += 16;
  }

  return {
    width: w,
    height: h,
    data: data
  };
};

const hemisphereSamplePhong = (dstVec, x, y, specularPower) => {
  const phi = y * 2 * Math.PI;
  const cosTheta = Math.pow(1 - x, 1 / (specularPower + 1));
  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
  dstVec.set(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta).normalize();
};

const hemisphereSampleLambert = (dstVec, x, y) => {
  const phi = y * 2 * Math.PI;
  const cosTheta = Math.sqrt(1 - x);
  const sinTheta = Math.sqrt(x);
  dstVec.set(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta).normalize();
};

const hemisphereSampleGGX = (dstVec, x, y, a) => {
  const phi = y * 2 * Math.PI;
  const cosTheta = Math.sqrt((1 - x) / (1 + (a * a - 1) * x));
  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
  dstVec.set(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta).normalize();
};

const D_GGX = (NoH, linearRoughness) => {
  const a = NoH * linearRoughness;
  const k = linearRoughness / (1.0 - NoH * NoH + a * a);
  return k * k * (1 / Math.PI);
};

const generatePhongSamples = (numSamples, specularPower) => {
  const H = new Vec3();
  const result = [];

  for (let i = 0; i < numSamples; ++i) {
    hemisphereSamplePhong(H, i / numSamples, random.radicalInverse(i), specularPower);
    result.push(H.x, H.y, H.z, 0);
  }

  return result;
};

const generateLambertSamples = (numSamples, sourceTotalPixels) => {
  const pixelsPerSample = sourceTotalPixels / numSamples;
  const H = new Vec3();
  const result = [];

  for (let i = 0; i < numSamples; ++i) {
    hemisphereSampleLambert(H, i / numSamples, random.radicalInverse(i));
    const pdf = H.z / Math.PI;
    const mipLevel = 0.5 * Math.log2(pixelsPerSample / pdf);
    result.push(H.x, H.y, H.z, mipLevel);
  }

  return result;
};

const requiredSamplesGGX = {
  "16": {
    "2": 26,
    "8": 20,
    "32": 17,
    "128": 16,
    "512": 16
  },
  "32": {
    "2": 53,
    "8": 40,
    "32": 34,
    "128": 32,
    "512": 32
  },
  "128": {
    "2": 214,
    "8": 163,
    "32": 139,
    "128": 130,
    "512": 128
  },
  "1024": {
    "2": 1722,
    "8": 1310,
    "32": 1114,
    "128": 1041,
    "512": 1025
  }
};

const getRequiredSamplesGGX = (numSamples, specularPower) => {
  const table = requiredSamplesGGX[numSamples];
  return table && table[specularPower] || numSamples;
};

const generateGGXSamples = (numSamples, specularPower, sourceTotalPixels) => {
  const pixelsPerSample = sourceTotalPixels / numSamples;
  const roughness = 1 - Math.log2(specularPower) / 11.0;
  const a = roughness * roughness;
  const H = new Vec3();
  const L = new Vec3();
  const N = new Vec3(0, 0, 1);
  const result = [];
  const requiredSamples = getRequiredSamplesGGX(numSamples, specularPower);

  for (let i = 0; i < requiredSamples; ++i) {
    hemisphereSampleGGX(H, i / requiredSamples, random.radicalInverse(i), a);
    const NoH = H.z;
    L.set(H.x, H.y, H.z).mulScalar(2 * NoH).sub(N);

    if (L.z > 0) {
      const pdf = D_GGX(Math.min(1, NoH), a) / 4 + 0.001;
      const mipLevel = 0.5 * Math.log2(pixelsPerSample / pdf);
      result.push(L.x, L.y, L.z, mipLevel);
    }
  }

  while (result.length < numSamples * 4) {
    result.push(0, 0, 0, 0);
  }

  return result;
};

const createSamplesTex = (device, name, samples) => {
  const packedSamples = packSamples(samples);
  return new Texture(device, {
    name: name,
    width: packedSamples.width,
    height: packedSamples.height,
    mipmaps: false,
    minFilter: FILTER_NEAREST,
    magFilter: FILTER_NEAREST,
    levels: [packedSamples.data]
  });
};

class SimpleCache {
  constructor(destroyContent = true) {
    this.map = new Map();
    this.destroyContent = destroyContent;
  }

  destroy() {
    if (this.destroyContent) {
      this.map.forEach((value, key) => {
        value.destroy();
      });
    }
  }

  get(key, missFunc) {
    if (!this.map.has(key)) {
      const result = missFunc();
      this.map.set(key, result);
      return result;
    }

    return this.map.get(key);
  }

}

const samplesCache = new SimpleCache(false);
const deviceCache$1 = new DeviceCache();

const getCachedTexture = (device, key, getSamplesFnc) => {
  const cache = deviceCache$1.get(device, () => {
    return new SimpleCache();
  });
  return cache.get(key, () => {
    return createSamplesTex(device, key, samplesCache.get(key, getSamplesFnc));
  });
};

const generateLambertSamplesTex = (device, numSamples, sourceTotalPixels) => {
  const key = `lambert-samples-${numSamples}-${sourceTotalPixels}`;
  return getCachedTexture(device, key, () => {
    return generateLambertSamples(numSamples, sourceTotalPixels);
  });
};

const generatePhongSamplesTex = (device, numSamples, specularPower) => {
  const key = `phong-samples-${numSamples}-${specularPower}`;
  return getCachedTexture(device, key, () => {
    return generatePhongSamples(numSamples, specularPower);
  });
};

const generateGGXSamplesTex = (device, numSamples, specularPower, sourceTotalPixels) => {
  const key = `ggx-samples-${numSamples}-${specularPower}-${sourceTotalPixels}`;
  return getCachedTexture(device, key, () => {
    return generateGGXSamples(numSamples, specularPower, sourceTotalPixels);
  });
};

const vsCode = `
attribute vec2 vertex_position;

uniform vec4 uvMod;

varying vec2 vUv0;

void main(void) {
    gl_Position = vec4(vertex_position, 0.5, 1.0);
    vUv0 = (vertex_position.xy * 0.5 + 0.5) * uvMod.xy + uvMod.zw;
}
`;

function reprojectTexture(source, target, options = {}) {
  var _options;

  if (source instanceof GraphicsDevice) {
    source = arguments[1];
    target = arguments[2];
    options = {};

    if (arguments[3] !== undefined) {
      options.specularPower = arguments[3];
    }

    if (arguments[4] !== undefined) {
      options.numSamples = arguments[4];
    }
  }

  const funcNames = {
    'none': 'reproject',
    'lambert': 'prefilterSamplesUnweighted',
    'phong': 'prefilterSamplesUnweighted',
    'ggx': 'prefilterSamples'
  };
  const specularPower = options.hasOwnProperty('specularPower') ? options.specularPower : 1;
  const face = options.hasOwnProperty('face') ? options.face : null;
  const distribution = options.hasOwnProperty('distribution') ? options.distribution : specularPower === 1 ? 'none' : 'phong';
  const processFunc = funcNames[distribution] || 'reproject';
  const decodeFunc = ChunkUtils.decodeFunc(source.encoding);
  const encodeFunc = ChunkUtils.encodeFunc(target.encoding);
  const sourceFunc = `sample${getProjectionName(source.projection)}`;
  const targetFunc = `getDirection${getProjectionName(target.projection)}`;
  const numSamples = options.hasOwnProperty('numSamples') ? options.numSamples : 1024;
  const shaderKey = `${processFunc}_${decodeFunc}_${encodeFunc}_${sourceFunc}_${targetFunc}_${numSamples}`;
  const device = source.device;
  let shader = device.programLib._cache[shaderKey];

  if (!shader) {
    const defines = `#define PROCESS_FUNC ${processFunc}\n` + `#define DECODE_FUNC ${decodeFunc}\n` + `#define ENCODE_FUNC ${encodeFunc}\n` + `#define SOURCE_FUNC ${sourceFunc}\n` + `#define TARGET_FUNC ${targetFunc}\n` + `#define NUM_SAMPLES ${numSamples}\n` + `#define NUM_SAMPLES_SQRT ${Math.round(Math.sqrt(numSamples)).toFixed(1)}\n` + (device.extTextureLod ? `#define SUPPORTS_TEXLOD\n` : '');
    let extensions = '';

    if (!device.webgl2) {
      extensions = '#extension GL_OES_standard_derivatives: enable\n';

      if (device.extTextureLod) {
        extensions += '#extension GL_EXT_shader_texture_lod: enable\n\n';
      }
    }

    shader = createShaderFromCode(device, vsCode, `${defines}\n${shaderChunks.reprojectPS}`, shaderKey, false, extensions);
  }

  const constantSource = device.scope.resolve(source.cubemap ? "sourceCube" : "sourceTex");
  constantSource.setValue(source);
  const constantParams = device.scope.resolve("params");
  const constantParams2 = device.scope.resolve("params2");
  const uvModParam = device.scope.resolve("uvMod");

  if ((_options = options) != null && _options.seamPixels) {
    const p = options.seamPixels;
    const w = options.rect ? options.rect.z : target.width;
    const h = options.rect ? options.rect.w : target.height;
    const innerWidth = w - p * 2;
    const innerHeight = h - p * 2;
    uvModParam.setValue([(innerWidth + p * 2) / innerWidth, (innerHeight + p * 2) / innerHeight, -p / innerWidth, -p / innerHeight]);
  } else {
    uvModParam.setValue([1, 1, 0, 0]);
  }

  const params = [0, specularPower, source.fixCubemapSeams ? 1.0 / source.width : 0.0, target.fixCubemapSeams ? 1.0 / target.width : 0.0];
  const params2 = [target.width * target.height * (target.cubemap ? 6 : 1), source.width * source.height * (source.cubemap ? 6 : 1)];

  if (processFunc.startsWith('prefilterSamples')) {
    const sourceTotalPixels = source.width * source.height * (source.cubemap ? 6 : 1);
    const samplesTex = distribution === 'ggx' ? generateGGXSamplesTex(device, numSamples, specularPower, sourceTotalPixels) : distribution === 'lambert' ? generateLambertSamplesTex(device, numSamples, sourceTotalPixels) : generatePhongSamplesTex(device, numSamples, specularPower);
    device.scope.resolve("samplesTex").setValue(samplesTex);
    device.scope.resolve("samplesTexInverseSize").setValue([1.0 / samplesTex.width, 1.0 / samplesTex.height]);
  }

  for (let f = 0; f < (target.cubemap ? 6 : 1); f++) {
    if (face === null || f === face) {
      var _options2;

      const renderTarget = new RenderTarget({
        colorBuffer: target,
        face: f,
        depth: false
      });
      params[0] = f;
      constantParams.setValue(params);
      constantParams2.setValue(params2);
      drawQuadWithShader(device, renderTarget, shader, (_options2 = options) == null ? void 0 : _options2.rect);
      renderTarget.destroy();
    }
  }
}

const fixCubemapSeams = true;
const RGBA8_TYPE = TEXTURETYPE_RGBM;

const calcLevels = (width, height = 0) => {
  return 1 + Math.floor(Math.log2(Math.max(width, height)));
};

const supportsFloat16 = device => {
  return device.extTextureHalfFloat && device.textureHalfFloatRenderable;
};

const supportsFloat32 = device => {
  return device.extTextureFloat && device.textureFloatRenderable;
};

const lightingSourcePixelFormat = device => {
  return supportsFloat16(device) ? PIXELFORMAT_RGBA16F : supportsFloat32(device) ? PIXELFORMAT_RGBA32F : PIXELFORMAT_R8_G8_B8_A8;
};

const lightingPixelFormat = device => {
  return PIXELFORMAT_R8_G8_B8_A8;
};

const createCubemap = (device, size, format, mipmaps) => {
  return new Texture(device, {
    name: `lighting-${size}`,
    cubemap: true,
    width: size,
    height: size,
    format: format,
    type: format === PIXELFORMAT_R8_G8_B8_A8 ? RGBA8_TYPE : TEXTURETYPE_DEFAULT,
    addressU: ADDRESS_CLAMP_TO_EDGE,
    addressV: ADDRESS_CLAMP_TO_EDGE,
    fixCubemapSeams: fixCubemapSeams,
    mipmaps: !!mipmaps
  });
};

class EnvLighting {
  static generateSkyboxCubemap(source, size) {
    const device = source.device;
    const result = createCubemap(device, size || (source.cubemap ? source.width : source.width / 4), PIXELFORMAT_R8_G8_B8_A8, false);
    reprojectTexture(source, result, {
      numSamples: 1024
    });
    return result;
  }

  static generateLightingSource(source, options) {
    const device = source.device;
    const format = lightingSourcePixelFormat(device);
    const result = (options == null ? void 0 : options.target) || new Texture(device, {
      name: `lighting-source`,
      cubemap: true,
      width: (options == null ? void 0 : options.size) || 128,
      height: (options == null ? void 0 : options.size) || 128,
      format: format,
      type: format === PIXELFORMAT_R8_G8_B8_A8 ? RGBA8_TYPE : TEXTURETYPE_DEFAULT,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      fixCubemapSeams: false,
      mipmaps: true
    });
    reprojectTexture(source, result, {
      numSamples: source.mipmaps ? 1 : 1024
    });
    return result;
  }

  static generateAtlas(source, options) {
    const device = source.device;
    const format = lightingPixelFormat();
    const result = (options == null ? void 0 : options.target) || new Texture(device, {
      name: 'envAtlas',
      width: (options == null ? void 0 : options.size) || 512,
      height: (options == null ? void 0 : options.size) || 512,
      format: format,
      type: RGBA8_TYPE ,
      projection: TEXTUREPROJECTION_EQUIRECT,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      mipmaps: false
    });
    const s = result.width / 512;
    const rect = new Vec4(0, 0, 512 * s, 256 * s);
    const levels = calcLevels(256) - calcLevels(4);

    for (let i = 0; i < levels; ++i) {
      reprojectTexture(source, result, {
        numSamples: 1,
        rect: rect,
        seamPixels: s
      });
      rect.x += rect.w;
      rect.y += rect.w;
      rect.z = Math.max(1, Math.floor(rect.z * 0.5));
      rect.w = Math.max(1, Math.floor(rect.w * 0.5));
    }

    rect.set(0, 256 * s, 256 * s, 128 * s);

    for (let i = 1; i < 7; ++i) {
      reprojectTexture(source, result, {
        numSamples: (options == null ? void 0 : options.numReflectionSamples) || 1024,
        distribution: (options == null ? void 0 : options.distribution) || 'ggx',
        specularPower: Math.max(1, 2048 >> i * 2),
        rect: rect,
        seamPixels: s
      });
      rect.y += rect.w;
      rect.z = Math.max(1, Math.floor(rect.z * 0.5));
      rect.w = Math.max(1, Math.floor(rect.w * 0.5));
    }

    rect.set(128 * s, (256 + 128) * s, 64 * s, 32 * s);
    reprojectTexture(source, result, {
      numSamples: (options == null ? void 0 : options.numAmbientSamples) || 2048,
      distribution: 'lambert',
      rect: rect,
      seamPixels: s
    });
    return result;
  }

  static generatePrefilteredAtlas(sources, options) {
    const device = sources[0].device;
    const format = sources[0].format;
    const type = sources[0].type;
    const result = (options == null ? void 0 : options.target) || new Texture(device, {
      name: 'envPrefilteredAtlas',
      width: (options == null ? void 0 : options.size) || 512,
      height: (options == null ? void 0 : options.size) || 512,
      format: format,
      type: type,
      projection: TEXTUREPROJECTION_EQUIRECT,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      mipmaps: false
    });
    const s = result.width / 512;
    const rect = new Vec4(0, 0, 512 * s, 256 * s);
    const levels = calcLevels(512);

    for (let i = 0; i < levels; ++i) {
      reprojectTexture(sources[0], result, {
        numSamples: 1,
        rect: rect,
        seamPixels: s
      });
      rect.x += rect.w;
      rect.y += rect.w;
      rect.z = Math.max(1, Math.floor(rect.z * 0.5));
      rect.w = Math.max(1, Math.floor(rect.w * 0.5));
    }

    rect.set(0, 256 * s, 256 * s, 128 * s);

    for (let i = 1; i < sources.length; ++i) {
      reprojectTexture(sources[i], result, {
        numSamples: 1,
        rect: rect,
        seamPixels: s
      });
      rect.y += rect.w;
      rect.z = Math.max(1, Math.floor(rect.z * 0.5));
      rect.w = Math.max(1, Math.floor(rect.w * 0.5));
    }

    rect.set(128 * s, (256 + 128) * s, 64 * s, 32 * s);

    if (options != null && options.legacyAmbient) {
      reprojectTexture(sources[5], result, {
        numSamples: 1,
        rect: rect,
        seamPixels: s
      });
    } else {
      reprojectTexture(sources[0], result, {
        numSamples: (options == null ? void 0 : options.numSamples) || 2048,
        distribution: 'lambert',
        rect: rect,
        seamPixels: s
      });
    }

    return result;
  }

}

const defaultMaterialDeviceCache = new DeviceCache();

function getDefaultMaterial(device) {
  const material = defaultMaterialDeviceCache.get(device);
  return material;
}

function setDefaultMaterial(device, material) {
  defaultMaterialDeviceCache.get(device, () => {
    return material;
  });
}

class ShaderProcessorOptions {
  constructor(viewUniformFormat, viewBindGroupFormat) {
    this.uniformFormats = [];
    this.bindGroupFormats = [];
    this.uniformFormats[BINDGROUP_VIEW] = viewUniformFormat;
    this.bindGroupFormats[BINDGROUP_VIEW] = viewBindGroupFormat;
  }

  hasUniform(name) {
    for (let i = 0; i < this.uniformFormats.length; i++) {
      const uniformFormat = this.uniformFormats[i];

      if (uniformFormat.get(name)) {
        return true;
      }
    }

    return false;
  }

  hasTexture(name) {
    for (let i = 0; i < this.bindGroupFormats.length; i++) {
      const groupFormat = this.bindGroupFormats[i];

      if (groupFormat.getTexture(name)) {
        return true;
      }
    }

    return false;
  }

}

let id$4 = 0;

class Material {
  constructor() {
    this._shader = null;
    this.meshInstances = [];
    this.name = 'Untitled';
    this.id = id$4++;
    this.variants = {};
    this.parameters = {};
    this.alphaTest = 0;
    this.alphaToCoverage = false;
    this.blend = false;
    this.blendSrc = BLENDMODE_ONE;
    this.blendDst = BLENDMODE_ZERO;
    this.blendEquation = BLENDEQUATION_ADD;
    this.separateAlphaBlend = false;
    this.blendSrcAlpha = BLENDMODE_ONE;
    this.blendDstAlpha = BLENDMODE_ZERO;
    this.blendAlphaEquation = BLENDEQUATION_ADD;
    this.cull = CULLFACE_BACK;
    this.depthTest = true;
    this.depthFunc = FUNC_LESSEQUAL;
    this.depthWrite = true;
    this.stencilFront = null;
    this.stencilBack = null;
    this.depthBias = 0;
    this.slopeDepthBias = 0;
    this.redWrite = true;
    this.greenWrite = true;
    this.blueWrite = true;
    this.alphaWrite = true;
    this._shaderVersion = 0;
    this._scene = null;
    this._dirtyBlend = false;
    this.dirty = true;
  }

  set shader(shader) {
    this._shader = shader;
  }

  get shader() {
    return this._shader;
  }

  get transparent() {
    return this.blend;
  }

  set blendType(type) {
    let blend = true;

    switch (type) {
      case BLEND_NONE:
        blend = false;
        this.blendSrc = BLENDMODE_ONE;
        this.blendDst = BLENDMODE_ZERO;
        this.blendEquation = BLENDEQUATION_ADD;
        break;

      case BLEND_NORMAL:
        this.blendSrc = BLENDMODE_SRC_ALPHA;
        this.blendDst = BLENDMODE_ONE_MINUS_SRC_ALPHA;
        this.blendEquation = BLENDEQUATION_ADD;
        break;

      case BLEND_PREMULTIPLIED:
        this.blendSrc = BLENDMODE_ONE;
        this.blendDst = BLENDMODE_ONE_MINUS_SRC_ALPHA;
        this.blendEquation = BLENDEQUATION_ADD;
        break;

      case BLEND_ADDITIVE:
        this.blendSrc = BLENDMODE_ONE;
        this.blendDst = BLENDMODE_ONE;
        this.blendEquation = BLENDEQUATION_ADD;
        break;

      case BLEND_ADDITIVEALPHA:
        this.blendSrc = BLENDMODE_SRC_ALPHA;
        this.blendDst = BLENDMODE_ONE;
        this.blendEquation = BLENDEQUATION_ADD;
        break;

      case BLEND_MULTIPLICATIVE2X:
        this.blendSrc = BLENDMODE_DST_COLOR;
        this.blendDst = BLENDMODE_SRC_COLOR;
        this.blendEquation = BLENDEQUATION_ADD;
        break;

      case BLEND_SCREEN:
        this.blendSrc = BLENDMODE_ONE_MINUS_DST_COLOR;
        this.blendDst = BLENDMODE_ONE;
        this.blendEquation = BLENDEQUATION_ADD;
        break;

      case BLEND_MULTIPLICATIVE:
        this.blendSrc = BLENDMODE_DST_COLOR;
        this.blendDst = BLENDMODE_ZERO;
        this.blendEquation = BLENDEQUATION_ADD;
        break;

      case BLEND_MIN:
        this.blendSrc = BLENDMODE_ONE;
        this.blendDst = BLENDMODE_ONE;
        this.blendEquation = BLENDEQUATION_MIN;
        break;

      case BLEND_MAX:
        this.blendSrc = BLENDMODE_ONE;
        this.blendDst = BLENDMODE_ONE;
        this.blendEquation = BLENDEQUATION_MAX;
        break;
    }

    if (this.blend !== blend) {
      this.blend = blend;

      if (this._scene) {
        this._scene.layers._dirtyBlend = true;
      } else {
        this._dirtyBlend = true;
      }
    }

    this._updateMeshInstanceKeys();
  }

  get blendType() {
    if (!this.blend) {
      return BLEND_NONE;
    }

    if (this.blendSrc === BLENDMODE_SRC_ALPHA && this.blendDst === BLENDMODE_ONE_MINUS_SRC_ALPHA && this.blendEquation === BLENDEQUATION_ADD) {
      return BLEND_NORMAL;
    }

    if (this.blendSrc === BLENDMODE_ONE && this.blendDst === BLENDMODE_ONE && this.blendEquation === BLENDEQUATION_ADD) {
      return BLEND_ADDITIVE;
    }

    if (this.blendSrc === BLENDMODE_SRC_ALPHA && this.blendDst === BLENDMODE_ONE && this.blendEquation === BLENDEQUATION_ADD) {
      return BLEND_ADDITIVEALPHA;
    }

    if (this.blendSrc === BLENDMODE_DST_COLOR && this.blendDst === BLENDMODE_SRC_COLOR && this.blendEquation === BLENDEQUATION_ADD) {
      return BLEND_MULTIPLICATIVE2X;
    }

    if (this.blendSrc === BLENDMODE_ONE_MINUS_DST_COLOR && this.blendDst === BLENDMODE_ONE && this.blendEquation === BLENDEQUATION_ADD) {
      return BLEND_SCREEN;
    }

    if (this.blendSrc === BLENDMODE_ONE && this.blendDst === BLENDMODE_ONE && this.blendEquation === BLENDEQUATION_MIN) {
      return BLEND_MIN;
    }

    if (this.blendSrc === BLENDMODE_ONE && this.blendDst === BLENDMODE_ONE && this.blendEquation === BLENDEQUATION_MAX) {
      return BLEND_MAX;
    }

    if (this.blendSrc === BLENDMODE_DST_COLOR && this.blendDst === BLENDMODE_ZERO && this.blendEquation === BLENDEQUATION_ADD) {
      return BLEND_MULTIPLICATIVE;
    }

    if (this.blendSrc === BLENDMODE_ONE && this.blendDst === BLENDMODE_ONE_MINUS_SRC_ALPHA && this.blendEquation === BLENDEQUATION_ADD) {
      return BLEND_PREMULTIPLIED;
    }

    return BLEND_NORMAL;
  }

  copy(source) {
    this.name = source.name;
    this._shader = source._shader;
    this.alphaTest = source.alphaTest;
    this.alphaToCoverage = source.alphaToCoverage;
    this.blend = source.blend;
    this.blendSrc = source.blendSrc;
    this.blendDst = source.blendDst;
    this.blendEquation = source.blendEquation;
    this.separateAlphaBlend = source.separateAlphaBlend;
    this.blendSrcAlpha = source.blendSrcAlpha;
    this.blendDstAlpha = source.blendDstAlpha;
    this.blendAlphaEquation = source.blendAlphaEquation;
    this.cull = source.cull;
    this.depthTest = source.depthTest;
    this.depthFunc = source.depthFunc;
    this.depthWrite = source.depthWrite;
    this.depthBias = source.depthBias;
    this.slopeDepthBias = source.slopeDepthBias;
    if (source.stencilFront) this.stencilFront = source.stencilFront.clone();

    if (source.stencilBack) {
      if (source.stencilFront === source.stencilBack) {
        this.stencilBack = this.stencilFront;
      } else {
        this.stencilBack = source.stencilBack.clone();
      }
    }

    this.redWrite = source.redWrite;
    this.greenWrite = source.greenWrite;
    this.blueWrite = source.blueWrite;
    this.alphaWrite = source.alphaWrite;
    return this;
  }

  clone() {
    const clone = new this.constructor();
    return clone.copy(this);
  }

  _updateMeshInstanceKeys() {
    const meshInstances = this.meshInstances;

    for (let i = 0; i < meshInstances.length; i++) {
      meshInstances[i].updateKey();
    }
  }

  updateUniforms(device, scene) {}

  getShaderVariant(device, scene, objDefs, staticLightList, pass, sortedLights, viewUniformFormat, viewBindGroupFormat) {
    const key = `shader-id-${this._shader.id}`;
    const shaderDefinition = this._shader.definition;
    const materialGenerator = {
      generateKey: function (options) {
        return key;
      },
      createShaderDefinition: function (device, options) {
        return shaderDefinition;
      }
    };
    const libraryModuleName = 'shader';
    const library = device.getProgramLibrary();
    library.register(libraryModuleName, materialGenerator);
    const processingOptions = new ShaderProcessorOptions(viewUniformFormat, viewBindGroupFormat);
    const variant = library.getProgram(libraryModuleName, {}, processingOptions);
    library.unregister(libraryModuleName);
    return variant;
  }

  update() {
    this.dirty = true;
    if (this._shader) this._shader.failed = false;
  }

  clearParameters() {
    this.parameters = {};
  }

  getParameters() {
    return this.parameters;
  }

  clearVariants() {
    this.variants = {};
    const meshInstances = this.meshInstances;
    const count = meshInstances.length;

    for (let i = 0; i < count; i++) {
      meshInstances[i].clearShaders();
    }
  }

  getParameter(name) {
    return this.parameters[name];
  }

  setParameter(name, data) {
    if (data === undefined && typeof name === 'object') {
      const uniformObject = name;

      if (uniformObject.length) {
        for (let i = 0; i < uniformObject.length; i++) {
          this.setParameter(uniformObject[i]);
        }

        return;
      }

      name = uniformObject.name;
      data = uniformObject.value;
    }

    const param = this.parameters[name];

    if (param) {
      param.data = data;
    } else {
      this.parameters[name] = {
        scopeId: null,
        data: data
      };
    }
  }

  deleteParameter(name) {
    if (this.parameters[name]) {
      delete this.parameters[name];
    }
  }

  setParameters(device, names) {
    const parameters = this.parameters;
    if (names === undefined) names = parameters;

    for (const paramName in names) {
      const parameter = parameters[paramName];

      if (parameter) {
        if (!parameter.scopeId) {
          parameter.scopeId = device.scope.resolve(paramName);
        }

        parameter.scopeId.setValue(parameter.data);
      }
    }
  }

  destroy() {
    this.variants = {};
    this._shader = null;

    for (let i = 0; i < this.meshInstances.length; i++) {
      const meshInstance = this.meshInstances[i];
      meshInstance.clearShaders();
      meshInstance._material = null;

      if (meshInstance.mesh) {
        const defaultMaterial = getDefaultMaterial(meshInstance.mesh.device);

        if (this !== defaultMaterial) {
          meshInstance.material = defaultMaterial;
        }
      }
    }

    this.meshInstances.length = 0;
  }

  addMeshInstanceRef(meshInstance) {
    this.meshInstances.push(meshInstance);
  }

  removeMeshInstanceRef(meshInstance) {
    const meshInstances = this.meshInstances;
    const i = meshInstances.indexOf(meshInstance);

    if (i !== -1) {
      meshInstances.splice(i, 1);
    }
  }

}

const arraysEqual = (a, b) => {
  if (a.length !== b.length) {
    return false;
  }

  for (let i = 0; i < a.length; ++i) {
    if (a[i] !== b[i]) {
      return false;
    }
  }

  return true;
};

const notWhite = color => {
  return color.r !== 1 || color.g !== 1 || color.b !== 1;
};

const notBlack = color => {
  return color.r !== 0 || color.g !== 0 || color.b !== 0;
};

class StandardMaterialOptionsBuilder {
  constructor() {
    this._mapXForms = null;
  }

  updateMinRef(options, scene, stdMat, objDefs, staticLightList, pass, sortedLights) {
    this._updateSharedOptions(options, scene, stdMat, objDefs, pass);

    this._updateMinOptions(options, stdMat);

    this._updateUVOptions(options, stdMat, objDefs, true);
  }

  updateRef(options, scene, stdMat, objDefs, staticLightList, pass, sortedLights) {
    this._updateSharedOptions(options, scene, stdMat, objDefs, pass);

    this._updateEnvOptions(options, stdMat, scene);

    this._updateMaterialOptions(options, stdMat);

    if (pass === SHADER_FORWARDHDR) {
      if (options.gamma) options.gamma = GAMMA_SRGBHDR;
      options.toneMap = TONEMAP_LINEAR;
    }

    options.hasTangents = objDefs && (objDefs & SHADERDEF_TANGENTS) !== 0;

    this._updateLightOptions(options, stdMat, objDefs, sortedLights, staticLightList);

    this._updateUVOptions(options, stdMat, objDefs, false);
  }

  _updateSharedOptions(options, scene, stdMat, objDefs, pass) {
    options.pass = pass;
    options.alphaTest = stdMat.alphaTest > 0;
    options.forceFragmentPrecision = stdMat.forceFragmentPrecision || '';
    options.chunks = stdMat.chunks || '';
    options.blendType = stdMat.blendType;
    options.forceUv1 = stdMat.forceUv1;
    options.separateAmbient = false;
    options.screenSpace = objDefs && (objDefs & SHADERDEF_SCREENSPACE) !== 0;
    options.skin = objDefs && (objDefs & SHADERDEF_SKIN) !== 0;
    options.useInstancing = objDefs && (objDefs & SHADERDEF_INSTANCING) !== 0;
    options.useMorphPosition = objDefs && (objDefs & SHADERDEF_MORPH_POSITION) !== 0;
    options.useMorphNormal = objDefs && (objDefs & SHADERDEF_MORPH_NORMAL) !== 0;
    options.useMorphTextureBased = objDefs && (objDefs & SHADERDEF_MORPH_TEXTURE_BASED) !== 0;
    options.nineSlicedMode = stdMat.nineSlicedMode || 0;

    if (scene.clusteredLightingEnabled && stdMat.useLighting) {
      options.clusteredLightingEnabled = true;
      options.clusteredLightingCookiesEnabled = scene.lighting.cookiesEnabled;
      options.clusteredLightingShadowsEnabled = scene.lighting.shadowsEnabled;
      options.clusteredLightingShadowType = scene.lighting.shadowType;
      options.clusteredLightingAreaLightsEnabled = scene.lighting.areaLightsEnabled;
    } else {
      options.clusteredLightingEnabled = false;
      options.clusteredLightingCookiesEnabled = false;
      options.clusteredLightingShadowsEnabled = false;
      options.clusteredLightingAreaLightsEnabled = false;
    }
  }

  _updateUVOptions(options, stdMat, objDefs, minimalOptions) {
    let hasUv0 = false;
    let hasUv1 = false;
    let hasVcolor = false;

    if (objDefs) {
      hasUv0 = (objDefs & SHADERDEF_UV0) !== 0;
      hasUv1 = (objDefs & SHADERDEF_UV1) !== 0;
      hasVcolor = (objDefs & SHADERDEF_VCOLOR) !== 0;
    }

    options.vertexColors = false;
    this._mapXForms = [];
    const uniqueTextureMap = {};

    for (const p in _matTex2D) {
      this._updateTexOptions(options, stdMat, p, hasUv0, hasUv1, hasVcolor, minimalOptions, uniqueTextureMap);
    }

    this._mapXForms = null;
  }

  _updateMinOptions(options, stdMat) {
    options.opacityTint = stdMat.opacity !== 1 && stdMat.blendType !== BLEND_NONE;
    options.lights = [];
  }

  _updateMaterialOptions(options, stdMat) {
    var _stdMat$diffuseMap, _stdMat$diffuseDetail, _stdMat$emissiveMap, _stdMat$lightMap;

    const diffuseTint = (stdMat.diffuseTint || !stdMat.diffuseMap && !stdMat.diffuseVertexColor) && notWhite(stdMat.diffuse);
    const useSpecular = !!(stdMat.useMetalness || stdMat.specularMap || stdMat.sphereMap || stdMat.cubeMap || notBlack(stdMat.specular) || stdMat.specularityFactor > 0 && stdMat.useMetalness || stdMat.enableGGXSpecular || stdMat.clearCoat > 0);
    const useSpecularColor = !stdMat.useMetalness || stdMat.useMetalnessSpecularColor;
    const specularTint = useSpecular && (stdMat.specularTint || !stdMat.specularMap && !stdMat.specularVertexColor) && notWhite(stdMat.specular);
    const specularityFactorTint = useSpecular && stdMat.useMetalnessSpecularColor && (stdMat.specularityFactorTint || stdMat.specularityFactor < 1 && !stdMat.specularityFactorMap);
    const emissiveTintColor = !stdMat.emissiveMap || notWhite(stdMat.emissive) && stdMat.emissiveTint;
    const emissiveTintIntensity = stdMat.emissiveIntensity !== 1;
    const isPackedNormalMap = stdMat.normalMap ? stdMat.normalMap.format === PIXELFORMAT_DXT5 || stdMat.normalMap.type === TEXTURETYPE_SWIZZLEGGGR : false;
    options.opacityTint = stdMat.opacity !== 1 && stdMat.blendType !== BLEND_NONE ? 1 : 0;
    options.blendMapsWithColors = true;
    options.ambientTint = stdMat.ambientTint;
    options.diffuseTint = diffuseTint ? 2 : 0;
    options.specularTint = specularTint ? 2 : 0;
    options.specularityFactorTint = specularityFactorTint ? 1 : 0;
    options.useSpecularityFactor = (specularityFactorTint || !!stdMat.specularityFactorMap) && stdMat.useMetalnessSpecularColor;
    options.useSpecularColor = useSpecularColor;
    options.metalnessTint = stdMat.useMetalness && stdMat.metalness < 1 ? 1 : 0;
    options.glossTint = 1;
    options.emissiveTint = (emissiveTintColor ? 2 : 0) + (emissiveTintIntensity ? 1 : 0);
    options.alphaToCoverage = stdMat.alphaToCoverage;
    options.normalizeNormalMap = stdMat.normalizeNormalMap;
    options.ambientSH = !!stdMat.ambientSH;
    options.useSpecular = useSpecular;
    options.diffuseEncoding = (_stdMat$diffuseMap = stdMat.diffuseMap) == null ? void 0 : _stdMat$diffuseMap.encoding;
    options.diffuseDetailEncoding = (_stdMat$diffuseDetail = stdMat.diffuseDetailMap) == null ? void 0 : _stdMat$diffuseDetail.encoding;
    options.emissiveEncoding = (_stdMat$emissiveMap = stdMat.emissiveMap) == null ? void 0 : _stdMat$emissiveMap.encoding;
    options.lightMapEncoding = (_stdMat$lightMap = stdMat.lightMap) == null ? void 0 : _stdMat$lightMap.encoding;
    options.conserveEnergy = stdMat.conserveEnergy;
    options.opacityFadesSpecular = stdMat.opacityFadesSpecular;
    options.alphaFade = stdMat.alphaFade;
    options.occludeSpecular = stdMat.occludeSpecular;
    options.occludeSpecularFloat = stdMat.occludeSpecularIntensity !== 1.0;
    options.occludeDirect = stdMat.occludeDirect;
    options.shadingModel = stdMat.shadingModel;
    options.fresnelModel = stdMat.fresnelModel;
    options.packedNormal = isPackedNormalMap;
    options.fastTbn = stdMat.fastTbn;
    options.cubeMapProjection = stdMat.cubeMapProjection;
    options.customFragmentShader = stdMat.customFragmentShader;
    options.refraction = (stdMat.refraction || !!stdMat.refractionMap) && (stdMat.useDynamicRefraction || !!options.reflectionSource);
    options.useDynamicRefraction = stdMat.useDynamicRefraction;
    options.refractionIndexTint = stdMat.refractionIndex !== 1.0 / 1.5 ? 1 : 0;
    options.thicknessTint = stdMat.useDynamicRefraction && stdMat.thickness !== 1.0 ? 1 : 0;
    options.useMetalness = stdMat.useMetalness;
    options.specularEncoding = stdMat.specularEncoding || 'linear';
    options.sheenEncoding = stdMat.sheenEncoding || 'linear';
    options.enableGGXSpecular = stdMat.enableGGXSpecular;
    options.msdf = !!stdMat.msdfMap;
    options.msdfTextAttribute = !!stdMat.msdfTextAttribute;
    options.twoSidedLighting = stdMat.twoSidedLighting;
    options.pixelSnap = stdMat.pixelSnap;
    options.aoMapUv = stdMat.aoUvSet;
    options.diffuseDetail = !!stdMat.diffuseMap;
    options.normalDetail = !!stdMat.normalMap;
    options.diffuseDetailMode = stdMat.diffuseDetailMode;
    options.detailModes = !!options.diffuseDetail;
    options.clearCoat = !!stdMat.clearCoat;
    options.clearCoatTint = stdMat.clearCoat !== 1.0 ? 1 : 0;
    options.clearCoatGlossiness = !!stdMat.clearCoatGlossiness;
    options.clearCoatGlossTint = stdMat.clearCoatGlossiness !== 1.0 ? 1 : 0;
    options.iridescence = stdMat.useIridescence && stdMat.iridescence !== 0.0;
    options.iridescenceTint = stdMat.iridescence !== 1.0 ? 1 : 0;
    options.sheen = stdMat.useSheen;
    options.sheenTint = stdMat.useSheen && notWhite(stdMat.sheen) ? 2 : 0;
    options.sheenGlossinessTint = 1;
  }

  _updateEnvOptions(options, stdMat, scene) {
    options.fog = stdMat.useFog ? scene.fog : 'none';
    options.gamma = stdMat.useGammaTonemap ? scene.gammaCorrection : GAMMA_NONE;
    options.toneMap = stdMat.useGammaTonemap ? scene.toneMapping : -1;
    options.fixSeams = stdMat.cubeMap ? stdMat.cubeMap.fixCubemapSeams : false;
    const isPhong = stdMat.shadingModel === SPECULAR_PHONG;
    let usingSceneEnv = false;

    if (stdMat.envAtlas && stdMat.cubeMap && !isPhong) {
      options.reflectionSource = 'envAtlasHQ';
      options.reflectionEncoding = stdMat.envAtlas.encoding;
    } else if (stdMat.envAtlas && !isPhong) {
      options.reflectionSource = 'envAtlas';
      options.reflectionEncoding = stdMat.envAtlas.encoding;
    } else if (stdMat.cubeMap) {
      options.reflectionSource = 'cubeMap';
      options.reflectionEncoding = stdMat.cubeMap.encoding;
    } else if (stdMat.sphereMap) {
      options.reflectionSource = 'sphereMap';
      options.reflectionEncoding = stdMat.sphereMap.encoding;
    } else if (stdMat.useSkybox && scene.envAtlas && scene.skybox && !isPhong) {
      options.reflectionSource = 'envAtlasHQ';
      options.reflectionEncoding = scene.envAtlas.encoding;
      usingSceneEnv = true;
    } else if (stdMat.useSkybox && scene.envAtlas && !isPhong) {
      options.reflectionSource = 'envAtlas';
      options.reflectionEncoding = scene.envAtlas.encoding;
      usingSceneEnv = true;
    } else if (stdMat.useSkybox && scene.skybox) {
      options.reflectionSource = 'cubeMap';
      options.reflectionEncoding = scene.skybox.encoding;
      usingSceneEnv = true;
    } else {
      options.reflectionSource = null;
      options.reflectionEncoding = null;
    }

    if (stdMat.ambientSH && !isPhong) {
      options.ambientSource = 'ambientSH';
      options.ambientEncoding = null;
    } else {
      const envAtlas = stdMat.envAtlas || (stdMat.useSkybox && scene.envAtlas ? scene.envAtlas : null);

      if (envAtlas && !isPhong) {
        options.ambientSource = 'envAtlas';
        options.ambientEncoding = envAtlas.encoding;
      } else {
        options.ambientSource = 'constant';
        options.ambientEncoding = null;
      }
    }

    options.skyboxIntensity = usingSceneEnv && (scene.skyboxIntensity !== 1 || scene.physicalUnits);
    options.useCubeMapRotation = usingSceneEnv && scene.skyboxRotation && !scene.skyboxRotation.equals(Quat.IDENTITY);
  }

  _updateLightOptions(options, stdMat, objDefs, sortedLights, staticLightList) {
    options.lightMap = false;
    options.lightMapChannel = '';
    options.lightMapUv = 0;
    options.lightMapTransform = 0;
    options.lightMapWithoutAmbient = false;
    options.dirLightMap = false;

    if (objDefs) {
      options.noShadow = (objDefs & SHADERDEF_NOSHADOW) !== 0;

      if ((objDefs & SHADERDEF_LM) !== 0) {
        options.lightMapEncoding = 'rgbm';
        options.lightMap = true;
        options.lightMapChannel = 'rgb';
        options.lightMapUv = 1;
        options.lightMapTransform = 0;
        options.lightMapWithoutAmbient = !stdMat.lightMap;

        if ((objDefs & SHADERDEF_DIRLM) !== 0) {
          options.dirLightMap = true;
        }

        if ((objDefs & SHADERDEF_LMAMBIENT) !== 0) {
          options.lightMapWithoutAmbient = false;
        }
      }
    }

    if (stdMat.useLighting) {
      const lightsFiltered = [];
      const mask = objDefs ? objDefs >> 16 : MASK_AFFECT_DYNAMIC;
      options.lightMaskDynamic = !!(mask & MASK_AFFECT_DYNAMIC);

      if (sortedLights) {
        this._collectLights(LIGHTTYPE_DIRECTIONAL, sortedLights[LIGHTTYPE_DIRECTIONAL], lightsFiltered, mask);

        this._collectLights(LIGHTTYPE_OMNI, sortedLights[LIGHTTYPE_OMNI], lightsFiltered, mask, staticLightList);

        this._collectLights(LIGHTTYPE_SPOT, sortedLights[LIGHTTYPE_SPOT], lightsFiltered, mask, staticLightList);
      }

      options.lights = lightsFiltered;
    } else {
      options.lights = [];
    }

    if (options.lights.length === 0) {
      options.noShadow = true;
    }
  }

  _updateTexOptions(options, stdMat, p, hasUv0, hasUv1, hasVcolor, minimalOptions, uniqueTextureMap) {
    const mname = p + 'Map';
    const vname = p + 'VertexColor';
    const vcname = p + 'VertexColorChannel';
    const cname = mname + 'Channel';
    const tname = mname + 'Transform';
    const uname = mname + 'Uv';
    const iname = mname + 'Identifier';

    if (p !== 'light') {
      options[mname] = false;
      options[cname] = '';
      options[tname] = 0;
      options[uname] = 0;
      options[iname] = undefined;
    }

    options[vname] = false;
    options[vcname] = '';
    const isOpacity = p === 'opacity';
    if (isOpacity && stdMat.blendType === BLEND_NONE && stdMat.alphaTest === 0.0 && !stdMat.alphaToCoverage) return;

    if (!minimalOptions || isOpacity) {
      if (p !== 'height' && stdMat[vname]) {
        if (hasVcolor) {
          options[vname] = stdMat[vname];
          options[vcname] = stdMat[vcname];
          options.vertexColors = true;
        }
      }

      if (stdMat[mname]) {
        let allow = true;
        if (stdMat[uname] === 0 && !hasUv0) allow = false;
        if (stdMat[uname] === 1 && !hasUv1) allow = false;

        if (allow) {
          const mapId = stdMat[mname].id;
          let identifier = uniqueTextureMap[mapId];

          if (identifier === undefined) {
            uniqueTextureMap[mapId] = p;
            identifier = p;
          }

          options[mname] = !!stdMat[mname];
          options[iname] = identifier;
          options[tname] = this._getMapTransformID(stdMat.getUniform(tname), stdMat[uname]);
          options[cname] = stdMat[cname];
          options[uname] = stdMat[uname];
        }
      }
    }
  }

  _collectLights(lType, lights, lightsFiltered, mask, staticLightList) {
    for (let i = 0; i < lights.length; i++) {
      const light = lights[i];

      if (light.enabled) {
        if (light.mask & mask) {
          if (lType !== LIGHTTYPE_DIRECTIONAL) {
            if (light.isStatic) {
              continue;
            }
          }

          lightsFiltered.push(light);
        }
      }
    }

    if (staticLightList) {
      for (let i = 0; i < staticLightList.length; i++) {
        const light = staticLightList[i];

        if (light._type === lType) {
          lightsFiltered.push(light);
        }
      }
    }
  }

  _getMapTransformID(xform, uv) {
    if (!xform) return 0;
    let xforms = this._mapXForms[uv];

    if (!xforms) {
      xforms = [];
      this._mapXForms[uv] = xforms;
    }

    for (let i = 0; i < xforms.length; i++) {
      if (arraysEqual(xforms[i][0].value, xform[0].value) && arraysEqual(xforms[i][1].value, xform[1].value)) {
        return i + 1;
      }
    }

    return xforms.push(xform);
  }

}

const standardMaterialParameterTypes = {
  name: 'string',
  chunks: 'chunks',
  mappingFormat: 'string',
  _engine: 'boolean',
  ambient: 'rgb',
  ambientTint: 'boolean',
  aoVertexColor: 'boolean',
  aoVertexColorChannel: 'string',
  aoMap: 'texture',
  aoMapChannel: 'string',
  aoMapUv: 'number',
  aoMapTiling: 'vec2',
  aoMapOffset: 'vec2',
  aoMapRotation: 'number',
  diffuse: 'rgb',
  diffuseTint: 'boolean',
  diffuseVertexColor: 'boolean',
  diffuseVertexColorChannel: 'string',
  diffuseMap: 'texture',
  diffuseMapChannel: 'string',
  diffuseMapUv: 'number',
  diffuseMapTiling: 'vec2',
  diffuseMapOffset: 'vec2',
  diffuseMapRotation: 'number',
  diffuseDetailMap: 'texture',
  diffuseDetailMapChannel: 'string',
  diffuseDetailMapUv: 'number',
  diffuseDetailMapTiling: 'vec2',
  diffuseDetailMapOffset: 'vec2',
  diffuseDetailMapRotation: 'number',
  diffuseDetailMode: 'string',
  specular: 'rgb',
  specularTint: 'boolean',
  specularVertexColor: 'boolean',
  specularVertexColorChannel: 'string',
  specularMap: 'texture',
  specularMapChannel: 'string',
  specularMapUv: 'number',
  specularMapTiling: 'vec2',
  specularMapOffset: 'vec2',
  specularMapRotation: 'number',
  occludeSpecular: 'enum:occludeSpecular',
  specularityFactor: 'number',
  specularityFactorTint: 'boolean',
  specularityFactorVertexColor: 'boolean',
  specularityFactorVertexColorChannel: 'string',
  specularityFactorMap: 'texture',
  specularityFactorMapChannel: 'string',
  specularityFactorMapUv: 'number',
  specularityFactorMapTiling: 'vec2',
  specularityFactorMapOffset: 'vec2',
  specularityFactorMapRotation: 'number',
  useMetalness: 'boolean',
  metalness: 'number',
  enableGGXSpecular: 'boolean',
  anisotropy: 'number',
  metalnessTint: 'boolean',
  metalnessVertexColor: 'boolean',
  metalnessVertexColorChannel: 'string',
  metalnessMap: 'texture',
  metalnessMapChannel: 'string',
  metalnessMapUv: 'number',
  metalnessMapTiling: 'vec2',
  metalnessMapOffset: 'vec2',
  metalnessMapRotation: 'number',
  useMetalnessSpecularColor: 'boolean',
  conserveEnergy: 'boolean',
  shininess: 'number',
  glossVertexColor: 'boolean',
  glossVertexColorChannel: 'string',
  glossMap: 'texture',
  glossMapChannel: 'string',
  glossMapUv: 'number',
  glossMapTiling: 'vec2',
  glossMapOffset: 'vec2',
  glossMapRotation: 'number',
  clearCoat: 'number',
  clearCoatVertexColor: 'boolean',
  clearCoatVertexColorChannel: 'string',
  clearCoatMap: 'texture',
  clearCoatMapChannel: 'string',
  clearCoatMapUv: 'number',
  clearCoatMapTiling: 'vec2',
  clearCoatMapOffset: 'vec2',
  clearCoatMapRotation: 'number',
  clearCoatGlossiness: 'number',
  clearCoatGlossVertexColor: 'boolean',
  clearCoatGlossVertexColorChannel: 'string',
  clearCoatGlossMap: 'texture',
  clearCoatGlossMapChannel: 'string',
  clearCoatGlossMapUv: 'number',
  clearCoatGlossMapTiling: 'vec2',
  clearCoatGlossMapOffset: 'vec2',
  clearCoatGlossMapRotation: 'number',
  clearCoatBumpiness: 'number',
  clearCoatNormalMap: 'texture',
  clearCoatNormalMapUv: 'number',
  clearCoatNormalMapTiling: 'vec2',
  clearCoatNormalMapOffset: 'vec2',
  clearCoatNormalMapRotation: 'number',
  useSheen: 'boolean',
  sheen: 'rgb',
  sheenMap: 'texture',
  sheenMapChannel: 'string',
  sheenMapUv: 'number',
  sheenMapTiling: 'vec2',
  sheenMapOffset: 'vec2',
  sheenMapMapRotation: 'number',
  sheenTint: 'boolean',
  sheenVertexColor: 'boolean',
  sheenVertexColorChannel: 'string',
  fresnelModel: 'number',
  emissive: 'rgb',
  emissiveTint: 'boolean',
  emissiveVertexColor: 'boolean',
  emissiveVertexColorChannel: 'string',
  emissiveMap: 'texture',
  emissiveMapChannel: 'string',
  emissiveMapUv: 'number',
  emissiveMapTiling: 'vec2',
  emissiveMapOffset: 'vec2',
  emissiveMapMapRotation: 'number',
  emissiveIntensity: 'number',
  normalMap: 'texture',
  normalMapTiling: 'vec2',
  normalMapOffset: 'vec2',
  normalMapRotation: 'number',
  normalMapUv: 'number',
  bumpiness: 'number',
  normalDetailMap: 'texture',
  normalDetailMapTiling: 'vec2',
  normalDetailMapOffset: 'vec2',
  normalDetailMapRotation: 'number',
  normalDetailMapUv: 'number',
  normalDetailMapBumpiness: 'number',
  heightMap: 'texture',
  heightMapChannel: 'string',
  heightMapUv: 'number',
  heightMapTiling: 'vec2',
  heightMapOffset: 'vec2',
  heightMapRotation: 'number',
  heightMapFactor: 'number',
  alphaToCoverage: 'boolean',
  alphaTest: 'number',
  alphaFade: 'number',
  opacity: 'number',
  opacityVertexColor: 'boolean',
  opacityVertexColorChannel: 'string',
  opacityMap: 'texture',
  opacityMapChannel: 'string',
  opacityMapUv: 'number',
  opacityMapTiling: 'vec2',
  opacityMapOffset: 'vec2',
  opacityMapRotation: 'number',
  opacityFadesSpecular: 'boolean',
  reflectivity: 'number',
  refraction: 'number',
  refractionIndex: 'number',
  sphereMap: 'texture',
  cubeMap: 'cubemap',
  cubeMapProjection: 'number',
  cubeMapProjectionBox: 'boundingbox',
  lightVertexColor: 'boolean',
  lightVertexColorChannel: 'string',
  lightMap: 'texture',
  lightMapChannel: 'string',
  lightMapUv: 'number',
  lightMapTiling: 'vec2',
  lightMapOffset: 'vec2',
  lightMapRotation: 'number',
  depthTest: 'boolean',
  depthFunc: 'enum:depthFunc',
  depthWrite: 'boolean',
  depthBias: 'number',
  slopeDepthBias: 'number',
  cull: 'enum:cull',
  blendType: 'enum:blendType',
  shadingModel: 'enum:shadingModel',
  useFog: 'boolean',
  useLighting: 'boolean',
  useSkybox: 'boolean',
  useGammaTonemap: 'boolean',
  envAtlas: 'texture'
};
const standardMaterialTextureParameters = [];

for (const key in standardMaterialParameterTypes) {
  const type = standardMaterialParameterTypes[key];

  if (type === 'texture') {
    standardMaterialTextureParameters.push(key);
  }
}

const standardMaterialCubemapParameters = [];

for (const key in standardMaterialParameterTypes) {
  const type = standardMaterialParameterTypes[key];

  if (type === 'cubemap') {
    standardMaterialCubemapParameters.push(key);
  }
}

const standardMaterialRemovedParameters = {
  aoMapVertexColor: 'boolean',
  diffuseMapTint: 'boolean',
  diffuseMapVertexColor: 'boolean',
  emissiveMapTint: 'boolean',
  emissiveMapVertexColor: 'boolean',
  glossMapVertexColor: 'boolean',
  metalnessMapVertexColor: 'boolean',
  opacityMapVertexColor: 'boolean',
  specularAntialias: 'boolean',
  specularMapTint: 'boolean',
  specularMapVertexColor: 'boolean'
};

const _props = {};
const _uniforms = {};

let _params = new Set();

class StandardMaterial extends Material {
  constructor() {
    super();
    this._dirtyShader = true;
    this._assetReferences = {};
    this._activeParams = new Set();
    this._activeLightingParams = new Set();
    this.shaderOptBuilder = new StandardMaterialOptionsBuilder();
    this.reset();
  }

  reset() {
    Object.keys(_props).forEach(name => {
      this[`_${name}`] = _props[name].value();
    });
    this._chunks = {};
    this._uniformCache = {};
  }

  set shader(shader) {}

  get shader() {
    return null;
  }

  set chunks(value) {
    this._dirtyShader = true;
    this._chunks = value;
  }

  get chunks() {
    this._dirtyShader = true;
    return this._chunks;
  }

  copy(source) {
    super.copy(source);
    Object.keys(_props).forEach(k => {
      this[k] = source[k];
    });

    for (const p in source._chunks) {
      if (source._chunks.hasOwnProperty(p)) this._chunks[p] = source._chunks[p];
    }

    return this;
  }

  _setParameter(name, value) {
    _params.add(name);

    this.setParameter(name, value);
  }

  _setParameters(parameters) {
    parameters.forEach(v => {
      this._setParameter(v.name, v.value);
    });
  }

  _processParameters(paramsName) {
    const prevParams = this[paramsName];
    prevParams.forEach(param => {
      if (!_params.has(param)) {
        delete this.parameters[param];
      }
    });
    this[paramsName] = _params;
    _params = prevParams;

    _params.clear();
  }

  _updateMap(p) {
    const mname = p + 'Map';
    const map = this[mname];

    if (map) {
      this._setParameter('texture_' + mname, map);

      const tname = mname + 'Transform';
      const uniform = this.getUniform(tname);

      if (uniform) {
        this._setParameters(uniform);
      }
    }
  }

  _allocUniform(name, allocFunc) {
    let uniform = this._uniformCache[name];

    if (!uniform) {
      uniform = allocFunc();
      this._uniformCache[name] = uniform;
    }

    return uniform;
  }

  getUniform(name, device, scene) {
    return _uniforms[name](this, device, scene);
  }

  updateUniforms(device, scene) {
    const getUniform = name => {
      return this.getUniform(name, device, scene);
    };

    this._setParameter('material_ambient', getUniform('ambient'));

    if (!this.diffuseMap || this.diffuseTint) {
      this._setParameter('material_diffuse', getUniform('diffuse'));
    }

    if (!this.useMetalness) {
      if (!this.specularMap || this.specularTint) {
        this._setParameter('material_specular', getUniform('specular'));
      }
    } else {
      if (!this.metalnessMap || this.metalness < 1) {
        this._setParameter('material_metalness', this.metalness);
      }

      if (!this.specularMap || this.specularTint) {
        this._setParameter('material_specular', getUniform('specular'));
      }

      if (!this.specularityFactorMap || this.specularityFactorTint) {
        this._setParameter('material_specularityFactor', this.specularityFactor);
      }

      if (!this.sheenMap || this.sheenTint) {
        this._setParameter('material_sheen', getUniform('sheen'));
      }

      if (!this.sheenGlossinessMap || this.sheenGlossinessTint) {
        this._setParameter('material_sheenGlossiness', this.sheenGlossiness);
      }

      if (this.refractionIndex > 0.0) {
        const oneOverRefractionIndex = 1.0 / this.refractionIndex;
        const f0 = (oneOverRefractionIndex - 1) / (oneOverRefractionIndex + 1);

        this._setParameter('material_f0', f0 * f0);
      } else {
        this._setParameter('material_f0', 1.0);
      }
    }

    if (this.enableGGXSpecular) {
      this._setParameter('material_anisotropy', this.anisotropy);
    }

    if (this.clearCoat > 0) {
      this._setParameter('material_clearCoat', this.clearCoat);

      this._setParameter('material_clearCoatGlossiness', this.clearCoatGlossiness);

      this._setParameter('material_clearCoatBumpiness', this.clearCoatBumpiness);
    }

    this._setParameter('material_shininess', getUniform('shininess'));

    if (!this.emissiveMap || this.emissiveTint) {
      this._setParameter('material_emissive', getUniform('emissive'));
    }

    if (this.emissiveIntensity !== 1) {
      this._setParameter('material_emissiveIntensity', this.emissiveIntensity);
    }

    if (this.refraction > 0) {
      this._setParameter('material_refraction', this.refraction);

      this._setParameter('material_refractionIndex', this.refractionIndex);
    }

    if (this.useDynamicRefraction) {
      this._setParameter('material_thickness', this.thickness);

      this._setParameter('material_attenuation', getUniform('attenuation'));

      this._setParameter('material_invAttenuationDistance', this.attenuationDistance === 0 ? 0 : 1.0 / this.attenuationDistance);
    }

    if (this.useIridescence) {
      this._setParameter('material_iridescence', this.iridescence);

      this._setParameter('material_iridescenceRefractionIndex', this.iridescenceRefractionIndex);

      this._setParameter('material_iridescenceThicknessMin', this.iridescenceThicknessMin);

      this._setParameter('material_iridescenceThicknessMax', this.iridescenceThicknessMax);
    }

    this._setParameter('material_opacity', this.opacity);

    if (this.opacityFadesSpecular === false) {
      this._setParameter('material_alphaFade', this.alphaFade);
    }

    if (this.occludeSpecular) {
      this._setParameter('material_occludeSpecularIntensity', this.occludeSpecularIntensity);
    }

    if (this.cubeMapProjection === CUBEPROJ_BOX) {
      this._setParameter(getUniform('cubeMapProjectionBox'));
    }

    for (const p in _matTex2D) {
      this._updateMap(p);
    }

    if (this.ambientSH) {
      this._setParameter('ambientSH[0]', this.ambientSH);
    }

    if (this.normalMap) {
      this._setParameter('material_bumpiness', this.bumpiness);
    }

    if (this.normalMap && this.normalDetailMap) {
      this._setParameter('material_normalDetailMapBumpiness', this.normalDetailMapBumpiness);
    }

    if (this.heightMap) {
      this._setParameter('material_heightMapFactor', getUniform('heightMapFactor'));
    }

    const isPhong = this.shadingModel === SPECULAR_PHONG;

    if (this.envAtlas && this.cubeMap && !isPhong) {
      this._setParameter('texture_envAtlas', this.envAtlas);

      this._setParameter('texture_cubeMap', this.cubeMap);
    } else if (this.envAtlas && !isPhong) {
      this._setParameter('texture_envAtlas', this.envAtlas);
    } else if (this.cubeMap) {
      this._setParameter('texture_cubeMap', this.cubeMap);
    } else if (this.sphereMap) {
      this._setParameter('texture_sphereMap', this.sphereMap);
    }

    this._setParameter('material_reflectivity', this.reflectivity);

    this._processParameters('_activeParams');

    if (this._dirtyShader) {
      this.clearVariants();
    }
  }

  updateEnvUniforms(device, scene) {
    const isPhong = this.shadingModel === SPECULAR_PHONG;
    const hasLocalEnvOverride = this.envAtlas && !isPhong || this.cubeMap || this.sphereMap;

    if (!hasLocalEnvOverride && this.useSkybox) {
      if (scene.envAtlas && scene.skybox && !isPhong) {
        this._setParameter('texture_envAtlas', scene.envAtlas);

        this._setParameter('texture_cubeMap', scene.skybox);
      } else if (scene.envAtlas && !isPhong) {
        this._setParameter('texture_envAtlas', scene.envAtlas);
      } else if (scene.skybox) {
        this._setParameter('texture_cubeMap', scene.skybox);
      }

      if (!scene.skyboxRotation.equals(Quat.IDENTITY) && scene._skyboxRotationMat3) {
        this._setParameter('cubeMapRotationMatrix', scene._skyboxRotationMat3.data);
      }
    }

    this._processParameters('_activeLightingParams');
  }

  getShaderVariant(device, scene, objDefs, staticLightList, pass, sortedLights, viewUniformFormat, viewBindGroupFormat) {
    this.updateEnvUniforms(device, scene);
    const minimalOptions = pass === SHADER_DEPTH || pass === SHADER_PICK || ShaderPass.isShadow(pass);
    let options = minimalOptions ? standard.optionsContextMin : standard.optionsContext;
    if (minimalOptions) this.shaderOptBuilder.updateMinRef(options, scene, this, objDefs, staticLightList, pass, sortedLights);else this.shaderOptBuilder.updateRef(options, scene, this, objDefs, staticLightList, pass, sortedLights);

    if (this.onUpdateShader) {
      options = this.onUpdateShader(options);
    }

    const processingOptions = new ShaderProcessorOptions(viewUniformFormat, viewBindGroupFormat);
    const library = device.getProgramLibrary();
    library.register('standard', standard);
    const shader = library.getProgram('standard', options, processingOptions);
    this._dirtyShader = false;
    return shader;
  }

  destroy() {
    for (const asset in this._assetReferences) {
      this._assetReferences[asset]._unbind();
    }

    this._assetReferences = null;
    super.destroy();
  }

}

StandardMaterial.TEXTURE_PARAMETERS = standardMaterialTextureParameters;
StandardMaterial.CUBEMAP_PARAMETERS = standardMaterialCubemapParameters;

const defineUniform = (name, getUniformFunc) => {
  _uniforms[name] = getUniformFunc;
};

const definePropInternal = (name, constructorFunc, setterFunc, getterFunc) => {
  Object.defineProperty(StandardMaterial.prototype, name, {
    get: getterFunc || function () {
      return this[`_${name}`];
    },
    set: setterFunc
  });
  _props[name] = {
    value: constructorFunc
  };
};

const defineValueProp = prop => {
  const internalName = `_${prop.name}`;

  const dirtyShaderFunc = prop.dirtyShaderFunc || (() => true);

  const setterFunc = function setterFunc(value) {
    const oldValue = this[internalName];

    if (oldValue !== value) {
      this._dirtyShader = this._dirtyShader || dirtyShaderFunc(oldValue, value);
      this[internalName] = value;
    }
  };

  definePropInternal(prop.name, () => prop.defaultValue, setterFunc, prop.getterFunc);
};

const defineAggProp = prop => {
  const internalName = `_${prop.name}`;

  const dirtyShaderFunc = prop.dirtyShaderFunc || (() => true);

  const setterFunc = function setterFunc(value) {
    const oldValue = this[internalName];

    if (!oldValue.equals(value)) {
      this._dirtyShader = this._dirtyShader || dirtyShaderFunc(oldValue, value);
      this[internalName] = oldValue.copy(value);
    }
  };

  definePropInternal(prop.name, () => prop.defaultValue.clone(), setterFunc, prop.getterFunc);
};

const defineProp = prop => {
  return prop.defaultValue && prop.defaultValue.clone ? defineAggProp(prop) : defineValueProp(prop);
};

function _defineTex2D(name, uv, channels, defChannel, vertexColor, detailMode) {
  _matTex2D[name] = channels;
  defineProp({
    name: `${name}Map`,
    defaultValue: null,
    dirtyShaderFunc: (oldValue, newValue) => {
      return !!oldValue !== !!newValue || oldValue && (oldValue.type !== newValue.type || oldValue.fixCubemapSeams !== newValue.fixCubemapSeams || oldValue.format !== newValue.format);
    }
  });
  defineProp({
    name: `${name}MapTiling`,
    defaultValue: new Vec2(1, 1)
  });
  defineProp({
    name: `${name}MapOffset`,
    defaultValue: new Vec2(0, 0)
  });
  defineProp({
    name: `${name}MapRotation`,
    defaultValue: 0
  });
  defineProp({
    name: `${name}MapUv`,
    defaultValue: uv
  });

  if (channels > 0) {
    defineProp({
      name: `${name}MapChannel`,
      defaultValue: defChannel ? defChannel : channels > 1 ? 'rgb' : 'g'
    });
  }

  if (vertexColor) {
    defineProp({
      name: `${name}VertexColor`,
      defaultValue: false
    });

    if (channels > 0) {
      defineProp({
        name: `${name}VertexColorChannel`,
        defaultValue: defChannel ? defChannel : channels > 1 ? 'rgb' : 'g'
      });
    }
  }

  if (detailMode) {
    defineProp({
      name: `${name}Mode`,
      defaultValue: DETAILMODE_MUL
    });
  }

  const mapTiling = `${name}MapTiling`;
  const mapOffset = `${name}MapOffset`;
  const mapRotation = `${name}MapRotation`;
  const mapTransform = `${name}MapTransform`;
  defineUniform(mapTransform, (material, device, scene) => {
    const tiling = material[mapTiling];
    const offset = material[mapOffset];
    const rotation = material[mapRotation];

    if (tiling.x === 1 && tiling.y === 1 && offset.x === 0 && offset.y === 0 && rotation === 0) {
      return null;
    }

    const uniform = material._allocUniform(mapTransform, () => {
      return [{
        name: `texture_${mapTransform}0`,
        value: new Float32Array(3)
      }, {
        name: `texture_${mapTransform}1`,
        value: new Float32Array(3)
      }];
    });

    const cr = Math.cos(rotation * math$1.DEG_TO_RAD);
    const sr = Math.sin(rotation * math$1.DEG_TO_RAD);
    const uniform0 = uniform[0].value;
    uniform0[0] = cr * tiling.x;
    uniform0[1] = -sr * tiling.y;
    uniform0[2] = offset.x;
    const uniform1 = uniform[1].value;
    uniform1[0] = sr * tiling.x;
    uniform1[1] = cr * tiling.y;
    uniform1[2] = 1.0 - tiling.y - offset.y;
    return uniform;
  });
}

function _defineColor(name, defaultValue) {
  defineProp({
    name: name,
    defaultValue: defaultValue,
    getterFunc: function () {
      this._dirtyShader = true;
      return this[`_${name}`];
    }
  });
  defineUniform(name, (material, device, scene) => {
    const uniform = material._allocUniform(name, () => new Float32Array(3));

    const color = material[name];
    const gamma = material.useGammaTonemap && scene.gammaCorrection;

    if (gamma) {
      uniform[0] = Math.pow(color.r, 2.2);
      uniform[1] = Math.pow(color.g, 2.2);
      uniform[2] = Math.pow(color.b, 2.2);
    } else {
      uniform[0] = color.r;
      uniform[1] = color.g;
      uniform[2] = color.b;
    }

    return uniform;
  });
}

function _defineFloat(name, defaultValue, getUniformFunc) {
  defineProp({
    name: name,
    defaultValue: defaultValue,
    dirtyShaderFunc: (oldValue, newValue) => {
      return (oldValue === 0 || oldValue === 1) !== (newValue === 0 || newValue === 1);
    }
  });
  defineUniform(name, getUniformFunc);
}

function _defineObject(name, getUniformFunc) {
  defineProp({
    name: name,
    defaultValue: null,
    dirtyShaderFunc: (oldValue, newValue) => {
      return !!oldValue === !!newValue;
    }
  });
  defineUniform(name, getUniformFunc);
}

function _defineFlag(name, defaultValue) {
  defineProp({
    name: name,
    defaultValue: defaultValue
  });
}

function _defineMaterialProps() {
  _defineColor('ambient', new Color(0.7, 0.7, 0.7));

  _defineColor('diffuse', new Color(1, 1, 1));

  _defineColor('specular', new Color(0, 0, 0));

  _defineColor('emissive', new Color(0, 0, 0));

  _defineColor('sheen', new Color(1, 1, 1));

  _defineColor('attenuation', new Color(1, 1, 1));

  _defineFloat('emissiveIntensity', 1);

  _defineFloat('specularityFactor', 1);

  _defineFloat('sheenGlossiness', 0);

  _defineFloat('shininess', 25, (material, device, scene) => {
    return material.shadingModel === SPECULAR_PHONG ? Math.pow(2, material.shininess * 0.01 * 11) : material.shininess * 0.01;
  });

  _defineFloat('heightMapFactor', 1, (material, device, scene) => {
    return material.heightMapFactor * 0.025;
  });

  _defineFloat('opacity', 1);

  _defineFloat('alphaFade', 1);

  _defineFloat('alphaTest', 0);

  _defineFloat('bumpiness', 1);

  _defineFloat('normalDetailMapBumpiness', 1);

  _defineFloat('reflectivity', 1);

  _defineFloat('occludeSpecularIntensity', 1);

  _defineFloat('refraction', 0);

  _defineFloat('refractionIndex', 1.0 / 1.5);

  _defineFloat('thickness', 0);

  _defineFloat('attenuationDistance', 0);

  _defineFloat('metalness', 1);

  _defineFloat('anisotropy', 0);

  _defineFloat('clearCoat', 0);

  _defineFloat('clearCoatGlossiness', 1);

  _defineFloat('clearCoatBumpiness', 1);

  _defineFloat('aoUvSet', 0, null);

  _defineFloat('iridescence', 0);

  _defineFloat('iridescenceRefractionIndex', 1.0 / 1.5);

  _defineFloat('iridescenceThicknessMin', 0);

  _defineFloat('iridescenceThicknessMax', 0);

  _defineObject('ambientSH');

  _defineObject('cubeMapProjectionBox', (material, device, scene) => {
    const uniform = material._allocUniform('cubeMapProjectionBox', () => {
      return [{
        name: 'envBoxMin',
        value: new Float32Array(3)
      }, {
        name: 'envBoxMax',
        value: new Float32Array(3)
      }];
    });

    const bboxMin = material.cubeMapProjectionBox.getMin();
    const minUniform = uniform[0].value;
    minUniform[0] = bboxMin.x;
    minUniform[1] = bboxMin.y;
    minUniform[2] = bboxMin.z;
    const bboxMax = material.cubeMapProjectionBox.getMax();
    const maxUniform = uniform[1].value;
    maxUniform[0] = bboxMax.x;
    maxUniform[1] = bboxMax.y;
    maxUniform[2] = bboxMax.z;
    return uniform;
  });

  _defineFlag('ambientTint', false);

  _defineFlag('diffuseTint', false);

  _defineFlag('specularTint', false);

  _defineFlag('specularityFactorTint', false);

  _defineFlag('emissiveTint', false);

  _defineFlag('fastTbn', false);

  _defineFlag('useMetalness', false);

  _defineFlag('useMetalnessSpecularColor', false);

  _defineFlag('useSheen', false);

  _defineFlag('enableGGXSpecular', false);

  _defineFlag('occludeDirect', false);

  _defineFlag('normalizeNormalMap', true);

  _defineFlag('conserveEnergy', true);

  _defineFlag('opacityFadesSpecular', true);

  _defineFlag('occludeSpecular', SPECOCC_AO);

  _defineFlag('shadingModel', SPECULAR_BLINN);

  _defineFlag('fresnelModel', FRESNEL_SCHLICK);

  _defineFlag('useDynamicRefraction', false);

  _defineFlag('cubeMapProjection', CUBEPROJ_NONE);

  _defineFlag('customFragmentShader', null);

  _defineFlag('forceFragmentPrecision', null);

  _defineFlag('useFog', true);

  _defineFlag('useLighting', true);

  _defineFlag('useGammaTonemap', true);

  _defineFlag('useSkybox', true);

  _defineFlag('forceUv1', false);

  _defineFlag('pixelSnap', false);

  _defineFlag('twoSidedLighting', false);

  _defineFlag('nineSlicedMode', undefined);

  _defineFlag('msdfTextAttribute', false);

  _defineFlag('useIridescence', false);

  _defineTex2D('diffuse', 0, 3, '', true);

  _defineTex2D('specular', 0, 3, '', true);

  _defineTex2D('emissive', 0, 3, '', true);

  _defineTex2D('thickness', 0, 1, '', true);

  _defineTex2D('specularityFactor', 0, 1, '', true);

  _defineTex2D('normal', 0, -1, '', false);

  _defineTex2D('metalness', 0, 1, '', true);

  _defineTex2D('gloss', 0, 1, '', true);

  _defineTex2D('opacity', 0, 1, 'a', true);

  _defineTex2D('refraction', 0, 1, '', true);

  _defineTex2D('height', 0, 1, '', false);

  _defineTex2D('ao', 0, 1, '', true);

  _defineTex2D('light', 1, 3, '', true);

  _defineTex2D('msdf', 0, 3, '', false);

  _defineTex2D('diffuseDetail', 0, 3, '', false, true);

  _defineTex2D('normalDetail', 0, -1, '', false);

  _defineTex2D('clearCoat', 0, 1, '', true);

  _defineTex2D('clearCoatGloss', 0, 1, '', true);

  _defineTex2D('clearCoatNormal', 0, -1, '', false);

  _defineTex2D('sheen', 0, 3, '', true);

  _defineTex2D('sheenGloss', 0, 1, '', true);

  _defineTex2D('iridescence', 0, 1, '', true);

  _defineTex2D('iridescenceThickness', 0, 1, '', true);

  _defineObject('cubeMap');

  _defineObject('sphereMap');

  _defineObject('envAtlas');

  const getterFunc = function getterFunc() {
    return this._prefilteredCubemaps;
  };

  const setterFunc = function setterFunc(value) {
    const cubemaps = this._prefilteredCubemaps;
    value = value || [];
    let changed = false;
    let complete = true;

    for (let i = 0; i < 6; ++i) {
      const v = value[i] || null;

      if (cubemaps[i] !== v) {
        cubemaps[i] = v;
        changed = true;
      }

      complete = complete && !!cubemaps[i];
    }

    if (changed) {
      if (complete) {
        this.envAtlas = EnvLighting.generatePrefilteredAtlas(cubemaps, {
          target: this.envAtlas
        });
      } else {
        if (this.envAtlas) {
          this.envAtlas.destroy();
          this.envAtlas = null;
        }
      }

      this._dirtyShader = true;
    }
  };

  const empty = [null, null, null, null, null, null];
  definePropInternal('prefilteredCubemaps', () => empty.slice(), setterFunc, getterFunc);
}

_defineMaterialProps();

class ProgramLibrary {
  constructor(device) {
    this.processedCache = new Map();
    this._device = device;
    this._cache = {};
    this._generators = {};
    this._isClearingCache = false;
    this._precached = false;
    this._programsCollection = [];
    this._defaultStdMatOption = {};
    this._defaultStdMatOptionMin = {};
    const m = new StandardMaterial();
    m.shaderOptBuilder.updateRef(this._defaultStdMatOption, {}, m, null, [], SHADER_FORWARD, null);
    m.shaderOptBuilder.updateMinRef(this._defaultStdMatOptionMin, {}, m, null, [], SHADER_SHADOW, null);
  }

  register(name, generator) {
    if (!this.isRegistered(name)) {
      this._generators[name] = generator;
    }
  }

  unregister(name) {
    if (this.isRegistered(name)) {
      delete this._generators[name];
    }
  }

  isRegistered(name) {
    const generator = this._generators[name];
    return generator !== undefined;
  }

  generateShader(generator, name, key, options) {
    let shader = this._cache[key];

    if (!shader) {
      let lights;

      if (options.lights) {
        lights = options.lights;
        options.lights = lights.map(function (l) {
          const lcopy = l.clone ? l.clone() : l;
          lcopy.key = l.key;
          return lcopy;
        });
      }

      this.storeNewProgram(name, options);
      if (options.lights) options.lights = lights;
      if (this._precached) ;
      const device = this._device;
      const shaderDefinition = generator.createShaderDefinition(device, options);
      shaderDefinition.name = `${name}-pass:${options.pass}`;
      shader = this._cache[key] = new Shader(device, shaderDefinition);
    }

    return shader;
  }

  getProgram(name, options, processingOptions) {
    const generator = this._generators[name];

    if (!generator) {
      return null;
    }

    const generationKey = generator.generateKey(options);
    const processingKey = JSON.stringify(processingOptions);
    const totalKey = `${generationKey}#${processingKey}`;
    let processedShader = this.processedCache.get(totalKey);

    if (!processedShader) {
      const generatedShader = this.generateShader(generator, name, generationKey, options);
      const generatedShaderDef = generatedShader.definition;
      const shaderDefinition = {
        attributes: generatedShaderDef.attributes,
        vshader: generatedShaderDef.vshader,
        fshader: generatedShaderDef.fshader,
        processingOptions: processingOptions
      };
      processedShader = new Shader(this._device, shaderDefinition);
      this.processedCache.set(totalKey, processedShader);
    }

    return processedShader;
  }

  storeNewProgram(name, options) {
    let opt = {};

    if (name === "standard") {
      const defaultMat = this._getDefaultStdMatOptions(options.pass);

      for (const p in options) {
        if (options.hasOwnProperty(p) && defaultMat[p] !== options[p] || p === "pass") opt[p] = options[p];
      }
    } else {
      opt = options;
    }

    this._programsCollection.push(JSON.stringify({
      name: name,
      options: opt
    }));
  }

  dumpPrograms() {
    let text = 'let device = pc.app ? pc.app.graphicsDevice : pc.Application.getApplication().graphicsDevice;\n';
    text += 'let shaders = [';
    if (this._programsCollection[0]) text += '\n\t' + this._programsCollection[0];

    for (let i = 1; i < this._programsCollection.length; ++i) {
      text += ',\n\t' + this._programsCollection[i];
    }

    text += '\n];\n';
    text += 'device.programLib.precompile(shaders);\n';
    text += 'if (pc.version != \"' + version + '\" || pc.revision != \"' + revision + '\")\n';
    text += '\tconsole.warn(\"precompile-shaders.js: engine version mismatch, rebuild shaders lib with current engine\");';
    const element = document.createElement('a');
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', 'precompile-shaders.js');
    element.style.display = 'none';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  }

  clearCache() {
    const cache = this._cache;
    this._isClearingCache = true;

    for (const key in cache) {
      if (cache.hasOwnProperty(key)) {
        cache[key].destroy();
      }
    }

    this._cache = {};
    this._isClearingCache = false;
  }

  removeFromCache(shader) {
    if (this._isClearingCache) return;
    const cache = this._cache;

    for (const key in cache) {
      if (cache.hasOwnProperty(key)) {
        if (cache[key] === shader) {
          delete cache[key];
          break;
        }
      }
    }
  }

  _getDefaultStdMatOptions(pass) {
    return pass === SHADER_DEPTH || pass === SHADER_PICK || ShaderPass.isShadow(pass) ? this._defaultStdMatOptionMin : this._defaultStdMatOption;
  }

  precompile(cache) {
    if (cache) {
      const shaders = new Array(cache.length);

      for (let i = 0; i < cache.length; i++) {
        if (cache[i].name === "standard") {
          const opt = cache[i].options;

          const defaultMat = this._getDefaultStdMatOptions(opt.pass);

          for (const p in defaultMat) {
            if (defaultMat.hasOwnProperty(p) && opt[p] === undefined) opt[p] = defaultMat[p];
          }
        }

        shaders[i] = this.getProgram(cache[i].name, cache[i].options);
      }
    }

    this._precached = true;
  }

}

const EVENT_RESIZE = 'resizecanvas';

class GraphicsDevice extends EventHandler {
  constructor(canvas) {
    super();
    this.canvas = void 0;
    this.deviceType = void 0;
    this.scope = void 0;
    this.boneLimit = void 0;
    this.maxAnisotropy = void 0;
    this.maxCubeMapSize = void 0;
    this.maxTextureSize = void 0;
    this.maxVolumeSize = void 0;
    this.precision = void 0;
    this.renderTarget = null;
    this.insideRenderPass = false;
    this.supportsInstancing = void 0;
    this.supportsUniformBuffers = false;
    this.textureFloatRenderable = void 0;
    this.textureHalfFloatRenderable = void 0;
    this.canvas = canvas;
    this._width = 0;
    this._height = 0;
    this._maxPixelRatio = 1;
    this.shaders = [];
    this.buffers = [];
    this.textures = [];
    this.targets = [];
    this._vram = {
      tex: 0,
      vb: 0,
      ib: 0,
      ub: 0
    };
    this._shaderStats = {
      vsCompiled: 0,
      fsCompiled: 0,
      linked: 0,
      materialShaders: 0,
      compileTime: 0
    };
    this.initializeContextCaches();
    this._drawCallsPerFrame = 0;
    this._shaderSwitchesPerFrame = 0;
    this._primsPerFrame = [];

    for (let i = PRIMITIVE_POINTS; i <= PRIMITIVE_TRIFAN; i++) {
      this._primsPerFrame[i] = 0;
    }

    this._renderTargetCreationTime = 0;
    this.scope = new ScopeSpace("Device");
    this.textureBias = this.scope.resolve("textureBias");
    this.textureBias.setValue(0.0);
    this.programLib = new ProgramLibrary(this);
  }

  destroy() {
    this.fire('destroy');
  }

  postDestroy() {
    this.scope = null;
    this.canvas = null;
  }

  toJSON(key) {
    return undefined;
  }

  initializeContextCaches() {
    this.indexBuffer = null;
    this.vertexBuffers = [];
    this.shader = null;
    this.renderTarget = null;
  }

  getProgramLibrary() {
    return this.programLib;
  }

  setProgramLibrary(programLib) {
    this.programLib = programLib;
  }

  setRenderTarget(renderTarget) {
    this.renderTarget = renderTarget;
  }

  setIndexBuffer(indexBuffer) {
    this.indexBuffer = indexBuffer;
  }

  setVertexBuffer(vertexBuffer) {
    if (vertexBuffer) {
      this.vertexBuffers.push(vertexBuffer);
    }
  }

  getRenderTarget() {
    return this.renderTarget;
  }

  initRenderTarget(target) {
    if (target.initialized) return;
    target.init();
    this.targets.push(target);
  }

  _isBrowserInterface(texture) {
    return typeof HTMLCanvasElement !== 'undefined' && texture instanceof HTMLCanvasElement || typeof HTMLImageElement !== 'undefined' && texture instanceof HTMLImageElement || typeof HTMLVideoElement !== 'undefined' && texture instanceof HTMLVideoElement || typeof ImageBitmap !== 'undefined' && texture instanceof ImageBitmap;
  }

  resizeCanvas(width, height) {
    this._width = width;
    this._height = height;
    const ratio = Math.min(this._maxPixelRatio, platform.browser ? window.devicePixelRatio : 1);
    width = Math.floor(width * ratio);
    height = Math.floor(height * ratio);

    if (this.canvas.width !== width || this.canvas.height !== height) {
      this.canvas.width = width;
      this.canvas.height = height;
      this.fire(EVENT_RESIZE, width, height);
    }
  }

  setResolution(width, height) {
    this._width = width;
    this._height = height;
    this.canvas.width = width;
    this.canvas.height = height;
    this.fire(EVENT_RESIZE, width, height);
  }

  updateClientRect() {
    this.clientRect = this.canvas.getBoundingClientRect();
  }

  get width() {
    return this.canvas.width;
  }

  get height() {
    return this.canvas.height;
  }

  set fullscreen(fullscreen) {}

  get fullscreen() {
    return false;
  }

  set maxPixelRatio(ratio) {
    this._maxPixelRatio = ratio;
    this.resizeCanvas(this._width, this._height);
  }

  get maxPixelRatio() {
    return this._maxPixelRatio;
  }

  getBoneLimit() {
    return this.boneLimit;
  }

  setBoneLimit(maxBones) {
    this.boneLimit = maxBones;
  }

}

const defaultOptions = {
  depth: true,
  face: 0
};
let id$3 = 0;

class RenderTarget {
  constructor(options) {
    var _this$_colorBuffer, _this$_depthBuffer;

    this.id = id$3++;
    const _arg2 = arguments[1];
    const _arg3 = arguments[2];

    if (options instanceof GraphicsDevice) {
      this._colorBuffer = _arg2;
      options = _arg3;
    } else {
      this._colorBuffer = options.colorBuffer;
    }

    if (this._colorBuffer) {
      this._colorBuffer._isRenderTarget = true;
    }

    options = options !== undefined ? options : defaultOptions;
    this._depthBuffer = options.depthBuffer;
    this._face = options.face !== undefined ? options.face : 0;

    if (this._depthBuffer) {
      const format = this._depthBuffer._format;

      if (format === PIXELFORMAT_DEPTH) {
        this._depth = true;
        this._stencil = false;
      } else if (format === PIXELFORMAT_DEPTHSTENCIL) {
        this._depth = true;
        this._stencil = true;
      } else {
        this._depth = false;
        this._stencil = false;
      }
    } else {
      this._depth = options.depth !== undefined ? options.depth : true;
      this._stencil = options.stencil !== undefined ? options.stencil : false;
    }

    const device = ((_this$_colorBuffer = this._colorBuffer) == null ? void 0 : _this$_colorBuffer.device) || ((_this$_depthBuffer = this._depthBuffer) == null ? void 0 : _this$_depthBuffer.device) || options.graphicsDevice;
    this._device = device;
    this._samples = options.samples !== undefined ? Math.min(options.samples, this._device.maxSamples) : 1;
    this.autoResolve = options.autoResolve !== undefined ? options.autoResolve : true;
    this.name = options.name;

    if (!this.name) {
      var _this$_colorBuffer2;

      this.name = (_this$_colorBuffer2 = this._colorBuffer) == null ? void 0 : _this$_colorBuffer2.name;
    }

    if (!this.name) {
      var _this$_depthBuffer2;

      this.name = (_this$_depthBuffer2 = this._depthBuffer) == null ? void 0 : _this$_depthBuffer2.name;
    }

    if (!this.name) {
      this.name = "Untitled";
    }

    this.flipY = !!options.flipY;
    this.impl = device.createRenderTargetImpl(this);
  }

  destroy() {
    const device = this._device;

    if (device) {
      const idx = device.targets.indexOf(this);

      if (idx !== -1) {
        device.targets.splice(idx, 1);
      }

      if (device.renderTarget === this) {
        device.setRenderTarget(null);
      }

      this.destroyFrameBuffers();
    }
  }

  destroyFrameBuffers() {
    const device = this._device;

    if (device) {
      this.impl.destroy(device);
    }
  }

  destroyTextureBuffers() {
    if (this._depthBuffer) {
      this._depthBuffer.destroy();

      this._depthBuffer = null;
    }

    if (this._colorBuffer) {
      this._colorBuffer.destroy();

      this._colorBuffer = null;
    }
  }

  init() {
    this.impl.init(this._device, this);
  }

  get initialized() {
    return this.impl.initialized;
  }

  loseContext() {
    this.impl.loseContext();
  }

  resolve(color = true, depth = !!this._depthBuffer) {
    if (this._device && this._samples > 1) {
      this.impl.resolve(this._device, this, color, depth);
    }
  }

  copy(source, color, depth) {
    if (!this._device) {
      if (source._device) {
        this._device = source._device;
      } else {
        return false;
      }
    }

    const success = this._device.copyRenderTarget(source, this, color, depth);

    return success;
  }

  get samples() {
    return this._samples;
  }

  get depth() {
    return this._depth;
  }

  get stencil() {
    return this._stencil;
  }

  get colorBuffer() {
    return this._colorBuffer;
  }

  get depthBuffer() {
    return this._depthBuffer;
  }

  get face() {
    return this._face;
  }

  get width() {
    var _this$_colorBuffer3, _this$_depthBuffer3;

    return ((_this$_colorBuffer3 = this._colorBuffer) == null ? void 0 : _this$_colorBuffer3.width) || ((_this$_depthBuffer3 = this._depthBuffer) == null ? void 0 : _this$_depthBuffer3.width) || this._device.width;
  }

  get height() {
    var _this$_colorBuffer4, _this$_depthBuffer4;

    return ((_this$_colorBuffer4 = this._colorBuffer) == null ? void 0 : _this$_colorBuffer4.height) || ((_this$_depthBuffer4 = this._depthBuffer) == null ? void 0 : _this$_depthBuffer4.height) || this._device.height;
  }

}

function areaElement(x, y) {
  return Math.atan2(x * y, Math.sqrt(x * x + y * y + 1));
}

function texelCoordSolidAngle(u, v, size) {
  let _u = 2.0 * (u + 0.5) / size - 1.0;

  let _v = 2.0 * (v + 0.5) / size - 1.0;

  _u *= 1.0 - 1.0 / size;
  _v *= 1.0 - 1.0 / size;
  const invResolution = 1.0 / size;
  const x0 = _u - invResolution;
  const y0 = _v - invResolution;
  const x1 = _u + invResolution;
  const y1 = _v + invResolution;
  let solidAngle = areaElement(x0, y0) - areaElement(x0, y1) - areaElement(x1, y0) + areaElement(x1, y1);

  if (u === 0 && v === 0 || u === size - 1 && v === 0 || u === 0 && v === size - 1 || u === size - 1 && v === size - 1) {
    solidAngle /= 3;
  } else if (u === 0 || v === 0 || u === size - 1 || v === size - 1) {
    solidAngle *= 0.5;
  }

  return solidAngle;
}

function shFromCubemap(device, source, dontFlipX) {
  if (source.format !== PIXELFORMAT_R8_G8_B8_A8) {
    return null;
  }

  if (!source._levels[0] || !source._levels[0][0]) {
    return null;
  }

  const cubeSize = source.width;

  if (!source._levels[0][0].length) {
    if (source._levels[0][0] instanceof HTMLImageElement) {
      const shader = createShaderFromCode(device, shaderChunks.fullscreenQuadVS, shaderChunks.fullscreenQuadPS, "fsQuadSimple");
      const constantTexSource = device.scope.resolve("source");

      for (let face = 0; face < 6; face++) {
        const img = source._levels[0][face];
        const tex = new Texture(device, {
          name: 'prefiltered-cube',
          cubemap: false,
          type: TEXTURETYPE_DEFAULT,
          format: source.format,
          width: cubeSize,
          height: cubeSize,
          mipmaps: false
        });
        tex._levels[0] = img;
        tex.upload();
        const tex2 = new Texture(device, {
          name: 'prefiltered-cube',
          cubemap: false,
          type: TEXTURETYPE_DEFAULT,
          format: source.format,
          width: cubeSize,
          height: cubeSize,
          mipmaps: false
        });
        const targ = new RenderTarget({
          colorBuffer: tex2,
          depth: false
        });
        constantTexSource.setValue(tex);
        drawQuadWithShader(device, targ, shader);
        const gl = device.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, targ.impl._glFrameBuffer);
        const pixels = new Uint8Array(cubeSize * cubeSize * 4);
        gl.readPixels(0, 0, tex.width, tex.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
        source._levels[0][face] = pixels;
      }
    } else {
      return null;
    }
  }

  const dirs = [];

  for (let y = 0; y < cubeSize; y++) {
    for (let x = 0; x < cubeSize; x++) {
      const u = x / (cubeSize - 1) * 2 - 1;
      const v = y / (cubeSize - 1) * 2 - 1;
      dirs[y * cubeSize + x] = new Vec3(u, v, 1.0).normalize();
    }
  }

  const sh = new Float32Array(9 * 3);
  const coef1 = 0;
  const coef2 = 1 * 3;
  const coef3 = 2 * 3;
  const coef4 = 3 * 3;
  const coef5 = 4 * 3;
  const coef6 = 5 * 3;
  const coef7 = 6 * 3;
  const coef8 = 7 * 3;
  const coef9 = 8 * 3;
  const nx = 0;
  const px = 1;
  const ny = 2;
  const py = 3;
  const nz = 4;
  const pz = 5;
  let accum = 0;

  for (let face = 0; face < 6; face++) {
    for (let y = 0; y < cubeSize; y++) {
      for (let x = 0; x < cubeSize; x++) {
        const addr = y * cubeSize + x;
        const weight = texelCoordSolidAngle(x, y, cubeSize);
        const weight1 = weight * 4 / 17;
        const weight2 = weight * 8 / 17;
        const weight3 = weight * 15 / 17;
        const weight4 = weight * 5 / 68;
        const weight5 = weight * 15 / 68;
        const dir = dirs[addr];
        let dx, dy, dz;

        if (face === nx) {
          dx = dir.z;
          dy = -dir.y;
          dz = -dir.x;
        } else if (face === px) {
          dx = -dir.z;
          dy = -dir.y;
          dz = dir.x;
        } else if (face === ny) {
          dx = dir.x;
          dy = dir.z;
          dz = dir.y;
        } else if (face === py) {
          dx = dir.x;
          dy = -dir.z;
          dz = -dir.y;
        } else if (face === nz) {
          dx = dir.x;
          dy = -dir.y;
          dz = dir.z;
        } else if (face === pz) {
          dx = -dir.x;
          dy = -dir.y;
          dz = -dir.z;
        }

        if (!dontFlipX) dx = -dx;
        const a = source._levels[0][face][addr * 4 + 3] / 255.0;

        for (let c = 0; c < 3; c++) {
          let value = source._levels[0][face][addr * 4 + c] / 255.0;

          if (source.type === TEXTURETYPE_RGBM) {
            value *= a * 8.0;
            value *= value;
          } else {
            value = Math.pow(value, 2.2);
          }

          sh[coef1 + c] += value * weight1;
          sh[coef2 + c] += value * weight2 * dx;
          sh[coef3 + c] += value * weight2 * dy;
          sh[coef4 + c] += value * weight2 * dz;
          sh[coef5 + c] += value * weight3 * dx * dz;
          sh[coef6 + c] += value * weight3 * dz * dy;
          sh[coef7 + c] += value * weight3 * dy * dx;
          sh[coef8 + c] += value * weight4 * (3.0 * dz * dz - 1.0);
          sh[coef9 + c] += value * weight5 * (dx * dx - dy * dy);
          accum += weight;
        }
      }
    }
  }

  for (let c = 0; c < sh.length; c++) {
    sh[c] *= 4 * Math.PI / accum;
  }

  return sh;
}

var bakeDirLmEndPS = `
    vec4 dirLm = texture2D(texture_dirLightMap, vUv1);

    if (bakeDir > 0.5) {
        if (dAtten > 0.00001) {
            dirLm.xyz = dirLm.xyz * 2.0 - vec3(1.0);
            dAtten = saturate(dAtten);
            gl_FragColor.rgb = normalize(dLightDirNormW.xyz*dAtten + dirLm.xyz*dirLm.w) * 0.5 + vec3(0.5);
            gl_FragColor.a = dirLm.w + dAtten;
            gl_FragColor.a = max(gl_FragColor.a, 1.0 / 255.0);
        } else {
            gl_FragColor = dirLm;
        }
    } else {
        gl_FragColor.rgb = dirLm.xyz;
        gl_FragColor.a = max(dirLm.w, dAtten > 0.00001? (1.0/255.0) : 0.0);
    }
`;

var bakeLmEndPS = `
    gl_FragColor.rgb = dDiffuseLight;
    gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(0.5));
    gl_FragColor.rgb /= 8.0;
    gl_FragColor.a = clamp( max( max( gl_FragColor.r, gl_FragColor.g ), max( gl_FragColor.b, 1.0 / 255.0 ) ), 0.0,1.0 );
    gl_FragColor.a = ceil(gl_FragColor.a * 255.0) / 255.0;
    gl_FragColor.rgb /= gl_FragColor.a;
`;

var dilatePS = `
#define SHADER_NAME Dilate

varying vec2 vUv0;

uniform sampler2D source;
uniform vec2 pixelOffset;

void main(void) {
    vec4 c = texture2D(source, vUv0);
    c = c.a>0.0? c : texture2D(source, vUv0 - pixelOffset);
    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(0, -pixelOffset.y));
    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(pixelOffset.x, -pixelOffset.y));
    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(-pixelOffset.x, 0));
    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(pixelOffset.x, 0));
    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(-pixelOffset.x, pixelOffset.y));
    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(0, pixelOffset.y));
    c = c.a>0.0? c : texture2D(source, vUv0 + pixelOffset);
    gl_FragColor = c;
}
`;

var bilateralDeNoisePS = `
// bilateral filter, based on https://www.shadertoy.com/view/4dfGDH# and
// http://people.csail.mit.edu/sparis/bf_course/course_notes.pdf

// A bilateral filter is a non-linear, edge-preserving, and noise-reducing smoothing filter for images.
// It replaces the intensity of each pixel with a weighted average of intensity values from nearby pixels.
// This weight can be based on a Gaussian distribution. Crucially, the weights depend not only on
// Euclidean distance of pixels, but also on the radiometric differences (e.g., range differences, such
// as color intensity, depth distance, etc.). This preserves sharp edges.

#define SHADER_NAME BilateralDeNoise

float normpdf3(in vec3 v, in float sigma) {
    return 0.39894 * exp(-0.5 * dot(v, v) / (sigma * sigma)) / sigma;
}

vec3 decodeRGBM(vec4 rgbm) {
    vec3 color = (8.0 * rgbm.a) * rgbm.rgb;
    return color * color;
}

float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec4 encodeRGBM(vec3 color) { // modified RGBM
    vec4 encoded;
    encoded.rgb = pow(color.rgb, vec3(0.5));
    encoded.rgb *= 1.0 / 8.0;

    encoded.a = saturate( max( max( encoded.r, encoded.g ), max( encoded.b, 1.0 / 255.0 ) ) );
    encoded.a = ceil(encoded.a * 255.0) / 255.0;

    encoded.rgb /= encoded.a;
    return encoded;
}

// filter size
#define MSIZE 15

varying vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
uniform vec2 sigmas;
uniform float bZnorm;
uniform float kernel[MSIZE];

void main(void) {
    
    vec4 pixelRgbm = texture2D(source, vUv0);

    // lightmap specific optimization - skip pixels that were not baked
    // this also allows dilate filter that work on the output of this to work correctly, as it depends on .a being zero
    // to dilate, which the following blur filter would otherwise modify
    if (pixelRgbm.a <= 0.0) {
        gl_FragColor = pixelRgbm;
        return ;
    }

    // range sigma - controls blurriness based on a pixel distance
    float sigma = sigmas.x;

    // domain sigma - controls blurriness based on a pixel similarity (to preserve edges)
    float bSigma = sigmas.y;

    vec3 pixelHdr = decodeRGBM(pixelRgbm);
    vec3 accumulatedHdr = vec3(0.0);
    float accumulatedFactor = 0.0;

    // read out the texels
    const int kSize = (MSIZE-1)/2;
    for (int i = -kSize; i <= kSize; ++i) {
        for (int j = -kSize; j <= kSize; ++j) {
            
            // sample the pixel with offset
            vec2 coord = vUv0 + vec2(float(i), float(j)) * pixelOffset;
            vec4 rgbm = texture2D(source, coord);

            // lightmap - only use baked pixels
            if (rgbm.a > 0.0) {
                vec3 hdr = decodeRGBM(rgbm);

                // bilateral factors
                float factor = kernel[kSize + j] * kernel[kSize + i];
                factor *= normpdf3(hdr - pixelHdr, bSigma) * bZnorm;

                // accumulate
                accumulatedHdr += factor * hdr;
                accumulatedFactor += factor;
            }
        }
    }

    gl_FragColor = encodeRGBM(accumulatedHdr / accumulatedFactor);
}
`;

const shaderChunksLightmapper = {
  bakeDirLmEndPS,
  bakeLmEndPS,
  dilatePS,
  bilateralDeNoisePS
};

let id$2 = 0;

class IndexBuffer {
  constructor(graphicsDevice, format, numIndices, usage = BUFFER_STATIC, initialData) {
    this.device = graphicsDevice;
    this.format = format;
    this.numIndices = numIndices;
    this.usage = usage;
    this.id = id$2++;
    this.impl = graphicsDevice.createIndexBufferImpl(this);
    const bytesPerIndex = typedArrayIndexFormatsByteSize[format];
    this.bytesPerIndex = bytesPerIndex;
    this.numBytes = this.numIndices * bytesPerIndex;

    if (initialData) {
      this.setData(initialData);
    } else {
      this.storage = new ArrayBuffer(this.numBytes);
    }

    this.adjustVramSizeTracking(graphicsDevice._vram, this.numBytes);
    this.device.buffers.push(this);
  }

  destroy() {
    const device = this.device;
    const idx = device.buffers.indexOf(this);

    if (idx !== -1) {
      device.buffers.splice(idx, 1);
    }

    if (this.device.indexBuffer === this) {
      this.device.indexBuffer = null;
    }

    if (this.impl.initialized) {
      this.impl.destroy(device);
      this.adjustVramSizeTracking(device._vram, -this.storage.byteLength);
    }
  }

  adjustVramSizeTracking(vram, size) {
    vram.ib += size;
  }

  loseContext() {
    this.impl.loseContext();
  }

  getFormat() {
    return this.format;
  }

  getNumIndices() {
    return this.numIndices;
  }

  lock() {
    return this.storage;
  }

  unlock() {
    this.impl.unlock(this);
  }

  setData(data) {
    if (data.byteLength !== this.numBytes) {
      return false;
    }

    this.storage = data;
    this.unlock();
    return true;
  }

  _lockTypedArray() {
    const lock = this.lock();
    const indices = this.format === INDEXFORMAT_UINT32 ? new Uint32Array(lock) : this.format === INDEXFORMAT_UINT16 ? new Uint16Array(lock) : new Uint8Array(lock);
    return indices;
  }

  writeData(data, count) {
    const indices = this._lockTypedArray();

    if (data.length > count) {
      if (ArrayBuffer.isView(data)) {
        data = data.subarray(0, count);
        indices.set(data);
      } else {
        for (let i = 0; i < count; i++) indices[i] = data[i];
      }
    } else {
      indices.set(data);
    }

    this.unlock();
  }

  readData(data) {
    const indices = this._lockTypedArray();

    const count = this.numIndices;

    if (ArrayBuffer.isView(data)) {
      data.set(indices);
    } else {
      data.length = 0;

      for (let i = 0; i < count; i++) data[i] = indices[i];
    }

    return count;
  }

}

function set1(a) {
  this.array[this.index] = a;
}

function set2(a, b) {
  this.array[this.index] = a;
  this.array[this.index + 1] = b;
}

function set3(a, b, c) {
  this.array[this.index] = a;
  this.array[this.index + 1] = b;
  this.array[this.index + 2] = c;
}

function set4(a, b, c, d) {
  this.array[this.index] = a;
  this.array[this.index + 1] = b;
  this.array[this.index + 2] = c;
  this.array[this.index + 3] = d;
}

function arraySet1(index, inputArray, inputIndex) {
  this.array[index] = inputArray[inputIndex];
}

function arraySet2(index, inputArray, inputIndex) {
  this.array[index] = inputArray[inputIndex];
  this.array[index + 1] = inputArray[inputIndex + 1];
}

function arraySet3(index, inputArray, inputIndex) {
  this.array[index] = inputArray[inputIndex];
  this.array[index + 1] = inputArray[inputIndex + 1];
  this.array[index + 2] = inputArray[inputIndex + 2];
}

function arraySet4(index, inputArray, inputIndex) {
  this.array[index] = inputArray[inputIndex];
  this.array[index + 1] = inputArray[inputIndex + 1];
  this.array[index + 2] = inputArray[inputIndex + 2];
  this.array[index + 3] = inputArray[inputIndex + 3];
}

function arrayGet1(offset, outputArray, outputIndex) {
  outputArray[outputIndex] = this.array[offset];
}

function arrayGet2(offset, outputArray, outputIndex) {
  outputArray[outputIndex] = this.array[offset];
  outputArray[outputIndex + 1] = this.array[offset + 1];
}

function arrayGet3(offset, outputArray, outputIndex) {
  outputArray[outputIndex] = this.array[offset];
  outputArray[outputIndex + 1] = this.array[offset + 1];
  outputArray[outputIndex + 2] = this.array[offset + 2];
}

function arrayGet4(offset, outputArray, outputIndex) {
  outputArray[outputIndex] = this.array[offset];
  outputArray[outputIndex + 1] = this.array[offset + 1];
  outputArray[outputIndex + 2] = this.array[offset + 2];
  outputArray[outputIndex + 3] = this.array[offset + 3];
}

class VertexIteratorAccessor {
  constructor(buffer, vertexElement, vertexFormat) {
    this.index = 0;
    this.numComponents = vertexElement.numComponents;

    if (vertexFormat.interleaved) {
      this.array = new typedArrayTypes[vertexElement.dataType](buffer, vertexElement.offset);
    } else {
      this.array = new typedArrayTypes[vertexElement.dataType](buffer, vertexElement.offset, vertexFormat.vertexCount * vertexElement.numComponents);
    }

    this.stride = vertexElement.stride / this.array.constructor.BYTES_PER_ELEMENT;

    switch (vertexElement.numComponents) {
      case 1:
        this.set = set1;
        this.getToArray = arrayGet1;
        this.setFromArray = arraySet1;
        break;

      case 2:
        this.set = set2;
        this.getToArray = arrayGet2;
        this.setFromArray = arraySet2;
        break;

      case 3:
        this.set = set3;
        this.getToArray = arrayGet3;
        this.setFromArray = arraySet3;
        break;

      case 4:
        this.set = set4;
        this.getToArray = arrayGet4;
        this.setFromArray = arraySet4;
        break;
    }
  }

  get(offset) {
    return this.array[this.index + offset];
  }

  set(a, b, c, d) {}

  getToArray(offset, outputArray, outputIndex) {}

  setFromArray(index, inputArray, inputIndex) {}

}

class VertexIterator {
  constructor(vertexBuffer) {
    this.vertexBuffer = vertexBuffer;
    this.vertexFormatSize = vertexBuffer.getFormat().size;
    this.buffer = this.vertexBuffer.lock();
    this.accessors = [];
    this.element = {};
    const vertexFormat = this.vertexBuffer.getFormat();

    for (let i = 0; i < vertexFormat.elements.length; i++) {
      const vertexElement = vertexFormat.elements[i];
      this.accessors[i] = new VertexIteratorAccessor(this.buffer, vertexElement, vertexFormat);
      this.element[vertexElement.name] = this.accessors[i];
    }
  }

  next(count = 1) {
    let i = 0;
    const accessors = this.accessors;
    const numAccessors = this.accessors.length;

    while (i < numAccessors) {
      const accessor = accessors[i++];
      accessor.index += count * accessor.stride;
    }
  }

  end() {
    this.vertexBuffer.unlock();
  }

  writeData(semantic, data, numVertices) {
    const element = this.element[semantic];

    if (element) {
      if (numVertices > this.vertexBuffer.numVertices) {
        numVertices = this.vertexBuffer.numVertices;
      }

      const numComponents = element.numComponents;

      if (this.vertexBuffer.getFormat().interleaved) {
        let index = 0;

        for (let i = 0; i < numVertices; i++) {
          element.setFromArray(index, data, i * numComponents);
          index += element.stride;
        }
      } else {
        if (data.length > numVertices * numComponents) {
          const copyCount = numVertices * numComponents;

          if (ArrayBuffer.isView(data)) {
            data = data.subarray(0, copyCount);
            element.array.set(data);
          } else {
            for (let i = 0; i < copyCount; i++) element.array[i] = data[i];
          }
        } else {
          element.array.set(data);
        }
      }
    }
  }

  readData(semantic, data) {
    const element = this.element[semantic];
    let count = 0;

    if (element) {
      count = this.vertexBuffer.numVertices;
      let i;
      const numComponents = element.numComponents;

      if (this.vertexBuffer.getFormat().interleaved) {
        if (Array.isArray(data)) data.length = 0;
        element.index = 0;
        let offset = 0;

        for (i = 0; i < count; i++) {
          element.getToArray(offset, data, i * numComponents);
          offset += element.stride;
        }
      } else {
        if (ArrayBuffer.isView(data)) {
          data.set(element.array);
        } else {
          data.length = 0;
          const copyCount = count * numComponents;

          for (i = 0; i < copyCount; i++) data[i] = element.array[i];
        }
      }
    }

    return count;
  }

}

const primitive = {
  type: PRIMITIVE_TRISTRIP,
  base: 0,
  count: 4,
  indexed: false
};

class PostEffect$1 {
  constructor(graphicsDevice) {
    this.device = graphicsDevice;
    this.shader = null;
    this.vertexBuffer = createFullscreenQuad(graphicsDevice);
    this.needsDepthBuffer = false;
    this.depthMap = null;
  }

  render(inputTarget, outputTarget, rect) {}

}

function createFullscreenQuad(device) {
  const vertexFormat = new VertexFormat(device, [{
    semantic: SEMANTIC_POSITION,
    components: 2,
    type: TYPE_FLOAT32
  }]);
  const vertexBuffer = new VertexBuffer(device, vertexFormat, 4);
  const iterator = new VertexIterator(vertexBuffer);
  iterator.element[SEMANTIC_POSITION].set(-1.0, -1.0);
  iterator.next();
  iterator.element[SEMANTIC_POSITION].set(1.0, -1.0);
  iterator.next();
  iterator.element[SEMANTIC_POSITION].set(-1.0, 1.0);
  iterator.next();
  iterator.element[SEMANTIC_POSITION].set(1.0, 1.0);
  iterator.end();
  return vertexBuffer;
}

function drawFullscreenQuad(device, target, vertexBuffer, shader, rect) {
  const oldRt = device.getRenderTarget();
  device.setRenderTarget(target);
  device.updateBegin();
  let w = target ? target.width : device.width;
  let h = target ? target.height : device.height;
  let x = 0;
  let y = 0;

  if (rect) {
    x = rect.x * w;
    y = rect.y * h;
    w *= rect.z;
    h *= rect.w;
  }

  const oldVx = device.vx;
  const oldVy = device.vy;
  const oldVw = device.vw;
  const oldVh = device.vh;
  device.setViewport(x, y, w, h);
  const oldSx = device.sx;
  const oldSy = device.sy;
  const oldSw = device.sw;
  const oldSh = device.sh;
  device.setScissor(x, y, w, h);
  const oldBlending = device.getBlending();
  const oldDepthTest = device.getDepthTest();
  const oldDepthWrite = device.getDepthWrite();
  const oldCullMode = device.getCullMode();
  const oldWR = device.writeRed;
  const oldWG = device.writeGreen;
  const oldWB = device.writeBlue;
  const oldWA = device.writeAlpha;
  device.setBlending(false);
  device.setDepthTest(false);
  device.setDepthWrite(false);
  device.setCullMode(CULLFACE_NONE);
  device.setColorWrite(true, true, true, true);
  device.setVertexBuffer(vertexBuffer, 0);
  device.setShader(shader);
  device.draw(primitive);
  device.setBlending(oldBlending);
  device.setDepthTest(oldDepthTest);
  device.setDepthWrite(oldDepthWrite);
  device.setCullMode(oldCullMode);
  device.setColorWrite(oldWR, oldWG, oldWB, oldWA);
  device.updateEnd();
  device.setRenderTarget(oldRt);
  device.updateBegin();
  device.setViewport(oldVx, oldVy, oldVw, oldVh);
  device.setScissor(oldSx, oldSy, oldSw, oldSh);
}

class TransformFeedback {
  constructor(inputBuffer, usage = BUFFER_GPUDYNAMIC) {
    this.device = inputBuffer.device;
    const gl = this.device.gl;
    this._inputBuffer = inputBuffer;

    if (usage === BUFFER_GPUDYNAMIC && inputBuffer.usage !== usage) {
      gl.bindBuffer(gl.ARRAY_BUFFER, inputBuffer.impl.bufferId);
      gl.bufferData(gl.ARRAY_BUFFER, inputBuffer.storage, gl.DYNAMIC_COPY);
    }

    this._outputBuffer = new VertexBuffer(inputBuffer.device, inputBuffer.format, inputBuffer.numVertices, usage, inputBuffer.storage);
  }

  static createShader(graphicsDevice, vsCode, name) {
    return createShaderFromCode(graphicsDevice, vsCode, null, name, true);
  }

  destroy() {
    this._outputBuffer.destroy();
  }

  process(shader, swap = true) {
    const device = this.device;
    const oldRt = device.getRenderTarget();
    device.setRenderTarget(null);
    device.updateBegin();
    device.setVertexBuffer(this._inputBuffer, 0);
    device.setRaster(false);
    device.setTransformFeedbackBuffer(this._outputBuffer);
    device.setShader(shader);
    device.draw({
      type: PRIMITIVE_POINTS,
      base: 0,
      count: this._inputBuffer.numVertices,
      indexed: false
    });
    device.setTransformFeedbackBuffer(null);
    device.setRaster(true);
    device.updateEnd();
    device.setRenderTarget(oldRt);

    if (swap) {
      let tmp = this._inputBuffer.impl.bufferId;
      this._inputBuffer.impl.bufferId = this._outputBuffer.impl.bufferId;
      this._outputBuffer.impl.bufferId = tmp;
      tmp = this._inputBuffer.impl.vao;
      this._inputBuffer.impl.vao = this._outputBuffer.impl.vao;
      this._outputBuffer.impl.vao = tmp;
    }
  }

  get inputBuffer() {
    return this._inputBuffer;
  }

  get outputBuffer() {
    return this._outputBuffer;
  }

}

class WebglBuffer {
  constructor() {
    this.bufferId = null;
  }

  destroy(device) {
    if (this.bufferId) {
      device.gl.deleteBuffer(this.bufferId);
      this.bufferId = null;
    }
  }

  get initialized() {
    return !!this.bufferId;
  }

  loseContext() {
    this.bufferId = null;
  }

  unlock(device, usage, target, storage) {
    const gl = device.gl;

    if (!this.bufferId) {
      this.bufferId = gl.createBuffer();
    }

    let glUsage;

    switch (usage) {
      case BUFFER_STATIC:
        glUsage = gl.STATIC_DRAW;
        break;

      case BUFFER_DYNAMIC:
        glUsage = gl.DYNAMIC_DRAW;
        break;

      case BUFFER_STREAM:
        glUsage = gl.STREAM_DRAW;
        break;

      case BUFFER_GPUDYNAMIC:
        if (device.webgl2) {
          glUsage = gl.DYNAMIC_COPY;
        } else {
          glUsage = gl.STATIC_DRAW;
        }

        break;
    }

    gl.bindBuffer(target, this.bufferId);
    gl.bufferData(target, storage, glUsage);
  }

}

class WebglVertexBuffer extends WebglBuffer {
  constructor(...args) {
    super(...args);
    this.vao = null;
  }

  destroy(device) {
    super.destroy(device);
    device.boundVao = null;
    device.gl.bindVertexArray(null);
  }

  loseContext() {
    super.loseContext();
    this.vao = null;
  }

  unlock(vertexBuffer) {
    const device = vertexBuffer.device;
    super.unlock(device, vertexBuffer.usage, device.gl.ARRAY_BUFFER, vertexBuffer.storage);
  }

}

class WebglIndexBuffer extends WebglBuffer {
  constructor(indexBuffer) {
    super();
    const gl = indexBuffer.device.gl;
    const format = indexBuffer.format;

    if (format === INDEXFORMAT_UINT8) {
      this.glFormat = gl.UNSIGNED_BYTE;
    } else if (format === INDEXFORMAT_UINT16) {
      this.glFormat = gl.UNSIGNED_SHORT;
    } else if (format === INDEXFORMAT_UINT32) {
      this.glFormat = gl.UNSIGNED_INT;
    }
  }

  unlock(indexBuffer) {
    const device = indexBuffer.device;
    super.unlock(device, indexBuffer.usage, device.gl.ELEMENT_ARRAY_BUFFER, indexBuffer.storage);
  }

}

class ShaderInput {
  constructor(graphicsDevice, name, type, locationId) {
    this.locationId = locationId;
    this.scopeId = graphicsDevice.scope.resolve(name);
    this.version = new Version();

    if (name.substring(name.length - 3) === "[0]") {
      switch (type) {
        case UNIFORMTYPE_FLOAT:
          type = UNIFORMTYPE_FLOATARRAY;
          break;

        case UNIFORMTYPE_VEC2:
          type = UNIFORMTYPE_VEC2ARRAY;
          break;

        case UNIFORMTYPE_VEC3:
          type = UNIFORMTYPE_VEC3ARRAY;
          break;

        case UNIFORMTYPE_VEC4:
          type = UNIFORMTYPE_VEC4ARRAY;
          break;
      }
    }

    this.dataType = type;
    this.value = [null, null, null, null];
    this.array = [];
  }

}

const _vertexShaderBuiltins = ['gl_VertexID', 'gl_InstanceID', 'gl_DrawID', 'gl_BaseVertex', 'gl_BaseInstance'];

class WebglShader {
  constructor(shader) {
    this.init();
    this.compileAndLink(shader.device, shader);
    shader.device.shaders.push(shader);
  }

  destroy(shader) {
    const device = shader.device;
    const idx = device.shaders.indexOf(shader);

    if (idx !== -1) {
      device.shaders.splice(idx, 1);
    }

    if (this.glProgram) {
      device.gl.deleteProgram(this.glProgram);
      this.glProgram = null;
      device.removeShaderFromCache(shader);
    }
  }

  init() {
    this.uniforms = [];
    this.samplers = [];
    this.attributes = [];
    this.glProgram = null;
    this.glVertexShader = null;
    this.glFragmentShader = null;
  }

  loseContext() {
    this.init();
  }

  restoreContext(device, shader) {
    this.compileAndLink(device, shader);
  }

  compileAndLink(device, shader) {
    const definition = shader.definition;

    const glVertexShader = this._compileShaderSource(device, definition.vshader, true);

    const glFragmentShader = this._compileShaderSource(device, definition.fshader, false);

    const gl = device.gl;
    const glProgram = gl.createProgram();
    gl.attachShader(glProgram, glVertexShader);
    gl.attachShader(glProgram, glFragmentShader);
    const attrs = definition.attributes;

    if (device.webgl2 && definition.useTransformFeedback) {
      const outNames = [];

      for (const attr in attrs) {
        if (attrs.hasOwnProperty(attr)) {
          outNames.push("out_" + attr);
        }
      }

      gl.transformFeedbackVaryings(glProgram, outNames, gl.INTERLEAVED_ATTRIBS);
    }

    for (const attr in attrs) {
      if (attrs.hasOwnProperty(attr)) {
        const semantic = attrs[attr];
        const loc = semanticToLocation[semantic];
        gl.bindAttribLocation(glProgram, loc, attr);
      }
    }

    gl.linkProgram(glProgram);
    this.glVertexShader = glVertexShader;
    this.glFragmentShader = glFragmentShader;
    this.glProgram = glProgram;
  }

  _compileShaderSource(device, src, isVertexShader) {
    const gl = device.gl;
    const shaderCache = isVertexShader ? device.vertexShaderCache : device.fragmentShaderCache;
    let glShader = shaderCache[src];

    if (!glShader) {
      glShader = gl.createShader(isVertexShader ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);
      gl.shaderSource(glShader, src);
      gl.compileShader(glShader);
      shaderCache[src] = glShader;
    }

    return glShader;
  }

  postLink(device, shader) {
    const gl = device.gl;
    const glProgram = this.glProgram;
    const definition = shader.definition;
    if (!this._isCompiled(device, shader, this.glVertexShader, definition.vshader, "vertex")) return false;
    if (!this._isCompiled(device, shader, this.glFragmentShader, definition.fshader, "fragment")) return false;

    if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {
      const message = "Failed to link shader program. Error: " + gl.getProgramInfoLog(glProgram);
      console.error(message);
      return false;
    }

    let i = 0;
    const numAttributes = gl.getProgramParameter(glProgram, gl.ACTIVE_ATTRIBUTES);

    while (i < numAttributes) {
      const info = gl.getActiveAttrib(glProgram, i++);
      const location = gl.getAttribLocation(glProgram, info.name);
      if (_vertexShaderBuiltins.indexOf(info.name) !== -1) continue;

      if (definition.attributes[info.name] === undefined) {
        console.error(`Vertex shader attribute "${info.name}" is not mapped to a semantic in shader definition.`);
      }

      const shaderInput = new ShaderInput(device, definition.attributes[info.name], device.pcUniformType[info.type], location);
      this.attributes.push(shaderInput);
    }

    i = 0;
    const numUniforms = gl.getProgramParameter(glProgram, gl.ACTIVE_UNIFORMS);

    while (i < numUniforms) {
      const info = gl.getActiveUniform(glProgram, i++);
      const location = gl.getUniformLocation(glProgram, info.name);
      const shaderInput = new ShaderInput(device, info.name, device.pcUniformType[info.type], location);

      if (info.type === gl.SAMPLER_2D || info.type === gl.SAMPLER_CUBE || device.webgl2 && (info.type === gl.SAMPLER_2D_SHADOW || info.type === gl.SAMPLER_CUBE_SHADOW || info.type === gl.SAMPLER_3D)) {
        this.samplers.push(shaderInput);
      } else {
        this.uniforms.push(shaderInput);
      }
    }

    shader.ready = true;
    return true;
  }

  _isCompiled(device, shader, glShader, source, shaderType) {
    const gl = device.gl;

    if (!gl.getShaderParameter(glShader, gl.COMPILE_STATUS)) {
      const infoLog = gl.getShaderInfoLog(glShader);

      const [code, error] = this._processError(source, infoLog);

      const message = `Failed to compile ${shaderType} shader:\n\n${infoLog}\n${code}`;
      console.error(message);
      return false;
    }

    return true;
  }

  _processError(src, infoLog) {
    const error = {};
    let code = '';

    if (src) {
      const lines = src.split('\n');
      let from = 0;
      let to = lines.length;

      if (infoLog && infoLog.startsWith('ERROR:')) {
        const match = infoLog.match(/^ERROR:\s([0-9]+):([0-9]+):\s*(.+)/);

        if (match) {
          error.message = match[3];
          error.line = parseInt(match[2], 10);
          from = Math.max(0, error.line - 6);
          to = Math.min(lines.length, error.line + 5);
        }
      }

      for (let i = from; i < to; i++) {
        code += i + 1 + ":\t" + lines[i] + '\n';
      }

      error.source = src;
    }

    return [code, error];
  }

}

function downsampleImage(image, size) {
  const srcW = image.width;
  const srcH = image.height;

  if (srcW > size || srcH > size) {
    const scale = size / Math.max(srcW, srcH);
    const dstW = Math.floor(srcW * scale);
    const dstH = Math.floor(srcH * scale);
    const canvas = document.createElement('canvas');
    canvas.width = dstW;
    canvas.height = dstH;
    const context = canvas.getContext('2d');
    context.drawImage(image, 0, 0, srcW, srcH, 0, 0, dstW, dstH);
    return canvas;
  }

  return image;
}

class WebglTexture {
  constructor() {
    this._glTexture = null;
    this._glTarget = void 0;
    this._glFormat = void 0;
    this._glInternalFormat = void 0;
    this._glPixelType = void 0;
  }

  destroy(device) {
    if (this._glTexture) {
      for (let i = 0; i < device.textureUnits.length; i++) {
        const textureUnit = device.textureUnits[i];

        for (let j = 0; j < textureUnit.length; j++) {
          if (textureUnit[j] === this._glTexture) {
            textureUnit[j] = null;
          }
        }
      }

      device.gl.deleteTexture(this._glTexture);
      this._glTexture = null;
    }
  }

  loseContext() {
    this._glTexture = null;
  }

  initialize(device, texture) {
    const gl = device.gl;
    this._glTexture = gl.createTexture();
    this._glTarget = texture._cubemap ? gl.TEXTURE_CUBE_MAP : texture._volume ? gl.TEXTURE_3D : gl.TEXTURE_2D;

    switch (texture._format) {
      case PIXELFORMAT_A8:
        this._glFormat = gl.ALPHA;
        this._glInternalFormat = gl.ALPHA;
        this._glPixelType = gl.UNSIGNED_BYTE;
        break;

      case PIXELFORMAT_L8:
        this._glFormat = gl.LUMINANCE;
        this._glInternalFormat = gl.LUMINANCE;
        this._glPixelType = gl.UNSIGNED_BYTE;
        break;

      case PIXELFORMAT_L8_A8:
        this._glFormat = gl.LUMINANCE_ALPHA;
        this._glInternalFormat = gl.LUMINANCE_ALPHA;
        this._glPixelType = gl.UNSIGNED_BYTE;
        break;

      case PIXELFORMAT_R5_G6_B5:
        this._glFormat = gl.RGB;
        this._glInternalFormat = gl.RGB;
        this._glPixelType = gl.UNSIGNED_SHORT_5_6_5;
        break;

      case PIXELFORMAT_R5_G5_B5_A1:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = gl.RGBA;
        this._glPixelType = gl.UNSIGNED_SHORT_5_5_5_1;
        break;

      case PIXELFORMAT_R4_G4_B4_A4:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = gl.RGBA;
        this._glPixelType = gl.UNSIGNED_SHORT_4_4_4_4;
        break;

      case PIXELFORMAT_R8_G8_B8:
        this._glFormat = gl.RGB;
        this._glInternalFormat = device.webgl2 ? gl.RGB8 : gl.RGB;
        this._glPixelType = gl.UNSIGNED_BYTE;
        break;

      case PIXELFORMAT_R8_G8_B8_A8:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = device.webgl2 ? gl.RGBA8 : gl.RGBA;
        this._glPixelType = gl.UNSIGNED_BYTE;
        break;

      case PIXELFORMAT_DXT1:
        this._glFormat = gl.RGB;
        this._glInternalFormat = device.extCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;
        break;

      case PIXELFORMAT_DXT3:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = device.extCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        break;

      case PIXELFORMAT_DXT5:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = device.extCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        break;

      case PIXELFORMAT_ETC1:
        this._glFormat = gl.RGB;
        this._glInternalFormat = device.extCompressedTextureETC1.COMPRESSED_RGB_ETC1_WEBGL;
        break;

      case PIXELFORMAT_PVRTC_2BPP_RGB_1:
        this._glFormat = gl.RGB;
        this._glInternalFormat = device.extCompressedTexturePVRTC.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        break;

      case PIXELFORMAT_PVRTC_2BPP_RGBA_1:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = device.extCompressedTexturePVRTC.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        break;

      case PIXELFORMAT_PVRTC_4BPP_RGB_1:
        this._glFormat = gl.RGB;
        this._glInternalFormat = device.extCompressedTexturePVRTC.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        break;

      case PIXELFORMAT_PVRTC_4BPP_RGBA_1:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = device.extCompressedTexturePVRTC.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        break;

      case PIXELFORMAT_ETC2_RGB:
        this._glFormat = gl.RGB;
        this._glInternalFormat = device.extCompressedTextureETC.COMPRESSED_RGB8_ETC2;
        break;

      case PIXELFORMAT_ETC2_RGBA:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = device.extCompressedTextureETC.COMPRESSED_RGBA8_ETC2_EAC;
        break;

      case PIXELFORMAT_ASTC_4x4:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = device.extCompressedTextureASTC.COMPRESSED_RGBA_ASTC_4x4_KHR;
        break;

      case PIXELFORMAT_ATC_RGB:
        this._glFormat = gl.RGB;
        this._glInternalFormat = device.extCompressedTextureATC.COMPRESSED_RGB_ATC_WEBGL;
        break;

      case PIXELFORMAT_ATC_RGBA:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = device.extCompressedTextureATC.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL;
        break;

      case PIXELFORMAT_RGB16F:
        this._glFormat = gl.RGB;

        if (device.webgl2) {
          this._glInternalFormat = gl.RGB16F;
          this._glPixelType = gl.HALF_FLOAT;
        } else {
          this._glInternalFormat = gl.RGB;
          this._glPixelType = device.extTextureHalfFloat.HALF_FLOAT_OES;
        }

        break;

      case PIXELFORMAT_RGBA16F:
        this._glFormat = gl.RGBA;

        if (device.webgl2) {
          this._glInternalFormat = gl.RGBA16F;
          this._glPixelType = gl.HALF_FLOAT;
        } else {
          this._glInternalFormat = gl.RGBA;
          this._glPixelType = device.extTextureHalfFloat.HALF_FLOAT_OES;
        }

        break;

      case PIXELFORMAT_RGB32F:
        this._glFormat = gl.RGB;

        if (device.webgl2) {
          this._glInternalFormat = gl.RGB32F;
        } else {
          this._glInternalFormat = gl.RGB;
        }

        this._glPixelType = gl.FLOAT;
        break;

      case PIXELFORMAT_RGBA32F:
        this._glFormat = gl.RGBA;

        if (device.webgl2) {
          this._glInternalFormat = gl.RGBA32F;
        } else {
          this._glInternalFormat = gl.RGBA;
        }

        this._glPixelType = gl.FLOAT;
        break;

      case PIXELFORMAT_R32F:
        this._glFormat = gl.RED;
        this._glInternalFormat = gl.R32F;
        this._glPixelType = gl.FLOAT;
        break;

      case PIXELFORMAT_DEPTH:
        if (device.webgl2) {
          this._glFormat = gl.DEPTH_COMPONENT;
          this._glInternalFormat = gl.DEPTH_COMPONENT32F;
          this._glPixelType = gl.FLOAT;
        } else {
          this._glFormat = gl.DEPTH_COMPONENT;
          this._glInternalFormat = gl.DEPTH_COMPONENT;
          this._glPixelType = gl.UNSIGNED_SHORT;
        }

        break;

      case PIXELFORMAT_DEPTHSTENCIL:
        this._glFormat = gl.DEPTH_STENCIL;

        if (device.webgl2) {
          this._glInternalFormat = gl.DEPTH24_STENCIL8;
          this._glPixelType = gl.UNSIGNED_INT_24_8;
        } else {
          this._glInternalFormat = gl.DEPTH_STENCIL;
          this._glPixelType = device.extDepthTexture.UNSIGNED_INT_24_8_WEBGL;
        }

        break;

      case PIXELFORMAT_111110F:
        this._glFormat = gl.RGB;
        this._glInternalFormat = gl.R11F_G11F_B10F;
        this._glPixelType = gl.UNSIGNED_INT_10F_11F_11F_REV;
        break;

      case PIXELFORMAT_SRGB:
        this._glFormat = gl.RGB;
        this._glInternalFormat = gl.SRGB8;
        this._glPixelType = gl.UNSIGNED_BYTE;
        break;

      case PIXELFORMAT_SRGBA:
        this._glFormat = gl.RGBA;
        this._glInternalFormat = gl.SRGB8_ALPHA8;
        this._glPixelType = gl.UNSIGNED_BYTE;
        break;
    }
  }

  upload(device, texture) {
    const gl = device.gl;
    if (!texture._needsUpload && (texture._needsMipmapsUpload && texture._mipmapsUploaded || !texture.pot)) return;
    let mipLevel = 0;
    let mipObject;
    let resMult;
    const requiredMipLevels = Math.log2(Math.max(texture._width, texture._height)) + 1;

    while (texture._levels[mipLevel] || mipLevel === 0) {
      if (!texture._needsUpload && mipLevel === 0) {
        mipLevel++;
        continue;
      } else if (mipLevel && (!texture._needsMipmapsUpload || !texture._mipmaps)) {
        break;
      }

      mipObject = texture._levels[mipLevel];

      if (mipLevel === 1 && !texture._compressed && texture._levels.length < requiredMipLevels) {
        gl.generateMipmap(this._glTarget);
        texture._mipmapsUploaded = true;
      }

      if (texture._cubemap) {
        let face;

        if (device._isBrowserInterface(mipObject[0])) {
          for (face = 0; face < 6; face++) {
            if (!texture._levelsUpdated[0][face]) continue;
            let src = mipObject[face];

            if (src instanceof HTMLImageElement) {
              if (src.width > device.maxCubeMapSize || src.height > device.maxCubeMapSize) {
                src = downsampleImage(src, device.maxCubeMapSize);

                if (mipLevel === 0) {
                  texture._width = src.width;
                  texture._height = src.height;
                }
              }
            }

            device.setUnpackFlipY(false);
            device.setUnpackPremultiplyAlpha(texture._premultiplyAlpha);
            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, this._glInternalFormat, this._glFormat, this._glPixelType, src);
          }
        } else {
          resMult = 1 / Math.pow(2, mipLevel);

          for (face = 0; face < 6; face++) {
            if (!texture._levelsUpdated[0][face]) continue;
            const texData = mipObject[face];

            if (texture._compressed) {
              gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, this._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, texData);
            } else {
              device.setUnpackFlipY(false);
              device.setUnpackPremultiplyAlpha(texture._premultiplyAlpha);
              gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, this._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, this._glFormat, this._glPixelType, texData);
            }
          }
        }
      } else if (texture._volume) {
        resMult = 1 / Math.pow(2, mipLevel);

        if (texture._compressed) {
          gl.compressedTexImage3D(gl.TEXTURE_3D, mipLevel, this._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), Math.max(texture._depth * resMult, 1), 0, mipObject);
        } else {
          device.setUnpackFlipY(false);
          device.setUnpackPremultiplyAlpha(texture._premultiplyAlpha);
          gl.texImage3D(gl.TEXTURE_3D, mipLevel, this._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), Math.max(texture._depth * resMult, 1), 0, this._glFormat, this._glPixelType, mipObject);
        }
      } else {
        if (device._isBrowserInterface(mipObject)) {
          if (mipObject instanceof HTMLImageElement) {
            if (mipObject.width > device.maxTextureSize || mipObject.height > device.maxTextureSize) {
              mipObject = downsampleImage(mipObject, device.maxTextureSize);

              if (mipLevel === 0) {
                texture._width = mipObject.width;
                texture._height = mipObject.height;
              }
            }
          }

          device.setUnpackFlipY(texture._flipY);
          device.setUnpackPremultiplyAlpha(texture._premultiplyAlpha);
          gl.texImage2D(gl.TEXTURE_2D, mipLevel, this._glInternalFormat, this._glFormat, this._glPixelType, mipObject);
        } else {
          resMult = 1 / Math.pow(2, mipLevel);

          if (texture._compressed) {
            gl.compressedTexImage2D(gl.TEXTURE_2D, mipLevel, this._glInternalFormat, Math.max(Math.floor(texture._width * resMult), 1), Math.max(Math.floor(texture._height * resMult), 1), 0, mipObject);
          } else {
            device.setUnpackFlipY(false);
            device.setUnpackPremultiplyAlpha(texture._premultiplyAlpha);
            gl.texImage2D(gl.TEXTURE_2D, mipLevel, this._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, this._glFormat, this._glPixelType, mipObject);
          }
        }

        if (mipLevel === 0) {
          texture._mipmapsUploaded = false;
        } else {
          texture._mipmapsUploaded = true;
        }
      }

      mipLevel++;
    }

    if (texture._needsUpload) {
      if (texture._cubemap) {
        for (let i = 0; i < 6; i++) texture._levelsUpdated[0][i] = false;
      } else {
        texture._levelsUpdated[0] = false;
      }
    }

    if (!texture._compressed && texture._mipmaps && texture._needsMipmapsUpload && (texture.pot || device.webgl2) && texture._levels.length === 1) {
      gl.generateMipmap(this._glTarget);
      texture._mipmapsUploaded = true;
    }

    if (texture._gpuSize) {
      texture.adjustVramSizeTracking(device._vram, -texture._gpuSize);
    }

    texture._gpuSize = texture.gpuSize;
    texture.adjustVramSizeTracking(device._vram, texture._gpuSize);
  }

}

class WebglRenderTarget {
  constructor() {
    this._glFrameBuffer = null;
    this._glDepthBuffer = null;
    this._glResolveFrameBuffer = null;
    this._glMsaaColorBuffer = null;
    this._glMsaaDepthBuffer = null;
  }

  destroy(device) {
    const gl = device.gl;

    if (this._glFrameBuffer) {
      gl.deleteFramebuffer(this._glFrameBuffer);
      this._glFrameBuffer = null;
    }

    if (this._glDepthBuffer) {
      gl.deleteRenderbuffer(this._glDepthBuffer);
      this._glDepthBuffer = null;
    }

    if (this._glResolveFrameBuffer) {
      gl.deleteFramebuffer(this._glResolveFrameBuffer);
      this._glResolveFrameBuffer = null;
    }

    if (this._glMsaaColorBuffer) {
      gl.deleteRenderbuffer(this._glMsaaColorBuffer);
      this._glMsaaColorBuffer = null;
    }

    if (this._glMsaaDepthBuffer) {
      gl.deleteRenderbuffer(this._glMsaaDepthBuffer);
      this._glMsaaDepthBuffer = null;
    }
  }

  get initialized() {
    return this._glFrameBuffer !== null;
  }

  init(device, target) {
    const gl = device.gl;
    this._glFrameBuffer = gl.createFramebuffer();
    device.setFramebuffer(this._glFrameBuffer);
    const colorBuffer = target._colorBuffer;

    if (colorBuffer) {
      if (!colorBuffer.impl._glTexture) {
        colorBuffer._width = Math.min(colorBuffer.width, device.maxRenderBufferSize);
        colorBuffer._height = Math.min(colorBuffer.height, device.maxRenderBufferSize);
        device.setTexture(colorBuffer, 0);
      }

      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, colorBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, colorBuffer.impl._glTexture, 0);
    }

    const depthBuffer = target._depthBuffer;

    if (depthBuffer) {
      if (!depthBuffer.impl._glTexture) {
        depthBuffer._width = Math.min(depthBuffer.width, device.maxRenderBufferSize);
        depthBuffer._height = Math.min(depthBuffer.height, device.maxRenderBufferSize);
        device.setTexture(depthBuffer, 0);
      }

      if (target._stencil) {
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, depthBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, target._depthBuffer.impl._glTexture, 0);
      } else {
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, depthBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, target._depthBuffer.impl._glTexture, 0);
      }
    } else if (target._depth) {
      const willRenderMsaa = target._samples > 1 && device.webgl2;

      if (!willRenderMsaa) {
        if (!this._glDepthBuffer) {
          this._glDepthBuffer = gl.createRenderbuffer();
        }

        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glDepthBuffer);

        if (target._stencil) {
          gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, target.width, target.height);
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this._glDepthBuffer);
        } else {
          const depthFormat = device.webgl2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT16;
          gl.renderbufferStorage(gl.RENDERBUFFER, depthFormat, target.width, target.height);
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._glDepthBuffer);
        }

        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
      }
    }

    if (device.webgl2 && target._samples > 1) {
      this._glResolveFrameBuffer = this._glFrameBuffer;
      this._glFrameBuffer = gl.createFramebuffer();
      device.setFramebuffer(this._glFrameBuffer);

      if (colorBuffer) {
        if (!this._glMsaaColorBuffer) {
          this._glMsaaColorBuffer = gl.createRenderbuffer();
        }

        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glMsaaColorBuffer);
        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, colorBuffer.impl._glInternalFormat, target.width, target.height);
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this._glMsaaColorBuffer);
      }

      if (target._depth) {
        if (!this._glMsaaDepthBuffer) {
          this._glMsaaDepthBuffer = gl.createRenderbuffer();
        }

        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glMsaaDepthBuffer);

        if (target._stencil) {
          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, gl.DEPTH24_STENCIL8, target.width, target.height);
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this._glMsaaDepthBuffer);
        } else {
          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, gl.DEPTH_COMPONENT32F, target.width, target.height);
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._glMsaaDepthBuffer);
        }
      }
    }
  }

  _checkFbo(device) {
    const gl = device.gl;
    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

    switch (status) {
      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
        console.error("ERROR: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
        break;

      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
        console.error("ERROR: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
        break;

      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
        console.error("ERROR: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
        break;

      case gl.FRAMEBUFFER_UNSUPPORTED:
        console.error("ERROR: FRAMEBUFFER_UNSUPPORTED");
        break;

      case gl.FRAMEBUFFER_COMPLETE:
        break;
    }
  }

  loseContext() {
    this._glFrameBuffer = null;
    this._glDepthBuffer = null;
    this._glResolveFrameBuffer = null;
    this._glMsaaColorBuffer = null;
    this._glMsaaDepthBuffer = null;
  }

  resolve(device, target, color, depth) {
    if (device.webgl2) {
      const gl = device.gl;
      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._glFrameBuffer);
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._glResolveFrameBuffer);
      gl.blitFramebuffer(0, 0, target.width, target.height, 0, 0, target.width, target.height, (color ? gl.COLOR_BUFFER_BIT : 0) | (depth ? gl.DEPTH_BUFFER_BIT : 0), gl.NEAREST);
      gl.bindFramebuffer(gl.FRAMEBUFFER, this._glFrameBuffer);
    }
  }

}

const invalidateAttachments = [];

function testRenderable(gl, pixelFormat) {
  let result = true;
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, pixelFormat, null);
  const framebuffer = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);

  if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
    result = false;
  }

  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.deleteTexture(texture);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.deleteFramebuffer(framebuffer);
  return result;
}

function testTextureHalfFloatUpdatable(gl, pixelFormat) {
  let result = true;
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  const data = new Uint16Array(4 * 2 * 2);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, pixelFormat, data);

  if (gl.getError() !== gl.NO_ERROR) {
    result = false;
    console.log("Above error related to HALF_FLOAT_OES can be ignored, it was triggered by testing half float texture support");
  }

  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.deleteTexture(texture);
  return result;
}

function testTextureFloatHighPrecision(device) {
  if (!device.textureFloatRenderable) return false;
  const test1 = createShaderFromCode(device, shaderChunks.fullscreenQuadVS, shaderChunks.precisionTestPS, "ptest1");
  const test2 = createShaderFromCode(device, shaderChunks.fullscreenQuadVS, shaderChunks.precisionTest2PS, "ptest2");
  const textureOptions = {
    format: PIXELFORMAT_RGBA32F,
    width: 1,
    height: 1,
    mipmaps: false,
    minFilter: FILTER_NEAREST,
    magFilter: FILTER_NEAREST,
    name: 'testFHP'
  };
  const tex1 = new Texture(device, textureOptions);
  const targ1 = new RenderTarget({
    colorBuffer: tex1,
    depth: false
  });
  drawQuadWithShader(device, targ1, test1);
  textureOptions.format = PIXELFORMAT_R8_G8_B8_A8;
  const tex2 = new Texture(device, textureOptions);
  const targ2 = new RenderTarget({
    colorBuffer: tex2,
    depth: false
  });
  device.constantTexSource.setValue(tex1);
  drawQuadWithShader(device, targ2, test2);
  const prevFramebuffer = device.activeFramebuffer;
  device.setFramebuffer(targ2.impl._glFrameBuffer);
  const pixels = new Uint8Array(4);
  device.readPixels(0, 0, 1, 1, pixels);
  device.setFramebuffer(prevFramebuffer);
  const x = pixels[0] / 255;
  const y = pixels[1] / 255;
  const z = pixels[2] / 255;
  const w = pixels[3] / 255;
  const f = x / (256 * 256 * 256) + y / (256 * 256) + z / 256 + w;
  tex1.destroy();
  targ1.destroy();
  tex2.destroy();
  targ2.destroy();
  return f === 0;
}

function testImageBitmap(device) {
  const pngBytes = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 1, 0, 0, 0, 1, 8, 6, 0, 0, 0, 31, 21, 196, 137, 0, 0, 0, 13, 73, 68, 65, 84, 120, 218, 99, 100, 100, 98, 182, 7, 0, 0, 89, 0, 71, 67, 133, 148, 237, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
  return createImageBitmap(new Blob([pngBytes], {
    type: 'image/png'
  }), {
    premultiplyAlpha: 'none'
  }).then(image => {
    const texture = new Texture(device, {
      width: 1,
      height: 1,
      format: PIXELFORMAT_R8_G8_B8_A8,
      mipmaps: false,
      levels: [image]
    });
    const rt = new RenderTarget({
      colorBuffer: texture,
      depth: false
    });
    device.setFramebuffer(rt.impl._glFrameBuffer);
    device.initRenderTarget(rt);
    const data = new Uint8ClampedArray(4);
    device.gl.readPixels(0, 0, 1, 1, device.gl.RGBA, device.gl.UNSIGNED_BYTE, data);
    rt.destroy();
    texture.destroy();
    return data[0] === 1 && data[1] === 2 && data[2] === 3 && data[3] === 63;
  }).catch(e => false);
}

class WebglGraphicsDevice extends GraphicsDevice {
  constructor(canvas, options = {}) {
    super(canvas);
    this.gl = void 0;
    this.webgl2 = void 0;
    this.deviceType = DEVICETYPE_WEBGL;
    this.defaultFramebuffer = null;
    this.defaultFramebufferAlpha = options.alpha;
    this.updateClientRect();
    this.contextLost = false;

    this._contextLostHandler = event => {
      event.preventDefault();
      this.contextLost = true;
      this.loseContext();
      this.fire('devicelost');
    };

    this._contextRestoredHandler = () => {
      this.restoreContext();
      this.contextLost = false;
      this.fire('devicerestored');
    };

    options.stencil = true;

    if (!options.powerPreference) {
      options.powerPreference = 'high-performance';
    }

    const ua = typeof navigator !== 'undefined' && navigator.userAgent;
    this.forceDisableMultisampling = ua && ua.includes('AppleWebKit') && (ua.includes('15.4') || ua.includes('15_4'));

    if (this.forceDisableMultisampling) {
      options.antialias = false;
    }

    const preferWebGl2 = options.preferWebGl2 !== undefined ? options.preferWebGl2 : true;
    const names = preferWebGl2 ? ["webgl2", "webgl", "experimental-webgl"] : ["webgl", "experimental-webgl"];
    let gl = null;

    for (let i = 0; i < names.length; i++) {
      gl = canvas.getContext(names[i], options);

      if (gl) {
        this.webgl2 = names[i] === 'webgl2';
        break;
      }
    }

    if (!gl) {
      throw new Error("WebGL not supported");
    }

    const isChrome = platform.browser && !!window.chrome;
    const isMac = platform.browser && navigator.appVersion.indexOf("Mac") !== -1;
    this.gl = gl;
    this._tempEnableSafariTextureUnitWorkaround = platform.browser && !!window.safari;
    this._tempMacChromeBlitFramebufferWorkaround = isMac && isChrome && !options.alpha;

    if (!this.webgl2) {
      setupVertexArrayObject(gl);
    }

    canvas.addEventListener("webglcontextlost", this._contextLostHandler, false);
    canvas.addEventListener("webglcontextrestored", this._contextRestoredHandler, false);
    this.initializeExtensions();
    this.initializeCapabilities();
    this.initializeRenderState();
    this.initializeContextCaches();
    this.supportsImageBitmap = null;

    if (typeof ImageBitmap !== 'undefined') {
      testImageBitmap(this).then(result => {
        this.supportsImageBitmap = result;
      });
    }

    this.defaultClearOptions = {
      color: [0, 0, 0, 1],
      depth: 1,
      stencil: 0,
      flags: CLEARFLAG_COLOR | CLEARFLAG_DEPTH
    };
    this.glAddress = [gl.REPEAT, gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT];
    this.glBlendEquation = [gl.FUNC_ADD, gl.FUNC_SUBTRACT, gl.FUNC_REVERSE_SUBTRACT, this.webgl2 ? gl.MIN : this.extBlendMinmax ? this.extBlendMinmax.MIN_EXT : gl.FUNC_ADD, this.webgl2 ? gl.MAX : this.extBlendMinmax ? this.extBlendMinmax.MAX_EXT : gl.FUNC_ADD];
    this.glBlendFunction = [gl.ZERO, gl.ONE, gl.SRC_COLOR, gl.ONE_MINUS_SRC_COLOR, gl.DST_COLOR, gl.ONE_MINUS_DST_COLOR, gl.SRC_ALPHA, gl.SRC_ALPHA_SATURATE, gl.ONE_MINUS_SRC_ALPHA, gl.DST_ALPHA, gl.ONE_MINUS_DST_ALPHA, gl.CONSTANT_COLOR, gl.ONE_MINUS_CONSTANT_COLOR, gl.CONSTANT_ALPHA, gl.ONE_MINUS_CONSTANT_ALPHA];
    this.glComparison = [gl.NEVER, gl.LESS, gl.EQUAL, gl.LEQUAL, gl.GREATER, gl.NOTEQUAL, gl.GEQUAL, gl.ALWAYS];
    this.glStencilOp = [gl.KEEP, gl.ZERO, gl.REPLACE, gl.INCR, gl.INCR_WRAP, gl.DECR, gl.DECR_WRAP, gl.INVERT];
    this.glClearFlag = [0, gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.STENCIL_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.COLOR_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT];
    this.glCull = [0, gl.BACK, gl.FRONT, gl.FRONT_AND_BACK];
    this.glFilter = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR];
    this.glPrimitive = [gl.POINTS, gl.LINES, gl.LINE_LOOP, gl.LINE_STRIP, gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN];
    this.glType = [gl.BYTE, gl.UNSIGNED_BYTE, gl.SHORT, gl.UNSIGNED_SHORT, gl.INT, gl.UNSIGNED_INT, gl.FLOAT];
    this.pcUniformType = {};
    this.pcUniformType[gl.BOOL] = UNIFORMTYPE_BOOL;
    this.pcUniformType[gl.INT] = UNIFORMTYPE_INT;
    this.pcUniformType[gl.FLOAT] = UNIFORMTYPE_FLOAT;
    this.pcUniformType[gl.FLOAT_VEC2] = UNIFORMTYPE_VEC2;
    this.pcUniformType[gl.FLOAT_VEC3] = UNIFORMTYPE_VEC3;
    this.pcUniformType[gl.FLOAT_VEC4] = UNIFORMTYPE_VEC4;
    this.pcUniformType[gl.INT_VEC2] = UNIFORMTYPE_IVEC2;
    this.pcUniformType[gl.INT_VEC3] = UNIFORMTYPE_IVEC3;
    this.pcUniformType[gl.INT_VEC4] = UNIFORMTYPE_IVEC4;
    this.pcUniformType[gl.BOOL_VEC2] = UNIFORMTYPE_BVEC2;
    this.pcUniformType[gl.BOOL_VEC3] = UNIFORMTYPE_BVEC3;
    this.pcUniformType[gl.BOOL_VEC4] = UNIFORMTYPE_BVEC4;
    this.pcUniformType[gl.FLOAT_MAT2] = UNIFORMTYPE_MAT2;
    this.pcUniformType[gl.FLOAT_MAT3] = UNIFORMTYPE_MAT3;
    this.pcUniformType[gl.FLOAT_MAT4] = UNIFORMTYPE_MAT4;
    this.pcUniformType[gl.SAMPLER_2D] = UNIFORMTYPE_TEXTURE2D;
    this.pcUniformType[gl.SAMPLER_CUBE] = UNIFORMTYPE_TEXTURECUBE;

    if (this.webgl2) {
      this.pcUniformType[gl.SAMPLER_2D_SHADOW] = UNIFORMTYPE_TEXTURE2D_SHADOW;
      this.pcUniformType[gl.SAMPLER_CUBE_SHADOW] = UNIFORMTYPE_TEXTURECUBE_SHADOW;
      this.pcUniformType[gl.SAMPLER_3D] = UNIFORMTYPE_TEXTURE3D;
    }

    this.targetToSlot = {};
    this.targetToSlot[gl.TEXTURE_2D] = 0;
    this.targetToSlot[gl.TEXTURE_CUBE_MAP] = 1;
    this.targetToSlot[gl.TEXTURE_3D] = 2;
    let scopeX, scopeY, scopeZ, scopeW;
    let uniformValue;
    this.commitFunction = [];

    this.commitFunction[UNIFORMTYPE_BOOL] = function (uniform, value) {
      if (uniform.value !== value) {
        gl.uniform1i(uniform.locationId, value);
        uniform.value = value;
      }
    };

    this.commitFunction[UNIFORMTYPE_INT] = this.commitFunction[UNIFORMTYPE_BOOL];

    this.commitFunction[UNIFORMTYPE_FLOAT] = function (uniform, value) {
      if (uniform.value !== value) {
        gl.uniform1f(uniform.locationId, value);
        uniform.value = value;
      }
    };

    this.commitFunction[UNIFORMTYPE_VEC2] = function (uniform, value) {
      uniformValue = uniform.value;
      scopeX = value[0];
      scopeY = value[1];

      if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY) {
        gl.uniform2fv(uniform.locationId, value);
        uniformValue[0] = scopeX;
        uniformValue[1] = scopeY;
      }
    };

    this.commitFunction[UNIFORMTYPE_VEC3] = function (uniform, value) {
      uniformValue = uniform.value;
      scopeX = value[0];
      scopeY = value[1];
      scopeZ = value[2];

      if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ) {
        gl.uniform3fv(uniform.locationId, value);
        uniformValue[0] = scopeX;
        uniformValue[1] = scopeY;
        uniformValue[2] = scopeZ;
      }
    };

    this.commitFunction[UNIFORMTYPE_VEC4] = function (uniform, value) {
      uniformValue = uniform.value;
      scopeX = value[0];
      scopeY = value[1];
      scopeZ = value[2];
      scopeW = value[3];

      if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ || uniformValue[3] !== scopeW) {
        gl.uniform4fv(uniform.locationId, value);
        uniformValue[0] = scopeX;
        uniformValue[1] = scopeY;
        uniformValue[2] = scopeZ;
        uniformValue[3] = scopeW;
      }
    };

    this.commitFunction[UNIFORMTYPE_IVEC2] = function (uniform, value) {
      uniformValue = uniform.value;
      scopeX = value[0];
      scopeY = value[1];

      if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY) {
        gl.uniform2iv(uniform.locationId, value);
        uniformValue[0] = scopeX;
        uniformValue[1] = scopeY;
      }
    };

    this.commitFunction[UNIFORMTYPE_BVEC2] = this.commitFunction[UNIFORMTYPE_IVEC2];

    this.commitFunction[UNIFORMTYPE_IVEC3] = function (uniform, value) {
      uniformValue = uniform.value;
      scopeX = value[0];
      scopeY = value[1];
      scopeZ = value[2];

      if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ) {
        gl.uniform3iv(uniform.locationId, value);
        uniformValue[0] = scopeX;
        uniformValue[1] = scopeY;
        uniformValue[2] = scopeZ;
      }
    };

    this.commitFunction[UNIFORMTYPE_BVEC3] = this.commitFunction[UNIFORMTYPE_IVEC3];

    this.commitFunction[UNIFORMTYPE_IVEC4] = function (uniform, value) {
      uniformValue = uniform.value;
      scopeX = value[0];
      scopeY = value[1];
      scopeZ = value[2];
      scopeW = value[3];

      if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ || uniformValue[3] !== scopeW) {
        gl.uniform4iv(uniform.locationId, value);
        uniformValue[0] = scopeX;
        uniformValue[1] = scopeY;
        uniformValue[2] = scopeZ;
        uniformValue[3] = scopeW;
      }
    };

    this.commitFunction[UNIFORMTYPE_BVEC4] = this.commitFunction[UNIFORMTYPE_IVEC4];

    this.commitFunction[UNIFORMTYPE_MAT2] = function (uniform, value) {
      gl.uniformMatrix2fv(uniform.locationId, false, value);
    };

    this.commitFunction[UNIFORMTYPE_MAT3] = function (uniform, value) {
      gl.uniformMatrix3fv(uniform.locationId, false, value);
    };

    this.commitFunction[UNIFORMTYPE_MAT4] = function (uniform, value) {
      gl.uniformMatrix4fv(uniform.locationId, false, value);
    };

    this.commitFunction[UNIFORMTYPE_FLOATARRAY] = function (uniform, value) {
      gl.uniform1fv(uniform.locationId, value);
    };

    this.commitFunction[UNIFORMTYPE_VEC2ARRAY] = function (uniform, value) {
      gl.uniform2fv(uniform.locationId, value);
    };

    this.commitFunction[UNIFORMTYPE_VEC3ARRAY] = function (uniform, value) {
      gl.uniform3fv(uniform.locationId, value);
    };

    this.commitFunction[UNIFORMTYPE_VEC4ARRAY] = function (uniform, value) {
      gl.uniform4fv(uniform.locationId, value);
    };

    this.supportsBoneTextures = this.extTextureFloat && this.maxVertexTextures > 0;
    let numUniforms = this.vertexUniformsCount;
    numUniforms -= 4 * 4;
    numUniforms -= 8;
    numUniforms -= 1;
    numUniforms -= 4 * 4;
    this.boneLimit = Math.floor(numUniforms / 3);
    this.boneLimit = Math.min(this.boneLimit, 128);

    if (this.unmaskedRenderer === 'Mali-450 MP') {
      this.boneLimit = 34;
    }

    this.constantTexSource = this.scope.resolve("source");

    if (this.extTextureFloat) {
      if (this.webgl2) {
        this.textureFloatRenderable = !!this.extColorBufferFloat;
      } else {
        this.textureFloatRenderable = testRenderable(gl, gl.FLOAT);
      }
    } else {
      this.textureFloatRenderable = false;
    }

    if (this.extColorBufferHalfFloat) {
      this.textureHalfFloatRenderable = !!this.extColorBufferHalfFloat;
    } else if (this.extTextureHalfFloat) {
      if (this.webgl2) {
        this.textureHalfFloatRenderable = !!this.extColorBufferFloat;
      } else {
        this.textureHalfFloatRenderable = testRenderable(gl, this.extTextureHalfFloat.HALF_FLOAT_OES);
      }
    } else {
      this.textureHalfFloatRenderable = false;
    }

    this.supportsMorphTargetTexturesCore = this.maxPrecision === "highp" && this.maxVertexTextures >= 2;
    this._textureFloatHighPrecision = undefined;
    this._textureHalfFloatUpdatable = undefined;
    this.areaLightLutFormat = PIXELFORMAT_R8_G8_B8_A8;

    if (this.extTextureHalfFloat && this.textureHalfFloatUpdatable && this.extTextureHalfFloatLinear) {
      this.areaLightLutFormat = PIXELFORMAT_RGBA16F;
    } else if (this.extTextureFloat && this.extTextureFloatLinear) {
      this.areaLightLutFormat = PIXELFORMAT_RGBA32F;
    }
  }

  destroy() {
    super.destroy();
    const gl = this.gl;

    if (this.webgl2 && this.feedback) {
      gl.deleteTransformFeedback(this.feedback);
    }

    this.clearShaderCache();
    this.clearVertexArrayObjectCache();
    this.canvas.removeEventListener('webglcontextlost', this._contextLostHandler, false);
    this.canvas.removeEventListener('webglcontextrestored', this._contextRestoredHandler, false);
    this._contextLostHandler = null;
    this._contextRestoredHandler = null;
    this.gl = null;
    super.postDestroy();
  }

  createVertexBufferImpl(vertexBuffer, format) {
    return new WebglVertexBuffer();
  }

  createIndexBufferImpl(indexBuffer) {
    return new WebglIndexBuffer(indexBuffer);
  }

  createShaderImpl(shader) {
    return new WebglShader(shader);
  }

  createTextureImpl(texture) {
    return new WebglTexture();
  }

  createRenderTargetImpl(renderTarget) {
    return new WebglRenderTarget();
  }

  getPrecision() {
    const gl = this.gl;
    let precision = "highp";

    if (gl.getShaderPrecisionFormat) {
      const vertexShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
      const vertexShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);
      const fragmentShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
      const fragmentShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);
      const highpAvailable = vertexShaderPrecisionHighpFloat.precision > 0 && fragmentShaderPrecisionHighpFloat.precision > 0;
      const mediumpAvailable = vertexShaderPrecisionMediumpFloat.precision > 0 && fragmentShaderPrecisionMediumpFloat.precision > 0;

      if (!highpAvailable) {
        if (mediumpAvailable) {
          precision = "mediump";
        } else {
          precision = "lowp";
        }
      }
    }

    return precision;
  }

  initializeExtensions() {
    const gl = this.gl;
    const supportedExtensions = gl.getSupportedExtensions();

    const getExtension = function getExtension() {
      for (let i = 0; i < arguments.length; i++) {
        if (supportedExtensions.indexOf(arguments[i]) !== -1) {
          return gl.getExtension(arguments[i]);
        }
      }

      return null;
    };

    if (this.webgl2) {
      this.extBlendMinmax = true;
      this.extDrawBuffers = true;
      this.extInstancing = true;
      this.extStandardDerivatives = true;
      this.extTextureFloat = true;
      this.extTextureHalfFloat = true;
      this.extTextureLod = true;
      this.extUintElement = true;
      this.extVertexArrayObject = true;
      this.extColorBufferFloat = getExtension('EXT_color_buffer_float');
      this.extDisjointTimerQuery = getExtension('EXT_disjoint_timer_query_webgl2', 'EXT_disjoint_timer_query');
      this.extDepthTexture = true;
    } else {
      this.extBlendMinmax = getExtension("EXT_blend_minmax");
      this.extDrawBuffers = getExtension('EXT_draw_buffers');
      this.extInstancing = getExtension("ANGLE_instanced_arrays");

      if (this.extInstancing) {
        const ext = this.extInstancing;
        gl.drawArraysInstanced = ext.drawArraysInstancedANGLE.bind(ext);
        gl.drawElementsInstanced = ext.drawElementsInstancedANGLE.bind(ext);
        gl.vertexAttribDivisor = ext.vertexAttribDivisorANGLE.bind(ext);
      }

      this.extStandardDerivatives = getExtension("OES_standard_derivatives");
      this.extTextureFloat = getExtension("OES_texture_float");
      this.extTextureHalfFloat = getExtension("OES_texture_half_float");
      this.extTextureLod = getExtension('EXT_shader_texture_lod');
      this.extUintElement = getExtension("OES_element_index_uint");
      this.extVertexArrayObject = getExtension("OES_vertex_array_object");

      if (this.extVertexArrayObject) {
        const ext = this.extVertexArrayObject;
        gl.createVertexArray = ext.createVertexArrayOES.bind(ext);
        gl.deleteVertexArray = ext.deleteVertexArrayOES.bind(ext);
        gl.isVertexArray = ext.isVertexArrayOES.bind(ext);
        gl.bindVertexArray = ext.bindVertexArrayOES.bind(ext);
      }

      this.extColorBufferFloat = null;
      this.extDisjointTimerQuery = null;
      this.extDepthTexture = gl.getExtension('WEBGL_depth_texture');
    }

    this.extDebugRendererInfo = getExtension('WEBGL_debug_renderer_info');
    this.extTextureFloatLinear = getExtension("OES_texture_float_linear");
    this.extTextureHalfFloatLinear = getExtension("OES_texture_half_float_linear");
    this.extFloatBlend = getExtension("EXT_float_blend");
    this.extTextureFilterAnisotropic = getExtension('EXT_texture_filter_anisotropic', 'WEBKIT_EXT_texture_filter_anisotropic');
    this.extCompressedTextureETC1 = getExtension('WEBGL_compressed_texture_etc1');
    this.extCompressedTextureETC = getExtension('WEBGL_compressed_texture_etc');
    this.extCompressedTexturePVRTC = getExtension('WEBGL_compressed_texture_pvrtc', 'WEBKIT_WEBGL_compressed_texture_pvrtc');
    this.extCompressedTextureS3TC = getExtension('WEBGL_compressed_texture_s3tc', 'WEBKIT_WEBGL_compressed_texture_s3tc');
    this.extCompressedTextureATC = getExtension('WEBGL_compressed_texture_atc');
    this.extCompressedTextureASTC = getExtension('WEBGL_compressed_texture_astc');
    this.extParallelShaderCompile = getExtension('KHR_parallel_shader_compile');
    this.extColorBufferHalfFloat = getExtension("EXT_color_buffer_half_float");
  }

  initializeCapabilities() {
    const gl = this.gl;
    let ext;
    const userAgent = typeof navigator !== 'undefined' ? navigator.userAgent : "";
    this.maxPrecision = this.precision = this.getPrecision();
    const contextAttribs = gl.getContextAttributes();
    this.supportsMsaa = contextAttribs.antialias;
    this.supportsStencil = contextAttribs.stencil;
    this.supportsInstancing = !!this.extInstancing;
    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    this.maxCubeMapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    this.maxRenderBufferSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);
    this.maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    this.maxCombinedTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    this.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    this.vertexUniformsCount = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    this.fragmentUniformsCount = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);

    if (this.webgl2) {
      this.maxDrawBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);
      this.maxColorAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
      this.maxVolumeSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);
    } else {
      ext = this.extDrawBuffers;
      this.maxDrawBuffers = ext ? gl.getParameter(ext.MAX_DRAW_BUFFERS_EXT) : 1;
      this.maxColorAttachments = ext ? gl.getParameter(ext.MAX_COLOR_ATTACHMENTS_EXT) : 1;
      this.maxVolumeSize = 1;
    }

    ext = this.extDebugRendererInfo;
    this.unmaskedRenderer = ext ? gl.getParameter(ext.UNMASKED_RENDERER_WEBGL) : '';
    this.unmaskedVendor = ext ? gl.getParameter(ext.UNMASKED_VENDOR_WEBGL) : '';
    const samsungModelRegex = /SM-[a-zA-Z0-9]+/;
    this.supportsGpuParticles = !(this.unmaskedVendor === 'ARM' && userAgent.match(samsungModelRegex));
    ext = this.extTextureFilterAnisotropic;
    this.maxAnisotropy = ext ? gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;
    this.samples = gl.getParameter(gl.SAMPLES);
    this.maxSamples = this.webgl2 && !this.forceDisableMultisampling ? gl.getParameter(gl.MAX_SAMPLES) : 1;
    this.supportsAreaLights = this.webgl2 || !platform.android;

    if (this.maxTextures <= 8) {
      this.supportsAreaLights = false;
    }
  }

  initializeRenderState() {
    const gl = this.gl;
    this.blending = false;
    gl.disable(gl.BLEND);
    this.blendSrc = BLENDMODE_ONE;
    this.blendDst = BLENDMODE_ZERO;
    this.blendSrcAlpha = BLENDMODE_ONE;
    this.blendDstAlpha = BLENDMODE_ZERO;
    this.separateAlphaBlend = false;
    this.blendEquation = BLENDEQUATION_ADD;
    this.blendAlphaEquation = BLENDEQUATION_ADD;
    this.separateAlphaEquation = false;
    gl.blendFunc(gl.ONE, gl.ZERO);
    gl.blendEquation(gl.FUNC_ADD);
    this.blendColor = new Color(0, 0, 0, 0);
    gl.blendColor(0, 0, 0, 0);
    this.writeRed = true;
    this.writeGreen = true;
    this.writeBlue = true;
    this.writeAlpha = true;
    gl.colorMask(true, true, true, true);
    this.cullMode = CULLFACE_BACK;
    gl.enable(gl.CULL_FACE);
    gl.cullFace(gl.BACK);
    this.depthTest = true;
    gl.enable(gl.DEPTH_TEST);
    this.depthFunc = FUNC_LESSEQUAL;
    gl.depthFunc(gl.LEQUAL);
    this.depthWrite = true;
    gl.depthMask(true);
    this.stencil = false;
    gl.disable(gl.STENCIL_TEST);
    this.stencilFuncFront = this.stencilFuncBack = FUNC_ALWAYS;
    this.stencilRefFront = this.stencilRefBack = 0;
    this.stencilMaskFront = this.stencilMaskBack = 0xFF;
    gl.stencilFunc(gl.ALWAYS, 0, 0xFF);
    this.stencilFailFront = this.stencilFailBack = STENCILOP_KEEP;
    this.stencilZfailFront = this.stencilZfailBack = STENCILOP_KEEP;
    this.stencilZpassFront = this.stencilZpassBack = STENCILOP_KEEP;
    this.stencilWriteMaskFront = 0xFF;
    this.stencilWriteMaskBack = 0xFF;
    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
    gl.stencilMask(0xFF);
    this.alphaToCoverage = false;
    this.raster = true;

    if (this.webgl2) {
      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      gl.disable(gl.RASTERIZER_DISCARD);
    }

    this.depthBiasEnabled = false;
    gl.disable(gl.POLYGON_OFFSET_FILL);
    this.clearDepth = 1;
    gl.clearDepth(1);
    this.clearColor = new Color(0, 0, 0, 0);
    gl.clearColor(0, 0, 0, 0);
    this.clearStencil = 0;
    gl.clearStencil(0);
    this.vx = this.vy = this.vw = this.vh = 0;
    this.sx = this.sy = this.sw = this.sh = 0;

    if (this.webgl2) {
      gl.hint(gl.FRAGMENT_SHADER_DERIVATIVE_HINT, gl.NICEST);
    } else {
      if (this.extStandardDerivatives) {
        gl.hint(this.extStandardDerivatives.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, gl.NICEST);
      }
    }

    gl.enable(gl.SCISSOR_TEST);
    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
    this.unpackFlipY = false;
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
    this.unpackPremultiplyAlpha = false;
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
  }

  initializeContextCaches() {
    super.initializeContextCaches();
    this.vertexShaderCache = {};
    this.fragmentShaderCache = {};
    this._vaoMap = new Map();
    this.boundVao = null;
    this.activeFramebuffer = null;
    this.feedback = null;
    this.transformFeedbackBuffer = null;
    this.textureUnit = 0;
    this.textureUnits = [];

    for (let i = 0; i < this.maxCombinedTextures; i++) {
      this.textureUnits.push([null, null, null]);
    }
  }

  loseContext() {
    for (const shader of this.shaders) {
      shader.loseContext();
    }

    for (const texture of this.textures) {
      texture.loseContext();
    }

    for (const buffer of this.buffers) {
      buffer.loseContext();
    }

    for (const target of this.targets) {
      target.loseContext();
    }
  }

  restoreContext() {
    this.initializeExtensions();
    this.initializeCapabilities();
    this.initializeRenderState();
    this.initializeContextCaches();

    for (const shader of this.shaders) {
      shader.restoreContext();
    }

    for (const buffer of this.buffers) {
      buffer.unlock();
    }
  }

  setViewport(x, y, w, h) {
    if (this.vx !== x || this.vy !== y || this.vw !== w || this.vh !== h) {
      this.gl.viewport(x, y, w, h);
      this.vx = x;
      this.vy = y;
      this.vw = w;
      this.vh = h;
    }
  }

  setScissor(x, y, w, h) {
    if (this.sx !== x || this.sy !== y || this.sw !== w || this.sh !== h) {
      this.gl.scissor(x, y, w, h);
      this.sx = x;
      this.sy = y;
      this.sw = w;
      this.sh = h;
    }
  }

  setFramebuffer(fb) {
    if (this.activeFramebuffer !== fb) {
      const gl = this.gl;
      gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
      this.activeFramebuffer = fb;
    }
  }

  copyRenderTarget(source, dest, color, depth) {
    const gl = this.gl;

    if (!this.webgl2 && depth) {
      return false;
    }

    if (color) {
      if (!dest) {
        if (!source._colorBuffer) {
          return false;
        }
      } else if (source) {
        if (!source._colorBuffer || !dest._colorBuffer) {
          return false;
        }

        if (source._colorBuffer._format !== dest._colorBuffer._format) {
          return false;
        }
      }
    }

    if (depth && source) {
      if (!source._depth) {
        if (!source._depthBuffer || !dest._depthBuffer) {
          return false;
        }

        if (source._depthBuffer._format !== dest._depthBuffer._format) {
          return false;
        }
      }
    }

    if (this.webgl2 && dest) {
      const prevRt = this.renderTarget;
      this.renderTarget = dest;
      this.updateBegin();
      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, source ? source.impl._glFrameBuffer : null);
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dest.impl._glFrameBuffer);
      const w = source ? source.width : dest.width;
      const h = source ? source.height : dest.height;
      gl.blitFramebuffer(0, 0, w, h, 0, 0, w, h, (color ? gl.COLOR_BUFFER_BIT : 0) | (depth ? gl.DEPTH_BUFFER_BIT : 0), gl.NEAREST);
      this.renderTarget = prevRt;
      gl.bindFramebuffer(gl.FRAMEBUFFER, prevRt ? prevRt.impl._glFrameBuffer : null);
    } else {
      const shader = this.getCopyShader();
      this.constantTexSource.setValue(source._colorBuffer);
      drawQuadWithShader(this, dest, shader);
    }

    return true;
  }

  getCopyShader() {
    if (!this._copyShader) {
      const vs = shaderChunks.fullscreenQuadVS;
      const fs = shaderChunks.outputTex2DPS;
      this._copyShader = createShaderFromCode(this, vs, fs, "outputTex2D");
    }

    return this._copyShader;
  }

  startPass(renderPass) {
    this.setRenderTarget(renderPass.renderTarget);
    this.updateBegin();
    const colorOps = renderPass.colorOps;
    const depthStencilOps = renderPass.depthStencilOps;

    if (colorOps.clear || depthStencilOps.clearDepth || depthStencilOps.clearStencil) {
      const rt = renderPass.renderTarget;
      const width = rt ? rt.width : this.width;
      const height = rt ? rt.height : this.height;
      this.setViewport(0, 0, width, height);
      this.setScissor(0, 0, width, height);
      let clearFlags = 0;
      const clearOptions = {};

      if (colorOps.clear) {
        clearFlags |= CLEARFLAG_COLOR;
        clearOptions.color = [colorOps.clearValue.r, colorOps.clearValue.g, colorOps.clearValue.b, colorOps.clearValue.a];
      }

      if (depthStencilOps.clearDepth) {
        clearFlags |= CLEARFLAG_DEPTH;
        clearOptions.depth = depthStencilOps.clearDepthValue;
      }

      if (depthStencilOps.clearStencil) {
        clearFlags |= CLEARFLAG_STENCIL;
        clearOptions.stencil = depthStencilOps.clearStencilValue;
      }

      clearOptions.flags = clearFlags;
      this.clear(clearOptions);
    }

    this.insideRenderPass = true;
  }

  endPass(renderPass) {
    this.unbindVertexArray();
    const target = this.renderTarget;

    if (target) {
      if (this.webgl2) {
        invalidateAttachments.length = 0;
        const gl = this.gl;

        if (!(renderPass.colorOps.store || renderPass.colorOps.resolve)) {
          invalidateAttachments.push(gl.COLOR_ATTACHMENT0);
        }

        if (!renderPass.depthStencilOps.storeDepth) {
          invalidateAttachments.push(gl.DEPTH_ATTACHMENT);
        }

        if (!renderPass.depthStencilOps.storeStencil) {
          invalidateAttachments.push(gl.STENCIL_ATTACHMENT);
        }

        if (invalidateAttachments.length > 0) {
          if (renderPass.fullSizeClearRect) {
            gl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, invalidateAttachments);
          }
        }
      }

      if (renderPass.colorOps.resolve) {
        if (this.webgl2 && renderPass.samples > 1 && target.autoResolve) {
          target.resolve(true, false);
        }
      }

      if (renderPass.colorOps.mipmaps) {
        const colorBuffer = target._colorBuffer;

        if (colorBuffer && colorBuffer.impl._glTexture && colorBuffer.mipmaps && (colorBuffer.pot || this.webgl2)) {
          this.activeTexture(this.maxCombinedTextures - 1);
          this.bindTexture(colorBuffer);
          this.gl.generateMipmap(colorBuffer.impl._glTarget);
        }
      }
    }

    this.insideRenderPass = false;
  }

  updateBegin() {
    this.boundVao = null;

    if (this._tempEnableSafariTextureUnitWorkaround) {
      for (let unit = 0; unit < this.textureUnits.length; ++unit) {
        for (let slot = 0; slot < 3; ++slot) {
          this.textureUnits[unit][slot] = null;
        }
      }
    }

    const target = this.renderTarget;

    if (target) {
      if (!target.impl.initialized) {
        this.initRenderTarget(target);
      } else {
        this.setFramebuffer(target.impl._glFrameBuffer);
      }
    } else {
      this.setFramebuffer(this.defaultFramebuffer);
    }
  }

  updateEnd() {
    this.unbindVertexArray();
    const target = this.renderTarget;

    if (target) {
      if (this.webgl2 && target._samples > 1 && target.autoResolve) {
        target.resolve();
      }

      const colorBuffer = target._colorBuffer;

      if (colorBuffer && colorBuffer.impl._glTexture && colorBuffer.mipmaps && (colorBuffer.pot || this.webgl2)) {
        this.activeTexture(this.maxCombinedTextures - 1);
        this.bindTexture(colorBuffer);
        this.gl.generateMipmap(colorBuffer.impl._glTarget);
      }
    }
  }

  setUnpackFlipY(flipY) {
    if (this.unpackFlipY !== flipY) {
      this.unpackFlipY = flipY;
      const gl = this.gl;
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
    }
  }

  setUnpackPremultiplyAlpha(premultiplyAlpha) {
    if (this.unpackPremultiplyAlpha !== premultiplyAlpha) {
      this.unpackPremultiplyAlpha = premultiplyAlpha;
      const gl = this.gl;
      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
    }
  }

  activeTexture(textureUnit) {
    if (this.textureUnit !== textureUnit) {
      this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);
      this.textureUnit = textureUnit;
    }
  }

  bindTexture(texture) {
    const impl = texture.impl;
    const textureTarget = impl._glTarget;
    const textureObject = impl._glTexture;
    const textureUnit = this.textureUnit;
    const slot = this.targetToSlot[textureTarget];

    if (this.textureUnits[textureUnit][slot] !== textureObject) {
      this.gl.bindTexture(textureTarget, textureObject);
      this.textureUnits[textureUnit][slot] = textureObject;
    }
  }

  bindTextureOnUnit(texture, textureUnit) {
    const impl = texture.impl;
    const textureTarget = impl._glTarget;
    const textureObject = impl._glTexture;
    const slot = this.targetToSlot[textureTarget];

    if (this.textureUnits[textureUnit][slot] !== textureObject) {
      this.activeTexture(textureUnit);
      this.gl.bindTexture(textureTarget, textureObject);
      this.textureUnits[textureUnit][slot] = textureObject;
    }
  }

  setTextureParameters(texture) {
    const gl = this.gl;
    const flags = texture._parameterFlags;
    const target = texture.impl._glTarget;

    if (flags & 1) {
      let filter = texture._minFilter;

      if (!texture.pot && !this.webgl2 || !texture._mipmaps || texture._compressed && texture._levels.length === 1) {
        if (filter === FILTER_NEAREST_MIPMAP_NEAREST || filter === FILTER_NEAREST_MIPMAP_LINEAR) {
          filter = FILTER_NEAREST;
        } else if (filter === FILTER_LINEAR_MIPMAP_NEAREST || filter === FILTER_LINEAR_MIPMAP_LINEAR) {
          filter = FILTER_LINEAR;
        }
      }

      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, this.glFilter[filter]);
    }

    if (flags & 2) {
      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, this.glFilter[texture._magFilter]);
    }

    if (flags & 4) {
      if (this.webgl2) {
        gl.texParameteri(target, gl.TEXTURE_WRAP_S, this.glAddress[texture._addressU]);
      } else {
        gl.texParameteri(target, gl.TEXTURE_WRAP_S, this.glAddress[texture.pot ? texture._addressU : ADDRESS_CLAMP_TO_EDGE]);
      }
    }

    if (flags & 8) {
      if (this.webgl2) {
        gl.texParameteri(target, gl.TEXTURE_WRAP_T, this.glAddress[texture._addressV]);
      } else {
        gl.texParameteri(target, gl.TEXTURE_WRAP_T, this.glAddress[texture.pot ? texture._addressV : ADDRESS_CLAMP_TO_EDGE]);
      }
    }

    if (flags & 16) {
      if (this.webgl2) {
        gl.texParameteri(target, gl.TEXTURE_WRAP_R, this.glAddress[texture._addressW]);
      }
    }

    if (flags & 32) {
      if (this.webgl2) {
        gl.texParameteri(target, gl.TEXTURE_COMPARE_MODE, texture._compareOnRead ? gl.COMPARE_REF_TO_TEXTURE : gl.NONE);
      }
    }

    if (flags & 64) {
      if (this.webgl2) {
        gl.texParameteri(target, gl.TEXTURE_COMPARE_FUNC, this.glComparison[texture._compareFunc]);
      }
    }

    if (flags & 128) {
      const ext = this.extTextureFilterAnisotropic;

      if (ext) {
        gl.texParameterf(target, ext.TEXTURE_MAX_ANISOTROPY_EXT, Math.max(1, Math.min(Math.round(texture._anisotropy), this.maxAnisotropy)));
      }
    }
  }

  setTexture(texture, textureUnit) {
    if (!texture.impl._glTexture) texture.impl.initialize(this, texture);

    if (texture._parameterFlags > 0 || texture._needsUpload || texture._needsMipmapsUpload) {
      this.activeTexture(textureUnit);
      this.bindTexture(texture);

      if (texture._parameterFlags) {
        this.setTextureParameters(texture);
        texture._parameterFlags = 0;
      }

      if (texture._needsUpload || texture._needsMipmapsUpload) {
        texture.impl.upload(this, texture);
        texture._needsUpload = false;
        texture._needsMipmapsUpload = false;
      }
    } else {
      this.bindTextureOnUnit(texture, textureUnit);
    }
  }

  createVertexArray(vertexBuffers) {
    let key, vao;
    const useCache = vertexBuffers.length > 1;

    if (useCache) {
      key = "";

      for (let i = 0; i < vertexBuffers.length; i++) {
        const vertexBuffer = vertexBuffers[i];
        key += vertexBuffer.id + vertexBuffer.format.renderingingHash;
      }

      vao = this._vaoMap.get(key);
    }

    if (!vao) {
      const gl = this.gl;
      vao = gl.createVertexArray();
      gl.bindVertexArray(vao);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);

      for (let i = 0; i < vertexBuffers.length; i++) {
        const vertexBuffer = vertexBuffers[i];
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer.impl.bufferId);
        const elements = vertexBuffer.format.elements;

        for (let j = 0; j < elements.length; j++) {
          const e = elements[j];
          const loc = semanticToLocation[e.name];

          gl.vertexAttribPointer(loc, e.numComponents, this.glType[e.dataType], e.normalize, e.stride, e.offset);
          gl.enableVertexAttribArray(loc);

          if (vertexBuffer.instancing) {
            gl.vertexAttribDivisor(loc, 1);
          }
        }
      }

      gl.bindVertexArray(null);
      gl.bindBuffer(gl.ARRAY_BUFFER, null);

      if (useCache) {
        this._vaoMap.set(key, vao);
      }
    }

    return vao;
  }

  unbindVertexArray() {
    if (this.boundVao) {
      this.boundVao = null;
      this.gl.bindVertexArray(null);
    }
  }

  setBuffers() {
    const gl = this.gl;
    let vao;

    if (this.vertexBuffers.length === 1) {
      const vertexBuffer = this.vertexBuffers[0];

      if (!vertexBuffer.impl.vao) {
        vertexBuffer.impl.vao = this.createVertexArray(this.vertexBuffers);
      }

      vao = vertexBuffer.impl.vao;
    } else {
      vao = this.createVertexArray(this.vertexBuffers);
    }

    if (this.boundVao !== vao) {
      this.boundVao = vao;
      gl.bindVertexArray(vao);
    }

    this.vertexBuffers.length = 0;
    const bufferId = this.indexBuffer ? this.indexBuffer.impl.bufferId : null;
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferId);
  }

  draw(primitive, numInstances, keepBuffers) {
    const gl = this.gl;
    let sampler, samplerValue, texture, numTextures;
    let uniform, scopeId, uniformVersion, programVersion;
    const shader = this.shader;
    if (!shader) return;
    const samplers = shader.impl.samplers;
    const uniforms = shader.impl.uniforms;

    if (!keepBuffers) {
      this.setBuffers();
    }

    let textureUnit = 0;

    for (let i = 0, len = samplers.length; i < len; i++) {
      sampler = samplers[i];
      samplerValue = sampler.scopeId.value;

      if (!samplerValue) {
        continue;
      }

      if (samplerValue instanceof Texture) {
        texture = samplerValue;
        this.setTexture(texture, textureUnit);

        if (sampler.slot !== textureUnit) {
          gl.uniform1i(sampler.locationId, textureUnit);
          sampler.slot = textureUnit;
        }

        textureUnit++;
      } else {
        sampler.array.length = 0;
        numTextures = samplerValue.length;

        for (let j = 0; j < numTextures; j++) {
          texture = samplerValue[j];
          this.setTexture(texture, textureUnit);
          sampler.array[j] = textureUnit;
          textureUnit++;
        }

        gl.uniform1iv(sampler.locationId, sampler.array);
      }
    }

    for (let i = 0, len = uniforms.length; i < len; i++) {
      uniform = uniforms[i];
      scopeId = uniform.scopeId;
      uniformVersion = uniform.version;
      programVersion = scopeId.versionObject.version;

      if (uniformVersion.globalId !== programVersion.globalId || uniformVersion.revision !== programVersion.revision) {
        uniformVersion.globalId = programVersion.globalId;
        uniformVersion.revision = programVersion.revision;

        if (scopeId.value !== null) {
          this.commitFunction[uniform.dataType](uniform, scopeId.value);
        }
      }
    }

    if (this.webgl2 && this.transformFeedbackBuffer) {
      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.transformFeedbackBuffer.impl.bufferId);
      gl.beginTransformFeedback(gl.POINTS);
    }

    const mode = this.glPrimitive[primitive.type];
    const count = primitive.count;

    if (primitive.indexed) {
      const indexBuffer = this.indexBuffer;
      const format = indexBuffer.impl.glFormat;
      const offset = primitive.base * indexBuffer.bytesPerIndex;

      if (numInstances > 0) {
        gl.drawElementsInstanced(mode, count, format, offset, numInstances);
      } else {
        gl.drawElements(mode, count, format, offset);
      }
    } else {
      const first = primitive.base;

      if (numInstances > 0) {
        gl.drawArraysInstanced(mode, first, count, numInstances);
      } else {
        gl.drawArrays(mode, first, count);
      }
    }

    if (this.webgl2 && this.transformFeedbackBuffer) {
      gl.endTransformFeedback();
      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);
    }

    this._drawCallsPerFrame++;
  }

  clear(options) {
    const defaultOptions = this.defaultClearOptions;
    options = options || defaultOptions;
    const flags = options.flags === undefined ? defaultOptions.flags : options.flags;

    if (flags !== 0) {
      const gl = this.gl;

      if (flags & CLEARFLAG_COLOR) {
        const color = options.color === undefined ? defaultOptions.color : options.color;
        this.setClearColor(color[0], color[1], color[2], color[3]);
        this.setColorWrite(true, true, true, true);
      }

      if (flags & CLEARFLAG_DEPTH) {
        const depth = options.depth === undefined ? defaultOptions.depth : options.depth;
        this.setClearDepth(depth);
        this.setDepthWrite(true);
      }

      if (flags & CLEARFLAG_STENCIL) {
        const stencil = options.stencil === undefined ? defaultOptions.stencil : options.stencil;
        this.setClearStencil(stencil);
      }

      gl.clear(this.glClearFlag[flags]);
    }
  }

  readPixels(x, y, w, h, pixels) {
    const gl = this.gl;
    gl.readPixels(x, y, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
  }

  setClearDepth(depth) {
    if (depth !== this.clearDepth) {
      this.gl.clearDepth(depth);
      this.clearDepth = depth;
    }
  }

  setClearColor(r, g, b, a) {
    const c = this.clearColor;

    if (r !== c.r || g !== c.g || b !== c.b || a !== c.a) {
      this.gl.clearColor(r, g, b, a);
      this.clearColor.set(r, g, b, a);
    }
  }

  setClearStencil(value) {
    if (value !== this.clearStencil) {
      this.gl.clearStencil(value);
      this.clearStencil = value;
    }
  }

  getDepthTest() {
    return this.depthTest;
  }

  setDepthTest(depthTest) {
    if (this.depthTest !== depthTest) {
      const gl = this.gl;

      if (depthTest) {
        gl.enable(gl.DEPTH_TEST);
      } else {
        gl.disable(gl.DEPTH_TEST);
      }

      this.depthTest = depthTest;
    }
  }

  setDepthFunc(func) {
    if (this.depthFunc === func) return;
    this.gl.depthFunc(this.glComparison[func]);
    this.depthFunc = func;
  }

  getDepthWrite() {
    return this.depthWrite;
  }

  setDepthWrite(writeDepth) {
    if (this.depthWrite !== writeDepth) {
      this.gl.depthMask(writeDepth);
      this.depthWrite = writeDepth;
    }
  }

  setColorWrite(writeRed, writeGreen, writeBlue, writeAlpha) {
    if (this.writeRed !== writeRed || this.writeGreen !== writeGreen || this.writeBlue !== writeBlue || this.writeAlpha !== writeAlpha) {
      this.gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);
      this.writeRed = writeRed;
      this.writeGreen = writeGreen;
      this.writeBlue = writeBlue;
      this.writeAlpha = writeAlpha;
    }
  }

  setAlphaToCoverage(state) {
    if (!this.webgl2) return;
    if (this.alphaToCoverage === state) return;
    this.alphaToCoverage = state;

    if (state) {
      this.gl.enable(this.gl.SAMPLE_ALPHA_TO_COVERAGE);
    } else {
      this.gl.disable(this.gl.SAMPLE_ALPHA_TO_COVERAGE);
    }
  }

  setTransformFeedbackBuffer(tf) {
    if (this.transformFeedbackBuffer === tf) return;
    this.transformFeedbackBuffer = tf;

    if (this.webgl2) {
      const gl = this.gl;

      if (tf) {
        if (!this.feedback) {
          this.feedback = gl.createTransformFeedback();
        }

        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.feedback);
      } else {
        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
      }
    }
  }

  setRaster(on) {
    if (this.raster === on) return;
    this.raster = on;

    if (this.webgl2) {
      if (on) {
        this.gl.disable(this.gl.RASTERIZER_DISCARD);
      } else {
        this.gl.enable(this.gl.RASTERIZER_DISCARD);
      }
    }
  }

  setDepthBias(on) {
    if (this.depthBiasEnabled === on) return;
    this.depthBiasEnabled = on;

    if (on) {
      this.gl.enable(this.gl.POLYGON_OFFSET_FILL);
    } else {
      this.gl.disable(this.gl.POLYGON_OFFSET_FILL);
    }
  }

  setDepthBiasValues(constBias, slopeBias) {
    this.gl.polygonOffset(slopeBias, constBias);
  }

  getBlending() {
    return this.blending;
  }

  setBlending(blending) {
    if (this.blending !== blending) {
      const gl = this.gl;

      if (blending) {
        gl.enable(gl.BLEND);
      } else {
        gl.disable(gl.BLEND);
      }

      this.blending = blending;
    }
  }

  setStencilTest(enable) {
    if (this.stencil !== enable) {
      const gl = this.gl;

      if (enable) {
        gl.enable(gl.STENCIL_TEST);
      } else {
        gl.disable(gl.STENCIL_TEST);
      }

      this.stencil = enable;
    }
  }

  setStencilFunc(func, ref, mask) {
    if (this.stencilFuncFront !== func || this.stencilRefFront !== ref || this.stencilMaskFront !== mask || this.stencilFuncBack !== func || this.stencilRefBack !== ref || this.stencilMaskBack !== mask) {
      const gl = this.gl;
      gl.stencilFunc(this.glComparison[func], ref, mask);
      this.stencilFuncFront = this.stencilFuncBack = func;
      this.stencilRefFront = this.stencilRefBack = ref;
      this.stencilMaskFront = this.stencilMaskBack = mask;
    }
  }

  setStencilFuncFront(func, ref, mask) {
    if (this.stencilFuncFront !== func || this.stencilRefFront !== ref || this.stencilMaskFront !== mask) {
      const gl = this.gl;
      gl.stencilFuncSeparate(gl.FRONT, this.glComparison[func], ref, mask);
      this.stencilFuncFront = func;
      this.stencilRefFront = ref;
      this.stencilMaskFront = mask;
    }
  }

  setStencilFuncBack(func, ref, mask) {
    if (this.stencilFuncBack !== func || this.stencilRefBack !== ref || this.stencilMaskBack !== mask) {
      const gl = this.gl;
      gl.stencilFuncSeparate(gl.BACK, this.glComparison[func], ref, mask);
      this.stencilFuncBack = func;
      this.stencilRefBack = ref;
      this.stencilMaskBack = mask;
    }
  }

  setStencilOperation(fail, zfail, zpass, writeMask) {
    if (this.stencilFailFront !== fail || this.stencilZfailFront !== zfail || this.stencilZpassFront !== zpass || this.stencilFailBack !== fail || this.stencilZfailBack !== zfail || this.stencilZpassBack !== zpass) {
      this.gl.stencilOp(this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);
      this.stencilFailFront = this.stencilFailBack = fail;
      this.stencilZfailFront = this.stencilZfailBack = zfail;
      this.stencilZpassFront = this.stencilZpassBack = zpass;
    }

    if (this.stencilWriteMaskFront !== writeMask || this.stencilWriteMaskBack !== writeMask) {
      this.gl.stencilMask(writeMask);
      this.stencilWriteMaskFront = writeMask;
      this.stencilWriteMaskBack = writeMask;
    }
  }

  setStencilOperationFront(fail, zfail, zpass, writeMask) {
    if (this.stencilFailFront !== fail || this.stencilZfailFront !== zfail || this.stencilZpassFront !== zpass) {
      this.gl.stencilOpSeparate(this.gl.FRONT, this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);
      this.stencilFailFront = fail;
      this.stencilZfailFront = zfail;
      this.stencilZpassFront = zpass;
    }

    if (this.stencilWriteMaskFront !== writeMask) {
      this.gl.stencilMaskSeparate(this.gl.FRONT, writeMask);
      this.stencilWriteMaskFront = writeMask;
    }
  }

  setStencilOperationBack(fail, zfail, zpass, writeMask) {
    if (this.stencilFailBack !== fail || this.stencilZfailBack !== zfail || this.stencilZpassBack !== zpass) {
      this.gl.stencilOpSeparate(this.gl.BACK, this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);
      this.stencilFailBack = fail;
      this.stencilZfailBack = zfail;
      this.stencilZpassBack = zpass;
    }

    if (this.stencilWriteMaskBack !== writeMask) {
      this.gl.stencilMaskSeparate(this.gl.BACK, writeMask);
      this.stencilWriteMaskBack = writeMask;
    }
  }

  setBlendFunction(blendSrc, blendDst) {
    if (this.blendSrc !== blendSrc || this.blendDst !== blendDst || this.separateAlphaBlend) {
      this.gl.blendFunc(this.glBlendFunction[blendSrc], this.glBlendFunction[blendDst]);
      this.blendSrc = blendSrc;
      this.blendDst = blendDst;
      this.separateAlphaBlend = false;
    }
  }

  setBlendFunctionSeparate(blendSrc, blendDst, blendSrcAlpha, blendDstAlpha) {
    if (this.blendSrc !== blendSrc || this.blendDst !== blendDst || this.blendSrcAlpha !== blendSrcAlpha || this.blendDstAlpha !== blendDstAlpha || !this.separateAlphaBlend) {
      this.gl.blendFuncSeparate(this.glBlendFunction[blendSrc], this.glBlendFunction[blendDst], this.glBlendFunction[blendSrcAlpha], this.glBlendFunction[blendDstAlpha]);
      this.blendSrc = blendSrc;
      this.blendDst = blendDst;
      this.blendSrcAlpha = blendSrcAlpha;
      this.blendDstAlpha = blendDstAlpha;
      this.separateAlphaBlend = true;
    }
  }

  setBlendEquation(blendEquation) {
    if (this.blendEquation !== blendEquation || this.separateAlphaEquation) {
      this.gl.blendEquation(this.glBlendEquation[blendEquation]);
      this.blendEquation = blendEquation;
      this.separateAlphaEquation = false;
    }
  }

  setBlendEquationSeparate(blendEquation, blendAlphaEquation) {
    if (this.blendEquation !== blendEquation || this.blendAlphaEquation !== blendAlphaEquation || !this.separateAlphaEquation) {
      this.gl.blendEquationSeparate(this.glBlendEquation[blendEquation], this.glBlendEquation[blendAlphaEquation]);
      this.blendEquation = blendEquation;
      this.blendAlphaEquation = blendAlphaEquation;
      this.separateAlphaEquation = true;
    }
  }

  setBlendColor(r, g, b, a) {
    const c = this.blendColor;

    if (r !== c.r || g !== c.g || b !== c.b || a !== c.a) {
      this.gl.blendColor(r, g, b, a);
      c.set(r, g, b, a);
    }
  }

  setCullMode(cullMode) {
    if (this.cullMode !== cullMode) {
      if (cullMode === CULLFACE_NONE) {
        this.gl.disable(this.gl.CULL_FACE);
      } else {
        if (this.cullMode === CULLFACE_NONE) {
          this.gl.enable(this.gl.CULL_FACE);
        }

        const mode = this.glCull[cullMode];

        if (this.cullFace !== mode) {
          this.gl.cullFace(mode);
          this.cullFace = mode;
        }
      }

      this.cullMode = cullMode;
    }
  }

  getCullMode() {
    return this.cullMode;
  }

  setShader(shader) {
    if (shader !== this.shader) {
      if (shader.failed) {
        return false;
      } else if (!shader.ready && !shader.impl.postLink(this, shader)) {
        shader.failed = true;
        return false;
      }

      this.shader = shader;
      this.gl.useProgram(shader.impl.glProgram);
      this.attributesInvalidated = true;
    }

    return true;
  }

  getHdrFormat() {
    if (this.textureHalfFloatRenderable) {
      return PIXELFORMAT_RGBA16F;
    } else if (this.textureFloatRenderable) {
      return PIXELFORMAT_RGBA32F;
    }

    return PIXELFORMAT_R8_G8_B8_A8;
  }

  clearShaderCache() {
    const gl = this.gl;

    for (const shaderSrc in this.fragmentShaderCache) {
      gl.deleteShader(this.fragmentShaderCache[shaderSrc]);
      delete this.fragmentShaderCache[shaderSrc];
    }

    for (const shaderSrc in this.vertexShaderCache) {
      gl.deleteShader(this.vertexShaderCache[shaderSrc]);
      delete this.vertexShaderCache[shaderSrc];
    }

    this.programLib.clearCache();
  }

  clearVertexArrayObjectCache() {
    const gl = this.gl;

    this._vaoMap.forEach((item, key, mapObj) => {
      gl.deleteVertexArray(item);
    });

    this._vaoMap.clear();
  }

  removeShaderFromCache(shader) {
    this.programLib.removeFromCache(shader);
  }

  get width() {
    return this.gl.drawingBufferWidth || this.canvas.width;
  }

  get height() {
    return this.gl.drawingBufferHeight || this.canvas.height;
  }

  set fullscreen(fullscreen) {
    if (fullscreen) {
      const canvas = this.gl.canvas;
      canvas.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  }

  get fullscreen() {
    return !!document.fullscreenElement;
  }

  get textureFloatHighPrecision() {
    if (this._textureFloatHighPrecision === undefined) {
      this._textureFloatHighPrecision = testTextureFloatHighPrecision(this);
    }

    return this._textureFloatHighPrecision;
  }

  get textureHalfFloatUpdatable() {
    if (this._textureHalfFloatUpdatable === undefined) {
      if (this.webgl2) {
        this._textureHalfFloatUpdatable = true;
      } else {
        this._textureHalfFloatUpdatable = testTextureHalfFloatUpdatable(this.gl, this.extTextureHalfFloat.HALF_FLOAT_OES);
      }
    }

    return this._textureHalfFloatUpdatable;
  }

}

class RefCountedObject {
  constructor() {
    this._refCount = 0;
  }

  incRefCount() {
    this._refCount++;
  }

  decRefCount() {
    this._refCount--;
  }

  get refCount() {
    return this._refCount;
  }

}

let currentApplication;

function getApplication() {
  return currentApplication;
}

function setApplication(app) {
  currentApplication = app;
}

let id$1 = 0;

class GeometryData {
  constructor() {
    this.initDefaults();
  }

  initDefaults() {
    this.recreate = false;
    this.verticesUsage = BUFFER_STATIC;
    this.indicesUsage = BUFFER_STATIC;
    this.maxVertices = 0;
    this.maxIndices = 0;
    this.vertexCount = 0;
    this.indexCount = 0;
    this.vertexStreamsUpdated = false;
    this.indexStreamUpdated = false;
    this.vertexStreamDictionary = {};
    this.indices = null;
  }

  _changeVertexCount(count, semantic) {
    if (!this.vertexCount) {
      this.vertexCount = count;
    }
  }

}

GeometryData.DEFAULT_COMPONENTS_POSITION = 3;
GeometryData.DEFAULT_COMPONENTS_NORMAL = 3;
GeometryData.DEFAULT_COMPONENTS_UV = 2;
GeometryData.DEFAULT_COMPONENTS_COLORS = 4;

class GeometryVertexStream {
  constructor(data, componentCount, dataType, dataTypeNormalize) {
    this.data = data;
    this.componentCount = componentCount;
    this.dataType = dataType;
    this.dataTypeNormalize = dataTypeNormalize;
  }

}

class Mesh extends RefCountedObject {
  constructor(graphicsDevice) {
    super();
    this.id = id$1++;
    this.device = graphicsDevice || getApplication().graphicsDevice;
    this.vertexBuffer = null;
    this.indexBuffer = [null];
    this.primitive = [{
      type: 0,
      base: 0,
      count: 0
    }];
    this.skin = null;
    this._morph = null;
    this._geometryData = null;
    this._aabb = new BoundingBox();
    this.boneAabb = null;
  }

  set morph(morph) {
    if (morph !== this._morph) {
      if (this._morph) {
        this._morph.decRefCount();
      }

      this._morph = morph;

      if (morph) {
        morph.incRefCount();
      }
    }
  }

  get morph() {
    return this._morph;
  }

  set aabb(aabb) {
    this._aabb = aabb;
  }

  get aabb() {
    return this._aabb;
  }

  destroy() {
    const morph = this.morph;

    if (morph) {
      this.morph = null;

      if (morph.refCount < 1) {
        morph.destroy();
      }
    }

    if (this.vertexBuffer) {
      this.vertexBuffer.destroy();
      this.vertexBuffer = null;
    }

    for (let j = 0; j < this.indexBuffer.length; j++) {
      this._destroyIndexBuffer(j);
    }

    this.indexBuffer.length = 0;
    this._geometryData = null;
  }

  _destroyIndexBuffer(index) {
    if (this.indexBuffer[index]) {
      this.indexBuffer[index].destroy();
      this.indexBuffer[index] = null;
    }
  }

  _initBoneAabbs(morphTargets) {
    this.boneAabb = [];
    this.boneUsed = [];
    let x, y, z;
    let bMax, bMin;
    const boneMin = [];
    const boneMax = [];
    const boneUsed = this.boneUsed;
    const numBones = this.skin.boneNames.length;
    let maxMorphX, maxMorphY, maxMorphZ;

    for (let i = 0; i < numBones; i++) {
      boneMin[i] = new Vec3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      boneMax[i] = new Vec3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
    }

    const iterator = new VertexIterator(this.vertexBuffer);
    const posElement = iterator.element[SEMANTIC_POSITION];
    const weightsElement = iterator.element[SEMANTIC_BLENDWEIGHT];
    const indicesElement = iterator.element[SEMANTIC_BLENDINDICES];
    const numVerts = this.vertexBuffer.numVertices;

    for (let j = 0; j < numVerts; j++) {
      for (let k = 0; k < 4; k++) {
        const boneWeight = weightsElement.array[weightsElement.index + k];

        if (boneWeight > 0) {
          const boneIndex = indicesElement.array[indicesElement.index + k];
          boneUsed[boneIndex] = true;
          x = posElement.array[posElement.index];
          y = posElement.array[posElement.index + 1];
          z = posElement.array[posElement.index + 2];
          bMax = boneMax[boneIndex];
          bMin = boneMin[boneIndex];
          if (bMin.x > x) bMin.x = x;
          if (bMin.y > y) bMin.y = y;
          if (bMin.z > z) bMin.z = z;
          if (bMax.x < x) bMax.x = x;
          if (bMax.y < y) bMax.y = y;
          if (bMax.z < z) bMax.z = z;

          if (morphTargets) {
            let minMorphX = maxMorphX = x;
            let minMorphY = maxMorphY = y;
            let minMorphZ = maxMorphZ = z;

            for (let l = 0; l < morphTargets.length; l++) {
              const target = morphTargets[l];
              const dx = target.deltaPositions[j * 3];
              const dy = target.deltaPositions[j * 3 + 1];
              const dz = target.deltaPositions[j * 3 + 2];

              if (dx < 0) {
                minMorphX += dx;
              } else {
                maxMorphX += dx;
              }

              if (dy < 0) {
                minMorphY += dy;
              } else {
                maxMorphY += dy;
              }

              if (dz < 0) {
                minMorphZ += dz;
              } else {
                maxMorphZ += dz;
              }
            }

            if (bMin.x > minMorphX) bMin.x = minMorphX;
            if (bMin.y > minMorphY) bMin.y = minMorphY;
            if (bMin.z > minMorphZ) bMin.z = minMorphZ;
            if (bMax.x < maxMorphX) bMax.x = maxMorphX;
            if (bMax.y < maxMorphY) bMax.y = maxMorphY;
            if (bMax.z < maxMorphZ) bMax.z = maxMorphZ;
          }
        }
      }

      iterator.next();
    }

    const positionElement = this.vertexBuffer.getFormat().elements.find(e => e.name === SEMANTIC_POSITION);

    if (positionElement && positionElement.normalize) {
      const func = (() => {
        switch (positionElement.dataType) {
          case TYPE_INT8:
            return x => Math.max(x / 127.0, -1.0);

          case TYPE_UINT8:
            return x => x / 255.0;

          case TYPE_INT16:
            return x => Math.max(x / 32767.0, -1.0);

          case TYPE_UINT16:
            return x => x / 65535.0;

          default:
            return x => x;
        }
      })();

      for (let i = 0; i < numBones; i++) {
        if (boneUsed[i]) {
          const min = boneMin[i];
          const max = boneMax[i];
          min.set(func(min.x), func(min.y), func(min.z));
          max.set(func(max.x), func(max.y), func(max.z));
        }
      }
    }

    for (let i = 0; i < numBones; i++) {
      const aabb = new BoundingBox();
      aabb.setMinMax(boneMin[i], boneMax[i]);
      this.boneAabb.push(aabb);
    }
  }

  _initGeometryData() {
    if (!this._geometryData) {
      this._geometryData = new GeometryData();

      if (this.vertexBuffer) {
        this._geometryData.vertexCount = this.vertexBuffer.numVertices;
        this._geometryData.maxVertices = this.vertexBuffer.numVertices;
      }

      if (this.indexBuffer.length > 0 && this.indexBuffer[0]) {
        this._geometryData.indexCount = this.indexBuffer[0].numIndices;
        this._geometryData.maxIndices = this.indexBuffer[0].numIndices;
      }
    }
  }

  clear(verticesDynamic, indicesDynamic, maxVertices = 0, maxIndices = 0) {
    this._initGeometryData();

    this._geometryData.initDefaults();

    this._geometryData.recreate = true;
    this._geometryData.maxVertices = maxVertices;
    this._geometryData.maxIndices = maxIndices;
    this._geometryData.verticesUsage = verticesDynamic ? BUFFER_STATIC : BUFFER_DYNAMIC;
    this._geometryData.indicesUsage = indicesDynamic ? BUFFER_STATIC : BUFFER_DYNAMIC;
  }

  setVertexStream(semantic, data, componentCount, numVertices, dataType = TYPE_FLOAT32, dataTypeNormalize = false) {
    this._initGeometryData();

    const vertexCount = numVertices || data.length / componentCount;

    this._geometryData._changeVertexCount(vertexCount, semantic);

    this._geometryData.vertexStreamsUpdated = true;
    this._geometryData.vertexStreamDictionary[semantic] = new GeometryVertexStream(data, componentCount, dataType, dataTypeNormalize);
  }

  getVertexStream(semantic, data) {
    let count = 0;
    let done = false;

    if (this._geometryData) {
      const stream = this._geometryData.vertexStreamDictionary[semantic];

      if (stream) {
        done = true;
        count = this._geometryData.vertexCount;

        if (ArrayBuffer.isView(data)) {
          data.set(stream.data);
        } else {
          data.length = 0;
          data.push(stream.data);
        }
      }
    }

    if (!done) {
      if (this.vertexBuffer) {
        const iterator = new VertexIterator(this.vertexBuffer);
        count = iterator.readData(semantic, data);
      }
    }

    return count;
  }

  setPositions(positions, componentCount = GeometryData.DEFAULT_COMPONENTS_POSITION, numVertices) {
    this.setVertexStream(SEMANTIC_POSITION, positions, componentCount, numVertices, TYPE_FLOAT32, false);
  }

  setNormals(normals, componentCount = GeometryData.DEFAULT_COMPONENTS_NORMAL, numVertices) {
    this.setVertexStream(SEMANTIC_NORMAL, normals, componentCount, numVertices, TYPE_FLOAT32, false);
  }

  setUvs(channel, uvs, componentCount = GeometryData.DEFAULT_COMPONENTS_UV, numVertices) {
    this.setVertexStream(SEMANTIC_TEXCOORD + channel, uvs, componentCount, numVertices, TYPE_FLOAT32, false);
  }

  setColors(colors, componentCount = GeometryData.DEFAULT_COMPONENTS_COLORS, numVertices) {
    this.setVertexStream(SEMANTIC_COLOR, colors, componentCount, numVertices, TYPE_FLOAT32, false);
  }

  setColors32(colors, numVertices) {
    this.setVertexStream(SEMANTIC_COLOR, colors, GeometryData.DEFAULT_COMPONENTS_COLORS, numVertices, TYPE_UINT8, true);
  }

  setIndices(indices, numIndices) {
    this._initGeometryData();

    this._geometryData.indexStreamUpdated = true;
    this._geometryData.indices = indices;
    this._geometryData.indexCount = numIndices || indices.length;
  }

  getPositions(positions) {
    return this.getVertexStream(SEMANTIC_POSITION, positions);
  }

  getNormals(normals) {
    return this.getVertexStream(SEMANTIC_NORMAL, normals);
  }

  getUvs(channel, uvs) {
    return this.getVertexStream(SEMANTIC_TEXCOORD + channel, uvs);
  }

  getColors(colors) {
    return this.getVertexStream(SEMANTIC_COLOR, colors);
  }

  getIndices(indices) {
    let count = 0;

    if (this._geometryData && this._geometryData.indices) {
      const streamIndices = this._geometryData.indices;
      count = this._geometryData.indexCount;

      if (ArrayBuffer.isView(indices)) {
        indices.set(streamIndices);
      } else {
        indices.length = 0;
        indices.push(streamIndices);
      }
    } else {
      if (this.indexBuffer.length > 0 && this.indexBuffer[0]) {
        const indexBuffer = this.indexBuffer[0];
        count = indexBuffer.readData(indices);
      }
    }

    return count;
  }

  update(primitiveType = PRIMITIVE_TRIANGLES, updateBoundingBox = true) {
    if (this._geometryData) {
      if (updateBoundingBox) {
        const stream = this._geometryData.vertexStreamDictionary[SEMANTIC_POSITION];

        if (stream) {
          if (stream.componentCount === 3) {
            this._aabb.compute(stream.data, this._geometryData.vertexCount);
          }
        }
      }

      let destroyVB = this._geometryData.recreate;

      if (this._geometryData.vertexCount > this._geometryData.maxVertices) {
        destroyVB = true;
        this._geometryData.maxVertices = this._geometryData.vertexCount;
      }

      if (destroyVB) {
        if (this.vertexBuffer) {
          this.vertexBuffer.destroy();
          this.vertexBuffer = null;
        }
      }

      let destroyIB = this._geometryData.recreate;

      if (this._geometryData.indexCount > this._geometryData.maxIndices) {
        destroyIB = true;
        this._geometryData.maxIndices = this._geometryData.indexCount;
      }

      if (destroyIB) {
        if (this.indexBuffer.length > 0 && this.indexBuffer[0]) {
          this.indexBuffer[0].destroy();
          this.indexBuffer[0] = null;
        }
      }

      if (this._geometryData.vertexStreamsUpdated) {
        this._updateVertexBuffer();
      }

      if (this._geometryData.indexStreamUpdated) {
        this._updateIndexBuffer();
      }

      this.primitive[0].type = primitiveType;

      if (this.indexBuffer.length > 0 && this.indexBuffer[0]) {
        if (this._geometryData.indexStreamUpdated) {
          this.primitive[0].count = this._geometryData.indexCount;
          this.primitive[0].indexed = true;
        }
      } else {
        if (this._geometryData.vertexStreamsUpdated) {
          this.primitive[0].count = this._geometryData.vertexCount;
          this.primitive[0].indexed = false;
        }
      }

      this._geometryData.vertexCount = 0;
      this._geometryData.indexCount = 0;
      this._geometryData.vertexStreamsUpdated = false;
      this._geometryData.indexStreamUpdated = false;
      this._geometryData.recreate = false;
      this.updateRenderStates();
    }
  }

  _buildVertexFormat(vertexCount) {
    const vertexDesc = [];

    for (const semantic in this._geometryData.vertexStreamDictionary) {
      const stream = this._geometryData.vertexStreamDictionary[semantic];
      vertexDesc.push({
        semantic: semantic,
        components: stream.componentCount,
        type: stream.dataType,
        normalize: stream.dataTypeNormalize
      });
    }

    return new VertexFormat(this.device, vertexDesc, vertexCount);
  }

  _updateVertexBuffer() {
    if (!this.vertexBuffer) {
      const allocateVertexCount = this._geometryData.maxVertices;

      const format = this._buildVertexFormat(allocateVertexCount);

      this.vertexBuffer = new VertexBuffer(this.device, format, allocateVertexCount, this._geometryData.verticesUsage);
    }

    const iterator = new VertexIterator(this.vertexBuffer);
    const numVertices = this._geometryData.vertexCount;

    for (const semantic in this._geometryData.vertexStreamDictionary) {
      const stream = this._geometryData.vertexStreamDictionary[semantic];
      iterator.writeData(semantic, stream.data, numVertices);
      delete this._geometryData.vertexStreamDictionary[semantic];
    }

    iterator.end();
  }

  _updateIndexBuffer() {
    if (this.indexBuffer.length <= 0 || !this.indexBuffer[0]) {
      const createFormat = this._geometryData.maxVertices > 0xffff ? INDEXFORMAT_UINT32 : INDEXFORMAT_UINT16;
      this.indexBuffer[0] = new IndexBuffer(this.device, createFormat, this._geometryData.maxIndices, this._geometryData.indicesUsage);
    }

    const srcIndices = this._geometryData.indices;

    if (srcIndices) {
      const indexBuffer = this.indexBuffer[0];
      indexBuffer.writeData(srcIndices, this._geometryData.indexCount);
      this._geometryData.indices = null;
    }
  }

  prepareRenderState(renderStyle) {
    if (renderStyle === RENDERSTYLE_WIREFRAME) {
      this.generateWireframe();
    } else if (renderStyle === RENDERSTYLE_POINTS) {
      this.primitive[RENDERSTYLE_POINTS] = {
        type: PRIMITIVE_POINTS,
        base: 0,
        count: this.vertexBuffer ? this.vertexBuffer.numVertices : 0,
        indexed: false
      };
    }
  }

  updateRenderStates() {
    if (this.primitive[RENDERSTYLE_POINTS]) {
      this.prepareRenderState(RENDERSTYLE_POINTS);
    }

    if (this.primitive[RENDERSTYLE_WIREFRAME]) {
      this.prepareRenderState(RENDERSTYLE_WIREFRAME);
    }
  }

  generateWireframe() {
    this._destroyIndexBuffer(RENDERSTYLE_WIREFRAME);

    const lines = [];
    let format;

    if (this.indexBuffer.length > 0 && this.indexBuffer[0]) {
      const offsets = [[0, 1], [1, 2], [2, 0]];
      const base = this.primitive[RENDERSTYLE_SOLID].base;
      const count = this.primitive[RENDERSTYLE_SOLID].count;
      const indexBuffer = this.indexBuffer[RENDERSTYLE_SOLID];
      const srcIndices = new typedArrayIndexFormats[indexBuffer.format](indexBuffer.storage);
      const uniqueLineIndices = {};

      for (let j = base; j < base + count; j += 3) {
        for (let k = 0; k < 3; k++) {
          const i1 = srcIndices[j + offsets[k][0]];
          const i2 = srcIndices[j + offsets[k][1]];
          const line = i1 > i2 ? i2 << 16 | i1 : i1 << 16 | i2;

          if (uniqueLineIndices[line] === undefined) {
            uniqueLineIndices[line] = 0;
            lines.push(i1, i2);
          }
        }
      }

      format = indexBuffer.format;
    } else {
      for (let i = 0; i < this.vertexBuffer.numVertices; i += 3) {
        lines.push(i, i + 1, i + 1, i + 2, i + 2, i);
      }

      format = lines.length > 65535 ? INDEXFORMAT_UINT32 : INDEXFORMAT_UINT16;
    }

    const wireBuffer = new IndexBuffer(this.vertexBuffer.device, format, lines.length);
    const dstIndices = new typedArrayIndexFormats[wireBuffer.format](wireBuffer.storage);
    dstIndices.set(lines);
    wireBuffer.unlock();
    this.primitive[RENDERSTYLE_WIREFRAME] = {
      type: PRIMITIVE_LINES,
      base: 0,
      count: lines.length,
      indexed: true
    };
    this.indexBuffer[RENDERSTYLE_WIREFRAME] = wireBuffer;
  }

}

const primitiveUv1Padding = 4.0 / 64;
const primitiveUv1PaddingScale = 1.0 - primitiveUv1Padding * 2;
const shapePrimitives = [];

function calculateNormals(positions, indices) {
  const triangleCount = indices.length / 3;
  const vertexCount = positions.length / 3;
  const p1 = new Vec3();
  const p2 = new Vec3();
  const p3 = new Vec3();
  const p1p2 = new Vec3();
  const p1p3 = new Vec3();
  const faceNormal = new Vec3();
  const normals = [];

  for (let i = 0; i < positions.length; i++) {
    normals[i] = 0;
  }

  for (let i = 0; i < triangleCount; i++) {
    const i1 = indices[i * 3];
    const i2 = indices[i * 3 + 1];
    const i3 = indices[i * 3 + 2];
    p1.set(positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);
    p2.set(positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);
    p3.set(positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);
    p1p2.sub2(p2, p1);
    p1p3.sub2(p3, p1);
    faceNormal.cross(p1p2, p1p3).normalize();
    normals[i1 * 3] += faceNormal.x;
    normals[i1 * 3 + 1] += faceNormal.y;
    normals[i1 * 3 + 2] += faceNormal.z;
    normals[i2 * 3] += faceNormal.x;
    normals[i2 * 3 + 1] += faceNormal.y;
    normals[i2 * 3 + 2] += faceNormal.z;
    normals[i3 * 3] += faceNormal.x;
    normals[i3 * 3 + 1] += faceNormal.y;
    normals[i3 * 3 + 2] += faceNormal.z;
  }

  for (let i = 0; i < vertexCount; i++) {
    const nx = normals[i * 3];
    const ny = normals[i * 3 + 1];
    const nz = normals[i * 3 + 2];
    const invLen = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz);
    normals[i * 3] *= invLen;
    normals[i * 3 + 1] *= invLen;
    normals[i * 3 + 2] *= invLen;
  }

  return normals;
}

function calculateTangents(positions, normals, uvs, indices) {
  const triangleCount = indices.length / 3;
  const vertexCount = positions.length / 3;
  const v1 = new Vec3();
  const v2 = new Vec3();
  const v3 = new Vec3();
  const w1 = new Vec2();
  const w2 = new Vec2();
  const w3 = new Vec2();
  const sdir = new Vec3();
  const tdir = new Vec3();
  const tan1 = new Float32Array(vertexCount * 3);
  const tan2 = new Float32Array(vertexCount * 3);
  const tangents = [];

  for (let i = 0; i < triangleCount; i++) {
    const i1 = indices[i * 3];
    const i2 = indices[i * 3 + 1];
    const i3 = indices[i * 3 + 2];
    v1.set(positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);
    v2.set(positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);
    v3.set(positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);
    w1.set(uvs[i1 * 2], uvs[i1 * 2 + 1]);
    w2.set(uvs[i2 * 2], uvs[i2 * 2 + 1]);
    w3.set(uvs[i3 * 2], uvs[i3 * 2 + 1]);
    const x1 = v2.x - v1.x;
    const x2 = v3.x - v1.x;
    const y1 = v2.y - v1.y;
    const y2 = v3.y - v1.y;
    const z1 = v2.z - v1.z;
    const z2 = v3.z - v1.z;
    const s1 = w2.x - w1.x;
    const s2 = w3.x - w1.x;

    const _t = w2.y - w1.y;

    const _t2 = w3.y - w1.y;

    const area = s1 * _t2 - s2 * _t;

    if (area === 0) {
      sdir.set(0, 1, 0);
      tdir.set(1, 0, 0);
    } else {
      const r = 1 / area;
      sdir.set((_t2 * x1 - _t * x2) * r, (_t2 * y1 - _t * y2) * r, (_t2 * z1 - _t * z2) * r);
      tdir.set((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
    }

    tan1[i1 * 3 + 0] += sdir.x;
    tan1[i1 * 3 + 1] += sdir.y;
    tan1[i1 * 3 + 2] += sdir.z;
    tan1[i2 * 3 + 0] += sdir.x;
    tan1[i2 * 3 + 1] += sdir.y;
    tan1[i2 * 3 + 2] += sdir.z;
    tan1[i3 * 3 + 0] += sdir.x;
    tan1[i3 * 3 + 1] += sdir.y;
    tan1[i3 * 3 + 2] += sdir.z;
    tan2[i1 * 3 + 0] += tdir.x;
    tan2[i1 * 3 + 1] += tdir.y;
    tan2[i1 * 3 + 2] += tdir.z;
    tan2[i2 * 3 + 0] += tdir.x;
    tan2[i2 * 3 + 1] += tdir.y;
    tan2[i2 * 3 + 2] += tdir.z;
    tan2[i3 * 3 + 0] += tdir.x;
    tan2[i3 * 3 + 1] += tdir.y;
    tan2[i3 * 3 + 2] += tdir.z;
  }

  const t1 = new Vec3();
  const t2 = new Vec3();
  const n = new Vec3();
  const temp = new Vec3();

  for (let i = 0; i < vertexCount; i++) {
    n.set(normals[i * 3], normals[i * 3 + 1], normals[i * 3 + 2]);
    t1.set(tan1[i * 3], tan1[i * 3 + 1], tan1[i * 3 + 2]);
    t2.set(tan2[i * 3], tan2[i * 3 + 1], tan2[i * 3 + 2]);
    const ndott = n.dot(t1);
    temp.copy(n).mulScalar(ndott);
    temp.sub2(t1, temp).normalize();
    tangents[i * 4] = temp.x;
    tangents[i * 4 + 1] = temp.y;
    tangents[i * 4 + 2] = temp.z;
    temp.cross(n, t1);
    tangents[i * 4 + 3] = temp.dot(t2) < 0.0 ? -1.0 : 1.0;
  }

  return tangents;
}

function createMesh$1(device, positions, opts) {
  const mesh = new Mesh(device);
  mesh.setPositions(positions);

  if (opts) {
    if (opts.normals) {
      mesh.setNormals(opts.normals);
    }

    if (opts.tangents) {
      mesh.setVertexStream(SEMANTIC_TANGENT, opts.tangents, 4);
    }

    if (opts.colors) {
      mesh.setColors32(opts.colors);
    }

    if (opts.uvs) {
      mesh.setUvs(0, opts.uvs);
    }

    if (opts.uvs1) {
      mesh.setUvs(1, opts.uvs1);
    }

    if (opts.blendIndices) {
      mesh.setVertexStream(SEMANTIC_BLENDINDICES, opts.blendIndices, 4, opts.blendIndices.length / 4, TYPE_UINT8);
    }

    if (opts.blendWeights) {
      mesh.setVertexStream(SEMANTIC_BLENDWEIGHT, opts.blendWeights, 4);
    }

    if (opts.indices) {
      mesh.setIndices(opts.indices);
    }
  }

  mesh.update();
  return mesh;
}

function createTorus(device, opts) {
  const rc = opts && opts.tubeRadius !== undefined ? opts.tubeRadius : 0.2;
  const rt = opts && opts.ringRadius !== undefined ? opts.ringRadius : 0.3;
  const segments = opts && opts.segments !== undefined ? opts.segments : 30;
  const sides = opts && opts.sides !== undefined ? opts.sides : 20;
  const calcTangents = opts && opts.calculateTangents !== undefined ? opts.calculateTangents : false;
  const positions = [];
  const normals = [];
  const uvs = [];
  const indices = [];

  for (let i = 0; i <= sides; i++) {
    for (let j = 0; j <= segments; j++) {
      const x = Math.cos(2 * Math.PI * j / segments) * (rt + rc * Math.cos(2 * Math.PI * i / sides));
      const y = Math.sin(2 * Math.PI * i / sides) * rc;
      const z = Math.sin(2 * Math.PI * j / segments) * (rt + rc * Math.cos(2 * Math.PI * i / sides));
      const nx = Math.cos(2 * Math.PI * j / segments) * Math.cos(2 * Math.PI * i / sides);
      const ny = Math.sin(2 * Math.PI * i / sides);
      const nz = Math.sin(2 * Math.PI * j / segments) * Math.cos(2 * Math.PI * i / sides);
      const u = i / sides;
      const v = 1 - j / segments;
      positions.push(x, y, z);
      normals.push(nx, ny, nz);
      uvs.push(u, 1.0 - v);

      if (i < sides && j < segments) {
        const first = i * (segments + 1) + j;
        const second = (i + 1) * (segments + 1) + j;
        const third = i * (segments + 1) + (j + 1);
        const fourth = (i + 1) * (segments + 1) + (j + 1);
        indices.push(first, second, third);
        indices.push(second, fourth, third);
      }
    }
  }

  const options = {
    normals: normals,
    uvs: uvs,
    uvs1: uvs,
    indices: indices
  };

  if (calcTangents) {
    options.tangents = calculateTangents(positions, normals, uvs, indices);
  }

  return createMesh$1(device, positions, options);
}

function _createConeData(baseRadius, peakRadius, height, heightSegments, capSegments, roundedCaps) {
  const pos = new Vec3();
  const bottomToTop = new Vec3();
  const norm = new Vec3();
  const top = new Vec3();
  const bottom = new Vec3();
  const tangent = new Vec3();
  const positions = [];
  const normals = [];
  const uvs = [];
  const uvs1 = [];
  const indices = [];
  let offset;

  if (height > 0) {
    for (let i = 0; i <= heightSegments; i++) {
      for (let j = 0; j <= capSegments; j++) {
        const theta = j / capSegments * 2 * Math.PI - Math.PI;
        const sinTheta = Math.sin(theta);
        const cosTheta = Math.cos(theta);
        bottom.set(sinTheta * baseRadius, -height / 2, cosTheta * baseRadius);
        top.set(sinTheta * peakRadius, height / 2, cosTheta * peakRadius);
        pos.lerp(bottom, top, i / heightSegments);
        bottomToTop.sub2(top, bottom).normalize();
        tangent.set(cosTheta, 0, -sinTheta);
        norm.cross(tangent, bottomToTop).normalize();
        positions.push(pos.x, pos.y, pos.z);
        normals.push(norm.x, norm.y, norm.z);
        let u = j / capSegments;
        let v = i / heightSegments;
        uvs.push(u, 1 - v);
        const _v = v;
        v = u;
        u = _v;
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u /= 3;
        uvs1.push(u, 1 - v);

        if (i < heightSegments && j < capSegments) {
          const first = i * (capSegments + 1) + j;
          const second = i * (capSegments + 1) + (j + 1);
          const third = (i + 1) * (capSegments + 1) + j;
          const fourth = (i + 1) * (capSegments + 1) + (j + 1);
          indices.push(first, second, third);
          indices.push(second, fourth, third);
        }
      }
    }
  }

  if (roundedCaps) {
    const latitudeBands = Math.floor(capSegments / 2);
    const longitudeBands = capSegments;
    const capOffset = height / 2;

    for (let lat = 0; lat <= latitudeBands; lat++) {
      const theta = lat * Math.PI * 0.5 / latitudeBands;
      const sinTheta = Math.sin(theta);
      const cosTheta = Math.cos(theta);

      for (let lon = 0; lon <= longitudeBands; lon++) {
        const phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2;
        const sinPhi = Math.sin(phi);
        const cosPhi = Math.cos(phi);
        const x = cosPhi * sinTheta;
        const y = cosTheta;
        const z = sinPhi * sinTheta;
        let u = 1 - lon / longitudeBands;
        let v = 1 - lat / latitudeBands;
        positions.push(x * peakRadius, y * peakRadius + capOffset, z * peakRadius);
        normals.push(x, y, z);
        uvs.push(u, 1 - v);
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u /= 3;
        v /= 3;
        u += 1.0 / 3;
        uvs1.push(u, 1 - v);
      }
    }

    offset = (heightSegments + 1) * (capSegments + 1);

    for (let lat = 0; lat < latitudeBands; ++lat) {
      for (let lon = 0; lon < longitudeBands; ++lon) {
        const first = lat * (longitudeBands + 1) + lon;
        const second = first + longitudeBands + 1;
        indices.push(offset + first + 1, offset + second, offset + first);
        indices.push(offset + first + 1, offset + second + 1, offset + second);
      }
    }

    for (let lat = 0; lat <= latitudeBands; lat++) {
      const theta = Math.PI * 0.5 + lat * Math.PI * 0.5 / latitudeBands;
      const sinTheta = Math.sin(theta);
      const cosTheta = Math.cos(theta);

      for (let lon = 0; lon <= longitudeBands; lon++) {
        const phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2;
        const sinPhi = Math.sin(phi);
        const cosPhi = Math.cos(phi);
        const x = cosPhi * sinTheta;
        const y = cosTheta;
        const z = sinPhi * sinTheta;
        let u = 1 - lon / longitudeBands;
        let v = 1 - lat / latitudeBands;
        positions.push(x * peakRadius, y * peakRadius - capOffset, z * peakRadius);
        normals.push(x, y, z);
        uvs.push(u, 1 - v);
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u /= 3;
        v /= 3;
        u += 2.0 / 3;
        uvs1.push(u, 1 - v);
      }
    }

    offset = (heightSegments + 1) * (capSegments + 1) + (longitudeBands + 1) * (latitudeBands + 1);

    for (let lat = 0; lat < latitudeBands; ++lat) {
      for (let lon = 0; lon < longitudeBands; ++lon) {
        const first = lat * (longitudeBands + 1) + lon;
        const second = first + longitudeBands + 1;
        indices.push(offset + first + 1, offset + second, offset + first);
        indices.push(offset + first + 1, offset + second + 1, offset + second);
      }
    }
  } else {
    offset = (heightSegments + 1) * (capSegments + 1);

    if (baseRadius > 0) {
      for (let i = 0; i < capSegments; i++) {
        const theta = i / capSegments * 2 * Math.PI;
        const x = Math.sin(theta);
        const y = -height / 2;
        const z = Math.cos(theta);
        let u = 1 - (x + 1) / 2;
        let v = (z + 1) / 2;
        positions.push(x * baseRadius, y, z * baseRadius);
        normals.push(0, -1, 0);
        uvs.push(u, 1 - v);
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u /= 3;
        v /= 3;
        u += 1 / 3;
        uvs1.push(u, 1 - v);

        if (i > 1) {
          indices.push(offset, offset + i, offset + i - 1);
        }
      }
    }

    offset += capSegments;

    if (peakRadius > 0) {
      for (let i = 0; i < capSegments; i++) {
        const theta = i / capSegments * 2 * Math.PI;
        const x = Math.sin(theta);
        const y = height / 2;
        const z = Math.cos(theta);
        let u = 1 - (x + 1) / 2;
        let v = (z + 1) / 2;
        positions.push(x * peakRadius, y, z * peakRadius);
        normals.push(0, 1, 0);
        uvs.push(u, 1 - v);
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u /= 3;
        v /= 3;
        u += 2 / 3;
        uvs1.push(u, 1 - v);

        if (i > 1) {
          indices.push(offset, offset + i - 1, offset + i);
        }
      }
    }
  }

  return {
    positions: positions,
    normals: normals,
    uvs: uvs,
    uvs1: uvs1,
    indices: indices
  };
}

function createCylinder(device, opts) {
  let radius = opts && (opts.radius || opts.baseRadius);
  radius = radius !== undefined ? radius : 0.5;
  const height = opts && opts.height !== undefined ? opts.height : 1.0;
  const heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 5;
  const capSegments = opts && opts.capSegments !== undefined ? opts.capSegments : 20;
  const calcTangents = opts && opts.calculateTangents !== undefined ? opts.calculateTangents : false;

  const options = _createConeData(radius, radius, height, heightSegments, capSegments, false);

  if (calcTangents) {
    options.tangents = calculateTangents(options.positions, options.normals, options.uvs, options.indices);
  }

  return createMesh$1(device, options.positions, options);
}

function createCapsule(device, opts) {
  const radius = opts && opts.radius !== undefined ? opts.radius : 0.3;
  const height = opts && opts.height !== undefined ? opts.height : 1.0;
  const heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 1;
  const sides = opts && opts.sides !== undefined ? opts.sides : 20;
  const calcTangents = opts && opts.calculateTangents !== undefined ? opts.calculateTangents : false;

  const options = _createConeData(radius, radius, height - 2 * radius, heightSegments, sides, true);

  if (calcTangents) {
    options.tangents = calculateTangents(options.positions, options.normals, options.uvs, options.indices);
  }

  return createMesh$1(device, options.positions, options);
}

function createCone(device, opts) {
  const baseRadius = opts && opts.baseRadius !== undefined ? opts.baseRadius : 0.5;
  const peakRadius = opts && opts.peakRadius !== undefined ? opts.peakRadius : 0.0;
  const height = opts && opts.height !== undefined ? opts.height : 1.0;
  const heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 5;
  const capSegments = opts && opts.capSegments !== undefined ? opts.capSegments : 18;
  const calcTangents = opts && opts.calculateTangents !== undefined ? opts.calculateTangents : false;

  const options = _createConeData(baseRadius, peakRadius, height, heightSegments, capSegments, false);

  if (calcTangents) {
    options.tangents = calculateTangents(options.positions, options.normals, options.uvs, options.indices);
  }

  return createMesh$1(device, options.positions, options);
}

function createSphere(device, opts) {
  const radius = opts && opts.radius !== undefined ? opts.radius : 0.5;
  const latitudeBands = opts && opts.latitudeBands !== undefined ? opts.latitudeBands : 16;
  const longitudeBands = opts && opts.longitudeBands !== undefined ? opts.longitudeBands : 16;
  const calcTangents = opts && opts.calculateTangents !== undefined ? opts.calculateTangents : false;
  const positions = [];
  const normals = [];
  const uvs = [];
  const indices = [];

  for (let lat = 0; lat <= latitudeBands; lat++) {
    const theta = lat * Math.PI / latitudeBands;
    const sinTheta = Math.sin(theta);
    const cosTheta = Math.cos(theta);

    for (let lon = 0; lon <= longitudeBands; lon++) {
      const phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2;
      const sinPhi = Math.sin(phi);
      const cosPhi = Math.cos(phi);
      const x = cosPhi * sinTheta;
      const y = cosTheta;
      const z = sinPhi * sinTheta;
      const u = 1 - lon / longitudeBands;
      const v = 1 - lat / latitudeBands;
      positions.push(x * radius, y * radius, z * radius);
      normals.push(x, y, z);
      uvs.push(u, 1 - v);
    }
  }

  for (let lat = 0; lat < latitudeBands; ++lat) {
    for (let lon = 0; lon < longitudeBands; ++lon) {
      const first = lat * (longitudeBands + 1) + lon;
      const second = first + longitudeBands + 1;
      indices.push(first + 1, second, first);
      indices.push(first + 1, second + 1, second);
    }
  }

  const options = {
    normals: normals,
    uvs: uvs,
    uvs1: uvs,
    indices: indices
  };

  if (calcTangents) {
    options.tangents = calculateTangents(positions, normals, uvs, indices);
  }

  return createMesh$1(device, positions, options);
}

function createPlane(device, opts) {
  const he = opts && opts.halfExtents !== undefined ? opts.halfExtents : new Vec2(0.5, 0.5);
  const ws = opts && opts.widthSegments !== undefined ? opts.widthSegments : 5;
  const ls = opts && opts.lengthSegments !== undefined ? opts.lengthSegments : 5;
  const calcTangents = opts && opts.calculateTangents !== undefined ? opts.calculateTangents : false;
  const positions = [];
  const normals = [];
  const uvs = [];
  const indices = [];
  let vcounter = 0;

  for (let i = 0; i <= ws; i++) {
    for (let j = 0; j <= ls; j++) {
      const x = -he.x + 2 * he.x * i / ws;
      const y = 0.0;
      const z = -(-he.y + 2 * he.y * j / ls);
      const u = i / ws;
      const v = j / ls;
      positions.push(x, y, z);
      normals.push(0, 1, 0);
      uvs.push(u, 1 - v);

      if (i < ws && j < ls) {
        indices.push(vcounter + ls + 1, vcounter + 1, vcounter);
        indices.push(vcounter + ls + 1, vcounter + ls + 2, vcounter + 1);
      }

      vcounter++;
    }
  }

  const options = {
    normals: normals,
    uvs: uvs,
    uvs1: uvs,
    indices: indices
  };

  if (calcTangents) {
    options.tangents = calculateTangents(positions, normals, uvs, indices);
  }

  return createMesh$1(device, positions, options);
}

function createBox(device, opts) {
  const he = opts && opts.halfExtents !== undefined ? opts.halfExtents : new Vec3(0.5, 0.5, 0.5);
  const ws = opts && opts.widthSegments !== undefined ? opts.widthSegments : 1;
  const ls = opts && opts.lengthSegments !== undefined ? opts.lengthSegments : 1;
  const hs = opts && opts.heightSegments !== undefined ? opts.heightSegments : 1;
  const calcTangents = opts && opts.calculateTangents !== undefined ? opts.calculateTangents : false;
  const corners = [new Vec3(-he.x, -he.y, he.z), new Vec3(he.x, -he.y, he.z), new Vec3(he.x, he.y, he.z), new Vec3(-he.x, he.y, he.z), new Vec3(he.x, -he.y, -he.z), new Vec3(-he.x, -he.y, -he.z), new Vec3(-he.x, he.y, -he.z), new Vec3(he.x, he.y, -he.z)];
  const faceAxes = [[0, 1, 3], [4, 5, 7], [3, 2, 6], [1, 0, 4], [1, 4, 2], [5, 0, 6]];
  const faceNormals = [[0, 0, 1], [0, 0, -1], [0, 1, 0], [0, -1, 0], [1, 0, 0], [-1, 0, 0]];
  const sides = {
    FRONT: 0,
    BACK: 1,
    TOP: 2,
    BOTTOM: 3,
    RIGHT: 4,
    LEFT: 5
  };
  const positions = [];
  const normals = [];
  const uvs = [];
  const uvs1 = [];
  const indices = [];
  let vcounter = 0;

  const generateFace = (side, uSegments, vSegments) => {
    const temp1 = new Vec3();
    const temp2 = new Vec3();
    const temp3 = new Vec3();
    const r = new Vec3();

    for (let i = 0; i <= uSegments; i++) {
      for (let j = 0; j <= vSegments; j++) {
        temp1.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][1]], i / uSegments);
        temp2.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][2]], j / vSegments);
        temp3.sub2(temp2, corners[faceAxes[side][0]]);
        r.add2(temp1, temp3);
        let u = i / uSegments;
        let v = j / vSegments;
        positions.push(r.x, r.y, r.z);
        normals.push(faceNormals[side][0], faceNormals[side][1], faceNormals[side][2]);
        uvs.push(u, 1 - v);
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u /= 3;
        v /= 3;
        u += side % 3 / 3;
        v += Math.floor(side / 3) / 3;
        uvs1.push(u, 1 - v);

        if (i < uSegments && j < vSegments) {
          indices.push(vcounter + vSegments + 1, vcounter + 1, vcounter);
          indices.push(vcounter + vSegments + 1, vcounter + vSegments + 2, vcounter + 1);
        }

        vcounter++;
      }
    }
  };

  generateFace(sides.FRONT, ws, hs);
  generateFace(sides.BACK, ws, hs);
  generateFace(sides.TOP, ws, ls);
  generateFace(sides.BOTTOM, ws, ls);
  generateFace(sides.RIGHT, ls, hs);
  generateFace(sides.LEFT, ls, hs);
  const options = {
    normals: normals,
    uvs: uvs,
    uvs1: uvs1,
    indices: indices
  };

  if (calcTangents) {
    options.tangents = calculateTangents(positions, normals, uvs, indices);
  }

  return createMesh$1(device, positions, options);
}

function getShapePrimitive(device, type) {
  let primData = null;

  for (let i = 0; i < shapePrimitives.length; i++) {
    if (shapePrimitives[i].type === type && shapePrimitives[i].device === device) {
      primData = shapePrimitives[i].primData;
    }
  }

  if (!primData) {
    let mesh, area;

    switch (type) {
      case 'box':
        mesh = createBox(device, {
          halfExtents: new Vec3(0.5, 0.5, 0.5)
        });
        area = {
          x: 2,
          y: 2,
          z: 2,
          uv: 2.0 / 3
        };
        break;

      case 'capsule':
        mesh = createCapsule(device, {
          radius: 0.5,
          height: 2
        });
        area = {
          x: Math.PI * 2,
          y: Math.PI,
          z: Math.PI * 2,
          uv: 1.0 / 3 + 1.0 / 3 / 3 * 2
        };
        break;

      case 'cone':
        mesh = createCone(device, {
          baseRadius: 0.5,
          peakRadius: 0,
          height: 1
        });
        area = {
          x: 2.54,
          y: 2.54,
          z: 2.54,
          uv: 1.0 / 3 + 1.0 / 3 / 3
        };
        break;

      case 'cylinder':
        mesh = createCylinder(device, {
          radius: 0.5,
          height: 1
        });
        area = {
          x: Math.PI,
          y: 0.79 * 2,
          z: Math.PI,
          uv: 1.0 / 3 + 1.0 / 3 / 3 * 2
        };
        break;

      case 'plane':
        mesh = createPlane(device, {
          halfExtents: new Vec2(0.5, 0.5),
          widthSegments: 1,
          lengthSegments: 1
        });
        area = {
          x: 0,
          y: 1,
          z: 0,
          uv: 1
        };
        break;

      case 'sphere':
        mesh = createSphere(device, {
          radius: 0.5
        });
        area = {
          x: Math.PI,
          y: Math.PI,
          z: Math.PI,
          uv: 1
        };
        break;

      case 'torus':
        mesh = createTorus(device, {
          tubeRadius: 0.2,
          ringRadius: 0.3
        });
        area = {
          x: Math.PI * 0.5 * 0.5 - Math.PI * 0.1 * 0.1,
          y: 0.4,
          z: 0.4,
          uv: 1
        };
        break;

      default:
        throw new Error('Invalid primitive type: ' + type);
    }

    mesh.incRefCount();
    primData = {
      mesh: mesh,
      area: area
    };
    shapePrimitives.push({
      type: type,
      device: device,
      primData: primData
    });
  }

  return primData;
}

const basic = {
  generateKey: function (options) {
    let key = 'basic';
    if (options.fog) key += '_fog';
    if (options.alphaTest) key += '_atst';
    if (options.vertexColors) key += '_vcol';
    if (options.diffuseMap) key += '_diff';
    if (options.skin) key += '_skin';
    if (options.screenSpace) key += '_ss';
    if (options.useInstancing) key += '_inst';
    if (options.useMorphPosition) key += '_morphp';
    if (options.useMorphNormal) key += '_morphn';
    if (options.useMorphTextureBased) key += '_morpht';
    key += '_' + options.pass;
    return key;
  },
  createShaderDefinition: function (device, options) {
    const attributes = {
      vertex_position: SEMANTIC_POSITION
    };

    if (options.skin) {
      attributes.vertex_boneWeights = SEMANTIC_BLENDWEIGHT;
      attributes.vertex_boneIndices = SEMANTIC_BLENDINDICES;
    }

    if (options.vertexColors) {
      attributes.vertex_color = SEMANTIC_COLOR;
    }

    if (options.diffuseMap) {
      attributes.vertex_texCoord0 = SEMANTIC_TEXCOORD0;
    }

    let code = vertexIntro(device, 'BasicShader', options.pass);
    code += shaderChunks.transformDeclVS;

    if (options.skin) {
      code += skinCode(device);
      code += shaderChunks.transformSkinnedVS;
    } else {
      code += shaderChunks.transformVS;
    }

    if (options.vertexColors) {
      code += 'attribute vec4 vertex_color;\n';
      code += 'varying vec4 vColor;\n';
    }

    if (options.diffuseMap) {
      code += 'attribute vec2 vertex_texCoord0;\n';
      code += 'varying vec2 vUv0;\n';
    }

    if (options.pass === SHADER_DEPTH) {
      code += 'varying float vDepth;\n';
      code += '#ifndef VIEWMATRIX\n';
      code += '#define VIEWMATRIX\n';
      code += 'uniform mat4 matrix_view;\n';
      code += '#endif\n';
      code += '#ifndef CAMERAPLANES\n';
      code += '#define CAMERAPLANES\n';
      code += 'uniform vec4 camera_params;\n\n';
      code += '#endif\n';
    }

    code += begin();
    code += "   gl_Position = getPosition();\n";

    if (options.pass === SHADER_DEPTH) {
      code += "    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z * camera_params.x;\n";
    }

    if (options.vertexColors) {
      code += '    vColor = vertex_color;\n';
    }

    if (options.diffuseMap) {
      code += '    vUv0 = vertex_texCoord0;\n';
    }

    code += end();
    const vshader = code;
    code = fragmentIntro(device, 'BasicMaterial', options.pass);

    if (options.vertexColors) {
      code += 'varying vec4 vColor;\n';
    } else {
      code += 'uniform vec4 uColor;\n';
    }

    if (options.diffuseMap) {
      code += 'varying vec2 vUv0;\n';
      code += 'uniform sampler2D texture_diffuseMap;\n';
    }

    if (options.fog) {
      code += fogCode(options.fog);
    }

    if (options.alphaTest) {
      code += shaderChunks.alphaTestPS;
    }

    if (options.pass === SHADER_DEPTH) {
      code += 'varying float vDepth;\n';
      code += shaderChunks.packDepthPS;
    }

    code += begin();

    if (options.vertexColors) {
      code += '    gl_FragColor = vColor;\n';
    } else {
      code += '    gl_FragColor = uColor;\n';
    }

    if (options.diffuseMap) {
      code += '    gl_FragColor *= texture2D(texture_diffuseMap, vUv0);\n';
    }

    if (options.alphaTest) {
      code += "   alphaTest(gl_FragColor.a);\n";
    }

    if (options.pass !== SHADER_PICK) {
      if (options.pass === SHADER_DEPTH) {
        code += "    gl_FragColor = packFloat(vDepth);\n";
      } else {
        if (options.fog) {
          code += "   glFragColor.rgb = addFog(gl_FragColor.rgb);\n";
        }
      }
    }

    code += end();
    const fshader = code;
    return {
      attributes: attributes,
      vshader: vshader,
      fshader: fshader
    };
  }
};

class BasicMaterial extends Material {
  constructor() {
    super();
    this.color = new Color(1, 1, 1, 1);
    this.colorUniform = new Float32Array(4);
    this.colorMap = null;
    this.vertexColors = false;
  }

  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.colorMap = source.colorMap;
    this.vertexColors = source.vertexColors;
    return this;
  }

  updateUniforms(device, scene) {
    this.clearParameters();
    this.colorUniform[0] = this.color.r;
    this.colorUniform[1] = this.color.g;
    this.colorUniform[2] = this.color.b;
    this.colorUniform[3] = this.color.a;
    this.setParameter('uColor', this.colorUniform);

    if (this.colorMap) {
      this.setParameter('texture_diffuseMap', this.colorMap);
    }
  }

  getShaderVariant(device, scene, objDefs, staticLightList, pass, sortedLights, viewUniformFormat, viewBindGroupFormat) {
    if (this.updateShader) {
      this.updateShader(device, scene, objDefs, staticLightList, pass, sortedLights);
      return this.shader;
    }

    const options = {
      skin: objDefs && (objDefs & SHADERDEF_SKIN) !== 0,
      screenSpace: objDefs && (objDefs & SHADERDEF_SCREENSPACE) !== 0,
      useInstancing: objDefs && (objDefs & SHADERDEF_INSTANCING) !== 0,
      useMorphPosition: objDefs && (objDefs & SHADERDEF_MORPH_POSITION) !== 0,
      useMorphNormal: objDefs && (objDefs & SHADERDEF_MORPH_NORMAL) !== 0,
      useMorphTextureBased: objDefs && (objDefs & SHADERDEF_MORPH_TEXTURE_BASED) !== 0,
      alphaTest: this.alphaTest > 0,
      vertexColors: this.vertexColors,
      diffuseMap: !!this.colorMap,
      pass: pass
    };
    const processingOptions = new ShaderProcessorOptions(viewUniformFormat, viewBindGroupFormat);
    const library = device.getProgramLibrary();
    library.register('basic', basic);
    return library.getProgram('basic', options, processingOptions);
  }

}

class Batch {
  constructor(meshInstances, dynamic, batchGroupId) {
    this.origMeshInstances = meshInstances;
    this._aabb = new BoundingBox();
    this.meshInstance = null;
    this.dynamic = dynamic;
    this.batchGroupId = batchGroupId;
  }

  destroy(scene, layers) {
    if (this.meshInstance) {
      this.removeFromLayers(scene, layers);
      this.meshInstance.destroy();
    }
  }

  addToLayers(scene, layers) {
    for (let i = 0; i < layers.length; i++) {
      const layer = scene.layers.getLayerById(layers[i]);

      if (layer) {
        layer.addMeshInstances([this.meshInstance]);
      }
    }
  }

  removeFromLayers(scene, layers) {
    for (let i = 0; i < layers.length; i++) {
      const layer = scene.layers.getLayerById(layers[i]);

      if (layer) {
        layer.removeMeshInstances([this.meshInstance]);
      }
    }
  }

  updateBoundingBox() {
    this._aabb.copy(this.origMeshInstances[0].aabb);

    for (let i = 1; i < this.origMeshInstances.length; i++) {
      this._aabb.add(this.origMeshInstances[i].aabb);
    }

    this.meshInstance.aabb = this._aabb;
    this.meshInstance._aabbVer = 0;
  }

}

class BatchGroup {
  constructor(id, name, dynamic, maxAabbSize, layers = [LAYERID_WORLD]) {
    this.dynamic = dynamic;
    this.maxAabbSize = maxAabbSize;
    this.id = id;
    this.name = name;
    this.layers = layers;
    this._ui = false;
    this._sprite = false;
    this._obj = {
      model: [],
      element: [],
      sprite: [],
      render: []
    };
  }

}

BatchGroup.MODEL = 'model';
BatchGroup.ELEMENT = 'element';
BatchGroup.SPRITE = 'sprite';
BatchGroup.RENDER = 'render';

const _invMatrix = new Mat4();

class SkinInstance {
  constructor(skin) {
    this.bones = void 0;
    this._dirty = true;
    this._rootBone = null;
    this._skinUpdateIndex = -1;
    this._updateBeforeCull = true;

    if (skin) {
      this.initSkin(skin);
    }
  }

  set rootBone(rootBone) {
    this._rootBone = rootBone;
  }

  get rootBone() {
    return this._rootBone;
  }

  init(device, numBones) {
    if (device.supportsBoneTextures) {
      const numPixels = numBones * 3;
      let width = Math.ceil(Math.sqrt(numPixels));
      width = math$1.roundUp(width, 3);
      const height = Math.ceil(numPixels / width);
      this.boneTexture = new Texture(device, {
        width: width,
        height: height,
        format: PIXELFORMAT_RGBA32F,
        mipmaps: false,
        minFilter: FILTER_NEAREST,
        magFilter: FILTER_NEAREST,
        name: 'skin'
      });
      this.matrixPalette = this.boneTexture.lock();
    } else {
      this.matrixPalette = new Float32Array(numBones * 12);
    }
  }

  destroy() {
    if (this.boneTexture) {
      this.boneTexture.destroy();
      this.boneTexture = null;
    }
  }

  resolve(rootBone, entity) {
    this.rootBone = rootBone;
    const skin = this.skin;
    const bones = [];

    for (let j = 0; j < skin.boneNames.length; j++) {
      const boneName = skin.boneNames[j];
      let bone = rootBone.findByName(boneName);

      if (!bone) {
        bone = entity;
      }

      bones.push(bone);
    }

    this.bones = bones;
  }

  initSkin(skin) {
    this.skin = skin;
    this.bones = [];
    const numBones = skin.inverseBindPose.length;
    this.init(skin.device, numBones);
    this.matrices = [];

    for (let i = 0; i < numBones; i++) {
      this.matrices[i] = new Mat4();
    }
  }

  uploadBones(device) {
    if (device.supportsBoneTextures) {
      this.boneTexture.lock();
      this.boneTexture.unlock();
    }
  }

  _updateMatrices(rootNode, skinUpdateIndex) {
    if (this._skinUpdateIndex !== skinUpdateIndex) {
      this._skinUpdateIndex = skinUpdateIndex;

      _invMatrix.copy(rootNode.getWorldTransform()).invert();

      for (let i = this.bones.length - 1; i >= 0; i--) {
        this.matrices[i].mulAffine2(_invMatrix, this.bones[i].getWorldTransform());
        this.matrices[i].mulAffine2(this.matrices[i], this.skin.inverseBindPose[i]);
      }
    }
  }

  updateMatrices(rootNode, skinUpdateIndex) {
    if (this._updateBeforeCull) {
      this._updateMatrices(rootNode, skinUpdateIndex);
    }
  }

  updateMatrixPalette(rootNode, skinUpdateIndex) {
    this._updateMatrices(rootNode, skinUpdateIndex);

    const mp = this.matrixPalette;
    const count = this.bones.length;

    for (let i = 0; i < count; i++) {
      const pe = this.matrices[i].data;
      const base = i * 12;
      mp[base] = pe[0];
      mp[base + 1] = pe[4];
      mp[base + 2] = pe[8];
      mp[base + 3] = pe[12];
      mp[base + 4] = pe[1];
      mp[base + 5] = pe[5];
      mp[base + 6] = pe[9];
      mp[base + 7] = pe[13];
      mp[base + 8] = pe[2];
      mp[base + 9] = pe[6];
      mp[base + 10] = pe[10];
      mp[base + 11] = pe[14];
    }

    this.uploadBones(this.skin.device);
  }

}

class SkinBatchInstance extends SkinInstance {
  constructor(device, nodes, rootNode) {
    super();
    const numBones = nodes.length;
    this.init(device, numBones);
    this.device = device;
    this.rootNode = rootNode;
    this.bones = nodes;
  }

  updateMatrices(rootNode, skinUpdateIndex) {}

  updateMatrixPalette(rootNode, skinUpdateIndex) {
    const mp = this.matrixPalette;
    const count = this.bones.length;

    for (let i = 0; i < count; i++) {
      const pe = this.bones[i].getWorldTransform().data;
      const base = i * 12;
      mp[base] = pe[0];
      mp[base + 1] = pe[4];
      mp[base + 2] = pe[8];
      mp[base + 3] = pe[12];
      mp[base + 4] = pe[1];
      mp[base + 5] = pe[5];
      mp[base + 6] = pe[9];
      mp[base + 7] = pe[13];
      mp[base + 8] = pe[2];
      mp[base + 9] = pe[6];
      mp[base + 10] = pe[10];
      mp[base + 11] = pe[14];
    }

    this.uploadBones(this.device);
  }

}

class BindGroup {
  constructor(graphicsDevice, format, defaultUniformBuffer) {
    this.device = graphicsDevice;
    this.format = format;
    this.dirty = true;
    this.impl = graphicsDevice.createBindGroupImpl(this);
    this.textures = [];
    this.uniformBuffers = [];
    this.defaultUniformBuffer = defaultUniformBuffer;

    if (defaultUniformBuffer) {
      this.setUniformBuffer(UNIFORM_BUFFER_DEFAULT_SLOT_NAME, defaultUniformBuffer);
    }
  }

  destroy() {
    this.impl.destroy();
    this.impl = null;
    this.format = null;
    this.defaultUniformBuffer = null;
  }

  setUniformBuffer(name, uniformBuffer) {
    const index = this.format.bufferFormatsMap.get(name);

    if (this.uniformBuffers[index] !== uniformBuffer) {
      this.uniformBuffers[index] = uniformBuffer;
      this.dirty = true;
    }
  }

  setTexture(name, texture) {
    const index = this.format.textureFormatsMap.get(name);

    if (this.textures[index] !== texture) {
      this.textures[index] = texture;
      this.dirty = true;
    }
  }

  update() {
    const textureFormats = this.format.textureFormats;

    for (let i = 0; i < textureFormats.length; i++) {
      const textureFormat = textureFormats[i];
      const value = textureFormat.scopeId.value;
      this.setTexture(textureFormat.name, value);
    }

    if (this.dirty) {
      this.dirty = false;
      this.impl.update(this);
    }
  }

}

const _updateFunctions = [];

_updateFunctions[UNIFORMTYPE_FLOAT] = function (uniformBuffer, value, offset) {
  const dst = uniformBuffer.storageFloat32;
  dst[offset] = value;
};

_updateFunctions[UNIFORMTYPE_VEC2] = (uniformBuffer, value, offset) => {
  const dst = uniformBuffer.storageFloat32;
  dst[offset] = value[0];
  dst[offset + 1] = value[1];
};

_updateFunctions[UNIFORMTYPE_VEC3] = (uniformBuffer, value, offset) => {
  const dst = uniformBuffer.storageFloat32;
  dst[offset] = value[0];
  dst[offset + 1] = value[1];
  dst[offset + 2] = value[2];
};

_updateFunctions[UNIFORMTYPE_VEC4] = (uniformBuffer, value, offset) => {
  const dst = uniformBuffer.storageFloat32;
  dst[offset] = value[0];
  dst[offset + 1] = value[1];
  dst[offset + 2] = value[2];
  dst[offset + 3] = value[3];
};

_updateFunctions[UNIFORMTYPE_INT] = function (uniformBuffer, value, offset) {
  const dst = uniformBuffer.storageInt32;
  dst[offset] = value;
};

_updateFunctions[UNIFORMTYPE_IVEC2] = function (uniformBuffer, value, offset) {
  const dst = uniformBuffer.storageInt32;
  dst[offset] = value[0];
  dst[offset + 1] = value[1];
};

_updateFunctions[UNIFORMTYPE_IVEC3] = function (uniformBuffer, value, offset) {
  const dst = uniformBuffer.storageInt32;
  dst[offset] = value[0];
  dst[offset + 1] = value[1];
  dst[offset + 2] = value[2];
};

_updateFunctions[UNIFORMTYPE_IVEC4] = function (uniformBuffer, value, offset) {
  const dst = uniformBuffer.storageInt32;
  dst[offset] = value[0];
  dst[offset + 1] = value[1];
  dst[offset + 2] = value[2];
  dst[offset + 3] = value[3];
};

_updateFunctions[UNIFORMTYPE_MAT2] = (uniformBuffer, value, offset) => {
  const dst = uniformBuffer.storageFloat32;
  dst[offset] = value[0];
  dst[offset + 1] = value[1];
  dst[offset + 4] = value[2];
  dst[offset + 5] = value[3];
  dst[offset + 8] = value[4];
  dst[offset + 9] = value[5];
};

_updateFunctions[UNIFORMTYPE_MAT3] = (uniformBuffer, value, offset) => {
  const dst = uniformBuffer.storageFloat32;
  dst[offset] = value[0];
  dst[offset + 1] = value[1];
  dst[offset + 2] = value[2];
  dst[offset + 4] = value[3];
  dst[offset + 5] = value[4];
  dst[offset + 6] = value[5];
  dst[offset + 8] = value[6];
  dst[offset + 9] = value[7];
  dst[offset + 10] = value[8];
};

class UniformBuffer {
  constructor(graphicsDevice, format) {
    this.device = graphicsDevice;
    this.format = format;
    this.impl = graphicsDevice.createUniformBufferImpl(this);
    this.storage = new ArrayBuffer(format.byteSize);
    this.storageFloat32 = new Float32Array(this.storage);
    this.storageInt32 = new Int32Array(this.storage);
    graphicsDevice._vram.ub += this.format.byteSize;
  }

  destroy() {
    const device = this.device;
    this.impl.destroy(device);
    device._vram.ub -= this.format.byteSize;
  }

  loseContext() {
    this.impl.loseContext();
  }

  setUniform(uniformFormat) {
    const offset = uniformFormat.offset;
    const value = uniformFormat.scopeId.value;

    if (value !== null && value !== undefined) {
      const updateFunction = _updateFunctions[uniformFormat.type];

      if (updateFunction) {
        updateFunction(this, value, offset);
      } else {
        this.storageFloat32.set(value, offset);
      }
    }
  }

  set(name) {
    const uniformFormat = this.format.map.get(name);

    if (uniformFormat) {
      this.setUniform(uniformFormat);
    }
  }

  update() {
    const uniforms = this.format.uniforms;

    for (let i = 0; i < uniforms.length; i++) {
      this.setUniform(uniforms[i]);
    }

    this.impl.unlock(this);
  }

}

class RefCountedCache {
  constructor() {
    this.cache = new Map();
  }

  destroy() {
    this.cache.forEach((refCount, object) => {
      object.destroy();
    });
    this.cache.clear();
  }

  incRef(object) {
    const refCount = (this.cache.get(object) || 0) + 1;
    this.cache.set(object, refCount);
  }

  decRef(object) {
    if (object) {
      let refCount = this.cache.get(object);

      if (refCount) {
        refCount--;

        if (refCount === 0) {
          this.cache.delete(object);
          object.destroy();
        } else {
          this.cache.set(object, refCount);
        }
      }
    }
  }

}

class LightmapCache {
  static incRef(texture) {
    this.cache.incRef(texture);
  }

  static decRef(texture) {
    this.cache.decRef(texture);
  }

  static destroy() {
    this.cache.destroy();
  }

}

LightmapCache.cache = new RefCountedCache();

const _tmpAabb = new BoundingBox();

const _tempBoneAabb = new BoundingBox();

const _tempSphere = new BoundingSphere();

const _meshSet = new Set();

class InstancingData {
  constructor(numObjects) {
    this.vertexBuffer = null;
    this.count = numObjects;
  }

}

class Command {
  constructor(layer, blendType, command) {
    this._key = [];
    this._key[SORTKEY_FORWARD] = getKey(layer, blendType, true, 0);
    this.command = command;
  }

  set key(val) {
    this._key[SORTKEY_FORWARD] = val;
  }

  get key() {
    return this._key[SORTKEY_FORWARD];
  }

}

class MeshInstance {
  constructor(mesh, material, node = null) {
    this._material = void 0;
    this._shader = [];
    this._bindGroups = [];

    if (mesh instanceof GraphNode) {
      const temp = mesh;
      mesh = material;
      material = node;
      node = temp;
    }

    this._key = [0, 0];
    this.isStatic = false;
    this._staticLightList = null;
    this._staticSource = null;
    this.node = node;
    this._mesh = mesh;
    mesh.incRefCount();
    this.material = material;
    this._shaderDefs = MASK_AFFECT_DYNAMIC << 16;
    this._shaderDefs |= mesh.vertexBuffer.format.hasUv0 ? SHADERDEF_UV0 : 0;
    this._shaderDefs |= mesh.vertexBuffer.format.hasUv1 ? SHADERDEF_UV1 : 0;
    this._shaderDefs |= mesh.vertexBuffer.format.hasColor ? SHADERDEF_VCOLOR : 0;
    this._shaderDefs |= mesh.vertexBuffer.format.hasTangents ? SHADERDEF_TANGENTS : 0;
    this._lightHash = 0;
    this.visible = true;
    this.layer = LAYER_WORLD;
    this._renderStyle = RENDERSTYLE_SOLID;
    this.castShadow = false;
    this._receiveShadow = true;
    this._screenSpace = false;
    this._noDepthDrawGl1 = false;
    this.cull = true;
    this.pick = true;
    this._updateAabb = true;
    this._updateAabbFunc = null;
    this._calculateSortDistance = null;
    this.updateKey();
    this._skinInstance = null;
    this._morphInstance = null;
    this.instancingData = null;
    this._customAabb = null;
    this.aabb = new BoundingBox();
    this._aabbVer = -1;
    this.drawOrder = 0;
    this.visibleThisFrame = false;
    this.isVisibleFunc = null;
    this.parameters = {};
    this.stencilFront = null;
    this.stencilBack = null;
    this.flipFaces = false;
  }

  set renderStyle(renderStyle) {
    this._renderStyle = renderStyle;
    this.mesh.prepareRenderState(renderStyle);
  }

  get renderStyle() {
    return this._renderStyle;
  }

  set mesh(mesh) {
    if (mesh === this._mesh) return;

    if (this._mesh) {
      this._mesh.decRefCount();
    }

    this._mesh = mesh;

    if (mesh) {
      mesh.incRefCount();
    }
  }

  get mesh() {
    return this._mesh;
  }

  set aabb(aabb) {
    this._aabb = aabb;
  }

  get aabb() {
    if (!this._updateAabb) {
      return this._aabb;
    }

    if (this._updateAabbFunc) {
      return this._updateAabbFunc(this._aabb);
    }

    let localAabb = this._customAabb;
    let toWorldSpace = !!localAabb;

    if (!localAabb) {
      localAabb = _tmpAabb;

      if (this.skinInstance) {
        if (!this.mesh.boneAabb) {
          const morphTargets = this._morphInstance ? this._morphInstance.morph._targets : null;

          this.mesh._initBoneAabbs(morphTargets);
        }

        const boneUsed = this.mesh.boneUsed;
        let first = true;

        for (let i = 0; i < this.mesh.boneAabb.length; i++) {
          if (boneUsed[i]) {
            _tempBoneAabb.setFromTransformedAabb(this.mesh.boneAabb[i], this.skinInstance.matrices[i]);

            if (first) {
              first = false;
              localAabb.center.copy(_tempBoneAabb.center);
              localAabb.halfExtents.copy(_tempBoneAabb.halfExtents);
            } else {
              localAabb.add(_tempBoneAabb);
            }
          }
        }

        toWorldSpace = true;
      } else if (this.node._aabbVer !== this._aabbVer) {
        if (this.mesh) {
          localAabb.center.copy(this.mesh.aabb.center);
          localAabb.halfExtents.copy(this.mesh.aabb.halfExtents);
        } else {
          localAabb.center.set(0, 0, 0);
          localAabb.halfExtents.set(0, 0, 0);
        }

        if (this.mesh && this.mesh.morph) {
          localAabb._expand(this.mesh.morph.aabb.getMin(), this.mesh.morph.aabb.getMax());
        }

        toWorldSpace = true;
        this._aabbVer = this.node._aabbVer;
      }
    }

    if (toWorldSpace) {
      this._aabb.setFromTransformedAabb(localAabb, this.node.getWorldTransform());
    }

    return this._aabb;
  }

  clearShaders() {
    const shaders = this._shader;

    for (let i = 0; i < shaders.length; i++) {
      shaders[i] = null;
    }

    this.destroyBindGroups();
  }

  destroyBindGroups() {
    const groups = this._bindGroups;

    for (let i = 0; i < groups.length; i++) {
      const group = groups[i];

      if (group) {
        const uniformBuffer = group.defaultUniformBuffer;

        if (uniformBuffer) {
          uniformBuffer.destroy();
        }

        group.destroy();
      }
    }

    groups.length = 0;
  }

  getBindGroup(device, pass) {
    let bindGroup = this._bindGroups[pass];

    if (!bindGroup) {
      const shader = this._shader[pass];
      const ubFormat = shader.meshUniformBufferFormat;
      const uniformBuffer = new UniformBuffer(device, ubFormat);
      const bingGroupFormat = shader.meshBindGroupFormat;
      bindGroup = new BindGroup(device, bingGroupFormat, uniformBuffer);
      this._bindGroups[pass] = bindGroup;
    }

    return bindGroup;
  }

  set material(material) {
    this.clearShaders();
    const prevMat = this._material;

    if (prevMat) {
      prevMat.removeMeshInstanceRef(this);
    }

    this._material = material;

    if (material) {
      material.addMeshInstanceRef(this);
      this.updateKey();
      const prevBlend = prevMat && prevMat.transparent;

      if (material.transparent !== prevBlend) {
        const scene = this._material._scene || (prevMat == null ? void 0 : prevMat._scene);

        if (scene) {
          scene.layers._dirtyBlend = true;
        } else {
          material._dirtyBlend = true;
        }
      }
    }
  }

  get material() {
    return this._material;
  }

  set layer(layer) {
    this._layer = layer;
    this.updateKey();
  }

  get layer() {
    return this._layer;
  }

  set calculateSortDistance(calculateSortDistance) {
    this._calculateSortDistance = calculateSortDistance;
  }

  get calculateSortDistance() {
    return this._calculateSortDistance;
  }

  set receiveShadow(val) {
    this._receiveShadow = val;
    this._shaderDefs = val ? this._shaderDefs & ~SHADERDEF_NOSHADOW : this._shaderDefs | SHADERDEF_NOSHADOW;
    this._shader[SHADER_FORWARD] = null;
    this._shader[SHADER_FORWARDHDR] = null;
  }

  get receiveShadow() {
    return this._receiveShadow;
  }

  set skinInstance(val) {
    this._skinInstance = val;
    let shaderDefs = this._shaderDefs;
    shaderDefs = val ? shaderDefs | SHADERDEF_SKIN : shaderDefs & ~SHADERDEF_SKIN;

    if (shaderDefs !== this._shaderDefs) {
      this._shaderDefs = shaderDefs;
      this.clearShaders();
    }

    this._setupSkinUpdate();
  }

  get skinInstance() {
    return this._skinInstance;
  }

  set morphInstance(val) {
    var _this$_morphInstance;

    (_this$_morphInstance = this._morphInstance) == null ? void 0 : _this$_morphInstance.destroy();
    this._morphInstance = val;
    let shaderDefs = this._shaderDefs;
    shaderDefs = val && val.morph.useTextureMorph ? shaderDefs | SHADERDEF_MORPH_TEXTURE_BASED : shaderDefs & ~SHADERDEF_MORPH_TEXTURE_BASED;
    shaderDefs = val && val.morph.morphPositions ? shaderDefs | SHADERDEF_MORPH_POSITION : shaderDefs & ~SHADERDEF_MORPH_POSITION;
    shaderDefs = val && val.morph.morphNormals ? shaderDefs | SHADERDEF_MORPH_NORMAL : shaderDefs & ~SHADERDEF_MORPH_NORMAL;

    if (shaderDefs !== this._shaderDefs) {
      this._shaderDefs = shaderDefs;
      this.clearShaders();
    }
  }

  get morphInstance() {
    return this._morphInstance;
  }

  set screenSpace(val) {
    this._screenSpace = val;
    this._shaderDefs = val ? this._shaderDefs | SHADERDEF_SCREENSPACE : this._shaderDefs & ~SHADERDEF_SCREENSPACE;
    this._shader[SHADER_FORWARD] = null;
  }

  get screenSpace() {
    return this._screenSpace;
  }

  set key(val) {
    this._key[SORTKEY_FORWARD] = val;
  }

  get key() {
    return this._key[SORTKEY_FORWARD];
  }

  set mask(val) {
    const toggles = this._shaderDefs & 0x0000FFFF;
    this._shaderDefs = toggles | val << 16;
    this._shader[SHADER_FORWARD] = null;
    this._shader[SHADER_FORWARDHDR] = null;
  }

  get mask() {
    return this._shaderDefs >> 16;
  }

  set instancingCount(value) {
    if (this.instancingData) this.instancingData.count = value;
  }

  get instancingCount() {
    return this.instancingData ? this.instancingData.count : 0;
  }

  destroy() {
    var _this$_skinInstance, _this$morphInstance;

    const mesh = this.mesh;

    if (mesh) {
      this.mesh = null;

      if (mesh.refCount < 1) {
        mesh.destroy();
      }
    }

    this.setRealtimeLightmap(MeshInstance.lightmapParamNames[0], null);
    this.setRealtimeLightmap(MeshInstance.lightmapParamNames[1], null);
    (_this$_skinInstance = this._skinInstance) == null ? void 0 : _this$_skinInstance.destroy();
    this._skinInstance = null;
    (_this$morphInstance = this.morphInstance) == null ? void 0 : _this$morphInstance.destroy();
    this.morphInstance = null;
    this.clearShaders();
    this.material = null;
  }

  static _prepareRenderStyleForArray(meshInstances, renderStyle) {
    if (meshInstances) {
      for (let i = 0; i < meshInstances.length; i++) {
        meshInstances[i]._renderStyle = renderStyle;
        const mesh = meshInstances[i].mesh;

        if (!_meshSet.has(mesh)) {
          _meshSet.add(mesh);

          mesh.prepareRenderState(renderStyle);
        }
      }

      _meshSet.clear();
    }
  }

  _isVisible(camera) {
    if (this.visible) {
      if (this.isVisibleFunc) {
        return this.isVisibleFunc(camera);
      }

      _tempSphere.center = this.aabb.center;
      _tempSphere.radius = this._aabb.halfExtents.length();
      return camera.frustum.containsSphere(_tempSphere);
    }

    return false;
  }

  updateKey() {
    const material = this.material;
    this._key[SORTKEY_FORWARD] = getKey(this.layer, material.alphaToCoverage || material.alphaTest ? BLEND_NORMAL : material.blendType, false, material.id);
  }

  setInstancing(vertexBuffer) {
    if (vertexBuffer) {
      this.instancingData = new InstancingData(vertexBuffer.numVertices);
      this.instancingData.vertexBuffer = vertexBuffer;
      vertexBuffer.instancing = true;
      this.cull = false;
    } else {
      this.instancingData = null;
      this.cull = true;
    }
  }

  updatePassShader(scene, pass, staticLightList, sortedLights, viewUniformFormat, viewBindGroupFormat) {
    this._shader[pass] = this.material.getShaderVariant(this.mesh.device, scene, this._shaderDefs, staticLightList, pass, sortedLights, viewUniformFormat, viewBindGroupFormat);
  }

  ensureMaterial(device) {
    if (!this.material) {
      this.material = getDefaultMaterial(device);
    }
  }

  clearParameters() {
    this.parameters = {};
  }

  getParameters() {
    return this.parameters;
  }

  getParameter(name) {
    return this.parameters[name];
  }

  setParameter(name, data, passFlags = -262141) {
    if (data === undefined && typeof name === 'object') {
      const uniformObject = name;

      if (uniformObject.length) {
        for (let i = 0; i < uniformObject.length; i++) {
          this.setParameter(uniformObject[i]);
        }

        return;
      }

      name = uniformObject.name;
      data = uniformObject.value;
    }

    const param = this.parameters[name];

    if (param) {
      param.data = data;
      param.passFlags = passFlags;
    } else {
      this.parameters[name] = {
        scopeId: null,
        data: data,
        passFlags: passFlags
      };
    }
  }

  setRealtimeLightmap(name, texture) {
    const old = this.getParameter(name);
    if (old === texture) return;

    if (old) {
      LightmapCache.decRef(old.data);
    }

    if (texture) {
      LightmapCache.incRef(texture);
      this.setParameter(name, texture);
    } else {
      this.deleteParameter(name);
    }
  }

  deleteParameter(name) {
    if (this.parameters[name]) {
      delete this.parameters[name];
    }
  }

  setParameters(device, passFlag) {
    const parameters = this.parameters;

    for (const paramName in parameters) {
      const parameter = parameters[paramName];

      if (parameter.passFlags & passFlag) {
        if (!parameter.scopeId) {
          parameter.scopeId = device.scope.resolve(paramName);
        }

        parameter.scopeId.setValue(parameter.data);
      }
    }
  }

  setLightmapped(value) {
    if (value) {
      this.mask = (this.mask | MASK_AFFECT_LIGHTMAPPED) & ~(MASK_AFFECT_DYNAMIC | MASK_BAKE);
    } else {
      this.setRealtimeLightmap(MeshInstance.lightmapParamNames[0], null);
      this.setRealtimeLightmap(MeshInstance.lightmapParamNames[1], null);
      this._shaderDefs &= ~(SHADERDEF_LM | SHADERDEF_DIRLM | SHADERDEF_LMAMBIENT);
      this.mask = (this.mask | MASK_AFFECT_DYNAMIC) & ~(MASK_AFFECT_LIGHTMAPPED | MASK_BAKE);
    }
  }

  setCustomAabb(aabb) {
    if (aabb) {
      if (this._customAabb) {
        this._customAabb.copy(aabb);
      } else {
        this._customAabb = aabb.clone();
      }
    } else {
      this._customAabb = null;
      this._aabbVer = -1;
    }

    this._setupSkinUpdate();
  }

  _setupSkinUpdate() {
    if (this._skinInstance) {
      this._skinInstance._updateBeforeCull = !this._customAabb;
    }
  }

}

MeshInstance.lightmapParamNames = ['texture_lightMap', 'texture_dirLightMap'];

function getKey(layer, blendType, isCommand, materialId) {
  return (layer & 0x0f) << 27 | (blendType === BLEND_NONE ? 1 : 0) << 26 | (isCommand ? 1 : 0) << 25 | (materialId & 0x1ffffff) << 0;
}

function paramsIdentical(a, b) {
  if (a && !b) return false;
  if (!a && b) return false;
  a = a.data;
  b = b.data;
  if (a === b) return true;

  if (a instanceof Float32Array && b instanceof Float32Array) {
    if (a.length !== b.length) return false;

    for (let i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }

    return true;
  }

  return false;
}

function equalParamSets(params1, params2) {
  for (const param in params1) {
    if (params1.hasOwnProperty(param) && !paramsIdentical(params1[param], params2[param])) return false;
  }

  for (const param in params2) {
    if (params2.hasOwnProperty(param) && !paramsIdentical(params2[param], params1[param])) return false;
  }

  return true;
}

function equalLightLists(lightList1, lightList2) {
  for (let k = 0; k < lightList1.length; k++) {
    if (lightList2.indexOf(lightList1[k]) < 0) return false;
  }

  for (let k = 0; k < lightList2.length; k++) {
    if (lightList1.indexOf(lightList2[k]) < 0) return false;
  }

  return true;
}

const mat3 = new Mat3();
const worldMatX$1 = new Vec3();
const worldMatY$1 = new Vec3();
const worldMatZ$1 = new Vec3();

function getScaleSign(mi) {
  const wt = mi.node.worldTransform;
  wt.getX(worldMatX$1);
  wt.getY(worldMatY$1);
  wt.getZ(worldMatZ$1);
  worldMatX$1.cross(worldMatX$1, worldMatY$1);
  return worldMatX$1.dot(worldMatZ$1) >= 0 ? 1 : -1;
}

class BatchManager {
  constructor(device, root, scene) {
    this.device = device;
    this.rootNode = root;
    this.scene = scene;
    this._init = false;
    this._batchGroups = {};
    this._batchGroupCounter = 0;
    this._batchList = [];
    this._dirtyGroups = [];
  }

  destroy() {
    this.device = null;
    this.rootNode = null;
    this.scene = null;
    this._batchGroups = {};
    this._batchList = [];
    this._dirtyGroups = [];
  }

  addGroup(name, dynamic, maxAabbSize, id, layers) {
    if (id === undefined) {
      id = this._batchGroupCounter;
      this._batchGroupCounter++;
    }

    if (this._batchGroups[id]) {
      return undefined;
    }

    const group = new BatchGroup(id, name, dynamic, maxAabbSize, layers);
    this._batchGroups[id] = group;
    return group;
  }

  removeGroup(id) {
    if (!this._batchGroups[id]) {
      return;
    }

    const newBatchList = [];

    for (let i = 0; i < this._batchList.length; i++) {
      if (this._batchList[i].batchGroupId === id) {
        this.destroyBatch(this._batchList[i]);
      } else {
        newBatchList.push(this._batchList[i]);
      }
    }

    this._batchList = newBatchList;

    this._removeModelsFromBatchGroup(this.rootNode, id);

    delete this._batchGroups[id];
  }

  markGroupDirty(id) {
    if (this._dirtyGroups.indexOf(id) < 0) {
      this._dirtyGroups.push(id);
    }
  }

  getGroupByName(name) {
    const groups = this._batchGroups;

    for (const group in groups) {
      if (!groups.hasOwnProperty(group)) continue;

      if (groups[group].name === name) {
        return groups[group];
      }
    }

    return null;
  }

  getBatches(batchGroupId) {
    const results = [];
    const len = this._batchList.length;

    for (let i = 0; i < len; i++) {
      const batch = this._batchList[i];

      if (batch.batchGroupId === batchGroupId) {
        results.push(batch);
      }
    }

    return results;
  }

  _removeModelsFromBatchGroup(node, id) {
    if (!node.enabled) return;

    if (node.model && node.model.batchGroupId === id) {
      node.model.batchGroupId = -1;
    }

    if (node.render && node.render.batchGroupId === id) {
      node.render.batchGroupId = -1;
    }

    if (node.element && node.element.batchGroupId === id) {
      node.element.batchGroupId = -1;
    }

    if (node.sprite && node.sprite.batchGroupId === id) {
      node.sprite.batchGroupId = -1;
    }

    for (let i = 0; i < node._children.length; i++) {
      this._removeModelsFromBatchGroup(node._children[i], id);
    }
  }

  insert(type, groupId, node) {
    const group = this._batchGroups[groupId];

    if (group) {
      if (group._obj[type].indexOf(node) < 0) {
        group._obj[type].push(node);

        this.markGroupDirty(groupId);
      }
    }
  }

  remove(type, groupId, node) {
    const group = this._batchGroups[groupId];

    if (group) {
      const idx = group._obj[type].indexOf(node);

      if (idx >= 0) {
        group._obj[type].splice(idx, 1);

        this.markGroupDirty(groupId);
      }
    }
  }

  _extractRender(node, arr, group, groupMeshInstances) {
    if (node.render) {
      if (node.render.isStatic) {
        const drawCalls = this.scene.drawCalls;
        const nodeMeshInstances = node.render.meshInstances;

        for (let i = 0; i < drawCalls.length; i++) {
          if (!drawCalls[i]._staticSource) continue;
          if (nodeMeshInstances.indexOf(drawCalls[i]._staticSource) < 0) continue;
          arr.push(drawCalls[i]);
        }

        for (let i = 0; i < nodeMeshInstances.length; i++) {
          if (drawCalls.indexOf(nodeMeshInstances[i]) >= 0) {
            arr.push(nodeMeshInstances[i]);
          }
        }
      } else {
        arr = groupMeshInstances[node.render.batchGroupId] = arr.concat(node.render.meshInstances);
      }

      node.render.removeFromLayers();
    }

    return arr;
  }

  _extractModel(node, arr, group, groupMeshInstances) {
    if (node.model && node.model.model) {
      if (node.model.isStatic) {
        const drawCalls = this.scene.drawCalls;
        const nodeMeshInstances = node.model.meshInstances;

        for (let i = 0; i < drawCalls.length; i++) {
          if (!drawCalls[i]._staticSource) continue;
          if (nodeMeshInstances.indexOf(drawCalls[i]._staticSource) < 0) continue;
          arr.push(drawCalls[i]);
        }

        for (let i = 0; i < nodeMeshInstances.length; i++) {
          if (drawCalls.indexOf(nodeMeshInstances[i]) >= 0) {
            arr.push(nodeMeshInstances[i]);
          }
        }
      } else {
        arr = groupMeshInstances[node.model.batchGroupId] = arr.concat(node.model.meshInstances);
      }

      node.model.removeModelFromLayers();
    }

    return arr;
  }

  _extractElement(node, arr, group) {
    if (!node.element) return;
    let valid = false;

    if (node.element._text && node.element._text._model.meshInstances.length > 0) {
      arr.push(node.element._text._model.meshInstances[0]);
      node.element.removeModelFromLayers(node.element._text._model);
      valid = true;
    } else if (node.element._image) {
      arr.push(node.element._image._renderable.meshInstance);
      node.element.removeModelFromLayers(node.element._image._renderable.model);

      if (node.element._image._renderable.unmaskMeshInstance) {
        arr.push(node.element._image._renderable.unmaskMeshInstance);

        if (!node.element._image._renderable.unmaskMeshInstance.stencilFront || !node.element._image._renderable.unmaskMeshInstance.stencilBack) {
          node.element._dirtifyMask();

          node.element._onPrerender();
        }
      }

      valid = true;
    }

    if (valid) {
      group._ui = true;
    }
  }

  _collectAndRemoveMeshInstances(groupMeshInstances, groupIds) {
    for (let g = 0; g < groupIds.length; g++) {
      const id = groupIds[g];
      const group = this._batchGroups[id];
      if (!group) continue;
      let arr = groupMeshInstances[id];
      if (!arr) arr = groupMeshInstances[id] = [];

      for (let m = 0; m < group._obj.model.length; m++) {
        arr = this._extractModel(group._obj.model[m], arr, group, groupMeshInstances);
      }

      for (let r = 0; r < group._obj.render.length; r++) {
        arr = this._extractRender(group._obj.render[r], arr, group, groupMeshInstances);
      }

      for (let e = 0; e < group._obj.element.length; e++) {
        this._extractElement(group._obj.element[e], arr, group);
      }

      for (let s = 0; s < group._obj.sprite.length; s++) {
        const node = group._obj.sprite[s];

        if (node.sprite && node.sprite._meshInstance && (group.dynamic || node.sprite.sprite._renderMode === SPRITE_RENDERMODE_SIMPLE)) {
          arr.push(node.sprite._meshInstance);
          node.sprite.removeModelFromLayers();
          group._sprite = true;
          node.sprite._batchGroup = group;
        }
      }
    }
  }

  generate(groupIds) {
    const groupMeshInstances = {};

    if (!groupIds) {
      groupIds = Object.keys(this._batchGroups);
    }

    const newBatchList = [];

    for (let i = 0; i < this._batchList.length; i++) {
      if (groupIds.indexOf(this._batchList[i].batchGroupId) < 0) {
        newBatchList.push(this._batchList[i]);
        continue;
      }

      this.destroyBatch(this._batchList[i]);
    }

    this._batchList = newBatchList;

    this._collectAndRemoveMeshInstances(groupMeshInstances, groupIds);

    if (groupIds === this._dirtyGroups) {
      this._dirtyGroups.length = 0;
    } else {
      const newDirtyGroups = [];

      for (let i = 0; i < this._dirtyGroups.length; i++) {
        if (groupIds.indexOf(this._dirtyGroups[i]) < 0) newDirtyGroups.push(this._dirtyGroups[i]);
      }

      this._dirtyGroups = newDirtyGroups;
    }

    let group, lists, groupData, batch;

    for (const groupId in groupMeshInstances) {
      if (!groupMeshInstances.hasOwnProperty(groupId)) continue;
      group = groupMeshInstances[groupId];
      groupData = this._batchGroups[groupId];

      if (!groupData) {
        continue;
      }

      lists = this.prepare(group, groupData.dynamic, groupData.maxAabbSize, groupData._ui || groupData._sprite);

      for (let i = 0; i < lists.length; i++) {
        batch = this.create(lists[i], groupData.dynamic, parseInt(groupId, 10));

        if (batch) {
          batch.addToLayers(this.scene, groupData.layers);
        }
      }
    }
  }

  prepare(meshInstances, dynamic, maxAabbSize = Number.POSITIVE_INFINITY, translucent) {
    if (meshInstances.length === 0) return [];
    const halfMaxAabbSize = maxAabbSize * 0.5;
    const maxInstanceCount = this.device.supportsBoneTextures ? 1024 : this.device.boneLimit;
    const maxNumVertices = this.device.extUintElement ? 0xffffffff : 0xffff;
    const aabb = new BoundingBox();
    const testAabb = new BoundingBox();
    let skipTranslucentAabb = null;
    let sf;
    const lists = [];
    let j = 0;

    if (translucent) {
      meshInstances.sort(function (a, b) {
        return a.drawOrder - b.drawOrder;
      });
    }

    let meshInstancesLeftA = meshInstances;
    let meshInstancesLeftB;
    const skipMesh = translucent ? function (mi) {
      if (skipTranslucentAabb) {
        skipTranslucentAabb.add(mi.aabb);
      } else {
        skipTranslucentAabb = mi.aabb.clone();
      }

      meshInstancesLeftB.push(mi);
    } : function (mi) {
      meshInstancesLeftB.push(mi);
    };

    while (meshInstancesLeftA.length > 0) {
      lists[j] = [meshInstancesLeftA[0]];
      meshInstancesLeftB = [];
      const material = meshInstancesLeftA[0].material;
      const layer = meshInstancesLeftA[0].layer;
      const defs = meshInstancesLeftA[0]._shaderDefs;
      const params = meshInstancesLeftA[0].parameters;
      const stencil = meshInstancesLeftA[0].stencilFront;
      const lightList = meshInstancesLeftA[0]._staticLightList;
      let vertCount = meshInstancesLeftA[0].mesh.vertexBuffer.getNumVertices();
      const drawOrder = meshInstancesLeftA[0].drawOrder;
      aabb.copy(meshInstancesLeftA[0].aabb);
      const scaleSign = getScaleSign(meshInstancesLeftA[0]);
      const vertexFormatBatchingHash = meshInstancesLeftA[0].mesh.vertexBuffer.format.batchingHash;
      const indexed = meshInstancesLeftA[0].mesh.primitive[0].indexed;
      skipTranslucentAabb = null;

      for (let i = 1; i < meshInstancesLeftA.length; i++) {
        const mi = meshInstancesLeftA[i];

        if (dynamic && lists[j].length >= maxInstanceCount) {
          meshInstancesLeftB = meshInstancesLeftB.concat(meshInstancesLeftA.slice(i));
          break;
        }

        if (material !== mi.material || layer !== mi.layer || vertexFormatBatchingHash !== mi.mesh.vertexBuffer.format.batchingHash || indexed !== mi.mesh.primitive[0].indexed || defs !== mi._shaderDefs || vertCount + mi.mesh.vertexBuffer.getNumVertices() > maxNumVertices) {
          skipMesh(mi);
          continue;
        }

        testAabb.copy(aabb);
        testAabb.add(mi.aabb);

        if (testAabb.halfExtents.x > halfMaxAabbSize || testAabb.halfExtents.y > halfMaxAabbSize || testAabb.halfExtents.z > halfMaxAabbSize) {
          skipMesh(mi);
          continue;
        }

        if (stencil) {
          if (!(sf = mi.stencilFront) || stencil.func !== sf.func || stencil.zpass !== sf.zpass) {
            skipMesh(mi);
            continue;
          }
        }

        if (scaleSign !== getScaleSign(mi)) {
          skipMesh(mi);
          continue;
        }

        if (!equalParamSets(params, mi.parameters)) {
          skipMesh(mi);
          continue;
        }

        const staticLights = mi._staticLightList;

        if (lightList && staticLights) {
          if (!equalLightLists(lightList, staticLights)) {
            skipMesh(mi);
            continue;
          }
        } else if (lightList || staticLights) {
          skipMesh(mi);
          continue;
        }

        if (translucent && skipTranslucentAabb && skipTranslucentAabb.intersects(mi.aabb) && mi.drawOrder !== drawOrder) {
          skipMesh(mi);
          continue;
        }

        aabb.add(mi.aabb);
        vertCount += mi.mesh.vertexBuffer.getNumVertices();
        lists[j].push(mi);
      }

      j++;
      meshInstancesLeftA = meshInstancesLeftB;
    }

    return lists;
  }

  collectBatchedMeshData(meshInstances, dynamic) {
    let streams = null;
    let batchNumVerts = 0;
    let batchNumIndices = 0;
    let material = null;

    for (let i = 0; i < meshInstances.length; i++) {
      if (meshInstances[i].visible) {
        const mesh = meshInstances[i].mesh;
        const numVerts = mesh.vertexBuffer.numVertices;
        batchNumVerts += numVerts;
        batchNumIndices += mesh.primitive[0].indexed ? mesh.primitive[0].count : mesh.primitive[0].type === PRIMITIVE_TRIFAN && mesh.primitive[0].count === 4 ? 6 : 0;

        if (!streams) {
          material = meshInstances[i].material;
          streams = {};
          const elems = mesh.vertexBuffer.format.elements;

          for (let j = 0; j < elems.length; j++) {
            const semantic = elems[j].name;
            streams[semantic] = {
              numComponents: elems[j].numComponents,
              dataType: elems[j].dataType,
              normalize: elems[j].normalize,
              count: 0
            };
          }

          if (dynamic) {
            streams[SEMANTIC_BLENDINDICES] = {
              numComponents: 1,
              dataType: TYPE_FLOAT32,
              normalize: false,
              count: 0
            };
          }
        }
      }
    }

    return {
      streams: streams,
      batchNumVerts: batchNumVerts,
      batchNumIndices: batchNumIndices,
      material: material
    };
  }

  create(meshInstances, dynamic, batchGroupId) {
    if (!this._init) {
      const boneLimit = '#define BONE_LIMIT ' + this.device.getBoneLimit() + '\n';
      this.transformVS = boneLimit + '#define DYNAMICBATCH\n' + shaderChunks.transformVS;
      this.skinTexVS = shaderChunks.skinBatchTexVS;
      this.skinConstVS = shaderChunks.skinBatchConstVS;
      this.vertexFormats = {};
      this._init = true;
    }

    let stream = null;
    let semantic;
    let mesh, numVerts;
    let batch = null;
    const batchData = this.collectBatchedMeshData(meshInstances, dynamic);

    if (batchData.streams) {
      const streams = batchData.streams;
      let material = batchData.material;
      const batchNumVerts = batchData.batchNumVerts;
      const batchNumIndices = batchData.batchNumIndices;
      batch = new Batch(meshInstances, dynamic, batchGroupId);

      this._batchList.push(batch);

      let indexBase, numIndices, indexData;
      let verticesOffset = 0;
      let indexOffset = 0;
      let transform;
      const vec = new Vec3();
      const indexArrayType = batchNumVerts <= 0xffff ? Uint16Array : Uint32Array;
      const indices = new indexArrayType(batchNumIndices);

      for (semantic in streams) {
        stream = streams[semantic];
        stream.typeArrayType = typedArrayTypes[stream.dataType];
        stream.elementByteSize = typedArrayTypesByteSize[stream.dataType];
        stream.buffer = new stream.typeArrayType(batchNumVerts * stream.numComponents);
      }

      for (let i = 0; i < meshInstances.length; i++) {
        if (!meshInstances[i].visible) continue;
        mesh = meshInstances[i].mesh;
        numVerts = mesh.vertexBuffer.numVertices;

        if (!dynamic) {
          transform = meshInstances[i].node.getWorldTransform();
        }

        for (semantic in streams) {
          if (semantic !== SEMANTIC_BLENDINDICES) {
            stream = streams[semantic];
            const subarray = new stream.typeArrayType(stream.buffer.buffer, stream.elementByteSize * stream.count);
            const totalComponents = mesh.getVertexStream(semantic, subarray) * stream.numComponents;
            stream.count += totalComponents;

            if (!dynamic && stream.numComponents >= 3) {
              if (semantic === SEMANTIC_POSITION) {
                for (let j = 0; j < totalComponents; j += stream.numComponents) {
                  vec.set(subarray[j], subarray[j + 1], subarray[j + 2]);
                  transform.transformPoint(vec, vec);
                  subarray[j] = vec.x;
                  subarray[j + 1] = vec.y;
                  subarray[j + 2] = vec.z;
                }
              } else if (semantic === SEMANTIC_NORMAL || semantic === SEMANTIC_TANGENT) {
                transform.invertTo3x3(mat3);
                mat3.transpose();

                for (let j = 0; j < totalComponents; j += stream.numComponents) {
                  vec.set(subarray[j], subarray[j + 1], subarray[j + 2]);
                  mat3.transformVector(vec, vec);
                  subarray[j] = vec.x;
                  subarray[j + 1] = vec.y;
                  subarray[j + 2] = vec.z;
                }
              }
            }
          }
        }

        if (dynamic) {
          stream = streams[SEMANTIC_BLENDINDICES];

          for (let j = 0; j < numVerts; j++) stream.buffer[stream.count++] = i;
        }

        if (mesh.primitive[0].indexed) {
          indexBase = mesh.primitive[0].base;
          numIndices = mesh.primitive[0].count;
          const srcFormat = mesh.indexBuffer[0].getFormat();
          indexData = new typedArrayIndexFormats[srcFormat](mesh.indexBuffer[0].storage);
        } else if (mesh.primitive[0].type === PRIMITIVE_TRIFAN && mesh.primitive[0].count === 4) {
          indexBase = 0;
          numIndices = 6;
          indexData = [0, 1, 3, 2, 3, 1];
        } else {
          numIndices = 0;
          continue;
        }

        for (let j = 0; j < numIndices; j++) {
          indices[j + indexOffset] = indexData[indexBase + j] + verticesOffset;
        }

        indexOffset += numIndices;
        verticesOffset += numVerts;
      }

      mesh = new Mesh(this.device);

      for (semantic in streams) {
        stream = streams[semantic];
        mesh.setVertexStream(semantic, stream.buffer, stream.numComponents, undefined, stream.dataType, stream.normalize);
      }

      if (indices.length > 0) mesh.setIndices(indices);
      mesh.update(PRIMITIVE_TRIANGLES, false);

      if (dynamic) {
        material = material.clone();
        material.chunks.transformVS = this.transformVS;
        material.chunks.skinTexVS = this.skinTexVS;
        material.chunks.skinConstVS = this.skinConstVS;
        material.update();
      }

      const meshInstance = new MeshInstance(mesh, material, this.rootNode);
      meshInstance.castShadow = batch.origMeshInstances[0].castShadow;
      meshInstance.parameters = batch.origMeshInstances[0].parameters;
      meshInstance.isStatic = batch.origMeshInstances[0].isStatic;
      meshInstance.layer = batch.origMeshInstances[0].layer;
      meshInstance._staticLightList = batch.origMeshInstances[0]._staticLightList;
      meshInstance._shaderDefs = batch.origMeshInstances[0]._shaderDefs;
      meshInstance.cull = batch.origMeshInstances[0].cull;
      const batchGroup = this._batchGroups[batchGroupId];
      if (batchGroup && batchGroup._ui) meshInstance.cull = false;

      if (dynamic) {
        const nodes = [];

        for (let i = 0; i < batch.origMeshInstances.length; i++) {
          nodes.push(batch.origMeshInstances[i].node);
        }

        meshInstance.skinInstance = new SkinBatchInstance(this.device, nodes, this.rootNode);
      }

      meshInstance._updateAabb = false;
      meshInstance.drawOrder = batch.origMeshInstances[0].drawOrder;
      meshInstance.stencilFront = batch.origMeshInstances[0].stencilFront;
      meshInstance.stencilBack = batch.origMeshInstances[0].stencilBack;
      meshInstance.flipFaces = getScaleSign(batch.origMeshInstances[0]) < 0;
      meshInstance.castShadow = batch.origMeshInstances[0].castShadow;
      batch.meshInstance = meshInstance;
      batch.updateBoundingBox();
    }

    return batch;
  }

  updateAll() {
    if (this._dirtyGroups.length > 0) {
      this.generate(this._dirtyGroups);
    }

    for (let i = 0; i < this._batchList.length; i++) {
      if (!this._batchList[i].dynamic) continue;

      this._batchList[i].updateBoundingBox();
    }
  }

  clone(batch, clonedMeshInstances) {
    const batch2 = new Batch(clonedMeshInstances, batch.dynamic, batch.batchGroupId);

    this._batchList.push(batch2);

    const nodes = [];

    for (let i = 0; i < clonedMeshInstances.length; i++) {
      nodes.push(clonedMeshInstances[i].node);
    }

    batch2.meshInstance = new MeshInstance(batch.meshInstance.mesh, batch.meshInstance.material, batch.meshInstance.node);
    batch2.meshInstance._updateAabb = false;
    batch2.meshInstance.parameters = clonedMeshInstances[0].parameters;
    batch2.meshInstance.isStatic = clonedMeshInstances[0].isStatic;
    batch2.meshInstance.cull = clonedMeshInstances[0].cull;
    batch2.meshInstance.layer = clonedMeshInstances[0].layer;
    batch2.meshInstance._staticLightList = clonedMeshInstances[0]._staticLightList;

    if (batch.dynamic) {
      batch2.meshInstance.skinInstance = new SkinBatchInstance(this.device, nodes, this.rootNode);
    }

    batch2.meshInstance.castShadow = batch.meshInstance.castShadow;
    batch2.meshInstance._shader = batch.meshInstance._shader.slice();
    batch2.meshInstance.castShadow = batch.meshInstance.castShadow;
    return batch2;
  }

  destroyBatch(batch) {
    batch.destroy(this.scene, this._batchGroups[batch.batchGroupId].layers);
  }

}

const tempVec3 = new Vec3();
const tempMin3 = new Vec3();
const tempMax3 = new Vec3();
const tempBox = new BoundingBox();
const epsilon = 0.000001;

class ClusterLight {
  constructor() {
    this.light = null;
    this.min = new Vec3();
    this.max = new Vec3();
  }

}

class WorldClusters {
  constructor(device) {
    this.device = device;
    this.name = 'Untitled';
    this.reportCount = 0;
    this.boundsMin = new Vec3();
    this.boundsMax = new Vec3();
    this.boundsDelta = new Vec3();
    this._cells = new Vec3(1, 1, 1);
    this._cellsLimit = new Vec3();
    this.cells = this._cells;
    this._maxCellLightCount = 0;
    this._pixelsPerCellCount = 0;
    this.maxCellLightCount = 4;
    this._maxAttenuation = 0;
    this._maxColorValue = 0;
    this._usedLights = [];

    this._usedLights.push(new ClusterLight());

    this.lightsBuffer = new LightsBuffer(device);
    this.registerUniforms(device);
  }

  set maxCellLightCount(count) {
    const maxCellLightCount = math$1.roundUp(count, 4);

    if (maxCellLightCount !== this._maxCellLightCount) {
      this._maxCellLightCount = maxCellLightCount;
      this._pixelsPerCellCount = this._maxCellLightCount / 4;
      this._cellsDirty = true;
    }
  }

  get maxCellLightCount() {
    return this._maxCellLightCount;
  }

  set cells(value) {
    tempVec3.copy(value).floor();

    if (!this._cells.equals(tempVec3)) {
      this._cells.copy(tempVec3);

      this._cellsLimit.copy(tempVec3).sub(Vec3.ONE);

      this._cellsDirty = true;
    }
  }

  get cells() {
    return this._cells;
  }

  destroy() {
    this.lightsBuffer.destroy();
    this.releaseClusterTexture();
  }

  releaseClusterTexture() {
    if (this.clusterTexture) {
      this.clusterTexture.destroy();
      this.clusterTexture = null;
    }
  }

  registerUniforms(device) {
    this._clusterWorldTextureId = device.scope.resolve('clusterWorldTexture');
    this._clusterPixelsPerCellId = device.scope.resolve('clusterPixelsPerCell');
    this._clusterTextureSizeId = device.scope.resolve('clusterTextureSize');
    this._clusterTextureSizeData = new Float32Array(3);
    this._clusterBoundsMinId = device.scope.resolve('clusterBoundsMin');
    this._clusterBoundsMinData = new Float32Array(3);
    this._clusterBoundsDeltaId = device.scope.resolve('clusterBoundsDelta');
    this._clusterBoundsDeltaData = new Float32Array(3);
    this._clusterCellsCountByBoundsSizeId = device.scope.resolve('clusterCellsCountByBoundsSize');
    this._clusterCellsCountByBoundsSizeData = new Float32Array(3);
    this._clusterCellsDotId = device.scope.resolve('clusterCellsDot');
    this._clusterCellsDotData = new Float32Array(3);
    this._clusterCellsMaxId = device.scope.resolve('clusterCellsMax');
    this._clusterCellsMaxData = new Float32Array(3);
    this._clusterCompressionLimit0Id = device.scope.resolve('clusterCompressionLimit0');
    this._clusterCompressionLimit0Data = new Float32Array(2);
  }

  updateParams(lightingParams) {
    if (lightingParams) {
      this.cells = lightingParams.cells;
      this.maxCellLightCount = lightingParams.maxLightsPerCell;
      this.lightsBuffer.cookiesEnabled = lightingParams.cookiesEnabled;
      this.lightsBuffer.shadowsEnabled = lightingParams.shadowsEnabled;
      this.lightsBuffer.areaLightsEnabled = lightingParams.areaLightsEnabled;
    }
  }

  updateCells() {
    if (this._cellsDirty) {
      this._cellsDirty = false;
      const cx = this._cells.x;
      const cy = this._cells.y;
      const cz = this._cells.z;
      const numCells = cx * cy * cz;
      const totalPixels = this._pixelsPerCellCount * numCells;
      let width = Math.ceil(Math.sqrt(totalPixels));
      width = math$1.roundUp(width, this._pixelsPerCellCount);
      const height = Math.ceil(totalPixels / width);
      this._clusterCellsMaxData[0] = cx;
      this._clusterCellsMaxData[1] = cy;
      this._clusterCellsMaxData[2] = cz;
      this._clusterCellsDotData[0] = this._pixelsPerCellCount;
      this._clusterCellsDotData[1] = cx * cz * this._pixelsPerCellCount;
      this._clusterCellsDotData[2] = cx * this._pixelsPerCellCount;
      this.clusters = new Uint8ClampedArray(4 * totalPixels);
      this.counts = new Int32Array(numCells);
      this._clusterTextureSizeData[0] = width;
      this._clusterTextureSizeData[1] = 1.0 / width;
      this._clusterTextureSizeData[2] = 1.0 / height;
      this.releaseClusterTexture();
      this.clusterTexture = LightsBuffer.createTexture(this.device, width, height, PIXELFORMAT_R8_G8_B8_A8, 'ClusterTexture');
    }
  }

  uploadTextures() {
    this.clusterTexture.lock().set(this.clusters);
    this.clusterTexture.unlock();
    this.lightsBuffer.uploadTextures();
  }

  updateUniforms() {
    this.lightsBuffer.updateUniforms();

    this._clusterWorldTextureId.setValue(this.clusterTexture);

    const boundsDelta = this.boundsDelta;
    this._clusterCellsCountByBoundsSizeData[0] = this._cells.x / boundsDelta.x;
    this._clusterCellsCountByBoundsSizeData[1] = this._cells.y / boundsDelta.y;
    this._clusterCellsCountByBoundsSizeData[2] = this._cells.z / boundsDelta.z;

    this._clusterCellsCountByBoundsSizeId.setValue(this._clusterCellsCountByBoundsSizeData);

    this._clusterBoundsMinData[0] = this.boundsMin.x;
    this._clusterBoundsMinData[1] = this.boundsMin.y;
    this._clusterBoundsMinData[2] = this.boundsMin.z;
    this._clusterBoundsDeltaData[0] = boundsDelta.x;
    this._clusterBoundsDeltaData[1] = boundsDelta.y;
    this._clusterBoundsDeltaData[2] = boundsDelta.z;
    this._clusterCompressionLimit0Data[0] = this._maxAttenuation;
    this._clusterCompressionLimit0Data[1] = this._maxColorValue;

    this._clusterPixelsPerCellId.setValue(this._pixelsPerCellCount);

    this._clusterTextureSizeId.setValue(this._clusterTextureSizeData);

    this._clusterBoundsMinId.setValue(this._clusterBoundsMinData);

    this._clusterBoundsDeltaId.setValue(this._clusterBoundsDeltaData);

    this._clusterCellsDotId.setValue(this._clusterCellsDotData);

    this._clusterCellsMaxId.setValue(this._clusterCellsMaxData);

    this._clusterCompressionLimit0Id.setValue(this._clusterCompressionLimit0Data);
  }

  evalLightCellMinMax(clusteredLight, min, max) {
    min.copy(clusteredLight.min);
    min.sub(this.boundsMin);
    min.div(this.boundsDelta);
    min.mul2(min, this.cells);
    min.floor();
    max.copy(clusteredLight.max);
    max.sub(this.boundsMin);
    max.div(this.boundsDelta);
    max.mul2(max, this.cells);
    max.ceil();
    min.max(Vec3.ZERO);
    max.min(this._cellsLimit);
  }

  collectLights(lights) {
    const maxLights = this.lightsBuffer.maxLights;
    const usedLights = this._usedLights;
    let lightIndex = 1;

    for (let i = 0; i < lights.length; i++) {
      const light = lights[i];
      const runtimeLight = !!(light.mask & (MASK_AFFECT_DYNAMIC | MASK_AFFECT_LIGHTMAPPED));

      if (light.enabled && light.type !== LIGHTTYPE_DIRECTIONAL && light.visibleThisFrame && light.intensity > 0 && runtimeLight) {
        if (lightIndex < maxLights) {
          let clusteredLight;

          if (lightIndex < usedLights.length) {
            clusteredLight = usedLights[lightIndex];
          } else {
            clusteredLight = new ClusterLight();
            usedLights.push(clusteredLight);
          }

          clusteredLight.light = light;
          light.getBoundingBox(tempBox);
          clusteredLight.min.copy(tempBox.getMin());
          clusteredLight.max.copy(tempBox.getMax());
          lightIndex++;
        } else {
          console.warn(`Clustered lighting: more than ${maxLights - 1} lights in the frame, ignoring some.`);
          break;
        }
      }
    }

    usedLights.length = lightIndex;
  }

  evaluateBounds() {
    const usedLights = this._usedLights;
    const min = this.boundsMin;
    const max = this.boundsMax;

    if (usedLights.length > 1) {
      min.copy(usedLights[1].min);
      max.copy(usedLights[1].max);

      for (let i = 2; i < usedLights.length; i++) {
        min.min(usedLights[i].min);
        max.max(usedLights[i].max);
      }
    } else {
      min.set(0, 0, 0);
      max.set(1, 1, 1);
    }

    this.boundsDelta.sub2(max, min);
    this.lightsBuffer.setBounds(min, this.boundsDelta);
  }

  evaluateCompressionLimits(gammaCorrection) {
    let maxAttenuation = 0;
    let maxColorValue = 0;
    const usedLights = this._usedLights;

    for (let i = 1; i < usedLights.length; i++) {
      const light = usedLights[i].light;
      maxAttenuation = Math.max(light.attenuationEnd, maxAttenuation);
      const color = gammaCorrection ? light._linearFinalColor : light._finalColor;
      maxColorValue = Math.max(color[0], maxColorValue);
      maxColorValue = Math.max(color[1], maxColorValue);
      maxColorValue = Math.max(color[2], maxColorValue);
    }

    this._maxAttenuation = maxAttenuation + epsilon;
    this._maxColorValue = maxColorValue + epsilon;
    this.lightsBuffer.setCompressionRanges(this._maxAttenuation, this._maxColorValue);
  }

  updateClusters(gammaCorrection) {
    this.counts.fill(0);
    this.clusters.fill(0);
    const divX = this._cells.x;
    const divZ = this._cells.z;
    const counts = this.counts;
    const limit = this._maxCellLightCount;
    const clusters = this.clusters;
    const pixelsPerCellCount = this._pixelsPerCellCount;
    const usedLights = this._usedLights;

    for (let i = 1; i < usedLights.length; i++) {
      const clusteredLight = usedLights[i];
      const light = clusteredLight.light;
      this.lightsBuffer.addLightData(light, i, gammaCorrection);
      this.evalLightCellMinMax(clusteredLight, tempMin3, tempMax3);
      const xStart = tempMin3.x;
      const xEnd = tempMax3.x;
      const yStart = tempMin3.y;
      const yEnd = tempMax3.y;
      const zStart = tempMin3.z;
      const zEnd = tempMax3.z;

      for (let x = xStart; x <= xEnd; x++) {
        for (let z = zStart; z <= zEnd; z++) {
          for (let y = yStart; y <= yEnd; y++) {
            const clusterIndex = x + divX * (z + y * divZ);
            const count = counts[clusterIndex];

            if (count < limit) {
              clusters[pixelsPerCellCount * clusterIndex * 4 + count] = i;
              counts[clusterIndex] = count + 1;
            }
          }
        }
      }
    }
  }

  update(lights, gammaCorrection, lightingParams) {
    this.updateParams(lightingParams);
    this.updateCells();
    this.collectLights(lights);
    this.evaluateBounds();
    this.evaluateCompressionLimits(gammaCorrection);
    this.updateClusters(gammaCorrection);
    this.uploadTextures();
  }

  activate() {
    this.updateUniforms();
  }

}

const uniformTypeToNumElements = [];
uniformTypeToNumElements[UNIFORMTYPE_FLOAT] = 1;
uniformTypeToNumElements[UNIFORMTYPE_VEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_VEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_VEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_INT] = 1;
uniformTypeToNumElements[UNIFORMTYPE_IVEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_IVEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_IVEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_BOOL] = 1;
uniformTypeToNumElements[UNIFORMTYPE_BVEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_BVEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_BVEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_MAT2] = 8;
uniformTypeToNumElements[UNIFORMTYPE_MAT3] = 12;
uniformTypeToNumElements[UNIFORMTYPE_MAT4] = 16;

class UniformFormat {
  constructor(name, type, count = 1) {
    this.name = void 0;
    this.type = void 0;
    this.byteSize = void 0;
    this.offset = void 0;
    this.scopeId = void 0;
    this.count = void 0;
    this.name = name;
    this.type = type;
    this.count = count;
    const elementSize = uniformTypeToNumElements[type];
    this.byteSize = count * elementSize * 4;
  }

  calculateOffset(offset) {
    const alignment = this.byteSize <= 8 ? this.byteSize : 16;
    offset = math$1.roundUp(offset, alignment);
    this.offset = offset / 4;
  }

}

class UniformBufferFormat {
  constructor(graphicsDevice, uniforms) {
    this.byteSize = 0;
    this.map = new Map();
    this.scope = graphicsDevice.scope;
    this.uniforms = uniforms;
    let offset = 0;

    for (let i = 0; i < uniforms.length; i++) {
      const uniform = uniforms[i];
      uniform.calculateOffset(offset);
      offset = uniform.offset * 4 + uniform.byteSize;
      uniform.scopeId = this.scope.resolve(uniform.name);
      this.map.set(uniform.name, uniform);
    }

    this.byteSize = math$1.roundUp(offset, 16);
  }

  get(name) {
    return this.map.get(name);
  }

  getShaderDeclaration(bindGroup, bindIndex) {
    const name = bindGroupNames[bindGroup];
    let code = `layout(set = ${bindGroup}, binding = ${bindIndex}, std140) uniform ub_${name} {\n`;
    this.uniforms.forEach(uniform => {
      const typeString = uniformTypeToName[uniform.type];
      code += `    ${typeString} ${uniform.name};\n`;
    });
    return code + '};\n';
  }

}

class BindBufferFormat {
  constructor(name, visibility) {
    this.name = name;
    this.visibility = visibility;
  }

}

class BindTextureFormat {
  constructor(name, visibility, textureDimension = TEXTUREDIMENSION_2D, sampleType = SAMPLETYPE_FLOAT) {
    this.scopeId = void 0;
    this.name = name;
    this.visibility = visibility;
    this.textureDimension = textureDimension;
    this.sampleType = sampleType;
  }

}

class BindGroupFormat {
  constructor(graphicsDevice, bufferFormats, textureFormats) {
    this.device = graphicsDevice;
    this.bufferFormats = bufferFormats;
    this.bufferFormatsMap = new Map();
    bufferFormats.forEach((bf, i) => this.bufferFormatsMap.set(bf.name, i));
    this.textureFormats = textureFormats;
    const scope = graphicsDevice.scope;
    this.textureFormatsMap = new Map();
    textureFormats.forEach((tf, i) => {
      this.textureFormatsMap.set(tf.name, i);
      tf.scopeId = scope.resolve(tf.name);
    });
    this.impl = graphicsDevice.createBindGroupFormatImpl(this);
  }

  destroy() {
    this.impl.destroy();
  }

  getTexture(name) {
    const index = this.textureFormatsMap.get(name);

    if (index !== undefined) {
      return this.textureFormats[index];
    }

    return null;
  }

  getShaderDeclarationTextures(bindGroup) {
    let code = '';
    let bindIndex = this.bufferFormats.length;
    this.textureFormats.forEach(format => {
      code += `layout(set = ${bindGroup}, binding = ${bindIndex++}) uniform texture2D ${format.name};\n` + `layout(set = ${bindGroup}, binding = ${bindIndex++}) uniform sampler ${format.name}_sampler;\n`;
    });
    return code;
  }

  loseContext() {}

}

class ColorAttachmentOps {
  constructor() {
    this.clearValue = new Color(0, 0, 0, 1);
    this.clear = false;
    this.store = false;
    this.resolve = true;
    this.mipmaps = false;
  }

}

class DepthStencilAttachmentOps {
  constructor() {
    this.clearDepthValue = 1;
    this.clearStencilValue = 0;
    this.clearDepth = false;
    this.clearStencil = false;
    this.storeDepth = false;
    this.storeStencil = false;
  }

}

class RenderPass {
  constructor(graphicsDevice, execute) {
    this.name = void 0;
    this.renderTarget = void 0;
    this.samples = 0;
    this.colorOps = void 0;
    this.depthStencilOps = void 0;
    this.requiresCubemaps = true;
    this.fullSizeClearRect = true;
    this.device = graphicsDevice;
    this.execute = execute;
  }

  init(renderTarget) {
    var _this$renderTarget, _this$renderTarget$co;

    this.renderTarget = renderTarget || null;
    this.colorOps = new ColorAttachmentOps();
    this.depthStencilOps = new DepthStencilAttachmentOps();
    this.samples = Math.max(this.renderTarget ? this.renderTarget.samples : this.device.samples, 1);

    if (this.samples === 1) {
      this.colorOps.store = true;
      this.colorOps.resolve = false;
    }

    if ((_this$renderTarget = this.renderTarget) != null && (_this$renderTarget$co = _this$renderTarget.colorBuffer) != null && _this$renderTarget$co.mipmaps) {
      this.colorOps.mipmaps = true;
    }
  }

  setClearColor(color) {
    this.colorOps.clearValue.copy(color);
    this.colorOps.clear = true;
  }

  setClearDepth(depthValue) {
    this.depthStencilOps.clearDepthValue = depthValue;
    this.depthStencilOps.clearDepth = true;
  }

  setClearStencil(stencilValue) {
    this.depthStencilOps.clearStencilValue = stencilValue;
    this.depthStencilOps.clearStencil = true;
  }

  render() {
    const device = this.device;
    const realPass = this.renderTarget !== undefined;

    if (realPass) {
      device.startPass(this);
    }

    this.execute();

    if (realPass) {
      device.endPass(this);
    }
  }

}

const textureBlitVertexShader = `
    attribute vec2 vertex_position;
    varying vec2 uv0;
    void main(void) {
        gl_Position = vec4(vertex_position, 0.5, 1.0);
        uv0 = vertex_position.xy * 0.5 + 0.5;
    }`;
const textureBlitFragmentShader = `
    varying vec2 uv0;
    uniform sampler2D blitTexture;
    void main(void) {
        gl_FragColor = texture2D(blitTexture, uv0);
    }`;
const textureCubeBlitFragmentShader = `
    varying vec2 uv0;
    uniform samplerCube blitTexture;
    uniform mat4 invViewProj;
    void main(void) {
        vec4 projPos = vec4(uv0 * 2.0 - 1.0, 0.5, 1.0);
        vec4 worldPos = invViewProj * projPos;
        gl_FragColor = textureCube(blitTexture, worldPos.xyz);
    }`;

const _viewport$1 = new Vec4();

class CookieRenderer {
  constructor(device, lightTextureAtlas) {
    this.device = device;
    this.lightTextureAtlas = lightTextureAtlas;
    this.blitShader2d = null;
    this.blitShaderCube = null;
    this.blitTextureId = null;
    this.invViewProjId = null;
  }

  destroy() {}

  getShader(shader, fragment) {
    if (!this[shader]) this[shader] = createShaderFromCode(this.device, textureBlitVertexShader, fragment, `cookie_renderer_${shader}`);
    if (!this.blitTextureId) this.blitTextureId = this.device.scope.resolve('blitTexture');
    if (!this.invViewProjId) this.invViewProjId = this.device.scope.resolve('invViewProj');
    return this[shader];
  }

  get shader2d() {
    return this.getShader('blitShader2d', textureBlitFragmentShader);
  }

  get shaderCube() {
    return this.getShader('blitShaderCube', textureCubeBlitFragmentShader);
  }

  static createTexture(device, resolution) {
    const texture = new Texture(device, {
      name: 'CookieAtlas',
      width: resolution,
      height: resolution,
      format: PIXELFORMAT_R8_G8_B8_A8,
      cubemap: false,
      mipmaps: false,
      minFilter: FILTER_NEAREST,
      magFilter: FILTER_NEAREST,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE
    });
    return texture;
  }

  initInvViewProjMatrices() {
    if (!CookieRenderer._invViewProjMatrices) {
      CookieRenderer._invViewProjMatrices = [];

      for (let face = 0; face < 6; face++) {
        const camera = LightCamera.create(null, LIGHTTYPE_OMNI, face);
        const projMat = camera.projectionMatrix;
        const viewMat = camera.node.getLocalTransform().clone().invert();
        CookieRenderer._invViewProjMatrices[face] = new Mat4().mul2(projMat, viewMat).invert();
      }
    }
  }

  render(light, renderTarget) {
    if (light.enabled && light.cookie && light.visibleThisFrame) {
      const faceCount = light.numShadowFaces;
      const shader = faceCount > 1 ? this.shaderCube : this.shader2d;
      const device = this.device;

      if (faceCount > 1) {
        this.initInvViewProjMatrices();
      }

      this.blitTextureId.setValue(light.cookie);

      for (let face = 0; face < faceCount; face++) {
        _viewport$1.copy(light.atlasViewport);

        if (faceCount > 1) {
          const smallSize = _viewport$1.z / 3;
          const offset = this.lightTextureAtlas.cubeSlotsOffsets[face];
          _viewport$1.x += smallSize * offset.x;
          _viewport$1.y += smallSize * offset.y;
          _viewport$1.z = smallSize;
          _viewport$1.w = smallSize;
          this.invViewProjId.setValue(CookieRenderer._invViewProjMatrices[face].data);
        }

        _viewport$1.mulScalar(renderTarget.colorBuffer.width);

        drawQuadWithShader(device, renderTarget, shader, _viewport$1);
      }
    }
  }

}

CookieRenderer._invViewProjMatrices = null;

class ShadowMap {
  constructor(texture, targets) {
    this.texture = texture;
    this.cached = false;
    this.renderTargets = targets;
  }

  destroy() {
    if (this.texture) {
      this.texture.destroy();
      this.texture = null;
    }

    const targets = this.renderTargets;

    for (let i = 0; i < targets.length; i++) {
      targets[i].destroy();
    }

    this.renderTargets.length = 0;
  }

  static getShadowFormat(device, shadowType) {
    if (shadowType === SHADOW_VSM32) {
      return PIXELFORMAT_RGBA32F;
    } else if (shadowType === SHADOW_VSM16) {
      return PIXELFORMAT_RGBA16F;
    } else if (shadowType === SHADOW_PCF5) {
      return PIXELFORMAT_DEPTH;
    } else if (shadowType === SHADOW_PCF3 && device.webgl2) {
      return PIXELFORMAT_DEPTH;
    }

    return PIXELFORMAT_R8_G8_B8_A8;
  }

  static getShadowFiltering(device, shadowType) {
    if (shadowType === SHADOW_PCF3 && !device.webgl2) {
      return FILTER_NEAREST;
    } else if (shadowType === SHADOW_VSM32) {
      return device.extTextureFloatLinear ? FILTER_LINEAR : FILTER_NEAREST;
    } else if (shadowType === SHADOW_VSM16) {
      return device.extTextureHalfFloatLinear ? FILTER_LINEAR : FILTER_NEAREST;
    }

    return FILTER_LINEAR;
  }

  static create(device, light) {
    let shadowMap = null;

    if (light._type === LIGHTTYPE_OMNI) {
      shadowMap = this.createCubemap(device, light._shadowResolution);
    } else {
      shadowMap = this.create2dMap(device, light._shadowResolution, light._shadowType);
    }

    return shadowMap;
  }

  static createAtlas(device, resolution, shadowType) {
    const shadowMap = this.create2dMap(device, resolution, shadowType);
    const targets = shadowMap.renderTargets;
    const rt = targets[0];

    for (let i = 0; i < 5; i++) {
      targets.push(rt);
    }

    return shadowMap;
  }

  static create2dMap(device, size, shadowType) {
    const format = this.getShadowFormat(device, shadowType);
    const filter = this.getShadowFiltering(device, shadowType);
    const texture = new Texture(device, {
      format: format,
      width: size,
      height: size,
      mipmaps: false,
      minFilter: filter,
      magFilter: filter,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      name: 'ShadowMap2D'
    });
    let target = null;

    if (shadowType === SHADOW_PCF5 || shadowType === SHADOW_PCF3 && device.webgl2) {
      texture.compareOnRead = true;
      texture.compareFunc = FUNC_LESS;
      target = new RenderTarget({
        depthBuffer: texture
      });
    } else {
      target = new RenderTarget({
        colorBuffer: texture,
        depth: true
      });
    }

    return new ShadowMap(texture, [target]);
  }

  static createCubemap(device, size) {
    const cubemap = new Texture(device, {
      format: PIXELFORMAT_R8_G8_B8_A8,
      width: size,
      height: size,
      cubemap: true,
      mipmaps: false,
      minFilter: FILTER_NEAREST,
      magFilter: FILTER_NEAREST,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      name: 'ShadowMapCube'
    });
    const targets = [];

    for (let i = 0; i < 6; i++) {
      const target = new RenderTarget({
        colorBuffer: cubemap,
        face: i,
        depth: true
      });
      targets.push(target);
    }

    return new ShadowMap(cubemap, targets);
  }

}

const _tempArray = [];
const _tempArray2 = [];

const _viewport = new Vec4();

const _scissor = new Vec4();

class Slot {
  constructor(rect) {
    this.size = Math.floor(rect.w * 1024);
    this.used = false;
    this.lightId = -1;
    this.rect = rect;
  }

}

class LightTextureAtlas {
  constructor(device) {
    this.device = device;
    this.version = 1;
    this.shadowAtlasResolution = 2048;
    this.shadowAtlas = null;
    this.shadowEdgePixels = 3;
    this.cookieAtlasResolution = 2048;
    this.cookieAtlas = null;
    this.cookieRenderTarget = null;
    this.slots = [];
    this.atlasSplit = [];
    this.cubeSlotsOffsets = [new Vec2(0, 0), new Vec2(0, 1), new Vec2(1, 0), new Vec2(1, 1), new Vec2(2, 0), new Vec2(2, 1)];
    this.scissorVec = new Vec4();
    this.allocateShadowAtlas(1);
    this.allocateCookieAtlas(1);
    this.allocateUniforms();
  }

  destroy() {
    this.destroyShadowAtlas();
    this.destroyCookieAtlas();
  }

  destroyShadowAtlas() {
    if (this.shadowAtlas) {
      this.shadowAtlas.destroy();
      this.shadowAtlas = null;
    }
  }

  destroyCookieAtlas() {
    if (this.cookieAtlas) {
      this.cookieAtlas.destroy();
      this.cookieAtlas = null;
    }

    if (this.cookieRenderTarget) {
      this.cookieRenderTarget.destroy();
      this.cookieRenderTarget = null;
    }
  }

  allocateShadowAtlas(resolution) {
    if (!this.shadowAtlas || this.shadowAtlas.texture.width !== resolution) {
      this.version++;
      this.destroyShadowAtlas();
      this.shadowAtlas = ShadowMap.createAtlas(this.device, resolution, SHADOW_PCF3);
      this.shadowAtlas.cached = true;
      const scissorOffset = 4 / this.shadowAtlasResolution;
      this.scissorVec.set(scissorOffset, scissorOffset, -2 * scissorOffset, -2 * scissorOffset);
    }
  }

  allocateCookieAtlas(resolution) {
    if (!this.cookieAtlas || this.cookieAtlas.width !== resolution) {
      this.version++;
      this.destroyCookieAtlas();
      this.cookieAtlas = CookieRenderer.createTexture(this.device, resolution);
      this.cookieRenderTarget = new RenderTarget({
        colorBuffer: this.cookieAtlas,
        depth: false,
        flipY: true
      });
    }
  }

  allocateUniforms() {
    this._shadowAtlasTextureId = this.device.scope.resolve('shadowAtlasTexture');
    this._shadowAtlasParamsId = this.device.scope.resolve('shadowAtlasParams');
    this._shadowAtlasParams = new Float32Array(2);
    this._cookieAtlasTextureId = this.device.scope.resolve('cookieAtlasTexture');
  }

  updateUniforms() {
    const isShadowFilterPcf = true;
    const rt = this.shadowAtlas.renderTargets[0];
    const shadowBuffer = this.device.webgl2 && isShadowFilterPcf ? rt.depthBuffer : rt.colorBuffer;

    this._shadowAtlasTextureId.setValue(shadowBuffer);

    this._shadowAtlasParams[0] = this.shadowAtlasResolution;
    this._shadowAtlasParams[1] = this.shadowEdgePixels;

    this._shadowAtlasParamsId.setValue(this._shadowAtlasParams);

    this._cookieAtlasTextureId.setValue(this.cookieAtlas);
  }

  subdivide(numLights, lightingParams) {
    let atlasSplit = lightingParams.atlasSplit;

    if (!atlasSplit) {
      const gridSize = Math.ceil(Math.sqrt(numLights));
      atlasSplit = _tempArray2;
      atlasSplit[0] = gridSize;
      atlasSplit.length = 1;
    }

    const arraysEqual = (a, b) => a.length === b.length && a.every((v, i) => v === b[i]);

    if (!arraysEqual(atlasSplit, this.atlasSplit)) {
      this.version++;
      this.slots.length = 0;
      this.atlasSplit.length = 0;
      this.atlasSplit.push(...atlasSplit);
      const splitCount = this.atlasSplit[0];

      if (splitCount > 1) {
        const invSize = 1 / splitCount;

        for (let i = 0; i < splitCount; i++) {
          for (let j = 0; j < splitCount; j++) {
            const rect = new Vec4(i * invSize, j * invSize, invSize, invSize);
            const nextLevelSplit = this.atlasSplit[1 + i * splitCount + j];

            if (nextLevelSplit > 1) {
              for (let x = 0; x < nextLevelSplit; x++) {
                for (let y = 0; y < nextLevelSplit; y++) {
                  const invSizeNext = invSize / nextLevelSplit;
                  const rectNext = new Vec4(rect.x + x * invSizeNext, rect.y + y * invSizeNext, invSizeNext, invSizeNext);
                  this.slots.push(new Slot(rectNext));
                }
              }
            } else {
              this.slots.push(new Slot(rect));
            }
          }
        }
      } else {
        this.slots.push(new Slot(new Vec4(0, 0, 1, 1)));
      }

      this.slots.sort((a, b) => {
        return b.size - a.size;
      });
    }
  }

  collectLights(spotLights, omniLights, lightingParams) {
    const cookiesEnabled = lightingParams.cookiesEnabled;
    const shadowsEnabled = lightingParams.shadowsEnabled;
    let needsShadowAtlas = false;
    let needsCookieAtlas = false;
    const lights = _tempArray;
    lights.length = 0;

    const processLights = list => {
      for (let i = 0; i < list.length; i++) {
        const light = list[i];

        if (light.visibleThisFrame) {
          const lightShadow = shadowsEnabled && light.castShadows;
          const lightCookie = cookiesEnabled && !!light.cookie;
          needsShadowAtlas || (needsShadowAtlas = lightShadow);
          needsCookieAtlas || (needsCookieAtlas = lightCookie);

          if (lightShadow || lightCookie) {
            lights.push(light);
          }
        }
      }
    };

    if (cookiesEnabled || shadowsEnabled) {
      processLights(spotLights);
      processLights(omniLights);
    }

    lights.sort((a, b) => {
      return b.maxScreenSize - a.maxScreenSize;
    });

    if (needsShadowAtlas) {
      this.allocateShadowAtlas(this.shadowAtlasResolution);
    }

    if (needsCookieAtlas) {
      this.allocateCookieAtlas(this.cookieAtlasResolution);
    }

    if (needsShadowAtlas || needsCookieAtlas) {
      this.subdivide(lights.length, lightingParams);
    }

    return lights;
  }

  setupSlot(light, rect) {
    light.atlasViewport.copy(rect);
    const faceCount = light.numShadowFaces;

    for (let face = 0; face < faceCount; face++) {
      if (light.castShadows || light._cookie) {
        _viewport.copy(rect);

        _scissor.copy(rect);

        if (light._type === LIGHTTYPE_SPOT) {
          _viewport.add(this.scissorVec);
        }

        if (light._type === LIGHTTYPE_OMNI) {
          const smallSize = _viewport.z / 3;
          const offset = this.cubeSlotsOffsets[face];
          _viewport.x += smallSize * offset.x;
          _viewport.y += smallSize * offset.y;
          _viewport.z = smallSize;
          _viewport.w = smallSize;

          _scissor.copy(_viewport);
        }

        if (light.castShadows) {
          const lightRenderData = light.getRenderData(null, face);
          lightRenderData.shadowViewport.copy(_viewport);
          lightRenderData.shadowScissor.copy(_scissor);
        }
      }
    }
  }

  assignSlot(light, slotIndex, slotReassigned) {
    light.atlasViewportAllocated = true;
    const slot = this.slots[slotIndex];
    slot.lightId = light.id;
    slot.used = true;

    if (slotReassigned) {
      light.atlasSlotUpdated = true;
      light.atlasVersion = this.version;
      light.atlasSlotIndex = slotIndex;
    }
  }

  update(spotLights, omniLights, lightingParams) {
    this.shadowAtlasResolution = lightingParams.shadowAtlasResolution;
    this.cookieAtlasResolution = lightingParams.cookieAtlasResolution;
    const lights = this.collectLights(spotLights, omniLights, lightingParams);

    if (lights.length > 0) {
      const slots = this.slots;

      for (let i = 0; i < slots.length; i++) {
        slots[i].used = false;
      }

      const assignCount = Math.min(lights.length, slots.length);

      for (let i = 0; i < assignCount; i++) {
        const light = lights[i];
        if (light.castShadows) light._shadowMap = this.shadowAtlas;
        const previousSlot = slots[light.atlasSlotIndex];

        if (light.atlasVersion === this.version && light.id === (previousSlot == null ? void 0 : previousSlot.lightId)) {
          const _previousSlot = slots[light.atlasSlotIndex];

          if (_previousSlot.size === slots[i].size && !_previousSlot.used) {
            this.assignSlot(light, light.atlasSlotIndex, false);
          }
        }
      }

      let usedCount = 0;

      for (let i = 0; i < assignCount; i++) {
        while (usedCount < slots.length && slots[usedCount].used) usedCount++;

        const light = lights[i];

        if (!light.atlasViewportAllocated) {
          this.assignSlot(light, usedCount, true);
        }

        const slot = slots[light.atlasSlotIndex];
        this.setupSlot(light, slot.rect);
      }
    }

    this.updateUniforms();
  }

}

class ShadowMapCache {
  constructor() {
    this.shadowMapCache = new Map();
  }

  destroy() {
    this.clear();
    this.shadowMapCache = null;
  }

  clear() {
    this.shadowMapCache.forEach(shadowMaps => {
      shadowMaps.forEach(shadowMap => {
        shadowMap.destroy();
      });
    });
    this.shadowMapCache.clear();
  }

  getKey(light) {
    const isCubeMap = light._type === LIGHTTYPE_OMNI;
    const shadowType = light._shadowType;
    const resolution = light._shadowResolution;
    return `${isCubeMap}-${shadowType}-${resolution}`;
  }

  get(device, light) {
    const key = this.getKey(light);
    const shadowMaps = this.shadowMapCache.get(key);

    if (shadowMaps && shadowMaps.length) {
      return shadowMaps.pop();
    }

    const shadowMap = ShadowMap.create(device, light);
    shadowMap.cached = true;
    return shadowMap;
  }

  add(light, shadowMap) {
    const key = this.getKey(light);
    const shadowMaps = this.shadowMapCache.get(key);

    if (shadowMaps) {
      shadowMaps.push(shadowMap);
    } else {
      this.shadowMapCache.set(key, [shadowMap]);
    }
  }

}

const aabbPoints = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];
const _depthRange = {
  min: 0,
  max: 0
};

function getDepthRange(cameraViewMatrix, aabbMin, aabbMax) {
  aabbPoints[0].x = aabbPoints[1].x = aabbPoints[2].x = aabbPoints[3].x = aabbMin.x;
  aabbPoints[1].y = aabbPoints[3].y = aabbPoints[7].y = aabbPoints[5].y = aabbMin.y;
  aabbPoints[2].z = aabbPoints[3].z = aabbPoints[6].z = aabbPoints[7].z = aabbMin.z;
  aabbPoints[4].x = aabbPoints[5].x = aabbPoints[6].x = aabbPoints[7].x = aabbMax.x;
  aabbPoints[0].y = aabbPoints[2].y = aabbPoints[4].y = aabbPoints[6].y = aabbMax.y;
  aabbPoints[0].z = aabbPoints[1].z = aabbPoints[4].z = aabbPoints[5].z = aabbMax.z;
  let minz = 9999999999;
  let maxz = -9999999999;

  for (let i = 0; i < 8; ++i) {
    cameraViewMatrix.transformPoint(aabbPoints[i], aabbPoints[i]);
    const z = aabbPoints[i].z;
    if (z < minz) minz = z;
    if (z > maxz) maxz = z;
  }

  _depthRange.min = minz;
  _depthRange.max = maxz;
  return _depthRange;
}

function gauss(x, sigma) {
  return Math.exp(-(x * x) / (2.0 * sigma * sigma));
}

const maxBlurSize = 25;

function gaussWeights(kernelSize) {
  if (kernelSize > maxBlurSize) {
    kernelSize = maxBlurSize;
  }

  const sigma = (kernelSize - 1) / (2 * 3);
  const halfWidth = (kernelSize - 1) * 0.5;
  const values = new Array(kernelSize);
  let sum = 0.0;

  for (let i = 0; i < kernelSize; ++i) {
    values[i] = gauss(i - halfWidth, sigma);
    sum += values[i];
  }

  for (let i = 0; i < kernelSize; ++i) {
    values[i] /= sum;
  }

  return values;
}

const visibleSceneAabb = new BoundingBox();
const shadowCamView = new Mat4();
const shadowCamViewProj = new Mat4();
const pixelOffset = new Float32Array(2);
const blurScissorRect = new Vec4(1, 1, 0, 0);
const opChanId = {
  r: 1,
  g: 2,
  b: 3,
  a: 4
};
const center = new Vec3();
const viewportMatrix = new Mat4();

function getDepthKey(meshInstance) {
  const material = meshInstance.material;
  const x = meshInstance.skinInstance ? 10 : 0;
  let y = 0;

  if (material.opacityMap) {
    const opChan = material.opacityMapChannel;

    if (opChan) {
      y = opChanId[opChan];
    }
  }

  return x + y;
}

class ShadowRenderer {
  constructor(forwardRenderer, lightTextureAtlas) {
    this.device = forwardRenderer.device;
    this.forwardRenderer = forwardRenderer;
    this.lightTextureAtlas = lightTextureAtlas;
    const scope = this.device.scope;
    this.polygonOffsetId = scope.resolve('polygonOffset');
    this.polygonOffset = new Float32Array(2);
    this.sourceId = scope.resolve('source');
    this.pixelOffsetId = scope.resolve('pixelOffset');
    this.weightId = scope.resolve('weight[0]');
    this.blurVsmShaderCode = [shaderChunks.blurVSMPS, '#define GAUSS\n' + shaderChunks.blurVSMPS];
    const packed = '#define PACKED\n';
    this.blurPackedVsmShaderCode = [packed + this.blurVsmShaderCode[0], packed + this.blurVsmShaderCode[1]];
    this.blurVsmShader = [{}, {}];
    this.blurPackedVsmShader = [{}, {}];
    this.blurVsmWeights = {};
    this.shadowMapLightRadiusId = scope.resolve('light_radius');
    this.shadowMapCache = new ShadowMapCache();
  }

  destroy() {
    this.shadowMapCache.destroy();
    this.shadowMapCache = null;
  }

  static createShadowCamera(device, shadowType, type, face) {
    const shadowCam = LightCamera.create('ShadowCamera', type, face);

    if (shadowType >= SHADOW_VSM8 && shadowType <= SHADOW_VSM32) {
      shadowCam.clearColor = new Color(0, 0, 0, 0);
    } else {
      shadowCam.clearColor = new Color(1, 1, 1, 1);
    }

    shadowCam.clearDepthBuffer = true;
    shadowCam.clearStencilBuffer = false;
    return shadowCam;
  }

  static setShadowCameraSettings(shadowCam, device, shadowType, type, isClustered) {
    let hwPcf = shadowType === SHADOW_PCF5 || shadowType === SHADOW_PCF3 && device.webgl2;

    if (type === LIGHTTYPE_OMNI && !isClustered) {
      hwPcf = false;
    }

    shadowCam.clearColorBuffer = !hwPcf;
  }

  cullShadowCasters(meshInstances, visible, camera) {
    let count = 0;
    const numInstances = meshInstances.length;

    for (let i = 0; i < numInstances; i++) {
      const meshInstance = meshInstances[i];

      if (!meshInstance.cull || meshInstance._isVisible(camera)) {
        meshInstance.visibleThisFrame = true;
        visible[count] = meshInstance;
        count++;
      }
    }

    visible.length = count;
    visible.sort(this.forwardRenderer.depthSortCompare);
  }

  cullLocal(light, drawCalls) {
    const isClustered = this.forwardRenderer.scene.clusteredLightingEnabled;
    light.visibleThisFrame = true;

    if (!isClustered) {
      if (!light._shadowMap) {
        light._shadowMap = ShadowMap.create(this.device, light);
      }
    }

    const type = light._type;
    const faceCount = type === LIGHTTYPE_SPOT ? 1 : 6;

    for (let face = 0; face < faceCount; face++) {
      const lightRenderData = light.getRenderData(null, face);
      const shadowCam = lightRenderData.shadowCamera;
      shadowCam.nearClip = light.attenuationEnd / 1000;
      shadowCam.farClip = light.attenuationEnd;
      const shadowCamNode = shadowCam._node;
      const lightNode = light._node;
      shadowCamNode.setPosition(lightNode.getPosition());

      if (type === LIGHTTYPE_SPOT) {
        shadowCam.fov = light._outerConeAngle * 2;
        shadowCamNode.setRotation(lightNode.getRotation());
        shadowCamNode.rotateLocal(-90, 0, 0);
      } else if (type === LIGHTTYPE_OMNI) {
        if (isClustered) {
          const tileSize = this.lightTextureAtlas.shadowAtlasResolution * light.atlasViewport.z / 3;
          const texelSize = 2 / tileSize;
          const filterSize = texelSize * this.lightTextureAtlas.shadowEdgePixels;
          shadowCam.fov = Math.atan(1 + filterSize) * math$1.RAD_TO_DEG * 2;
        } else {
          shadowCam.fov = 90;
        }
      }

      this.forwardRenderer.updateCameraFrustum(shadowCam);
      this.cullShadowCasters(drawCalls, lightRenderData.visibleCasters, shadowCam);
    }
  }

  generateSplitDistances(light, nearDist, farDist) {
    light._shadowCascadeDistances.fill(farDist);

    for (let i = 1; i < light.numCascades; i++) {
      const fraction = i / light.numCascades;
      const linearDist = nearDist + (farDist - nearDist) * fraction;
      const logDist = nearDist * (farDist / nearDist) ** fraction;
      const dist = math$1.lerp(linearDist, logDist, light.cascadeDistribution);
      light._shadowCascadeDistances[i - 1] = dist;
    }
  }

  cullDirectional(light, drawCalls, camera) {
    light.visibleThisFrame = true;

    if (!light._shadowMap) {
      light._shadowMap = ShadowMap.create(this.device, light);
    }

    const nearDist = camera._nearClip;
    this.generateSplitDistances(light, nearDist, light.shadowDistance);

    for (let cascade = 0; cascade < light.numCascades; cascade++) {
      const lightRenderData = light.getRenderData(camera, cascade);
      const shadowCam = lightRenderData.shadowCamera;
      shadowCam.renderTarget = light._shadowMap.renderTargets[0];
      lightRenderData.shadowViewport.copy(light.cascades[cascade]);
      lightRenderData.shadowScissor.copy(light.cascades[cascade]);
      const shadowCamNode = shadowCam._node;
      const lightNode = light._node;
      shadowCamNode.setPosition(lightNode.getPosition());
      shadowCamNode.setRotation(lightNode.getRotation());
      shadowCamNode.rotateLocal(-90, 0, 0);
      const frustumNearDist = cascade === 0 ? nearDist : light._shadowCascadeDistances[cascade - 1];
      const frustumFarDist = light._shadowCascadeDistances[cascade];
      const frustumPoints = Frustum.getPoints(camera, frustumNearDist, frustumFarDist);
      center.set(0, 0, 0);
      const cameraWorldMat = camera.node.getWorldTransform();

      for (let i = 0; i < 8; i++) {
        cameraWorldMat.transformPoint(frustumPoints[i], frustumPoints[i]);
        center.add(frustumPoints[i]);
      }

      center.mulScalar(1 / 8);
      let radius = 0;

      for (let i = 0; i < 8; i++) {
        const dist = frustumPoints[i].sub(center).length();
        if (dist > radius) radius = dist;
      }

      const right = shadowCamNode.right;
      const up = shadowCamNode.up;
      const lightDir = shadowCamNode.forward;
      const sizeRatio = 0.25 * light._shadowResolution / radius;
      const x = Math.ceil(center.dot(up) * sizeRatio) / sizeRatio;
      const y = Math.ceil(center.dot(right) * sizeRatio) / sizeRatio;
      const scaledUp = up.mulScalar(x);
      const scaledRight = right.mulScalar(y);
      const dot = center.dot(lightDir);
      const scaledDir = lightDir.mulScalar(dot);
      center.add2(scaledUp, scaledRight).add(scaledDir);
      shadowCamNode.setPosition(center);
      shadowCamNode.translateLocal(0, 0, 1000000);
      shadowCam.nearClip = 0;
      shadowCam.farClip = 2000000;
      shadowCam.orthoHeight = radius;
      this.forwardRenderer.updateCameraFrustum(shadowCam);
      this.cullShadowCasters(drawCalls, lightRenderData.visibleCasters, shadowCam);
      let emptyAabb = true;
      const visibleCasters = lightRenderData.visibleCasters;

      for (let i = 0; i < visibleCasters.length; i++) {
        const meshInstance = visibleCasters[i];

        if (emptyAabb) {
          emptyAabb = false;
          visibleSceneAabb.copy(meshInstance.aabb);
        } else {
          visibleSceneAabb.add(meshInstance.aabb);
        }
      }

      shadowCamView.copy(shadowCamNode.getWorldTransform()).invert();
      const depthRange = getDepthRange(shadowCamView, visibleSceneAabb.getMin(), visibleSceneAabb.getMax());
      shadowCamNode.translateLocal(0, 0, depthRange.max + 0.1);
      shadowCam.farClip = depthRange.max - depthRange.min + 0.2;
    }
  }

  setupRenderState(device, light) {
    const isClustered = this.forwardRenderer.scene.clusteredLightingEnabled;

    if (device.webgl2) {
      if (light._type === LIGHTTYPE_OMNI && !isClustered) {
        device.setDepthBias(false);
      } else {
        device.setDepthBias(true);
        device.setDepthBiasValues(light.shadowBias * -1000.0, light.shadowBias * -1000.0);
      }
    } else if (device.extStandardDerivatives) {
      if (light._type === LIGHTTYPE_OMNI) {
        this.polygonOffset[0] = 0;
        this.polygonOffset[1] = 0;
        this.polygonOffsetId.setValue(this.polygonOffset);
      } else {
        this.polygonOffset[0] = light.shadowBias * -1000.0;
        this.polygonOffset[1] = light.shadowBias * -1000.0;
        this.polygonOffsetId.setValue(this.polygonOffset);
      }
    }

    device.setBlending(false);
    device.setDepthWrite(true);
    device.setDepthTest(true);
    device.setDepthFunc(FUNC_LESSEQUAL);
    const useShadowSampler = isClustered ? light._isPcf && device.webgl2 : light._isPcf && device.webgl2 && light._type !== LIGHTTYPE_OMNI;

    if (useShadowSampler) {
      device.setColorWrite(false, false, false, false);
    } else {
      device.setColorWrite(true, true, true, true);
    }
  }

  restoreRenderState(device) {
    if (device.webgl2) {
      device.setDepthBias(false);
    } else if (device.extStandardDerivatives) {
      this.polygonOffset[0] = 0;
      this.polygonOffset[1] = 0;
      this.polygonOffsetId.setValue(this.polygonOffset);
    }
  }

  dispatchUniforms(light, shadowCam, lightRenderData, face) {
    const shadowCamNode = shadowCam._node;

    if (light._type !== LIGHTTYPE_DIRECTIONAL) {
      this.forwardRenderer.dispatchViewPos(shadowCamNode.getPosition());
      this.shadowMapLightRadiusId.setValue(light.attenuationEnd);
    }

    shadowCamView.setTRS(shadowCamNode.getPosition(), shadowCamNode.getRotation(), Vec3.ONE).invert();
    shadowCamViewProj.mul2(shadowCam.projectionMatrix, shadowCamView);
    const rectViewport = lightRenderData.shadowViewport;
    shadowCam.rect = rectViewport;
    shadowCam.scissorRect = lightRenderData.shadowScissor;
    viewportMatrix.setViewport(rectViewport.x, rectViewport.y, rectViewport.z, rectViewport.w);
    lightRenderData.shadowMatrix.mul2(viewportMatrix, shadowCamViewProj);

    if (light._type === LIGHTTYPE_DIRECTIONAL) {
      light._shadowMatrixPalette.set(lightRenderData.shadowMatrix.data, face * 16);
    }
  }

  submitCasters(visibleCasters, light) {
    const device = this.device;
    const forwardRenderer = this.forwardRenderer;
    const scene = forwardRenderer.scene;
    const passFlags = 1 << SHADER_SHADOW;
    const shadowPass = ShaderPass.getShadow(light._type, light._shadowType);
    const count = visibleCasters.length;

    for (let i = 0; i < count; i++) {
      const meshInstance = visibleCasters[i];
      const mesh = meshInstance.mesh;
      meshInstance.ensureMaterial(device);
      const material = meshInstance.material;
      forwardRenderer.setBaseConstants(device, material);
      forwardRenderer.setSkinning(device, meshInstance, material);

      if (material.dirty) {
        material.updateUniforms(device, scene);
        material.dirty = false;
      }

      if (material.chunks) {
        forwardRenderer.setCullMode(true, false, meshInstance);
        material.setParameters(device);
        meshInstance.setParameters(device, passFlags);
      }

      let shadowShader = meshInstance._shader[shadowPass];

      if (!shadowShader) {
        meshInstance.updatePassShader(scene, shadowPass);
        shadowShader = meshInstance._shader[shadowPass];
        meshInstance._key[SORTKEY_DEPTH] = getDepthKey(meshInstance);
      }

      if (!shadowShader.failed && !device.setShader(shadowShader)) ;

      forwardRenderer.setVertexBuffers(device, mesh);
      forwardRenderer.setMorphing(device, meshInstance.morphInstance);
      const style = meshInstance.renderStyle;
      device.setIndexBuffer(mesh.indexBuffer[style]);
      forwardRenderer.drawInstance(device, meshInstance, mesh, style);
      forwardRenderer._shadowDrawCalls++;
    }
  }

  render(light, camera) {
    if (light.enabled && light.castShadows && light.shadowUpdateMode !== SHADOWUPDATE_NONE && light.visibleThisFrame) {
      const device = this.device;

      if (light.shadowUpdateMode === SHADOWUPDATE_THISFRAME) {
        light.shadowUpdateMode = SHADOWUPDATE_NONE;
      }

      const type = light._type;
      const shadowType = light._shadowType;
      const faceCount = light.numShadowFaces;
      const forwardRenderer = this.forwardRenderer;
      forwardRenderer._shadowMapUpdates += faceCount;
      const isClustered = forwardRenderer.scene.clusteredLightingEnabled;
      this.setupRenderState(device, light);

      for (let face = 0; face < faceCount; face++) {
        const lightRenderData = light.getRenderData(type === LIGHTTYPE_DIRECTIONAL ? camera : null, face);
        const shadowCam = lightRenderData.shadowCamera;
        ShadowRenderer.setShadowCameraSettings(shadowCam, device, shadowType, type, isClustered);
        const renderTargetIndex = type === LIGHTTYPE_DIRECTIONAL ? 0 : face;
        shadowCam.renderTarget = light._shadowMap.renderTargets[renderTargetIndex];
        this.dispatchUniforms(light, shadowCam, lightRenderData, face);
        forwardRenderer.setCamera(shadowCam, shadowCam.renderTarget, true);
        this.submitCasters(lightRenderData.visibleCasters, light);
      }

      if (light._isVsm && light._vsmBlurSize > 1) {
        const _isClustered = this.forwardRenderer.scene.clusteredLightingEnabled;

        if (!_isClustered || type === LIGHTTYPE_DIRECTIONAL) {
          this.applyVsmBlur(light, camera);
        }
      }

      this.restoreRenderState(device);
    }
  }

  getVsmBlurShader(isVsm8, blurMode, filterSize) {
    let blurShader = (isVsm8 ? this.blurPackedVsmShader : this.blurVsmShader)[blurMode][filterSize];

    if (!blurShader) {
      this.blurVsmWeights[filterSize] = gaussWeights(filterSize);
      const blurVS = shaderChunks.fullscreenQuadVS;
      let blurFS = '#define SAMPLES ' + filterSize + '\n';

      if (isVsm8) {
        blurFS += this.blurPackedVsmShaderCode[blurMode];
      } else {
        blurFS += this.blurVsmShaderCode[blurMode];
      }

      const blurShaderName = 'blurVsm' + blurMode + '' + filterSize + '' + isVsm8;
      blurShader = createShaderFromCode(this.device, blurVS, blurFS, blurShaderName);

      if (isVsm8) {
        this.blurPackedVsmShader[blurMode][filterSize] = blurShader;
      } else {
        this.blurVsmShader[blurMode][filterSize] = blurShader;
      }
    }

    return blurShader;
  }

  applyVsmBlur(light, camera) {
    const device = this.device;
    const lightRenderData = light.getRenderData(light._type === LIGHTTYPE_DIRECTIONAL ? camera : null, 0);
    const shadowCam = lightRenderData.shadowCamera;
    const origShadowMap = shadowCam.renderTarget;
    const tempShadowMap = this.shadowMapCache.get(device, light);
    const tempRt = tempShadowMap.renderTargets[0];
    const isVsm8 = light._shadowType === SHADOW_VSM8;
    const blurMode = light.vsmBlurMode;
    const filterSize = light._vsmBlurSize;
    const blurShader = this.getVsmBlurShader(isVsm8, blurMode, filterSize);
    blurScissorRect.z = light._shadowResolution - 2;
    blurScissorRect.w = blurScissorRect.z;
    this.sourceId.setValue(origShadowMap.colorBuffer);
    pixelOffset[0] = 1 / light._shadowResolution;
    pixelOffset[1] = 0;
    this.pixelOffsetId.setValue(pixelOffset);
    if (blurMode === BLUR_GAUSSIAN) this.weightId.setValue(this.blurVsmWeights[filterSize]);
    drawQuadWithShader(device, tempRt, blurShader, null, blurScissorRect);
    this.sourceId.setValue(tempRt.colorBuffer);
    pixelOffset[1] = pixelOffset[0];
    pixelOffset[0] = 0;
    this.pixelOffsetId.setValue(pixelOffset);
    drawQuadWithShader(device, origShadowMap, blurShader, null, blurScissorRect);
    this.shadowMapCache.add(light, tempShadowMap);
  }

}

const tempSphere$2 = new BoundingSphere();

class StaticMeshes {
  static lightCompare(lightA, lightB) {
    return lightA.key - lightB.key;
  }

  static prepare(device, scene, meshInstances, lights) {
    const drawCalls = meshInstances;
    const drawCallsCount = drawCalls.length;
    const newDrawCalls = [];
    const minVec = new Vec3();
    const maxVec = new Vec3();
    const localLightBounds = new BoundingBox();
    const invMatrix = new Mat4();
    const triLightComb = [];
    const lightAabb = [];
    const triBounds = [];
    const staticLights = [];

    for (let i = 0; i < drawCallsCount; i++) {
      const drawCall = drawCalls[i];

      if (!drawCall.isStatic) {
        newDrawCalls.push(drawCall);
      } else {
        const aabb = drawCall.aabb;
        staticLights.length = 0;

        for (let lightTypePass = LIGHTTYPE_OMNI; lightTypePass <= LIGHTTYPE_SPOT; lightTypePass++) {
          for (let j = 0; j < lights.length; j++) {
            const light = lights[j];
            if (light._type !== lightTypePass) continue;

            if (light.enabled) {
              if (light.mask & drawCall.mask) {
                if (light.isStatic) {
                  if (!lightAabb[j]) {
                    lightAabb[j] = new BoundingBox();

                    light._node.getWorldTransform();

                    light.getBoundingSphere(tempSphere$2);
                    lightAabb[j].center.copy(tempSphere$2.center);
                    lightAabb[j].halfExtents.set(tempSphere$2.radius, tempSphere$2.radius, tempSphere$2.radius);
                  }

                  if (!lightAabb[j].intersects(aabb)) continue;
                  staticLights.push(j);
                }
              }
            }
          }
        }

        if (staticLights.length === 0) {
          newDrawCalls.push(drawCall);
          continue;
        }

        const mesh = drawCall.mesh;
        const vertexBuffer = mesh.vertexBuffer;
        const indexBuffer = mesh.indexBuffer[drawCall.renderStyle];
        const indices = indexBuffer.bytesPerIndex === 2 ? new Uint16Array(indexBuffer.lock()) : new Uint32Array(indexBuffer.lock());
        const numTris = mesh.primitive[drawCall.renderStyle].count / 3;
        const baseIndex = mesh.primitive[drawCall.renderStyle].base;
        const elems = vertexBuffer.format.elements;
        const vertSize = vertexBuffer.format.size / 4;
        const verts = new Float32Array(vertexBuffer.storage);
        let offsetP;

        for (let k = 0; k < elems.length; k++) {
          if (elems[k].name === SEMANTIC_POSITION) {
            offsetP = elems[k].offset / 4;
          }
        }

        triLightComb.length = numTris;

        for (let k = 0; k < numTris; k++) {
          triLightComb[k] = 0;
        }

        let triLightCombUsed = false;
        triBounds.length = numTris * 6;

        for (let k = 0; k < numTris; k++) {
          let minx = Number.MAX_VALUE;
          let miny = Number.MAX_VALUE;
          let minz = Number.MAX_VALUE;
          let maxx = -Number.MAX_VALUE;
          let maxy = -Number.MAX_VALUE;
          let maxz = -Number.MAX_VALUE;

          for (let v = 0; v < 3; v++) {
            let _index = indices[k * 3 + v + baseIndex];
            _index = _index * vertSize + offsetP;
            const _x = verts[_index];
            const _y = verts[_index + 1];
            const _z = verts[_index + 2];
            if (_x < minx) minx = _x;
            if (_y < miny) miny = _y;
            if (_z < minz) minz = _z;
            if (_x > maxx) maxx = _x;
            if (_y > maxy) maxy = _y;
            if (_z > maxz) maxz = _z;
          }

          const index = k * 6;
          triBounds[index] = minx;
          triBounds[index + 1] = miny;
          triBounds[index + 2] = minz;
          triBounds[index + 3] = maxx;
          triBounds[index + 4] = maxy;
          triBounds[index + 5] = maxz;
        }

        for (let s = 0; s < staticLights.length; s++) {
          const j = staticLights[s];
          invMatrix.copy(drawCall.node.worldTransform).invert();
          localLightBounds.setFromTransformedAabb(lightAabb[j], invMatrix);
          const minv = localLightBounds.getMin();
          const maxv = localLightBounds.getMax();
          const bit = 1 << s;

          for (let k = 0; k < numTris; k++) {
            const index = k * 6;

            if (triBounds[index] <= maxv.x && triBounds[index + 3] >= minv.x && triBounds[index + 1] <= maxv.y && triBounds[index + 4] >= minv.y && triBounds[index + 2] <= maxv.z && triBounds[index + 5] >= minv.z) {
              triLightComb[k] |= bit;
              triLightCombUsed = true;
            }
          }
        }

        if (triLightCombUsed) {
          const combIndices = {};

          for (let k = 0; k < numTris; k++) {
            const j = k * 3 + baseIndex;
            const combIbName = triLightComb[k];
            if (!combIndices[combIbName]) combIndices[combIbName] = [];
            const combIb = combIndices[combIbName];
            combIb.push(indices[j]);
            combIb.push(indices[j + 1]);
            combIb.push(indices[j + 2]);
          }

          for (const combIbName in combIndices) {
            const combIb = combIndices[combIbName];
            const ib = new IndexBuffer(device, indexBuffer.format, combIb.length, indexBuffer.usage);
            const ib2 = ib.bytesPerIndex === 2 ? new Uint16Array(ib.lock()) : new Uint32Array(ib.lock());
            ib2.set(combIb);
            ib.unlock();
            let minx = Number.MAX_VALUE;
            let miny = Number.MAX_VALUE;
            let minz = Number.MAX_VALUE;
            let maxx = -Number.MAX_VALUE;
            let maxy = -Number.MAX_VALUE;
            let maxz = -Number.MAX_VALUE;

            for (let k = 0; k < combIb.length; k++) {
              const index = combIb[k];
              const _x = verts[index * vertSize + offsetP];
              const _y = verts[index * vertSize + offsetP + 1];
              const _z = verts[index * vertSize + offsetP + 2];
              if (_x < minx) minx = _x;
              if (_y < miny) miny = _y;
              if (_z < minz) minz = _z;
              if (_x > maxx) maxx = _x;
              if (_y > maxy) maxy = _y;
              if (_z > maxz) maxz = _z;
            }

            minVec.set(minx, miny, minz);
            maxVec.set(maxx, maxy, maxz);
            const chunkAabb = new BoundingBox();
            chunkAabb.setMinMax(minVec, maxVec);
            const mesh2 = new Mesh(device);
            mesh2.vertexBuffer = vertexBuffer;
            mesh2.indexBuffer[0] = ib;
            mesh2.primitive[0].type = PRIMITIVE_TRIANGLES;
            mesh2.primitive[0].base = 0;
            mesh2.primitive[0].count = combIb.length;
            mesh2.primitive[0].indexed = true;
            mesh2.aabb = chunkAabb;
            const instance = new MeshInstance(mesh2, drawCall.material, drawCall.node);
            instance.isStatic = drawCall.isStatic;
            instance.visible = drawCall.visible;
            instance.layer = drawCall.layer;
            instance.castShadow = drawCall.castShadow;
            instance._receiveShadow = drawCall._receiveShadow;
            instance.cull = drawCall.cull;
            instance.pick = drawCall.pick;
            instance.mask = drawCall.mask;
            instance.parameters = drawCall.parameters;
            instance._shaderDefs = drawCall._shaderDefs;
            instance._staticSource = drawCall;

            if (drawCall._staticLightList) {
              instance._staticLightList = drawCall._staticLightList;
            } else {
              instance._staticLightList = [];
            }

            for (let k = 0; k < staticLights.length; k++) {
              const bit = 1 << k;

              if (combIbName & bit) {
                const lht = lights[staticLights[k]];

                if (instance._staticLightList.indexOf(lht) < 0) {
                  instance._staticLightList.push(lht);
                }
              }
            }

            instance._staticLightList.sort(StaticMeshes.lightCompare);

            newDrawCalls.push(instance);
          }
        } else {
          newDrawCalls.push(drawCall);
        }
      }
    }

    meshInstances.length = newDrawCalls.length;

    for (let i = 0; i < newDrawCalls.length; i++) {
      meshInstances[i] = newDrawCalls[i];
    }
  }

  static revert(meshInstances) {
    const drawCalls = meshInstances;
    const drawCallsCount = drawCalls.length;
    const newDrawCalls = [];
    let prevStaticSource;

    for (let i = 0; i < drawCallsCount; i++) {
      const drawCall = drawCalls[i];

      if (drawCall._staticSource) {
        if (drawCall._staticSource !== prevStaticSource) {
          newDrawCalls.push(drawCall._staticSource);
          prevStaticSource = drawCall._staticSource;
        }
      } else {
        newDrawCalls.push(drawCall);
      }
    }

    meshInstances.length = newDrawCalls.length;

    for (let i = 0; i < newDrawCalls.length; i++) {
      meshInstances[i] = newDrawCalls[i];
    }
  }

}

const viewInvMat = new Mat4();
const viewMat = new Mat4();
const viewMat3 = new Mat3();
const viewProjMat = new Mat4();
let projMat;
const flipYMat = new Mat4().setScale(1, -1, 1);
const flippedViewProjMat = new Mat4();
const flippedSkyboxProjMat = new Mat4();
const worldMatX = new Vec3();
const worldMatY = new Vec3();
const worldMatZ = new Vec3();
const webgl1DepthClearColor = new Color(254.0 / 255, 254.0 / 255, 254.0 / 255, 254.0 / 255);
const tempSphere$1 = new BoundingSphere();
const boneTextureSize = [0, 0, 0, 0];
let boneTexture, instancingData, modelMatrix;
let keyA$1, keyB$1;
let _skinUpdateIndex = 0;
const _drawCallList = {
  drawCalls: [],
  isNewMaterial: [],
  lightMaskChanged: []
};

const _tempMaterialSet = new Set();

class ForwardRenderer {
  constructor(graphicsDevice) {
    this.clustersDebugRendered = false;
    this.device = graphicsDevice;
    this.scene = null;
    this._shadowDrawCalls = 0;
    this._forwardDrawCalls = 0;
    this._skinDrawCalls = 0;
    this._numDrawCallsCulled = 0;
    this._instancedDrawCalls = 0;
    this._camerasRendered = 0;
    this._materialSwitches = 0;
    this._shadowMapUpdates = 0;
    this._shadowMapTime = 0;
    this._depthMapTime = 0;
    this._forwardTime = 0;
    this._cullTime = 0;
    this._sortTime = 0;
    this._skinTime = 0;
    this._morphTime = 0;
    this._layerCompositionUpdateTime = 0;
    this._lightClustersTime = 0;
    this._lightClusters = 0;
    const device = this.device;
    this.library = device.getProgramLibrary();
    this.lightTextureAtlas = new LightTextureAtlas(device);
    this._shadowRenderer = new ShadowRenderer(this, this.lightTextureAtlas);
    this._cookieRenderer = new CookieRenderer(device, this.lightTextureAtlas);
    const scope = device.scope;
    this.projId = scope.resolve('matrix_projection');
    this.projSkyboxId = scope.resolve('matrix_projectionSkybox');
    this.viewId = scope.resolve('matrix_view');
    this.viewId3 = scope.resolve('matrix_view3');
    this.viewInvId = scope.resolve('matrix_viewInverse');
    this.viewProjId = scope.resolve('matrix_viewProjection');
    this.flipYId = scope.resolve('projectionFlipY');
    this.viewPos = new Float32Array(3);
    this.viewPosId = scope.resolve('view_position');
    this.nearClipId = scope.resolve('camera_near');
    this.farClipId = scope.resolve('camera_far');
    this.cameraParamsId = scope.resolve('camera_params');
    this.tbnBasis = scope.resolve('tbnBasis');
    this.fogColorId = scope.resolve('fog_color');
    this.fogStartId = scope.resolve('fog_start');
    this.fogEndId = scope.resolve('fog_end');
    this.fogDensityId = scope.resolve('fog_density');
    this.modelMatrixId = scope.resolve('matrix_model');
    this.normalMatrixId = scope.resolve('matrix_normal');
    this.poseMatrixId = scope.resolve('matrix_pose[0]');
    this.boneTextureId = scope.resolve('texture_poseMap');
    this.boneTextureSizeId = scope.resolve('texture_poseMapSize');
    this.morphWeightsA = scope.resolve('morph_weights_a');
    this.morphWeightsB = scope.resolve('morph_weights_b');
    this.morphPositionTex = scope.resolve('morphPositionTex');
    this.morphNormalTex = scope.resolve('morphNormalTex');
    this.morphTexParams = scope.resolve('morph_tex_params');
    this.alphaTestId = scope.resolve('alpha_ref');
    this.opacityMapId = scope.resolve('texture_opacityMap');
    this.ambientId = scope.resolve('light_globalAmbient');
    this.exposureId = scope.resolve('exposure');
    this.skyboxIntensityId = scope.resolve('skyboxIntensity');
    this.lightColorId = [];
    this.lightDir = [];
    this.lightDirId = [];
    this.lightShadowMapId = [];
    this.lightShadowMatrixId = [];
    this.lightShadowParamsId = [];
    this.lightShadowIntensity = [];
    this.lightRadiusId = [];
    this.lightPos = [];
    this.lightPosId = [];
    this.lightWidth = [];
    this.lightWidthId = [];
    this.lightHeight = [];
    this.lightHeightId = [];
    this.lightInAngleId = [];
    this.lightOutAngleId = [];
    this.lightCookieId = [];
    this.lightCookieIntId = [];
    this.lightCookieMatrixId = [];
    this.lightCookieOffsetId = [];
    this.shadowMatrixPaletteId = [];
    this.shadowCascadeDistancesId = [];
    this.shadowCascadeCountId = [];
    this.screenSizeId = scope.resolve('uScreenSize');
    this._screenSize = new Float32Array(4);
    this.twoSidedLightingNegScaleFactorId = scope.resolve('twoSidedLightingNegScaleFactor');
    this.fogColor = new Float32Array(3);
    this.ambientColor = new Float32Array(3);
    this.cameraParams = new Float32Array(4);
    this.viewUniformFormat = null;
    this.viewBindGroupFormat = null;
  }

  destroy() {
    this._shadowRenderer.destroy();

    this._shadowRenderer = null;

    this._cookieRenderer.destroy();

    this._cookieRenderer = null;
    this.lightTextureAtlas.destroy();
    this.lightTextureAtlas = null;
  }

  sortCompare(drawCallA, drawCallB) {
    if (drawCallA.layer === drawCallB.layer) {
      if (drawCallA.drawOrder && drawCallB.drawOrder) {
        return drawCallA.drawOrder - drawCallB.drawOrder;
      } else if (drawCallA.zdist && drawCallB.zdist) {
        return drawCallB.zdist - drawCallA.zdist;
      } else if (drawCallA.zdist2 && drawCallB.zdist2) {
        return drawCallA.zdist2 - drawCallB.zdist2;
      }
    }

    return drawCallB._key[SORTKEY_FORWARD] - drawCallA._key[SORTKEY_FORWARD];
  }

  sortCompareMesh(drawCallA, drawCallB) {
    if (drawCallA.layer === drawCallB.layer) {
      if (drawCallA.drawOrder && drawCallB.drawOrder) {
        return drawCallA.drawOrder - drawCallB.drawOrder;
      } else if (drawCallA.zdist && drawCallB.zdist) {
        return drawCallB.zdist - drawCallA.zdist;
      }
    }

    keyA$1 = drawCallA._key[SORTKEY_FORWARD];
    keyB$1 = drawCallB._key[SORTKEY_FORWARD];

    if (keyA$1 === keyB$1 && drawCallA.mesh && drawCallB.mesh) {
      return drawCallB.mesh.id - drawCallA.mesh.id;
    }

    return keyB$1 - keyA$1;
  }

  depthSortCompare(drawCallA, drawCallB) {
    keyA$1 = drawCallA._key[SORTKEY_DEPTH];
    keyB$1 = drawCallB._key[SORTKEY_DEPTH];

    if (keyA$1 === keyB$1 && drawCallA.mesh && drawCallB.mesh) {
      return drawCallB.mesh.id - drawCallA.mesh.id;
    }

    return keyB$1 - keyA$1;
  }

  updateCameraFrustum(camera) {
    if (camera.xr && camera.xr.views.length) {
      const view = camera.xr.views[0];
      viewProjMat.mul2(view.projMat, view.viewOffMat);
      camera.frustum.setFromMat4(viewProjMat);
      return;
    }

    projMat = camera.projectionMatrix;

    if (camera.calculateProjection) {
      camera.calculateProjection(projMat, VIEW_CENTER);
    }

    if (camera.calculateTransform) {
      camera.calculateTransform(viewInvMat, VIEW_CENTER);
    } else {
      const pos = camera._node.getPosition();

      const rot = camera._node.getRotation();

      viewInvMat.setTRS(pos, rot, Vec3.ONE);
      this.viewInvId.setValue(viewInvMat.data);
    }

    viewMat.copy(viewInvMat).invert();
    viewProjMat.mul2(projMat, viewMat);
    camera.frustum.setFromMat4(viewProjMat);
  }

  initViewBindGroupFormat() {
    if (this.device.supportsUniformBuffers && !this.viewUniformFormat) {
      this.viewUniformFormat = new UniformBufferFormat(this.device, [new UniformFormat("matrix_viewProjection", UNIFORMTYPE_MAT4)]);
      this.viewBindGroupFormat = new BindGroupFormat(this.device, [new BindBufferFormat(UNIFORM_BUFFER_DEFAULT_SLOT_NAME, SHADERSTAGE_VERTEX | SHADERSTAGE_FRAGMENT)], [new BindTextureFormat('lightsTextureFloat', SHADERSTAGE_FRAGMENT, TEXTUREDIMENSION_2D, SAMPLETYPE_UNFILTERABLE_FLOAT)]);
    }
  }

  setCameraUniforms(camera, target, renderAction) {
    let transform;
    let viewCount = 1;

    if (camera.xr && camera.xr.session) {
      const parent = camera._node.parent;
      if (parent) transform = parent.getWorldTransform();
      const views = camera.xr.views;
      viewCount = views.length;

      for (let v = 0; v < viewCount; v++) {
        const view = views[v];

        if (parent) {
          view.viewInvOffMat.mul2(transform, view.viewInvMat);
          view.viewOffMat.copy(view.viewInvOffMat).invert();
        } else {
          view.viewInvOffMat.copy(view.viewInvMat);
          view.viewOffMat.copy(view.viewMat);
        }

        view.viewMat3.setFromMat4(view.viewOffMat);
        view.projViewOffMat.mul2(view.projMat, view.viewOffMat);
        view.position[0] = view.viewInvOffMat.data[12];
        view.position[1] = view.viewInvOffMat.data[13];
        view.position[2] = view.viewInvOffMat.data[14];
        camera.frustum.setFromMat4(view.projViewOffMat);
      }
    } else {
      projMat = camera.projectionMatrix;

      if (camera.calculateProjection) {
        camera.calculateProjection(projMat, VIEW_CENTER);
      }

      this.projId.setValue(projMat.data);
      this.projSkyboxId.setValue(camera.getProjectionMatrixSkybox().data);

      if (camera.calculateTransform) {
        camera.calculateTransform(viewInvMat, VIEW_CENTER);
      } else {
        const pos = camera._node.getPosition();

        const rot = camera._node.getRotation();

        viewInvMat.setTRS(pos, rot, Vec3.ONE);
      }

      this.viewInvId.setValue(viewInvMat.data);
      viewMat.copy(viewInvMat).invert();
      this.viewId.setValue(viewMat.data);
      viewMat3.setFromMat4(viewMat);
      this.viewId3.setValue(viewMat3.data);
      viewProjMat.mul2(projMat, viewMat);

      if (target && target.flipY) {
        flippedViewProjMat.mul2(flipYMat, viewProjMat);
        flippedSkyboxProjMat.mul2(flipYMat, camera.getProjectionMatrixSkybox());
        this.viewProjId.setValue(flippedViewProjMat.data);
        this.projSkyboxId.setValue(flippedSkyboxProjMat.data);
      } else {
        this.viewProjId.setValue(viewProjMat.data);
        this.projSkyboxId.setValue(camera.getProjectionMatrixSkybox().data);
      }

      this.flipYId.setValue(target != null && target.flipY ? -1 : 1);
      this.dispatchViewPos(camera._node.getPosition());
      camera.frustum.setFromMat4(viewProjMat);
    }

    this.tbnBasis.setValue(target && target.flipY ? -1 : 1);
    this.nearClipId.setValue(camera._nearClip);
    this.farClipId.setValue(camera._farClip);

    if (this.scene.physicalUnits) {
      this.exposureId.setValue(camera.getExposure());
    } else {
      this.exposureId.setValue(this.scene.exposure);
    }

    const n = camera._nearClip;
    const f = camera._farClip;
    this.cameraParams[0] = 1 / f;
    this.cameraParams[1] = f;
    this.cameraParams[2] = n;
    this.cameraParams[3] = camera.projection === PROJECTION_ORTHOGRAPHIC ? 1 : 0;
    this.cameraParamsId.setValue(this.cameraParams);

    if (this.device.supportsUniformBuffers) {
      this.setupViewUniformBuffers(renderAction, viewCount);
    }
  }

  setCamera(camera, target, clear, renderAction = null) {
    this.setCameraUniforms(camera, target, renderAction);
    this.clearView(camera, target, clear, false);
  }

  setupViewUniformBuffers(renderAction, viewCount) {
    if (renderAction) {
      const device = this.device;

      while (renderAction.viewBindGroups.length < viewCount) {
        const ub = new UniformBuffer(device, this.viewUniformFormat);
        const bg = new BindGroup(device, this.viewBindGroupFormat, ub);
        renderAction.viewBindGroups.push(bg);
      }

      const viewBindGroup = renderAction.viewBindGroups[0];
      viewBindGroup.defaultUniformBuffer.update();
      viewBindGroup.update();
      device.setBindGroup(BINDGROUP_VIEW, viewBindGroup);
    }
  }

  setupViewport(camera, renderTarget) {
    const device = this.device;
    const pixelWidth = renderTarget ? renderTarget.width : device.width;
    const pixelHeight = renderTarget ? renderTarget.height : device.height;
    const rect = camera.rect;
    let x = Math.floor(rect.x * pixelWidth);
    let y = Math.floor(rect.y * pixelHeight);
    let w = Math.floor(rect.z * pixelWidth);
    let h = Math.floor(rect.w * pixelHeight);
    device.setViewport(x, y, w, h);

    if (camera._scissorRectClear) {
      const scissorRect = camera.scissorRect;
      x = Math.floor(scissorRect.x * pixelWidth);
      y = Math.floor(scissorRect.y * pixelHeight);
      w = Math.floor(scissorRect.z * pixelWidth);
      h = Math.floor(scissorRect.w * pixelHeight);
    }

    device.setScissor(x, y, w, h);
  }

  clear(renderAction, camera) {
    const device = this.device;
    device.clear({
      color: [camera._clearColor.r, camera._clearColor.g, camera._clearColor.b, camera._clearColor.a],
      depth: camera._clearDepth,
      stencil: camera._clearStencil,
      flags: (renderAction.clearColor ? CLEARFLAG_COLOR : 0) | (renderAction.clearDepth ? CLEARFLAG_DEPTH : 0) | (renderAction.clearStencil ? CLEARFLAG_STENCIL : 0)
    });
  }

  clearView(camera, target, clear, forceWrite) {
    const device = this.device;
    device.setRenderTarget(target);
    device.updateBegin();

    if (forceWrite) {
      device.setColorWrite(true, true, true, true);
      device.setDepthWrite(true);
    }

    this.setupViewport(camera, target);

    if (clear) {
      const options = camera._clearOptions;
      device.clear(options ? options : {
        color: [camera._clearColor.r, camera._clearColor.g, camera._clearColor.b, camera._clearColor.a],
        depth: camera._clearDepth,
        flags: (camera._clearColorBuffer ? CLEARFLAG_COLOR : 0) | (camera._clearDepthBuffer ? CLEARFLAG_DEPTH : 0) | (camera._clearStencilBuffer ? CLEARFLAG_STENCIL : 0),
        stencil: camera._clearStencil
      });
    }
  }

  dispatchGlobalLights(scene) {
    this.ambientColor[0] = scene.ambientLight.r;
    this.ambientColor[1] = scene.ambientLight.g;
    this.ambientColor[2] = scene.ambientLight.b;

    if (scene.gammaCorrection) {
      for (let i = 0; i < 3; i++) {
        this.ambientColor[i] = Math.pow(this.ambientColor[i], 2.2);
      }
    }

    if (scene.physicalUnits) {
      for (let i = 0; i < 3; i++) {
        this.ambientColor[i] *= scene.ambientLuminance;
      }
    }

    this.ambientId.setValue(this.ambientColor);

    if (scene.sky) {
      this.skyboxIntensityId.setValue(scene.physicalUnits ? scene.skyboxLuminance : scene.skyboxIntensity);
    }
  }

  _resolveLight(scope, i) {
    const light = 'light' + i;
    this.lightColorId[i] = scope.resolve(light + '_color');
    this.lightDir[i] = new Float32Array(3);
    this.lightDirId[i] = scope.resolve(light + '_direction');
    this.lightShadowMapId[i] = scope.resolve(light + '_shadowMap');
    this.lightShadowMatrixId[i] = scope.resolve(light + '_shadowMatrix');
    this.lightShadowParamsId[i] = scope.resolve(light + '_shadowParams');
    this.lightShadowIntensity[i] = scope.resolve(light + '_shadowIntensity');
    this.lightRadiusId[i] = scope.resolve(light + '_radius');
    this.lightPos[i] = new Float32Array(3);
    this.lightPosId[i] = scope.resolve(light + '_position');
    this.lightWidth[i] = new Float32Array(3);
    this.lightWidthId[i] = scope.resolve(light + '_halfWidth');
    this.lightHeight[i] = new Float32Array(3);
    this.lightHeightId[i] = scope.resolve(light + '_halfHeight');
    this.lightInAngleId[i] = scope.resolve(light + '_innerConeAngle');
    this.lightOutAngleId[i] = scope.resolve(light + '_outerConeAngle');
    this.lightCookieId[i] = scope.resolve(light + '_cookie');
    this.lightCookieIntId[i] = scope.resolve(light + '_cookieIntensity');
    this.lightCookieMatrixId[i] = scope.resolve(light + '_cookieMatrix');
    this.lightCookieOffsetId[i] = scope.resolve(light + '_cookieOffset');
    this.shadowMatrixPaletteId[i] = scope.resolve(light + '_shadowMatrixPalette[0]');
    this.shadowCascadeDistancesId[i] = scope.resolve(light + '_shadowCascadeDistances[0]');
    this.shadowCascadeCountId[i] = scope.resolve(light + '_shadowCascadeCount');
  }

  setLTCDirectionalLight(wtm, cnt, dir, campos, far) {
    this.lightPos[cnt][0] = campos.x - dir.x * far;
    this.lightPos[cnt][1] = campos.y - dir.y * far;
    this.lightPos[cnt][2] = campos.z - dir.z * far;
    this.lightPosId[cnt].setValue(this.lightPos[cnt]);
    const hWidth = wtm.transformVector(new Vec3(-0.5, 0, 0));
    this.lightWidth[cnt][0] = hWidth.x * far;
    this.lightWidth[cnt][1] = hWidth.y * far;
    this.lightWidth[cnt][2] = hWidth.z * far;
    this.lightWidthId[cnt].setValue(this.lightWidth[cnt]);
    const hHeight = wtm.transformVector(new Vec3(0, 0, 0.5));
    this.lightHeight[cnt][0] = hHeight.x * far;
    this.lightHeight[cnt][1] = hHeight.y * far;
    this.lightHeight[cnt][2] = hHeight.z * far;
    this.lightHeightId[cnt].setValue(this.lightHeight[cnt]);
  }

  dispatchDirectLights(dirs, scene, mask, camera) {
    let cnt = 0;
    const scope = this.device.scope;

    for (let i = 0; i < dirs.length; i++) {
      if (!(dirs[i].mask & mask)) continue;
      const directional = dirs[i];

      const wtm = directional._node.getWorldTransform();

      if (!this.lightColorId[cnt]) {
        this._resolveLight(scope, cnt);
      }

      this.lightColorId[cnt].setValue(scene.gammaCorrection ? directional._linearFinalColor : directional._finalColor);
      wtm.getY(directional._direction).mulScalar(-1);

      directional._direction.normalize();

      this.lightDir[cnt][0] = directional._direction.x;
      this.lightDir[cnt][1] = directional._direction.y;
      this.lightDir[cnt][2] = directional._direction.z;
      this.lightDirId[cnt].setValue(this.lightDir[cnt]);

      if (directional.shape !== LIGHTSHAPE_PUNCTUAL) {
        this.setLTCDirectionalLight(wtm, cnt, directional._direction, camera._node.getPosition(), camera.farClip);
      }

      if (directional.castShadows) {
        const lightRenderData = directional.getRenderData(camera, 0);

        const biases = directional._getUniformBiasValues(lightRenderData);

        this.lightShadowMapId[cnt].setValue(lightRenderData.shadowBuffer);
        this.lightShadowMatrixId[cnt].setValue(lightRenderData.shadowMatrix.data);
        this.shadowMatrixPaletteId[cnt].setValue(directional._shadowMatrixPalette);
        this.shadowCascadeDistancesId[cnt].setValue(directional._shadowCascadeDistances);
        this.shadowCascadeCountId[cnt].setValue(directional.numCascades);
        this.lightShadowIntensity[cnt].setValue(directional.shadowIntensity);
        const params = directional._shadowRenderParams;
        params.length = 3;
        params[0] = directional._shadowResolution;
        params[1] = biases.normalBias;
        params[2] = biases.bias;
        this.lightShadowParamsId[cnt].setValue(params);
      }

      cnt++;
    }

    return cnt;
  }

  setLTCPositionalLight(wtm, cnt) {
    const hWidth = wtm.transformVector(new Vec3(-0.5, 0, 0));
    this.lightWidth[cnt][0] = hWidth.x;
    this.lightWidth[cnt][1] = hWidth.y;
    this.lightWidth[cnt][2] = hWidth.z;
    this.lightWidthId[cnt].setValue(this.lightWidth[cnt]);
    const hHeight = wtm.transformVector(new Vec3(0, 0, 0.5));
    this.lightHeight[cnt][0] = hHeight.x;
    this.lightHeight[cnt][1] = hHeight.y;
    this.lightHeight[cnt][2] = hHeight.z;
    this.lightHeightId[cnt].setValue(this.lightHeight[cnt]);
  }

  dispatchOmniLight(scene, scope, omni, cnt) {
    const wtm = omni._node.getWorldTransform();

    if (!this.lightColorId[cnt]) {
      this._resolveLight(scope, cnt);
    }

    this.lightRadiusId[cnt].setValue(omni.attenuationEnd);
    this.lightColorId[cnt].setValue(scene.gammaCorrection ? omni._linearFinalColor : omni._finalColor);
    wtm.getTranslation(omni._position);
    this.lightPos[cnt][0] = omni._position.x;
    this.lightPos[cnt][1] = omni._position.y;
    this.lightPos[cnt][2] = omni._position.z;
    this.lightPosId[cnt].setValue(this.lightPos[cnt]);

    if (omni.shape !== LIGHTSHAPE_PUNCTUAL) {
      this.setLTCPositionalLight(wtm, cnt);
    }

    if (omni.castShadows) {
      const lightRenderData = omni.getRenderData(null, 0);
      this.lightShadowMapId[cnt].setValue(lightRenderData.shadowBuffer);

      const biases = omni._getUniformBiasValues(lightRenderData);

      const params = omni._shadowRenderParams;
      params.length = 4;
      params[0] = omni._shadowResolution;
      params[1] = biases.normalBias;
      params[2] = biases.bias;
      params[3] = 1.0 / omni.attenuationEnd;
      this.lightShadowParamsId[cnt].setValue(params);
      this.lightShadowIntensity[cnt].setValue(omni.shadowIntensity);
    }

    if (omni._cookie) {
      this.lightCookieId[cnt].setValue(omni._cookie);
      this.lightShadowMatrixId[cnt].setValue(wtm.data);
      this.lightCookieIntId[cnt].setValue(omni.cookieIntensity);
    }
  }

  dispatchSpotLight(scene, scope, spot, cnt) {
    const wtm = spot._node.getWorldTransform();

    if (!this.lightColorId[cnt]) {
      this._resolveLight(scope, cnt);
    }

    this.lightInAngleId[cnt].setValue(spot._innerConeAngleCos);
    this.lightOutAngleId[cnt].setValue(spot._outerConeAngleCos);
    this.lightRadiusId[cnt].setValue(spot.attenuationEnd);
    this.lightColorId[cnt].setValue(scene.gammaCorrection ? spot._linearFinalColor : spot._finalColor);
    wtm.getTranslation(spot._position);
    this.lightPos[cnt][0] = spot._position.x;
    this.lightPos[cnt][1] = spot._position.y;
    this.lightPos[cnt][2] = spot._position.z;
    this.lightPosId[cnt].setValue(this.lightPos[cnt]);

    if (spot.shape !== LIGHTSHAPE_PUNCTUAL) {
      this.setLTCPositionalLight(wtm, cnt);
    }

    wtm.getY(spot._direction).mulScalar(-1);

    spot._direction.normalize();

    this.lightDir[cnt][0] = spot._direction.x;
    this.lightDir[cnt][1] = spot._direction.y;
    this.lightDir[cnt][2] = spot._direction.z;
    this.lightDirId[cnt].setValue(this.lightDir[cnt]);

    if (spot.castShadows) {
      const lightRenderData = spot.getRenderData(null, 0);
      this.lightShadowMapId[cnt].setValue(lightRenderData.shadowBuffer);
      this.lightShadowMatrixId[cnt].setValue(lightRenderData.shadowMatrix.data);

      const biases = spot._getUniformBiasValues(lightRenderData);

      const params = spot._shadowRenderParams;
      params.length = 4;
      params[0] = spot._shadowResolution;
      params[1] = biases.normalBias;
      params[2] = biases.bias;
      params[3] = 1.0 / spot.attenuationEnd;
      this.lightShadowParamsId[cnt].setValue(params);
      this.lightShadowIntensity[cnt].setValue(spot.shadowIntensity);
    }

    if (spot._cookie) {
      if (!spot.castShadows) {
        const cookieMatrix = LightCamera.evalSpotCookieMatrix(spot);
        this.lightShadowMatrixId[cnt].setValue(cookieMatrix.data);
      }

      this.lightCookieId[cnt].setValue(spot._cookie);
      this.lightCookieIntId[cnt].setValue(spot.cookieIntensity);

      if (spot._cookieTransform) {
        spot._cookieTransformUniform[0] = spot._cookieTransform.x;
        spot._cookieTransformUniform[1] = spot._cookieTransform.y;
        spot._cookieTransformUniform[2] = spot._cookieTransform.z;
        spot._cookieTransformUniform[3] = spot._cookieTransform.w;
        this.lightCookieMatrixId[cnt].setValue(spot._cookieTransformUniform);
        spot._cookieOffsetUniform[0] = spot._cookieOffset.x;
        spot._cookieOffsetUniform[1] = spot._cookieOffset.y;
        this.lightCookieOffsetId[cnt].setValue(spot._cookieOffsetUniform);
      }
    }
  }

  dispatchLocalLights(sortedLights, scene, mask, usedDirLights, staticLightList) {
    let cnt = usedDirLights;
    const scope = this.device.scope;
    const omnis = sortedLights[LIGHTTYPE_OMNI];
    const numOmnis = omnis.length;

    for (let i = 0; i < numOmnis; i++) {
      const omni = omnis[i];
      if (!(omni.mask & mask)) continue;
      if (omni.isStatic) continue;
      this.dispatchOmniLight(scene, scope, omni, cnt);
      cnt++;
    }

    let staticId = 0;

    if (staticLightList) {
      let omni = staticLightList[staticId];

      while (omni && omni._type === LIGHTTYPE_OMNI) {
        this.dispatchOmniLight(scene, scope, omni, cnt);
        cnt++;
        staticId++;
        omni = staticLightList[staticId];
      }
    }

    const spts = sortedLights[LIGHTTYPE_SPOT];
    const numSpts = spts.length;

    for (let i = 0; i < numSpts; i++) {
      const spot = spts[i];
      if (!(spot.mask & mask)) continue;
      if (spot.isStatic) continue;
      this.dispatchSpotLight(scene, scope, spot, cnt);
      cnt++;
    }

    if (staticLightList) {
      let spot = staticLightList[staticId];

      while (spot && spot._type === LIGHTTYPE_SPOT) {
        this.dispatchSpotLight(scene, scope, spot, cnt);
        cnt++;
        staticId++;
        spot = staticLightList[staticId];
      }
    }
  }

  cull(camera, drawCalls, visibleList) {
    let visibleLength = 0;
    const drawCallsCount = drawCalls.length;
    const cullingMask = camera.cullingMask || 0xFFFFFFFF;

    if (!camera.frustumCulling) {
      for (let i = 0; i < drawCallsCount; i++) {
        const drawCall = drawCalls[i];
        if (!drawCall.visible && !drawCall.command) continue;
        if (drawCall.mask && (drawCall.mask & cullingMask) === 0) continue;
        visibleList[visibleLength] = drawCall;
        visibleLength++;
        drawCall.visibleThisFrame = true;
      }

      return visibleLength;
    }

    for (let i = 0; i < drawCallsCount; i++) {
      const drawCall = drawCalls[i];

      if (!drawCall.command) {
        if (!drawCall.visible) continue;
        let visible = true;
        if (drawCall.mask && (drawCall.mask & cullingMask) === 0) continue;

        if (drawCall.cull) {
          visible = drawCall._isVisible(camera);
        }

        if (visible) {
          visibleList[visibleLength] = drawCall;
          visibleLength++;
          drawCall.visibleThisFrame = true;
        }
      } else {
        visibleList[visibleLength] = drawCall;
        visibleLength++;
        drawCall.visibleThisFrame = true;
      }
    }

    return visibleLength;
  }

  cullLights(camera, lights) {
    const clusteredLightingEnabled = this.scene.clusteredLightingEnabled;
    const physicalUnits = this.scene.physicalUnits;

    for (let i = 0; i < lights.length; i++) {
      const light = lights[i];

      if (light.enabled) {
        if (light._type !== LIGHTTYPE_DIRECTIONAL) {
          light.getBoundingSphere(tempSphere$1);

          if (camera.frustum.containsSphere(tempSphere$1)) {
            light.visibleThisFrame = true;
            light.usePhysicalUnits = physicalUnits;
            const screenSize = camera.getScreenSize(tempSphere$1);
            light.maxScreenSize = Math.max(light.maxScreenSize, screenSize);
          } else {
            if (!clusteredLightingEnabled) {
              if (light.castShadows && !light.shadowMap) {
                light.visibleThisFrame = true;
              }
            }
          }
        } else {
          light.usePhysicalUnits = this.scene.physicalUnits;
        }
      }
    }
  }

  updateCpuSkinMatrices(drawCalls) {
    _skinUpdateIndex++;
    const drawCallsCount = drawCalls.length;
    if (drawCallsCount === 0) return;

    for (let i = 0; i < drawCallsCount; i++) {
      const si = drawCalls[i].skinInstance;

      if (si) {
        si.updateMatrices(drawCalls[i].node, _skinUpdateIndex);
        si._dirty = true;
      }
    }
  }

  updateGpuSkinMatrices(drawCalls) {
    const drawCallsCount = drawCalls.length;

    for (let i = 0; i < drawCallsCount; i++) {
      if (!drawCalls[i].visibleThisFrame) continue;
      const skin = drawCalls[i].skinInstance;

      if (skin) {
        if (skin._dirty) {
          skin.updateMatrixPalette(drawCalls[i].node, _skinUpdateIndex);
          skin._dirty = false;
        }
      }
    }
  }

  updateMorphing(drawCalls) {
    const drawCallsCount = drawCalls.length;

    for (let i = 0; i < drawCallsCount; i++) {
      const morphInst = drawCalls[i].morphInstance;

      if (morphInst && morphInst._dirty && drawCalls[i].visibleThisFrame) {
        morphInst.update();
      }
    }
  }

  setBaseConstants(device, material) {
    device.setCullMode(material.cull);

    if (material.opacityMap) {
      this.opacityMapId.setValue(material.opacityMap);
      this.alphaTestId.setValue(material.alphaTest);
    }
  }

  setSkinning(device, meshInstance, material) {
    if (meshInstance.skinInstance) {
      this._skinDrawCalls++;

      if (device.supportsBoneTextures) {
        boneTexture = meshInstance.skinInstance.boneTexture;
        this.boneTextureId.setValue(boneTexture);
        boneTextureSize[0] = boneTexture.width;
        boneTextureSize[1] = boneTexture.height;
        boneTextureSize[2] = 1.0 / boneTexture.width;
        boneTextureSize[3] = 1.0 / boneTexture.height;
        this.boneTextureSizeId.setValue(boneTextureSize);
      } else {
        this.poseMatrixId.setValue(meshInstance.skinInstance.matrixPalette);
      }
    }
  }

  drawInstance(device, meshInstance, mesh, style, normal) {
    instancingData = meshInstance.instancingData;

    if (instancingData) {
      if (instancingData.count > 0) {
        this._instancedDrawCalls++;
        device.setVertexBuffer(instancingData.vertexBuffer);
        device.draw(mesh.primitive[style], instancingData.count);
      }
    } else {
      modelMatrix = meshInstance.node.worldTransform;
      this.modelMatrixId.setValue(modelMatrix.data);

      if (normal) {
        this.normalMatrixId.setValue(meshInstance.node.normalMatrix.data);
      }

      device.draw(mesh.primitive[style]);
    }
  }

  drawInstance2(device, meshInstance, mesh, style) {
    instancingData = meshInstance.instancingData;

    if (instancingData) {
      if (instancingData.count > 0) {
        this._instancedDrawCalls++;
        device.draw(mesh.primitive[style], instancingData.count, true);
      }
    } else {
      device.draw(mesh.primitive[style], undefined, true);
    }
  }

  renderShadows(lights, camera) {
    const isClustered = this.scene.clusteredLightingEnabled;

    for (let i = 0; i < lights.length; i++) {
      const light = lights[i];

      if (isClustered && light._type !== LIGHTTYPE_DIRECTIONAL) {
        if (!light.atlasViewportAllocated) {
          continue;
        }

        if (light.atlasSlotUpdated && light.shadowUpdateMode === SHADOWUPDATE_NONE) {
          light.shadowUpdateMode = SHADOWUPDATE_THISFRAME;
        }
      }

      this._shadowRenderer.render(light, camera);
    }
  }

  renderCookies(lights) {
    const cookieRenderTarget = this.lightTextureAtlas.cookieRenderTarget;

    for (let i = 0; i < lights.length; i++) {
      const light = lights[i];
      if (!light.atlasViewportAllocated) continue;
      if (!light.atlasSlotUpdated) continue;

      this._cookieRenderer.render(light, cookieRenderTarget);
    }
  }

  setCullMode(cullFaces, flip, drawCall) {
    const material = drawCall.material;
    let mode = CULLFACE_NONE;

    if (cullFaces) {
      let flipFaces = 1;

      if (material.cull > CULLFACE_NONE && material.cull < CULLFACE_FRONTANDBACK) {
        if (drawCall.flipFaces) flipFaces *= -1;
        if (flip) flipFaces *= -1;
        const wt = drawCall.node.worldTransform;
        wt.getX(worldMatX);
        wt.getY(worldMatY);
        wt.getZ(worldMatZ);
        worldMatX.cross(worldMatX, worldMatY);

        if (worldMatX.dot(worldMatZ) < 0) {
          flipFaces *= -1;
        }
      }

      if (flipFaces < 0) {
        mode = material.cull === CULLFACE_FRONT ? CULLFACE_BACK : CULLFACE_FRONT;
      } else {
        mode = material.cull;
      }
    }

    this.device.setCullMode(mode);

    if (mode === CULLFACE_NONE && material.cull === CULLFACE_NONE) {
      const wt2 = drawCall.node.worldTransform;
      wt2.getX(worldMatX);
      wt2.getY(worldMatY);
      wt2.getZ(worldMatZ);
      worldMatX.cross(worldMatX, worldMatY);

      if (worldMatX.dot(worldMatZ) < 0) {
        this.twoSidedLightingNegScaleFactorId.setValue(-1.0);
      } else {
        this.twoSidedLightingNegScaleFactorId.setValue(1.0);
      }
    }
  }

  setVertexBuffers(device, mesh) {
    device.setVertexBuffer(mesh.vertexBuffer);
  }

  setMorphing(device, morphInstance) {
    if (morphInstance) {
      if (morphInstance.morph.useTextureMorph) {
        device.setVertexBuffer(morphInstance.morph.vertexBufferIds);
        this.morphPositionTex.setValue(morphInstance.texturePositions);
        this.morphNormalTex.setValue(morphInstance.textureNormals);
        this.morphTexParams.setValue(morphInstance._textureParams);
      } else {
        for (let t = 0; t < morphInstance._activeVertexBuffers.length; t++) {
          const vb = morphInstance._activeVertexBuffers[t];

          if (vb) {
            const semantic = SEMANTIC_ATTR + (t + 8);
            vb.format.elements[0].name = semantic;
            vb.format.elements[0].scopeId = device.scope.resolve(semantic);
            vb.format.update();
            device.setVertexBuffer(vb);
          }
        }

        this.morphWeightsA.setValue(morphInstance._shaderMorphWeightsA);
        this.morphWeightsB.setValue(morphInstance._shaderMorphWeightsB);
      }
    }
  }

  dispatchViewPos(position) {
    const vp = this.viewPos;
    vp[0] = position.x;
    vp[1] = position.y;
    vp[2] = position.z;
    this.viewPosId.setValue(vp);
  }

  renderForwardPrepareMaterials(camera, drawCalls, drawCallsCount, sortedLights, cullingMask, layer, pass) {
    const addCall = (drawCall, isNewMaterial, lightMaskChanged) => {
      _drawCallList.drawCalls.push(drawCall);

      _drawCallList.isNewMaterial.push(isNewMaterial);

      _drawCallList.lightMaskChanged.push(lightMaskChanged);
    };

    _drawCallList.drawCalls.length = 0;
    _drawCallList.isNewMaterial.length = 0;
    _drawCallList.lightMaskChanged.length = 0;
    const device = this.device;
    const scene = this.scene;
    const lightHash = layer ? layer._lightHash : 0;
    let prevMaterial = null,
        prevObjDefs,
        prevStatic,
        prevLightMask;

    for (let i = 0; i < drawCallsCount; i++) {
      const drawCall = drawCalls[i];
      if (cullingMask && drawCall.mask && !(cullingMask & drawCall.mask)) continue;

      if (drawCall.command) {
        addCall(drawCall, false, false);
      } else {
        drawCall.ensureMaterial(device);
        const material = drawCall.material;
        const objDefs = drawCall._shaderDefs;
        const lightMask = drawCall.mask;

        if (material && material === prevMaterial && objDefs !== prevObjDefs) {
          prevMaterial = null;
        }

        if (drawCall.isStatic || prevStatic) {
          prevMaterial = null;
        }

        if (material !== prevMaterial) {
          this._materialSwitches++;
          material._scene = scene;

          if (material.dirty) {
            material.updateUniforms(device, scene);
            material.dirty = false;
          }

          if (material._dirtyBlend) {
            scene.layers._dirtyBlend = true;
          }

          if (!drawCall._shader[pass] || drawCall._shaderDefs !== objDefs || drawCall._lightHash !== lightHash) {
            if (!drawCall.isStatic) {
              const variantKey = pass + '_' + objDefs + '_' + lightHash;
              drawCall._shader[pass] = material.variants[variantKey];

              if (!drawCall._shader[pass]) {
                drawCall.updatePassShader(scene, pass, null, sortedLights, this.viewUniformFormat, this.viewBindGroupFormat);
                material.variants[variantKey] = drawCall._shader[pass];
              }
            } else {
              drawCall.updatePassShader(scene, pass, drawCall._staticLightList, sortedLights, this.viewUniformFormat, this.viewBindGroupFormat);
            }

            drawCall._lightHash = lightHash;
          }
        }

        addCall(drawCall, material !== prevMaterial, !prevMaterial || lightMask !== prevLightMask);
        prevMaterial = material;
        prevObjDefs = objDefs;
        prevLightMask = lightMask;
        prevStatic = drawCall.isStatic;
      }
    }

    return _drawCallList;
  }

  renderForwardInternal(camera, preparedCalls, sortedLights, pass, drawCallback, flipFaces) {
    const device = this.device;
    const supportsUniformBuffers = device.supportsUniformBuffers;
    const scene = this.scene;
    const passFlag = 1 << pass;
    const preparedCallsCount = preparedCalls.drawCalls.length;

    for (let i = 0; i < preparedCallsCount; i++) {
      const drawCall = preparedCalls.drawCalls[i];

      if (drawCall.command) {
        drawCall.command();
      } else {
        const newMaterial = preparedCalls.isNewMaterial[i];
        const lightMaskChanged = preparedCalls.lightMaskChanged[i];
        const material = drawCall.material;
        drawCall._shaderDefs;
        const lightMask = drawCall.mask;

        if (newMaterial) {
          const shader = drawCall._shader[pass];

          if (!shader.failed && !device.setShader(shader)) ;

          material.setParameters(device);

          if (lightMaskChanged) {
            const usedDirLights = this.dispatchDirectLights(sortedLights[LIGHTTYPE_DIRECTIONAL], scene, lightMask, camera);
            this.dispatchLocalLights(sortedLights, scene, lightMask, usedDirLights, drawCall._staticLightList);
          }

          this.alphaTestId.setValue(material.alphaTest);
          device.setBlending(material.blend);

          if (material.blend) {
            if (material.separateAlphaBlend) {
              device.setBlendFunctionSeparate(material.blendSrc, material.blendDst, material.blendSrcAlpha, material.blendDstAlpha);
              device.setBlendEquationSeparate(material.blendEquation, material.blendAlphaEquation);
            } else {
              device.setBlendFunction(material.blendSrc, material.blendDst);
              device.setBlendEquation(material.blendEquation);
            }
          }

          device.setColorWrite(material.redWrite, material.greenWrite, material.blueWrite, material.alphaWrite);
          device.setDepthWrite(material.depthWrite);

          if (material.depthWrite && !material.depthTest) {
            device.setDepthFunc(FUNC_ALWAYS);
            device.setDepthTest(true);
          } else {
            device.setDepthFunc(material.depthFunc);
            device.setDepthTest(material.depthTest);
          }

          device.setAlphaToCoverage(material.alphaToCoverage);

          if (material.depthBias || material.slopeDepthBias) {
            device.setDepthBias(true);
            device.setDepthBiasValues(material.depthBias, material.slopeDepthBias);
          } else {
            device.setDepthBias(false);
          }
        }

        this.setCullMode(camera._cullFaces, flipFaces, drawCall);
        const stencilFront = drawCall.stencilFront || material.stencilFront;
        const stencilBack = drawCall.stencilBack || material.stencilBack;

        if (stencilFront || stencilBack) {
          device.setStencilTest(true);

          if (stencilFront === stencilBack) {
            device.setStencilFunc(stencilFront.func, stencilFront.ref, stencilFront.readMask);
            device.setStencilOperation(stencilFront.fail, stencilFront.zfail, stencilFront.zpass, stencilFront.writeMask);
          } else {
            if (stencilFront) {
              device.setStencilFuncFront(stencilFront.func, stencilFront.ref, stencilFront.readMask);
              device.setStencilOperationFront(stencilFront.fail, stencilFront.zfail, stencilFront.zpass, stencilFront.writeMask);
            } else {
              device.setStencilFuncFront(FUNC_ALWAYS, 0, 0xFF);
              device.setStencilOperationFront(STENCILOP_KEEP, STENCILOP_KEEP, STENCILOP_KEEP, 0xFF);
            }

            if (stencilBack) {
              device.setStencilFuncBack(stencilBack.func, stencilBack.ref, stencilBack.readMask);
              device.setStencilOperationBack(stencilBack.fail, stencilBack.zfail, stencilBack.zpass, stencilBack.writeMask);
            } else {
              device.setStencilFuncBack(FUNC_ALWAYS, 0, 0xFF);
              device.setStencilOperationBack(STENCILOP_KEEP, STENCILOP_KEEP, STENCILOP_KEEP, 0xFF);
            }
          }
        } else {
          device.setStencilTest(false);
        }

        const mesh = drawCall.mesh;
        drawCall.setParameters(device, passFlag);
        this.setVertexBuffers(device, mesh);
        this.setMorphing(device, drawCall.morphInstance);
        this.setSkinning(device, drawCall, material);

        if (supportsUniformBuffers) {
          this.modelMatrixId.setValue(drawCall.node.worldTransform.data);
          this.normalMatrixId.setValue(drawCall.node.normalMatrix.data);
          const meshBindGroup = drawCall.getBindGroup(device, pass);
          meshBindGroup.defaultUniformBuffer.update();
          meshBindGroup.update();
          device.setBindGroup(BINDGROUP_MESH, meshBindGroup);
        }

        const style = drawCall.renderStyle;
        device.setIndexBuffer(mesh.indexBuffer[style]);

        if (drawCallback) {
          drawCallback(drawCall, i);
        }

        if (camera.xr && camera.xr.session && camera.xr.views.length) {
          const views = camera.xr.views;

          for (let v = 0; v < views.length; v++) {
            const view = views[v];
            device.setViewport(view.viewport.x, view.viewport.y, view.viewport.z, view.viewport.w);
            this.projId.setValue(view.projMat.data);
            this.projSkyboxId.setValue(view.projMat.data);
            this.viewId.setValue(view.viewOffMat.data);
            this.viewInvId.setValue(view.viewInvOffMat.data);
            this.viewId3.setValue(view.viewMat3.data);
            this.viewProjId.setValue(view.projViewOffMat.data);
            this.viewPosId.setValue(view.position);

            if (v === 0) {
              this.drawInstance(device, drawCall, mesh, style, true);
            } else {
              this.drawInstance2(device, drawCall, mesh, style);
            }

            this._forwardDrawCalls++;
          }
        } else {
          this.drawInstance(device, drawCall, mesh, style, true);
          this._forwardDrawCalls++;
        }

        if (i < preparedCallsCount - 1 && !preparedCalls.isNewMaterial[i + 1]) {
          material.setParameters(device, drawCall.parameters);
        }
      }
    }
  }

  renderForward(camera, allDrawCalls, allDrawCallsCount, sortedLights, pass, cullingMask, drawCallback, layer, flipFaces) {
    const preparedCalls = this.renderForwardPrepareMaterials(camera, allDrawCalls, allDrawCallsCount, sortedLights, cullingMask, layer, pass);
    this.renderForwardInternal(camera, preparedCalls, sortedLights, pass, drawCallback, flipFaces);
    _drawCallList.length = 0;
  }

  updateShaders(drawCalls, onlyLitShaders) {
    const count = drawCalls.length;

    for (let i = 0; i < count; i++) {
      const mat = drawCalls[i].material;

      if (mat) {
        if (!_tempMaterialSet.has(mat)) {
          _tempMaterialSet.add(mat);

          if (mat.getShaderVariant !== Material.prototype.getShaderVariant) {
            if (onlyLitShaders) {
              if (!mat.useLighting || mat.emitter && !mat.emitter.lighting) continue;
            }

            mat.clearVariants();
          }
        }
      }
    }

    _tempMaterialSet.clear();
  }

  beginFrame(comp, lightsChanged) {
    const meshInstances = comp._meshInstances;
    const scene = this.scene;

    if (scene.updateShaders || lightsChanged) {
      const onlyLitShaders = !scene.updateShaders && lightsChanged;
      this.updateShaders(meshInstances, onlyLitShaders);
      scene.updateShaders = false;
      scene._shaderVersion++;
    }

    this.updateCpuSkinMatrices(meshInstances);
    const miCount = meshInstances.length;

    for (let i = 0; i < miCount; i++) {
      meshInstances[i].visibleThisFrame = false;
    }

    const lights = comp._lights;
    const lightCount = lights.length;

    for (let i = 0; i < lightCount; i++) {
      lights[i].beginFrame();
    }
  }

  updateLayerComposition(comp, clusteredLightingEnabled) {
    const len = comp.layerList.length;

    for (let i = 0; i < len; i++) {
      comp.layerList[i]._postRenderCounter = 0;
    }

    const scene = this.scene;
    const shaderVersion = scene._shaderVersion;

    for (let i = 0; i < len; i++) {
      const layer = comp.layerList[i];
      layer._shaderVersion = shaderVersion;
      layer._preRenderCalledForCameras = 0;
      layer._postRenderCalledForCameras = 0;
      const transparent = comp.subLayerList[i];

      if (transparent) {
        layer._postRenderCounter |= 2;
      } else {
        layer._postRenderCounter |= 1;
      }

      layer._postRenderCounterMax = layer._postRenderCounter;

      for (let j = 0; j < layer.cameras.length; j++) {
        layer.instances.prepare(j);
      }

      if (layer._needsStaticPrepare && layer._staticLightHash && !this.scene.clusteredLightingEnabled) {
        if (layer._staticPrepareDone) {
          StaticMeshes.revert(layer.opaqueMeshInstances);
          StaticMeshes.revert(layer.transparentMeshInstances);
        }

        StaticMeshes.prepare(this.device, scene, layer.opaqueMeshInstances, layer._lights);
        StaticMeshes.prepare(this.device, scene, layer.transparentMeshInstances, layer._lights);
        comp._dirty = true;
        scene.updateShaders = true;
        layer._needsStaticPrepare = false;
        layer._staticPrepareDone = true;
      }
    }

    const updated = comp._update(this.device, clusteredLightingEnabled);

    return updated;
  }

  gpuUpdate(drawCalls) {
    this.updateGpuSkinMatrices(drawCalls);
    this.updateMorphing(drawCalls);
  }

  setSceneConstants() {
    const scene = this.scene;
    this.dispatchGlobalLights(scene);

    if (scene.fog !== FOG_NONE) {
      this.fogColor[0] = scene.fogColor.r;
      this.fogColor[1] = scene.fogColor.g;
      this.fogColor[2] = scene.fogColor.b;

      if (scene.gammaCorrection) {
        for (let i = 0; i < 3; i++) {
          this.fogColor[i] = Math.pow(this.fogColor[i], 2.2);
        }
      }

      this.fogColorId.setValue(this.fogColor);

      if (scene.fog === FOG_LINEAR) {
        this.fogStartId.setValue(scene.fogStart);
        this.fogEndId.setValue(scene.fogEnd);
      } else {
        this.fogDensityId.setValue(scene.fogDensity);
      }
    }

    const device = this.device;
    this._screenSize[0] = device.width;
    this._screenSize[1] = device.height;
    this._screenSize[2] = 1 / device.width;
    this._screenSize[3] = 1 / device.height;
    this.screenSizeId.setValue(this._screenSize);
  }

  updateLightStats(comp, compUpdatedFlags) {}

  cullShadowmaps(comp) {
    for (let i = 0; i < comp._lights.length; i++) {
      const light = comp._lights[i];

      if (light._type !== LIGHTTYPE_DIRECTIONAL) {
        if (light.visibleThisFrame && light.castShadows && light.shadowUpdateMode !== SHADOWUPDATE_NONE) {
          const casters = comp._lightCompositionData[i].shadowCastersList;

          this._shadowRenderer.cullLocal(light, casters);
        }
      }
    }

    const renderActions = comp._renderActions;

    for (let i = 0; i < renderActions.length; i++) {
      const renderAction = renderActions[i];
      const count = renderAction.directionalLightsIndices.length;

      for (let j = 0; j < count; j++) {
        const lightIndex = renderAction.directionalLightsIndices[j];
        const light = comp._lights[lightIndex];
        const casters = comp._lightCompositionData[lightIndex].shadowCastersList;

        this._shadowRenderer.cullDirectional(light, casters, renderAction.camera.camera);
      }
    }
  }

  cullComposition(comp) {
    const renderActions = comp._renderActions;

    for (let i = 0; i < renderActions.length; i++) {
      const renderAction = renderActions[i];
      const layerIndex = renderAction.layerIndex;
      const layer = comp.layerList[layerIndex];
      if (!layer.enabled || !comp.subLayerEnabled[layerIndex]) continue;
      const transparent = comp.subLayerList[layerIndex];
      const cameraPass = renderAction.cameraIndex;
      const camera = layer.cameras[cameraPass];

      if (camera) {
        camera.frameUpdate(renderAction.renderTarget);

        if (renderAction.firstCameraUse) {
          this.updateCameraFrustum(camera.camera);
          this._camerasRendered++;
        }

        this.cullLights(camera.camera, layer._lights);
        const objects = layer.instances;
        const visible = transparent ? objects.visibleTransparent[cameraPass] : objects.visibleOpaque[cameraPass];

        if (!visible.done) {
          if (layer.onPreCull) {
            layer.onPreCull(cameraPass);
          }

          const drawCalls = transparent ? layer.transparentMeshInstances : layer.opaqueMeshInstances;
          visible.length = this.cull(camera.camera, drawCalls, visible.list);
          visible.done = true;

          if (layer.onPostCull) {
            layer.onPostCull(cameraPass);
          }
        }
      }
    }

    this.cullShadowmaps(comp);
  }

  updateLightTextureAtlas(comp) {
    this.lightTextureAtlas.update(comp._splitLights[LIGHTTYPE_SPOT], comp._splitLights[LIGHTTYPE_OMNI], this.scene.lighting);
  }

  updateClusters(comp) {
    for (let i = 0; i < comp._worldClusters.length; i++) {
      const cluster = comp._worldClusters[i];
      cluster.update(comp._lights, this.scene.gammaCorrection, this.scene.lighting);
    }
  }

  buildFrameGraph(frameGraph, layerComposition) {
    frameGraph.reset();
    this.update(layerComposition);
    const clusteredLightingEnabled = this.scene.clusteredLightingEnabled;

    if (clusteredLightingEnabled) {
      this.updateLightTextureAtlas(layerComposition);

      const _renderPass = new RenderPass(this.device, () => {
        if (this.scene.lighting.cookiesEnabled) {
          this.renderCookies(layerComposition._splitLights[LIGHTTYPE_SPOT]);
          this.renderCookies(layerComposition._splitLights[LIGHTTYPE_OMNI]);
        }
      });

      _renderPass.requiresCubemaps = false;
      frameGraph.addRenderPass(_renderPass);
    }

    const renderPass = new RenderPass(this.device, () => {
      if (!clusteredLightingEnabled || clusteredLightingEnabled && this.scene.lighting.shadowsEnabled) {
        this.renderShadows(layerComposition._splitLights[LIGHTTYPE_SPOT]);
        this.renderShadows(layerComposition._splitLights[LIGHTTYPE_OMNI]);
      }

      if (clusteredLightingEnabled) {
        this.updateClusters(layerComposition);
      }
    });
    renderPass.requiresCubemaps = false;
    frameGraph.addRenderPass(renderPass);
    let startIndex = 0;
    let newStart = true;
    let renderTarget = null;
    const renderActions = layerComposition._renderActions;

    for (let i = startIndex; i < renderActions.length; i++) {
      const renderAction = renderActions[i];
      const layer = layerComposition.layerList[renderAction.layerIndex];
      const camera = layer.cameras[renderAction.cameraIndex];

      if (!renderAction.isLayerEnabled(layerComposition)) {
        continue;
      }

      const isDepthLayer = layer.id === LAYERID_DEPTH;
      const isGrabPass = isDepthLayer && (camera.renderSceneColorMap || camera.renderSceneDepthMap);

      if (renderAction.hasDirectionalShadowLights && camera) {
        const _renderPass2 = new RenderPass(this.device, () => {
          this.renderPassDirectionalShadows(renderAction, layerComposition);
        });

        _renderPass2.requiresCubemaps = false;
        frameGraph.addRenderPass(_renderPass2);
      }

      if (newStart) {
        newStart = false;
        startIndex = i;
        renderTarget = renderAction.renderTarget;
      }

      let nextIndex = i + 1;

      while (renderActions[nextIndex] && !renderActions[nextIndex].isLayerEnabled(layerComposition)) {
        nextIndex++;
      }

      const nextRenderAction = renderActions[nextIndex];
      const isNextLayerDepth = nextRenderAction ? layerComposition.layerList[nextRenderAction.layerIndex].id === LAYERID_DEPTH : false;
      const isNextLayerGrabPass = isNextLayerDepth && (camera.renderSceneColorMap || camera.renderSceneDepthMap);

      if (!nextRenderAction || nextRenderAction.renderTarget !== renderTarget || nextRenderAction.hasDirectionalShadowLights || isNextLayerGrabPass || isGrabPass) {
        this.addMainRenderPass(frameGraph, layerComposition, renderTarget, startIndex, i, isGrabPass);

        if (renderAction.triggerPostprocess && camera != null && camera.onPostprocessing) {
          const _renderPass3 = new RenderPass(this.device, () => {
            this.renderPassPostprocessing(renderAction, layerComposition);
          });

          _renderPass3.requiresCubemaps = false;
          frameGraph.addRenderPass(_renderPass3);
        }

        newStart = true;
      }
    }
  }

  addMainRenderPass(frameGraph, layerComposition, renderTarget, startIndex, endIndex, isGrabPass) {
    const range = {
      start: startIndex,
      end: endIndex
    };
    const renderPass = new RenderPass(this.device, () => {
      this.renderPassRenderActions(layerComposition, range);
    });
    const renderActions = layerComposition._renderActions;
    const startRenderAction = renderActions[startIndex];
    const startLayer = layerComposition.layerList[startRenderAction.layerIndex];
    const camera = startLayer.cameras[startRenderAction.cameraIndex];
    const isWebgl1DepthGrabPass = isGrabPass && !this.device.webgl2 && camera.renderSceneDepthMap;
    const isRealPass = !isGrabPass || isWebgl1DepthGrabPass;

    if (isRealPass) {
      renderPass.init(renderTarget);
      renderPass.fullSizeClearRect = camera.camera.fullSizeClearRect;

      if (isWebgl1DepthGrabPass) {
        renderPass.setClearColor(webgl1DepthClearColor);
        renderPass.setClearDepth(1.0);
      } else if (renderPass.fullSizeClearRect) {
        if (startRenderAction.clearColor) {
          renderPass.setClearColor(camera.camera.clearColor);
        }

        if (startRenderAction.clearDepth) {
          renderPass.setClearDepth(camera.camera.clearDepth);
        }

        if (startRenderAction.clearStencil) {
          renderPass.setClearStencil(camera.camera.clearStencil);
        }
      }
    }

    frameGraph.addRenderPass(renderPass);
  }

  update(comp) {
    const clusteredLightingEnabled = this.scene.clusteredLightingEnabled;
    this.clustersDebugRendered = false;
    this.initViewBindGroupFormat();

    this.scene._updateSky(this.device);

    const updated = this.updateLayerComposition(comp, clusteredLightingEnabled);
    const lightsChanged = (updated & COMPUPDATED_LIGHTS) !== 0;
    this.updateLightStats(comp, updated);
    this.beginFrame(comp, lightsChanged);
    this.setSceneConstants();
    this.cullComposition(comp);
    this.gpuUpdate(comp._meshInstances);
  }

  renderPassDirectionalShadows(renderAction, layerComposition) {
    const layer = layerComposition.layerList[renderAction.layerIndex];
    const camera = layer.cameras[renderAction.cameraIndex];
    this.renderShadows(renderAction.directionalLights, camera.camera);
  }

  renderPassPostprocessing(renderAction, layerComposition) {
    const layer = layerComposition.layerList[renderAction.layerIndex];
    const camera = layer.cameras[renderAction.cameraIndex];
    camera.onPostprocessing();
  }

  renderPassRenderActions(comp, range) {
    const renderActions = comp._renderActions;

    for (let i = range.start; i <= range.end; i++) {
      this.renderRenderAction(comp, renderActions[i], i === range.start);
    }
  }

  renderRenderAction(comp, renderAction, firstRenderAction) {
    const clusteredLightingEnabled = this.scene.clusteredLightingEnabled;
    const device = this.device;
    const layerIndex = renderAction.layerIndex;
    const layer = comp.layerList[layerIndex];
    const transparent = comp.subLayerList[layerIndex];
    const cameraPass = renderAction.cameraIndex;
    const camera = layer.cameras[cameraPass];

    if (!renderAction.isLayerEnabled(comp)) {
      return;
    }

    if (camera) {
      if (renderAction.firstCameraUse && camera.onPreRender) {
        camera.onPreRender();
      }
    }

    if (!transparent && layer.onPreRenderOpaque) {
      layer.onPreRenderOpaque(cameraPass);
    } else if (transparent && layer.onPreRenderTransparent) {
      layer.onPreRenderTransparent(cameraPass);
    }

    if (!(layer._preRenderCalledForCameras & 1 << cameraPass)) {
      if (layer.onPreRender) {
        layer.onPreRender(cameraPass);
      }

      layer._preRenderCalledForCameras |= 1 << cameraPass;
    }

    if (camera) {
      var _renderAction$renderT;

      this.setupViewport(camera.camera, renderAction.renderTarget);

      if (!firstRenderAction || !camera.camera.fullSizeClearRect) {
        this.clear(renderAction, camera.camera);
      }

      layer._sortVisible(transparent, camera.camera.node, cameraPass);

      const objects = layer.instances;
      const visible = transparent ? objects.visibleTransparent[cameraPass] : objects.visibleOpaque[cameraPass];
      this.scene.immediate.onPreRenderLayer(layer, visible, transparent);

      if (clusteredLightingEnabled && renderAction.lightClusters) {
        renderAction.lightClusters.activate(this.lightTextureAtlas);

        if (!this.clustersDebugRendered && this.scene.lighting.debugLayer === layer.id) {
          this.clustersDebugRendered = true;
        }
      }

      this.scene._activeCamera = camera.camera;
      this.setCameraUniforms(camera.camera, renderAction.renderTarget, renderAction);
      const flipFaces = !!(camera.camera._flipFaces ^ (renderAction == null ? void 0 : (_renderAction$renderT = renderAction.renderTarget) == null ? void 0 : _renderAction$renderT.flipY));
      const draws = this._forwardDrawCalls;
      this.renderForward(camera.camera, visible.list, visible.length, layer._splitLights, layer.shaderPass, layer.cullingMask, layer.onDrawCall, layer, flipFaces);
      layer._forwardDrawCalls += this._forwardDrawCalls - draws;
      device.setColorWrite(true, true, true, true);
      device.setStencilTest(false);
      device.setAlphaToCoverage(false);
      device.setDepthBias(false);

      if (renderAction.lastCameraUse && camera.onPostRender) {
        camera.onPostRender();
      }
    }

    if (!transparent && layer.onPostRenderOpaque) {
      layer.onPostRenderOpaque(cameraPass);
    } else if (transparent && layer.onPostRenderTransparent) {
      layer.onPostRenderTransparent(cameraPass);
    }

    if (layer.onPostRender && !(layer._postRenderCalledForCameras & 1 << cameraPass)) {
      layer._postRenderCounter &= ~(transparent ? 2 : 1);

      if (layer._postRenderCounter === 0) {
        layer.onPostRender(cameraPass);
        layer._postRenderCalledForCameras |= 1 << cameraPass;
        layer._postRenderCounter = layer._postRenderCounterMax;
      }
    }
  }

}

let keyA, keyB, sortPos, sortDir;

function sortManual(drawCallA, drawCallB) {
  return drawCallA.drawOrder - drawCallB.drawOrder;
}

function sortMaterialMesh(drawCallA, drawCallB) {
  keyA = drawCallA._key[SORTKEY_FORWARD];
  keyB = drawCallB._key[SORTKEY_FORWARD];

  if (keyA === keyB && drawCallA.mesh && drawCallB.mesh) {
    return drawCallB.mesh.id - drawCallA.mesh.id;
  }

  return keyB - keyA;
}

function sortBackToFront(drawCallA, drawCallB) {
  return drawCallB.zdist - drawCallA.zdist;
}

function sortFrontToBack(drawCallA, drawCallB) {
  return drawCallA.zdist - drawCallB.zdist;
}

const sortCallbacks = [null, sortManual, sortMaterialMesh, sortBackToFront, sortFrontToBack];

function sortLights(lightA, lightB) {
  return lightB.key - lightA.key;
}

let layerCounter = 0;

class VisibleInstanceList {
  constructor() {
    this.list = [];
    this.length = 0;
    this.done = false;
  }

}

class InstanceList {
  constructor() {
    this.opaqueMeshInstances = [];
    this.transparentMeshInstances = [];
    this.shadowCasters = [];
    this.visibleOpaque = [];
    this.visibleTransparent = [];
  }

  prepare(index) {
    if (!this.visibleOpaque[index]) {
      this.visibleOpaque[index] = new VisibleInstanceList();
    }

    if (!this.visibleTransparent[index]) {
      this.visibleTransparent[index] = new VisibleInstanceList();
    }

    this.visibleOpaque[index].done = false;
    this.visibleTransparent[index].done = false;
  }

  delete(index) {
    if (index < this.visibleOpaque.length) {
      this.visibleOpaque.splice(index, 1);
    }

    if (index < this.visibleTransparent.length) {
      this.visibleTransparent.splice(index, 1);
    }
  }

}

class Layer {
  constructor(options = {}) {
    if (options.id !== undefined) {
      this.id = options.id;
      layerCounter = Math.max(this.id + 1, layerCounter);
    } else {
      this.id = layerCounter++;
    }

    this.name = options.name;
    this._enabled = options.enabled === undefined ? true : options.enabled;
    this._refCounter = this._enabled ? 1 : 0;
    this.opaqueSortMode = options.opaqueSortMode === undefined ? SORTMODE_MATERIALMESH : options.opaqueSortMode;
    this.transparentSortMode = options.transparentSortMode === undefined ? SORTMODE_BACK2FRONT : options.transparentSortMode;

    if (options.renderTarget) {
      this.renderTarget = options.renderTarget;
    }

    this.shaderPass = options.shaderPass === undefined ? SHADER_FORWARD : options.shaderPass;
    this.passThrough = options.passThrough === undefined ? false : options.passThrough;
    this._clearColorBuffer = !!options.clearColorBuffer;
    this._clearDepthBuffer = !!options.clearDepthBuffer;
    this._clearStencilBuffer = !!options.clearStencilBuffer;
    this.onPreCull = options.onPreCull;
    this.onPreRender = options.onPreRender;
    this.onPreRenderOpaque = options.onPreRenderOpaque;
    this.onPreRenderTransparent = options.onPreRenderTransparent;
    this.onPostCull = options.onPostCull;
    this.onPostRender = options.onPostRender;
    this.onPostRenderOpaque = options.onPostRenderOpaque;
    this.onPostRenderTransparent = options.onPostRenderTransparent;
    this.onDrawCall = options.onDrawCall;
    this.onEnable = options.onEnable;
    this.onDisable = options.onDisable;

    if (this._enabled && this.onEnable) {
      this.onEnable();
    }

    this.layerReference = options.layerReference;
    this.instances = options.layerReference ? options.layerReference.instances : new InstanceList();
    this.cullingMask = options.cullingMask ? options.cullingMask : 0xFFFFFFFF;
    this.opaqueMeshInstances = this.instances.opaqueMeshInstances;
    this.transparentMeshInstances = this.instances.transparentMeshInstances;
    this.shadowCasters = this.instances.shadowCasters;
    this.customSortCallback = null;
    this.customCalculateSortValues = null;
    this._lights = [];
    this._lightsSet = new Set();
    this._clusteredLightsSet = new Set();
    this._splitLights = [[], [], []];
    this.cameras = [];
    this._dirty = false;
    this._dirtyLights = false;
    this._dirtyCameras = false;
    this._lightHash = 0;
    this._staticLightHash = 0;
    this._needsStaticPrepare = true;
    this._staticPrepareDone = false;
    this._shaderVersion = -1;
    this._lightCube = null;
  }

  get hasClusteredLights() {
    return this._clusteredLightsSet.size > 0;
  }

  set renderTarget(rt) {
    this._renderTarget = rt;
    this._dirtyCameras = true;
  }

  get renderTarget() {
    return this._renderTarget;
  }

  set enabled(val) {
    if (val !== this._enabled) {
      this._enabled = val;

      if (val) {
        this.incrementCounter();
        if (this.onEnable) this.onEnable();
      } else {
        this.decrementCounter();
        if (this.onDisable) this.onDisable();
      }
    }
  }

  get enabled() {
    return this._enabled;
  }

  set clearColorBuffer(val) {
    this._clearColorBuffer = val;
    this._dirtyCameras = true;
  }

  get clearColorBuffer() {
    return this._clearColorBuffer;
  }

  set clearDepthBuffer(val) {
    this._clearDepthBuffer = val;
    this._dirtyCameras = true;
  }

  get clearDepthBuffer() {
    return this._clearDepthBuffer;
  }

  set clearStencilBuffer(val) {
    this._clearStencilBuffer = val;
    this._dirtyCameras = true;
  }

  get clearStencilBuffer() {
    return this._clearStencilBuffer;
  }

  get clusteredLightsSet() {
    return this._clusteredLightsSet;
  }

  incrementCounter() {
    if (this._refCounter === 0) {
      this._enabled = true;
      if (this.onEnable) this.onEnable();
    }

    this._refCounter++;
  }

  decrementCounter() {
    if (this._refCounter === 1) {
      this._enabled = false;
      if (this.onDisable) this.onDisable();
    } else if (this._refCounter === 0) {
      return;
    }

    this._refCounter--;
  }

  addMeshInstances(meshInstances, skipShadowCasters) {
    const sceneShaderVer = this._shaderVersion;
    const casters = this.shadowCasters;

    for (let i = 0; i < meshInstances.length; i++) {
      const m = meshInstances[i];
      const mat = m.material;
      const arr = mat.blendType === BLEND_NONE ? this.opaqueMeshInstances : this.transparentMeshInstances;

      if (this.opaqueMeshInstances.indexOf(m) < 0 && this.transparentMeshInstances.indexOf(m) < 0) {
        arr.push(m);
      }

      if (!skipShadowCasters && m.castShadow && casters.indexOf(m) < 0) casters.push(m);

      if (!this.passThrough && sceneShaderVer >= 0 && mat._shaderVersion !== sceneShaderVer) {
        if (mat.getShaderVariant !== Material.prototype.getShaderVariant) {
          mat.clearVariants();
        }

        mat._shaderVersion = sceneShaderVer;
      }
    }

    if (!this.passThrough) this._dirty = true;
  }

  removeMeshInstanceFromArray(m, arr) {
    let spliceOffset = -1;
    let spliceCount = 0;
    const len = arr.length;

    for (let j = 0; j < len; j++) {
      const drawCall = arr[j];

      if (drawCall === m) {
        spliceOffset = j;
        spliceCount = 1;
        break;
      }

      if (drawCall._staticSource === m) {
        if (spliceOffset < 0) spliceOffset = j;
        spliceCount++;
      } else if (spliceOffset >= 0) {
        break;
      }
    }

    if (spliceOffset >= 0) {
      arr.splice(spliceOffset, spliceCount);
    }
  }

  removeMeshInstances(meshInstances, skipShadowCasters) {
    const opaque = this.opaqueMeshInstances;
    const transparent = this.transparentMeshInstances;
    const casters = this.shadowCasters;

    for (let i = 0; i < meshInstances.length; i++) {
      const m = meshInstances[i];
      this.removeMeshInstanceFromArray(m, opaque);
      this.removeMeshInstanceFromArray(m, transparent);

      if (!skipShadowCasters) {
        const j = casters.indexOf(m);
        if (j >= 0) casters.splice(j, 1);
      }
    }

    this._dirty = true;
  }

  clearMeshInstances(skipShadowCasters) {
    if (this.opaqueMeshInstances.length === 0 && this.transparentMeshInstances.length === 0) {
      if (skipShadowCasters || this.shadowCasters.length === 0) return;
    }

    this.opaqueMeshInstances.length = 0;
    this.transparentMeshInstances.length = 0;
    if (!skipShadowCasters) this.shadowCasters.length = 0;
    if (!this.passThrough) this._dirty = true;
  }

  addLight(light) {
    const l = light.light;

    if (!this._lightsSet.has(l)) {
      this._lightsSet.add(l);

      if (l.type !== LIGHTTYPE_DIRECTIONAL) {
        this._clusteredLightsSet.add(l);
      }

      this._lights.push(l);

      this._dirtyLights = true;

      this._generateLightHash();
    }
  }

  removeLight(light) {
    const l = light.light;

    if (this._lightsSet.has(l)) {
      this._lightsSet.delete(l);

      if (l.type !== LIGHTTYPE_DIRECTIONAL) {
        this._clusteredLightsSet.delete(l);
      }

      this._lights.splice(this._lights.indexOf(l), 1);

      this._dirtyLights = true;

      this._generateLightHash();
    }
  }

  clearLights() {
    this._lightsSet.clear();

    this._clusteredLightsSet.clear();

    this._lights.length = 0;
    this._dirtyLights = true;
  }

  addShadowCasters(meshInstances) {
    const arr = this.shadowCasters;

    for (let i = 0; i < meshInstances.length; i++) {
      const m = meshInstances[i];
      if (!m.castShadow) continue;
      if (arr.indexOf(m) < 0) arr.push(m);
    }

    this._dirtyLights = true;
  }

  removeShadowCasters(meshInstances) {
    const arr = this.shadowCasters;

    for (let i = 0; i < meshInstances.length; i++) {
      const id = arr.indexOf(meshInstances[i]);
      if (id >= 0) arr.splice(id, 1);
    }

    this._dirtyLights = true;
  }

  _generateLightHash() {
    if (this._lights.length > 0) {
      this._lights.sort(sortLights);

      let str = '';
      let strStatic = '';

      for (let i = 0; i < this._lights.length; i++) {
        if (this._lights[i].isStatic) {
          strStatic += this._lights[i].key;
        } else {
          str += this._lights[i].key;
        }
      }

      if (str.length === 0) {
        this._lightHash = 0;
      } else {
        this._lightHash = hashCode(str);
      }

      if (strStatic.length === 0) {
        this._staticLightHash = 0;
      } else {
        this._staticLightHash = hashCode(strStatic);
      }
    } else {
      this._lightHash = 0;
      this._staticLightHash = 0;
    }
  }

  addCamera(camera) {
    if (this.cameras.indexOf(camera) >= 0) return;
    this.cameras.push(camera);
    this._dirtyCameras = true;
  }

  removeCamera(camera) {
    const index = this.cameras.indexOf(camera);

    if (index >= 0) {
      this.cameras.splice(index, 1);
      this._dirtyCameras = true;
      this.instances.delete(index);
    }
  }

  clearCameras() {
    this.cameras.length = 0;
    this._dirtyCameras = true;
  }

  _calculateSortDistances(drawCalls, drawCallsCount, camPos, camFwd) {
    for (let i = 0; i < drawCallsCount; i++) {
      const drawCall = drawCalls[i];
      if (drawCall.command) continue;
      if (drawCall.layer <= LAYER_FX) continue;

      if (drawCall.calculateSortDistance) {
        drawCall.zdist = drawCall.calculateSortDistance(drawCall, camPos, camFwd);
        continue;
      }

      const meshPos = drawCall.aabb.center;
      const tempx = meshPos.x - camPos.x;
      const tempy = meshPos.y - camPos.y;
      const tempz = meshPos.z - camPos.z;
      drawCall.zdist = tempx * camFwd.x + tempy * camFwd.y + tempz * camFwd.z;
    }
  }

  _sortVisible(transparent, cameraNode, cameraPass) {
    const objects = this.instances;
    const sortMode = transparent ? this.transparentSortMode : this.opaqueSortMode;
    if (sortMode === SORTMODE_NONE) return;
    const visible = transparent ? objects.visibleTransparent[cameraPass] : objects.visibleOpaque[cameraPass];

    if (sortMode === SORTMODE_CUSTOM) {
      sortPos = cameraNode.getPosition();
      sortDir = cameraNode.forward;

      if (this.customCalculateSortValues) {
        this.customCalculateSortValues(visible.list, visible.length, sortPos, sortDir);
      }

      if (visible.list.length !== visible.length) {
        visible.list.length = visible.length;
      }

      if (this.customSortCallback) {
        visible.list.sort(this.customSortCallback);
      }
    } else {
      if (sortMode === SORTMODE_BACK2FRONT || sortMode === SORTMODE_FRONT2BACK) {
        sortPos = cameraNode.getPosition();
        sortDir = cameraNode.forward;

        this._calculateSortDistances(visible.list, visible.length, sortPos, sortDir);
      }

      if (visible.list.length !== visible.length) {
        visible.list.length = visible.length;
      }

      visible.list.sort(sortCallbacks[sortMode]);
    }
  }

}

const set = {
  equals: function (set1, set2) {
    if (set1.size !== set2.size) {
      return false;
    }

    for (const item of set1) {
      if (!set2.has(item)) {
        return false;
      }
    }

    return true;
  }
};

const cmpPriority = (a, b) => a.priority - b.priority;

const sortPriority = arr => arr.sort(cmpPriority);

class RenderAction {
  constructor() {
    this.layerIndex = 0;
    this.cameraIndex = 0;
    this.camera = null;
    this.renderTarget = null;
    this.lightClusters = null;
    this.clearColor = false;
    this.clearDepth = false;
    this.clearStencil = false;
    this.triggerPostprocess = false;
    this.firstCameraUse = false;
    this.lastCameraUse = false;
    this.directionalLightsSet = new Set();
    this.directionalLights = [];
    this.directionalLightsIndices = [];
    this.viewBindGroups = [];
  }

  destroy() {
    this.viewBindGroups.forEach(bg => {
      bg.defaultUniformBuffer.destroy();
      bg.destroy();
    });
    this.viewBindGroups.length = 0;
  }

  get hasDirectionalShadowLights() {
    return this.directionalLights.length > 0;
  }

  reset() {
    this.lightClusters = null;
    this.directionalLightsSet.clear();
    this.directionalLights.length = 0;
    this.directionalLightsIndices.length = 0;
  }

  isLayerEnabled(layerComposition) {
    const layer = layerComposition.layerList[this.layerIndex];
    return layer.enabled && layerComposition.subLayerEnabled[this.layerIndex];
  }

  collectDirectionalLights(cameraLayers, dirLights, allLights) {
    this.directionalLightsSet.clear();
    this.directionalLights.length = 0;
    this.directionalLightsIndices.length = 0;

    for (let i = 0; i < dirLights.length; i++) {
      const light = dirLights[i];

      if (light.castShadows) {
        for (let l = 0; l < cameraLayers.length; l++) {
          if (cameraLayers[l]._splitLights[LIGHTTYPE_DIRECTIONAL].indexOf(light) >= 0) {
            if (!this.directionalLightsSet.has(light)) {
              this.directionalLightsSet.add(light);
              this.directionalLights.push(light);
              const lightIndex = allLights.indexOf(light);
              this.directionalLightsIndices.push(lightIndex);
            }
          }
        }
      }
    }
  }

}

class LightCompositionData {
  constructor() {
    this.shadowCastersSet = new Set();
    this.shadowCastersList = [];
  }

  clearShadowCasters() {
    this.shadowCastersSet.clear();
    this.shadowCastersList.length = 0;
  }

  addShadowCasters(casters) {
    for (let i = 0; i < casters.length; i++) {
      const item = casters[i];

      if (!this.shadowCastersSet.has(item)) {
        this.shadowCastersSet.add(item);
        this.shadowCastersList.push(item);
      }
    }
  }

}

const tempSet$1 = new Set();
const tempClusterArray = [];

class LayerComposition extends EventHandler {
  constructor(name = 'Untitled') {
    super();
    this.name = name;
    this.layerList = [];
    this.subLayerList = [];
    this.subLayerEnabled = [];
    this._opaqueOrder = {};
    this._transparentOrder = {};
    this._dirty = false;
    this._dirtyBlend = false;
    this._dirtyLights = false;
    this._dirtyCameras = false;
    this._meshInstances = [];
    this._meshInstancesSet = new Set();
    this._lights = [];
    this._lightsMap = new Map();
    this._lightCompositionData = [];
    this._splitLights = [[], [], []];
    this.cameras = [];
    this._renderActions = [];
    this._worldClusters = [];
    this._emptyWorldClusters = null;
  }

  destroy() {
    if (this._emptyWorldClusters) {
      this._emptyWorldClusters.destroy();

      this._emptyWorldClusters = null;
    }

    this._worldClusters.forEach(cluster => {
      cluster.destroy();
    });

    this._worldClusters = null;

    this._renderActions.forEach(ra => ra.destroy());

    this._renderActions = null;
  }

  getEmptyWorldClusters(device) {
    if (!this._emptyWorldClusters) {
      this._emptyWorldClusters = new WorldClusters(device);
      this._emptyWorldClusters.name = 'ClusterEmpty';

      this._emptyWorldClusters.update([], false, null);
    }

    return this._emptyWorldClusters;
  }

  _splitLightsArray(target) {
    const lights = target._lights;
    target._splitLights[LIGHTTYPE_DIRECTIONAL].length = 0;
    target._splitLights[LIGHTTYPE_OMNI].length = 0;
    target._splitLights[LIGHTTYPE_SPOT].length = 0;

    for (let i = 0; i < lights.length; i++) {
      const light = lights[i];

      if (light.enabled) {
        target._splitLights[light._type].push(light);
      }
    }
  }

  _update(device, clusteredLightingEnabled = false) {
    const len = this.layerList.length;
    let result = 0;

    if (!this._dirty || !this._dirtyLights || !this._dirtyCameras) {
      for (let i = 0; i < len; i++) {
        const layer = this.layerList[i];

        if (layer._dirty) {
          this._dirty = true;
        }

        if (layer._dirtyLights) {
          this._dirtyLights = true;
        }

        if (layer._dirtyCameras) {
          this._dirtyCameras = true;
        }
      }
    }

    function addUniqueMeshInstance(destArray, destSet, srcArray) {
      let dirtyBlend = false;
      const srcLen = srcArray.length;

      for (let s = 0; s < srcLen; s++) {
        const meshInst = srcArray[s];

        if (!destSet.has(meshInst)) {
          destSet.add(meshInst);
          destArray.push(meshInst);
          const material = meshInst.material;

          if (material && material._dirtyBlend) {
            dirtyBlend = true;
            material._dirtyBlend = false;
          }
        }
      }

      return dirtyBlend;
    }

    if (this._dirty) {
      result |= COMPUPDATED_INSTANCES;
      this._meshInstances.length = 0;

      this._meshInstancesSet.clear();

      for (let i = 0; i < len; i++) {
        const layer = this.layerList[i];

        if (!layer.passThrough) {
          this._dirtyBlend = addUniqueMeshInstance(this._meshInstances, this._meshInstancesSet, layer.opaqueMeshInstances) || this._dirtyBlend;
          this._dirtyBlend = addUniqueMeshInstance(this._meshInstances, this._meshInstancesSet, layer.transparentMeshInstances) || this._dirtyBlend;
        }

        layer._dirty = false;
      }

      this._dirty = false;
    }

    function moveByBlendType(dest, src, moveTransparent) {
      for (let s = 0; s < src.length;) {
        var _src$s$material;

        if (((_src$s$material = src[s].material) == null ? void 0 : _src$s$material.transparent) === moveTransparent) {
          dest.push(src[s]);
          src[s] = src[src.length - 1];
          src.length--;
        } else {
          s++;
        }
      }
    }

    if (this._dirtyBlend) {
      result |= COMPUPDATED_BLEND;

      for (let i = 0; i < len; i++) {
        const layer = this.layerList[i];

        if (!layer.passThrough) {
          moveByBlendType(layer.opaqueMeshInstances, layer.transparentMeshInstances, false);
          moveByBlendType(layer.transparentMeshInstances, layer.opaqueMeshInstances, true);
        }
      }

      this._dirtyBlend = false;
    }

    if (this._dirtyLights) {
      result |= COMPUPDATED_LIGHTS;
      this._dirtyLights = false;
      this.updateLights();
    }

    if (result) {
      this.updateShadowCasters();
    }

    if (this._dirtyCameras || result & COMPUPDATED_LIGHTS) {
      this._dirtyCameras = false;
      result |= COMPUPDATED_CAMERAS;
      this.cameras.length = 0;

      for (let i = 0; i < len; i++) {
        const layer = this.layerList[i];
        layer._dirtyCameras = false;

        for (let j = 0; j < layer.cameras.length; j++) {
          const camera = layer.cameras[j];
          const index = this.cameras.indexOf(camera);

          if (index < 0) {
            this.cameras.push(camera);
          }
        }
      }

      if (this.cameras.length > 1) {
        sortPriority(this.cameras);
      }

      const cameraLayers = [];
      let renderActionCount = 0;

      for (let i = 0; i < this.cameras.length; i++) {
        const camera = this.cameras[i];
        cameraLayers.length = 0;
        let cameraFirstRenderAction = true;
        const cameraFirstRenderActionIndex = renderActionCount;
        let lastRenderAction = null;
        let postProcessMarked = false;

        for (let j = 0; j < len; j++) {
          const layer = this.layerList[j];

          if (layer) {
            if (layer.cameras.length > 0) {
              if (camera.layers.indexOf(layer.id) >= 0) {
                cameraLayers.push(layer);

                if (!postProcessMarked && layer.id === camera.disablePostEffectsLayer) {
                  postProcessMarked = true;

                  if (lastRenderAction) {
                    lastRenderAction.triggerPostprocess = true;
                  }
                }

                const cameraIndex = layer.cameras.indexOf(camera);

                if (cameraIndex >= 0) {
                  lastRenderAction = this.addRenderAction(this._renderActions, renderActionCount, layer, j, cameraIndex, cameraFirstRenderAction, postProcessMarked);
                  renderActionCount++;
                  cameraFirstRenderAction = false;
                }
              }
            }
          }
        }

        if (cameraFirstRenderActionIndex < renderActionCount) {
          this._renderActions[cameraFirstRenderActionIndex].collectDirectionalLights(cameraLayers, this._splitLights[LIGHTTYPE_DIRECTIONAL], this._lights);

          lastRenderAction.lastCameraUse = true;
        }

        if (!postProcessMarked && lastRenderAction) {
          lastRenderAction.triggerPostprocess = true;
        }

        if (camera.renderTarget && camera.postEffectsEnabled) {
          this.propagateRenderTarget(cameraFirstRenderActionIndex - 1, camera);
        }
      }

      for (let i = renderActionCount; i < this._renderActions.length; i++) {
        this._renderActions[i].destroy();
      }

      this._renderActions.length = renderActionCount;
    }

    if (result & (COMPUPDATED_CAMERAS | COMPUPDATED_LIGHTS | COMPUPDATED_INSTANCES)) {
      if (clusteredLightingEnabled) {
        this.allocateLightClusters(device);
      }
    }

    if (result & (COMPUPDATED_LIGHTS | COMPUPDATED_LIGHTS)) {
      this._logRenderActions();
    }

    return result;
  }

  updateShadowCasters() {
    const lightCount = this._lights.length;

    for (let i = 0; i < lightCount; i++) {
      this._lightCompositionData[i].clearShadowCasters();
    }

    const len = this.layerList.length;

    for (let i = 0; i < len; i++) {
      const layer = this.layerList[i];

      if (!tempSet$1.has(layer)) {
        tempSet$1.add(layer);
        const lights = layer._lights;

        for (let j = 0; j < lights.length; j++) {
          if (lights[j].castShadows) {
            const lightIndex = this._lightsMap.get(lights[j]);

            const lightCompData = this._lightCompositionData[lightIndex];
            lightCompData.addShadowCasters(layer.shadowCasters);
          }
        }
      }
    }

    tempSet$1.clear();
  }

  updateLights() {
    this._lights.length = 0;

    this._lightsMap.clear();

    const count = this.layerList.length;

    for (let i = 0; i < count; i++) {
      const layer = this.layerList[i];

      if (!tempSet$1.has(layer)) {
        tempSet$1.add(layer);
        const lights = layer._lights;

        for (let j = 0; j < lights.length; j++) {
          const light = lights[j];

          let lightIndex = this._lightsMap.get(light);

          if (lightIndex === undefined) {
            lightIndex = this._lights.length;

            this._lightsMap.set(light, lightIndex);

            this._lights.push(light);

            let lightCompData = this._lightCompositionData[lightIndex];

            if (!lightCompData) {
              lightCompData = new LightCompositionData();
              this._lightCompositionData[lightIndex] = lightCompData;
            }
          }
        }
      }

      this._splitLightsArray(layer);

      layer._dirtyLights = false;
    }

    tempSet$1.clear();

    this._splitLightsArray(this);

    const lightCount = this._lights.length;
    this._lightCompositionData.length = lightCount;
  }

  findCompatibleCluster(layer, renderActionCount, emptyWorldClusters) {
    for (let i = 0; i < renderActionCount; i++) {
      const ra = this._renderActions[i];
      const raLayer = this.layerList[ra.layerIndex];

      if (ra.lightClusters !== emptyWorldClusters) {
        if (layer === raLayer) {
          return ra.lightClusters;
        }

        if (ra.lightClusters) {
          if (set.equals(layer._clusteredLightsSet, raLayer._clusteredLightsSet)) {
            return ra.lightClusters;
          }
        }
      }
    }

    return null;
  }

  allocateLightClusters(device) {
    tempClusterArray.push(...this._worldClusters);
    const emptyWorldClusters = this.getEmptyWorldClusters(device);
    this._worldClusters.length = 0;
    const count = this._renderActions.length;

    for (let i = 0; i < count; i++) {
      const ra = this._renderActions[i];
      const layer = this.layerList[ra.layerIndex];

      if (layer.hasClusteredLights) {
        const transparent = this.subLayerList[ra.layerIndex];
        const meshInstances = transparent ? layer.transparentMeshInstances : layer.opaqueMeshInstances;

        if (meshInstances.length) {
          let clusters = this.findCompatibleCluster(layer, i, emptyWorldClusters);

          if (!clusters) {
            if (tempClusterArray.length) {
              clusters = tempClusterArray.pop();
            }

            if (!clusters) {
              clusters = new WorldClusters(device);
            }

            clusters.name = 'Cluster-' + this._worldClusters.length;

            this._worldClusters.push(clusters);
          }

          ra.lightClusters = clusters;
        }
      }

      if (!ra.lightClusters) {
        ra.lightClusters = emptyWorldClusters;
      }
    }

    tempClusterArray.forEach(item => {
      item.destroy();
    });
    tempClusterArray.length = 0;
  }

  addRenderAction(renderActions, renderActionIndex, layer, layerIndex, cameraIndex, cameraFirstRenderAction, postProcessMarked) {
    let renderAction = renderActions[renderActionIndex];

    if (!renderAction) {
      renderAction = renderActions[renderActionIndex] = new RenderAction();
    }

    let rt = layer.renderTarget;
    const camera = layer.cameras[cameraIndex];

    if (camera && camera.renderTarget) {
      if (layer.id !== LAYERID_DEPTH) {
        rt = camera.renderTarget;
      }
    }

    let used = false;

    for (let i = renderActionIndex - 1; i >= 0; i--) {
      if (renderActions[i].camera === camera && renderActions[i].renderTarget === rt) {
        used = true;
        break;
      }
    }

    const needsClear = cameraFirstRenderAction || !used;
    let clearColor = needsClear ? camera.clearColorBuffer : false;
    let clearDepth = needsClear ? camera.clearDepthBuffer : false;
    let clearStencil = needsClear ? camera.clearStencilBuffer : false;
    clearColor || (clearColor = layer.clearColorBuffer);
    clearDepth || (clearDepth = layer.clearDepthBuffer);
    clearStencil || (clearStencil = layer.clearStencilBuffer);

    if (postProcessMarked && camera.postEffectsEnabled) {
      rt = null;
    }

    renderAction.reset();
    renderAction.triggerPostprocess = false;
    renderAction.layerIndex = layerIndex;
    renderAction.cameraIndex = cameraIndex;
    renderAction.camera = camera;
    renderAction.renderTarget = rt;
    renderAction.clearColor = clearColor;
    renderAction.clearDepth = clearDepth;
    renderAction.clearStencil = clearStencil;
    renderAction.firstCameraUse = cameraFirstRenderAction;
    renderAction.lastCameraUse = false;
    return renderAction;
  }

  propagateRenderTarget(startIndex, fromCamera) {
    for (let a = startIndex; a >= 0; a--) {
      const ra = this._renderActions[a];
      const layer = this.layerList[ra.layerIndex];

      if (ra.renderTarget && layer.id !== LAYERID_DEPTH) {
        break;
      }

      if (layer.id === LAYERID_DEPTH) {
        continue;
      }

      const thisCamera = ra == null ? void 0 : ra.camera.camera;

      if (thisCamera) {
        if (!fromCamera.camera.rect.equals(thisCamera.rect) || !fromCamera.camera.scissorRect.equals(thisCamera.scissorRect)) {
          break;
        }
      }

      ra.renderTarget = fromCamera.renderTarget;
    }
  }

  _logRenderActions() {}

  _isLayerAdded(layer) {
    if (this.layerList.indexOf(layer) >= 0) {
      return true;
    }

    return false;
  }

  _isSublayerAdded(layer, transparent) {
    for (let i = 0; i < this.layerList.length; i++) {
      if (this.layerList[i] === layer && this.subLayerList[i] === transparent) {
        return true;
      }
    }

    return false;
  }

  push(layer) {
    if (this._isLayerAdded(layer)) return;
    this.layerList.push(layer);
    this.layerList.push(layer);
    this._opaqueOrder[layer.id] = this.subLayerList.push(false) - 1;
    this._transparentOrder[layer.id] = this.subLayerList.push(true) - 1;
    this.subLayerEnabled.push(true);
    this.subLayerEnabled.push(true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire('add', layer);
  }

  insert(layer, index) {
    if (this._isLayerAdded(layer)) return;
    this.layerList.splice(index, 0, layer, layer);
    this.subLayerList.splice(index, 0, false, true);
    const count = this.layerList.length;

    this._updateOpaqueOrder(index, count - 1);

    this._updateTransparentOrder(index, count - 1);

    this.subLayerEnabled.splice(index, 0, true, true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire('add', layer);
  }

  remove(layer) {
    let id = this.layerList.indexOf(layer);
    delete this._opaqueOrder[id];
    delete this._transparentOrder[id];

    while (id >= 0) {
      this.layerList.splice(id, 1);
      this.subLayerList.splice(id, 1);
      this.subLayerEnabled.splice(id, 1);
      id = this.layerList.indexOf(layer);
      this._dirty = true;
      this._dirtyLights = true;
      this._dirtyCameras = true;
      this.fire('remove', layer);
    }

    const count = this.layerList.length;

    this._updateOpaqueOrder(0, count - 1);

    this._updateTransparentOrder(0, count - 1);
  }

  pushOpaque(layer) {
    if (this._isSublayerAdded(layer, false)) return;
    this.layerList.push(layer);
    this._opaqueOrder[layer.id] = this.subLayerList.push(false) - 1;
    this.subLayerEnabled.push(true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire('add', layer);
  }

  insertOpaque(layer, index) {
    if (this._isSublayerAdded(layer, false)) return;
    this.layerList.splice(index, 0, layer);
    this.subLayerList.splice(index, 0, false);
    const count = this.subLayerList.length;

    this._updateOpaqueOrder(index, count - 1);

    this.subLayerEnabled.splice(index, 0, true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire('add', layer);
  }

  removeOpaque(layer) {
    for (let i = 0, len = this.layerList.length; i < len; i++) {
      if (this.layerList[i] === layer && !this.subLayerList[i]) {
        this.layerList.splice(i, 1);
        this.subLayerList.splice(i, 1);
        len--;

        this._updateOpaqueOrder(i, len - 1);

        this.subLayerEnabled.splice(i, 1);
        this._dirty = true;
        this._dirtyLights = true;
        this._dirtyCameras = true;

        if (this.layerList.indexOf(layer) < 0) {
          this.fire('remove', layer);
        }

        return;
      }
    }
  }

  pushTransparent(layer) {
    if (this._isSublayerAdded(layer, true)) return;
    this.layerList.push(layer);
    this._transparentOrder[layer.id] = this.subLayerList.push(true) - 1;
    this.subLayerEnabled.push(true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire('add', layer);
  }

  insertTransparent(layer, index) {
    if (this._isSublayerAdded(layer, true)) return;
    this.layerList.splice(index, 0, layer);
    this.subLayerList.splice(index, 0, true);
    const count = this.subLayerList.length;

    this._updateTransparentOrder(index, count - 1);

    this.subLayerEnabled.splice(index, 0, true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire('add', layer);
  }

  removeTransparent(layer) {
    for (let i = 0, len = this.layerList.length; i < len; i++) {
      if (this.layerList[i] === layer && this.subLayerList[i]) {
        this.layerList.splice(i, 1);
        this.subLayerList.splice(i, 1);
        len--;

        this._updateTransparentOrder(i, len - 1);

        this.subLayerEnabled.splice(i, 1);
        this._dirty = true;
        this._dirtyLights = true;
        this._dirtyCameras = true;

        if (this.layerList.indexOf(layer) < 0) {
          this.fire('remove', layer);
        }

        return;
      }
    }
  }

  _getSublayerIndex(layer, transparent) {
    let id = this.layerList.indexOf(layer);
    if (id < 0) return -1;

    if (this.subLayerList[id] !== transparent) {
      id = this.layerList.indexOf(layer, id + 1);
      if (id < 0) return -1;

      if (this.subLayerList[id] !== transparent) {
        return -1;
      }
    }

    return id;
  }

  getOpaqueIndex(layer) {
    return this._getSublayerIndex(layer, false);
  }

  getTransparentIndex(layer) {
    return this._getSublayerIndex(layer, true);
  }

  getLayerById(id) {
    for (let i = 0; i < this.layerList.length; i++) {
      if (this.layerList[i].id === id) return this.layerList[i];
    }

    return null;
  }

  getLayerByName(name) {
    for (let i = 0; i < this.layerList.length; i++) {
      if (this.layerList[i].name === name) return this.layerList[i];
    }

    return null;
  }

  _updateOpaqueOrder(startIndex, endIndex) {
    for (let i = startIndex; i <= endIndex; i++) {
      if (this.subLayerList[i] === false) {
        this._opaqueOrder[this.layerList[i].id] = i;
      }
    }
  }

  _updateTransparentOrder(startIndex, endIndex) {
    for (let i = startIndex; i <= endIndex; i++) {
      if (this.subLayerList[i] === true) {
        this._transparentOrder[this.layerList[i].id] = i;
      }
    }
  }

  _sortLayersDescending(layersA, layersB, order) {
    let topLayerA = -1;
    let topLayerB = -1;

    for (let i = 0, len = layersA.length; i < len; i++) {
      const id = layersA[i];

      if (order.hasOwnProperty(id)) {
        topLayerA = Math.max(topLayerA, order[id]);
      }
    }

    for (let i = 0, len = layersB.length; i < len; i++) {
      const id = layersB[i];

      if (order.hasOwnProperty(id)) {
        topLayerB = Math.max(topLayerB, order[id]);
      }
    }

    if (topLayerA === -1 && topLayerB !== -1) {
      return 1;
    } else if (topLayerB === -1 && topLayerA !== -1) {
      return -1;
    }

    return topLayerB - topLayerA;
  }

  sortTransparentLayers(layersA, layersB) {
    return this._sortLayersDescending(layersA, layersB, this._transparentOrder);
  }

  sortOpaqueLayers(layersA, layersB) {
    return this._sortLayersDescending(layersA, layersB, this._opaqueOrder);
  }

}

const spotCenter = new Vec3();
const spotEndPoint = new Vec3();
const tmpVec = new Vec3();
const tmpBiases = {
  bias: 0,
  normalBias: 0
};
const chanId = {
  r: 0,
  g: 1,
  b: 2,
  a: 3
};
const lightTypes = {
  'directional': LIGHTTYPE_DIRECTIONAL,
  'omni': LIGHTTYPE_OMNI,
  'point': LIGHTTYPE_OMNI,
  'spot': LIGHTTYPE_SPOT
};
const directionalCascades = [[new Vec4(0, 0, 1, 1)], [new Vec4(0, 0, 0.5, 0.5), new Vec4(0, 0.5, 0.5, 0.5)], [new Vec4(0, 0, 0.5, 0.5), new Vec4(0, 0.5, 0.5, 0.5), new Vec4(0.5, 0, 0.5, 0.5)], [new Vec4(0, 0, 0.5, 0.5), new Vec4(0, 0.5, 0.5, 0.5), new Vec4(0.5, 0, 0.5, 0.5), new Vec4(0.5, 0.5, 0.5, 0.5)]];
let id = 0;

class LightRenderData {
  constructor(device, camera, face, light) {
    this.light = light;
    this.camera = camera;
    this.shadowCamera = ShadowRenderer.createShadowCamera(device, light._shadowType, light._type, face);
    this.shadowMatrix = new Mat4();
    this.shadowViewport = new Vec4(0, 0, 1, 1);
    this.shadowScissor = new Vec4(0, 0, 1, 1);
    this.face = face;
    this.visibleCasters = [];
  }

  get shadowBuffer() {
    const rt = this.shadowCamera.renderTarget;

    if (rt) {
      const light = this.light;

      if (light._type === LIGHTTYPE_OMNI) {
        return rt.colorBuffer;
      }

      return light._isPcf && light.device.webgl2 ? rt.depthBuffer : rt.colorBuffer;
    }

    return null;
  }

}

class Light {
  constructor(graphicsDevice) {
    this.device = graphicsDevice;
    this.id = id++;
    this._type = LIGHTTYPE_DIRECTIONAL;
    this._color = new Color(0.8, 0.8, 0.8);
    this._intensity = 1;
    this._luminance = 0;
    this._castShadows = false;
    this._enabled = false;
    this.mask = MASK_AFFECT_DYNAMIC;
    this.isStatic = false;
    this.key = 0;
    this.bakeDir = true;
    this.bakeNumSamples = 1;
    this.bakeArea = 0;
    this.attenuationStart = 10;
    this.attenuationEnd = 10;
    this._falloffMode = LIGHTFALLOFF_LINEAR;
    this._shadowType = SHADOW_PCF3;
    this._vsmBlurSize = 11;
    this.vsmBlurMode = BLUR_GAUSSIAN;
    this.vsmBias = 0.01 * 0.25;
    this._cookie = null;
    this.cookieIntensity = 1;
    this._cookieFalloff = true;
    this._cookieChannel = 'rgb';
    this._cookieTransform = null;
    this._cookieTransformUniform = new Float32Array(4);
    this._cookieOffset = null;
    this._cookieOffsetUniform = new Float32Array(2);
    this._cookieTransformSet = false;
    this._cookieOffsetSet = false;
    this._innerConeAngle = 40;
    this._outerConeAngle = 45;
    this.cascades = null;
    this._shadowMatrixPalette = null;
    this._shadowCascadeDistances = null;
    this.numCascades = 1;
    this.cascadeDistribution = 0.5;
    this._shape = LIGHTSHAPE_PUNCTUAL;
    this._finalColor = new Float32Array([0.8, 0.8, 0.8]);
    const c = Math.pow(this._finalColor[0], 2.2);
    this._linearFinalColor = new Float32Array([c, c, c]);
    this._position = new Vec3(0, 0, 0);
    this._direction = new Vec3(0, 0, 0);
    this._innerConeAngleCos = Math.cos(this._innerConeAngle * Math.PI / 180);
    this._outerConeAngleCos = Math.cos(this._outerConeAngle * Math.PI / 180);
    this._usePhysicalUnits = undefined;
    this._shadowMap = null;
    this._shadowRenderParams = [];
    this.shadowDistance = 40;
    this._shadowResolution = 1024;
    this.shadowBias = -0.0005;
    this.shadowIntensity = 1.0;
    this._normalOffsetBias = 0.0;
    this.shadowUpdateMode = SHADOWUPDATE_REALTIME;
    this._isVsm = false;
    this._isPcf = true;
    this._cookieMatrix = null;
    this._atlasViewport = null;
    this.atlasViewportAllocated = false;
    this.atlasVersion = 0;
    this.atlasSlotIndex = 0;
    this.atlasSlotUpdated = false;
    this._scene = null;
    this._node = null;
    this._renderData = [];
    this.visibleThisFrame = false;
    this.maxScreenSize = 0;
  }

  destroy() {
    this._destroyShadowMap();

    this._renderData = null;
  }

  set numCascades(value) {
    if (!this.cascades || this.numCascades !== value) {
      this.cascades = directionalCascades[value - 1];
      this._shadowMatrixPalette = new Float32Array(4 * 16);
      this._shadowCascadeDistances = new Float32Array(4);

      this._destroyShadowMap();

      this.updateKey();
    }
  }

  get numCascades() {
    return this.cascades.length;
  }

  set shadowMap(shadowMap) {
    if (this._shadowMap !== shadowMap) {
      this._destroyShadowMap();

      this._shadowMap = shadowMap;
    }
  }

  get shadowMap() {
    return this._shadowMap;
  }

  get numShadowFaces() {
    const type = this._type;

    if (type === LIGHTTYPE_DIRECTIONAL) {
      return this.numCascades;
    } else if (type === LIGHTTYPE_OMNI) {
      return 6;
    }

    return 1;
  }

  set type(value) {
    if (this._type === value) return;
    this._type = value;

    this._destroyShadowMap();

    this.updateKey();
    const stype = this._shadowType;
    this._shadowType = null;
    this.shadowType = stype;
  }

  get type() {
    return this._type;
  }

  set shape(value) {
    if (this._shape === value) return;
    this._shape = value;

    this._destroyShadowMap();

    this.updateKey();
    const stype = this._shadowType;
    this._shadowType = null;
    this.shadowType = stype;
  }

  get shape() {
    return this._shape;
  }

  set usePhysicalUnits(value) {
    if (this._usePhysicalUnits !== value) {
      this._usePhysicalUnits = value;

      this._updateFinalColor();
    }
  }

  get usePhysicalUnits() {
    return this._usePhysicalUnits;
  }

  set shadowType(value) {
    if (this._shadowType === value) return;
    const device = this.device;
    if (this._type === LIGHTTYPE_OMNI) value = SHADOW_PCF3;

    if (value === SHADOW_PCF5 && !device.webgl2) {
      value = SHADOW_PCF3;
    }

    if (value === SHADOW_VSM32 && !device.textureFloatRenderable) value = SHADOW_VSM16;
    if (value === SHADOW_VSM16 && !device.textureHalfFloatRenderable) value = SHADOW_VSM8;
    this._isVsm = value >= SHADOW_VSM8 && value <= SHADOW_VSM32;
    this._isPcf = value === SHADOW_PCF5 || value === SHADOW_PCF3;
    this._shadowType = value;

    this._destroyShadowMap();

    this.updateKey();
  }

  get shadowType() {
    return this._shadowType;
  }

  set enabled(value) {
    if (this._enabled !== value) {
      this._enabled = value;
      this.layersDirty();
    }
  }

  get enabled() {
    return this._enabled;
  }

  set castShadows(value) {
    if (this._castShadows !== value) {
      this._castShadows = value;

      this._destroyShadowMap();

      this.layersDirty();
      this.updateKey();
    }
  }

  get castShadows() {
    return this._castShadows && this.mask !== MASK_BAKE && this.mask !== 0;
  }

  set shadowResolution(value) {
    if (this._shadowResolution !== value) {
      if (this._type === LIGHTTYPE_OMNI) {
        value = Math.min(value, this.device.maxCubeMapSize);
      } else {
        value = Math.min(value, this.device.maxTextureSize);
      }

      this._shadowResolution = value;

      this._destroyShadowMap();
    }
  }

  get shadowResolution() {
    return this._shadowResolution;
  }

  set vsmBlurSize(value) {
    if (this._vsmBlurSize === value) return;
    if (value % 2 === 0) value++;
    this._vsmBlurSize = value;
  }

  get vsmBlurSize() {
    return this._vsmBlurSize;
  }

  set normalOffsetBias(value) {
    if (this._normalOffsetBias === value) return;

    if (!this._normalOffsetBias && value || this._normalOffsetBias && !value) {
      this.updateKey();
    }

    this._normalOffsetBias = value;
  }

  get normalOffsetBias() {
    return this._normalOffsetBias;
  }

  set falloffMode(value) {
    if (this._falloffMode === value) return;
    this._falloffMode = value;
    this.updateKey();
  }

  get falloffMode() {
    return this._falloffMode;
  }

  set innerConeAngle(value) {
    if (this._innerConeAngle === value) return;
    this._innerConeAngle = value;
    this._innerConeAngleCos = Math.cos(value * Math.PI / 180);

    if (this._usePhysicalUnits) {
      this._updateFinalColor();
    }
  }

  get innerConeAngle() {
    return this._innerConeAngle;
  }

  set outerConeAngle(value) {
    if (this._outerConeAngle === value) return;
    this._outerConeAngle = value;
    this._outerConeAngleCos = Math.cos(value * Math.PI / 180);

    if (this._usePhysicalUnits) {
      this._updateFinalColor();
    }
  }

  get outerConeAngle() {
    return this._outerConeAngle;
  }

  set intensity(value) {
    if (this._intensity !== value) {
      this._intensity = value;

      this._updateFinalColor();
    }
  }

  get intensity() {
    return this._intensity;
  }

  set luminance(value) {
    if (this._luminance !== value) {
      this._luminance = value;

      this._updateFinalColor();
    }
  }

  get luminance() {
    return this._luminance;
  }

  get cookieMatrix() {
    if (!this._cookieMatrix) {
      this._cookieMatrix = new Mat4();
    }

    return this._cookieMatrix;
  }

  get atlasViewport() {
    if (!this._atlasViewport) {
      this._atlasViewport = new Vec4(0, 0, 1, 1);
    }

    return this._atlasViewport;
  }

  set cookie(value) {
    if (this._cookie === value) return;
    this._cookie = value;
    this.updateKey();
  }

  get cookie() {
    return this._cookie;
  }

  set cookieFalloff(value) {
    if (this._cookieFalloff === value) return;
    this._cookieFalloff = value;
    this.updateKey();
  }

  get cookieFalloff() {
    return this._cookieFalloff;
  }

  set cookieChannel(value) {
    if (this._cookieChannel === value) return;

    if (value.length < 3) {
      const chr = value.charAt(value.length - 1);
      const addLen = 3 - value.length;

      for (let i = 0; i < addLen; i++) value += chr;
    }

    this._cookieChannel = value;
    this.updateKey();
  }

  get cookieChannel() {
    return this._cookieChannel;
  }

  set cookieTransform(value) {
    if (this._cookieTransform === value) return;
    this._cookieTransform = value;
    this._cookieTransformSet = !!value;

    if (value && !this._cookieOffset) {
      this.cookieOffset = new Vec2();
      this._cookieOffsetSet = false;
    }

    this.updateKey();
  }

  get cookieTransform() {
    return this._cookieTransform;
  }

  set cookieOffset(value) {
    if (this._cookieOffset === value) return;
    const xformNew = !!(this._cookieTransformSet || value);

    if (xformNew && !value && this._cookieOffset) {
      this._cookieOffset.set(0, 0);
    } else {
      this._cookieOffset = value;
    }

    this._cookieOffsetSet = !!value;

    if (value && !this._cookieTransform) {
      this.cookieTransform = new Vec4(1, 1, 0, 0);
      this._cookieTransformSet = false;
    }

    this.updateKey();
  }

  get cookieOffset() {
    return this._cookieOffset;
  }

  beginFrame() {
    this.visibleThisFrame = this._type === LIGHTTYPE_DIRECTIONAL && this._enabled;
    this.maxScreenSize = 0;
    this.atlasViewportAllocated = false;
    this.atlasSlotUpdated = false;
  }

  _destroyShadowMap() {
    if (this._renderData) {
      this._renderData.length = 0;
    }

    if (this._shadowMap) {
      if (!this._shadowMap.cached) {
        this._shadowMap.destroy();
      }

      this._shadowMap = null;
    }

    if (this.shadowUpdateMode === SHADOWUPDATE_NONE) {
      this.shadowUpdateMode = SHADOWUPDATE_THISFRAME;
    }
  }

  getRenderData(camera, face) {
    for (let i = 0; i < this._renderData.length; i++) {
      const current = this._renderData[i];

      if (current.camera === camera && current.face === face) {
        return current;
      }
    }

    const rd = new LightRenderData(this.device, camera, face, this);

    this._renderData.push(rd);

    return rd;
  }

  clone() {
    const clone = new Light(this.device);
    clone.type = this._type;
    clone.setColor(this._color);
    clone.intensity = this._intensity;
    clone.luminance = this._luminance;
    clone.castShadows = this.castShadows;
    clone._enabled = this._enabled;
    clone.attenuationStart = this.attenuationStart;
    clone.attenuationEnd = this.attenuationEnd;
    clone.falloffMode = this._falloffMode;
    clone.shadowType = this._shadowType;
    clone.vsmBlurSize = this._vsmBlurSize;
    clone.vsmBlurMode = this.vsmBlurMode;
    clone.vsmBias = this.vsmBias;
    clone.shadowUpdateMode = this.shadowUpdateMode;
    clone.mask = this.mask;
    clone.innerConeAngle = this._innerConeAngle;
    clone.outerConeAngle = this._outerConeAngle;
    clone.numCascades = this.numCascades;
    clone.cascadeDistribution = this.cascadeDistribution;
    clone.shape = this._shape;
    clone.shadowBias = this.shadowBias;
    clone.normalOffsetBias = this._normalOffsetBias;
    clone.shadowResolution = this._shadowResolution;
    clone.shadowDistance = this.shadowDistance;
    clone.shadowIntensity = this.shadowIntensity;
    return clone;
  }

  static getLightUnitConversion(type, outerAngle = Math.PI / 4, innerAngle = 0) {
    switch (type) {
      case LIGHTTYPE_SPOT:
        {
          const falloffEnd = Math.cos(outerAngle);
          const falloffStart = Math.cos(innerAngle);
          return 2 * Math.PI * (1 - falloffStart + (falloffStart - falloffEnd) / 2.0);
        }

      case LIGHTTYPE_OMNI:
        return 4 * Math.PI;

      case LIGHTTYPE_DIRECTIONAL:
        return 1;
    }
  }

  _getUniformBiasValues(lightRenderData) {
    const farClip = lightRenderData.shadowCamera._farClip;

    switch (this._type) {
      case LIGHTTYPE_OMNI:
        tmpBiases.bias = this.shadowBias;
        tmpBiases.normalBias = this._normalOffsetBias;
        break;

      case LIGHTTYPE_SPOT:
        if (this._isVsm) {
          tmpBiases.bias = -0.00001 * 20;
        } else {
          tmpBiases.bias = this.shadowBias * 20;
          if (!this.device.webgl2 && this.device.extStandardDerivatives) tmpBiases.bias *= -100;
        }

        tmpBiases.normalBias = this._isVsm ? this.vsmBias / (this.attenuationEnd / 7.0) : this._normalOffsetBias;
        break;

      case LIGHTTYPE_DIRECTIONAL:
        if (this._isVsm) {
          tmpBiases.bias = -0.00001 * 20;
        } else {
          tmpBiases.bias = this.shadowBias / farClip * 100;
          if (!this.device.webgl2 && this.device.extStandardDerivatives) tmpBiases.bias *= -100;
        }

        tmpBiases.normalBias = this._isVsm ? this.vsmBias / (farClip / 7.0) : this._normalOffsetBias;
        break;
    }

    return tmpBiases;
  }

  getColor() {
    return this._color;
  }

  getBoundingSphere(sphere) {
    if (this._type === LIGHTTYPE_SPOT) {
      const range = this.attenuationEnd;
      const angle = this._outerConeAngle;
      const f = Math.cos(angle * math$1.DEG_TO_RAD);
      const node = this._node;
      spotCenter.copy(node.up);
      spotCenter.mulScalar(-range * 0.5 * f);
      spotCenter.add(node.getPosition());
      sphere.center = spotCenter;
      spotEndPoint.copy(node.up);
      spotEndPoint.mulScalar(-range);
      tmpVec.copy(node.right);
      tmpVec.mulScalar(Math.sin(angle * math$1.DEG_TO_RAD) * range);
      spotEndPoint.add(tmpVec);
      sphere.radius = spotEndPoint.length() * 0.5;
    } else if (this._type === LIGHTTYPE_OMNI) {
      sphere.center = this._node.getPosition();
      sphere.radius = this.attenuationEnd;
    }
  }

  getBoundingBox(box) {
    if (this._type === LIGHTTYPE_SPOT) {
      const range = this.attenuationEnd;
      const angle = this._outerConeAngle;
      const node = this._node;
      const scl = Math.abs(Math.sin(angle * math$1.DEG_TO_RAD) * range);
      box.center.set(0, -range * 0.5, 0);
      box.halfExtents.set(scl, range * 0.5, scl);
      box.setFromTransformedAabb(box, node.getWorldTransform(), true);
    } else if (this._type === LIGHTTYPE_OMNI) {
      box.center.copy(this._node.getPosition());
      box.halfExtents.set(this.attenuationEnd, this.attenuationEnd, this.attenuationEnd);
    }
  }

  _updateFinalColor() {
    const color = this._color;
    const r = color.r;
    const g = color.g;
    const b = color.b;
    let i = this._intensity;

    if (this._usePhysicalUnits) {
      i = this._luminance / Light.getLightUnitConversion(this._type, this._outerConeAngle * math$1.DEG_TO_RAD, this._innerConeAngle * math$1.DEG_TO_RAD);
    }

    const finalColor = this._finalColor;
    const linearFinalColor = this._linearFinalColor;
    finalColor[0] = r * i;
    finalColor[1] = g * i;
    finalColor[2] = b * i;

    if (i >= 1) {
      linearFinalColor[0] = Math.pow(r, 2.2) * i;
      linearFinalColor[1] = Math.pow(g, 2.2) * i;
      linearFinalColor[2] = Math.pow(b, 2.2) * i;
    } else {
      linearFinalColor[0] = Math.pow(finalColor[0], 2.2);
      linearFinalColor[1] = Math.pow(finalColor[1], 2.2);
      linearFinalColor[2] = Math.pow(finalColor[2], 2.2);
    }
  }

  setColor() {
    if (arguments.length === 1) {
      this._color.set(arguments[0].r, arguments[0].g, arguments[0].b);
    } else if (arguments.length === 3) {
      this._color.set(arguments[0], arguments[1], arguments[2]);
    }

    this._updateFinalColor();
  }

  updateShadow() {
    if (this.shadowUpdateMode !== SHADOWUPDATE_REALTIME) {
      this.shadowUpdateMode = SHADOWUPDATE_THISFRAME;
    }
  }

  layersDirty() {
    var _this$_scene;

    if ((_this$_scene = this._scene) != null && _this$_scene.layers) {
      this._scene.layers._dirtyLights = true;
    }
  }

  updateKey() {
    let key = this._type << 29 | (this._castShadows ? 1 : 0) << 28 | this._shadowType << 25 | this._falloffMode << 23 | (this._normalOffsetBias !== 0.0 ? 1 : 0) << 22 | (this._cookie ? 1 : 0) << 21 | (this._cookieFalloff ? 1 : 0) << 20 | chanId[this._cookieChannel.charAt(0)] << 18 | (this._cookieTransform ? 1 : 0) << 12 | this._shape << 10 | this.numCascades - 1 << 8;

    if (this._cookieChannel.length === 3) {
      key |= chanId[this._cookieChannel.charAt(1)] << 16;
      key |= chanId[this._cookieChannel.charAt(2)] << 14;
    }

    if (key !== this.key && this._scene !== null) {
      this.layersDirty();
    }

    this.key = key;
  }

}

class LightingParams {
  constructor(supportsAreaLights, maxTextureSize, dirtyLightsFnc) {
    this._maxTextureSize = maxTextureSize;
    this._supportsAreaLights = supportsAreaLights;
    this._dirtyLightsFnc = dirtyLightsFnc;
    this._areaLightsEnabled = false;
    this._cells = new Vec3(10, 3, 10);
    this._maxLightsPerCell = 255;
    this._shadowsEnabled = true;
    this._shadowType = SHADOW_PCF3;
    this._shadowAtlasResolution = 2048;
    this._cookiesEnabled = false;
    this._cookieAtlasResolution = 2048;
    this.atlasSplit = null;
    this.debugLayer = undefined;
  }

  applySettings(render) {
    this.shadowsEnabled = render.lightingShadowsEnabled;
    this.cookiesEnabled = render.lightingCookiesEnabled;
    this.areaLightsEnabled = render.lightingAreaLightsEnabled;
    this.shadowAtlasResolution = render.lightingShadowAtlasResolution;
    this.cookieAtlasResolution = render.lightingCookieAtlasResolution;
    this.maxLightsPerCell = render.lightingMaxLightsPerCell;
    this.shadowType = render.lightingShadowType;
    this.cell = new Vec3(render.lightingCells);
  }

  set cells(value) {
    this._cells.copy(value);
  }

  get cells() {
    return this._cells;
  }

  set maxLightsPerCell(value) {
    this._maxLightsPerCell = math$1.clamp(value, 1, 255);
  }

  get maxLightsPerCell() {
    return this._maxLightsPerCell;
  }

  set cookieAtlasResolution(value) {
    this._cookieAtlasResolution = math$1.clamp(value, 32, this._maxTextureSize);
  }

  get cookieAtlasResolution() {
    return this._cookieAtlasResolution;
  }

  set shadowAtlasResolution(value) {
    this._shadowAtlasResolution = math$1.clamp(value, 32, this._maxTextureSize);
  }

  get shadowAtlasResolution() {
    return this._shadowAtlasResolution;
  }

  set shadowType(value) {
    if (this._shadowType !== value) {
      this._shadowType = value;

      this._dirtyLightsFnc();
    }
  }

  get shadowType() {
    return this._shadowType;
  }

  set cookiesEnabled(value) {
    if (this._cookiesEnabled !== value) {
      this._cookiesEnabled = value;

      this._dirtyLightsFnc();
    }
  }

  get cookiesEnabled() {
    return this._cookiesEnabled;
  }

  set areaLightsEnabled(value) {
    if (this._supportsAreaLights) {
      if (this._areaLightsEnabled !== value) {
        this._areaLightsEnabled = value;

        this._dirtyLightsFnc();
      }
    }
  }

  get areaLightsEnabled() {
    return this._areaLightsEnabled;
  }

  set shadowsEnabled(value) {
    if (this._shadowsEnabled !== value) {
      this._shadowsEnabled = value;

      this._dirtyLightsFnc();
    }
  }

  get shadowsEnabled() {
    return this._shadowsEnabled;
  }

}

const tempSphere = new BoundingSphere();

class BakeLight {
  constructor(scene, light) {
    this.scene = scene;
    this.light = light;
    this.store();
    light.numCascades = 1;

    if (light.type !== LIGHTTYPE_DIRECTIONAL) {
      light._node.getWorldTransform();

      light.getBoundingSphere(tempSphere);
      this.lightBounds = new BoundingBox();
      this.lightBounds.center.copy(tempSphere.center);
      this.lightBounds.halfExtents.set(tempSphere.radius, tempSphere.radius, tempSphere.radius);
    }
  }

  store() {
    this.mask = this.light.mask;
    this.shadowUpdateMode = this.light.shadowUpdateMode;
    this.enabled = this.light.enabled;
    this.intensity = this.light.intensity;
    this.rotation = this.light._node.getLocalRotation().clone();
    this.numCascades = this.light.numCascades;
  }

  restore() {
    const light = this.light;
    light.mask = this.mask;
    light.shadowUpdateMode = this.shadowUpdateMode;
    light.enabled = this.enabled;
    light.intensity = this.intensity;

    light._node.setLocalRotation(this.rotation);

    light.numCascades = this.numCascades;
  }

  startBake() {
    this.light.enabled = true;

    this.light._destroyShadowMap();
  }

  endBake(shadowMapCache) {
    const light = this.light;
    light.enabled = false;

    if (light.shadowMap) {
      if (light.shadowMap.cached) shadowMapCache.add(light, light.shadowMap);
      light.shadowMap = null;
    }
  }

}

const _tempPoint$1 = new Vec2();

class BakeLightSimple extends BakeLight {
  get numVirtualLights() {
    if (this.light.type === LIGHTTYPE_DIRECTIONAL) {
      return this.light.bakeNumSamples;
    }

    return 1;
  }

  prepareVirtualLight(index, numVirtualLights) {
    const light = this.light;

    light._node.setLocalRotation(this.rotation);

    if (index > 0) {
      const directionalSpreadAngle = light.bakeArea;
      random.circlePointDeterministic(_tempPoint$1, index, numVirtualLights);

      _tempPoint$1.mulScalar(directionalSpreadAngle * 0.5);

      light._node.rotateLocal(_tempPoint$1.x, 0, _tempPoint$1.y);
    }

    light._node.getWorldTransform();

    const gamma = this.scene.gammaCorrection ? 2.2 : 1;
    const linearIntensity = Math.pow(this.intensity, gamma);
    light.intensity = Math.pow(linearIntensity / numVirtualLights, 1 / gamma);
  }

}

class FrameGraph {
  constructor() {
    this.renderPasses = [];
    this.renderTargetMap = new Map();
  }

  addRenderPass(renderPass) {
    this.renderPasses.push(renderPass);
  }

  reset() {
    this.renderPasses.length = 0;
  }

  compile() {
    const renderTargetMap = this.renderTargetMap;
    const renderPasses = this.renderPasses;

    for (let i = 0; i < renderPasses.length; i++) {
      const renderPass = renderPasses[i];
      const renderTarget = renderPass.renderTarget;

      if (renderTarget !== undefined) {
        const prevPass = renderTargetMap.get(renderTarget);

        if (prevPass) {
          if (!renderPass.colorOps.clear) {
            prevPass.colorOps.store = true;
          }

          if (!renderPass.depthStencilOps.clearDepth) {
            prevPass.depthStencilOps.storeDepth = true;
          }

          if (!renderPass.depthStencilOps.clearStencil) {
            prevPass.depthStencilOps.storeStencil = true;
          }
        }

        renderTargetMap.set(renderTarget, renderPass);
      }
    }

    let lastCubeTexture = null;
    let lastCubeRenderPass = null;

    for (let i = 0; i < renderPasses.length; i++) {
      const renderPass = renderPasses[i];
      const renderTarget = renderPass.renderTarget;
      const thisTexture = renderTarget == null ? void 0 : renderTarget.colorBuffer;

      if (thisTexture != null && thisTexture.cubemap) {
        if (lastCubeTexture === thisTexture) {
          lastCubeRenderPass.colorOps.mipmaps = false;
        }

        lastCubeTexture = renderTarget.colorBuffer;
        lastCubeRenderPass = renderPass;
      } else if (renderPass.requiresCubemaps) {
        lastCubeTexture = null;
        lastCubeRenderPass = null;
      }
    }

    renderTargetMap.forEach((renderPass, renderTarget) => {
      if (renderTarget === null) {
        renderPass.colorOps.store = true;
        renderPass.colorOps.resolve = false;
        renderPass.colorOps.mipmaps = false;
      }
    });
    renderTargetMap.clear();
    this.log();
  }

  render() {
    this.compile();
    const renderPasses = this.renderPasses;

    for (let i = 0; i < renderPasses.length; i++) {
      renderPasses[i].render();
    }
  }

  log() {}

}

class AreaLightCacheEntry {
  constructor(texture0, texture1) {
    this.texture0 = texture0;
    this.texture1 = texture1;
  }

  destroy() {
    var _this$texture, _this$texture2;

    (_this$texture = this.texture0) == null ? void 0 : _this$texture.destroy();
    (_this$texture2 = this.texture1) == null ? void 0 : _this$texture2.destroy();
  }

}

const deviceCache = new DeviceCache();

class AreaLightLuts {
  static createTexture(device, format, size, postfix = '') {
    const tex = new Texture(device, {
      width: size,
      height: size,
      format: format,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      type: TEXTURETYPE_DEFAULT,
      magFilter: FILTER_LINEAR,
      minFilter: FILTER_NEAREST,
      anisotropy: 1,
      name: `AreaLightLUT${postfix}`
    });
    return tex;
  }

  static applyTextures(device, texture1, texture2) {
    deviceCache.remove(device);
    deviceCache.get(device, () => {
      return new AreaLightCacheEntry(texture1, texture1 === texture2 ? null : texture2);
    });
    device.scope.resolve('areaLightsLutTex1').setValue(texture1);
    device.scope.resolve('areaLightsLutTex2').setValue(texture2);
  }

  static createPlaceholder(device) {
    const texture = AreaLightLuts.createTexture(device, PIXELFORMAT_R8_G8_B8_A8, 2, 'placeholder');
    const pixels = texture.lock();
    pixels.fill(0);
    texture.unlock();
    AreaLightLuts.applyTextures(device, texture, texture);
  }

  static set(device, ltcMat1, ltcMat2) {
    function buildTexture(device, data, format) {
      const texture = AreaLightLuts.createTexture(device, format, 64);
      texture.lock().set(data);
      texture.unlock();
      texture.upload();
      return texture;
    }

    function offsetScale(data, offset, scale) {
      const count = data.length;
      const ret = new Float32Array(count);

      for (let i = 0; i < count; i++) {
        const n = i % 4;
        ret[i] = (data[i] + offset[n]) * scale[n];
      }

      return ret;
    }

    function convertToHalfFloat(data) {
      const count = data.length;
      const ret = new Uint16Array(count);
      const float2Half = FloatPacking.float2Half;

      for (let i = 0; i < count; i++) {
        ret[i] = float2Half(data[i]);
      }

      return ret;
    }

    function convertToUint(data) {
      const count = data.length;
      const ret = new Uint8ClampedArray(count);

      for (let i = 0; i < count; i++) {
        ret[i] = data[i] * 255;
      }

      return ret;
    }

    const srcData1 = ltcMat1;
    const srcData2 = ltcMat2;
    let data1, data2;
    const format = device.areaLightLutFormat;

    if (format === PIXELFORMAT_RGBA32F) {
      data1 = srcData1;
      data2 = srcData2;
    } else if (format === PIXELFORMAT_RGBA16F) {
      data1 = convertToHalfFloat(srcData1);
      data2 = convertToHalfFloat(srcData2);
    } else {
      const o1 = [0.0, 0.2976, 0.01381, 0.0];
      const s1 = [0.999, 3.08737, 1.6546, 0.603249];
      const o2 = [-0.306897, 0.0, 0.0, 0.0];
      const s2 = [1.442787, 1.0, 1.0, 1.0];
      data1 = convertToUint(offsetScale(srcData1, o1, s1));
      data2 = convertToUint(offsetScale(srcData2, o2, s2));
    }

    const tex1 = buildTexture(device, data1, format);
    const tex2 = buildTexture(device, data2, format);
    AreaLightLuts.applyTextures(device, tex1, tex2);
  }

}

const skybox = {
  generateKey: function (options) {
    return options.type === 'cubemap' ? `skybox-${options.type}-${options.encoding}-${options.useIntensity}-${options.gamma}-${options.toneMapping}-${options.fixSeams}-${options.mip}` : `skybox-${options.type}-${options.encoding}-${options.useIntensity}-${options.gamma}-${options.toneMapping}`;
  },
  createShaderDefinition: function (device, options) {
    let fshader;

    if (options.type === 'cubemap') {
      const mip2size = [128, 64, 16, 8, 4, 2];
      fshader = precisionCode(device);
      fshader += options.mip ? shaderChunks.fixCubemapSeamsStretchPS : shaderChunks.fixCubemapSeamsNonePS;
      fshader += options.useIntensity ? shaderChunks.envMultiplyPS : shaderChunks.envConstPS;
      fshader += shaderChunks.decodePS;
      fshader += gammaCode(options.gamma);
      fshader += tonemapCode(options.toneMapping);
      fshader += shaderChunks.skyboxHDRPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.encoding)).replace(/\$FIXCONST/g, 1 - 1 / mip2size[options.mip] + "");
    } else {
      fshader = precisionCode(device);
      fshader += options.useIntensity ? shaderChunks.envMultiplyPS : shaderChunks.envConstPS;
      fshader += shaderChunks.decodePS;
      fshader += gammaCode(options.gamma);
      fshader += tonemapCode(options.toneMapping);
      fshader += shaderChunks.sphericalPS;
      fshader += shaderChunks.envAtlasPS;
      fshader += shaderChunks.skyboxEnvPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.encoding));
    }

    return {
      attributes: {
        aPosition: SEMANTIC_POSITION
      },
      vshader: shaderChunks.skyboxVS,
      fshader: fshader
    };
  }
};

let _mat4;

class Sky {
  constructor(device, scene, texture) {
    this.meshInstance = void 0;
    this._rotationMat3 = void 0;
    const material = new Material();

    material.getShaderVariant = function (dev, sc, defs, staticLightList, pass, sortedLights, viewUniformFormat, viewBindGroupFormat) {
      const library = device.getProgramLibrary();
      library.register('skybox', skybox);

      if (texture.cubemap) {
        return library.getProgram('skybox', {
          type: 'cubemap',
          encoding: texture.encoding,
          useIntensity: scene.skyboxIntensity !== 1 || scene.physicalUnits,
          mip: texture.fixCubemapSeams ? scene.skyboxMip : 0,
          fixSeams: texture.fixCubemapSeams,
          gamma: pass === SHADER_FORWARDHDR ? scene.gammaCorrection ? GAMMA_SRGBHDR : GAMMA_NONE : scene.gammaCorrection,
          toneMapping: pass === SHADER_FORWARDHDR ? TONEMAP_LINEAR : scene.toneMapping
        });
      }

      return library.getProgram('skybox', {
        type: 'envAtlas',
        encoding: texture.encoding,
        useIntensity: scene.skyboxIntensity !== 1 || scene.physicalUnits,
        gamma: pass === SHADER_FORWARDHDR ? scene.gammaCorrection ? GAMMA_SRGBHDR : GAMMA_NONE : scene.gammaCorrection,
        toneMapping: pass === SHADER_FORWARDHDR ? TONEMAP_LINEAR : scene.toneMapping
      });
    };

    if (texture.cubemap) {
      material.setParameter('texture_cubeMap', texture);
    } else {
      material.setParameter('texture_envAtlas', texture);
      material.setParameter('mipLevel', scene._skyboxMip);
    }

    if (!scene.skyboxRotation.equals(Quat.IDENTITY)) {
      _mat4 = _mat4 || new Mat4();
      this._rotationMat3 = this._rotationMat3 || new Mat3();

      _mat4.setTRS(Vec3.ZERO, scene._skyboxRotation, Vec3.ONE);

      _mat4.invertTo3x3(this._rotationMat3);

      material.setParameter('cubeMapRotationMatrix', this._rotationMat3.data);
    } else {
      material.setParameter('cubeMapRotationMatrix', Mat3.IDENTITY.data);
    }

    material.cull = CULLFACE_FRONT;
    material.depthWrite = false;
    const skyLayer = scene.layers.getLayerById(LAYERID_SKYBOX);

    if (skyLayer) {
      const node = new GraphNode('Skybox');
      const mesh = createBox(device);
      const meshInstance = new MeshInstance(mesh, material, node);
      this.meshInstance = meshInstance;
      meshInstance.cull = false;
      meshInstance._noDepthDrawGl1 = true;
      meshInstance.pick = false;
      skyLayer.addMeshInstances([meshInstance]);
      this.skyLayer = skyLayer;
    }
  }

  destroy() {
    if (this.meshInstance) {
      if (this.skyLayer) {
        this.skyLayer.removeMeshInstances([this.meshInstance]);
      }

      this.meshInstance.destroy();
      this.meshInstance = null;
    }
  }

}

const identityGraphNode = new GraphNode();
identityGraphNode.worldTransform = Mat4.IDENTITY;
identityGraphNode._dirtyWorld = identityGraphNode._dirtyNormal = false;

class ImmediateBatch {
  constructor(device, material, layer) {
    this.material = material;
    this.layer = layer;
    this.positions = [];
    this.colors = [];
    this.mesh = new Mesh(device);
    this.meshInstance = null;
  }

  addLines(positions, color) {
    const destPos = this.positions;
    const count = positions.length;

    for (let i = 0; i < count; i++) {
      const pos = positions[i];
      destPos.push(pos.x, pos.y, pos.z);
    }

    const destCol = this.colors;

    if (color.length) {
      for (let i = 0; i < count; i++) {
        const col = color[i];
        destCol.push(col.r, col.g, col.b, col.a);
      }
    } else {
      for (let i = 0; i < count; i++) {
        destCol.push(color.r, color.g, color.b, color.a);
      }
    }
  }

  addLinesArrays(positions, color) {
    const destPos = this.positions;

    for (let i = 0; i < positions.length; i += 3) {
      destPos.push(positions[i], positions[i + 1], positions[i + 2]);
    }

    const destCol = this.colors;

    if (color.length) {
      for (let i = 0; i < color.length; i += 4) {
        destCol.push(color[i], color[i + 1], color[i + 2], color[i + 3]);
      }
    } else {
      const count = positions.length / 3;

      for (let i = 0; i < count; i++) {
        destCol.push(color.r, color.g, color.b, color.a);
      }
    }
  }

  onPreRender(visibleList, transparent) {
    if (this.positions.length > 0 && this.material.transparent === transparent) {
      this.mesh.setPositions(this.positions);
      this.mesh.setColors(this.colors);
      this.mesh.update(PRIMITIVE_LINES, false);

      if (!this.meshInstance) {
        this.meshInstance = new MeshInstance(this.mesh, this.material, identityGraphNode);
      }

      this.positions.length = 0;
      this.colors.length = 0;
      visibleList.list.push(this.meshInstance);
      visibleList.length++;
    }
  }

}

class ImmediateBatches {
  constructor(device) {
    this.device = device;
    this.map = new Map();
  }

  getBatch(material, layer) {
    let batch = this.map.get(material);

    if (!batch) {
      batch = new ImmediateBatch(this.device, material, layer);
      this.map.set(material, batch);
    }

    return batch;
  }

  onPreRender(visibleList, transparent) {
    this.map.forEach(batch => {
      batch.onPreRender(visibleList, transparent);
    });
  }

}

const tempPoints = [];

class Immediate {
  constructor(device) {
    this.device = device;
    this.quadMesh = null;
    this.textureShader = null;
    this.depthTextureShader = null;
    this.cubeLocalPos = null;
    this.cubeWorldPos = null;
    this.batchesMap = new Map();
    this.allBatches = new Set();
    this.updatedLayers = new Set();
    this._materialDepth = null;
    this._materialNoDepth = null;
    this.layerMeshInstances = new Map();
  }

  createMaterial(depthTest) {
    const material = new BasicMaterial();
    material.vertexColors = true;
    material.blend = true;
    material.blendType = BLEND_NORMAL;
    material.depthTest = depthTest;
    material.update();
    return material;
  }

  get materialDepth() {
    if (!this._materialDepth) {
      this._materialDepth = this.createMaterial(true);
    }

    return this._materialDepth;
  }

  get materialNoDepth() {
    if (!this._materialNoDepth) {
      this._materialNoDepth = this.createMaterial(false);
    }

    return this._materialNoDepth;
  }

  getBatch(layer, depthTest) {
    let batches = this.batchesMap.get(layer);

    if (!batches) {
      batches = new ImmediateBatches(this.device);
      this.batchesMap.set(layer, batches);
    }

    this.allBatches.add(batches);
    const material = depthTest ? this.materialDepth : this.materialNoDepth;
    return batches.getBatch(material, layer);
  }

  static getTextureVS() {
    return `
            attribute vec2 vertex_position;
            uniform mat4 matrix_model;
            varying vec2 uv0;
            void main(void) {
                gl_Position = matrix_model * vec4(vertex_position, 0, 1);
                uv0 = vertex_position.xy + 0.5;
            }
        `;
  }

  getTextureShader() {
    if (!this.textureShader) {
      const fshader = `
                varying vec2 uv0;
                uniform sampler2D colorMap;
                void main (void) {
                    gl_FragColor = vec4(texture2D(colorMap, uv0).xyz, 1);
                }
            `;
      this.textureShader = createShaderFromCode(this.device, Immediate.getTextureVS(), fshader, 'DebugTextureShader');
    }

    return this.textureShader;
  }

  getDepthTextureShader() {
    if (!this.depthTextureShader) {
      const fshader = `
                ${shaderChunks.screenDepthPS}
                varying vec2 uv0;
                void main() {
                    float depth = getLinearScreenDepth(uv0) * camera_params.x;
                    gl_FragColor = vec4(vec3(depth), 1.0);
                }
            `;
      this.depthTextureShader = createShaderFromCode(this.device, Immediate.getTextureVS(), fshader, 'DebugDepthTextureShader');
    }

    return this.depthTextureShader;
  }

  getQuadMesh() {
    if (!this.quadMesh) {
      this.quadMesh = new Mesh(this.device);
      this.quadMesh.setPositions([-0.5, -0.5, 0, 0.5, -0.5, 0, -0.5, 0.5, 0, 0.5, 0.5, 0]);
      this.quadMesh.update(PRIMITIVE_TRISTRIP);
    }

    return this.quadMesh;
  }

  drawMesh(material, matrix, mesh, meshInstance, layer) {
    if (!meshInstance) {
      const graphNode = this.getGraphNode(matrix);
      meshInstance = new MeshInstance(mesh, material, graphNode);
    }

    let layerMeshInstances = this.layerMeshInstances.get(layer);

    if (!layerMeshInstances) {
      layerMeshInstances = [];
      this.layerMeshInstances.set(layer, layerMeshInstances);
    }

    layerMeshInstances.push(meshInstance);
  }

  drawWireAlignedBox(min, max, color, depthTest, layer) {
    tempPoints.push(min.x, min.y, min.z, min.x, max.y, min.z, min.x, max.y, min.z, max.x, max.y, min.z, max.x, max.y, min.z, max.x, min.y, min.z, max.x, min.y, min.z, min.x, min.y, min.z, min.x, min.y, max.z, min.x, max.y, max.z, min.x, max.y, max.z, max.x, max.y, max.z, max.x, max.y, max.z, max.x, min.y, max.z, max.x, min.y, max.z, min.x, min.y, max.z, min.x, min.y, min.z, min.x, min.y, max.z, min.x, max.y, min.z, min.x, max.y, max.z, max.x, max.y, min.z, max.x, max.y, max.z, max.x, min.y, min.z, max.x, min.y, max.z);
    const batch = this.getBatch(layer, depthTest);
    batch.addLinesArrays(tempPoints, color);
    tempPoints.length = 0;
  }

  drawWireSphere(center, radius, color, numSegments, depthTest, layer) {
    const step = 2 * Math.PI / numSegments;
    let angle = 0;

    for (let i = 0; i < numSegments; i++) {
      const sin0 = Math.sin(angle);
      const cos0 = Math.cos(angle);
      angle += step;
      const sin1 = Math.sin(angle);
      const cos1 = Math.cos(angle);
      tempPoints.push(center.x + radius * sin0, center.y, center.z + radius * cos0);
      tempPoints.push(center.x + radius * sin1, center.y, center.z + radius * cos1);
      tempPoints.push(center.x + radius * sin0, center.y + radius * cos0, center.z);
      tempPoints.push(center.x + radius * sin1, center.y + radius * cos1, center.z);
      tempPoints.push(center.x, center.y + radius * sin0, center.z + radius * cos0);
      tempPoints.push(center.x, center.y + radius * sin1, center.z + radius * cos1);
    }

    const batch = this.getBatch(layer, depthTest);
    batch.addLinesArrays(tempPoints, color);
    tempPoints.length = 0;
  }

  getGraphNode(matrix) {
    const graphNode = new GraphNode('ImmediateDebug');
    graphNode.worldTransform = matrix;
    graphNode._dirtyWorld = graphNode._dirtyNormal = false;
    return graphNode;
  }

  onPreRenderLayer(layer, visibleList, transparent) {
    this.batchesMap.forEach((batches, batchLayer) => {
      if (batchLayer === layer) {
        batches.onPreRender(visibleList, transparent);
      }
    });

    if (!this.updatedLayers.has(layer)) {
      this.updatedLayers.add(layer);
      const meshInstances = this.layerMeshInstances.get(layer);

      if (meshInstances) {
        for (let i = 0; i < meshInstances.length; i++) {
          visibleList.list[visibleList.length + i] = meshInstances[i];
        }

        visibleList.length += meshInstances.length;
        meshInstances.length = 0;
      }
    }
  }

  onPostRender() {
    this.allBatches.clear();
    this.updatedLayers.clear();
  }

}

class Scene extends EventHandler {
  constructor(graphicsDevice) {
    super();
    this.ambientBake = false;
    this.ambientBakeOcclusionBrightness = 0;
    this.ambientBakeOcclusionContrast = 0;
    this.ambientLight = new Color(0, 0, 0);
    this.ambientLuminance = 0;
    this.exposure = 1;
    this.fogColor = new Color(0, 0, 0);
    this.fogDensity = 0;
    this.fogEnd = 1000;
    this.fogStart = 1;
    this.lightmapSizeMultiplier = 1;
    this.lightmapMaxResolution = 2048;
    this.lightmapMode = BAKE_COLORDIR;
    this.lightmapFilterEnabled = false;
    this.root = null;
    this.sky = null;
    this.physicalUnits = false;
    this.device = graphicsDevice || getApplication().graphicsDevice;
    this._gravity = new Vec3(0, -9.8, 0);
    this._layers = null;
    this._fog = FOG_NONE;
    this._gammaCorrection = GAMMA_SRGB;
    this._toneMapping = 0;
    this._skyboxCubeMap = null;
    this._prefilteredCubemaps = [null, null, null, null, null, null];
    this._envAtlas = null;
    this._internalEnvAtlas = null;
    this._skyboxIntensity = 1;
    this._skyboxLuminance = 0;
    this._skyboxMip = 0;
    this._skyboxRotation = new Quat();
    this._skyboxRotationMat3 = null;
    this._skyboxRotationMat4 = null;
    this._ambientBakeNumSamples = 1;
    this._ambientBakeSpherePart = 0.4;
    this._lightmapFilterRange = 10;
    this._lightmapFilterSmoothness = 0.2;
    this._clusteredLightingEnabled = true;
    this._lightingParams = new LightingParams(this.device.supportsAreaLights, this.device.maxTextureSize, () => {
      this._layers._dirtyLights = true;
    });
    this._stats = {
      meshInstances: 0,
      lights: 0,
      dynamicLights: 0,
      bakedLights: 0,
      lastStaticPrepareFullTime: 0,
      lastStaticPrepareSearchTime: 0,
      lastStaticPrepareWriteTime: 0,
      lastStaticPrepareTriAabbTime: 0,
      lastStaticPrepareCombineTime: 0,
      updateShadersTime: 0
    };
    this.updateShaders = true;
    this._shaderVersion = 0;
    this._statsUpdated = false;
    this.immediate = new Immediate(this.device);
  }

  get defaultDrawLayer() {
    return this.layers.getLayerById(LAYERID_IMMEDIATE);
  }

  set ambientBakeNumSamples(value) {
    this._ambientBakeNumSamples = math$1.clamp(Math.floor(value), 1, 255);
  }

  get ambientBakeNumSamples() {
    return this._ambientBakeNumSamples;
  }

  set ambientBakeSpherePart(value) {
    this._ambientBakeSpherePart = math$1.clamp(value, 0.001, 1);
  }

  get ambientBakeSpherePart() {
    return this._ambientBakeSpherePart;
  }

  set clusteredLightingEnabled(value) {
    if (!this._clusteredLightingEnabled && value) {
      console.error('Turning on disabled clustered lighting is not currently supported');
      return;
    }

    this._clusteredLightingEnabled = value;
  }

  get clusteredLightingEnabled() {
    return this._clusteredLightingEnabled;
  }

  set drawCalls(value) {}

  get drawCalls() {
    let drawCalls = this.layers._meshInstances;

    if (!drawCalls.length) {
      this.layers._update(this.device, this.clusteredLightingEnabled);

      drawCalls = this.layers._meshInstances;
    }

    return drawCalls;
  }

  set envAtlas(value) {
    if (value !== this._envAtlas) {
      this._envAtlas = value;
      this.updateShaders = true;
    }
  }

  get envAtlas() {
    return this._envAtlas;
  }

  set fog(type) {
    if (type !== this._fog) {
      this._fog = type;
      this.updateShaders = true;
    }
  }

  get fog() {
    return this._fog;
  }

  set gammaCorrection(value) {
    if (value !== this._gammaCorrection) {
      this._gammaCorrection = value;
      this.updateShaders = true;
    }
  }

  get gammaCorrection() {
    return this._gammaCorrection;
  }

  set layers(layers) {
    const prev = this._layers;
    this._layers = layers;
    this.fire('set:layers', prev, layers);
  }

  get layers() {
    return this._layers;
  }

  get lighting() {
    return this._lightingParams;
  }

  set lightmapFilterRange(value) {
    this._lightmapFilterRange = Math.max(value, 0.001);
  }

  get lightmapFilterRange() {
    return this._lightmapFilterRange;
  }

  set lightmapFilterSmoothness(value) {
    this._lightmapFilterSmoothness = Math.max(value, 0.001);
  }

  get lightmapFilterSmoothness() {
    return this._lightmapFilterSmoothness;
  }

  set prefilteredCubemaps(value) {
    const cubemaps = this._prefilteredCubemaps;
    value = value || [];
    let changed = false;
    let complete = true;

    for (let i = 0; i < 6; ++i) {
      const v = value[i] || null;

      if (cubemaps[i] !== v) {
        cubemaps[i] = v;
        changed = true;
      }

      complete = complete && !!cubemaps[i];
    }

    if (changed) {
      this._resetSky();

      if (complete) {
        this._internalEnvAtlas = EnvLighting.generatePrefilteredAtlas(cubemaps, {
          target: this._internalEnvAtlas
        });

        if (!this._envAtlas) {
          this.envAtlas = this._internalEnvAtlas;
        }
      } else if (this._internalEnvAtlas) {
        if (this._envAtlas === this._internalEnvAtlas) {
          this.envAtlas = null;
        }

        this._internalEnvAtlas.destroy();

        this._internalEnvAtlas = null;
      }
    }
  }

  get prefilteredCubemaps() {
    return this._prefilteredCubemaps;
  }

  set skybox(value) {
    if (value !== this._skyboxCubeMap) {
      this._skyboxCubeMap = value;

      this._resetSky();
    }
  }

  get skybox() {
    return this._skyboxCubeMap;
  }

  set skyboxIntensity(value) {
    if (value !== this._skyboxIntensity) {
      this._skyboxIntensity = value;

      this._resetSky();
    }
  }

  get skyboxIntensity() {
    return this._skyboxIntensity;
  }

  set skyboxLuminance(value) {
    if (value !== this._skyboxLuminance) {
      this._skyboxLuminance = value;

      this._resetSky();
    }
  }

  get skyboxLuminance() {
    return this._skyboxLuminance;
  }

  set skyboxMip(value) {
    if (value !== this._skyboxMip) {
      this._skyboxMip = value;

      this._resetSky();
    }
  }

  get skyboxMip() {
    return this._skyboxMip;
  }

  set skyboxRotation(value) {
    if (!this._skyboxRotation.equals(value)) {
      this._skyboxRotation.copy(value);

      this._resetSky();
    }
  }

  get skyboxRotation() {
    return this._skyboxRotation;
  }

  set toneMapping(value) {
    if (value !== this._toneMapping) {
      this._toneMapping = value;
      this.updateShaders = true;
    }
  }

  get toneMapping() {
    return this._toneMapping;
  }

  destroy() {
    this._resetSky();

    this.root = null;
    this.off();
  }

  drawLine(start, end, color = Color.WHITE, depthTest = true, layer = this.defaultDrawLayer) {
    const batch = this.immediate.getBatch(layer, depthTest);
    batch.addLines([start, end], [color, color]);
  }

  drawLines(positions, colors, depthTest = true, layer = this.defaultDrawLayer) {
    const batch = this.immediate.getBatch(layer, depthTest);
    batch.addLines(positions, colors);
  }

  drawLineArrays(positions, colors, depthTest = true, layer = this.defaultDrawLayer) {
    const batch = this.immediate.getBatch(layer, depthTest);
    batch.addLinesArrays(positions, colors);
  }

  applySettings(settings) {
    const physics = settings.physics;
    const render = settings.render;

    this._gravity.set(physics.gravity[0], physics.gravity[1], physics.gravity[2]);

    this.ambientLight.set(render.global_ambient[0], render.global_ambient[1], render.global_ambient[2]);
    this.ambientLuminance = render.ambientLuminance;
    this._fog = render.fog;
    this.fogColor.set(render.fog_color[0], render.fog_color[1], render.fog_color[2]);
    this.fogStart = render.fog_start;
    this.fogEnd = render.fog_end;
    this.fogDensity = render.fog_density;
    this._gammaCorrection = render.gamma_correction;
    this._toneMapping = render.tonemapping;
    this.lightmapSizeMultiplier = render.lightmapSizeMultiplier;
    this.lightmapMaxResolution = render.lightmapMaxResolution;
    this.lightmapMode = render.lightmapMode;
    this.exposure = render.exposure;
    this._skyboxIntensity = render.skyboxIntensity === undefined ? 1 : render.skyboxIntensity;
    this._skyboxLuminance = render.skyboxLuminance === undefined ? 20000 : render.skyboxLuminance;
    this._skyboxMip = render.skyboxMip === undefined ? 0 : render.skyboxMip;

    if (render.skyboxRotation) {
      this._skyboxRotation.setFromEulerAngles(render.skyboxRotation[0], render.skyboxRotation[1], render.skyboxRotation[2]);
    }

    this.clusteredLightingEnabled = render.clusteredLightingEnabled;
    this.lighting.applySettings(render);
    ['lightmapFilterEnabled', 'lightmapFilterRange', 'lightmapFilterSmoothness', 'ambientBake', 'ambientBakeNumSamples', 'ambientBakeSpherePart', 'ambientBakeOcclusionBrightness', 'ambientBakeOcclusionContrast'].forEach(setting => {
      if (render.hasOwnProperty(setting)) {
        this[setting] = render[setting];
      }
    });

    this._resetSky();
  }

  _getSkyboxTex() {
    const cubemaps = this._prefilteredCubemaps;

    if (this._skyboxMip) {
      const skyboxMapping = [0, 1, 3, 4, 5, 6];
      return cubemaps[skyboxMapping[this._skyboxMip]] || this._envAtlas || cubemaps[0] || this._skyboxCubeMap;
    }

    return this._skyboxCubeMap || cubemaps[0] || this._envAtlas;
  }

  _updateSky(device) {
    if (!this.sky) {
      const texture = this._getSkyboxTex();

      if (texture) {
        this.sky = new Sky(device, this, texture);
        this.fire('set:skybox', texture);
      }
    }
  }

  _resetSky() {
    var _this$sky;

    (_this$sky = this.sky) == null ? void 0 : _this$sky.destroy();
    this.sky = null;
    this.updateShaders = true;
  }

  setSkybox(cubemaps) {
    if (!cubemaps) {
      this.skybox = null;
      this.prefilteredCubemaps = [null, null, null, null, null, null];
    } else {
      this.skybox = cubemaps[0] || null;
      this.prefilteredCubemaps = cubemaps.slice(1);
    }
  }

}

class Bundle {
  constructor(files) {
    this._blobUrls = {};

    for (let i = 0, len = files.length; i < len; i++) {
      if (files[i].url) {
        this._blobUrls[files[i].name] = files[i].url;
      }
    }
  }

  hasBlobUrl(url) {
    return !!this._blobUrls[url];
  }

  getBlobUrl(url) {
    return this._blobUrls[url];
  }

  destroy() {
    for (const key in this._blobUrls) {
      URL.revokeObjectURL(this._blobUrls[key]);
    }

    this._blobUrls = null;
  }

}

let Untar;

function UntarScope(isWorker) {
  let utfDecoder;
  let asciiDecoder;

  if (typeof TextDecoder !== 'undefined') {
    try {
      utfDecoder = new TextDecoder('utf-8');
      asciiDecoder = new TextDecoder('windows-1252');
    } catch (e) {
      console.warn('TextDecoder not supported - pc.Untar module will not work');
    }
  } else {
    console.warn('TextDecoder not supported - pc.Untar module will not work');
  }

  function PaxHeader(fields) {
    this._fields = fields;
  }

  PaxHeader.parse = function (buffer, start, length) {
    const paxArray = new Uint8Array(buffer, start, length);
    let bytesRead = 0;
    const fields = [];

    while (bytesRead < length) {
      let spaceIndex;

      for (spaceIndex = bytesRead; spaceIndex < length; spaceIndex++) {
        if (paxArray[spaceIndex] === 0x20) break;
      }

      if (spaceIndex >= length) {
        throw new Error('Invalid PAX header data format.');
      }

      const fieldLength = parseInt(utfDecoder.decode(new Uint8Array(buffer, start + bytesRead, spaceIndex - bytesRead)), 10);
      const fieldText = utfDecoder.decode(new Uint8Array(buffer, start + spaceIndex + 1, fieldLength - (spaceIndex - bytesRead) - 2));
      const field = fieldText.split('=');

      if (field.length !== 2) {
        throw new Error('Invalid PAX header data format.');
      }

      if (field[1].length === 0) {
        field[1] = null;
      }

      fields.push({
        name: field[0],
        value: field[1]
      });
      bytesRead += fieldLength;
    }

    return new PaxHeader(fields);
  };

  PaxHeader.prototype.applyHeader = function (file) {
    for (let i = 0; i < this._fields.length; i++) {
      let fieldName = this._fields[i].name;
      const fieldValue = this._fields[i].value;

      if (fieldName === 'path') {
        fieldName = 'name';
      }

      if (fieldValue === null) {
        delete file[fieldName];
      } else {
        file[fieldName] = fieldValue;
      }
    }
  };

  function UntarInternal(arrayBuffer) {
    this._arrayBuffer = arrayBuffer || new ArrayBuffer(0);
    this._bufferView = new DataView(this._arrayBuffer);
    this._globalPaxHeader = null;
    this._paxHeader = null;
    this._bytesRead = 0;
  }

  if (!isWorker) {
    Untar = UntarInternal;
  }

  UntarInternal.prototype._hasNext = function () {
    return this._bytesRead + 4 < this._arrayBuffer.byteLength && this._bufferView.getUint32(this._bytesRead) !== 0;
  };

  UntarInternal.prototype._readNextFile = function () {
    const headersDataView = new DataView(this._arrayBuffer, this._bytesRead, 512);
    const headers = asciiDecoder.decode(headersDataView);
    this._bytesRead += 512;
    let name = headers.substring(0, 100).replace(/\0/g, '');
    const ustarFormat = headers.substring(257, 263);
    const size = parseInt(headers.substring(124, 136), 8);
    const type = headers.substring(156, 157);
    const start = this._bytesRead;
    let url = null;
    let normalFile = false;

    switch (type) {
      case '0':
      case '':
        normalFile = true;

        if (!isWorker) {
          const blob = new Blob([this._arrayBuffer.slice(this._bytesRead, this._bytesRead + size)]);
          url = URL.createObjectURL(blob);
        }

        break;

      case 'g':
        this._globalPaxHeader = PaxHeader.parse(this._arrayBuffer, this._bytesRead, size);
        break;

      case 'x':
        this._paxHeader = PaxHeader.parse(this._arrayBuffer, this._bytesRead, size);
        break;
    }

    this._bytesRead += size;
    const remainder = size % 512;

    if (remainder !== 0) {
      this._bytesRead += 512 - remainder;
    }

    if (!normalFile) {
      return null;
    }

    if (ustarFormat.indexOf('ustar') !== -1) {
      const namePrefix = headers.substring(345, 500).replace(/\0/g, '');

      if (namePrefix.length > 0) {
        name = namePrefix.trim() + name.trim();
      }
    }

    const file = {
      name: name,
      start: start,
      size: size,
      url: url
    };

    if (this._globalPaxHeader) {
      this._globalPaxHeader.applyHeader(file);
    }

    if (this._paxHeader) {
      this._paxHeader.applyHeader(file);

      this._paxHeader = null;
    }

    return file;
  };

  UntarInternal.prototype.untar = function (filenamePrefix) {
    if (!utfDecoder) {
      console.error('Cannot untar because TextDecoder interface is not available for this platform.');
      return [];
    }

    const files = [];

    while (this._hasNext()) {
      const file = this._readNextFile();

      if (!file) continue;

      if (filenamePrefix && file.name) {
        file.name = filenamePrefix + file.name;
      }

      files.push(file);
    }

    return files;
  };

  if (isWorker) {
    self.onmessage = function (e) {
      const id = e.data.id;

      try {
        const archive = new UntarInternal(e.data.arrayBuffer);
        const files = archive.untar(e.data.prefix);
        postMessage({
          id: id,
          files: files,
          arrayBuffer: e.data.arrayBuffer
        }, [e.data.arrayBuffer]);
      } catch (err) {
        postMessage({
          id: id,
          error: err.toString()
        });
      }
    };
  }
}

let workerUrl = null;

function getWorkerUrl() {
  if (!workerUrl) {
    const code = '(' + UntarScope.toString() + ')(true)\n\n';
    const blob = new Blob([code], {
      type: 'application/javascript'
    });
    workerUrl = URL.createObjectURL(blob);
  }

  return workerUrl;
}

class UntarWorker {
  constructor(filenamePrefix) {
    this._requestId = 0;
    this._pendingRequests = {};
    this._filenamePrefix = filenamePrefix;
    this._worker = new Worker(getWorkerUrl());

    this._worker.addEventListener('message', this._onMessage.bind(this));
  }

  _onMessage(e) {
    const id = e.data.id;
    if (!this._pendingRequests[id]) return;
    const callback = this._pendingRequests[id];
    delete this._pendingRequests[id];

    if (e.data.error) {
      callback(e.data.error);
    } else {
      const arrayBuffer = e.data.arrayBuffer;

      for (let i = 0, len = e.data.files.length; i < len; i++) {
        const file = e.data.files[i];
        const blob = new Blob([arrayBuffer.slice(file.start, file.start + file.size)]);
        file.url = URL.createObjectURL(blob);
      }

      callback(null, e.data.files);
    }
  }

  untar(arrayBuffer, callback) {
    const id = this._requestId++;
    this._pendingRequests[id] = callback;

    this._worker.postMessage({
      id: id,
      prefix: this._filenamePrefix,
      arrayBuffer: arrayBuffer
    }, [arrayBuffer]);
  }

  hasPendingRequests() {
    return Object.keys(this._pendingRequests).length > 0;
  }

  destroy() {
    if (this._worker) {
      this._worker.terminate();

      this._worker = null;
      this._pendingRequests = null;
    }
  }

}

UntarScope();

class BundleHandler {
  constructor(app) {
    this.handlerType = "bundle";
    this._assets = app.assets;
    this._worker = null;
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const self = this;
    http.get(url.load, {
      responseType: Http.ResponseType.ARRAY_BUFFER,
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        try {
          self._untar(response, callback);
        } catch (ex) {
          callback('Error loading bundle resource ' + url.original + ': ' + ex);
        }
      } else {
        callback('Error loading bundle resource ' + url.original + ': ' + err);
      }
    });
  }

  _untar(response, callback) {
    const self = this;

    if (platform.workers) {
      if (!self._worker) {
        self._worker = new UntarWorker(self._assets.prefix);
      }

      self._worker.untar(response, function (err, files) {
        callback(err, files);

        if (!self._worker.hasPendingRequests()) {
          self._worker.destroy();

          self._worker = null;
        }
      });
    } else {
      const archive = new Untar(response);
      const files = archive.untar(self._assets.prefix);
      callback(null, files);
    }
  }

  open(url, data) {
    return new Bundle(data);
  }

  patch(asset, assets) {}

}

class ResourceLoader {
  constructor(app) {
    this._handlers = {};
    this._requests = {};
    this._cache = {};
    this._app = app;
  }

  addHandler(type, handler) {
    this._handlers[type] = handler;
    handler._loader = this;
  }

  removeHandler(type) {
    delete this._handlers[type];
  }

  getHandler(type) {
    return this._handlers[type];
  }

  load(url, type, callback, asset) {
    const handler = this._handlers[type];

    if (!handler) {
      const err = `No resource handler for asset type: '${type}' when loading [${url}]`;
      callback(err);
      return;
    }

    if (!url) {
      this._loadNull(handler, callback, asset);

      return;
    }

    const key = url + type;

    if (this._cache[key] !== undefined) {
      callback(null, this._cache[key]);
    } else if (this._requests[key]) {
      this._requests[key].push(callback);
    } else {
      this._requests[key] = [callback];
      const self = this;

      const handleLoad = function handleLoad(err, urlObj) {
        if (err) {
          self._onFailure(key, err);

          return;
        }

        handler.load(urlObj, function (err, data, extra) {
          if (!self._requests[key]) {
            return;
          }

          if (err) {
            self._onFailure(key, err);

            return;
          }

          try {
            self._onSuccess(key, handler.open(urlObj.original, data, asset), extra);
          } catch (e) {
            self._onFailure(key, e);
          }
        }, asset);
      };

      const normalizedUrl = url.split('?')[0];

      if (this._app.enableBundles && this._app.bundles.hasUrl(normalizedUrl)) {
        if (!this._app.bundles.canLoadUrl(normalizedUrl)) {
          handleLoad(`Bundle for ${url} not loaded yet`);
          return;
        }

        this._app.bundles.loadUrl(normalizedUrl, function (err, fileUrlFromBundle) {
          handleLoad(err, {
            load: fileUrlFromBundle,
            original: normalizedUrl
          });
        });
      } else {
        handleLoad(null, {
          load: url,
          original: asset && asset.file.filename || url
        });
      }
    }
  }

  _loadNull(handler, callback, asset) {
    const onLoad = function onLoad(err, data, extra) {
      if (err) {
        callback(err);
      } else {
        try {
          callback(null, handler.open(null, data, asset), extra);
        } catch (e) {
          callback(e);
        }
      }
    };

    handler.load(null, onLoad, asset);
  }

  _onSuccess(key, result, extra) {
    this._cache[key] = result;

    for (let i = 0; i < this._requests[key].length; i++) {
      this._requests[key][i](null, result, extra);
    }

    delete this._requests[key];
  }

  _onFailure(key, err) {
    console.error(err);

    if (this._requests[key]) {
      for (let i = 0; i < this._requests[key].length; i++) {
        this._requests[key][i](err);
      }

      delete this._requests[key];
    }
  }

  open(type, data) {
    const handler = this._handlers[type];

    if (!handler) {
      console.warn('No resource handler found for: ' + type);
      return data;
    }

    return handler.open(null, data);
  }

  patch(asset, assets) {
    const handler = this._handlers[asset.type];

    if (!handler) {
      console.warn('No resource handler found for: ' + asset.type);
      return;
    }

    if (handler.patch) {
      handler.patch(asset, assets);
    }
  }

  clearCache(url, type) {
    delete this._cache[url + type];
  }

  getFromCache(url, type) {
    if (this._cache[url + type]) {
      return this._cache[url + type];
    }

    return undefined;
  }

  enableRetry(maxRetries = 5) {
    maxRetries = Math.max(0, maxRetries) || 0;

    for (const key in this._handlers) {
      this._handlers[key].maxRetries = maxRetries;
    }
  }

  disableRetry() {
    for (const key in this._handlers) {
      this._handlers[key].maxRetries = 0;
    }
  }

  destroy() {
    this._handlers = {};
    this._requests = {};
    this._cache = {};
  }

}

const DEFAULT_LOCALE = 'en-US';
const DEFAULT_LOCALE_FALLBACKS = {
  'en': 'en-US',
  'es': 'en-ES',
  'zh': 'zh-CN',
  'zh-HK': 'zh-TW',
  'zh-TW': 'zh-HK',
  'zh-MO': 'zh-HK',
  'fr': 'fr-FR',
  'de': 'de-DE',
  'it': 'it-IT',
  'ru': 'ru-RU',
  'ja': 'ja-JP'
};

const PLURALS = {};

function definePluralFn(locales, fn) {
  for (let i = 0, len = locales.length; i < len; i++) {
    PLURALS[locales[i]] = fn;
  }
}

function getLang(locale) {
  const idx = locale.indexOf('-');

  if (idx !== -1) {
    return locale.substring(0, idx);
  }

  return locale;
}

function replaceLang(locale, desiredLang) {
  const idx = locale.indexOf('-');

  if (idx !== -1) {
    return desiredLang + locale.substring(idx);
  }

  return desiredLang;
}

function findAvailableLocale(desiredLocale, availableLocales) {
  if (availableLocales[desiredLocale]) {
    return desiredLocale;
  }

  let fallback = DEFAULT_LOCALE_FALLBACKS[desiredLocale];

  if (fallback && availableLocales[fallback]) {
    return fallback;
  }

  const lang = getLang(desiredLocale);
  fallback = DEFAULT_LOCALE_FALLBACKS[lang];

  if (availableLocales[fallback]) {
    return fallback;
  }

  if (availableLocales[lang]) {
    return lang;
  }

  return DEFAULT_LOCALE;
}

definePluralFn(['ja', 'ko', 'th', 'vi', 'zh', 'id'], function (n) {
  return 0;
});
definePluralFn(['fa', 'hi'], function (n) {
  if (n >= 0 && n <= 1) {
    return 0;
  }

  return 1;
});
definePluralFn(['fr', 'pt'], function (n) {
  if (n >= 0 && n < 2) {
    return 0;
  }

  return 1;
});
definePluralFn(['da'], function (n) {
  if (n === 1 || !Number.isInteger(n) && n >= 0 && n <= 1) {
    return 0;
  }

  return 1;
});
definePluralFn(['de', 'en', 'it', 'el', 'es', 'tr', 'fi', 'sv', 'nb', 'no', 'ur'], function (n) {
  if (n === 1) {
    return 0;
  }

  return 1;
});
definePluralFn(['ru', 'uk'], function (n) {
  if (Number.isInteger(n)) {
    const mod10 = n % 10;
    const mod100 = n % 100;

    if (mod10 === 1 && mod100 !== 11) {
      return 0;
    } else if (mod10 >= 2 && mod10 <= 4 && (mod100 < 12 || mod100 > 14)) {
      return 1;
    } else if (mod10 === 0 || mod10 >= 5 && mod10 <= 9 || mod100 >= 11 && mod100 <= 14) {
      return 2;
    }
  }

  return 3;
});
definePluralFn(['pl'], function (n) {
  if (Number.isInteger(n)) {
    if (n === 1) {
      return 0;
    }

    const mod10 = n % 10;
    const mod100 = n % 100;

    if (mod10 >= 2 && mod10 <= 4 && (mod100 < 12 || mod100 > 14)) {
      return 1;
    } else if (mod10 >= 0 && mod10 <= 1 || mod10 >= 5 && mod10 <= 9 || mod100 >= 12 && mod100 <= 14) {
      return 2;
    }
  }

  return 3;
});
definePluralFn(['ar'], function (n) {
  if (n === 0) {
    return 0;
  } else if (n === 1) {
    return 1;
  } else if (n === 2) {
    return 2;
  }

  if (Number.isInteger(n)) {
    const mod100 = n % 100;

    if (mod100 >= 3 && mod100 <= 10) {
      return 3;
    } else if (mod100 >= 11 && mod100 <= 99) {
      return 4;
    }
  }

  return 5;
});
const DEFAULT_PLURAL_FN = PLURALS[getLang(DEFAULT_LOCALE)];

function getPluralFn(lang) {
  return PLURALS[lang] || DEFAULT_PLURAL_FN;
}

const ABSOLUTE_URL = new RegExp('^' + '\\s*' + '(?:' + '(?:' + '[a-z]+[a-z0-9\\-\\+\\.]*' + ':' + ')?' + '//' + '|' + 'data:' + '|blob:' + ')', 'i');
const ASSET_ANIMATION = 'animation';
const ASSET_AUDIO = 'audio';
const ASSET_IMAGE = 'image';
const ASSET_JSON = 'json';
const ASSET_MODEL = 'model';
const ASSET_MATERIAL = 'material';
const ASSET_TEXT = 'text';
const ASSET_TEXTURE = 'texture';
const ASSET_CUBEMAP = 'cubemap';
const ASSET_SHADER = 'shader';
const ASSET_CSS = 'css';
const ASSET_HTML = 'html';
const ASSET_SCRIPT = 'script';
const ASSET_CONTAINER = 'container';

class AssetFile {
  constructor(url, filename, hash, size, opt, contents) {
    this.url = url || '';
    this.filename = filename || '';
    this.hash = hash === undefined ? null : hash;
    this.size = size === undefined ? null : size;
    this.opt = opt === undefined ? null : opt;
    this.contents = contents || null;
  }

  equals(other) {
    return this.url === other.url && this.filename === other.filename && this.hash === other.hash && this.size === other.size && this.opt === other.opt && this.contents === other.contents;
  }

}

let assetIdCounter = -1;
const VARIANT_SUPPORT = {
  pvr: 'extCompressedTexturePVRTC',
  dxt: 'extCompressedTextureS3TC',
  etc2: 'extCompressedTextureETC',
  etc1: 'extCompressedTextureETC1',
  basis: 'canvas'
};
const VARIANT_DEFAULT_PRIORITY = ['pvr', 'dxt', 'etc2', 'etc1', 'basis'];

class Asset extends EventHandler {
  constructor(name, type, file, data, options) {
    super();
    this._id = assetIdCounter--;
    this.name = name || '';
    this.type = type;
    this.tags = new Tags(this);
    this._preload = false;
    this._file = null;
    this._data = data || {};
    this.options = options || {};
    this._resources = [];
    this._i18n = {};
    this.loaded = false;
    this.loading = false;
    this.registry = null;
    if (file) this.file = file;
  }

  set id(value) {
    this._id = value;
  }

  get id() {
    return this._id;
  }

  set file(value) {
    if (value && value.variants && ['texture', 'textureatlas', 'bundle'].indexOf(this.type) !== -1) {
      var _this$registry, _this$registry$_loade;

      const app = ((_this$registry = this.registry) == null ? void 0 : (_this$registry$_loade = _this$registry._loader) == null ? void 0 : _this$registry$_loade._app) || getApplication();
      const device = app == null ? void 0 : app.graphicsDevice;

      if (device) {
        for (let i = 0, len = VARIANT_DEFAULT_PRIORITY.length; i < len; i++) {
          const variant = VARIANT_DEFAULT_PRIORITY[i];

          if (value.variants[variant] && device[VARIANT_SUPPORT[variant]]) {
            value = value.variants[variant];
            break;
          }

          if (app.enableBundles) {
            const bundles = app.bundles.listBundlesForAsset(this);

            if (bundles && bundles.find(b => {
              var _b$file;

              return b == null ? void 0 : (_b$file = b.file) == null ? void 0 : _b$file.variants[variant];
            })) {
              break;
            }
          }
        }
      }
    }

    const oldFile = this._file;
    const newFile = value ? new AssetFile(value.url, value.filename, value.hash, value.size, value.opt, value.contents) : null;

    if (!!newFile !== !!oldFile || newFile && !newFile.equals(oldFile)) {
      this._file = newFile;
      this.fire('change', this, 'file', newFile, oldFile);
      this.reload();
    }
  }

  get file() {
    return this._file;
  }

  set data(value) {
    const old = this._data;
    this._data = value;

    if (value !== old) {
      this.fire('change', this, 'data', value, old);
      if (this.loaded) this.registry._loader.patch(this, this.registry);
    }
  }

  get data() {
    return this._data;
  }

  set resource(value) {
    const _old = this._resources[0];
    this._resources[0] = value;
    this.fire('change', this, 'resource', value, _old);
  }

  get resource() {
    return this._resources[0];
  }

  set resources(value) {
    const _old = this._resources;
    this._resources = value;
    this.fire('change', this, 'resources', value, _old);
  }

  get resources() {
    return this._resources;
  }

  set preload(value) {
    value = !!value;
    if (this._preload === value) return;
    this._preload = value;
    if (this._preload && !this.loaded && !this.loading && this.registry) this.registry.load(this);
  }

  get preload() {
    return this._preload;
  }

  set loadFaces(value) {
    value = !!value;

    if (!this.hasOwnProperty('_loadFaces') || value !== this._loadFaces) {
      this._loadFaces = value;
      if (this.loaded) this.registry._loader.patch(this, this.registry);
    }
  }

  get loadFaces() {
    return this._loadFaces;
  }

  getFileUrl() {
    const file = this.file;
    if (!file || !file.url) return null;
    let url = file.url;
    if (this.registry && this.registry.prefix && !ABSOLUTE_URL.test(url)) url = this.registry.prefix + url;

    if (this.type !== 'script' && file.hash) {
      const separator = url.indexOf('?') !== -1 ? '&' : '?';
      url += separator + 't=' + file.hash;
    }

    return url;
  }

  getAbsoluteUrl(relativePath) {
    if (relativePath.startsWith('blob:') || relativePath.startsWith('data:')) {
      return relativePath;
    }

    const base = path.getDirectory(this.file.url);
    return path.join(base, relativePath);
  }

  getLocalizedAssetId(locale) {
    locale = findAvailableLocale(locale, this._i18n);
    return this._i18n[locale] || null;
  }

  addLocalizedAssetId(locale, assetId) {
    this._i18n[locale] = assetId;
    this.fire('add:localized', locale, assetId);
  }

  removeLocalizedAssetId(locale) {
    const assetId = this._i18n[locale];

    if (assetId) {
      delete this._i18n[locale];
      this.fire('remove:localized', locale, assetId);
    }
  }

  ready(callback, scope) {
    scope = scope || this;

    if (this.loaded) {
      callback.call(scope, this);
    } else {
      this.once('load', function (asset) {
        callback.call(scope, asset);
      });
    }
  }

  reload() {
    if (this.loaded) {
      this.loaded = false;
      this.registry.load(this);
    }
  }

  unload() {
    if (!this.loaded && this._resources.length === 0) return;
    this.fire('unload', this);
    this.registry.fire('unload:' + this.id, this);
    const old = this._resources;
    this.resources = [];
    this.loaded = false;

    if (this.file) {
      this.registry._loader.clearCache(this.getFileUrl(), this.type);
    }

    for (let i = 0; i < old.length; ++i) {
      const resource = old[i];

      if (resource && resource.destroy) {
        resource.destroy();
      }
    }
  }

  static fetchArrayBuffer(loadUrl, callback, asset, maxRetries = 0) {
    var _asset$file;

    if (asset != null && (_asset$file = asset.file) != null && _asset$file.contents) {
      setTimeout(() => {
        callback(null, asset.file.contents);
      });
    } else {
      http.get(loadUrl, {
        cache: true,
        responseType: 'arraybuffer',
        retry: maxRetries > 0,
        maxRetries: maxRetries
      }, callback);
    }
  }

}

class TagsCache {
  constructor(key = null) {
    this._index = {};
    this._key = key;
  }

  addItem(item) {
    const tags = item.tags._list;

    for (const tag of tags) this.add(tag, item);
  }

  removeItem(item) {
    const tags = item.tags._list;

    for (const tag of tags) this.remove(tag, item);
  }

  add(tag, item) {
    if (this._index[tag] && this._index[tag].list.indexOf(item) !== -1) return;

    if (!this._index[tag]) {
      this._index[tag] = {
        list: []
      };
      if (this._key) this._index[tag].keys = {};
    }

    this._index[tag].list.push(item);

    if (this._key) this._index[tag].keys[item[this._key]] = item;
  }

  remove(tag, item) {
    if (!this._index[tag]) return;

    if (this._key) {
      if (!this._index[tag].keys[item[this._key]]) return;
    }

    const ind = this._index[tag].list.indexOf(item);

    if (ind === -1) return;

    this._index[tag].list.splice(ind, 1);

    if (this._key) delete this._index[tag].keys[item[this._key]];
    if (this._index[tag].list.length === 0) delete this._index[tag];
  }

  find(args) {
    const index = {};
    const items = [];
    let item, tag, tags, tagsRest, missingIndex;

    const sort = (a, b) => {
      return this._index[a].list.length - this._index[b].list.length;
    };

    for (let i = 0; i < args.length; i++) {
      tag = args[i];

      if (tag instanceof Array) {
        if (tag.length === 0) continue;

        if (tag.length === 1) {
          tag = tag[0];
        } else {
          missingIndex = false;

          for (let t = 0; t < tag.length; t++) {
            if (!this._index[tag[t]]) {
              missingIndex = true;
              break;
            }
          }

          if (missingIndex) continue;
          tags = tag.slice(0).sort(sort);
          tagsRest = tags.slice(1);
          if (tagsRest.length === 1) tagsRest = tagsRest[0];

          for (let n = 0; n < this._index[tags[0]].list.length; n++) {
            item = this._index[tags[0]].list[n];

            if ((this._key ? !index[item[this._key]] : items.indexOf(item) === -1) && item.tags.has(tagsRest)) {
              if (this._key) index[item[this._key]] = true;
              items.push(item);
            }
          }

          continue;
        }
      }

      if (tag && typeof tag === 'string' && this._index[tag]) {
        for (let n = 0; n < this._index[tag].list.length; n++) {
          item = this._index[tag].list[n];

          if (this._key) {
            if (!index[item[this._key]]) {
              index[item[this._key]] = true;
              items.push(item);
            }
          } else if (items.indexOf(item) === -1) {
            items.push(item);
          }
        }
      }
    }

    return items;
  }

}

class ScriptHandler {
  constructor(app) {
    this.handlerType = "script";
    this._app = app;
    this._scripts = {};
    this._cache = {};
  }

  static _push(Type) {
    if (script.legacy && ScriptHandler._types.length > 0) {
      console.assert('Script Ordering Error. Contact support@playcanvas.com');
    } else {
      ScriptHandler._types.push(Type);
    }
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const self = this;
    script.app = this._app;

    this._loadScript(url.load, (err, url, extra) => {
      if (!err) {
        if (script.legacy) {
          let Type = null;

          if (ScriptHandler._types.length) {
            Type = ScriptHandler._types.pop();
          }

          if (Type) {
            this._scripts[url] = Type;
          } else {
            Type = null;
          }

          callback(null, Type, extra);
        } else {
          const obj = {};

          for (let i = 0; i < ScriptHandler._types.length; i++) obj[ScriptHandler._types[i].name] = ScriptHandler._types[i];

          ScriptHandler._types.length = 0;
          callback(null, obj, extra);
          delete self._loader._cache[url + 'script'];
        }
      } else {
        callback(err);
      }
    });
  }

  open(url, data) {
    return data;
  }

  patch(asset, assets) {}

  _loadScript(url, callback) {
    const head = document.head;
    const element = document.createElement('script');
    this._cache[url] = element;
    element.async = false;
    element.addEventListener('error', function (e) {
      callback(`Script: ${e.target.src} failed to load`);
    }, false);
    let done = false;

    element.onload = element.onreadystatechange = function () {
      if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
        done = true;
        callback(null, url, element);
      }
    };

    element.src = url;
    head.appendChild(element);
  }

}

ScriptHandler._types = [];

let _legacy = false;
let _createdLoadingScreen = false;
const script = {
  app: null,
  create: function (name, callback) {
    if (!_legacy) return;
    const ScriptType = callback(script.app);
    ScriptType._pcScriptName = name;

    ScriptHandler._push(ScriptType);

    this.fire("created", name, callback);
  },
  attribute: function (name, type, defaultValue, options) {},
  createLoadingScreen: function (callback) {
    if (_createdLoadingScreen) return;
    _createdLoadingScreen = true;
    const app = getApplication();
    callback(app);
  }
};
Object.defineProperty(script, 'legacy', {
  get: function () {
    return _legacy;
  },
  set: function (value) {
    _legacy = value;
  }
});
events.attach(script);

class AssetRegistry extends EventHandler {
  constructor(loader) {
    super();
    this._loader = loader;
    this._assets = [];
    this._cache = {};
    this._names = {};
    this._tags = new TagsCache('_id');
    this._urls = {};
    this.prefix = null;
  }

  list(filters) {
    filters = filters || {};
    return this._assets.filter(asset => {
      let include = true;

      if (filters.preload !== undefined) {
        include = asset.preload === filters.preload;
      }

      return include;
    });
  }

  add(asset) {
    const index = this._assets.push(asset) - 1;
    let url;
    this._cache[asset.id] = index;
    if (!this._names[asset.name]) this._names[asset.name] = [];

    this._names[asset.name].push(index);

    if (asset.file) {
      url = asset.file.url;
      this._urls[url] = index;
    }

    asset.registry = this;

    this._tags.addItem(asset);

    asset.tags.on('add', this._onTagAdd, this);
    asset.tags.on('remove', this._onTagRemove, this);
    this.fire('add', asset);
    this.fire('add:' + asset.id, asset);
    if (url) this.fire('add:url:' + url, asset);
    if (asset.preload) this.load(asset);
  }

  remove(asset) {
    const idx = this._cache[asset.id];
    const url = asset.file ? asset.file.url : null;

    if (idx !== undefined) {
      this._assets.splice(idx, 1);

      delete this._cache[asset.id];
      this._names = {};
      this._urls = [];

      for (let i = 0, l = this._assets.length; i < l; i++) {
        const a = this._assets[i];
        this._cache[a.id] = i;

        if (!this._names[a.name]) {
          this._names[a.name] = [];
        }

        this._names[a.name].push(i);

        if (a.file) {
          this._urls[a.file.url] = i;
        }
      }

      this._tags.removeItem(asset);

      asset.tags.off('add', this._onTagAdd, this);
      asset.tags.off('remove', this._onTagRemove, this);
      asset.fire('remove', asset);
      this.fire('remove', asset);
      this.fire('remove:' + asset.id, asset);
      if (url) this.fire('remove:url:' + url, asset);
      return true;
    }

    return false;
  }

  get(id) {
    const idx = this._cache[id];
    return this._assets[idx];
  }

  getByUrl(url) {
    const idx = this._urls[url];
    return this._assets[idx];
  }

  load(asset) {
    if (asset.loading || asset.loaded) {
      return;
    }

    const file = asset.file;

    const _opened = resource => {
      if (resource instanceof Array) {
        asset.resources = resource;
      } else {
        asset.resource = resource;
      }

      this._loader.patch(asset, this);

      this.fire('load', asset);
      this.fire('load:' + asset.id, asset);
      if (file && file.url) this.fire('load:url:' + file.url, asset);
      asset.fire('load', asset);
    };

    const _loaded = (err, resource, extra) => {
      asset.loaded = true;
      asset.loading = false;

      if (err) {
        this.fire('error', err, asset);
        this.fire('error:' + asset.id, err, asset);
        asset.fire('error', err, asset);
      } else {
        if (!script.legacy && asset.type === 'script') {
          const handler = this._loader.getHandler('script');

          if (handler._cache[asset.id] && handler._cache[asset.id].parentNode === document.head) {
            document.head.removeChild(handler._cache[asset.id]);
          }

          handler._cache[asset.id] = extra;
        }

        _opened(resource);
      }
    };

    if (file || asset.type === 'cubemap') {
      this.fire('load:start', asset);
      this.fire('load:' + asset.id + ':start', asset);
      asset.loading = true;

      this._loader.load(asset.getFileUrl(), asset.type, _loaded, asset);
    } else {
      const resource = this._loader.open(asset.type, asset.data);

      asset.loaded = true;

      _opened(resource);
    }
  }

  loadFromUrl(url, type, callback) {
    this.loadFromUrlAndFilename(url, null, type, callback);
  }

  loadFromUrlAndFilename(url, filename, type, callback) {
    const name = path.getBasename(filename || url);
    const file = {
      filename: filename || name,
      url: url
    };
    let asset = this.getByUrl(url);

    if (!asset) {
      asset = new Asset(name, type, file);
      this.add(asset);
    } else if (asset.loaded) {
      callback(asset.loadFromUrlError || null, asset);
      return;
    }

    const startLoad = asset => {
      asset.once('load', loadedAsset => {
        if (type === 'material') {
          this._loadTextures(loadedAsset, (err, textures) => {
            callback(err, loadedAsset);
          });
        } else {
          callback(null, loadedAsset);
        }
      });
      asset.once('error', err => {
        if (err) {
          this.loadFromUrlError = err;
        }

        callback(err, asset);
      });
      this.load(asset);
    };

    if (asset.resource) {
      callback(null, asset);
    } else if (type === 'model') {
      this._loadModel(asset, startLoad);
    } else {
      startLoad(asset);
    }
  }

  _loadModel(modelAsset, continuation) {
    const url = modelAsset.getFileUrl();
    const ext = path.getExtension(url);

    if (ext === '.json' || ext === '.glb') {
      const dir = path.getDirectory(url);
      const basename = path.getBasename(url);
      const mappingUrl = path.join(dir, basename.replace(ext, '.mapping.json'));

      this._loader.load(mappingUrl, 'json', (err, data) => {
        if (err) {
          modelAsset.data = {
            mapping: []
          };
          continuation(modelAsset);
        } else {
          this._loadMaterials(modelAsset, data, (e, materials) => {
            modelAsset.data = data;
            continuation(modelAsset);
          });
        }
      });
    } else {
      continuation(modelAsset);
    }
  }

  _loadMaterials(modelAsset, mapping, callback) {
    const materials = [];
    let count = 0;

    const onMaterialLoaded = (err, materialAsset) => {
      this._loadTextures(materialAsset, (err, textures) => {
        materials.push(materialAsset);

        if (materials.length === count) {
          callback(null, materials);
        }
      });
    };

    for (let i = 0; i < mapping.mapping.length; i++) {
      const path = mapping.mapping[i].path;

      if (path) {
        count++;
        const url = modelAsset.getAbsoluteUrl(path);
        this.loadFromUrl(url, 'material', onMaterialLoaded);
      }
    }

    if (count === 0) {
      callback(null, materials);
    }
  }

  _loadTextures(materialAsset, callback) {
    const textures = [];
    let count = 0;
    const data = materialAsset.data;

    if (data.mappingFormat !== 'path') {
      callback(null, textures);
      return;
    }

    const onTextureLoaded = (err, texture) => {
      if (err) console.error(err);
      textures.push(texture);

      if (textures.length === count) {
        callback(null, textures);
      }
    };

    const texParams = standardMaterialTextureParameters;

    for (let i = 0; i < texParams.length; i++) {
      const path = data[texParams[i]];

      if (path && typeof path === 'string') {
        count++;
        const url = materialAsset.getAbsoluteUrl(path);
        this.loadFromUrl(url, 'texture', onTextureLoaded);
      }
    }

    if (count === 0) {
      callback(null, textures);
    }
  }

  findAll(name, type) {
    const idxs = this._names[name];

    if (idxs) {
      const assets = idxs.map(idx => {
        return this._assets[idx];
      });

      if (type) {
        return assets.filter(asset => {
          return asset.type === type;
        });
      }

      return assets;
    }

    return [];
  }

  _onTagAdd(tag, asset) {
    this._tags.add(tag, asset);
  }

  _onTagRemove(tag, asset) {
    this._tags.remove(tag, asset);
  }

  findByTag() {
    return this._tags.find(arguments);
  }

  filter(callback) {
    return this._assets.filter(asset => callback(asset));
  }

  find(name, type) {
    const asset = this.findAll(name, type);
    return asset.length > 0 ? asset[0] : null;
  }

}

class BundleRegistry {
  constructor(assets) {
    this._assets = assets;
    this._bundleAssets = {};
    this._assetsInBundles = {};
    this._urlsInBundles = {};
    this._fileRequests = {};

    this._assets.on('add', this._onAssetAdded, this);

    this._assets.on('remove', this._onAssetRemoved, this);
  }

  _onAssetAdded(asset) {
    if (asset.type === 'bundle') {
      this._bundleAssets[asset.id] = asset;

      this._registerBundleEventListeners(asset.id);

      for (let i = 0, len = asset.data.assets.length; i < len; i++) {
        this._indexAssetInBundle(asset.data.assets[i], asset);
      }
    } else {
      if (this._assetsInBundles[asset.id]) {
        this._indexAssetFileUrls(asset);
      }
    }
  }

  _registerBundleEventListeners(bundleAssetId) {
    this._assets.on('load:' + bundleAssetId, this._onBundleLoaded, this);

    this._assets.on('error:' + bundleAssetId, this._onBundleError, this);
  }

  _unregisterBundleEventListeners(bundleAssetId) {
    this._assets.off('load:' + bundleAssetId, this._onBundleLoaded, this);

    this._assets.off('error:' + bundleAssetId, this._onBundleError, this);
  }

  _indexAssetInBundle(assetId, bundleAsset) {
    if (!this._assetsInBundles[assetId]) {
      this._assetsInBundles[assetId] = [bundleAsset];
    } else {
      const bundles = this._assetsInBundles[assetId];
      const idx = bundles.indexOf(bundleAsset);

      if (idx === -1) {
        bundles.push(bundleAsset);
      }
    }

    const asset = this._assets.get(assetId);

    if (asset) {
      this._indexAssetFileUrls(asset);
    }
  }

  _indexAssetFileUrls(asset) {
    const urls = this._getAssetFileUrls(asset);

    if (!urls) return;

    for (let i = 0, len = urls.length; i < len; i++) {
      const url = urls[i];
      this._urlsInBundles[url] = this._assetsInBundles[asset.id];
    }
  }

  _getAssetFileUrls(asset) {
    let url = asset.getFileUrl();
    if (!url) return null;
    url = this._normalizeUrl(url);
    const urls = [url];

    if (asset.type === 'font') {
      const numFiles = asset.data.info.maps.length;

      for (let i = 1; i < numFiles; i++) {
        urls.push(url.replace('.png', i + '.png'));
      }
    }

    return urls;
  }

  _normalizeUrl(url) {
    return url && url.split('?')[0];
  }

  _onAssetRemoved(asset) {
    if (asset.type === 'bundle') {
      delete this._bundleAssets[asset.id];

      this._unregisterBundleEventListeners(asset.id);

      for (const id in this._assetsInBundles) {
        const array = this._assetsInBundles[id];
        const idx = array.indexOf(asset);

        if (idx !== -1) {
          array.splice(idx, 1);

          if (!array.length) {
            delete this._assetsInBundles[id];

            for (const url in this._urlsInBundles) {
              if (this._urlsInBundles[url] === array) {
                delete this._urlsInBundles[url];
              }
            }
          }
        }
      }

      this._onBundleError(`Bundle ${asset.id} was removed`, asset);
    } else if (this._assetsInBundles[asset.id]) {
      delete this._assetsInBundles[asset.id];

      const urls = this._getAssetFileUrls(asset);

      for (let i = 0, len = urls.length; i < len; i++) {
        delete this._urlsInBundles[urls[i]];
      }
    }
  }

  _onBundleLoaded(bundleAsset) {
    if (!bundleAsset.resource) {
      this._onBundleError(`Bundle ${bundleAsset.id} failed to load`, bundleAsset);

      return;
    }

    requestAnimationFrame(() => {
      if (!this._fileRequests) {
        return;
      }

      for (const url in this._fileRequests) {
        const bundles = this._urlsInBundles[url];
        if (!bundles || bundles.indexOf(bundleAsset) === -1) continue;
        const decodedUrl = decodeURIComponent(url);
        let err = null;

        if (!bundleAsset.resource.hasBlobUrl(decodedUrl)) {
          err = `Bundle ${bundleAsset.id} does not contain URL ${url}`;
        }

        const requests = this._fileRequests[url];

        for (let i = 0, len = requests.length; i < len; i++) {
          if (err) {
            requests[i](err);
          } else {
            requests[i](null, bundleAsset.resource.getBlobUrl(decodedUrl));
          }
        }

        delete this._fileRequests[url];
      }
    });
  }

  _onBundleError(err, bundleAsset) {
    for (const url in this._fileRequests) {
      const bundle = this._findLoadedOrLoadingBundleForUrl(url);

      if (!bundle) {
        const requests = this._fileRequests[url];

        for (let i = 0, len = requests.length; i < len; i++) {
          requests[i](err);
        }

        delete this._fileRequests[url];
      }
    }
  }

  _findLoadedOrLoadingBundleForUrl(url) {
    const bundles = this._urlsInBundles[url];
    if (!bundles) return null;
    const len = bundles.length;

    for (let i = 0; i < len; i++) {
      if (bundles[i].loaded && bundles[i].resource) {
        return bundles[i];
      }
    }

    for (let i = 0; i < len; i++) {
      if (bundles[i].loading) {
        return bundles[i];
      }
    }

    return null;
  }

  listBundlesForAsset(asset) {
    return this._assetsInBundles[asset.id] || null;
  }

  list() {
    const result = [];

    for (const id in this._bundleAssets) {
      result.push(this._bundleAssets[id]);
    }

    return result;
  }

  hasUrl(url) {
    return !!this._urlsInBundles[url];
  }

  canLoadUrl(url) {
    return !!this._findLoadedOrLoadingBundleForUrl(url);
  }

  loadUrl(url, callback) {
    const bundle = this._findLoadedOrLoadingBundleForUrl(url);

    if (!bundle) {
      callback(`URL ${url} not found in any bundles`);
      return;
    }

    if (bundle.loaded) {
      const decodedUrl = decodeURIComponent(url);

      if (!bundle.resource.hasBlobUrl(decodedUrl)) {
        callback(`Bundle ${bundle.id} does not contain URL ${url}`);
        return;
      }

      callback(null, bundle.resource.getBlobUrl(decodedUrl));
    } else if (this._fileRequests.hasOwnProperty(url)) {
      this._fileRequests[url].push(callback);
    } else {
      this._fileRequests[url] = [callback];
    }
  }

  destroy() {
    this._assets.off('add', this._onAssetAdded, this);

    this._assets.off('remove', this._onAssetRemoved, this);

    for (const id in this._bundleAssets) {
      this._unregisterBundleEventListeners(id);
    }

    this._assets = null;
    this._bundleAssets = null;
    this._assetsInBundles = null;
    this._urlsInBundles = null;
    this._fileRequests = null;
  }

}

const components = ['x', 'y', 'z', 'w'];
const vecLookup = [undefined, undefined, Vec2, Vec3, Vec4];

function rawToValue(app, args, value, old) {
  switch (args.type) {
    case 'boolean':
      return !!value;

    case 'number':
      if (typeof value === 'number') {
        return value;
      } else if (typeof value === 'string') {
        const v = parseInt(value, 10);
        if (isNaN(v)) return null;
        return v;
      } else if (typeof value === 'boolean') {
        return 0 + value;
      }

      return null;

    case 'json':
      {
        const result = {};

        if (Array.isArray(args.schema)) {
          if (!value || typeof value !== 'object') {
            value = {};
          }

          for (let i = 0; i < args.schema.length; i++) {
            const field = args.schema[i];
            if (!field.name) continue;

            if (field.array) {
              result[field.name] = [];
              const arr = Array.isArray(value[field.name]) ? value[field.name] : [];

              for (let j = 0; j < arr.length; j++) {
                result[field.name].push(rawToValue(app, field, arr[j]));
              }
            } else {
              const val = value.hasOwnProperty(field.name) ? value[field.name] : field.default;
              result[field.name] = rawToValue(app, field, val);
            }
          }
        }

        return result;
      }

    case 'asset':
      if (value instanceof Asset) {
        return value;
      } else if (typeof value === 'number') {
        return app.assets.get(value) || null;
      } else if (typeof value === 'string') {
        return app.assets.get(parseInt(value, 10)) || null;
      }

      return null;

    case 'entity':
      if (value instanceof GraphNode) {
        return value;
      } else if (typeof value === 'string') {
        return app.getEntityFromIndex(value);
      }

      return null;

    case 'rgb':
    case 'rgba':
      if (value instanceof Color) {
        if (old instanceof Color) {
          old.copy(value);
          return old;
        }

        return value.clone();
      } else if (value instanceof Array && value.length >= 3 && value.length <= 4) {
        for (let i = 0; i < value.length; i++) {
          if (typeof value[i] !== 'number') return null;
        }

        if (!old) old = new Color();
        old.r = value[0];
        old.g = value[1];
        old.b = value[2];
        old.a = value.length === 3 ? 1 : value[3];
        return old;
      } else if (typeof value === 'string' && /#([0-9abcdef]{2}){3,4}/i.test(value)) {
        if (!old) old = new Color();
        old.fromString(value);
        return old;
      }

      return null;

    case 'vec2':
    case 'vec3':
    case 'vec4':
      {
        const len = parseInt(args.type.slice(3), 10);
        const vecType = vecLookup[len];

        if (value instanceof vecType) {
          if (old instanceof vecType) {
            old.copy(value);
            return old;
          }

          return value.clone();
        } else if (value instanceof Array && value.length === len) {
          for (let i = 0; i < value.length; i++) {
            if (typeof value[i] !== 'number') return null;
          }

          if (!old) old = new vecType();

          for (let i = 0; i < len; i++) old[components[i]] = value[i];

          return old;
        }

        return null;
      }

    case 'curve':
      if (value) {
        let curve;

        if (value instanceof Curve$1 || value instanceof CurveSet$1) {
          curve = value.clone();
        } else {
          const CurveType = value.keys[0] instanceof Array ? CurveSet$1 : Curve$1;
          curve = new CurveType(value.keys);
          curve.type = value.type;
        }

        return curve;
      }

      break;
  }

  return value;
}

class ScriptAttributes {
  constructor(scriptType) {
    this.scriptType = scriptType;
    this.index = {};
  }

  add(name, args) {
    if (this.index[name]) {
      return;
    } else if (ScriptAttributes.reservedNames.has(name)) {
      return;
    }

    this.index[name] = args;
    Object.defineProperty(this.scriptType.prototype, name, {
      get: function () {
        return this.__attributes[name];
      },
      set: function (raw) {
        const evt = 'attr';
        const evtName = 'attr:' + name;
        const old = this.__attributes[name];
        let oldCopy = old;

        if (old && args.type !== 'json' && old.clone) {
          if (this._callbacks[evt] || this._callbacks[evtName]) {
            oldCopy = old.clone();
          }
        }

        if (args.array) {
          this.__attributes[name] = [];

          if (raw) {
            for (let i = 0, len = raw.length; i < len; i++) {
              this.__attributes[name].push(rawToValue(this.app, args, raw[i], old ? old[i] : null));
            }
          }
        } else {
          this.__attributes[name] = rawToValue(this.app, args, raw, old);
        }

        this.fire(evt, name, this.__attributes[name], oldCopy);
        this.fire(evtName, this.__attributes[name], oldCopy);
      }
    });
  }

  remove(name) {
    if (!this.index[name]) return false;
    delete this.index[name];
    delete this.scriptType.prototype[name];
    return true;
  }

  has(name) {
    return !!this.index[name];
  }

  get(name) {
    return this.index[name] || null;
  }

}

ScriptAttributes.reservedNames = new Set(['app', 'entity', 'enabled', '_enabled', '_enabledOld', '_destroyed', '__attributes', '__attributesRaw', '__scriptType', '__executionOrder', '_callbacks', 'has', 'get', 'on', 'off', 'fire', 'once', 'hasEvent']);

class Component extends EventHandler {
  constructor(system, entity) {
    super();
    this.system = void 0;
    this.entity = void 0;
    this.system = system;
    this.entity = entity;

    if (this.system.schema && !this._accessorsBuilt) {
      this.buildAccessors(this.system.schema);
    }

    this.on('set', function (name, oldValue, newValue) {
      this.fire('set_' + name, name, oldValue, newValue);
    });
    this.on('set_enabled', this.onSetEnabled, this);
  }

  static _buildAccessors(obj, schema) {
    schema.forEach(function (descriptor) {
      const name = typeof descriptor === 'object' ? descriptor.name : descriptor;
      Object.defineProperty(obj, name, {
        get: function () {
          return this.data[name];
        },
        set: function (value) {
          const data = this.data;
          const oldValue = data[name];
          data[name] = value;
          this.fire('set', name, oldValue, value);
        },
        configurable: true
      });
    });
    obj._accessorsBuilt = true;
  }

  buildAccessors(schema) {
    Component._buildAccessors(this, schema);
  }

  onSetEnabled(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.entity.enabled) {
        if (newValue) {
          this.onEnable();
        } else {
          this.onDisable();
        }
      }
    }
  }

  onEnable() {}

  onDisable() {}

  onPostStateChange() {}

  get data() {
    const record = this.system.store[this.entity.getGuid()];
    return record ? record.data : null;
  }

}

class ScriptComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._scripts = [];
    this._updateList = new SortedLoopArray({
      sortBy: '__executionOrder'
    });
    this._postUpdateList = new SortedLoopArray({
      sortBy: '__executionOrder'
    });
    this._scriptsIndex = {};
    this._destroyedScripts = [];
    this._destroyed = false;
    this._scriptsData = null;
    this._oldState = true;
    this._enabled = true;
    this._beingEnabled = false;
    this._isLoopingThroughScripts = false;
    this._executionOrder = -1;
    this.on('set_enabled', this._onSetEnabled, this);
  }

  set scripts(value) {
    this._scriptsData = value;

    for (const key in value) {
      if (!value.hasOwnProperty(key)) continue;
      const script = this._scriptsIndex[key];

      if (script) {
        if (typeof value[key].enabled === 'boolean') script.enabled = !!value[key].enabled;

        if (typeof value[key].attributes === 'object') {
          for (const attr in value[key].attributes) {
            if (ScriptAttributes.reservedNames.has(attr)) continue;

            if (!script.__attributes.hasOwnProperty(attr)) {
              const scriptType = this.system.app.scripts.get(key);
              if (scriptType) scriptType.attributes.add(attr, {});
            }

            script[attr] = value[key].attributes[attr];
          }
        }
      } else {
        console.log(this.order);
      }
    }
  }

  get scripts() {
    return this._scripts;
  }

  set enabled(value) {
    const oldValue = this._enabled;
    this._enabled = value;
    this.fire('set', 'enabled', oldValue, value);
  }

  get enabled() {
    return this._enabled;
  }

  onEnable() {
    this._beingEnabled = true;

    this._checkState();

    if (!this.entity._beingEnabled) {
      this.onPostStateChange();
    }

    this._beingEnabled = false;
  }

  onDisable() {
    this._checkState();
  }

  onPostStateChange() {
    const wasLooping = this._beginLooping();

    for (let i = 0, len = this.scripts.length; i < len; i++) {
      const script = this.scripts[i];

      if (script._initialized && !script._postInitialized && script.enabled) {
        script._postInitialized = true;
        if (script.postInitialize) this._scriptMethod(script, ScriptComponent.scriptMethods.postInitialize);
      }
    }

    this._endLooping(wasLooping);
  }

  _beginLooping() {
    const looping = this._isLoopingThroughScripts;
    this._isLoopingThroughScripts = true;
    return looping;
  }

  _endLooping(wasLoopingBefore) {
    this._isLoopingThroughScripts = wasLoopingBefore;

    if (!this._isLoopingThroughScripts) {
      this._removeDestroyedScripts();
    }
  }

  _onSetEnabled(prop, old, value) {
    this._beingEnabled = true;

    this._checkState();

    this._beingEnabled = false;
  }

  _checkState() {
    const state = this.enabled && this.entity.enabled;
    if (state === this._oldState) return;
    this._oldState = state;
    this.fire(state ? 'enable' : 'disable');
    this.fire('state', state);

    if (state) {
      this.system._addComponentToEnabled(this);
    } else {
      this.system._removeComponentFromEnabled(this);
    }

    const wasLooping = this._beginLooping();

    for (let i = 0, len = this.scripts.length; i < len; i++) {
      const script = this.scripts[i];
      script.enabled = script._enabled;
    }

    this._endLooping(wasLooping);
  }

  _onBeforeRemove() {
    this.fire('remove');

    const wasLooping = this._beginLooping();

    for (let i = 0; i < this.scripts.length; i++) {
      const script = this.scripts[i];
      if (!script) continue;
      this.destroy(script.__scriptType.__name);
    }

    this._endLooping(wasLooping);
  }

  _removeDestroyedScripts() {
    const len = this._destroyedScripts.length;
    if (!len) return;

    for (let i = 0; i < len; i++) {
      const script = this._destroyedScripts[i];

      this._removeScriptInstance(script);
    }

    this._destroyedScripts.length = 0;

    this._resetExecutionOrder(0, this._scripts.length);
  }

  _onInitializeAttributes() {
    for (let i = 0, len = this.scripts.length; i < len; i++) this.scripts[i].__initializeAttributes();
  }

  _scriptMethod(script, method, arg) {
    script[method](arg);
  }

  _onInitialize() {
    const scripts = this._scripts;

    const wasLooping = this._beginLooping();

    for (let i = 0, len = scripts.length; i < len; i++) {
      const script = scripts[i];

      if (!script._initialized && script.enabled) {
        script._initialized = true;
        if (script.initialize) this._scriptMethod(script, ScriptComponent.scriptMethods.initialize);
      }
    }

    this._endLooping(wasLooping);
  }

  _onPostInitialize() {
    this.onPostStateChange();
  }

  _onUpdate(dt) {
    const list = this._updateList;
    if (!list.length) return;

    const wasLooping = this._beginLooping();

    for (list.loopIndex = 0; list.loopIndex < list.length; list.loopIndex++) {
      const script = list.items[list.loopIndex];

      if (script.enabled) {
        this._scriptMethod(script, ScriptComponent.scriptMethods.update, dt);
      }
    }

    this._endLooping(wasLooping);
  }

  _onPostUpdate(dt) {
    const list = this._postUpdateList;
    if (!list.length) return;

    const wasLooping = this._beginLooping();

    for (list.loopIndex = 0; list.loopIndex < list.length; list.loopIndex++) {
      const script = list.items[list.loopIndex];

      if (script.enabled) {
        this._scriptMethod(script, ScriptComponent.scriptMethods.postUpdate, dt);
      }
    }

    this._endLooping(wasLooping);
  }

  _insertScriptInstance(scriptInstance, index, scriptsLength) {
    if (index === -1) {
      this._scripts.push(scriptInstance);

      scriptInstance.__executionOrder = scriptsLength;

      if (scriptInstance.update) {
        this._updateList.append(scriptInstance);
      }

      if (scriptInstance.postUpdate) {
        this._postUpdateList.append(scriptInstance);
      }
    } else {
      this._scripts.splice(index, 0, scriptInstance);

      scriptInstance.__executionOrder = index;

      this._resetExecutionOrder(index + 1, scriptsLength + 1);

      if (scriptInstance.update) {
        this._updateList.insert(scriptInstance);
      }

      if (scriptInstance.postUpdate) {
        this._postUpdateList.insert(scriptInstance);
      }
    }
  }

  _removeScriptInstance(scriptInstance) {
    const idx = this._scripts.indexOf(scriptInstance);

    if (idx === -1) return idx;

    this._scripts.splice(idx, 1);

    if (scriptInstance.update) {
      this._updateList.remove(scriptInstance);
    }

    if (scriptInstance.postUpdate) {
      this._postUpdateList.remove(scriptInstance);
    }

    return idx;
  }

  _resetExecutionOrder(startIndex, scriptsLength) {
    for (let i = startIndex; i < scriptsLength; i++) {
      this._scripts[i].__executionOrder = i;
    }
  }

  _resolveEntityScriptAttribute(attribute, attributeName, oldValue, useGuid, newAttributes, duplicatedIdsMap) {
    if (attribute.array) {
      const len = oldValue.length;

      if (!len) {
        return;
      }

      const newGuidArray = oldValue.slice();

      for (let i = 0; i < len; i++) {
        const guid = newGuidArray[i] instanceof Entity ? newGuidArray[i].getGuid() : newGuidArray[i];

        if (duplicatedIdsMap[guid]) {
          newGuidArray[i] = useGuid ? duplicatedIdsMap[guid].getGuid() : duplicatedIdsMap[guid];
        }
      }

      newAttributes[attributeName] = newGuidArray;
    } else {
      if (oldValue instanceof Entity) {
        oldValue = oldValue.getGuid();
      } else if (typeof oldValue !== 'string') {
        return;
      }

      if (duplicatedIdsMap[oldValue]) {
        newAttributes[attributeName] = duplicatedIdsMap[oldValue];
      }
    }
  }

  has(nameOrType) {
    if (typeof nameOrType === 'string') {
      return !!this._scriptsIndex[nameOrType];
    }

    if (!nameOrType) return false;
    const scriptType = nameOrType;
    const scriptName = scriptType.__name;
    const scriptData = this._scriptsIndex[scriptName];
    const scriptInstance = scriptData && scriptData.instance;
    return scriptInstance instanceof scriptType;
  }

  get(nameOrType) {
    if (typeof nameOrType === 'string') {
      const data = this._scriptsIndex[nameOrType];
      return data ? data.instance : null;
    }

    if (!nameOrType) return null;
    const scriptType = nameOrType;
    const scriptName = scriptType.__name;
    const scriptData = this._scriptsIndex[scriptName];
    const scriptInstance = scriptData && scriptData.instance;
    return scriptInstance instanceof scriptType ? scriptInstance : null;
  }

  create(nameOrType, args = {}) {
    const self = this;
    let scriptType = nameOrType;
    let scriptName = nameOrType;

    if (typeof scriptType === 'string') {
      scriptType = this.system.app.scripts.get(scriptType);
    } else if (scriptType) {
      scriptName = scriptType.__name;
    }

    if (scriptType) {
      if (!this._scriptsIndex[scriptName] || !this._scriptsIndex[scriptName].instance) {
        const scriptInstance = new scriptType({
          app: this.system.app,
          entity: this.entity,
          enabled: args.hasOwnProperty('enabled') ? args.enabled : true,
          attributes: args.attributes
        });
        const len = this._scripts.length;
        let ind = -1;
        if (typeof args.ind === 'number' && args.ind !== -1 && len > args.ind) ind = args.ind;

        this._insertScriptInstance(scriptInstance, ind, len);

        this._scriptsIndex[scriptName] = {
          instance: scriptInstance,
          onSwap: function () {
            self.swap(scriptName);
          }
        };
        this[scriptName] = scriptInstance;
        if (!args.preloading) scriptInstance.__initializeAttributes();
        this.fire('create', scriptName, scriptInstance);
        this.fire('create:' + scriptName, scriptInstance);
        this.system.app.scripts.on('swap:' + scriptName, this._scriptsIndex[scriptName].onSwap);

        if (!args.preloading) {
          if (scriptInstance.enabled && !scriptInstance._initialized) {
            scriptInstance._initialized = true;
            if (scriptInstance.initialize) this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.initialize);
          }

          if (scriptInstance.enabled && !scriptInstance._postInitialized) {
            scriptInstance._postInitialized = true;
            if (scriptInstance.postInitialize) this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.postInitialize);
          }
        }

        return scriptInstance;
      }
    } else {
      this._scriptsIndex[scriptName] = {
        awaiting: true,
        ind: this._scripts.length
      };
    }

    return null;
  }

  destroy(nameOrType) {
    let scriptName = nameOrType;
    let scriptType = nameOrType;

    if (typeof scriptType === 'string') {
      scriptType = this.system.app.scripts.get(scriptType);
    } else if (scriptType) {
      scriptName = scriptType.__name;
    }

    const scriptData = this._scriptsIndex[scriptName];
    delete this._scriptsIndex[scriptName];
    if (!scriptData) return false;
    const scriptInstance = scriptData.instance;

    if (scriptInstance && !scriptInstance._destroyed) {
      scriptInstance.enabled = false;
      scriptInstance._destroyed = true;

      if (!this._isLoopingThroughScripts) {
        const ind = this._removeScriptInstance(scriptInstance);

        if (ind >= 0) {
          this._resetExecutionOrder(ind, this._scripts.length);
        }
      } else {
        this._destroyedScripts.push(scriptInstance);
      }
    }

    this.system.app.scripts.off('swap:' + scriptName, scriptData.onSwap);
    delete this[scriptName];
    this.fire('destroy', scriptName, scriptInstance || null);
    this.fire('destroy:' + scriptName, scriptInstance || null);
    if (scriptInstance) scriptInstance.fire('destroy');
    return true;
  }

  swap(nameOrType) {
    let scriptName = nameOrType;
    let scriptType = nameOrType;

    if (typeof scriptType === 'string') {
      scriptType = this.system.app.scripts.get(scriptType);
    } else if (scriptType) {
      scriptName = scriptType.__name;
    }

    const old = this._scriptsIndex[scriptName];
    if (!old || !old.instance) return false;
    const scriptInstanceOld = old.instance;

    const ind = this._scripts.indexOf(scriptInstanceOld);

    const scriptInstance = new scriptType({
      app: this.system.app,
      entity: this.entity,
      enabled: scriptInstanceOld.enabled,
      attributes: scriptInstanceOld.__attributes
    });
    if (!scriptInstance.swap) return false;

    scriptInstance.__initializeAttributes();

    this._scripts[ind] = scriptInstance;
    this._scriptsIndex[scriptName].instance = scriptInstance;
    this[scriptName] = scriptInstance;
    scriptInstance.__executionOrder = ind;

    if (scriptInstanceOld.update) {
      this._updateList.remove(scriptInstanceOld);
    }

    if (scriptInstanceOld.postUpdate) {
      this._postUpdateList.remove(scriptInstanceOld);
    }

    if (scriptInstance.update) {
      this._updateList.insert(scriptInstance);
    }

    if (scriptInstance.postUpdate) {
      this._postUpdateList.insert(scriptInstance);
    }

    this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.swap, scriptInstanceOld);

    this.fire('swap', scriptName, scriptInstance);
    this.fire('swap:' + scriptName, scriptInstance);
    return true;
  }

  resolveDuplicatedEntityReferenceProperties(oldScriptComponent, duplicatedIdsMap) {
    const newScriptComponent = this.entity.script;

    for (const scriptName in oldScriptComponent._scriptsIndex) {
      const scriptType = this.system.app.scripts.get(scriptName);

      if (!scriptType) {
        continue;
      }

      const script = oldScriptComponent._scriptsIndex[scriptName];

      if (!script || !script.instance) {
        continue;
      }

      const newAttributesRaw = newScriptComponent[scriptName].__attributesRaw;
      const newAttributes = newScriptComponent[scriptName].__attributes;

      if (!newAttributesRaw && !newAttributes) {
        continue;
      }

      const useGuid = !!newAttributesRaw;
      const oldAttributes = script.instance.__attributes;

      for (const attributeName in oldAttributes) {
        if (!oldAttributes[attributeName]) {
          continue;
        }

        const attribute = scriptType.attributes.get(attributeName);

        if (!attribute) {
          continue;
        }

        if (attribute.type === 'entity') {
          this._resolveEntityScriptAttribute(attribute, attributeName, oldAttributes[attributeName], useGuid, newAttributesRaw || newAttributes, duplicatedIdsMap);
        } else if (attribute.type === 'json' && Array.isArray(attribute.schema)) {
          const oldValue = oldAttributes[attributeName];
          const newJsonValue = newAttributesRaw ? newAttributesRaw[attributeName] : newAttributes[attributeName];

          for (let i = 0; i < attribute.schema.length; i++) {
            const field = attribute.schema[i];

            if (field.type !== 'entity') {
              continue;
            }

            if (attribute.array) {
              for (let j = 0; j < oldValue.length; j++) {
                this._resolveEntityScriptAttribute(field, field.name, oldValue[j][field.name], useGuid, newJsonValue[j], duplicatedIdsMap);
              }
            } else {
              this._resolveEntityScriptAttribute(field, field.name, oldValue[field.name], useGuid, newJsonValue, duplicatedIdsMap);
            }
          }
        }
      }
    }
  }

  move(nameOrType, ind) {
    const len = this._scripts.length;
    if (ind >= len || ind < 0) return false;
    let scriptType = nameOrType;
    let scriptName = nameOrType;

    if (typeof scriptName !== 'string') {
      scriptName = nameOrType.__name;
    } else {
      scriptType = null;
    }

    const scriptData = this._scriptsIndex[scriptName];
    if (!scriptData || !scriptData.instance) return false;
    const scriptInstance = scriptData.instance;
    if (scriptType && !(scriptInstance instanceof scriptType)) return false;

    const indOld = this._scripts.indexOf(scriptInstance);

    if (indOld === -1 || indOld === ind) return false;

    this._scripts.splice(ind, 0, this._scripts.splice(indOld, 1)[0]);

    this._resetExecutionOrder(0, len);

    this._updateList.sort();

    this._postUpdateList.sort();

    this.fire('move', scriptName, scriptInstance, ind, indOld);
    this.fire('move:' + scriptName, scriptInstance, ind, indOld);
    return true;
  }

}

ScriptComponent.scriptMethods = {
  initialize: 'initialize',
  postInitialize: 'postInitialize',
  update: 'update',
  postUpdate: 'postUpdate',
  swap: 'swap'
};

const funcNameRegex = new RegExp('^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^\\(\\s\\/]*)\\s*');

class ScriptType extends EventHandler {
  constructor(args) {
    super();
    this.app = void 0;
    this.entity = void 0;
    this._enabled = void 0;
    this._enabledOld = void 0;
    this._initialized = void 0;
    this._postInitialized = void 0;
    this.__destroyed = void 0;
    this.__attributes = void 0;
    this.__attributesRaw = void 0;
    this.__scriptType = void 0;
    this.__executionOrder = void 0;
    this.initScriptType(args);
  }

  set enabled(value) {
    this._enabled = !!value;
    if (this.enabled === this._enabledOld) return;
    this._enabledOld = this.enabled;
    this.fire(this.enabled ? 'enable' : 'disable');
    this.fire('state', this.enabled);

    if (!this._initialized && this.enabled) {
      this._initialized = true;

      this.__initializeAttributes(true);

      if (this.initialize) this.entity.script._scriptMethod(this, ScriptComponent.scriptMethods.initialize);
    }

    if (this._initialized && !this._postInitialized && this.enabled && !this.entity.script._beingEnabled) {
      this._postInitialized = true;
      if (this.postInitialize) this.entity.script._scriptMethod(this, ScriptComponent.scriptMethods.postInitialize);
    }
  }

  get enabled() {
    return this._enabled && !this._destroyed && this.entity.script.enabled && this.entity.enabled;
  }

  initScriptType(args) {
    const script = this.constructor;
    this.app = args.app;
    this.entity = args.entity;
    this._enabled = typeof args.enabled === 'boolean' ? args.enabled : true;
    this._enabledOld = this.enabled;
    this.__destroyed = false;
    this.__attributes = {};
    this.__attributesRaw = args.attributes || {};
    this.__scriptType = script;
    this.__executionOrder = -1;
  }

  static __getScriptName(constructorFn) {
    if (typeof constructorFn !== 'function') return undefined;
    if ('name' in Function.prototype) return constructorFn.name;
    if (constructorFn === Function || constructorFn === Function.prototype.constructor) return 'Function';
    const match = ('' + constructorFn).match(funcNameRegex);
    return match ? match[1] : undefined;
  }

  static get scriptName() {
    return this.__name;
  }

  static get attributes() {
    if (!this.hasOwnProperty('__attributes')) this.__attributes = new ScriptAttributes(this);
    return this.__attributes;
  }

  __initializeAttributes(force) {
    if (!force && !this.__attributesRaw) return;

    for (const key in this.__scriptType.attributes.index) {
      if (this.__attributesRaw && this.__attributesRaw.hasOwnProperty(key)) {
        this[key] = this.__attributesRaw[key];
      } else if (!this.__attributes.hasOwnProperty(key)) {
        if (this.__scriptType.attributes.index[key].hasOwnProperty('default')) {
          this[key] = this.__scriptType.attributes.index[key].default;
        } else {
          this[key] = null;
        }
      }
    }

    this.__attributesRaw = null;
  }

  static extend(methods) {
    for (const key in methods) {
      if (!methods.hasOwnProperty(key)) continue;
      this.prototype[key] = methods[key];
    }
  }

}

ScriptType.__name = null;

class ScriptRegistry extends EventHandler {
  constructor(app) {
    super();
    this.app = app;
    this._scripts = {};
    this._list = [];
  }

  destroy() {
    this.app = null;
    this.off();
  }

  add(script) {
    const scriptName = script.__name;

    if (this._scripts.hasOwnProperty(scriptName)) {
      setTimeout(() => {
        if (script.prototype.swap) {
          const old = this._scripts[scriptName];

          const ind = this._list.indexOf(old);

          this._list[ind] = script;
          this._scripts[scriptName] = script;
          this.fire('swap', scriptName, script);
          this.fire('swap:' + scriptName, script);
        } else {
          console.warn(`script registry already has '${scriptName}' script, define 'swap' method for new script type to enable code hot swapping`);
        }
      });
      return false;
    }

    this._scripts[scriptName] = script;

    this._list.push(script);

    this.fire('add', scriptName, script);
    this.fire('add:' + scriptName, script);
    setTimeout(() => {
      if (!this._scripts.hasOwnProperty(scriptName)) return;

      if (!this.app || !this.app.systems || !this.app.systems.script) {
        return;
      }

      const components = this.app.systems.script._components;
      let attributes;
      const scriptInstances = [];
      const scriptInstancesInitialized = [];

      for (components.loopIndex = 0; components.loopIndex < components.length; components.loopIndex++) {
        const component = components.items[components.loopIndex];

        if (component._scriptsIndex[scriptName] && component._scriptsIndex[scriptName].awaiting) {
          if (component._scriptsData && component._scriptsData[scriptName]) attributes = component._scriptsData[scriptName].attributes;
          const scriptInstance = component.create(scriptName, {
            preloading: true,
            ind: component._scriptsIndex[scriptName].ind,
            attributes: attributes
          });
          if (scriptInstance) scriptInstances.push(scriptInstance);
        }
      }

      for (let i = 0; i < scriptInstances.length; i++) scriptInstances[i].__initializeAttributes();

      for (let i = 0; i < scriptInstances.length; i++) {
        if (scriptInstances[i].enabled) {
          scriptInstances[i]._initialized = true;
          scriptInstancesInitialized.push(scriptInstances[i]);
          if (scriptInstances[i].initialize) scriptInstances[i].initialize();
        }
      }

      for (let i = 0; i < scriptInstancesInitialized.length; i++) {
        if (!scriptInstancesInitialized[i].enabled || scriptInstancesInitialized[i]._postInitialized) {
          continue;
        }

        scriptInstancesInitialized[i]._postInitialized = true;
        if (scriptInstancesInitialized[i].postInitialize) scriptInstancesInitialized[i].postInitialize();
      }
    });
    return true;
  }

  remove(nameOrType) {
    let scriptType = nameOrType;
    let scriptName = nameOrType;

    if (typeof scriptName !== 'string') {
      scriptName = scriptType.__name;
    } else {
      scriptType = this.get(scriptName);
    }

    if (this.get(scriptName) !== scriptType) return false;
    delete this._scripts[scriptName];

    const ind = this._list.indexOf(scriptType);

    this._list.splice(ind, 1);

    this.fire('remove', scriptName, scriptType);
    this.fire('remove:' + scriptName, scriptType);
    return true;
  }

  get(name) {
    return this._scripts[name] || null;
  }

  has(nameOrType) {
    if (typeof nameOrType === 'string') {
      return this._scripts.hasOwnProperty(nameOrType);
    }

    if (!nameOrType) return false;
    const scriptName = nameOrType.__name;
    return this._scripts[scriptName] === nameOrType;
  }

  list() {
    return this._list;
  }

}

class I18nParser {
  _validate(data) {
    if (!data.header) {
      throw new Error('pc.I18n#addData: Missing "header" field');
    }

    if (!data.header.version) {
      throw new Error('pc.I18n#addData: Missing "header.version" field');
    }

    if (data.header.version !== 1) {
      throw new Error('pc.I18n#addData: Invalid "header.version" field');
    }

    if (!data.data) {
      throw new Error('pc.I18n#addData: Missing "data" field');
    } else if (!Array.isArray(data.data)) {
      throw new Error('pc.I18n#addData: "data" field must be an array');
    }

    for (let i = 0, len = data.data.length; i < len; i++) {
      const entry = data.data[i];

      if (!entry.info) {
        throw new Error(`pc.I18n#addData: missing "data[${i}].info" field`);
      }

      if (!entry.info.locale) {
        throw new Error(`pc.I18n#addData: missing "data[${i}].info.locale" field`);
      }

      if (typeof entry.info.locale !== 'string') {
        throw new Error(`pc.I18n#addData: "data[${i}].info.locale" must be a string`);
      }

      if (!entry.messages) {
        throw new Error(`pc.I18n#addData: missing "data[${i}].messages" field`);
      }
    }
  }

  parse(data) {
    return data.data;
  }

}

class I18n extends EventHandler {
  constructor(app) {
    super();
    this.locale = DEFAULT_LOCALE;
    this._translations = {};
    this._availableLangs = {};
    this._app = app;
    this._assets = [];
    this._parser = new I18nParser();
  }

  set assets(value) {
    const index = {};

    for (let _i = 0, len = value.length; _i < len; _i++) {
      const id = value[_i] instanceof Asset ? value[_i].id : value[_i];
      index[id] = true;
    }

    let i = this._assets.length;

    while (i--) {
      const id = this._assets[i];

      if (!index[id]) {
        this._app.assets.off('add:' + id, this._onAssetAdd, this);

        const asset = this._app.assets.get(id);

        if (asset) {
          this._onAssetRemove(asset);
        }

        this._assets.splice(i, 1);
      }
    }

    for (const id in index) {
      const idNum = parseInt(id, 10);
      if (this._assets.indexOf(idNum) !== -1) continue;

      this._assets.push(idNum);

      const asset = this._app.assets.get(idNum);

      if (!asset) {
        this._app.assets.once('add:' + idNum, this._onAssetAdd, this);
      } else {
        this._onAssetAdd(asset);
      }
    }
  }

  get assets() {
    return this._assets;
  }

  set locale(value) {
    if (this._locale === value) {
      return;
    }

    let lang = getLang(value);

    if (lang === 'in') {
      lang = 'id';
      value = replaceLang(value, lang);

      if (this._locale === value) {
        return;
      }
    }

    const old = this._locale;
    this._locale = value;
    this._lang = lang;
    this._pluralFn = getPluralFn(this._lang);
    this.fire('set:locale', value, old);
  }

  get locale() {
    return this._locale;
  }

  static findAvailableLocale(desiredLocale, availableLocales) {
    return findAvailableLocale(desiredLocale, availableLocales);
  }

  findAvailableLocale(desiredLocale) {
    if (this._translations[desiredLocale]) {
      return desiredLocale;
    }

    const lang = getLang(desiredLocale);
    return this._findFallbackLocale(desiredLocale, lang);
  }

  getText(key, locale) {
    let result = key;
    let lang;

    if (!locale) {
      locale = this._locale;
      lang = this._lang;
    }

    let translations = this._translations[locale];

    if (!translations) {
      if (!lang) {
        lang = getLang(locale);
      }

      locale = this._findFallbackLocale(locale, lang);
      translations = this._translations[locale];
    }

    if (translations && translations.hasOwnProperty(key)) {
      result = translations[key];

      if (Array.isArray(result)) {
        result = result[0];
      }

      if (result === null || result === undefined) {
        result = key;
      }
    }

    return result;
  }

  getPluralText(key, n, locale) {
    let result = key;
    let lang;
    let pluralFn;

    if (!locale) {
      locale = this._locale;
      lang = this._lang;
      pluralFn = this._pluralFn;
    } else {
      lang = getLang(locale);
      pluralFn = getPluralFn(lang);
    }

    let translations = this._translations[locale];

    if (!translations) {
      locale = this._findFallbackLocale(locale, lang);
      lang = getLang(locale);
      pluralFn = getPluralFn(lang);
      translations = this._translations[locale];
    }

    if (translations && translations[key] && pluralFn) {
      const index = pluralFn(n);
      result = translations[key][index];

      if (result === null || result === undefined) {
        result = key;
      }
    }

    return result;
  }

  addData(data) {
    let parsed;

    try {
      parsed = this._parser.parse(data);
    } catch (err) {
      console.error(err);
      return;
    }

    for (let i = 0, len = parsed.length; i < len; i++) {
      const entry = parsed[i];
      const locale = entry.info.locale;
      const messages = entry.messages;

      if (!this._translations[locale]) {
        this._translations[locale] = {};
        const lang = getLang(locale);

        if (!this._availableLangs[lang]) {
          this._availableLangs[lang] = locale;
        }
      }

      Object.assign(this._translations[locale], messages);
      this.fire('data:add', locale, messages);
    }
  }

  removeData(data) {
    let parsed;

    try {
      parsed = this._parser.parse(data);
    } catch (err) {
      console.error(err);
      return;
    }

    for (let i = 0, len = parsed.length; i < len; i++) {
      const entry = parsed[i];
      const locale = entry.info.locale;
      const translations = this._translations[locale];
      if (!translations) continue;
      const messages = entry.messages;

      for (const key in messages) {
        delete translations[key];
      }

      if (Object.keys(translations).length === 0) {
        delete this._translations[locale];
        delete this._availableLangs[getLang(locale)];
      }

      this.fire('data:remove', locale, messages);
    }
  }

  destroy() {
    this._translations = null;
    this._availableLangs = null;
    this._assets = null;
    this._parser = null;
    this.off();
  }

  _findFallbackLocale(locale, lang) {
    let result = DEFAULT_LOCALE_FALLBACKS[locale];

    if (result && this._translations[result]) {
      return result;
    }

    result = DEFAULT_LOCALE_FALLBACKS[lang];

    if (result && this._translations[result]) {
      return result;
    }

    result = this._availableLangs[lang];

    if (result && this._translations[result]) {
      return result;
    }

    return DEFAULT_LOCALE;
  }

  _onAssetAdd(asset) {
    asset.on('load', this._onAssetLoad, this);
    asset.on('change', this._onAssetChange, this);
    asset.on('remove', this._onAssetRemove, this);
    asset.on('unload', this._onAssetUnload, this);

    if (asset.resource) {
      this._onAssetLoad(asset);
    }
  }

  _onAssetLoad(asset) {
    this.addData(asset.resource);
  }

  _onAssetChange(asset) {
    if (asset.resource) {
      this.addData(asset.resource);
    }
  }

  _onAssetRemove(asset) {
    asset.off('load', this._onAssetLoad, this);
    asset.off('change', this._onAssetChange, this);
    asset.off('remove', this._onAssetRemove, this);
    asset.off('unload', this._onAssetUnload, this);

    if (asset.resource) {
      this.removeData(asset.resource);
    }

    this._app.assets.once('add:' + asset.id, this._onAssetAdd, this);
  }

  _onAssetUnload(asset) {
    if (asset.resource) {
      this.removeData(asset.resource);
    }
  }

}

class ComponentSystemRegistry extends EventHandler {
  constructor() {
    super();
    this.anim = void 0;
    this.animation = void 0;
    this.audiolistener = void 0;
    this.audiosource = void 0;
    this.button = void 0;
    this.camera = void 0;
    this.collision = void 0;
    this.element = void 0;
    this.joint = void 0;
    this.layoutchild = void 0;
    this.layoutgroup = void 0;
    this.light = void 0;
    this.model = void 0;
    this.particlesystem = void 0;
    this.render = void 0;
    this.rigidbody = void 0;
    this.screen = void 0;
    this.script = void 0;
    this.scrollbar = void 0;
    this.scrollview = void 0;
    this.sound = void 0;
    this.sprite = void 0;
    this.zone = void 0;
    this.list = [];
  }

  add(system) {
    const id = system.id;

    if (this[id]) {
      throw new Error(`ComponentSystem name '${id}' already registered or not allowed`);
    }

    this[id] = system;
    this.list.push(system);
  }

  remove(system) {
    const id = system.id;

    if (!this[id]) {
      throw new Error(`No ComponentSystem named '${id}' registered`);
    }

    delete this[id];
    const index = this.list.indexOf(this[id]);

    if (index !== -1) {
      this.list.splice(index, 1);
    }
  }

  destroy() {
    this.off();

    for (let i = 0; i < this.list.length; i++) {
      this.list[i].destroy();
    }
  }

}

class ApplicationStats {
  constructor(device) {
    this.frame = {
      fps: 0,
      ms: 0,
      dt: 0,
      updateStart: 0,
      updateTime: 0,
      renderStart: 0,
      renderTime: 0,
      physicsStart: 0,
      physicsTime: 0,
      cullTime: 0,
      sortTime: 0,
      skinTime: 0,
      morphTime: 0,
      instancingTime: 0,
      triangles: 0,
      otherPrimitives: 0,
      shaders: 0,
      materials: 0,
      cameras: 0,
      shadowMapUpdates: 0,
      shadowMapTime: 0,
      depthMapTime: 0,
      forwardTime: 0,
      lightClustersTime: 0,
      lightClusters: 0,
      _timeToCountFrames: 0,
      _fpsAccum: 0
    };
    this.drawCalls = {
      forward: 0,
      depth: 0,
      shadow: 0,
      immediate: 0,
      misc: 0,
      total: 0,
      skinned: 0,
      instanced: 0,
      removedByInstancing: 0
    };
    this.misc = {
      renderTargetCreationTime: 0
    };
    this.particles = {
      updatesPerFrame: 0,
      _updatesPerFrame: 0,
      frameTime: 0,
      _frameTime: 0
    };
    this.shaders = device._shaderStats;
    this.vram = device._vram;
    Object.defineProperty(this.vram, 'totalUsed', {
      get: function () {
        return this.tex + this.vb + this.ib;
      }
    });
    Object.defineProperty(this.vram, 'geom', {
      get: function () {
        return this.vb + this.ib;
      }
    });
  }

  get scene() {
    return getApplication().scene._stats;
  }

  get lightmapper() {
    var _getApplication$light;

    return (_getApplication$light = getApplication().lightmapper) == null ? void 0 : _getApplication$light.stats;
  }

  get batcher() {
    const batcher = getApplication()._batcher;

    return batcher ? batcher._stats : null;
  }

}

class SceneRegistryItem {
  constructor(name, url) {
    this.name = name;
    this.url = url;
    this.data = null;
    this._loading = false;
    this._onLoadedCallbacks = [];
  }

  get loaded() {
    return !!this.data;
  }

  get loading() {
    return this._loading;
  }

}

class SceneRegistry {
  constructor(app) {
    this._app = app;
    this._list = [];
    this._index = {};
    this._urlIndex = {};
  }

  destroy() {
    this._app = null;
  }

  list() {
    return this._list;
  }

  add(name, url) {
    if (this._index.hasOwnProperty(name)) {
      return false;
    }

    const item = new SceneRegistryItem(name, url);

    const i = this._list.push(item);

    this._index[item.name] = i - 1;
    this._urlIndex[item.url] = i - 1;
    return true;
  }

  find(name) {
    if (this._index.hasOwnProperty(name)) {
      return this._list[this._index[name]];
    }

    return null;
  }

  findByUrl(url) {
    if (this._urlIndex.hasOwnProperty(url)) {
      return this._list[this._urlIndex[url]];
    }

    return null;
  }

  remove(name) {
    if (this._index.hasOwnProperty(name)) {
      const idx = this._index[name];
      let item = this._list[idx];
      delete this._urlIndex[item.url];
      delete this._index[name];

      this._list.splice(idx, 1);

      for (let i = 0; i < this._list.length; i++) {
        item = this._list[i];
        this._index[item.name] = i;
        this._urlIndex[item.url] = i;
      }
    }
  }

  _loadSceneData(sceneItem, storeInCache, callback) {
    const app = this._app;
    let url = sceneItem;

    if (typeof sceneItem === 'string') {
      sceneItem = this.findByUrl(url) || this.find(url) || new SceneRegistryItem('Untitled', url);
    }

    url = sceneItem.url;

    if (!url) {
      callback("Cannot find scene to load");
      return;
    }

    if (sceneItem.loaded) {
      callback(null, sceneItem);
      return;
    }

    if (app.assets && app.assets.prefix && !ABSOLUTE_URL.test(url)) {
      url = path.join(app.assets.prefix, url);
    }

    sceneItem._onLoadedCallbacks.push(callback);

    if (!sceneItem._loading) {
      const handler = app.loader.getHandler("hierarchy");
      handler.load(url, (err, data) => {
        sceneItem.data = data;
        sceneItem._loading = false;

        for (let i = 0; i < sceneItem._onLoadedCallbacks.length; i++) {
          sceneItem._onLoadedCallbacks[i](err, sceneItem);
        }

        if (!storeInCache) {
          sceneItem.data = null;
        }

        sceneItem._onLoadedCallbacks.length = 0;
      });
    }

    sceneItem._loading = true;
  }

  loadSceneData(sceneItem, callback) {
    this._loadSceneData(sceneItem, true, callback);
  }

  unloadSceneData(sceneItem) {
    if (typeof sceneItem === 'string') {
      sceneItem = this.findByUrl(sceneItem);
    }

    if (sceneItem) {
      sceneItem.data = null;
    }
  }

  _loadSceneHierarchy(sceneItem, onBeforeAddHierarchy, callback) {
    this._loadSceneData(sceneItem, false, (err, sceneItem) => {
      if (err) {
        if (callback) {
          callback(err);
        }

        return;
      }

      if (onBeforeAddHierarchy) {
        onBeforeAddHierarchy(sceneItem);
      }

      const app = this._app;

      const _loaded = () => {
        const handler = app.loader.getHandler("hierarchy");
        app.systems.script.preloading = true;
        const entity = handler.open(sceneItem.url, sceneItem.data);
        app.systems.script.preloading = false;
        app.loader.clearCache(sceneItem.url, "hierarchy");
        app.root.addChild(entity);
        app.systems.fire('initialize', entity);
        app.systems.fire('postInitialize', entity);
        app.systems.fire('postPostInitialize', entity);
        if (callback) callback(null, entity);
      };

      app._preloadScripts(sceneItem.data, _loaded);
    });
  }

  loadSceneHierarchy(sceneItem, callback) {
    this._loadSceneHierarchy(sceneItem, null, callback);
  }

  loadSceneSettings(sceneItem, callback) {
    this._loadSceneData(sceneItem, false, (err, sceneItem) => {
      if (!err) {
        this._app.applySceneSettings(sceneItem.data.settings);

        if (callback) {
          callback(null);
        }
      } else {
        if (callback) {
          callback(err);
        }
      }
    });
  }

  changeScene(sceneItem, callback) {
    const app = this._app;

    const onBeforeAddHierarchy = sceneItem => {
      const rootChildren = app.root.children;

      while (rootChildren.length > 0) {
        const child = rootChildren[0];
        child.reparent(null);
        child.destroy == null ? void 0 : child.destroy();
      }

      app.applySceneSettings(sceneItem.data.settings);
    };

    this._loadSceneHierarchy(sceneItem, onBeforeAddHierarchy, callback);
  }

  loadScene(url, callback) {
    const app = this._app;
    const handler = app.loader.getHandler("scene");

    if (app.assets && app.assets.prefix && !ABSOLUTE_URL.test(url)) {
      url = path.join(app.assets.prefix, url);
    }

    handler.load(url, (err, data) => {
      if (!err) {
        const _loaded = () => {
          app.systems.script.preloading = true;
          const scene = handler.open(url, data);
          const sceneItem = this.findByUrl(url);

          if (sceneItem && !sceneItem.loaded) {
            sceneItem.data = data;
          }

          app.systems.script.preloading = false;
          app.loader.clearCache(url, "scene");
          app.loader.patch({
            resource: scene,
            type: "scene"
          }, app.assets);
          app.root.addChild(scene.root);

          if (app.systems.rigidbody && typeof Ammo !== 'undefined') {
            app.systems.rigidbody.gravity.set(scene._gravity.x, scene._gravity.y, scene._gravity.z);
          }

          if (callback) {
            callback(null, scene);
          }
        };

        app._preloadScripts(data, _loaded);
      } else {
        if (callback) {
          callback(err);
        }
      }
    });
  }

}

const _depthUniformNames = ['uSceneDepthMap', 'uDepthMap'];
const _colorUniformNames = ['uSceneColorMap', 'texture_grabPass'];

class SceneGrab {
  constructor(application) {
    this.application = application;
    this.device = application.graphicsDevice;
    this.layer = null;
    this.colorFormat = this.device.defaultFramebufferAlpha ? PIXELFORMAT_R8_G8_B8_A8 : PIXELFORMAT_R8_G8_B8;

    if (this.device.webgl2) {
      this.initWebGl2();
    } else {
      this.initWebGl1();
    }
  }

  setupUniform(device, depth, buffer) {
    const names = depth ? _depthUniformNames : _colorUniformNames;
    names.forEach(name => device.scope.resolve(name).setValue(buffer));
  }

  allocateTexture(device, source, name, format, isDepth, mipmaps) {
    return new Texture(device, {
      name,
      format,
      width: source ? source.colorBuffer.width : device.width,
      height: source ? source.colorBuffer.height : device.height,
      mipmaps,
      minFilter: isDepth ? FILTER_NEAREST : mipmaps ? FILTER_LINEAR_MIPMAP_LINEAR : FILTER_LINEAR,
      magFilter: isDepth ? FILTER_NEAREST : FILTER_LINEAR,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE
    });
  }

  resizeCondition(target, source, device) {
    const width = (source == null ? void 0 : source.width) || device.width;
    const height = (source == null ? void 0 : source.height) || device.height;
    return !target || width !== target.width || height !== target.height;
  }

  allocateRenderTarget(renderTarget, sourceRenderTarget, device, format, isDepth, mipmaps, isDepthUniforms) {
    const names = isDepthUniforms ? _depthUniformNames : _colorUniformNames;
    const buffer = this.allocateTexture(device, sourceRenderTarget, names[0], format, isDepth, mipmaps);

    if (renderTarget) {
      renderTarget.destroyFrameBuffers();

      if (isDepth) {
        renderTarget._depthBuffer = buffer;
      } else {
        renderTarget._colorBuffer = buffer;
      }
    } else {
      renderTarget = new RenderTarget({
        name: 'renderTargetSceneGrab',
        colorBuffer: isDepth ? null : buffer,
        depthBuffer: isDepth ? buffer : null,
        depth: !isDepth,
        stencil: device.supportsStencil,
        autoResolve: false
      });
    }

    return renderTarget;
  }

  releaseRenderTarget(rt) {
    if (rt) {
      rt.destroyTextureBuffers();
      rt.destroy();
    }
  }

  initWebGl2() {
    const app = this.application;
    const self = this;
    this.layer = new Layer({
      enabled: false,
      name: "Depth",
      id: LAYERID_DEPTH,
      onDisable: function () {
        self.releaseRenderTarget(this.depthRenderTarget);
        this.depthRenderTarget = null;
        self.releaseRenderTarget(this.colorRenderTarget);
        this.colorRenderTarget = null;
      },
      onPreRenderOpaque: function (cameraPass) {
        const device = app.graphicsDevice;
        const camera = this.cameras[cameraPass];

        if (camera.renderSceneColorMap) {
          var _camera$renderTarget;

          if (self.resizeCondition(this.colorRenderTarget, (_camera$renderTarget = camera.renderTarget) == null ? void 0 : _camera$renderTarget.colorBuffer, device)) {
            self.releaseRenderTarget(this.colorRenderTarget);
            this.colorRenderTarget = self.allocateRenderTarget(this.colorRenderTarget, camera.renderTarget, device, this.colorFormat, false, true, false);
          }

          device.copyRenderTarget(device.renderTarget, this.colorRenderTarget, true, false);
          device.activeTexture(device.maxCombinedTextures - 1);
          const colorBuffer = this.colorRenderTarget.colorBuffer;
          device.bindTexture(colorBuffer);
          device.gl.generateMipmap(colorBuffer.impl._glTarget);
          self.setupUniform(device, false, colorBuffer);
        }

        if (camera.renderSceneDepthMap) {
          var _camera$renderTarget2;

          if (self.resizeCondition(this.depthRenderTarget, (_camera$renderTarget2 = camera.renderTarget) == null ? void 0 : _camera$renderTarget2.depthBuffer, device)) {
            self.releaseRenderTarget(this.depthRenderTarget);
            this.depthRenderTarget = self.allocateRenderTarget(this.depthRenderTarget, camera.renderTarget, device, PIXELFORMAT_DEPTHSTENCIL, true, false, true);
          }

          device.copyRenderTarget(device.renderTarget, this.depthRenderTarget, false, true);
          self.setupUniform(device, true, this.depthRenderTarget.depthBuffer);
        }
      },
      onPostRenderOpaque: function (cameraPass) {}
    });
  }

  initWebGl1() {
    const app = this.application;
    const self = this;
    this.layer = new Layer({
      enabled: false,
      name: "Depth",
      id: LAYERID_DEPTH,
      shaderPass: SHADER_DEPTH,
      onEnable: function () {
        this.depthRenderTarget = new RenderTarget({
          name: 'depthRenderTarget-webgl1',
          depth: true,
          stencil: app.graphicsDevice.supportsStencil,
          autoResolve: false,
          graphicsDevice: app.graphicsDevice
        });
        this.renderTarget = this.depthRenderTarget;
      },
      onDisable: function () {
        this.depthRenderTarget.destroyTextureBuffers();
        this.renderTarget = null;
        self.releaseRenderTarget(this.colorRenderTarget);
        this.colorRenderTarget = null;
      },
      onPostCull: function (cameraPass) {
        const device = app.graphicsDevice;
        const camera = this.cameras[cameraPass];

        if (camera.renderSceneDepthMap) {
          var _camera$renderTarget3;

          if (self.resizeCondition(this.depthRenderTarget, (_camera$renderTarget3 = camera.renderTarget) == null ? void 0 : _camera$renderTarget3.depthBuffer, device)) {
            this.depthRenderTarget.destroyTextureBuffers();
            this.depthRenderTarget = self.allocateRenderTarget(this.depthRenderTarget, camera.renderTarget, device, PIXELFORMAT_R8_G8_B8_A8, false, false, true);
          }

          const visibleObjects = this.instances.visibleOpaque[cameraPass];
          const visibleList = visibleObjects.list;
          const layerComposition = app.scene.layers;
          const subLayerEnabled = layerComposition.subLayerEnabled;
          const isTransparent = layerComposition.subLayerList;
          const rt = app.scene.layers.getLayerById(LAYERID_WORLD).renderTarget;
          const cam = this.cameras[cameraPass];
          let visibleLength = 0;
          const layers = layerComposition.layerList;

          for (let i = 0; i < layers.length; i++) {
            const layer = layers[i];
            if (layer === this) break;
            if (layer.renderTarget !== rt || !layer.enabled || !subLayerEnabled[i]) continue;
            const layerCamId = layer.cameras.indexOf(cam);
            if (layerCamId < 0) continue;
            const transparent = isTransparent[i];
            let layerVisibleList = transparent ? layer.instances.visibleTransparent[layerCamId] : layer.instances.visibleOpaque[layerCamId];
            const layerVisibleListLength = layerVisibleList.length;
            layerVisibleList = layerVisibleList.list;

            for (let j = 0; j < layerVisibleListLength; j++) {
              const drawCall = layerVisibleList[j];

              if (drawCall.material && drawCall.material.depthWrite && !drawCall._noDepthDrawGl1) {
                visibleList[visibleLength] = drawCall;
                visibleLength++;
              }
            }
          }

          visibleObjects.length = visibleLength;
        }
      },
      onPreRenderOpaque: function (cameraPass) {
        const device = app.graphicsDevice;
        const camera = this.cameras[cameraPass];

        if (camera.renderSceneColorMap) {
          var _camera$renderTarget4;

          if (self.resizeCondition(this.colorRenderTarget, (_camera$renderTarget4 = camera.renderTarget) == null ? void 0 : _camera$renderTarget4.colorBuffer, device)) {
            self.releaseRenderTarget(this.colorRenderTarget);
            this.colorRenderTarget = self.allocateRenderTarget(this.colorRenderTarget, camera.renderTarget, device, this.colorFormat, false, false, false);
          }

          const colorBuffer = this.colorRenderTarget._colorBuffer;

          if (!colorBuffer.impl._glTexture) {
            colorBuffer.impl.initialize(device, colorBuffer);
          }

          device.bindTexture(colorBuffer);
          const gl = device.gl;
          gl.copyTexImage2D(gl.TEXTURE_2D, 0, colorBuffer.impl._glFormat, 0, 0, colorBuffer.width, colorBuffer.height, 0);
          colorBuffer._needsUpload = false;
          colorBuffer._needsMipmapsUpload = false;
          self.setupUniform(device, false, colorBuffer);
        }

        if (camera.renderSceneDepthMap) {
          self.setupUniform(device, true, this.depthRenderTarget.colorBuffer);
        }
      },
      onDrawCall: function () {
        app.graphicsDevice.setColorWrite(true, true, true, true);
      },
      onPostRenderOpaque: function (cameraPass) {
        const camera = this.cameras[cameraPass];

        if (camera.renderSceneDepthMap) {
          const visibleObjects = this.instances.visibleOpaque[cameraPass];
          visibleObjects.length = 0;
        }
      }
    });
  }

  patch(layer) {
    layer.onEnable = this.layer.onEnable;
    layer.onDisable = this.layer.onDisable;
    layer.onPreRenderOpaque = this.layer.onPreRenderOpaque;
    layer.onPostRenderOpaque = this.layer.onPostRenderOpaque;
    layer.shaderPass = this.layer.shaderPass;
    layer.onPostCull = this.layer.onPostCull;
    layer.onDrawCall = this.layer.onDrawCall;
  }

}

const FILLMODE_NONE = 'NONE';
const FILLMODE_FILL_WINDOW = 'FILL_WINDOW';
const FILLMODE_KEEP_ASPECT = 'KEEP_ASPECT';
const RESOLUTION_AUTO = 'AUTO';
const RESOLUTION_FIXED = 'FIXED';

class Progress$2 {
  constructor(length) {
    this.length = length;
    this.count = 0;
  }

  inc() {
    this.count++;
  }

  done() {
    return this.count === this.length;
  }

}

let app = null;

class AppBase extends EventHandler {
  constructor(canvas) {
    super();
    AppBase._applications[canvas.id] = this;
    setApplication(this);
    app = this;
    this._destroyRequested = false;
    this._inFrameUpdate = false;
    this._time = 0;
    this.timeScale = 1;
    this.maxDeltaTime = 0.1;
    this.frame = 0;
    this.autoRender = true;
    this.renderNextFrame = false;
    this.useLegacyScriptAttributeCloning = script.legacy;
    this._librariesLoaded = false;
    this._fillMode = FILLMODE_KEEP_ASPECT;
    this._resolutionMode = RESOLUTION_FIXED;
    this._allowResize = true;
    this.context = this;
  }

  init(appOptions) {
    const device = appOptions.graphicsDevice;
    this.graphicsDevice = device;

    this._initDefaultMaterial();

    this.stats = new ApplicationStats(device);
    this._soundManager = appOptions.soundManager;
    this.loader = new ResourceLoader(this);
    LightsBuffer.init(device);
    this._entityIndex = {};
    this.scene = new Scene(device);

    this._registerSceneImmediate(this.scene);

    this.root = new Entity();
    this.root._enabledInHierarchy = true;
    this.assets = new AssetRegistry(this.loader);
    if (appOptions.assetPrefix) this.assets.prefix = appOptions.assetPrefix;
    this.bundles = new BundleRegistry(this.assets);
    this.enableBundles = typeof TextDecoder !== 'undefined';
    this.scriptsOrder = appOptions.scriptsOrder || [];
    this.scripts = new ScriptRegistry(this);
    this.i18n = new I18n(this);
    this.scenes = new SceneRegistry(this);
    const self = this;
    this.defaultLayerWorld = new Layer({
      name: "World",
      id: LAYERID_WORLD
    });
    this.sceneGrab = new SceneGrab(this);
    this.defaultLayerDepth = this.sceneGrab.layer;
    this.defaultLayerSkybox = new Layer({
      enabled: true,
      name: "Skybox",
      id: LAYERID_SKYBOX,
      opaqueSortMode: SORTMODE_NONE
    });
    this.defaultLayerUi = new Layer({
      enabled: true,
      name: "UI",
      id: LAYERID_UI,
      transparentSortMode: SORTMODE_MANUAL,
      passThrough: false
    });
    this.defaultLayerImmediate = new Layer({
      enabled: true,
      name: "Immediate",
      id: LAYERID_IMMEDIATE,
      opaqueSortMode: SORTMODE_NONE,
      passThrough: true
    });
    const defaultLayerComposition = new LayerComposition("default");
    defaultLayerComposition.pushOpaque(this.defaultLayerWorld);
    defaultLayerComposition.pushOpaque(this.defaultLayerDepth);
    defaultLayerComposition.pushOpaque(this.defaultLayerSkybox);
    defaultLayerComposition.pushTransparent(this.defaultLayerWorld);
    defaultLayerComposition.pushOpaque(this.defaultLayerImmediate);
    defaultLayerComposition.pushTransparent(this.defaultLayerImmediate);
    defaultLayerComposition.pushTransparent(this.defaultLayerUi);
    this.scene.layers = defaultLayerComposition;
    this.scene.on('set:layers', function (oldComp, newComp) {
      const list = newComp.layerList;
      let layer;

      for (let i = 0; i < list.length; i++) {
        layer = list[i];

        switch (layer.id) {
          case LAYERID_DEPTH:
            self.sceneGrab.patch(layer);
            break;

          case LAYERID_UI:
            layer.passThrough = self.defaultLayerUi.passThrough;
            break;

          case LAYERID_IMMEDIATE:
            layer.passThrough = self.defaultLayerImmediate.passThrough;
            break;
        }
      }
    });
    AreaLightLuts.createPlaceholder(device);
    this.renderer = new ForwardRenderer(device);
    this.renderer.scene = this.scene;
    this.frameGraph = new FrameGraph();
    this.lightmapper = null;

    if (appOptions.lightmapper) {
      this.lightmapper = new appOptions.lightmapper(device, this.root, this.scene, this.renderer, this.assets);
      this.once('prerender', this._firstBake, this);
    }

    this._batcher = null;

    if (appOptions.batchManager) {
      this._batcher = new appOptions.batchManager(device, this.root, this.scene);
      this.once('prerender', this._firstBatch, this);
    }

    this.keyboard = appOptions.keyboard || null;
    this.mouse = appOptions.mouse || null;
    this.touch = appOptions.touch || null;
    this.gamepads = appOptions.gamepads || null;
    this.elementInput = appOptions.elementInput || null;
    if (this.elementInput) this.elementInput.app = this;
    this.xr = appOptions.xr ? new appOptions.xr(this) : null;
    if (this.elementInput) this.elementInput.attachSelectEvents();
    this._inTools = false;
    this._skyboxAsset = null;
    this._scriptPrefix = appOptions.scriptPrefix || '';

    if (this.enableBundles) {
      this.loader.addHandler("bundle", new BundleHandler(this));
    }

    appOptions.resourceHandlers.forEach(resourceHandler => {
      const handler = new resourceHandler(this);
      this.loader.addHandler(handler.handlerType, handler);
    });
    this.systems = new ComponentSystemRegistry();
    appOptions.componentSystems.forEach(componentSystem => {
      this.systems.add(new componentSystem(this));
    });
    this._visibilityChangeHandler = this.onVisibilityChange.bind(this);

    if (typeof document !== 'undefined') {
      if (document.hidden !== undefined) {
        this._hiddenAttr = 'hidden';
        document.addEventListener('visibilitychange', this._visibilityChangeHandler, false);
      } else if (document.mozHidden !== undefined) {
        this._hiddenAttr = 'mozHidden';
        document.addEventListener('mozvisibilitychange', this._visibilityChangeHandler, false);
      } else if (document.msHidden !== undefined) {
        this._hiddenAttr = 'msHidden';
        document.addEventListener('msvisibilitychange', this._visibilityChangeHandler, false);
      } else if (document.webkitHidden !== undefined) {
        this._hiddenAttr = 'webkitHidden';
        document.addEventListener('webkitvisibilitychange', this._visibilityChangeHandler, false);
      }
    }

    this.tick = makeTick(this);
  }

  static getApplication(id) {
    return id ? AppBase._applications[id] : getApplication();
  }

  _initDefaultMaterial() {
    const material = new StandardMaterial();
    material.name = "Default Material";
    material.shadingModel = SPECULAR_BLINN;
    setDefaultMaterial(this.graphicsDevice, material);
  }

  get soundManager() {
    return this._soundManager;
  }

  get batcher() {
    return this._batcher;
  }

  get fillMode() {
    return this._fillMode;
  }

  get resolutionMode() {
    return this._resolutionMode;
  }

  configure(url, callback) {
    http.get(url, (err, response) => {
      if (err) {
        callback(err);
        return;
      }

      const props = response.application_properties;
      const scenes = response.scenes;
      const assets = response.assets;

      this._parseApplicationProperties(props, err => {
        this._parseScenes(scenes);

        this._parseAssets(assets);

        if (!err) {
          callback(null);
        } else {
          callback(err);
        }
      });
    });
  }

  preload(callback) {
    this.fire("preload:start");
    const assets = this.assets.list({
      preload: true
    });
    const progress = new Progress$2(assets.length);
    let _done = false;

    const done = () => {
      if (!this.graphicsDevice) {
        return;
      }

      if (!_done && progress.done()) {
        _done = true;
        this.fire("preload:end");
        callback();
      }
    };

    const total = assets.length;

    if (progress.length) {
      const onAssetLoad = asset => {
        progress.inc();
        this.fire('preload:progress', progress.count / total);
        if (progress.done()) done();
      };

      const onAssetError = (err, asset) => {
        progress.inc();
        this.fire('preload:progress', progress.count / total);
        if (progress.done()) done();
      };

      for (let i = 0; i < assets.length; i++) {
        if (!assets[i].loaded) {
          assets[i].once('load', onAssetLoad);
          assets[i].once('error', onAssetError);
          this.assets.load(assets[i]);
        } else {
          progress.inc();
          this.fire("preload:progress", progress.count / total);
          if (progress.done()) done();
        }
      }
    } else {
      done();
    }
  }

  _preloadScripts(sceneData, callback) {
    if (!script.legacy) {
      callback();
      return;
    }

    this.systems.script.preloading = true;

    const scripts = this._getScriptReferences(sceneData);

    const l = scripts.length;
    const progress = new Progress$2(l);
    const regex = /^http(s)?:\/\//;

    if (l) {
      const onLoad = (err, ScriptType) => {
        if (err) console.error(err);
        progress.inc();

        if (progress.done()) {
          this.systems.script.preloading = false;
          callback();
        }
      };

      for (let i = 0; i < l; i++) {
        let scriptUrl = scripts[i];
        if (!regex.test(scriptUrl.toLowerCase()) && this._scriptPrefix) scriptUrl = path.join(this._scriptPrefix, scripts[i]);
        this.loader.load(scriptUrl, 'script', onLoad);
      }
    } else {
      this.systems.script.preloading = false;
      callback();
    }
  }

  _parseApplicationProperties(props, callback) {
    if (typeof props.maxAssetRetries === 'number' && props.maxAssetRetries > 0) {
      this.loader.enableRetry(props.maxAssetRetries);
    }

    if (!props.useDevicePixelRatio) props.useDevicePixelRatio = props.use_device_pixel_ratio;
    if (!props.resolutionMode) props.resolutionMode = props.resolution_mode;
    if (!props.fillMode) props.fillMode = props.fill_mode;
    this._width = props.width;
    this._height = props.height;

    if (props.useDevicePixelRatio) {
      this.graphicsDevice.maxPixelRatio = window.devicePixelRatio;
    }

    this.setCanvasResolution(props.resolutionMode, this._width, this._height);
    this.setCanvasFillMode(props.fillMode, this._width, this._height);

    if (props.layers && props.layerOrder) {
      const composition = new LayerComposition("application");
      const layers = {};

      for (const key in props.layers) {
        const data = props.layers[key];
        data.id = parseInt(key, 10);
        data.enabled = data.id !== LAYERID_DEPTH;
        layers[key] = new Layer(data);
      }

      for (let i = 0, len = props.layerOrder.length; i < len; i++) {
        const sublayer = props.layerOrder[i];
        const layer = layers[sublayer.layer];
        if (!layer) continue;

        if (sublayer.transparent) {
          composition.pushTransparent(layer);
        } else {
          composition.pushOpaque(layer);
        }

        composition.subLayerEnabled[i] = sublayer.enabled;
      }

      this.scene.layers = composition;
    }

    if (props.batchGroups) {
      const batcher = this.batcher;

      if (batcher) {
        for (let i = 0, len = props.batchGroups.length; i < len; i++) {
          const grp = props.batchGroups[i];
          batcher.addGroup(grp.name, grp.dynamic, grp.maxAabbSize, grp.id, grp.layers);
        }
      }
    }

    if (props.i18nAssets) {
      this.i18n.assets = props.i18nAssets;
    }

    this._loadLibraries(props.libraries, callback);
  }

  _loadLibraries(urls, callback) {
    const len = urls.length;
    let count = len;
    const regex = /^http(s)?:\/\//;

    if (len) {
      const onLoad = (err, script) => {
        count--;

        if (err) {
          callback(err);
        } else if (count === 0) {
          this.onLibrariesLoaded();
          callback(null);
        }
      };

      for (let i = 0; i < len; ++i) {
        let url = urls[i];
        if (!regex.test(url.toLowerCase()) && this._scriptPrefix) url = path.join(this._scriptPrefix, url);
        this.loader.load(url, 'script', onLoad);
      }
    } else {
      this.onLibrariesLoaded();
      callback(null);
    }
  }

  _parseScenes(scenes) {
    if (!scenes) return;

    for (let i = 0; i < scenes.length; i++) {
      this.scenes.add(scenes[i].name, scenes[i].url);
    }
  }

  _parseAssets(assets) {
    const list = [];
    const scriptsIndex = {};
    const bundlesIndex = {};

    if (!script.legacy) {
      for (let i = 0; i < this.scriptsOrder.length; i++) {
        const id = this.scriptsOrder[i];
        if (!assets[id]) continue;
        scriptsIndex[id] = true;
        list.push(assets[id]);
      }

      if (this.enableBundles) {
        for (const id in assets) {
          if (assets[id].type === 'bundle') {
            bundlesIndex[id] = true;
            list.push(assets[id]);
          }
        }
      }

      for (const id in assets) {
        if (scriptsIndex[id] || bundlesIndex[id]) continue;
        list.push(assets[id]);
      }
    } else {
      if (this.enableBundles) {
        for (const id in assets) {
          if (assets[id].type === 'bundle') {
            bundlesIndex[id] = true;
            list.push(assets[id]);
          }
        }
      }

      for (const id in assets) {
        if (bundlesIndex[id]) continue;
        list.push(assets[id]);
      }
    }

    for (let i = 0; i < list.length; i++) {
      const data = list[i];
      const asset = new Asset(data.name, data.type, data.file, data.data);
      asset.id = parseInt(data.id, 10);
      asset.preload = data.preload ? data.preload : false;
      asset.loaded = data.type === 'script' && data.data && data.data.loadingType > 0;
      asset.tags.add(data.tags);

      if (data.i18n) {
        for (const locale in data.i18n) {
          asset.addLocalizedAssetId(locale, data.i18n[locale]);
        }
      }

      this.assets.add(asset);
    }
  }

  _getScriptReferences(scene) {
    let priorityScripts = [];

    if (scene.settings.priority_scripts) {
      priorityScripts = scene.settings.priority_scripts;
    }

    const _scripts = [];
    const _index = {};

    for (let i = 0; i < priorityScripts.length; i++) {
      _scripts.push(priorityScripts[i]);

      _index[priorityScripts[i]] = true;
    }

    const entities = scene.entities;

    for (const key in entities) {
      if (!entities[key].components.script) {
        continue;
      }

      const scripts = entities[key].components.script.scripts;

      for (let i = 0; i < scripts.length; i++) {
        if (_index[scripts[i].url]) continue;

        _scripts.push(scripts[i].url);

        _index[scripts[i].url] = true;
      }
    }

    return _scripts;
  }

  start() {
    this.frame = 0;
    this.fire("start", {
      timestamp: now(),
      target: this
    });

    if (!this._librariesLoaded) {
      this.onLibrariesLoaded();
    }

    this.systems.fire('initialize', this.root);
    this.fire('initialize');
    this.systems.fire('postInitialize', this.root);
    this.systems.fire('postPostInitialize', this.root);
    this.fire('postinitialize');
    this.tick();
  }

  inputUpdate(dt) {
    if (this.controller) {
      this.controller.update(dt);
    }

    if (this.mouse) {
      this.mouse.update();
    }

    if (this.keyboard) {
      this.keyboard.update();
    }

    if (this.gamepads) {
      this.gamepads.update();
    }
  }

  update(dt) {
    this.frame++;
    this.graphicsDevice.updateClientRect();
    if (script.legacy) this.systems.fire('fixedUpdate', 1.0 / 60.0);
    this.systems.fire(this._inTools ? 'toolsUpdate' : 'update', dt);
    this.systems.fire('animationUpdate', dt);
    this.systems.fire('postUpdate', dt);
    this.fire("update", dt);
    this.inputUpdate(dt);
  }

  render() {
    this.fire('prerender');
    this.root.syncHierarchy();

    if (this._batcher) {
      this._batcher.updateAll();
    }

    this.renderComposition(this.scene.layers);
    this.fire('postrender');
  }

  renderComposition(layerComposition) {
    this.renderer.buildFrameGraph(this.frameGraph, layerComposition);
    this.frameGraph.render();
  }

  _fillFrameStatsBasic(now, dt, ms) {
    const stats = this.stats.frame;
    stats.dt = dt;
    stats.ms = ms;

    if (now > stats._timeToCountFrames) {
      stats.fps = stats._fpsAccum;
      stats._fpsAccum = 0;
      stats._timeToCountFrames = now + 1000;
    } else {
      stats._fpsAccum++;
    }

    this.stats.drawCalls.total = this.graphicsDevice._drawCallsPerFrame;
    this.graphicsDevice._drawCallsPerFrame = 0;
  }

  _fillFrameStats() {
    let stats = this.stats.frame;
    stats.cameras = this.renderer._camerasRendered;
    stats.materials = this.renderer._materialSwitches;
    stats.shaders = this.graphicsDevice._shaderSwitchesPerFrame;
    stats.shadowMapUpdates = this.renderer._shadowMapUpdates;
    stats.shadowMapTime = this.renderer._shadowMapTime;
    stats.depthMapTime = this.renderer._depthMapTime;
    stats.forwardTime = this.renderer._forwardTime;
    const prims = this.graphicsDevice._primsPerFrame;
    stats.triangles = prims[PRIMITIVE_TRIANGLES] / 3 + Math.max(prims[PRIMITIVE_TRISTRIP] - 2, 0) + Math.max(prims[PRIMITIVE_TRIFAN] - 2, 0);
    stats.cullTime = this.renderer._cullTime;
    stats.sortTime = this.renderer._sortTime;
    stats.skinTime = this.renderer._skinTime;
    stats.morphTime = this.renderer._morphTime;
    stats.lightClusters = this.renderer._lightClusters;
    stats.lightClustersTime = this.renderer._lightClustersTime;
    stats.otherPrimitives = 0;

    for (let i = 0; i < prims.length; i++) {
      if (i < PRIMITIVE_TRIANGLES) {
        stats.otherPrimitives += prims[i];
      }

      prims[i] = 0;
    }

    this.renderer._camerasRendered = 0;
    this.renderer._materialSwitches = 0;
    this.renderer._shadowMapUpdates = 0;
    this.graphicsDevice._shaderSwitchesPerFrame = 0;
    this.renderer._cullTime = 0;
    this.renderer._layerCompositionUpdateTime = 0;
    this.renderer._lightClustersTime = 0;
    this.renderer._sortTime = 0;
    this.renderer._skinTime = 0;
    this.renderer._morphTime = 0;
    this.renderer._shadowMapTime = 0;
    this.renderer._depthMapTime = 0;
    this.renderer._forwardTime = 0;
    stats = this.stats.drawCalls;
    stats.forward = this.renderer._forwardDrawCalls;
    stats.culled = this.renderer._numDrawCallsCulled;
    stats.depth = 0;
    stats.shadow = this.renderer._shadowDrawCalls;
    stats.skinned = this.renderer._skinDrawCalls;
    stats.immediate = 0;
    stats.instanced = 0;
    stats.removedByInstancing = 0;
    stats.misc = stats.total - (stats.forward + stats.shadow);
    this.renderer._depthDrawCalls = 0;
    this.renderer._shadowDrawCalls = 0;
    this.renderer._forwardDrawCalls = 0;
    this.renderer._numDrawCallsCulled = 0;
    this.renderer._skinDrawCalls = 0;
    this.renderer._immediateRendered = 0;
    this.renderer._instancedDrawCalls = 0;
    this.stats.misc.renderTargetCreationTime = this.graphicsDevice.renderTargetCreationTime;
    stats = this.stats.particles;
    stats.updatesPerFrame = stats._updatesPerFrame;
    stats.frameTime = stats._frameTime;
    stats._updatesPerFrame = 0;
    stats._frameTime = 0;
  }

  setCanvasFillMode(mode, width, height) {
    this._fillMode = mode;
    this.resizeCanvas(width, height);
  }

  setCanvasResolution(mode, width, height) {
    this._resolutionMode = mode;

    if (mode === RESOLUTION_AUTO && width === undefined) {
      width = this.graphicsDevice.canvas.clientWidth;
      height = this.graphicsDevice.canvas.clientHeight;
    }

    this.graphicsDevice.resizeCanvas(width, height);
  }

  isHidden() {
    return document[this._hiddenAttr];
  }

  onVisibilityChange() {
    if (this.isHidden()) {
      if (this._soundManager) {
        this._soundManager.suspend();
      }
    } else {
      if (this._soundManager) {
        this._soundManager.resume();
      }
    }
  }

  resizeCanvas(width, height) {
    if (!this._allowResize) return undefined;
    if (this.xr && this.xr.session) return undefined;
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;

    if (this._fillMode === FILLMODE_KEEP_ASPECT) {
      const r = this.graphicsDevice.canvas.width / this.graphicsDevice.canvas.height;
      const winR = windowWidth / windowHeight;

      if (r > winR) {
        width = windowWidth;
        height = width / r;
      } else {
        height = windowHeight;
        width = height * r;
      }
    } else if (this._fillMode === FILLMODE_FILL_WINDOW) {
      width = windowWidth;
      height = windowHeight;
    }

    this.graphicsDevice.canvas.style.width = width + 'px';
    this.graphicsDevice.canvas.style.height = height + 'px';
    this.updateCanvasSize();
    return {
      width: width,
      height: height
    };
  }

  updateCanvasSize() {
    var _this$xr;

    if (!this._allowResize || (_this$xr = this.xr) != null && _this$xr.active) {
      return;
    }

    if (this._resolutionMode === RESOLUTION_AUTO) {
      const canvas = this.graphicsDevice.canvas;
      this.graphicsDevice.resizeCanvas(canvas.clientWidth, canvas.clientHeight);
    }
  }

  onLibrariesLoaded() {
    this._librariesLoaded = true;

    if (this.systems.rigidbody) {
      this.systems.rigidbody.onLibraryLoaded();
    }
  }

  applySceneSettings(settings) {
    let asset;

    if (this.systems.rigidbody && typeof Ammo !== 'undefined') {
      const gravity = settings.physics.gravity;
      this.systems.rigidbody.gravity.set(gravity[0], gravity[1], gravity[2]);
    }

    this.scene.applySettings(settings);

    if (settings.render.hasOwnProperty('skybox')) {
      if (settings.render.skybox) {
        asset = this.assets.get(settings.render.skybox);

        if (asset) {
          this.setSkybox(asset);
        } else {
          this.assets.once('add:' + settings.render.skybox, this.setSkybox, this);
        }
      } else {
        this.setSkybox(null);
      }
    }
  }

  setAreaLightLuts(ltcMat1, ltcMat2) {
    if (ltcMat1 && ltcMat2) {
      AreaLightLuts.set(this.graphicsDevice, ltcMat1, ltcMat2);
    }
  }

  setSkybox(asset) {
    if (asset !== this._skyboxAsset) {
      const onSkyboxRemoved = () => {
        this.setSkybox(null);
      };

      const onSkyboxChanged = () => {
        this.scene.setSkybox(this._skyboxAsset ? this._skyboxAsset.resources : null);
      };

      if (this._skyboxAsset) {
        this.assets.off('load:' + this._skyboxAsset.id, onSkyboxChanged, this);
        this.assets.off('remove:' + this._skyboxAsset.id, onSkyboxRemoved, this);

        this._skyboxAsset.off('change', onSkyboxChanged, this);
      }

      this._skyboxAsset = asset;

      if (this._skyboxAsset) {
        this.assets.on('load:' + this._skyboxAsset.id, onSkyboxChanged, this);
        this.assets.once('remove:' + this._skyboxAsset.id, onSkyboxRemoved, this);

        this._skyboxAsset.on('change', onSkyboxChanged, this);

        if (this.scene.skyboxMip === 0 && !this._skyboxAsset.loadFaces) {
          this._skyboxAsset.loadFaces = true;
        }

        this.assets.load(this._skyboxAsset);
      }

      onSkyboxChanged();
    }
  }

  _firstBake() {
    var _this$lightmapper;

    (_this$lightmapper = this.lightmapper) == null ? void 0 : _this$lightmapper.bake(null, this.scene.lightmapMode);
  }

  _firstBatch() {
    var _this$batcher;

    (_this$batcher = this.batcher) == null ? void 0 : _this$batcher.generate();
  }

  _processTimestamp(timestamp) {
    return timestamp;
  }

  drawLine(start, end, color, depthTest, layer) {
    this.scene.drawLine(start, end, color, depthTest, layer);
  }

  drawLines(positions, colors, depthTest = true, layer = this.scene.defaultDrawLayer) {
    this.scene.drawLines(positions, colors, depthTest, layer);
  }

  drawLineArrays(positions, colors, depthTest = true, layer = this.scene.defaultDrawLayer) {
    this.scene.drawLineArrays(positions, colors, depthTest, layer);
  }

  drawWireSphere(center, radius, color = Color.WHITE, segments = 20, depthTest = true, layer = this.scene.defaultDrawLayer) {
    this.scene.immediate.drawWireSphere(center, radius, color, segments, depthTest, layer);
  }

  drawWireAlignedBox(minPoint, maxPoint, color = Color.WHITE, depthTest = true, layer = this.scene.defaultDrawLayer) {
    this.scene.immediate.drawWireAlignedBox(minPoint, maxPoint, color, depthTest, layer);
  }

  drawMeshInstance(meshInstance, layer = this.scene.defaultDrawLayer) {
    this.scene.immediate.drawMesh(null, null, null, meshInstance, layer);
  }

  drawMesh(mesh, material, matrix, layer = this.scene.defaultDrawLayer) {
    this.scene.immediate.drawMesh(material, matrix, mesh, null, layer);
  }

  drawQuad(matrix, material, layer = this.scene.defaultDrawLayer) {
    this.scene.immediate.drawMesh(material, matrix, this.scene.immediate.getQuadMesh(), null, layer);
  }

  drawTexture(x, y, width, height, texture, material, layer = this.scene.defaultDrawLayer) {
    const matrix = new Mat4();
    matrix.setTRS(new Vec3(x, y, 0.0), Quat.IDENTITY, new Vec3(width, height, 0.0));

    if (!material) {
      material = new Material();
      material.setParameter("colorMap", texture);
      material.shader = this.scene.immediate.getTextureShader();
      material.update();
    }

    this.drawQuad(matrix, material, layer);
  }

  drawDepthTexture(x, y, width, height, layer = this.scene.defaultDrawLayer) {
    const material = new Material();
    material.shader = this.scene.immediate.getDepthTextureShader();
    material.update();
    this.drawTexture(x, y, width, height, null, material, layer);
  }

  destroy() {
    var _this$lightmapper2;

    if (this._inFrameUpdate) {
      this._destroyRequested = true;
      return;
    }

    const canvasId = this.graphicsDevice.canvas.id;
    this.off('librariesloaded');

    if (typeof document !== 'undefined') {
      document.removeEventListener('visibilitychange', this._visibilityChangeHandler, false);
      document.removeEventListener('mozvisibilitychange', this._visibilityChangeHandler, false);
      document.removeEventListener('msvisibilitychange', this._visibilityChangeHandler, false);
      document.removeEventListener('webkitvisibilitychange', this._visibilityChangeHandler, false);
    }

    this._visibilityChangeHandler = null;
    this.root.destroy();
    this.root = null;

    if (this.mouse) {
      this.mouse.off();
      this.mouse.detach();
      this.mouse = null;
    }

    if (this.keyboard) {
      this.keyboard.off();
      this.keyboard.detach();
      this.keyboard = null;
    }

    if (this.touch) {
      this.touch.off();
      this.touch.detach();
      this.touch = null;
    }

    if (this.elementInput) {
      this.elementInput.detach();
      this.elementInput = null;
    }

    if (this.controller) {
      this.controller = null;
    }

    this.systems.destroy();

    if (this.scene.layers) {
      this.scene.layers.destroy();
    }

    const assets = this.assets.list();

    for (let i = 0; i < assets.length; i++) {
      assets[i].unload();
      assets[i].off();
    }

    this.assets.off();
    this.bundles.destroy();
    this.bundles = null;
    this.i18n.destroy();
    this.i18n = null;

    for (const key in this.loader.getHandler('script')._cache) {
      const element = this.loader.getHandler('script')._cache[key];

      const parent = element.parentNode;
      if (parent) parent.removeChild(element);
    }

    this.loader.getHandler('script')._cache = {};
    this.loader.destroy();
    this.loader = null;
    this.scene.destroy();
    this.scene = null;
    this.systems = null;
    this.context = null;
    this.scripts.destroy();
    this.scripts = null;
    this.scenes.destroy();
    this.scenes = null;
    (_this$lightmapper2 = this.lightmapper) == null ? void 0 : _this$lightmapper2.destroy();
    this.lightmapper = null;

    if (this._batcher) {
      this._batcher.destroy();

      this._batcher = null;
    }

    this._entityIndex = {};
    this.defaultLayerDepth.onPreRenderOpaque = null;
    this.defaultLayerDepth.onPostRenderOpaque = null;
    this.defaultLayerDepth.onDisable = null;
    this.defaultLayerDepth.onEnable = null;
    this.defaultLayerDepth = null;
    this.defaultLayerWorld = null;
    this == null ? void 0 : this.xr.end();
    this == null ? void 0 : this.xr.destroy();
    this.renderer.destroy();
    this.renderer = null;
    this.graphicsDevice.destroy();
    this.graphicsDevice = null;
    this.tick = null;
    this.off();

    if (this._soundManager) {
      this._soundManager.destroy();

      this._soundManager = null;
    }

    script.app = null;
    AppBase._applications[canvasId] = null;

    if (getApplication() === this) {
      setApplication(null);
    }
  }

  getEntityFromIndex(guid) {
    return this._entityIndex[guid];
  }

  _registerSceneImmediate(scene) {
    this.on('postrender', scene.immediate.onPostRender, scene.immediate);
  }

}

AppBase._applications = {};
const _frameEndData = {};

const makeTick = function makeTick(_app) {
  const application = _app;
  let frameRequest;
  return function (timestamp, frame) {
    var _application$xr;

    if (!application.graphicsDevice) return;
    setApplication(application);

    if (frameRequest) {
      window.cancelAnimationFrame(frameRequest);
      frameRequest = null;
    }

    app = application;
    const currentTime = application._processTimestamp(timestamp) || now();
    const ms = currentTime - (application._time || currentTime);
    let dt = ms / 1000.0;
    dt = math$1.clamp(dt, 0, application.maxDeltaTime);
    dt *= application.timeScale;
    application._time = currentTime;

    if ((_application$xr = application.xr) != null && _application$xr.session) {
      frameRequest = application.xr.session.requestAnimationFrame(application.tick);
    } else {
      frameRequest = platform.browser ? window.requestAnimationFrame(application.tick) : null;
    }

    if (application.graphicsDevice.contextLost) return;

    application._fillFrameStatsBasic(currentTime, dt, ms);

    application._inFrameUpdate = true;
    application.fire("frameupdate", ms);
    let shouldRenderFrame = true;

    if (frame) {
      var _application$xr2;

      shouldRenderFrame = (_application$xr2 = application.xr) == null ? void 0 : _application$xr2.update(frame);
      application.graphicsDevice.defaultFramebuffer = frame.session.renderState.baseLayer.framebuffer;
    } else {
      application.graphicsDevice.defaultFramebuffer = null;
    }

    if (shouldRenderFrame) {
      application.update(dt);
      application.fire("framerender");

      if (application.autoRender || application.renderNextFrame) {
        application.updateCanvasSize();
        application.render();
        application.renderNextFrame = false;
      }

      _frameEndData.timestamp = now();
      _frameEndData.target = application;
      application.fire("frameend", _frameEndData);
    }

    application._inFrameUpdate = false;

    if (application._destroyRequested) {
      application.destroy();
    }
  };
};

const _enableList = [];

class Entity extends GraphNode {
  constructor(name, app) {
    super(name);
    this.anim = void 0;
    this.animation = void 0;
    this.audiolistener = void 0;
    this.button = void 0;
    this.camera = void 0;
    this.collision = void 0;
    this.element = void 0;
    this.layoutchild = void 0;
    this.layoutgroup = void 0;
    this.light = void 0;
    this.model = void 0;
    this.particlesystem = void 0;
    this.render = void 0;
    this.rigidbody = void 0;
    this.screen = void 0;
    this.script = void 0;
    this.scrollbar = void 0;
    this.scrollview = void 0;
    this.sound = void 0;
    this.sprite = void 0;
    this.c = {};
    this._app = void 0;
    this._destroying = false;
    this._guid = null;
    this._template = false;
    if (name instanceof AppBase) app = name;

    if (!app) {
      app = AppBase.getApplication();

      if (!app) {
        throw new Error("Couldn't find current application");
      }
    }

    this._app = app;
  }

  addComponent(type, data) {
    const system = this._app.systems[type];

    if (!system) {
      return null;
    }

    if (this.c[type]) {
      return null;
    }

    return system.addComponent(this, data);
  }

  removeComponent(type) {
    const system = this._app.systems[type];

    if (!system) {
      return;
    }

    if (!this.c[type]) {
      return;
    }

    system.removeComponent(this);
  }

  findComponent(type) {
    const entity = this.findOne(function (node) {
      return node.c && node.c[type];
    });
    return entity && entity.c[type];
  }

  findComponents(type) {
    const entities = this.find(function (node) {
      return node.c && node.c[type];
    });
    return entities.map(function (entity) {
      return entity.c[type];
    });
  }

  getGuid() {
    if (!this._guid) {
      this.setGuid(guid.create());
    }

    return this._guid;
  }

  setGuid(guid) {
    const index = this._app._entityIndex;

    if (this._guid) {
      delete index[this._guid];
    }

    this._guid = guid;
    index[this._guid] = this;
  }

  _notifyHierarchyStateChanged(node, enabled) {
    let enableFirst = false;
    if (node === this && _enableList.length === 0) enableFirst = true;
    node._beingEnabled = true;

    node._onHierarchyStateChanged(enabled);

    if (node._onHierarchyStatePostChanged) _enableList.push(node);
    const c = node._children;

    for (let i = 0, len = c.length; i < len; i++) {
      if (c[i]._enabled) this._notifyHierarchyStateChanged(c[i], enabled);
    }

    node._beingEnabled = false;

    if (enableFirst) {
      for (let i = 0; i < _enableList.length; i++) {
        _enableList[i]._onHierarchyStatePostChanged();
      }

      _enableList.length = 0;
    }
  }

  _onHierarchyStateChanged(enabled) {
    super._onHierarchyStateChanged(enabled);

    const components = this.c;

    for (const type in components) {
      if (components.hasOwnProperty(type)) {
        const component = components[type];

        if (component.enabled) {
          if (enabled) {
            component.onEnable();
          } else {
            component.onDisable();
          }
        }
      }
    }
  }

  _onHierarchyStatePostChanged() {
    const components = this.c;

    for (const type in components) {
      if (components.hasOwnProperty(type)) components[type].onPostStateChange();
    }
  }

  findByGuid(guid) {
    if (this._guid === guid) return this;
    const e = this._app._entityIndex[guid];

    if (e && (e === this || e.isDescendantOf(this))) {
      return e;
    }

    return null;
  }

  destroy() {
    this._destroying = true;

    for (const name in this.c) {
      this.c[name].enabled = false;
    }

    for (const name in this.c) {
      this.c[name].system.removeComponent(this);
    }

    if (this._parent) this._parent.removeChild(this);
    const children = this._children;

    while (children.length) {
      const child = children.pop();
      child._parent = null;

      if (child instanceof Entity) {
        child.destroy();
      }
    }

    this.fire('destroy', this);
    this.off();

    if (this._guid) {
      delete this._app._entityIndex[this._guid];
    }

    this._destroying = false;
  }

  clone() {
    const duplicatedIdsMap = {};

    const clone = this._cloneRecursively(duplicatedIdsMap);

    duplicatedIdsMap[this.getGuid()] = clone;
    resolveDuplicatedEntityReferenceProperties(this, this, clone, duplicatedIdsMap);
    return clone;
  }

  _cloneRecursively(duplicatedIdsMap) {
    const clone = new this.constructor(this._app);

    super._cloneInternal(clone);

    for (const type in this.c) {
      const component = this.c[type];
      component.system.cloneComponent(this, clone);
    }

    for (let i = 0; i < this._children.length; i++) {
      const oldChild = this._children[i];

      if (oldChild instanceof Entity) {
        const newChild = oldChild._cloneRecursively(duplicatedIdsMap);

        clone.addChild(newChild);
        duplicatedIdsMap[oldChild.getGuid()] = newChild;
      }
    }

    return clone;
  }

}

function resolveDuplicatedEntityReferenceProperties(oldSubtreeRoot, oldEntity, newEntity, duplicatedIdsMap) {
  if (oldEntity instanceof Entity) {
    const components = oldEntity.c;

    for (const componentName in components) {
      const component = components[componentName];
      const entityProperties = component.system.getPropertiesOfType('entity');

      for (let i = 0, len = entityProperties.length; i < len; i++) {
        const propertyDescriptor = entityProperties[i];
        const propertyName = propertyDescriptor.name;
        const oldEntityReferenceId = component[propertyName];
        const entityIsWithinOldSubtree = !!oldSubtreeRoot.findByGuid(oldEntityReferenceId);

        if (entityIsWithinOldSubtree) {
          const newEntityReferenceId = duplicatedIdsMap[oldEntityReferenceId].getGuid();

          if (newEntityReferenceId) {
            newEntity.c[componentName][propertyName] = newEntityReferenceId;
          }
        }
      }
    }

    if (components.script && !newEntity._app.useLegacyScriptAttributeCloning) {
      newEntity.script.resolveDuplicatedEntityReferenceProperties(components.script, duplicatedIdsMap);
    }

    if (components.render) {
      newEntity.render.resolveDuplicatedEntityReferenceProperties(components.render, duplicatedIdsMap);
    }

    if (components.anim) {
      newEntity.anim.resolveDuplicatedEntityReferenceProperties(components.anim, duplicatedIdsMap);
    }

    const _old = oldEntity.children.filter(function (e) {
      return e instanceof Entity;
    });

    const _new = newEntity.children.filter(function (e) {
      return e instanceof Entity;
    });

    for (let i = 0, len = _old.length; i < len; i++) {
      resolveDuplicatedEntityReferenceProperties(oldSubtreeRoot, _old[i], _new[i], duplicatedIdsMap);
    }
  }
}

const _tempPoint = new Vec3();

class BakeLightAmbient extends BakeLight {
  constructor(scene) {
    const lightEntity = new Entity('AmbientLight');
    lightEntity.addComponent('light', {
      type: 'directional',
      affectDynamic: true,
      affectLightmapped: false,
      bake: true,
      bakeNumSamples: scene.ambientBakeNumSamples,
      castShadows: true,
      normalOffsetBias: 0.05,
      shadowBias: 0.2,
      shadowDistance: 1,
      shadowResolution: 2048,
      shadowType: SHADOW_PCF3,
      color: Color.WHITE,
      intensity: 1,
      bakeDir: false
    });
    super(scene, lightEntity.light.light);
  }

  get numVirtualLights() {
    return this.light.bakeNumSamples;
  }

  prepareVirtualLight(index, numVirtualLights) {
    random.spherePointDeterministic(_tempPoint, index, numVirtualLights, 0, this.scene.ambientBakeSpherePart);

    this.light._node.lookAt(_tempPoint.mulScalar(-1));

    this.light._node.rotateLocal(90, 0, 0);

    const gamma = this.scene.gammaCorrection ? 2.2 : 1;
    const fullIntensity = 2 * Math.PI * this.scene.ambientBakeSpherePart;
    const linearIntensity = Math.pow(fullIntensity, gamma);
    this.light.intensity = Math.pow(linearIntensity / numVirtualLights, 1 / gamma);
  }

}

class BakeMeshNode {
  constructor(node, meshInstances = null) {
    this.node = node;
    this.component = node.render || node.model;
    meshInstances = meshInstances || this.component.meshInstances;
    this.store();
    this.meshInstances = meshInstances;
    this.bounds = null;
    this.renderTargets = [];
  }

  store() {
    this.castShadows = this.component.castShadows;
  }

  restore() {
    this.component.castShadows = this.castShadows;
  }

}

const DENOISE_FILTER_SIZE = 15;

class LightmapFilters {
  constructor(device) {
    this.device = device;
    this.shaderDilate = createShaderFromCode(device, shaderChunks.fullscreenQuadVS, shaderChunksLightmapper.dilatePS, 'lmDilate');
    this.constantTexSource = device.scope.resolve('source');
    this.constantPixelOffset = device.scope.resolve('pixelOffset');
    this.pixelOffset = new Float32Array(2);
    this.shaderDenoise = null;
    this.sigmas = null;
    this.constantSigmas = null;
    this.kernel = null;
  }

  setSourceTexture(texture) {
    this.constantTexSource.setValue(texture);
  }

  prepare(textureWidth, textureHeight) {
    this.pixelOffset[0] = 1 / textureWidth;
    this.pixelOffset[1] = 1 / textureHeight;
    this.constantPixelOffset.setValue(this.pixelOffset);
  }

  prepareDenoise(filterRange, filterSmoothness) {
    if (!this.shaderDenoise) {
      this.shaderDenoise = createShaderFromCode(this.device, shaderChunks.fullscreenQuadVS, shaderChunksLightmapper.bilateralDeNoisePS, 'lmBilateralDeNoise');
      this.sigmas = new Float32Array(2);
      this.constantSigmas = this.device.scope.resolve('sigmas');
      this.constantKernel = this.device.scope.resolve('kernel[0]');
      this.bZnorm = this.device.scope.resolve('bZnorm');
    }

    this.sigmas[0] = filterRange;
    this.sigmas[1] = filterSmoothness;
    this.constantSigmas.setValue(this.sigmas);
    this.evaluateDenoiseUniforms(filterRange, filterSmoothness);
  }

  evaluateDenoiseUniforms(filterRange, filterSmoothness) {
    function normpdf(x, sigma) {
      return 0.39894 * Math.exp(-0.5 * x * x / (sigma * sigma)) / sigma;
    }

    this.kernel = this.kernel || new Float32Array(DENOISE_FILTER_SIZE);
    const kernel = this.kernel;
    const kSize = Math.floor((DENOISE_FILTER_SIZE - 1) / 2);

    for (let j = 0; j <= kSize; ++j) {
      const value = normpdf(j, filterRange);
      kernel[kSize + j] = value;
      kernel[kSize - j] = value;
    }

    this.constantKernel.setValue(this.kernel);
    const bZnorm = 1 / normpdf(0.0, filterSmoothness);
    this.bZnorm.setValue(bZnorm);
  }

}

const MAX_LIGHTMAP_SIZE = 2048;
const PASS_COLOR = 0;
const PASS_DIR = 1;
const tempVec$1 = new Vec3();

class Lightmapper {
  constructor(device, root, scene, renderer, assets) {
    this.device = device;
    this.root = root;
    this.scene = scene;
    this.renderer = renderer;
    this.assets = assets;
    this.shadowMapCache = renderer._shadowRenderer.shadowMapCache;
    this._tempSet = new Set();
    this._initCalled = false;
    this.passMaterials = [];
    this.ambientAOMaterial = null;
    this.fog = '';
    this.ambientLight = new Color();
    this.renderTargets = new Map();
    this.stats = {
      renderPasses: 0,
      lightmapCount: 0,
      totalRenderTime: 0,
      forwardTime: 0,
      fboTime: 0,
      shadowMapTime: 0,
      compileTime: 0,
      shadersLinked: 0
    };
  }

  destroy() {
    LightmapCache.decRef(this.blackTex);
    this.blackTex = null;
    LightmapCache.destroy();
    this.device = null;
    this.root = null;
    this.scene = null;
    this.renderer = null;
    this.assets = null;
  }

  initBake(device) {
    if (!this._initCalled) {
      this._initCalled = true;
      this.lightmapFilters = new LightmapFilters(device);
      this.constantBakeDir = device.scope.resolve('bakeDir');
      this.materials = [];
      this.blackTex = new Texture(this.device, {
        width: 4,
        height: 4,
        format: PIXELFORMAT_R8_G8_B8_A8,
        type: TEXTURETYPE_RGBM,
        name: 'lightmapBlack'
      });
      LightmapCache.incRef(this.blackTex);
      const camera = new Camera();
      camera.clearColor.set(0, 0, 0, 0);
      camera.clearColorBuffer = true;
      camera.clearDepthBuffer = false;
      camera.clearStencilBuffer = false;
      camera.frustumCulling = false;
      camera.projection = PROJECTION_ORTHOGRAPHIC;
      camera.aspectRatio = 1;
      camera.node = new GraphNode();
      this.camera = camera;
    }

    if (this.scene.clusteredLightingEnabled) {
      const lightingParams = new LightingParams(device.supportsAreaLights, device.maxTextureSize, () => {});
      this.lightingParams = lightingParams;
      const srcParams = this.scene.lighting;
      lightingParams.shadowsEnabled = srcParams.shadowsEnabled;
      lightingParams.shadowAtlasResolution = srcParams.shadowAtlasResolution;
      lightingParams.cookiesEnabled = srcParams.cookiesEnabled;
      lightingParams.cookieAtlasResolution = srcParams.cookieAtlasResolution;
      lightingParams.areaLightsEnabled = srcParams.areaLightsEnabled;
      lightingParams.cells = new Vec3(3, 3, 3);
      lightingParams.maxLightsPerCell = 4;
      this.worldClusters = new WorldClusters(device);
      this.worldClusters.name = 'ClusterLightmapper';
    }
  }

  finishBake(bakeNodes) {
    this.materials = [];

    function destroyRT(rt) {
      LightmapCache.decRef(rt.colorBuffer);
      rt.destroy();
    }

    this.renderTargets.forEach(rt => {
      destroyRT(rt);
    });
    this.renderTargets.clear();
    bakeNodes.forEach(node => {
      node.renderTargets.forEach(rt => {
        destroyRT(rt);
      });
      node.renderTargets.length = 0;
    });
    this.ambientAOMaterial = null;

    if (this.worldClusters) {
      this.worldClusters.destroy();
      this.worldClusters = null;
    }
  }

  createMaterialForPass(device, scene, pass, addAmbient) {
    const material = new StandardMaterial();
    material.name = `lmMaterial-pass:${pass}-ambient:${addAmbient}`;
    material.chunks.APIVersion = CHUNKAPI_1_55;
    material.chunks.transformVS = '#define UV1LAYOUT\n' + shaderChunks.transformVS;

    if (pass === PASS_COLOR) {
      let bakeLmEndChunk = shaderChunksLightmapper.bakeLmEndPS;

      if (addAmbient) {
        bakeLmEndChunk = `
                    dDiffuseLight = ((dDiffuseLight - 0.5) * max(${scene.ambientBakeOcclusionContrast.toFixed(1)} + 1.0, 0.0)) + 0.5;
                    dDiffuseLight += vec3(${scene.ambientBakeOcclusionBrightness.toFixed(1)});
                    dDiffuseLight = saturate(dDiffuseLight);
                    dDiffuseLight *= dAmbientLight;
                ` + bakeLmEndChunk;
      } else {
        material.ambient = new Color(0, 0, 0);
        material.ambientTint = true;
      }

      material.chunks.endPS = bakeLmEndChunk;
      material.lightMap = this.blackTex;
    } else {
      material.chunks.basePS = shaderChunks.basePS + '\nuniform sampler2D texture_dirLightMap;\nuniform float bakeDir;\n';
      material.chunks.endPS = shaderChunksLightmapper.bakeDirLmEndPS;
    }

    material.chunks.outputAlphaPS = '\n';
    material.chunks.outputAlphaOpaquePS = '\n';
    material.chunks.outputAlphaPremulPS = '\n';
    material.cull = CULLFACE_NONE;
    material.forceUv1 = true;
    material.update();
    return material;
  }

  createMaterials(device, scene, passCount) {
    for (let pass = 0; pass < passCount; pass++) {
      if (!this.passMaterials[pass]) {
        this.passMaterials[pass] = this.createMaterialForPass(device, scene, pass, false);
      }
    }

    if (!this.ambientAOMaterial) {
      this.ambientAOMaterial = this.createMaterialForPass(device, scene, 0, true);

      this.ambientAOMaterial.onUpdateShader = function (options) {
        options.lightMapWithoutAmbient = true;
        options.separateAmbient = true;
        return options;
      };
    }
  }

  createTexture(size, type, name) {
    return new Texture(this.device, {
      width: size,
      height: size,
      format: PIXELFORMAT_R8_G8_B8_A8,
      mipmaps: false,
      type: type,
      minFilter: FILTER_NEAREST,
      magFilter: FILTER_NEAREST,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      name: name
    });
  }

  collectModels(node, bakeNodes, allNodes) {
    var _node$model, _node$model2, _node$render;

    if (!node.enabled) return;
    let meshInstances;

    if ((_node$model = node.model) != null && _node$model.model && (_node$model2 = node.model) != null && _node$model2.enabled) {
      if (allNodes) allNodes.push(new BakeMeshNode(node));

      if (node.model.lightmapped) {
        if (bakeNodes) {
          meshInstances = node.model.model.meshInstances;
        }
      }
    }

    if ((_node$render = node.render) != null && _node$render.enabled) {
      if (allNodes) allNodes.push(new BakeMeshNode(node));

      if (node.render.lightmapped) {
        if (bakeNodes) {
          meshInstances = node.render.meshInstances;
        }
      }
    }

    if (meshInstances) {
      let hasUv1 = true;

      for (let i = 0; i < meshInstances.length; i++) {
        if (!meshInstances[i].mesh.vertexBuffer.format.hasUv1) {
          hasUv1 = false;
          break;
        }
      }

      if (hasUv1) {
        const notInstancedMeshInstances = [];

        for (let i = 0; i < meshInstances.length; i++) {
          const mesh = meshInstances[i].mesh;

          if (this._tempSet.has(mesh)) {
            bakeNodes.push(new BakeMeshNode(node, [meshInstances[i]]));
          } else {
            notInstancedMeshInstances.push(meshInstances[i]);
          }

          this._tempSet.add(mesh);
        }

        this._tempSet.clear();

        if (notInstancedMeshInstances.length > 0) {
          bakeNodes.push(new BakeMeshNode(node, notInstancedMeshInstances));
        }
      }
    }

    for (let i = 0; i < node._children.length; i++) {
      this.collectModels(node._children[i], bakeNodes, allNodes);
    }
  }

  prepareShadowCasters(nodes) {
    const casters = [];

    for (let n = 0; n < nodes.length; n++) {
      const component = nodes[n].component;
      component.castShadows = component.castShadowsLightmap;

      if (component.castShadowsLightmap) {
        const meshes = nodes[n].meshInstances;

        for (let i = 0; i < meshes.length; i++) {
          meshes[i].visibleThisFrame = true;
          casters.push(meshes[i]);
        }
      }
    }

    return casters;
  }

  updateTransforms(nodes) {
    for (let i = 0; i < nodes.length; i++) {
      const meshInstances = nodes[i].meshInstances;

      for (let j = 0; j < meshInstances.length; j++) {
        meshInstances[j].node.getWorldTransform();
      }
    }
  }

  calculateLightmapSize(node) {
    let data;
    const sizeMult = this.scene.lightmapSizeMultiplier || 16;
    const scale = tempVec$1;
    let srcArea, lightmapSizeMultiplier;

    if (node.model) {
      lightmapSizeMultiplier = node.model.lightmapSizeMultiplier;

      if (node.model.asset) {
        data = this.assets.get(node.model.asset).data;

        if (data.area) {
          srcArea = data.area;
        }
      } else if (node.model._area) {
        data = node.model;

        if (data._area) {
          srcArea = data._area;
        }
      }
    } else if (node.render) {
      lightmapSizeMultiplier = node.render.lightmapSizeMultiplier;

      if (node.render.type !== 'asset') {
        if (node.render._area) {
          data = node.render;

          if (data._area) {
            srcArea = data._area;
          }
        }
      }
    }

    const area = {
      x: 1,
      y: 1,
      z: 1,
      uv: 1
    };

    if (srcArea) {
      area.x = srcArea.x;
      area.y = srcArea.y;
      area.z = srcArea.z;
      area.uv = srcArea.uv;
    }

    const areaMult = lightmapSizeMultiplier || 1;
    area.x *= areaMult;
    area.y *= areaMult;
    area.z *= areaMult;
    const component = node.render || node.model;
    const bounds = this.computeNodeBounds(component.meshInstances);
    scale.copy(bounds.halfExtents);
    let totalArea = area.x * scale.y * scale.z + area.y * scale.x * scale.z + area.z * scale.x * scale.y;
    totalArea /= area.uv;
    totalArea = Math.sqrt(totalArea);
    const lightmapSize = Math.min(math$1.nextPowerOfTwo(totalArea * sizeMult), this.scene.lightmapMaxResolution || MAX_LIGHTMAP_SIZE);
    return lightmapSize;
  }

  setLightmapping(nodes, value, passCount, shaderDefs) {
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      const meshInstances = node.meshInstances;

      for (let j = 0; j < meshInstances.length; j++) {
        const meshInstance = meshInstances[j];
        meshInstance.setLightmapped(value);

        if (value) {
          if (shaderDefs) {
            meshInstance._shaderDefs |= shaderDefs;
          }

          meshInstance.mask = MASK_AFFECT_LIGHTMAPPED;

          for (let pass = 0; pass < passCount; pass++) {
            const tex = node.renderTargets[pass].colorBuffer;
            tex.minFilter = FILTER_LINEAR;
            tex.magFilter = FILTER_LINEAR;
            meshInstance.setRealtimeLightmap(MeshInstance.lightmapParamNames[pass], tex);
          }
        }
      }
    }
  }

  bake(nodes, mode = BAKE_COLORDIR) {
    const device = this.device;
    const startTime = now();

    this.scene._updateSky(device);

    this.stats.renderPasses = 0;
    this.stats.shadowMapTime = 0;
    this.stats.forwardTime = 0;
    const startShaders = device._shaderStats.linked;
    const startFboTime = device._renderTargetCreationTime;
    const startCompileTime = device._shaderStats.compileTime;
    const bakeNodes = [];
    const allNodes = [];

    if (nodes) {
      for (let i = 0; i < nodes.length; i++) {
        this.collectModels(nodes[i], bakeNodes, null);
      }

      this.collectModels(this.root, null, allNodes);
    } else {
      this.collectModels(this.root, bakeNodes, allNodes);
    }

    if (bakeNodes.length > 0) {
      const passCount = mode === BAKE_COLORDIR ? 2 : 1;
      this.setLightmapping(bakeNodes, false, passCount);
      this.initBake(device);
      this.bakeInternal(passCount, bakeNodes, allNodes);
      let shaderDefs = SHADERDEF_LM;

      if (mode === BAKE_COLORDIR) {
        shaderDefs |= SHADERDEF_DIRLM;
      }

      if (this.scene.ambientBake) {
        shaderDefs |= SHADERDEF_LMAMBIENT;
      }

      this.setLightmapping(bakeNodes, true, passCount, shaderDefs);
      this.finishBake(bakeNodes);
    }

    const nowTime = now();
    this.stats.totalRenderTime = nowTime - startTime;
    this.stats.shadersLinked = device._shaderStats.linked - startShaders;
    this.stats.compileTime = device._shaderStats.compileTime - startCompileTime;
    this.stats.fboTime = device._renderTargetCreationTime - startFboTime;
    this.stats.lightmapCount = bakeNodes.length;
  }

  allocateTextures(bakeNodes, passCount) {
    for (let i = 0; i < bakeNodes.length; i++) {
      const bakeNode = bakeNodes[i];
      const size = this.calculateLightmapSize(bakeNode.node);

      for (let pass = 0; pass < passCount; pass++) {
        const tex = this.createTexture(size, TEXTURETYPE_DEFAULT, 'lightmapper_lightmap_' + i);
        LightmapCache.incRef(tex);
        bakeNode.renderTargets[pass] = new RenderTarget({
          colorBuffer: tex,
          depth: false
        });
      }

      if (!this.renderTargets.has(size)) {
        const tex = this.createTexture(size, TEXTURETYPE_DEFAULT, 'lightmapper_temp_lightmap_' + size);
        LightmapCache.incRef(tex);
        this.renderTargets.set(size, new RenderTarget({
          colorBuffer: tex,
          depth: false
        }));
      }
    }
  }

  prepareLightsToBake(layerComposition, allLights, bakeLights) {
    if (this.scene.ambientBake) {
      const ambientLight = new BakeLightAmbient(this.scene);
      bakeLights.push(ambientLight);
    }

    const sceneLights = layerComposition._lights;

    for (let i = 0; i < sceneLights.length; i++) {
      const light = sceneLights[i];
      const bakeLight = new BakeLightSimple(this.scene, light);
      allLights.push(bakeLight);

      if (light.enabled && (light.mask & MASK_BAKE) !== 0) {
        light.isStatic = false;
        light.mask = 0xFFFFFFFF;
        light.shadowUpdateMode = light.type === LIGHTTYPE_DIRECTIONAL ? SHADOWUPDATE_REALTIME : SHADOWUPDATE_THISFRAME;
        bakeLights.push(bakeLight);
      }
    }

    bakeLights.sort();
  }

  restoreLights(allLights) {
    for (let i = 0; i < allLights.length; i++) {
      allLights[i].restore();
    }
  }

  setupScene() {
    this.revertStatic = false;

    if (this.scene._needsStaticPrepare) {
      this.scene._needsStaticPrepare = false;
      this.revertStatic = true;
    }

    this.fog = this.scene.fog;
    this.ambientLight.copy(this.scene.ambientLight);
    this.scene.fog = FOG_NONE;

    if (!this.scene.ambientBake) {
      this.scene.ambientLight.set(0, 0, 0);
    }

    this.renderer.setSceneConstants();
  }

  restoreScene() {
    this.scene.fog = this.fog;
    this.scene.ambientLight.copy(this.ambientLight);

    if (this.revertStatic) {
      this.scene._needsStaticPrepare = true;
    }
  }

  computeNodeBounds(meshInstances) {
    const bounds = new BoundingBox();

    if (meshInstances.length > 0) {
      bounds.copy(meshInstances[0].aabb);

      for (let m = 1; m < meshInstances.length; m++) {
        bounds.add(meshInstances[m].aabb);
      }
    }

    return bounds;
  }

  computeNodesBounds(nodes) {
    for (let i = 0; i < nodes.length; i++) {
      const meshInstances = nodes[i].meshInstances;
      nodes[i].bounds = this.computeNodeBounds(meshInstances);
    }
  }

  computeBounds(meshInstances) {
    const bounds = new BoundingBox();

    for (let i = 0; i < meshInstances.length; i++) {
      bounds.copy(meshInstances[0].aabb);

      for (let m = 1; m < meshInstances.length; m++) {
        bounds.add(meshInstances[m].aabb);
      }
    }

    return bounds;
  }

  backupMaterials(meshInstances) {
    for (let i = 0; i < meshInstances.length; i++) {
      this.materials[i] = meshInstances[i].material;
    }
  }

  restoreMaterials(meshInstances) {
    for (let i = 0; i < meshInstances.length; i++) {
      meshInstances[i].material = this.materials[i];
    }
  }

  lightCameraPrepare(device, bakeLight) {
    const light = bakeLight.light;
    let shadowCam;

    if (light.type === LIGHTTYPE_SPOT) {
      const lightRenderData = light.getRenderData(null, 0);
      shadowCam = lightRenderData.shadowCamera;

      shadowCam._node.setPosition(light._node.getPosition());

      shadowCam._node.setRotation(light._node.getRotation());

      shadowCam._node.rotateLocal(-90, 0, 0);

      shadowCam.projection = PROJECTION_PERSPECTIVE;
      shadowCam.nearClip = light.attenuationEnd / 1000;
      shadowCam.farClip = light.attenuationEnd;
      shadowCam.aspectRatio = 1;
      shadowCam.fov = light._outerConeAngle * 2;
      this.renderer.updateCameraFrustum(shadowCam);
    }

    return shadowCam;
  }

  lightCameraPrepareAndCull(bakeLight, bakeNode, shadowCam, casterBounds) {
    const light = bakeLight.light;
    let lightAffectsNode = true;

    if (light.type === LIGHTTYPE_DIRECTIONAL) {
      tempVec$1.copy(casterBounds.center);
      tempVec$1.y += casterBounds.halfExtents.y;
      this.camera.node.setPosition(tempVec$1);
      this.camera.node.setEulerAngles(-90, 0, 0);
      this.camera.nearClip = 0;
      this.camera.farClip = casterBounds.halfExtents.y * 2;
      const frustumSize = Math.max(casterBounds.halfExtents.x, casterBounds.halfExtents.z);
      this.camera.orthoHeight = frustumSize;
    } else {
      if (!bakeLight.lightBounds.intersects(bakeNode.bounds)) {
        lightAffectsNode = false;
      }
    }

    if (light.type === LIGHTTYPE_SPOT) {
      let nodeVisible = false;
      const meshInstances = bakeNode.meshInstances;

      for (let i = 0; i < meshInstances.length; i++) {
        if (meshInstances[i]._isVisible(shadowCam)) {
          nodeVisible = true;
          break;
        }
      }

      if (!nodeVisible) {
        lightAffectsNode = false;
      }
    }

    return lightAffectsNode;
  }

  setupLightArray(lightArray, light) {
    lightArray[LIGHTTYPE_DIRECTIONAL].length = 0;
    lightArray[LIGHTTYPE_OMNI].length = 0;
    lightArray[LIGHTTYPE_SPOT].length = 0;
    lightArray[light.type][0] = light;
    light.visibleThisFrame = true;
  }

  renderShadowMap(shadowMapRendered, casters, lightArray, bakeLight) {
    const light = bakeLight.light;

    if (!shadowMapRendered && light.castShadows) {
      if (!light.shadowMap && !this.scene.clusteredLightingEnabled) {
        light.shadowMap = this.shadowMapCache.get(this.device, light);
      }

      if (light.type === LIGHTTYPE_DIRECTIONAL) {
        this.renderer._shadowRenderer.cullDirectional(light, casters, this.camera);
      } else {
        this.renderer._shadowRenderer.cullLocal(light, casters);
      }

      this.renderer.renderShadows(lightArray[light.type], this.camera);
    }

    return true;
  }

  postprocessTextures(device, bakeNodes, passCount) {
    const numDilates2x = 1;
    const dilateShader = this.lightmapFilters.shaderDilate;
    const filterLightmap = this.scene.lightmapFilterEnabled;

    if (filterLightmap) {
      this.lightmapFilters.prepareDenoise(this.scene.lightmapFilterRange, this.scene.lightmapFilterSmoothness);
    }

    for (let node = 0; node < bakeNodes.length; node++) {
      const bakeNode = bakeNodes[node];

      for (let pass = 0; pass < passCount; pass++) {
        const nodeRT = bakeNode.renderTargets[pass];
        const lightmap = nodeRT.colorBuffer;
        const tempRT = this.renderTargets.get(lightmap.width);
        const tempTex = tempRT.colorBuffer;
        this.lightmapFilters.prepare(lightmap.width, lightmap.height);

        for (let i = 0; i < numDilates2x; i++) {
          this.lightmapFilters.setSourceTexture(lightmap);
          const bilateralFilterEnabled = filterLightmap && pass === 0 && i === 0;
          drawQuadWithShader(device, tempRT, bilateralFilterEnabled ? this.lightmapFilters.shaderDenoise : dilateShader);
          this.lightmapFilters.setSourceTexture(tempTex);
          drawQuadWithShader(device, nodeRT, dilateShader);
        }
      }
    }
  }

  bakeInternal(passCount, bakeNodes, allNodes) {
    const scene = this.scene;
    const device = this.device;
    const clusteredLightingEnabled = scene.clusteredLightingEnabled;
    this.createMaterials(device, scene, passCount);
    this.setupScene();

    scene.layers._update();

    this.computeNodesBounds(bakeNodes);
    this.allocateTextures(bakeNodes, passCount);
    const allLights = [],
          bakeLights = [];
    this.prepareLightsToBake(scene.layers, allLights, bakeLights);
    this.updateTransforms(allNodes);
    const casters = this.prepareShadowCasters(allNodes);
    this.renderer.updateCpuSkinMatrices(casters);
    this.renderer.gpuUpdate(casters);
    const casterBounds = this.computeBounds(casters);
    let i, j, rcv, m;

    for (i = 0; i < bakeNodes.length; i++) {
      const bakeNode = bakeNodes[i];
      rcv = bakeNode.meshInstances;

      for (j = 0; j < rcv.length; j++) {
        m = rcv[j];
        m.setLightmapped(false);
        m.mask = MASK_BAKE;
        m.setRealtimeLightmap(MeshInstance.lightmapParamNames[0], m.material.lightMap ? m.material.lightMap : this.blackTex);
        m.setRealtimeLightmap(MeshInstance.lightmapParamNames[1], this.blackTex);
      }
    }

    for (j = 0; j < bakeLights.length; j++) {
      bakeLights[j].light.enabled = false;
    }

    const lightArray = [[], [], []];
    let pass, node;
    let shadersUpdatedOn1stPass = false;

    for (i = 0; i < bakeLights.length; i++) {
      const bakeLight = bakeLights[i];
      const isAmbientLight = bakeLight instanceof BakeLightAmbient;
      let numVirtualLights = bakeLight.numVirtualLights;

      if (passCount > 1 && numVirtualLights > 1 && bakeLight.light.bakeDir) {
        numVirtualLights = 1;
      }

      for (let virtualLightIndex = 0; virtualLightIndex < numVirtualLights; virtualLightIndex++) {
        if (numVirtualLights > 1) {
          bakeLight.prepareVirtualLight(virtualLightIndex, numVirtualLights);
        }

        bakeLight.startBake();
        let shadowMapRendered = false;
        const shadowCam = this.lightCameraPrepare(device, bakeLight);

        for (node = 0; node < bakeNodes.length; node++) {
          const bakeNode = bakeNodes[node];
          rcv = bakeNode.meshInstances;
          const lightAffectsNode = this.lightCameraPrepareAndCull(bakeLight, bakeNode, shadowCam, casterBounds);

          if (!lightAffectsNode) {
            continue;
          }

          this.setupLightArray(lightArray, bakeLight.light);

          if (clusteredLightingEnabled) {
            this.renderer.lightTextureAtlas.update(lightArray[LIGHTTYPE_SPOT], lightArray[LIGHTTYPE_OMNI], this.lightingParams);
          }

          shadowMapRendered = this.renderShadowMap(shadowMapRendered, casters, lightArray, bakeLight);

          if (clusteredLightingEnabled) {
            const clusterLights = lightArray[LIGHTTYPE_SPOT].concat(lightArray[LIGHTTYPE_OMNI]);
            this.worldClusters.update(clusterLights, this.scene.gammaCorrection, this.lightingParams);
          }

          this.backupMaterials(rcv);

          for (pass = 0; pass < passCount; pass++) {
            if (pass > 0 && virtualLightIndex > 0) {
              break;
            }

            if (isAmbientLight && pass > 0) {
              break;
            }

            const nodeRT = bakeNode.renderTargets[pass];
            const lightmapSize = bakeNode.renderTargets[pass].colorBuffer.width;
            const tempRT = this.renderTargets.get(lightmapSize);
            const tempTex = tempRT.colorBuffer;

            if (pass === 0) {
              shadersUpdatedOn1stPass = scene.updateShaders;
            } else if (shadersUpdatedOn1stPass) {
              scene.updateShaders = true;
            }

            let passMaterial = this.passMaterials[pass];

            if (isAmbientLight) {
              const lastVirtualLightForPass = virtualLightIndex + 1 === numVirtualLights;

              if (lastVirtualLightForPass && pass === 0) {
                passMaterial = this.ambientAOMaterial;
              }
            }

            for (j = 0; j < rcv.length; j++) {
              rcv[j].material = passMaterial;
            }

            this.renderer.updateShaders(rcv);
            this.renderer.setCamera(this.camera, tempRT, true);

            if (pass === PASS_DIR) {
              this.constantBakeDir.setValue(bakeLight.light.bakeDir ? 1 : 0);
            }

            if (clusteredLightingEnabled) {
              this.worldClusters.activate(this.renderer.lightTextureAtlas);
            }

            this.renderer._forwardTime = 0;
            this.renderer._shadowMapTime = 0;
            this.renderer.renderForward(this.camera, rcv, rcv.length, lightArray, SHADER_FORWARDHDR);
            device.updateEnd();
            bakeNode.renderTargets[pass] = tempRT;
            this.renderTargets.set(lightmapSize, nodeRT);

            for (j = 0; j < rcv.length; j++) {
              m = rcv[j];
              m.setRealtimeLightmap(MeshInstance.lightmapParamNames[pass], tempTex);
              m._shaderDefs |= SHADERDEF_LM;
            }
          }

          this.restoreMaterials(rcv);
        }

        bakeLight.endBake(this.shadowMapCache);
      }
    }

    this.postprocessTextures(device, bakeNodes, passCount);

    for (node = 0; node < allNodes.length; node++) {
      allNodes[node].restore();
    }

    this.restoreLights(allLights);
    this.restoreScene();

    if (!clusteredLightingEnabled) {
      this.shadowMapCache.clear();
    }
  }

}

const _floatRounding = 0.2;

class Morph extends RefCountedObject {
  constructor(targets, graphicsDevice) {
    super();
    targets.forEach(target => void 0);
    this.device = graphicsDevice || getApplication().graphicsDevice;
    this._targets = targets.slice();

    if (this.device.supportsMorphTargetTexturesCore) {
      if (this.device.extTextureHalfFloat && this.device.textureHalfFloatRenderable) {
        this._renderTextureFormat = Morph.FORMAT_HALF_FLOAT;
      } else if (this.device.extTextureFloat && this.device.textureFloatRenderable) {
        this._renderTextureFormat = Morph.FORMAT_FLOAT;
      }

      if (this.device.extTextureHalfFloat && this.device.textureHalfFloatUpdatable) {
        this._textureFormat = Morph.FORMAT_HALF_FLOAT;
      } else if (this.device.extTextureFloat) {
        this._textureFormat = Morph.FORMAT_FLOAT;
      }

      if (this._renderTextureFormat !== undefined && this._textureFormat !== undefined) {
        this._useTextureMorph = true;
      }
    }

    this._init();

    this._updateMorphFlags();

    this._calculateAabb();
  }

  get morphPositions() {
    return this._morphPositions;
  }

  get morphNormals() {
    return this._morphNormals;
  }

  get maxActiveTargets() {
    if (this._useTextureMorph) return this._targets.length;
    return this._morphPositions && this._morphNormals ? 4 : 8;
  }

  get useTextureMorph() {
    return this._useTextureMorph;
  }

  _init() {
    if (this._useTextureMorph) {
      this._useTextureMorph = this._initTextureBased();
    }

    if (!this._useTextureMorph) {
      for (let i = 0; i < this._targets.length; i++) {
        this._targets[i]._initVertexBuffers(this.device);
      }
    }

    for (let i = 0; i < this._targets.length; i++) {
      this._targets[i]._postInit();
    }
  }

  _initTextureBased() {
    const deltaArrays = [],
          deltaInfos = [];

    for (let i = 0; i < this._targets.length; i++) {
      const target = this._targets[i];

      if (target.options.deltaPositions) {
        deltaArrays.push(target.options.deltaPositions);
        deltaInfos.push({
          target: target,
          name: 'texturePositions'
        });
      }

      if (target.options.deltaNormals) {
        deltaArrays.push(target.options.deltaNormals);
        deltaInfos.push({
          target: target,
          name: 'textureNormals'
        });
      }
    }

    const ids = [],
          usedDataIndices = [];
    let freeIndex = 1;
    const dataCount = deltaArrays[0].length;

    for (let v = 0; v < dataCount; v += 3) {
      let vertexUsed = false;

      for (let i = 0; i < deltaArrays.length; i++) {
        const data = deltaArrays[i];

        if (data[v] !== 0 || data[v + 1] !== 0 || data[v + 2] !== 0) {
          vertexUsed = true;
          break;
        }
      }

      if (vertexUsed) {
        ids.push(freeIndex + _floatRounding);
        usedDataIndices.push(v / 3);
        freeIndex++;
      } else {
        ids.push(0 + _floatRounding);
      }
    }

    const maxTextureSize = Math.min(this.device.maxTextureSize, 4096);
    let morphTextureWidth = Math.ceil(Math.sqrt(freeIndex));
    morphTextureWidth = Math.min(morphTextureWidth, maxTextureSize);
    const morphTextureHeight = Math.ceil(freeIndex / morphTextureWidth);

    if (morphTextureHeight > maxTextureSize) {
      return false;
    }

    this.morphTextureWidth = morphTextureWidth;
    this.morphTextureHeight = morphTextureHeight;
    let halfFloat = false;
    let numComponents = 3;
    const float2Half = FloatPacking.float2Half;

    if (this._textureFormat === Morph.FORMAT_HALF_FLOAT) {
      halfFloat = true;
      numComponents = 4;
    }

    const arraySize = this.morphTextureWidth * this.morphTextureHeight * numComponents;
    const packedDeltas = halfFloat ? new Uint16Array(arraySize) : new Float32Array(arraySize);

    for (let i = 0; i < deltaArrays.length; i++) {
      const data = deltaArrays[i];

      for (let v = 0; v < usedDataIndices.length; v++) {
        const index = usedDataIndices[v];

        if (halfFloat) {
          packedDeltas[v * numComponents + numComponents] = float2Half(data[index * 3]);
          packedDeltas[v * numComponents + numComponents + 1] = float2Half(data[index * 3 + 1]);
          packedDeltas[v * numComponents + numComponents + 2] = float2Half(data[index * 3 + 2]);
        } else {
          packedDeltas[v * numComponents + numComponents] = data[index * 3];
          packedDeltas[v * numComponents + numComponents + 1] = data[index * 3 + 1];
          packedDeltas[v * numComponents + numComponents + 2] = data[index * 3 + 2];
        }
      }

      const target = deltaInfos[i].target;
      const format = this._textureFormat === Morph.FORMAT_FLOAT ? PIXELFORMAT_RGB32F : PIXELFORMAT_RGBA16F;

      target._setTexture(deltaInfos[i].name, this._createTexture('MorphTarget', format, packedDeltas));
    }

    const formatDesc = [{
      semantic: SEMANTIC_ATTR15,
      components: 1,
      type: TYPE_FLOAT32
    }];
    this.vertexBufferIds = new VertexBuffer(this.device, new VertexFormat(this.device, formatDesc), ids.length, BUFFER_STATIC, new Float32Array(ids));
    return true;
  }

  destroy() {
    var _this$vertexBufferIds;

    (_this$vertexBufferIds = this.vertexBufferIds) == null ? void 0 : _this$vertexBufferIds.destroy();
    this.vertexBufferIds = null;

    for (let i = 0; i < this._targets.length; i++) {
      this._targets[i].destroy();
    }

    this._targets.length = 0;
  }

  get targets() {
    return this._targets;
  }

  _updateMorphFlags() {
    this._morphPositions = false;
    this._morphNormals = false;

    for (let i = 0; i < this._targets.length; i++) {
      const target = this._targets[i];

      if (target.morphPositions) {
        this._morphPositions = true;
      }

      if (target.morphNormals) {
        this._morphNormals = true;
      }
    }
  }

  _calculateAabb() {
    const min = new Vec3();
    const max = new Vec3();

    for (let i = 0; i < this._targets.length; i++) {
      const targetAabb = this._targets[i].aabb;
      min.min(targetAabb.getMin());
      max.max(targetAabb.getMax());
    }

    this.aabb = new BoundingBox();
    this.aabb.setMinMax(min, max);
  }

  _createTexture(name, format, pixelData) {
    const texture = new Texture(this.device, {
      width: this.morphTextureWidth,
      height: this.morphTextureHeight,
      format: format,
      cubemap: false,
      mipmaps: false,
      minFilter: FILTER_NEAREST,
      magFilter: FILTER_NEAREST,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      name: name
    });

    if (pixelData) {
      texture.lock().set(pixelData);
      texture.unlock();
    }

    return texture;
  }

}

Morph.FORMAT_FLOAT = 0;
Morph.FORMAT_HALF_FLOAT = 1;

const textureMorphVertexShader = `
    attribute vec2 vertex_position;
    varying vec2 uv0;
    void main(void) {
        gl_Position = vec4(vertex_position, 0.5, 1.0);
        uv0 = vertex_position.xy * 0.5 + 0.5;
    }
    `;

class MorphInstance {
  constructor(morph) {
    this.morph = morph;
    morph.incRefCount();
    this.device = morph.device;
    this._weights = [];
    this._weightMap = new Map();

    for (let v = 0; v < morph._targets.length; v++) {
      const target = morph._targets[v];

      if (target.name) {
        this._weightMap.set(target.name, v);
      }

      this.setWeight(v, target.defaultWeight);
    }

    this._activeTargets = [];

    if (morph.useTextureMorph) {
      this.shaderCache = {};
      this.maxSubmitCount = this.device.maxTextures;
      this._shaderMorphWeights = new Float32Array(this.maxSubmitCount);

      const createRT = (name, textureVar) => {
        const format = morph._renderTextureFormat === Morph.FORMAT_FLOAT ? PIXELFORMAT_RGBA32F : PIXELFORMAT_RGBA16F;
        this[textureVar] = morph._createTexture(name, format);
        return new RenderTarget({
          colorBuffer: this[textureVar],
          depth: false
        });
      };

      if (morph.morphPositions) {
        this.rtPositions = createRT('MorphRTPos', 'texturePositions');
      }

      if (morph.morphNormals) {
        this.rtNormals = createRT('MorphRTNrm', 'textureNormals');
      }

      this._textureParams = new Float32Array([morph.morphTextureWidth, morph.morphTextureHeight, 1 / morph.morphTextureWidth, 1 / morph.morphTextureHeight]);

      for (let i = 0; i < this.maxSubmitCount; i++) {
        this['morphBlendTex' + i] = this.device.scope.resolve('morphBlendTex' + i);
      }

      this.morphFactor = this.device.scope.resolve('morphFactor[0]');
      this.zeroTextures = false;
    } else {
      this.maxSubmitCount = 8;
      this._shaderMorphWeights = new Float32Array(this.maxSubmitCount);
      this._shaderMorphWeightsA = new Float32Array(this._shaderMorphWeights.buffer, 0, 4);
      this._shaderMorphWeightsB = new Float32Array(this._shaderMorphWeights.buffer, 4 * 4, 4);
      this._activeVertexBuffers = new Array(this.maxSubmitCount);
    }
  }

  destroy() {
    this.shader = null;
    const morph = this.morph;

    if (morph) {
      this.morph = null;
      morph.decRefCount();

      if (morph.refCount < 1) {
        morph.destroy();
      }
    }

    if (this.rtPositions) {
      this.rtPositions.destroy();
      this.rtPositions = null;
    }

    if (this.texturePositions) {
      this.texturePositions.destroy();
      this.texturePositions = null;
    }

    if (this.rtNormals) {
      this.rtNormals.destroy();
      this.rtNormals = null;
    }

    if (this.textureNormals) {
      this.textureNormals.destroy();
      this.textureNormals = null;
    }
  }

  clone() {
    return new MorphInstance(this.morph);
  }

  _getWeightIndex(key) {
    if (typeof key === 'string') {
      const index = this._weightMap.get(key);

      return index;
    }

    return key;
  }

  getWeight(key) {
    const index = this._getWeightIndex(key);

    return this._weights[index];
  }

  setWeight(key, weight) {
    const index = this._getWeightIndex(key);

    this._weights[index] = weight;
    this._dirty = true;
  }

  _getFragmentShader(numTextures) {
    let fragmentShader = '';

    if (numTextures > 0) {
      fragmentShader += 'varying vec2 uv0;\n' + 'uniform highp float morphFactor[' + numTextures + '];\n';
    }

    for (let i = 0; i < numTextures; i++) {
      fragmentShader += 'uniform highp sampler2D morphBlendTex' + i + ';\n';
    }

    fragmentShader += 'void main (void) {\n' + '    highp vec4 color = vec4(0, 0, 0, 1);\n';

    for (let i = 0; i < numTextures; i++) {
      fragmentShader += '    color.xyz += morphFactor[' + i + '] * texture2D(morphBlendTex' + i + ', uv0).xyz;\n';
    }

    fragmentShader += '    gl_FragColor = color;\n' + '}\n';
    return fragmentShader;
  }

  _getShader(count) {
    let shader = this.shaderCache[count];

    if (!shader) {
      const fs = this._getFragmentShader(count);

      shader = createShaderFromCode(this.device, textureMorphVertexShader, fs, 'textureMorph' + count);
      this.shaderCache[count] = shader;
    }

    return shader;
  }

  _updateTextureRenderTarget(renderTarget, srcTextureName) {
    const device = this.device;

    const submitBatch = (usedCount, blending) => {
      this.morphFactor.setValue(this._shaderMorphWeights);
      device.setBlending(blending);

      if (blending) {
        device.setBlendFunction(BLENDMODE_ONE, BLENDMODE_ONE);
        device.setBlendEquation(BLENDEQUATION_ADD);
      }

      const shader = this._getShader(usedCount);

      drawQuadWithShader(device, renderTarget, shader, undefined, undefined, blending);
    };

    let usedCount = 0;
    let blending = false;
    const count = this._activeTargets.length;

    for (let i = 0; i < count; i++) {
      const activeTarget = this._activeTargets[i];
      const tex = activeTarget.target[srcTextureName];

      if (tex) {
        this['morphBlendTex' + usedCount].setValue(tex);
        this._shaderMorphWeights[usedCount] = activeTarget.weight;
        usedCount++;

        if (usedCount >= this.maxSubmitCount) {
          submitBatch(usedCount, blending);
          usedCount = 0;
          blending = true;
        }
      }
    }

    if (usedCount > 0 || count === 0 && !this.zeroTextures) {
      submitBatch(usedCount, blending);
    }
  }

  _updateTextureMorph() {
    this.device;

    if (this._activeTargets.length > 0 || !this.zeroTextures) {
      this._updateTextureRenderTarget(this.rtPositions, 'texturePositions');

      this._updateTextureRenderTarget(this.rtNormals, 'textureNormals');

      this.zeroTextures = this._activeTargets.length === 0;
    }
  }

  _updateVertexMorph() {
    const count = this.maxSubmitCount;

    for (let i = 0; i < count; i++) {
      this._shaderMorphWeights[i] = 0;
      this._activeVertexBuffers[i] = null;
    }

    let posIndex = 0;
    let nrmIndex = this.morph.morphPositions ? 4 : 0;

    for (let i = 0; i < this._activeTargets.length; i++) {
      const target = this._activeTargets[i].target;

      if (target._vertexBufferPositions) {
        this._activeVertexBuffers[posIndex] = target._vertexBufferPositions;
        this._shaderMorphWeights[posIndex] = this._activeTargets[i].weight;
        posIndex++;
      }

      if (target._vertexBufferNormals) {
        this._activeVertexBuffers[nrmIndex] = target._vertexBufferNormals;
        this._shaderMorphWeights[nrmIndex] = this._activeTargets[i].weight;
        nrmIndex++;
      }
    }
  }

  update() {
    this._dirty = false;
    const targets = this.morph._targets;
    let activeCount = 0;
    const epsilon = 0.00001;

    for (let i = 0; i < targets.length; i++) {
      const absWeight = Math.abs(this.getWeight(i));

      if (absWeight > epsilon) {
        if (this._activeTargets.length <= activeCount) {
          this._activeTargets[activeCount] = {};
        }

        const activeTarget = this._activeTargets[activeCount++];
        activeTarget.absWeight = absWeight;
        activeTarget.weight = this.getWeight(i);
        activeTarget.target = targets[i];
      }
    }

    this._activeTargets.length = activeCount;
    const maxActiveTargets = this.morph.maxActiveTargets;

    if (this._activeTargets.length > maxActiveTargets) {
      this._activeTargets.sort(function (l, r) {
        return l.absWeight < r.absWeight ? 1 : r.absWeight < l.absWeight ? -1 : 0;
      });

      this._activeTargets.length = maxActiveTargets;
    }

    if (this.morph.useTextureMorph) {
      this._updateTextureMorph();
    } else {
      this._updateVertexMorph();
    }
  }

}

class Model {
  constructor() {
    this.graph = null;
    this.meshInstances = [];
    this.skinInstances = [];
    this.morphInstances = [];
    this.cameras = [];
    this.lights = [];
    this._shadersVersion = 0;
    this._immutable = false;
  }

  getGraph() {
    return this.graph;
  }

  setGraph(graph) {
    this.graph = graph;
  }

  getCameras() {
    return this.cameras;
  }

  setCameras(cameras) {
    this.cameras = cameras;
  }

  getLights() {
    return this.lights;
  }

  setLights(lights) {
    this.lights = lights;
  }

  getMaterials() {
    const materials = [];

    for (let i = 0; i < this.meshInstances.length; i++) {
      const meshInstance = this.meshInstances[i];

      if (materials.indexOf(meshInstance.material) === -1) {
        materials.push(meshInstance.material);
      }
    }

    return materials;
  }

  clone() {
    const srcNodes = [];
    const cloneNodes = [];

    const _duplicate = function _duplicate(node) {
      const newNode = node.clone();
      srcNodes.push(node);
      cloneNodes.push(newNode);

      for (let idx = 0; idx < node._children.length; idx++) {
        newNode.addChild(_duplicate(node._children[idx]));
      }

      return newNode;
    };

    const cloneGraph = _duplicate(this.graph);

    const cloneMeshInstances = [];
    const cloneSkinInstances = [];
    const cloneMorphInstances = [];

    for (let i = 0; i < this.skinInstances.length; i++) {
      const skin = this.skinInstances[i].skin;
      const cloneSkinInstance = new SkinInstance(skin);
      const bones = [];

      for (let j = 0; j < skin.boneNames.length; j++) {
        const boneName = skin.boneNames[j];
        const bone = cloneGraph.findByName(boneName);
        bones.push(bone);
      }

      cloneSkinInstance.bones = bones;
      cloneSkinInstances.push(cloneSkinInstance);
    }

    for (let i = 0; i < this.morphInstances.length; i++) {
      const morph = this.morphInstances[i].morph;
      const cloneMorphInstance = new MorphInstance(morph);
      cloneMorphInstances.push(cloneMorphInstance);
    }

    for (let i = 0; i < this.meshInstances.length; i++) {
      const meshInstance = this.meshInstances[i];
      const nodeIndex = srcNodes.indexOf(meshInstance.node);
      const cloneMeshInstance = new MeshInstance(meshInstance.mesh, meshInstance.material, cloneNodes[nodeIndex]);

      if (meshInstance.skinInstance) {
        const skinInstanceIndex = this.skinInstances.indexOf(meshInstance.skinInstance);
        cloneMeshInstance.skinInstance = cloneSkinInstances[skinInstanceIndex];
      }

      if (meshInstance.morphInstance) {
        const morphInstanceIndex = this.morphInstances.indexOf(meshInstance.morphInstance);
        cloneMeshInstance.morphInstance = cloneMorphInstances[morphInstanceIndex];
      }

      cloneMeshInstances.push(cloneMeshInstance);
    }

    const clone = new Model();
    clone.graph = cloneGraph;
    clone.meshInstances = cloneMeshInstances;
    clone.skinInstances = cloneSkinInstances;
    clone.morphInstances = cloneMorphInstances;
    clone.getGraph().syncHierarchy();
    return clone;
  }

  destroy() {
    const meshInstances = this.meshInstances;

    for (let i = 0; i < meshInstances.length; i++) {
      meshInstances[i].destroy();
    }

    this.meshInstances.length = 0;
  }

  generateWireframe() {
    MeshInstance._prepareRenderStyleForArray(this.meshInstances, RENDERSTYLE_WIREFRAME);
  }

}

class MorphTarget {
  constructor(options) {
    this.used = false;

    if (arguments.length === 2) {
      options = arguments[1];
    }

    this.options = options;
    this._name = options.name;
    this._defaultWeight = options.defaultWeight || 0;
    this.aabb = options.aabb;

    if (!this.aabb) {
      this.aabb = new BoundingBox();
      if (options.deltaPositions) this.aabb.compute(options.deltaPositions);
    }

    this.deltaPositions = options.deltaPositions;
  }

  destroy() {
    var _this$_vertexBufferPo, _this$_vertexBufferNo, _this$texturePosition, _this$textureNormals;

    (_this$_vertexBufferPo = this._vertexBufferPositions) == null ? void 0 : _this$_vertexBufferPo.destroy();
    this._vertexBufferPositions = null;
    (_this$_vertexBufferNo = this._vertexBufferNormals) == null ? void 0 : _this$_vertexBufferNo.destroy();
    this._vertexBufferNormals = null;
    (_this$texturePosition = this.texturePositions) == null ? void 0 : _this$texturePosition.destroy();
    this.texturePositions = null;
    (_this$textureNormals = this.textureNormals) == null ? void 0 : _this$textureNormals.destroy();
    this.textureNormals = null;
  }

  get name() {
    return this._name;
  }

  get defaultWeight() {
    return this._defaultWeight;
  }

  get morphPositions() {
    return !!this._vertexBufferPositions || !!this.texturePositions;
  }

  get morphNormals() {
    return !!this._vertexBufferNormals || !!this.textureNormals;
  }

  clone() {
    return new MorphTarget(this.options);
  }

  _postInit() {
    if (!this.options.preserveData) {
      this.options = null;
    }

    this.used = true;
  }

  _initVertexBuffers(graphicsDevice) {
    const options = this.options;
    this._vertexBufferPositions = this._createVertexBuffer(graphicsDevice, options.deltaPositions, options.deltaPositionsType);
    this._vertexBufferNormals = this._createVertexBuffer(graphicsDevice, options.deltaNormals, options.deltaNormalsType);

    if (this._vertexBufferPositions) {
      this.deltaPositions = this._vertexBufferPositions.lock();
    }
  }

  _createVertexBuffer(device, data, dataType = TYPE_FLOAT32) {
    if (data) {
      const formatDesc = [{
        semantic: SEMANTIC_ATTR0,
        components: 3,
        type: dataType
      }];
      return new VertexBuffer(device, new VertexFormat(device, formatDesc), data.length / 3, BUFFER_STATIC, data);
    }

    return null;
  }

  _setTexture(name, texture) {
    this[name] = texture;
  }

}

const particle = {
  generateKey: function (options) {
    let key = "particle";

    for (const prop in options) {
      if (options.hasOwnProperty(prop)) {
        key += options[prop];
      }
    }

    return key;
  },
  _animTex: function (options) {
    let vshader = "";
    vshader += options.animTexLoop ? shaderChunks.particleAnimFrameLoopVS : shaderChunks.particleAnimFrameClampVS;
    vshader += shaderChunks.particleAnimTexVS;
    return vshader;
  },
  createShaderDefinition: function (device, options) {
    let vshader = "";
    let fshader = precisionCode(device) + "\n";
    fshader += '#define PARTICLE\n';

    if (device.webgl2) {
      vshader += "#define GL2\n";
      fshader += "#define GL2\n";
    }

    vshader += "#define VERTEXSHADER\n";
    if (options.mesh) vshader += "#define USE_MESH\n";
    if (options.localSpace) vshader += "#define LOCAL_SPACE\n";
    if (options.screenSpace) vshader += "#define SCREEN_SPACE\n";
    if (options.animTex) vshader += "\nuniform vec2 animTexTilesParams;\n";
    if (options.animTex) vshader += "\nuniform vec4 animTexParams;\n";
    if (options.animTex) vshader += "\nuniform vec2 animTexIndexParams;\n";
    if (options.normal === 2) vshader += "\nvarying mat3 ParticleMat;\n";
    if (options.normal === 1) vshader += "\nvarying vec3 Normal;\n";
    if (options.soft) vshader += "\nvarying float vDepth;\n";
    const faceVS = options.customFace ? shaderChunks.particle_customFaceVS : shaderChunks.particle_billboardVS;

    if (!options.useCpu) {
      vshader += shaderChunks.particle_initVS;
      vshader += options.pack8 ? shaderChunks.particleInputRgba8PS : shaderChunks.particleInputFloatPS;
      if (options.soft > 0) vshader += shaderChunks.screenDepthPS;
      vshader += shaderChunks.particleVS;
      if (options.localSpace) vshader += shaderChunks.particle_localShiftVS;
      if (options.animTex) vshader += this._animTex(options);
      if (options.wrap) vshader += shaderChunks.particle_wrapVS;
      if (options.alignToMotion) vshader += shaderChunks.particle_pointAlongVS;
      vshader += options.mesh ? shaderChunks.particle_meshVS : faceVS;
      if (options.normal === 1) vshader += shaderChunks.particle_normalVS;
      if (options.normal === 2) vshader += shaderChunks.particle_TBNVS;
      if (options.stretch > 0.0) vshader += shaderChunks.particle_stretchVS;
      vshader += shaderChunks.particle_endVS;
      if (options.soft > 0) vshader += shaderChunks.particle_softVS;
    } else {
      if (options.soft > 0) vshader += shaderChunks.screenDepthPS;
      vshader += shaderChunks.particle_cpuVS;
      if (options.localSpace) vshader += shaderChunks.particle_localShiftVS;
      if (options.animTex) vshader += this._animTex(options);
      if (options.alignToMotion) vshader += shaderChunks.particle_pointAlongVS;
      vshader += options.mesh ? shaderChunks.particle_meshVS : faceVS;
      if (options.normal === 1) vshader += shaderChunks.particle_normalVS;
      if (options.normal === 2) vshader += shaderChunks.particle_TBNVS;
      if (options.stretch > 0.0) vshader += shaderChunks.particle_stretchVS;
      vshader += shaderChunks.particle_cpu_endVS;
      if (options.soft > 0) vshader += shaderChunks.particle_softVS;
    }

    vshader += "}\n";

    if (options.normal > 0) {
      if (options.normal === 1) {
        fshader += "\nvarying vec3 Normal;\n";
      } else if (options.normal === 2) {
        fshader += "\nvarying mat3 ParticleMat;\n";
      }

      fshader += "\nuniform vec3 lightCube[6];\n";
    }

    if (options.soft) fshader += "\nvarying float vDepth;\n";
    if (options.normal === 0 && options.fog === "none") options.srgb = false;
    fshader += shaderChunks.decodePS;
    fshader += gammaCode(options.gamma);
    fshader += tonemapCode(options.toneMap);

    if (options.fog === 'linear') {
      fshader += shaderChunks.fogLinearPS;
    } else if (options.fog === 'exp') {
      fshader += shaderChunks.fogExpPS;
    } else if (options.fog === 'exp2') {
      fshader += shaderChunks.fogExp2PS;
    } else {
      fshader += shaderChunks.fogNonePS;
    }

    if (options.normal === 2) fshader += "\nuniform sampler2D normalMap;\n";
    if (options.soft > 0) fshader += shaderChunks.screenDepthPS;
    fshader += shaderChunks.particlePS;
    if (options.soft > 0) fshader += shaderChunks.particle_softPS;
    if (options.normal === 1) fshader += "\nvec3 normal = Normal;\n";
    if (options.normal === 2) fshader += shaderChunks.particle_normalMapPS;
    if (options.normal > 0) fshader += options.halflambert ? shaderChunks.particle_halflambertPS : shaderChunks.particle_lambertPS;
    if (options.normal > 0) fshader += shaderChunks.particle_lightingPS;

    if (options.blend === BLEND_NORMAL) {
      fshader += shaderChunks.particle_blendNormalPS;
    } else if (options.blend === BLEND_ADDITIVE) {
      fshader += shaderChunks.particle_blendAddPS;
    } else if (options.blend === BLEND_MULTIPLICATIVE) {
      fshader += shaderChunks.particle_blendMultiplyPS;
    }

    fshader += shaderChunks.particle_endPS;
    const attributes = collectAttribs(vshader);
    return {
      attributes: attributes,
      vshader: vshader,
      fshader: fshader
    };
  }
};

let nonUniformScale;
let uniformScale = 1;
const particleTexChannels$1 = 4;
const rotMat = new Mat4();
const rotMatInv = new Mat4();
const randomPosTformed = new Vec3();
const randomPos = new Vec3();
const rndFactor3Vec = new Vec3();
const particlePosPrev = new Vec3();
const velocityVec = new Vec3();
const localVelocityVec = new Vec3();
const velocityVec2 = new Vec3();
const localVelocityVec2 = new Vec3();
const radialVelocityVec = new Vec3();
const particlePos = new Vec3();
const particleFinalPos = new Vec3();
const moveDirVec = new Vec3();
const tmpVec3$1 = new Vec3();

function frac(f) {
  return f - Math.floor(f);
}

function saturate$1(x) {
  return Math.max(Math.min(x, 1), 0);
}

function glMod(x, y) {
  return x - y * Math.floor(x / y);
}

function encodeFloatRGBA(v) {
  let encX = frac(v);
  let encY = frac(255.0 * v);
  let encZ = frac(65025.0 * v);
  let encW = frac(160581375.0 * v);
  encX -= encY / 255.0;
  encY -= encZ / 255.0;
  encZ -= encW / 255.0;
  encW -= encW / 255.0;
  return [encX, encY, encZ, encW];
}

function encodeFloatRG(v) {
  let encX = frac(v);
  let encY = frac(255.0 * v);
  encX -= encY / 255.0;
  encY -= encY / 255.0;
  return [encX, encY];
}

class ParticleCPUUpdater {
  constructor(emitter) {
    this._emitter = emitter;
  }

  calcSpawnPosition(particleTex, spawnMatrix, extentsInnerRatioUniform, emitterPos, i) {
    const emitter = this._emitter;
    const rX = Math.random();
    const rY = Math.random();
    const rZ = Math.random();
    const rW = Math.random();

    if (emitter.useCpu) {
      particleTex[i * particleTexChannels$1 + 0 + emitter.numParticlesPot * 2 * particleTexChannels$1] = rX;
      particleTex[i * particleTexChannels$1 + 1 + emitter.numParticlesPot * 2 * particleTexChannels$1] = rY;
      particleTex[i * particleTexChannels$1 + 2 + emitter.numParticlesPot * 2 * particleTexChannels$1] = rZ;
    }

    randomPos.x = rX - 0.5;
    randomPos.y = rY - 0.5;
    randomPos.z = rZ - 0.5;

    if (emitter.emitterShape === EMITTERSHAPE_BOX) {
      const max = Math.max(Math.abs(randomPos.x), Math.max(Math.abs(randomPos.y), Math.abs(randomPos.z)));
      const edgeX = max + (0.5 - max) * extentsInnerRatioUniform[0];
      const edgeY = max + (0.5 - max) * extentsInnerRatioUniform[1];
      const edgeZ = max + (0.5 - max) * extentsInnerRatioUniform[2];
      randomPos.x = edgeX * (max === Math.abs(randomPos.x) ? Math.sign(randomPos.x) : 2 * randomPos.x);
      randomPos.y = edgeY * (max === Math.abs(randomPos.y) ? Math.sign(randomPos.y) : 2 * randomPos.y);
      randomPos.z = edgeZ * (max === Math.abs(randomPos.z) ? Math.sign(randomPos.z) : 2 * randomPos.z);
      if (!emitter.localSpace) randomPosTformed.copy(emitterPos).add(spawnMatrix.transformPoint(randomPos));else randomPosTformed.copy(spawnMatrix.transformPoint(randomPos));
    } else {
      randomPos.normalize();
      const spawnBoundsSphereInnerRatio = emitter.emitterRadius === 0 ? 0 : emitter.emitterRadiusInner / emitter.emitterRadius;
      const r = rW * (1.0 - spawnBoundsSphereInnerRatio) + spawnBoundsSphereInnerRatio;
      if (!emitter.localSpace) randomPosTformed.copy(emitterPos).add(randomPos.mulScalar(r * emitter.emitterRadius));else randomPosTformed.copy(randomPos.mulScalar(r * emitter.emitterRadius));
    }

    const particleRate = math$1.lerp(emitter.rate, emitter.rate2, rX);
    let startSpawnTime = -particleRate * i;

    if (emitter.pack8) {
      const packX = (randomPosTformed.x - emitter.worldBounds.center.x) / emitter.worldBoundsSize.x + 0.5;
      const packY = (randomPosTformed.y - emitter.worldBounds.center.y) / emitter.worldBoundsSize.y + 0.5;
      const packZ = (randomPosTformed.z - emitter.worldBounds.center.z) / emitter.worldBoundsSize.z + 0.5;
      let packA = math$1.lerp(emitter.startAngle * math$1.DEG_TO_RAD, emitter.startAngle2 * math$1.DEG_TO_RAD, rX);
      packA = packA % (Math.PI * 2) / (Math.PI * 2);
      const rg0 = encodeFloatRG(packX);
      particleTex[i * particleTexChannels$1] = rg0[0];
      particleTex[i * particleTexChannels$1 + 1] = rg0[1];
      const ba0 = encodeFloatRG(packY);
      particleTex[i * particleTexChannels$1 + 2] = ba0[0];
      particleTex[i * particleTexChannels$1 + 3] = ba0[1];
      const rg1 = encodeFloatRG(packZ);
      particleTex[i * particleTexChannels$1 + 0 + emitter.numParticlesPot * particleTexChannels$1] = rg1[0];
      particleTex[i * particleTexChannels$1 + 1 + emitter.numParticlesPot * particleTexChannels$1] = rg1[1];
      const ba1 = encodeFloatRG(packA);
      particleTex[i * particleTexChannels$1 + 2 + emitter.numParticlesPot * particleTexChannels$1] = ba1[0];
      particleTex[i * particleTexChannels$1 + 3 + emitter.numParticlesPot * particleTexChannels$1] = ba1[1];
      const a2 = 1.0;
      particleTex[i * particleTexChannels$1 + 3 + emitter.numParticlesPot * particleTexChannels$1 * 2] = a2;
      const maxNegLife = Math.max(emitter.lifetime, (emitter.numParticles - 1.0) * Math.max(emitter.rate, emitter.rate2));
      const maxPosLife = emitter.lifetime + 1.0;
      startSpawnTime = (startSpawnTime + maxNegLife) / (maxNegLife + maxPosLife);
      const rgba3 = encodeFloatRGBA(startSpawnTime);
      particleTex[i * particleTexChannels$1 + 0 + emitter.numParticlesPot * particleTexChannels$1 * 3] = rgba3[0];
      particleTex[i * particleTexChannels$1 + 1 + emitter.numParticlesPot * particleTexChannels$1 * 3] = rgba3[1];
      particleTex[i * particleTexChannels$1 + 2 + emitter.numParticlesPot * particleTexChannels$1 * 3] = rgba3[2];
      particleTex[i * particleTexChannels$1 + 3 + emitter.numParticlesPot * particleTexChannels$1 * 3] = rgba3[3];
    } else {
      particleTex[i * particleTexChannels$1] = randomPosTformed.x;
      particleTex[i * particleTexChannels$1 + 1] = randomPosTformed.y;
      particleTex[i * particleTexChannels$1 + 2] = randomPosTformed.z;
      particleTex[i * particleTexChannels$1 + 3] = math$1.lerp(emitter.startAngle * math$1.DEG_TO_RAD, emitter.startAngle2 * math$1.DEG_TO_RAD, rX);
      particleTex[i * particleTexChannels$1 + 3 + emitter.numParticlesPot * particleTexChannels$1] = startSpawnTime;
    }
  }

  update(data, vbToSort, particleTex, spawnMatrix, extentsInnerRatioUniform, emitterPos, delta, isOnStop) {
    let a, b, c;
    const emitter = this._emitter;

    if (emitter.meshInstance.node) {
      const fullMat = emitter.meshInstance.node.worldTransform;

      for (let j = 0; j < 12; j++) {
        rotMat.data[j] = fullMat.data[j];
      }

      rotMatInv.copy(rotMat);
      rotMatInv.invert();
      nonUniformScale = emitter.meshInstance.node.localScale;
      uniformScale = Math.max(Math.max(nonUniformScale.x, nonUniformScale.y), nonUniformScale.z);
    }

    emitterPos = emitter.meshInstance.node === null || emitter.localSpace ? Vec3.ZERO : emitter.meshInstance.node.getPosition();
    const posCam = emitter.camera ? emitter.camera._node.getPosition() : Vec3.ZERO;
    const vertSize = !emitter.useMesh ? 15 : 17;
    let cf, cc;
    let rotSpeed, rotSpeed2, scale2, alpha, alpha2, radialSpeed, radialSpeed2;
    const precision1 = emitter.precision - 1;

    for (let i = 0; i < emitter.numParticles; i++) {
      const id = Math.floor(emitter.vbCPU[i * emitter.numParticleVerts * (emitter.useMesh ? 6 : 4) + 3]);
      const rndFactor = particleTex[id * particleTexChannels$1 + 0 + emitter.numParticlesPot * 2 * particleTexChannels$1];
      rndFactor3Vec.x = rndFactor;
      rndFactor3Vec.y = particleTex[id * particleTexChannels$1 + 1 + emitter.numParticlesPot * 2 * particleTexChannels$1];
      rndFactor3Vec.z = particleTex[id * particleTexChannels$1 + 2 + emitter.numParticlesPot * 2 * particleTexChannels$1];
      const particleRate = emitter.rate + (emitter.rate2 - emitter.rate) * rndFactor;
      const particleLifetime = emitter.lifetime;
      let life = particleTex[id * particleTexChannels$1 + 3 + emitter.numParticlesPot * particleTexChannels$1] + delta;
      const nlife = saturate$1(life / particleLifetime);
      let scale = 0;
      let alphaDiv = 0;
      const angle = 0;
      const respawn = life - delta <= 0.0 || life >= particleLifetime;

      if (respawn) {
        this.calcSpawnPosition(particleTex, spawnMatrix, extentsInnerRatioUniform, emitterPos, id);
      }

      let particleEnabled = life > 0.0 && life < particleLifetime;

      if (particleEnabled) {
        c = nlife * precision1;
        cf = Math.floor(c);
        cc = Math.ceil(c);
        c %= 1;
        a = emitter.qRotSpeed[cf];
        b = emitter.qRotSpeed[cc];
        rotSpeed = a + (b - a) * c;
        a = emitter.qRotSpeed2[cf];
        b = emitter.qRotSpeed2[cc];
        rotSpeed2 = a + (b - a) * c;
        a = emitter.qScale[cf];
        b = emitter.qScale[cc];
        scale = a + (b - a) * c;
        a = emitter.qScale2[cf];
        b = emitter.qScale2[cc];
        scale2 = a + (b - a) * c;
        a = emitter.qAlpha[cf];
        b = emitter.qAlpha[cc];
        alpha = a + (b - a) * c;
        a = emitter.qAlpha2[cf];
        b = emitter.qAlpha2[cc];
        alpha2 = a + (b - a) * c;
        a = emitter.qRadialSpeed[cf];
        b = emitter.qRadialSpeed[cc];
        radialSpeed = a + (b - a) * c;
        a = emitter.qRadialSpeed2[cf];
        b = emitter.qRadialSpeed2[cc];
        radialSpeed2 = a + (b - a) * c;
        radialSpeed += (radialSpeed2 - radialSpeed) * (rndFactor * 100.0 % 1.0);
        particlePosPrev.x = particleTex[id * particleTexChannels$1];
        particlePosPrev.y = particleTex[id * particleTexChannels$1 + 1];
        particlePosPrev.z = particleTex[id * particleTexChannels$1 + 2];
        if (!emitter.localSpace) radialVelocityVec.copy(particlePosPrev).sub(emitterPos);else radialVelocityVec.copy(particlePosPrev);
        radialVelocityVec.normalize().mulScalar(radialSpeed);
        cf *= 3;
        cc *= 3;
        a = emitter.qLocalVelocity[cf];
        b = emitter.qLocalVelocity[cc];
        localVelocityVec.x = a + (b - a) * c;
        a = emitter.qLocalVelocity[cf + 1];
        b = emitter.qLocalVelocity[cc + 1];
        localVelocityVec.y = a + (b - a) * c;
        a = emitter.qLocalVelocity[cf + 2];
        b = emitter.qLocalVelocity[cc + 2];
        localVelocityVec.z = a + (b - a) * c;
        a = emitter.qLocalVelocity2[cf];
        b = emitter.qLocalVelocity2[cc];
        localVelocityVec2.x = a + (b - a) * c;
        a = emitter.qLocalVelocity2[cf + 1];
        b = emitter.qLocalVelocity2[cc + 1];
        localVelocityVec2.y = a + (b - a) * c;
        a = emitter.qLocalVelocity2[cf + 2];
        b = emitter.qLocalVelocity2[cc + 2];
        localVelocityVec2.z = a + (b - a) * c;
        a = emitter.qVelocity[cf];
        b = emitter.qVelocity[cc];
        velocityVec.x = a + (b - a) * c;
        a = emitter.qVelocity[cf + 1];
        b = emitter.qVelocity[cc + 1];
        velocityVec.y = a + (b - a) * c;
        a = emitter.qVelocity[cf + 2];
        b = emitter.qVelocity[cc + 2];
        velocityVec.z = a + (b - a) * c;
        a = emitter.qVelocity2[cf];
        b = emitter.qVelocity2[cc];
        velocityVec2.x = a + (b - a) * c;
        a = emitter.qVelocity2[cf + 1];
        b = emitter.qVelocity2[cc + 1];
        velocityVec2.y = a + (b - a) * c;
        a = emitter.qVelocity2[cf + 2];
        b = emitter.qVelocity2[cc + 2];
        velocityVec2.z = a + (b - a) * c;
        localVelocityVec.x += (localVelocityVec2.x - localVelocityVec.x) * rndFactor3Vec.x;
        localVelocityVec.y += (localVelocityVec2.y - localVelocityVec.y) * rndFactor3Vec.y;
        localVelocityVec.z += (localVelocityVec2.z - localVelocityVec.z) * rndFactor3Vec.z;

        if (emitter.initialVelocity > 0) {
          if (emitter.emitterShape === EMITTERSHAPE_SPHERE) {
            randomPos.copy(rndFactor3Vec).mulScalar(2).sub(Vec3.ONE).normalize();
            localVelocityVec.add(randomPos.mulScalar(emitter.initialVelocity));
          } else {
            localVelocityVec.add(Vec3.FORWARD.mulScalar(emitter.initialVelocity));
          }
        }

        velocityVec.x += (velocityVec2.x - velocityVec.x) * rndFactor3Vec.x;
        velocityVec.y += (velocityVec2.y - velocityVec.y) * rndFactor3Vec.y;
        velocityVec.z += (velocityVec2.z - velocityVec.z) * rndFactor3Vec.z;
        rotSpeed += (rotSpeed2 - rotSpeed) * rndFactor3Vec.y;
        scale = (scale + (scale2 - scale) * (rndFactor * 10000.0 % 1.0)) * uniformScale;
        alphaDiv = (alpha2 - alpha) * (rndFactor * 1000.0 % 1.0);

        if (emitter.meshInstance.node) {
          if (!emitter.localSpace) {
            rotMat.transformPoint(localVelocityVec, localVelocityVec);
          } else {
            localVelocityVec.x /= nonUniformScale.x;
            localVelocityVec.y /= nonUniformScale.y;
            localVelocityVec.z /= nonUniformScale.z;
          }
        }

        if (!emitter.localSpace) {
          localVelocityVec.add(velocityVec.mul(nonUniformScale));
          localVelocityVec.add(radialVelocityVec.mul(nonUniformScale));
        } else {
          rotMatInv.transformPoint(velocityVec, velocityVec);
          localVelocityVec.add(velocityVec).add(radialVelocityVec);
        }

        moveDirVec.copy(localVelocityVec);
        particlePos.copy(particlePosPrev).add(localVelocityVec.mulScalar(delta));
        particleFinalPos.copy(particlePos);
        particleTex[id * particleTexChannels$1] = particleFinalPos.x;
        particleTex[id * particleTexChannels$1 + 1] = particleFinalPos.y;
        particleTex[id * particleTexChannels$1 + 2] = particleFinalPos.z;
        particleTex[id * particleTexChannels$1 + 3] += rotSpeed * delta;

        if (emitter.wrap && emitter.wrapBounds) {
          if (!emitter.localSpace) particleFinalPos.sub(emitterPos);
          particleFinalPos.x = glMod(particleFinalPos.x, emitter.wrapBounds.x) - emitter.wrapBounds.x * 0.5;
          particleFinalPos.y = glMod(particleFinalPos.y, emitter.wrapBounds.y) - emitter.wrapBounds.y * 0.5;
          particleFinalPos.z = glMod(particleFinalPos.z, emitter.wrapBounds.z) - emitter.wrapBounds.z * 0.5;
          if (!emitter.localSpace) particleFinalPos.add(emitterPos);
        }

        if (emitter.sort > 0) {
          if (emitter.sort === 1) {
            tmpVec3$1.copy(particleFinalPos).sub(posCam);
            emitter.particleDistance[id] = -(tmpVec3$1.x * tmpVec3$1.x + tmpVec3$1.y * tmpVec3$1.y + tmpVec3$1.z * tmpVec3$1.z);
          } else if (emitter.sort === 2) {
            emitter.particleDistance[id] = life;
          } else if (emitter.sort === 3) {
            emitter.particleDistance[id] = -life;
          }
        }
      }

      if (isOnStop) {
        if (life < 0) {
          particleTex[id * particleTexChannels$1 + 3 + emitter.numParticlesPot * 2 * particleTexChannels$1] = -1;
        }
      } else {
        if (life >= particleLifetime) {
          life -= Math.max(particleLifetime, (emitter.numParticles - 1) * particleRate);
          particleTex[id * particleTexChannels$1 + 3 + emitter.numParticlesPot * 2 * particleTexChannels$1] = emitter.loop ? 1 : -1;
        }

        if (life < 0 && emitter.loop) {
          particleTex[id * particleTexChannels$1 + 3 + emitter.numParticlesPot * 2 * particleTexChannels$1] = 1;
        }
      }

      if (particleTex[id * particleTexChannels$1 + 3 + emitter.numParticlesPot * 2 * particleTexChannels$1] < 0) particleEnabled = false;
      particleTex[id * particleTexChannels$1 + 3 + emitter.numParticlesPot * particleTexChannels$1] = life;

      for (let v = 0; v < emitter.numParticleVerts; v++) {
        const vbOffset = (i * emitter.numParticleVerts + v) * (emitter.useMesh ? 6 : 4);
        let quadX = emitter.vbCPU[vbOffset];
        let quadY = emitter.vbCPU[vbOffset + 1];
        let quadZ = emitter.vbCPU[vbOffset + 2];

        if (!particleEnabled) {
          quadX = quadY = quadZ = 0;
        }

        const w = i * emitter.numParticleVerts * vertSize + v * vertSize;
        data[w] = particleFinalPos.x;
        data[w + 1] = particleFinalPos.y;
        data[w + 2] = particleFinalPos.z;
        data[w + 3] = nlife;
        data[w + 4] = emitter.alignToMotion ? angle : particleTex[id * particleTexChannels$1 + 3];
        data[w + 5] = scale;
        data[w + 6] = alphaDiv;
        data[w + 7] = moveDirVec.x;
        data[w + 8] = quadX;
        data[w + 9] = quadY;
        data[w + 10] = quadZ;
        data[w + 11] = moveDirVec.y;
        data[w + 12] = id;
        data[w + 13] = moveDirVec.z;
        data[w + 14] = emitter.vbCPU[vbOffset + 3];

        if (emitter.useMesh) {
          data[w + 15] = emitter.vbCPU[vbOffset + 4];
          data[w + 16] = emitter.vbCPU[vbOffset + 5];
        }
      }
    }

    if (emitter.sort > PARTICLESORT_NONE && emitter.camera) {
      const vbStride = emitter.useMesh ? 6 : 4;
      const particleDistance = emitter.particleDistance;

      for (let i = 0; i < emitter.numParticles; i++) {
        vbToSort[i][0] = i;
        vbToSort[i][1] = particleDistance[Math.floor(emitter.vbCPU[i * emitter.numParticleVerts * vbStride + 3])];
      }

      emitter.vbOld.set(emitter.vbCPU);
      vbToSort.sort(function (p1, p2) {
        return p1[1] - p2[1];
      });

      for (let i = 0; i < emitter.numParticles; i++) {
        const src = vbToSort[i][0] * emitter.numParticleVerts * vbStride;
        const dest = i * emitter.numParticleVerts * vbStride;

        for (let j = 0; j < emitter.numParticleVerts * vbStride; j++) {
          emitter.vbCPU[dest + j] = emitter.vbOld[src + j];
        }
      }
    }
  }

}

const spawnMatrix3 = new Mat3();
const emitterMatrix3 = new Mat3();
const emitterMatrix3Inv = new Mat3();

class ParticleGPUUpdater {
  constructor(emitter, gd) {
    this._emitter = emitter;
    this.frameRandomUniform = new Float32Array(3);
    this.emitterPosUniform = new Float32Array(3);
    this.emitterScaleUniform = new Float32Array([1, 1, 1]);
    this.worldBoundsMulUniform = new Float32Array(3);
    this.worldBoundsAddUniform = new Float32Array(3);
    this.inBoundsSizeUniform = new Float32Array(3);
    this.inBoundsCenterUniform = new Float32Array(3);
    this.constantParticleTexIN = gd.scope.resolve('particleTexIN');
    this.constantParticleTexOUT = gd.scope.resolve('particleTexOUT');
    this.constantEmitterPos = gd.scope.resolve('emitterPos');
    this.constantEmitterScale = gd.scope.resolve('emitterScale');
    this.constantSpawnBounds = gd.scope.resolve('spawnBounds');
    this.constantSpawnPosInnerRatio = gd.scope.resolve('spawnPosInnerRatio');
    this.constantSpawnBoundsSphere = gd.scope.resolve('spawnBoundsSphere');
    this.constantSpawnBoundsSphereInnerRatio = gd.scope.resolve('spawnBoundsSphereInnerRatio');
    this.constantInitialVelocity = gd.scope.resolve('initialVelocity');
    this.constantFrameRandom = gd.scope.resolve('frameRandom');
    this.constantDelta = gd.scope.resolve('delta');
    this.constantRate = gd.scope.resolve('rate');
    this.constantRateDiv = gd.scope.resolve('rateDiv');
    this.constantLifetime = gd.scope.resolve('lifetime');
    this.constantGraphSampleSize = gd.scope.resolve('graphSampleSize');
    this.constantGraphNumSamples = gd.scope.resolve('graphNumSamples');
    this.constantInternalTex0 = gd.scope.resolve('internalTex0');
    this.constantInternalTex1 = gd.scope.resolve('internalTex1');
    this.constantInternalTex2 = gd.scope.resolve('internalTex2');
    this.constantInternalTex3 = gd.scope.resolve('internalTex3');
    this.constantEmitterMatrix = gd.scope.resolve('emitterMatrix');
    this.constantEmitterMatrixInv = gd.scope.resolve('emitterMatrixInv');
    this.constantNumParticles = gd.scope.resolve('numParticles');
    this.constantNumParticlesPot = gd.scope.resolve('numParticlesPot');
    this.constantLocalVelocityDivMult = gd.scope.resolve('localVelocityDivMult');
    this.constantVelocityDivMult = gd.scope.resolve('velocityDivMult');
    this.constantRotSpeedDivMult = gd.scope.resolve('rotSpeedDivMult');
    this.constantSeed = gd.scope.resolve('seed');
    this.constantStartAngle = gd.scope.resolve('startAngle');
    this.constantStartAngle2 = gd.scope.resolve('startAngle2');
    this.constantOutBoundsMul = gd.scope.resolve('outBoundsMul');
    this.constantOutBoundsAdd = gd.scope.resolve('outBoundsAdd');
    this.constantInBoundsSize = gd.scope.resolve('inBoundsSize');
    this.constantInBoundsCenter = gd.scope.resolve('inBoundsCenter');
    this.constantMaxVel = gd.scope.resolve('maxVel');
    this.constantFaceTangent = gd.scope.resolve('faceTangent');
    this.constantFaceBinorm = gd.scope.resolve('faceBinorm');
  }

  _setInputBounds() {
    this.inBoundsSizeUniform[0] = this._emitter.prevWorldBoundsSize.x;
    this.inBoundsSizeUniform[1] = this._emitter.prevWorldBoundsSize.y;
    this.inBoundsSizeUniform[2] = this._emitter.prevWorldBoundsSize.z;
    this.constantInBoundsSize.setValue(this.inBoundsSizeUniform);
    this.inBoundsCenterUniform[0] = this._emitter.prevWorldBoundsCenter.x;
    this.inBoundsCenterUniform[1] = this._emitter.prevWorldBoundsCenter.y;
    this.inBoundsCenterUniform[2] = this._emitter.prevWorldBoundsCenter.z;
    this.constantInBoundsCenter.setValue(this.inBoundsCenterUniform);
  }

  randomize() {
    this.frameRandomUniform[0] = Math.random();
    this.frameRandomUniform[1] = Math.random();
    this.frameRandomUniform[2] = Math.random();
  }

  update(device, spawnMatrix, extentsInnerRatioUniform, delta, isOnStop) {
    const emitter = this._emitter;
    device.setBlending(false);
    device.setColorWrite(true, true, true, true);
    device.setCullMode(CULLFACE_NONE);
    device.setDepthTest(false);
    device.setDepthWrite(false);
    this.randomize();
    this.constantGraphSampleSize.setValue(1.0 / emitter.precision);
    this.constantGraphNumSamples.setValue(emitter.precision);
    this.constantNumParticles.setValue(emitter.numParticles);
    this.constantNumParticlesPot.setValue(emitter.numParticlesPot);
    this.constantInternalTex0.setValue(emitter.internalTex0);
    this.constantInternalTex1.setValue(emitter.internalTex1);
    this.constantInternalTex2.setValue(emitter.internalTex2);
    this.constantInternalTex3.setValue(emitter.internalTex3);
    const node = emitter.meshInstance.node;
    const emitterScale = node === null ? Vec3.ONE : node.localScale;

    if (emitter.pack8) {
      this.worldBoundsMulUniform[0] = emitter.worldBoundsMul.x;
      this.worldBoundsMulUniform[1] = emitter.worldBoundsMul.y;
      this.worldBoundsMulUniform[2] = emitter.worldBoundsMul.z;
      this.constantOutBoundsMul.setValue(this.worldBoundsMulUniform);
      this.worldBoundsAddUniform[0] = emitter.worldBoundsAdd.x;
      this.worldBoundsAddUniform[1] = emitter.worldBoundsAdd.y;
      this.worldBoundsAddUniform[2] = emitter.worldBoundsAdd.z;
      this.constantOutBoundsAdd.setValue(this.worldBoundsAddUniform);

      this._setInputBounds();

      let maxVel = emitter.maxVel * Math.max(Math.max(emitterScale.x, emitterScale.y), emitterScale.z);
      maxVel = Math.max(maxVel, 1);
      this.constantMaxVel.setValue(maxVel);
    }

    const emitterPos = node === null || emitter.localSpace ? Vec3.ZERO : node.getPosition();
    const emitterMatrix = node === null ? Mat4.IDENTITY : node.getWorldTransform();

    if (emitter.emitterShape === EMITTERSHAPE_BOX) {
      spawnMatrix3.setFromMat4(spawnMatrix);
      this.constantSpawnBounds.setValue(spawnMatrix3.data);
      this.constantSpawnPosInnerRatio.setValue(extentsInnerRatioUniform);
    } else {
      this.constantSpawnBoundsSphere.setValue(emitter.emitterRadius);
      this.constantSpawnBoundsSphereInnerRatio.setValue(emitter.emitterRadius === 0 ? 0 : emitter.emitterRadiusInner / emitter.emitterRadius);
    }

    this.constantInitialVelocity.setValue(emitter.initialVelocity);
    emitterMatrix3.setFromMat4(emitterMatrix);
    emitterMatrix.invertTo3x3(emitterMatrix3Inv);
    this.emitterPosUniform[0] = emitterPos.x;
    this.emitterPosUniform[1] = emitterPos.y;
    this.emitterPosUniform[2] = emitterPos.z;
    this.constantEmitterPos.setValue(this.emitterPosUniform);
    this.constantFrameRandom.setValue(this.frameRandomUniform);
    this.constantDelta.setValue(delta);
    this.constantRate.setValue(emitter.rate);
    this.constantRateDiv.setValue(emitter.rate2 - emitter.rate);
    this.constantStartAngle.setValue(emitter.startAngle * math$1.DEG_TO_RAD);
    this.constantStartAngle2.setValue(emitter.startAngle2 * math$1.DEG_TO_RAD);
    this.constantSeed.setValue(emitter.seed);
    this.constantLifetime.setValue(emitter.lifetime);
    this.emitterScaleUniform[0] = emitterScale.x;
    this.emitterScaleUniform[1] = emitterScale.y;
    this.emitterScaleUniform[2] = emitterScale.z;
    this.constantEmitterScale.setValue(this.emitterScaleUniform);
    this.constantEmitterMatrix.setValue(emitterMatrix3.data);
    this.constantEmitterMatrixInv.setValue(emitterMatrix3Inv.data);
    this.constantLocalVelocityDivMult.setValue(emitter.localVelocityUMax);
    this.constantVelocityDivMult.setValue(emitter.velocityUMax);
    this.constantRotSpeedDivMult.setValue(emitter.rotSpeedUMax[0]);
    let texIN = emitter.swapTex ? emitter.particleTexOUT : emitter.particleTexIN;
    texIN = emitter.beenReset ? emitter.particleTexStart : texIN;
    const texOUT = emitter.swapTex ? emitter.particleTexIN : emitter.particleTexOUT;
    this.constantParticleTexIN.setValue(texIN);
    drawQuadWithShader(device, emitter.swapTex ? emitter.rtParticleTexIN : emitter.rtParticleTexOUT, !isOnStop ? emitter.loop ? emitter.shaderParticleUpdateRespawn : emitter.shaderParticleUpdateNoRespawn : emitter.shaderParticleUpdateOnStop);
    emitter.material.setParameter('particleTexOUT', texIN);
    emitter.material.setParameter('particleTexIN', texOUT);
    emitter.beenReset = false;
    emitter.swapTex = !emitter.swapTex;
    device.setDepthTest(true);
    device.setDepthWrite(true);
    emitter.prevWorldBoundsSize.copy(emitter.worldBoundsSize);
    emitter.prevWorldBoundsCenter.copy(emitter.worldBounds.center);
    if (emitter.pack8) this._setInputBounds();
  }

}

const particleVerts = [[-1, -1], [1, -1], [1, 1], [-1, 1]];

function _createTexture(device, width, height, pixelData, format = PIXELFORMAT_RGBA32F, mult8Bit, filter) {
  let mipFilter = FILTER_NEAREST;
  if (filter && format === PIXELFORMAT_R8_G8_B8_A8) mipFilter = FILTER_LINEAR;
  const texture = new Texture(device, {
    width: width,
    height: height,
    format: format,
    cubemap: false,
    mipmaps: false,
    minFilter: mipFilter,
    magFilter: mipFilter,
    addressU: ADDRESS_CLAMP_TO_EDGE,
    addressV: ADDRESS_CLAMP_TO_EDGE,
    name: 'ParticleSystemTexture'
  });
  const pixels = texture.lock();

  if (format === PIXELFORMAT_R8_G8_B8_A8) {
    const temp = new Uint8Array(pixelData.length);

    for (let i = 0; i < pixelData.length; i++) {
      temp[i] = pixelData[i] * mult8Bit * 255;
    }

    pixelData = temp;
  }

  pixels.set(pixelData);
  texture.unlock();
  return texture;
}

function saturate(x) {
  return Math.max(Math.min(x, 1), 0);
}

const default0Curve = new Curve$1([0, 0, 1, 0]);
const default1Curve = new Curve$1([0, 1, 1, 1]);
const default0Curve3 = new CurveSet$1([0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]);
const default1Curve3 = new CurveSet$1([0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]);
let particleTexHeight = 2;
const particleTexChannels = 4;
const extentsInnerRatioUniform = new Float32Array(3);
const spawnMatrix = new Mat4();
const tmpVec3 = new Vec3();
const bMin = new Vec3();
const bMax = new Vec3();
let setPropertyTarget;
let setPropertyOptions;

function setProperty(pName, defaultVal) {
  if (setPropertyOptions[pName] !== undefined && setPropertyOptions[pName] !== null) {
    setPropertyTarget[pName] = setPropertyOptions[pName];
  } else {
    setPropertyTarget[pName] = defaultVal;
  }
}

function pack3NFloats(a, b, c) {
  const packed = a * 255 << 16 | b * 255 << 8 | c * 255;
  return packed / (1 << 24);
}

function packTextureXYZ_NXYZ(qXYZ, qXYZ2) {
  const num = qXYZ.length / 3;
  const colors = new Array(num * 4);

  for (let i = 0; i < num; i++) {
    colors[i * 4] = qXYZ[i * 3];
    colors[i * 4 + 1] = qXYZ[i * 3 + 1];
    colors[i * 4 + 2] = qXYZ[i * 3 + 2];
    colors[i * 4 + 3] = pack3NFloats(qXYZ2[i * 3], qXYZ2[i * 3 + 1], qXYZ2[i * 3 + 2]);
  }

  return colors;
}

function packTextureRGBA(qRGB, qA) {
  const colors = new Array(qA.length * 4);

  for (let i = 0; i < qA.length; i++) {
    colors[i * 4] = qRGB[i * 3];
    colors[i * 4 + 1] = qRGB[i * 3 + 1];
    colors[i * 4 + 2] = qRGB[i * 3 + 2];
    colors[i * 4 + 3] = qA[i];
  }

  return colors;
}

function packTexture5Floats(qA, qB, qC, qD, qE) {
  const colors = new Array(qA.length * 4);

  for (let i = 0; i < qA.length; i++) {
    colors[i * 4] = qA[i];
    colors[i * 4 + 1] = qB[i];
    colors[i * 4 + 2] = 0;
    colors[i * 4 + 3] = pack3NFloats(qC[i], qD[i], qE[i]);
  }

  return colors;
}

function packTexture2Floats(qA, qB) {
  const colors = new Array(qA.length * 4);

  for (let i = 0; i < qA.length; i++) {
    colors[i * 4] = qA[i];
    colors[i * 4 + 1] = qB[i];
    colors[i * 4 + 2] = 0;
    colors[i * 4 + 3] = 0;
  }

  return colors;
}

function calcEndTime(emitter) {
  const interval = Math.max(emitter.rate, emitter.rate2) * emitter.numParticles + emitter.lifetime;
  return Date.now() + interval * 1000;
}

function subGraph(A, B) {
  const r = new Float32Array(A.length);

  for (let i = 0; i < A.length; i++) {
    r[i] = A[i] - B[i];
  }

  return r;
}

function maxUnsignedGraphValue(A, outUMax) {
  const chans = outUMax.length;
  const values = A.length / chans;

  for (let i = 0; i < values; i++) {
    for (let j = 0; j < chans; j++) {
      const a = Math.abs(A[i * chans + j]);
      outUMax[j] = Math.max(outUMax[j], a);
    }
  }
}

function normalizeGraph(A, uMax) {
  const chans = uMax.length;
  const values = A.length / chans;

  for (let i = 0; i < values; i++) {
    for (let j = 0; j < chans; j++) {
      A[i * chans + j] /= uMax[j] === 0 ? 1 : uMax[j];
      A[i * chans + j] *= 0.5;
      A[i * chans + j] += 0.5;
    }
  }
}

function divGraphFrom2Curves(curve1, curve2, outUMax) {
  const sub = subGraph(curve2, curve1);
  maxUnsignedGraphValue(sub, outUMax);
  normalizeGraph(sub, outUMax);
  return sub;
}

const particleEmitterDeviceCache = new DeviceCache();

class ParticleEmitter {
  constructor(graphicsDevice, options) {
    this.graphicsDevice = graphicsDevice;
    const gd = graphicsDevice;
    const precision = 32;
    this.precision = precision;
    this._addTimeTime = 0;
    setPropertyTarget = this;
    setPropertyOptions = options;
    setProperty('numParticles', 1);

    if (this.numParticles > graphicsDevice.maxTextureSize) {
      this.numParticles = graphicsDevice.maxTextureSize;
    }

    setProperty('rate', 1);
    setProperty('rate2', this.rate);
    setProperty('lifetime', 50);
    setProperty('emitterExtents', new Vec3(0, 0, 0));
    setProperty('emitterExtentsInner', new Vec3(0, 0, 0));
    setProperty('emitterRadius', 0);
    setProperty('emitterRadiusInner', 0);
    setProperty('emitterShape', EMITTERSHAPE_BOX);
    setProperty('initialVelocity', 1);
    setProperty('wrap', false);
    setProperty('localSpace', false);
    setProperty('screenSpace', false);
    setProperty('wrapBounds', null);
    setProperty('colorMap', this.defaultParamTexture);
    setProperty('normalMap', null);
    setProperty('loop', true);
    setProperty('preWarm', false);
    setProperty('sort', PARTICLESORT_NONE);
    setProperty('mode', PARTICLEMODE_GPU);
    setProperty('scene', null);
    setProperty('lighting', false);
    setProperty('halfLambert', false);
    setProperty('intensity', 1.0);
    setProperty('stretch', 0.0);
    setProperty('alignToMotion', false);
    setProperty('depthSoftening', 0);
    setProperty('mesh', null);
    setProperty('particleNormal', new Vec3(0, 1, 0));
    setProperty('orientation', PARTICLEORIENTATION_SCREEN);
    setProperty('depthWrite', false);
    setProperty('noFog', false);
    setProperty('blendType', BLEND_NORMAL);
    setProperty('node', null);
    setProperty('startAngle', 0);
    setProperty('startAngle2', this.startAngle);
    setProperty('animTilesX', 1);
    setProperty('animTilesY', 1);
    setProperty('animStartFrame', 0);
    setProperty('animNumFrames', 1);
    setProperty('animNumAnimations', 1);
    setProperty('animIndex', 0);
    setProperty('randomizeAnimIndex', false);
    setProperty('animSpeed', 1);
    setProperty('animLoop', true);
    this._gpuUpdater = new ParticleGPUUpdater(this, gd);
    this._cpuUpdater = new ParticleCPUUpdater(this);
    this.constantLightCube = gd.scope.resolve('lightCube[0]');
    this.emitterPosUniform = new Float32Array(3);
    this.wrapBoundsUniform = new Float32Array(3);
    this.emitterScaleUniform = new Float32Array([1, 1, 1]);
    setProperty('colorGraph', default1Curve3);
    setProperty('colorGraph2', this.colorGraph);
    setProperty('scaleGraph', default1Curve);
    setProperty('scaleGraph2', this.scaleGraph);
    setProperty('alphaGraph', default1Curve);
    setProperty('alphaGraph2', this.alphaGraph);
    setProperty('localVelocityGraph', default0Curve3);
    setProperty('localVelocityGraph2', this.localVelocityGraph);
    setProperty('velocityGraph', default0Curve3);
    setProperty('velocityGraph2', this.velocityGraph);
    setProperty('rotationSpeedGraph', default0Curve);
    setProperty('rotationSpeedGraph2', this.rotationSpeedGraph);
    setProperty('radialSpeedGraph', default0Curve);
    setProperty('radialSpeedGraph2', this.radialSpeedGraph);
    this.lightCube = new Float32Array(6 * 3);
    this.lightCubeDir = new Array(6);
    this.lightCubeDir[0] = new Vec3(-1, 0, 0);
    this.lightCubeDir[1] = new Vec3(1, 0, 0);
    this.lightCubeDir[2] = new Vec3(0, -1, 0);
    this.lightCubeDir[3] = new Vec3(0, 1, 0);
    this.lightCubeDir[4] = new Vec3(0, 0, -1);
    this.lightCubeDir[5] = new Vec3(0, 0, 1);
    this.animTilesParams = new Float32Array(2);
    this.animParams = new Float32Array(4);
    this.animIndexParams = new Float32Array(2);
    this.internalTex0 = null;
    this.internalTex1 = null;
    this.internalTex2 = null;
    this.colorParam = null;
    this.vbToSort = null;
    this.vbOld = null;
    this.particleDistance = null;
    this.camera = null;
    this.swapTex = false;
    this.useMesh = true;
    this.useCpu = !graphicsDevice.supportsGpuParticles;
    this.pack8 = true;
    this.localBounds = new BoundingBox();
    this.worldBoundsNoTrail = new BoundingBox();
    this.worldBoundsTrail = [new BoundingBox(), new BoundingBox()];
    this.worldBounds = new BoundingBox();
    this.worldBoundsSize = new Vec3();
    this.prevWorldBoundsSize = new Vec3();
    this.prevWorldBoundsCenter = new Vec3();
    this.prevEmitterExtents = this.emitterExtents;
    this.prevEmitterRadius = this.emitterRadius;
    this.worldBoundsMul = new Vec3();
    this.worldBoundsAdd = new Vec3();
    this.timeToSwitchBounds = 0;
    this.shaderParticleUpdateRespawn = null;
    this.shaderParticleUpdateNoRespawn = null;
    this.shaderParticleUpdateOnStop = null;
    this.numParticleVerts = 0;
    this.numParticleIndices = 0;
    this.material = null;
    this.meshInstance = null;
    this.drawOrder = 0;
    this.seed = Math.random();
    this.fixedTimeStep = 1.0 / 60;
    this.maxSubSteps = 10;
    this.simTime = 0;
    this.simTimeTotal = 0;
    this.beenReset = false;
    this._layer = null;
    this.rebuild();
  }

  get defaultParamTexture() {
    return particleEmitterDeviceCache.get(this.graphicsDevice, () => {
      const resolution = 16;
      const centerPoint = resolution * 0.5 + 0.5;
      const dtex = new Float32Array(resolution * resolution * 4);

      for (let y = 0; y < resolution; y++) {
        for (let x = 0; x < resolution; x++) {
          const xgrad = x + 1 - centerPoint;
          const ygrad = y + 1 - centerPoint;
          const c = saturate(1 - saturate(Math.sqrt(xgrad * xgrad + ygrad * ygrad) / resolution) - 0.5);
          const p = y * resolution + x;
          dtex[p * 4] = 1;
          dtex[p * 4 + 1] = 1;
          dtex[p * 4 + 2] = 1;
          dtex[p * 4 + 3] = c;
        }
      }

      const texture = _createTexture(this.graphicsDevice, resolution, resolution, dtex, PIXELFORMAT_R8_G8_B8_A8, 1.0, true);

      texture.minFilter = FILTER_LINEAR;
      texture.magFilter = FILTER_LINEAR;
      return texture;
    });
  }

  onChangeCamera() {
    this.regenShader();
    this.resetMaterial();
  }

  calculateBoundsMad() {
    this.worldBoundsMul.x = 1.0 / this.worldBoundsSize.x;
    this.worldBoundsMul.y = 1.0 / this.worldBoundsSize.y;
    this.worldBoundsMul.z = 1.0 / this.worldBoundsSize.z;
    this.worldBoundsAdd.copy(this.worldBounds.center).mul(this.worldBoundsMul).mulScalar(-1);
    this.worldBoundsAdd.x += 0.5;
    this.worldBoundsAdd.y += 0.5;
    this.worldBoundsAdd.z += 0.5;
  }

  calculateWorldBounds() {
    if (!this.node) return;
    this.prevWorldBoundsSize.copy(this.worldBoundsSize);
    this.prevWorldBoundsCenter.copy(this.worldBounds.center);

    if (!this.useCpu) {
      let recalculateLocalBounds = false;

      if (this.emitterShape === EMITTERSHAPE_BOX) {
        recalculateLocalBounds = !this.emitterExtents.equals(this.prevEmitterExtents);
      } else {
        recalculateLocalBounds = !(this.emitterRadius === this.prevEmitterRadius);
      }

      if (recalculateLocalBounds) {
        this.calculateLocalBounds();
      }
    }

    const nodeWT = this.node.getWorldTransform();

    if (this.localSpace) {
      this.worldBoundsNoTrail.copy(this.localBounds);
    } else {
      this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds, nodeWT);
    }

    this.worldBoundsTrail[0].add(this.worldBoundsNoTrail);
    this.worldBoundsTrail[1].add(this.worldBoundsNoTrail);
    const now = this.simTimeTotal;

    if (now >= this.timeToSwitchBounds) {
      this.worldBoundsTrail[0].copy(this.worldBoundsTrail[1]);
      this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail);
      this.timeToSwitchBounds = now + this.lifetime;
    }

    this.worldBounds.copy(this.worldBoundsTrail[0]);
    this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2);

    if (this.localSpace) {
      this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds, nodeWT);
      this.meshInstance.mesh.aabb.setFromTransformedAabb(this.worldBounds, nodeWT);
    } else {
      this.meshInstance.aabb.copy(this.worldBounds);
      this.meshInstance.mesh.aabb.copy(this.worldBounds);
    }

    this.meshInstance._aabbVer = 1 - this.meshInstance._aabbVer;
    if (this.pack8) this.calculateBoundsMad();
  }

  resetWorldBounds() {
    if (!this.node) return;
    this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds, this.localSpace ? Mat4.IDENTITY : this.node.getWorldTransform());
    this.worldBoundsTrail[0].copy(this.worldBoundsNoTrail);
    this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail);
    this.worldBounds.copy(this.worldBoundsTrail[0]);
    this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2);
    this.prevWorldBoundsSize.copy(this.worldBoundsSize);
    this.prevWorldBoundsCenter.copy(this.worldBounds.center);
    this.simTimeTotal = 0;
    this.timeToSwitchBounds = 0;
  }

  calculateLocalBounds() {
    let minx = Number.MAX_VALUE;
    let miny = Number.MAX_VALUE;
    let minz = Number.MAX_VALUE;
    let maxx = -Number.MAX_VALUE;
    let maxy = -Number.MAX_VALUE;
    let maxz = -Number.MAX_VALUE;
    let maxR = 0;
    let maxScale = 0;
    const stepWeight = this.lifetime / this.precision;
    const wVels = [this.qVelocity, this.qVelocity2];
    const lVels = [this.qLocalVelocity, this.qLocalVelocity2];
    const accumX = [0, 0];
    const accumY = [0, 0];
    const accumZ = [0, 0];
    const accumR = [0, 0];
    const accumW = [0, 0];
    let x, y, z;

    for (let i = 0; i < this.precision + 1; i++) {
      const index = Math.min(i, this.precision - 1);

      for (let j = 0; j < 2; j++) {
        x = lVels[j][index * 3 + 0] * stepWeight + accumX[j];
        y = lVels[j][index * 3 + 1] * stepWeight + accumY[j];
        z = lVels[j][index * 3 + 2] * stepWeight + accumZ[j];
        minx = Math.min(x, minx);
        miny = Math.min(y, miny);
        minz = Math.min(z, minz);
        maxx = Math.max(x, maxx);
        maxy = Math.max(y, maxy);
        maxz = Math.max(z, maxz);
        accumX[j] = x;
        accumY[j] = y;
        accumZ[j] = z;
      }

      for (let j = 0; j < 2; j++) {
        accumW[j] += stepWeight * Math.sqrt(wVels[j][index * 3 + 0] * wVels[j][index * 3 + 0] + wVels[j][index * 3 + 1] * wVels[j][index * 3 + 1] + wVels[j][index * 3 + 2] * wVels[j][index * 3 + 2]);
      }

      accumR[0] += this.qRadialSpeed[index] * stepWeight;
      accumR[1] += this.qRadialSpeed2[index] * stepWeight;
      maxR = Math.max(maxR, Math.max(Math.abs(accumR[0]), Math.abs(accumR[1])));
      maxScale = Math.max(maxScale, this.qScale[index]);
    }

    if (this.emitterShape === EMITTERSHAPE_BOX) {
      x = this.emitterExtents.x * 0.5;
      y = this.emitterExtents.y * 0.5;
      z = this.emitterExtents.z * 0.5;
    } else {
      x = this.emitterRadius;
      y = this.emitterRadius;
      z = this.emitterRadius;
    }

    const w = Math.max(accumW[0], accumW[1]);
    bMin.x = minx - maxScale - x - maxR - w;
    bMin.y = miny - maxScale - y - maxR - w;
    bMin.z = minz - maxScale - z - maxR - w;
    bMax.x = maxx + maxScale + x + maxR + w;
    bMax.y = maxy + maxScale + y + maxR + w;
    bMax.z = maxz + maxScale + z + maxR + w;
    this.localBounds.setMinMax(bMin, bMax);
  }

  rebuild() {
    const gd = this.graphicsDevice;
    if (this.colorMap === null) this.colorMap = this.defaultParamTexture;
    this.spawnBounds = this.emitterShape === EMITTERSHAPE_BOX ? this.emitterExtents : this.emitterRadius;
    this.useCpu = this.useCpu || this.sort > PARTICLESORT_NONE || gd.maxVertexTextures <= 1 || gd.fragmentUniformsCount < 64 || gd.forceCpuParticles || !gd.extTextureFloat;

    this._destroyResources();

    this.pack8 = (this.pack8 || !gd.textureFloatRenderable) && !this.useCpu;
    particleTexHeight = this.useCpu || this.pack8 ? 4 : 2;
    this.useMesh = false;

    if (this.mesh) {
      const totalVertCount = this.numParticles * this.mesh.vertexBuffer.numVertices;

      if (totalVertCount > 65535) ; else {
        this.useMesh = true;
      }
    }

    this.numParticlesPot = math$1.nextPowerOfTwo(this.numParticles);
    this.rebuildGraphs();
    this.calculateLocalBounds();
    this.resetWorldBounds();

    if (this.node) {
      this.worldBounds.setFromTransformedAabb(this.localBounds, this.localSpace ? Mat4.IDENTITY : this.node.getWorldTransform());
      this.worldBoundsTrail[0].copy(this.worldBounds);
      this.worldBoundsTrail[1].copy(this.worldBounds);
      this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2);
      this.prevWorldBoundsSize.copy(this.worldBoundsSize);
      this.prevWorldBoundsCenter.copy(this.worldBounds.center);
      if (this.pack8) this.calculateBoundsMad();
    }

    this.vbToSort = new Array(this.numParticles);

    for (let iSort = 0; iSort < this.numParticles; iSort++) this.vbToSort[iSort] = [0, 0];

    this.particleDistance = new Float32Array(this.numParticles);

    this._gpuUpdater.randomize();

    this.particleTex = new Float32Array(this.numParticlesPot * particleTexHeight * particleTexChannels);
    const emitterPos = this.node === null || this.localSpace ? Vec3.ZERO : this.node.getPosition();

    if (this.emitterShape === EMITTERSHAPE_BOX) {
      if (this.node === null || this.localSpace) {
        spawnMatrix.setTRS(Vec3.ZERO, Quat.IDENTITY, this.spawnBounds);
      } else {
        spawnMatrix.setTRS(Vec3.ZERO, this.node.getRotation(), tmpVec3.copy(this.spawnBounds).mul(this.node.localScale));
      }

      extentsInnerRatioUniform[0] = this.emitterExtents.x !== 0 ? this.emitterExtentsInner.x / this.emitterExtents.x : 0;
      extentsInnerRatioUniform[1] = this.emitterExtents.y !== 0 ? this.emitterExtentsInner.y / this.emitterExtents.y : 0;
      extentsInnerRatioUniform[2] = this.emitterExtents.z !== 0 ? this.emitterExtentsInner.z / this.emitterExtents.z : 0;
    }

    for (let i = 0; i < this.numParticles; i++) {
      this._cpuUpdater.calcSpawnPosition(this.particleTex, spawnMatrix, extentsInnerRatioUniform, emitterPos, i);

      if (this.useCpu) this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = 1;
    }

    this.particleTexStart = new Float32Array(this.numParticlesPot * particleTexHeight * particleTexChannels);

    for (let i = 0; i < this.particleTexStart.length; i++) {
      this.particleTexStart[i] = this.particleTex[i];
    }

    if (!this.useCpu) {
      if (this.pack8) {
        this.particleTexIN = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex, PIXELFORMAT_R8_G8_B8_A8, 1, false);
        this.particleTexOUT = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex, PIXELFORMAT_R8_G8_B8_A8, 1, false);
        this.particleTexStart = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTexStart, PIXELFORMAT_R8_G8_B8_A8, 1, false);
      } else {
        this.particleTexIN = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex);
        this.particleTexOUT = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex);
        this.particleTexStart = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTexStart);
      }

      this.rtParticleTexIN = new RenderTarget({
        colorBuffer: this.particleTexIN,
        depth: false
      });
      this.rtParticleTexOUT = new RenderTarget({
        colorBuffer: this.particleTexOUT,
        depth: false
      });
      this.swapTex = false;
    }

    const shaderCodeStart = (this.localSpace ? '#define LOCAL_SPACE\n' : '') + shaderChunks.particleUpdaterInitPS + (this.pack8 ? shaderChunks.particleInputRgba8PS + shaderChunks.particleOutputRgba8PS : shaderChunks.particleInputFloatPS + shaderChunks.particleOutputFloatPS) + (this.emitterShape === EMITTERSHAPE_BOX ? shaderChunks.particleUpdaterAABBPS : shaderChunks.particleUpdaterSpherePS) + shaderChunks.particleUpdaterStartPS;
    const shaderCodeRespawn = shaderCodeStart + shaderChunks.particleUpdaterRespawnPS + shaderChunks.particleUpdaterEndPS;
    const shaderCodeNoRespawn = shaderCodeStart + shaderChunks.particleUpdaterNoRespawnPS + shaderChunks.particleUpdaterEndPS;
    const shaderCodeOnStop = shaderCodeStart + shaderChunks.particleUpdaterOnStopPS + shaderChunks.particleUpdaterEndPS;
    const params = this.emitterShape + '' + this.pack8 + '' + this.localSpace;
    this.shaderParticleUpdateRespawn = createShaderFromCode(gd, shaderChunks.fullscreenQuadVS, shaderCodeRespawn, 'fsQuad0' + params);
    this.shaderParticleUpdateNoRespawn = createShaderFromCode(gd, shaderChunks.fullscreenQuadVS, shaderCodeNoRespawn, 'fsQuad1' + params);
    this.shaderParticleUpdateOnStop = createShaderFromCode(gd, shaderChunks.fullscreenQuadVS, shaderCodeOnStop, 'fsQuad2' + params);
    this.numParticleVerts = this.useMesh ? this.mesh.vertexBuffer.numVertices : 4;
    this.numParticleIndices = this.useMesh ? this.mesh.indexBuffer[0].numIndices : 6;

    this._allocate(this.numParticles);

    const mesh = new Mesh(gd);
    mesh.vertexBuffer = this.vertexBuffer;
    mesh.indexBuffer[0] = this.indexBuffer;
    mesh.primitive[0].type = PRIMITIVE_TRIANGLES;
    mesh.primitive[0].base = 0;
    mesh.primitive[0].count = this.numParticles * this.numParticleIndices;
    mesh.primitive[0].indexed = true;
    this.material = new Material();
    this.material.name = this.node.name;
    this.material.cull = CULLFACE_NONE;
    this.material.alphaWrite = false;
    this.material.blend = true;
    this.material.blendType = this.blendType;
    this.material.depthWrite = this.depthWrite;
    this.material.emitter = this;
    this.regenShader();
    this.resetMaterial();
    const wasVisible = this.meshInstance ? this.meshInstance.visible : true;
    this.meshInstance = new MeshInstance(mesh, this.material, this.node);
    this.meshInstance.pick = false;
    this.meshInstance.updateKey();
    this.meshInstance.cull = true;
    this.meshInstance._noDepthDrawGl1 = true;

    if (this.localSpace) {
      this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds, this.node.getWorldTransform());
    } else {
      this.meshInstance.aabb.copy(this.worldBounds);
    }

    this.meshInstance._updateAabb = false;
    this.meshInstance.visible = wasVisible;

    this._initializeTextures();

    this.resetTime();
    this.addTime(0, false);
    if (this.preWarm) this.prewarm(this.lifetime);
  }

  _isAnimated() {
    return this.animNumFrames >= 1 && (this.animTilesX > 1 || this.animTilesY > 1) && (this.colorMap && this.colorMap !== this.defaultParamTexture || this.normalMap);
  }

  rebuildGraphs() {
    const precision = this.precision;
    const gd = this.graphicsDevice;
    this.qLocalVelocity = this.localVelocityGraph.quantize(precision);
    this.qVelocity = this.velocityGraph.quantize(precision);
    this.qColor = this.colorGraph.quantizeClamped(precision, 0, 1);
    this.qRotSpeed = this.rotationSpeedGraph.quantize(precision);
    this.qScale = this.scaleGraph.quantize(precision);
    this.qAlpha = this.alphaGraph.quantize(precision);
    this.qRadialSpeed = this.radialSpeedGraph.quantize(precision);
    this.qLocalVelocity2 = this.localVelocityGraph2.quantize(precision);
    this.qVelocity2 = this.velocityGraph2.quantize(precision);
    this.qColor2 = this.colorGraph2.quantizeClamped(precision, 0, 1);
    this.qRotSpeed2 = this.rotationSpeedGraph2.quantize(precision);
    this.qScale2 = this.scaleGraph2.quantize(precision);
    this.qAlpha2 = this.alphaGraph2.quantize(precision);
    this.qRadialSpeed2 = this.radialSpeedGraph2.quantize(precision);

    for (let i = 0; i < precision; i++) {
      this.qRotSpeed[i] *= math$1.DEG_TO_RAD;
      this.qRotSpeed2[i] *= math$1.DEG_TO_RAD;
    }

    this.localVelocityUMax = new Float32Array(3);
    this.velocityUMax = new Float32Array(3);
    this.colorUMax = new Float32Array(3);
    this.rotSpeedUMax = [0];
    this.scaleUMax = [0];
    this.alphaUMax = [0];
    this.radialSpeedUMax = [0];
    this.qLocalVelocityDiv = divGraphFrom2Curves(this.qLocalVelocity, this.qLocalVelocity2, this.localVelocityUMax);
    this.qVelocityDiv = divGraphFrom2Curves(this.qVelocity, this.qVelocity2, this.velocityUMax);
    this.qColorDiv = divGraphFrom2Curves(this.qColor, this.qColor2, this.colorUMax);
    this.qRotSpeedDiv = divGraphFrom2Curves(this.qRotSpeed, this.qRotSpeed2, this.rotSpeedUMax);
    this.qScaleDiv = divGraphFrom2Curves(this.qScale, this.qScale2, this.scaleUMax);
    this.qAlphaDiv = divGraphFrom2Curves(this.qAlpha, this.qAlpha2, this.alphaUMax);
    this.qRadialSpeedDiv = divGraphFrom2Curves(this.qRadialSpeed, this.qRadialSpeed2, this.radialSpeedUMax);

    if (this.pack8) {
      const umax = [0, 0, 0];
      maxUnsignedGraphValue(this.qVelocity, umax);
      const umax2 = [0, 0, 0];
      maxUnsignedGraphValue(this.qVelocity2, umax2);
      const lumax = [0, 0, 0];
      maxUnsignedGraphValue(this.qLocalVelocity, lumax);
      const lumax2 = [0, 0, 0];
      maxUnsignedGraphValue(this.qLocalVelocity2, lumax2);
      const rumax = [0];
      maxUnsignedGraphValue(this.qRadialSpeed, rumax);
      const rumax2 = [0];
      maxUnsignedGraphValue(this.qRadialSpeed2, rumax2);
      let maxVel = Math.max(umax[0], umax2[0]);
      maxVel = Math.max(maxVel, umax[1]);
      maxVel = Math.max(maxVel, umax2[1]);
      maxVel = Math.max(maxVel, umax[2]);
      maxVel = Math.max(maxVel, umax2[2]);
      let lmaxVel = Math.max(lumax[0], lumax2[0]);
      lmaxVel = Math.max(lmaxVel, lumax[1]);
      lmaxVel = Math.max(lmaxVel, lumax2[1]);
      lmaxVel = Math.max(lmaxVel, lumax[2]);
      lmaxVel = Math.max(lmaxVel, lumax2[2]);
      const maxRad = Math.max(rumax[0], rumax2[0]);
      this.maxVel = maxVel + lmaxVel + maxRad;
    }

    if (!this.useCpu) {
      this.internalTex0 = _createTexture(gd, precision, 1, packTextureXYZ_NXYZ(this.qLocalVelocity, this.qLocalVelocityDiv));
      this.internalTex1 = _createTexture(gd, precision, 1, packTextureXYZ_NXYZ(this.qVelocity, this.qVelocityDiv));
      this.internalTex2 = _createTexture(gd, precision, 1, packTexture5Floats(this.qRotSpeed, this.qScale, this.qScaleDiv, this.qRotSpeedDiv, this.qAlphaDiv));
      this.internalTex3 = _createTexture(gd, precision, 1, packTexture2Floats(this.qRadialSpeed, this.qRadialSpeedDiv));
    }

    this.colorParam = _createTexture(gd, precision, 1, packTextureRGBA(this.qColor, this.qAlpha), PIXELFORMAT_R8_G8_B8_A8, 1.0, true);
  }

  _initializeTextures() {
    if (this.colorMap) {
      this.material.setParameter('colorMap', this.colorMap);

      if (this.lighting && this.normalMap) {
        this.material.setParameter('normalMap', this.normalMap);
      }
    }
  }

  regenShader() {
    const programLib = this.graphicsDevice.getProgramLibrary();
    this.graphicsDevice.programLib.register('particle', particle);
    const hasNormal = this.normalMap !== null;
    this.normalOption = 0;

    if (this.lighting) {
      this.normalOption = hasNormal ? 2 : 1;
    }

    this.material.getShaderVariant = function (dev, sc, defs, staticLightList, pass, sortedLights, viewUniformFormat, viewBindGroupFormat) {
      if (this.emitter.scene) {
        if (this.emitter.camera !== this.emitter.scene._activeCamera) {
          this.emitter.camera = this.emitter.scene._activeCamera;
          this.emitter.onChangeCamera();
        }
      }

      const inTools = this.emitter.inTools;
      const shader = programLib.getProgram('particle', {
        useCpu: this.emitter.useCpu,
        normal: this.emitter.normalOption,
        halflambert: this.emitter.halfLambert,
        stretch: this.emitter.stretch,
        alignToMotion: this.emitter.alignToMotion,
        soft: this.emitter.depthSoftening,
        mesh: this.emitter.useMesh,
        gamma: this.emitter.scene ? this.emitter.scene.gammaCorrection : 0,
        toneMap: this.emitter.scene ? this.emitter.scene.toneMapping : 0,
        fog: this.emitter.scene && !this.emitter.noFog ? this.emitter.scene.fog : 'none',
        wrap: this.emitter.wrap && this.emitter.wrapBounds,
        localSpace: this.emitter.localSpace,
        screenSpace: inTools ? false : this.emitter.screenSpace,
        blend: this.blendType,
        animTex: this.emitter._isAnimated(),
        animTexLoop: this.emitter.animLoop,
        pack8: this.emitter.pack8,
        customFace: this.emitter.orientation !== PARTICLEORIENTATION_SCREEN
      });
      return shader;
    };

    this.material.shader = this.material.getShaderVariant();
  }

  resetMaterial() {
    const material = this.material;
    material.setParameter('stretch', this.stretch);

    if (this._isAnimated()) {
      material.setParameter('animTexTilesParams', this.animTilesParams);
      material.setParameter('animTexParams', this.animParams);
      material.setParameter('animTexIndexParams', this.animIndexParams);
    }

    material.setParameter('colorMult', this.intensity);

    if (!this.useCpu) {
      material.setParameter('internalTex0', this.internalTex0);
      material.setParameter('internalTex1', this.internalTex1);
      material.setParameter('internalTex2', this.internalTex2);
      material.setParameter('internalTex3', this.internalTex3);
    }

    material.setParameter('colorParam', this.colorParam);
    material.setParameter('numParticles', this.numParticles);
    material.setParameter('numParticlesPot', this.numParticlesPot);
    material.setParameter('lifetime', this.lifetime);
    material.setParameter('rate', this.rate);
    material.setParameter('rateDiv', this.rate2 - this.rate);
    material.setParameter('seed', this.seed);
    material.setParameter('scaleDivMult', this.scaleUMax[0]);
    material.setParameter('alphaDivMult', this.alphaUMax[0]);
    material.setParameter('radialSpeedDivMult', this.radialSpeedUMax[0]);
    material.setParameter('graphNumSamples', this.precision);
    material.setParameter('graphSampleSize', 1.0 / this.precision);
    material.setParameter('emitterScale', new Float32Array([1, 1, 1]));

    if (this.pack8) {
      this._gpuUpdater._setInputBounds();

      material.setParameter('inBoundsSize', this._gpuUpdater.inBoundsSizeUniform);
      material.setParameter('inBoundsCenter', this._gpuUpdater.inBoundsCenterUniform);
      material.setParameter('maxVel', this.maxVel);
    }

    if (this.wrap && this.wrapBounds) {
      this.wrapBoundsUniform[0] = this.wrapBounds.x;
      this.wrapBoundsUniform[1] = this.wrapBounds.y;
      this.wrapBoundsUniform[2] = this.wrapBounds.z;
      material.setParameter('wrapBounds', this.wrapBoundsUniform);
    }

    if (this.colorMap) {
      material.setParameter('colorMap', this.colorMap);
    }

    if (this.lighting) {
      if (this.normalMap) {
        material.setParameter('normalMap', this.normalMap);
      }
    }

    if (this.depthSoftening > 0) {
      material.setParameter('softening', 1.0 / (this.depthSoftening * this.depthSoftening * 100));
    }

    if (this.stretch > 0.0) material.cull = CULLFACE_NONE;

    this._compParticleFaceParams();
  }

  _compParticleFaceParams() {
    let tangent, binormal;

    if (this.orientation === PARTICLEORIENTATION_SCREEN) {
      tangent = new Float32Array([1, 0, 0]);
      binormal = new Float32Array([0, 0, 1]);
    } else {
      let n;

      if (this.orientation === PARTICLEORIENTATION_WORLD) {
        n = this.particleNormal.normalize();
      } else {
        const emitterMat = this.node === null ? Mat4.IDENTITY : this.node.getWorldTransform();
        n = emitterMat.transformVector(this.particleNormal).normalize();
      }

      const t = new Vec3(1, 0, 0);
      if (Math.abs(t.dot(n)) === 1) t.set(0, 0, 1);
      const b = new Vec3().cross(n, t).normalize();
      t.cross(b, n).normalize();
      tangent = new Float32Array([t.x, t.y, t.z]);
      binormal = new Float32Array([b.x, b.y, b.z]);
    }

    this.material.setParameter('faceTangent', tangent);
    this.material.setParameter('faceBinorm', binormal);
  }

  _allocate(numParticles) {
    const psysVertCount = numParticles * this.numParticleVerts;
    const psysIndexCount = numParticles * this.numParticleIndices;

    if (this.vertexBuffer === undefined || this.vertexBuffer.getNumVertices() !== psysVertCount) {
      if (!this.useCpu) {
        const elements = [{
          semantic: SEMANTIC_ATTR0,
          components: 4,
          type: TYPE_FLOAT32
        }];

        if (this.useMesh) {
          elements.push({
            semantic: SEMANTIC_ATTR1,
            components: 2,
            type: TYPE_FLOAT32
          });
        }

        const particleFormat = new VertexFormat(this.graphicsDevice, elements);
        this.vertexBuffer = new VertexBuffer(this.graphicsDevice, particleFormat, psysVertCount, BUFFER_DYNAMIC);
        this.indexBuffer = new IndexBuffer(this.graphicsDevice, INDEXFORMAT_UINT16, psysIndexCount);
      } else {
        const elements = [{
          semantic: SEMANTIC_ATTR0,
          components: 4,
          type: TYPE_FLOAT32
        }, {
          semantic: SEMANTIC_ATTR1,
          components: 4,
          type: TYPE_FLOAT32
        }, {
          semantic: SEMANTIC_ATTR2,
          components: 4,
          type: TYPE_FLOAT32
        }, {
          semantic: SEMANTIC_ATTR3,
          components: 1,
          type: TYPE_FLOAT32
        }, {
          semantic: SEMANTIC_ATTR4,
          components: this.useMesh ? 4 : 2,
          type: TYPE_FLOAT32
        }];
        const particleFormat = new VertexFormat(this.graphicsDevice, elements);
        this.vertexBuffer = new VertexBuffer(this.graphicsDevice, particleFormat, psysVertCount, BUFFER_DYNAMIC);
        this.indexBuffer = new IndexBuffer(this.graphicsDevice, INDEXFORMAT_UINT16, psysIndexCount);
      }

      const data = new Float32Array(this.vertexBuffer.lock());
      let meshData, stride, texCoordOffset;

      if (this.useMesh) {
        meshData = new Float32Array(this.mesh.vertexBuffer.lock());
        stride = meshData.length / this.mesh.vertexBuffer.numVertices;

        for (let elem = 0; elem < this.mesh.vertexBuffer.format.elements.length; elem++) {
          if (this.mesh.vertexBuffer.format.elements[elem].name === SEMANTIC_TEXCOORD0) {
            texCoordOffset = this.mesh.vertexBuffer.format.elements[elem].offset / 4;
            break;
          }
        }
      }

      for (let i = 0; i < psysVertCount; i++) {
        const id = Math.floor(i / this.numParticleVerts);

        if (!this.useMesh) {
          const vertID = i % 4;
          data[i * 4] = particleVerts[vertID][0];
          data[i * 4 + 1] = particleVerts[vertID][1];
          data[i * 4 + 2] = 0;
          data[i * 4 + 3] = id;
        } else {
          const vert = i % this.numParticleVerts;
          data[i * 6] = meshData[vert * stride];
          data[i * 6 + 1] = meshData[vert * stride + 1];
          data[i * 6 + 2] = meshData[vert * stride + 2];
          data[i * 6 + 3] = id;
          data[i * 6 + 4] = meshData[vert * stride + texCoordOffset + 0];
          data[i * 6 + 5] = 1.0 - meshData[vert * stride + texCoordOffset + 1];
        }
      }

      if (this.useCpu) {
        this.vbCPU = new Float32Array(data);
        this.vbOld = new Float32Array(this.vbCPU.length);
      }

      this.vertexBuffer.unlock();

      if (this.useMesh) {
        this.mesh.vertexBuffer.unlock();
      }

      let dst = 0;
      const indices = new Uint16Array(this.indexBuffer.lock());
      if (this.useMesh) meshData = new Uint16Array(this.mesh.indexBuffer[0].lock());

      for (let i = 0; i < numParticles; i++) {
        if (!this.useMesh) {
          const baseIndex = i * 4;
          indices[dst++] = baseIndex;
          indices[dst++] = baseIndex + 1;
          indices[dst++] = baseIndex + 2;
          indices[dst++] = baseIndex;
          indices[dst++] = baseIndex + 2;
          indices[dst++] = baseIndex + 3;
        } else {
          for (let j = 0; j < this.numParticleIndices; j++) {
            indices[i * this.numParticleIndices + j] = meshData[j] + i * this.numParticleVerts;
          }
        }
      }

      this.indexBuffer.unlock();
      if (this.useMesh) this.mesh.indexBuffer[0].unlock();
    }
  }

  reset() {
    this.beenReset = true;
    this.seed = Math.random();
    this.material.setParameter('seed', this.seed);

    if (this.useCpu) {
      for (let i = 0; i < this.particleTexStart.length; i++) {
        this.particleTex[i] = this.particleTexStart[i];
      }
    } else {
      this._initializeTextures();
    }

    this.resetWorldBounds();
    this.resetTime();
    const origLoop = this.loop;
    this.loop = true;
    this.addTime(0, false);
    this.loop = origLoop;

    if (this.preWarm) {
      this.prewarm(this.lifetime);
    }
  }

  prewarm(time) {
    const lifetimeFraction = time / this.lifetime;
    const iterations = Math.min(Math.floor(lifetimeFraction * this.precision), this.precision);
    const stepDelta = time / iterations;

    for (let i = 0; i < iterations; i++) {
      this.addTime(stepDelta, false);
    }
  }

  resetTime() {
    this.endTime = calcEndTime(this);
  }

  finishFrame() {
    if (this.useCpu) this.vertexBuffer.unlock();
  }

  addTime(delta, isOnStop) {
    const device = this.graphicsDevice;
    this.simTimeTotal += delta;
    this.calculateWorldBounds();

    if (this._isAnimated()) {
      const tilesParams = this.animTilesParams;
      tilesParams[0] = 1.0 / this.animTilesX;
      tilesParams[1] = 1.0 / this.animTilesY;
      const params = this.animParams;
      params[0] = this.animStartFrame;
      params[1] = this.animNumFrames * this.animSpeed;
      params[2] = this.animNumFrames - 1;
      params[3] = this.animNumAnimations - 1;
      const animIndexParams = this.animIndexParams;
      animIndexParams[0] = this.animIndex;
      animIndexParams[1] = this.randomizeAnimIndex;
    }

    if (this.scene) {
      if (this.camera !== this.scene._activeCamera) {
        this.camera = this.scene._activeCamera;
        this.onChangeCamera();
      }
    }

    if (this.emitterShape === EMITTERSHAPE_BOX) {
      extentsInnerRatioUniform[0] = this.emitterExtents.x !== 0 ? this.emitterExtentsInner.x / this.emitterExtents.x : 0;
      extentsInnerRatioUniform[1] = this.emitterExtents.y !== 0 ? this.emitterExtentsInner.y / this.emitterExtents.y : 0;
      extentsInnerRatioUniform[2] = this.emitterExtents.z !== 0 ? this.emitterExtentsInner.z / this.emitterExtents.z : 0;

      if (this.meshInstance.node === null) {
        spawnMatrix.setTRS(Vec3.ZERO, Quat.IDENTITY, this.emitterExtents);
      } else {
        spawnMatrix.setTRS(Vec3.ZERO, this.meshInstance.node.getRotation(), tmpVec3.copy(this.emitterExtents).mul(this.meshInstance.node.localScale));
      }
    }

    let emitterPos;
    const emitterScale = this.meshInstance.node === null ? Vec3.ONE : this.meshInstance.node.localScale;
    this.emitterScaleUniform[0] = emitterScale.x;
    this.emitterScaleUniform[1] = emitterScale.y;
    this.emitterScaleUniform[2] = emitterScale.z;
    this.material.setParameter('emitterScale', this.emitterScaleUniform);

    if (this.localSpace && this.meshInstance.node) {
      emitterPos = this.meshInstance.node.getPosition();
      this.emitterPosUniform[0] = emitterPos.x;
      this.emitterPosUniform[1] = emitterPos.y;
      this.emitterPosUniform[2] = emitterPos.z;
      this.material.setParameter('emitterPos', this.emitterPosUniform);
    }

    this._compParticleFaceParams();

    if (!this.useCpu) {
      this._gpuUpdater.update(device, spawnMatrix, extentsInnerRatioUniform, delta, isOnStop);
    } else {
      const data = new Float32Array(this.vertexBuffer.lock());

      this._cpuUpdater.update(data, this.vbToSort, this.particleTex, spawnMatrix, extentsInnerRatioUniform, emitterPos, delta, isOnStop);
    }

    if (!this.loop) {
      if (Date.now() > this.endTime) {
        if (this.onFinished) this.onFinished();
        this.meshInstance.visible = false;
      }
    }

    if (this.meshInstance) {
      this.meshInstance.drawOrder = this.drawOrder;
    }
  }

  _destroyResources() {
    if (this.particleTexIN) {
      this.particleTexIN.destroy();
      this.particleTexIN = null;
    }

    if (this.particleTexOUT) {
      this.particleTexOUT.destroy();
      this.particleTexOUT = null;
    }

    if (this.particleTexStart && this.particleTexStart.destroy) {
      this.particleTexStart.destroy();
      this.particleTexStart = null;
    }

    if (this.rtParticleTexIN) {
      this.rtParticleTexIN.destroy();
      this.rtParticleTexIN = null;
    }

    if (this.rtParticleTexOUT) {
      this.rtParticleTexOUT.destroy();
      this.rtParticleTexOUT = null;
    }

    if (this.internalTex0) {
      this.internalTex0.destroy();
      this.internalTex0 = null;
    }

    if (this.internalTex1) {
      this.internalTex1.destroy();
      this.internalTex1 = null;
    }

    if (this.internalTex2) {
      this.internalTex2.destroy();
      this.internalTex2 = null;
    }

    if (this.internalTex3) {
      this.internalTex3.destroy();
      this.internalTex3 = null;
    }

    if (this.colorParam) {
      this.colorParam.destroy();
      this.colorParam = null;
    }

    if (this.vertexBuffer) {
      this.vertexBuffer.destroy();
      this.vertexBuffer = undefined;
    }

    if (this.indexBuffer) {
      this.indexBuffer.destroy();
      this.indexBuffer = undefined;
    }

    if (this.material) {
      this.material.destroy();
      this.material = null;
    }
  }

  destroy() {
    this.camera = null;

    this._destroyResources();
  }

}

const tempSet = new Set();
const clearDepthOptions = {
  depth: 1.0,
  flags: CLEARFLAG_DEPTH
};

class Picker {
  constructor(app, width, height) {
    if (app instanceof GraphicsDevice) {
      app = getApplication();
    }

    this.app = app;
    this.device = app.graphicsDevice;
    this.pickColor = new Float32Array(4);
    this.pickColor[3] = 1;
    this.mapping = [];
    this.cameraEntity = null;
    this.layer = null;
    this.layerComp = null;
    this.initLayerComposition();
    this._renderTarget = null;
    const device = this.device;
    this.clearDepthCommand = new Command(0, 0, function () {
      device.clear(clearDepthOptions);
    });
    this.width = 0;
    this.height = 0;
    this.resize(width, height);
  }

  getSelection(x, y, width, height) {
    const device = this.device;

    if (typeof x === 'object') {
      const rect = x;
      x = rect.x;
      y = rect.y;
      width = rect.width;
      height = rect.height;
    } else {
      y = this.renderTarget.height - (y + (height || 1));
    }

    x = Math.floor(x);
    y = Math.floor(y);
    width = Math.floor(Math.max(width || 1, 1));
    height = Math.floor(Math.max(height || 1, 1));
    const origRenderTarget = device.renderTarget;
    device.setRenderTarget(this.renderTarget);
    device.updateBegin();
    const pixels = new Uint8Array(4 * width * height);
    device.readPixels(x, y, width, height, pixels);
    device.updateEnd();
    device.setRenderTarget(origRenderTarget);
    const mapping = this.mapping;

    for (let i = 0; i < width * height; i++) {
      const r = pixels[4 * i + 0];
      const g = pixels[4 * i + 1];
      const b = pixels[4 * i + 2];
      const index = r << 16 | g << 8 | b;

      if (index !== 0xffffff) {
        tempSet.add(mapping[index]);
      }
    }

    const selection = [];
    tempSet.forEach(meshInstance => selection.push(meshInstance));
    tempSet.clear();
    return selection;
  }

  allocateRenderTarget() {
    const colorBuffer = new Texture(this.device, {
      format: PIXELFORMAT_R8_G8_B8_A8,
      width: this.width,
      height: this.height,
      mipmaps: false,
      minFilter: FILTER_NEAREST,
      magFilter: FILTER_NEAREST,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      name: 'pick'
    });
    this.renderTarget = new RenderTarget({
      colorBuffer: colorBuffer,
      depth: true
    });
  }

  releaseRenderTarget() {
    this.cameraEntity.camera.renderTarget = null;

    if (this._renderTarget) {
      this._renderTarget.destroyTextureBuffers();

      this._renderTarget.destroy();

      this._renderTarget = null;
    }
  }

  initLayerComposition() {
    const device = this.device;
    const self = this;
    const pickColorId = device.scope.resolve('uColor');
    this.cameraEntity = new Entity();
    this.cameraEntity.addComponent('camera');
    this.layer = new Layer({
      name: 'Picker',
      shaderPass: SHADER_PICK,
      opaqueSortMode: SORTMODE_NONE,
      onDrawCall: function (meshInstance, index) {
        self.pickColor[0] = (index >> 16 & 0xff) / 255;
        self.pickColor[1] = (index >> 8 & 0xff) / 255;
        self.pickColor[2] = (index & 0xff) / 255;
        pickColorId.setValue(self.pickColor);
        device.setBlending(false);
        self.mapping[index] = meshInstance;
      }
    });
    this.layer.addCamera(this.cameraEntity.camera);
    this.layerComp = new LayerComposition('picker');
    this.layerComp.pushOpaque(this.layer);
  }

  prepare(camera, scene, layers) {
    if (camera instanceof Camera) {
      camera = camera.node.camera;
    }

    if (layers instanceof Layer) {
      layers = [layers];
    }

    this.layer.clearMeshInstances();
    const destMeshInstances = this.layer.opaqueMeshInstances;
    const srcLayers = scene.layers.layerList;
    const subLayerEnabled = scene.layers.subLayerEnabled;
    const isTransparent = scene.layers.subLayerList;

    for (let i = 0; i < srcLayers.length; i++) {
      const srcLayer = srcLayers[i];

      if (layers && layers.indexOf(srcLayer) < 0) {
        continue;
      }

      if (srcLayer.enabled && subLayerEnabled[i]) {
        const layerCamId = srcLayer.cameras.indexOf(camera);

        if (layerCamId >= 0) {
          if (srcLayer._clearDepthBuffer) {
            destMeshInstances.push(this.clearDepthCommand);
          }

          const meshInstances = isTransparent[i] ? srcLayer.instances.transparentMeshInstances : srcLayer.instances.opaqueMeshInstances;

          for (let j = 0; j < meshInstances.length; j++) {
            const meshInstance = meshInstances[j];

            if (meshInstance.pick) {
              destMeshInstances.push(meshInstance);
            }
          }
        }
      }
    }

    if (!this.renderTarget || this.width !== this.renderTarget.width || this.height !== this.renderTarget.height) {
      this.releaseRenderTarget();
      this.allocateRenderTarget();
    }

    this.updateCamera(camera);
    this.mapping.length = 0;
    this.app.renderComposition(this.layerComp);
  }

  updateCamera(srcCamera) {
    this.cameraEntity.copy(srcCamera.entity);
    this.cameraEntity.name = 'PickerCamera';
    const destCamera = this.cameraEntity.camera;
    destCamera.copy(srcCamera);
    destCamera.clearColorBuffer = true;
    destCamera.clearDepthBuffer = true;
    destCamera.clearStencilBuffer = true;
    destCamera.clearColor = Color.WHITE;
    destCamera.renderTarget = this.renderTarget;
    this.layer.clearCameras();
    this.layer.addCamera(destCamera);
    destCamera.layers = [this.layer.id];
  }

  resize(width, height) {
    this.width = Math.floor(width);
    this.height = Math.floor(height);
  }

}

class Skin {
  constructor(graphicsDevice, ibp, boneNames) {
    this.device = graphicsDevice;
    this.inverseBindPose = ibp;
    this.boneNames = boneNames;
  }

}

const spriteNormals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1];
const spriteIndices = [0, 1, 3, 2, 3, 1];

class Sprite extends EventHandler {
  constructor(device, options) {
    super();
    this._device = device;
    this._pixelsPerUnit = options && options.pixelsPerUnit !== undefined ? options.pixelsPerUnit : 1;
    this._renderMode = options && options.renderMode !== undefined ? options.renderMode : SPRITE_RENDERMODE_SIMPLE;
    this._atlas = options && options.atlas !== undefined ? options.atlas : null;
    this._frameKeys = options && options.frameKeys !== undefined ? options.frameKeys : null;
    this._meshes = [];
    this._updatingProperties = false;
    this._meshesDirty = false;

    if (this._atlas && this._frameKeys) {
      this._createMeshes();
    }
  }

  set frameKeys(value) {
    this._frameKeys = value;

    if (this._atlas && this._frameKeys) {
      if (this._updatingProperties) {
        this._meshesDirty = true;
      } else {
        this._createMeshes();
      }
    }

    this.fire('set:frameKeys', value);
  }

  get frameKeys() {
    return this._frameKeys;
  }

  set atlas(value) {
    if (value === this._atlas) return;

    if (this._atlas) {
      this._atlas.off('set:frames', this._onSetFrames, this);

      this._atlas.off('set:frame', this._onFrameChanged, this);

      this._atlas.off('remove:frame', this._onFrameRemoved, this);
    }

    this._atlas = value;

    if (this._atlas && this._frameKeys) {
      this._atlas.on('set:frames', this._onSetFrames, this);

      this._atlas.on('set:frame', this._onFrameChanged, this);

      this._atlas.on('remove:frame', this._onFrameRemoved, this);

      if (this._updatingProperties) {
        this._meshesDirty = true;
      } else {
        this._createMeshes();
      }
    }

    this.fire('set:atlas', value);
  }

  get atlas() {
    return this._atlas;
  }

  set pixelsPerUnit(value) {
    if (this._pixelsPerUnit === value) return;
    this._pixelsPerUnit = value;
    this.fire('set:pixelsPerUnit', value);

    if (this._atlas && this._frameKeys && this.renderMode === SPRITE_RENDERMODE_SIMPLE) {
      if (this._updatingProperties) {
        this._meshesDirty = true;
      } else {
        this._createMeshes();
      }
    }
  }

  get pixelsPerUnit() {
    return this._pixelsPerUnit;
  }

  set renderMode(value) {
    if (this._renderMode === value) return;
    const prev = this._renderMode;
    this._renderMode = value;
    this.fire('set:renderMode', value);

    if (prev === SPRITE_RENDERMODE_SIMPLE || value === SPRITE_RENDERMODE_SIMPLE) {
      if (this._atlas && this._frameKeys) {
        if (this._updatingProperties) {
          this._meshesDirty = true;
        } else {
          this._createMeshes();
        }
      }
    }
  }

  get renderMode() {
    return this._renderMode;
  }

  get meshes() {
    return this._meshes;
  }

  _createMeshes() {
    const len = this._meshes.length;

    for (let i = 0; i < len; i++) {
      const mesh = this._meshes[i];

      if (mesh) {
        mesh.destroy();
      }
    }

    const count = this._frameKeys.length;
    this._meshes = new Array(count);
    const createMeshFunc = this.renderMode === SPRITE_RENDERMODE_SLICED || this._renderMode === SPRITE_RENDERMODE_TILED ? this._create9SliceMesh : this._createSimpleMesh;

    for (let i = 0; i < count; i++) {
      const frame = this._atlas.frames[this._frameKeys[i]];
      this._meshes[i] = frame ? createMeshFunc.call(this, frame) : null;
    }

    this.fire('set:meshes');
  }

  _createSimpleMesh(frame) {
    const rect = frame.rect;
    const texWidth = this._atlas.texture.width;
    const texHeight = this._atlas.texture.height;
    const w = rect.z / this._pixelsPerUnit;
    const h = rect.w / this._pixelsPerUnit;
    const hp = frame.pivot.x;
    const vp = frame.pivot.y;
    const positions = [-hp * w, -vp * h, 0, (1 - hp) * w, -vp * h, 0, (1 - hp) * w, (1 - vp) * h, 0, -hp * w, (1 - vp) * h, 0];
    const lu = rect.x / texWidth;
    const bv = 1.0 - rect.y / texHeight;
    const ru = (rect.x + rect.z) / texWidth;
    const tv = 1.0 - (rect.y + rect.w) / texHeight;
    const uvs = [lu, bv, ru, bv, ru, tv, lu, tv];
    const mesh = createMesh$1(this._device, positions, {
      uvs: uvs,
      normals: spriteNormals,
      indices: spriteIndices
    });
    return mesh;
  }

  _create9SliceMesh() {
    const he = Vec2.ONE;
    const ws = 3;
    const ls = 3;
    const positions = [];
    const normals = [];
    const uvs = [];
    const indices = [];
    let vcounter = 0;

    for (let i = 0; i <= ws; i++) {
      const u = i === 0 || i === ws ? 0 : 1;

      for (let j = 0; j <= ls; j++) {
        const x = -he.x + 2.0 * he.x * (i <= 1 ? 0 : 3) / ws;
        const y = 0.0;
        const z = -(-he.y + 2.0 * he.y * (j <= 1 ? 0 : 3) / ls);
        const v = j === 0 || j === ls ? 0 : 1;
        positions.push(-x, y, z);
        normals.push(0.0, 1.0, 0.0);
        uvs.push(u, v);

        if (i < ws && j < ls) {
          indices.push(vcounter + ls + 1, vcounter + 1, vcounter);
          indices.push(vcounter + ls + 1, vcounter + ls + 2, vcounter + 1);
        }

        vcounter++;
      }
    }

    const options = {
      normals: normals,
      uvs: uvs,
      indices: indices
    };
    return createMesh$1(this._device, positions, options);
  }

  _onSetFrames(frames) {
    if (this._updatingProperties) {
      this._meshesDirty = true;
    } else {
      this._createMeshes();
    }
  }

  _onFrameChanged(frameKey, frame) {
    const idx = this._frameKeys.indexOf(frameKey);

    if (idx < 0) return;

    if (frame) {
      if (this.renderMode === SPRITE_RENDERMODE_SIMPLE) {
        this._meshes[idx] = this._createSimpleMesh(frame);
      }
    } else {
      this._meshes[idx] = null;
    }

    this.fire('set:meshes');
  }

  _onFrameRemoved(frameKey) {
    const idx = this._frameKeys.indexOf(frameKey);

    if (idx < 0) return;
    this._meshes[idx] = null;
    this.fire('set:meshes');
  }

  startUpdate() {
    this._updatingProperties = true;
    this._meshesDirty = false;
  }

  endUpdate() {
    this._updatingProperties = false;

    if (this._meshesDirty && this._atlas && this._frameKeys) {
      this._createMeshes();
    }

    this._meshesDirty = false;
  }

  destroy() {
    for (const mesh of this._meshes) {
      if (mesh) mesh.destroy();
    }

    this._meshes.length = 0;
  }

}

class StencilParameters {
  constructor(options) {
    this.func = options.func === undefined ? FUNC_ALWAYS : options.func;
    this.ref = options.ref || 0;
    this.readMask = options.readMask === undefined ? 0xFF : options.readMask;
    this.writeMask = options.writeMask === undefined ? 0xFF : options.writeMask;
    this.fail = options.fail || STENCILOP_KEEP;
    this.zfail = options.zfail || STENCILOP_KEEP;
    this.zpass = options.zpass || STENCILOP_KEEP;
  }

  clone() {
    return new StencilParameters({
      func: this.func,
      ref: this.ref,
      readMask: this.readMask,
      writeMask: this.writeMask,
      fail: this.fail,
      zfail: this.zfail,
      zpass: this.zpass
    });
  }

}

class TextureAtlas extends EventHandler {
  constructor() {
    super();
    this._texture = null;
    this._frames = null;
  }

  set texture(value) {
    this._texture = value;
    this.fire('set:texture', value);
  }

  get texture() {
    return this._texture;
  }

  set frames(value) {
    this._frames = value;
    this.fire('set:frames', value);
  }

  get frames() {
    return this._frames;
  }

  setFrame(key, data) {
    let frame = this._frames[key];

    if (!frame) {
      frame = {
        rect: data.rect.clone(),
        pivot: data.pivot.clone(),
        border: data.border.clone()
      };
      this._frames[key] = frame;
    } else {
      frame.rect.copy(data.rect);
      frame.pivot.copy(data.pivot);
      frame.border.copy(data.border);
    }

    this.fire('set:frame', key.toString(), frame);
  }

  removeFrame(key) {
    const frame = this._frames[key];

    if (frame) {
      delete this._frames[key];
      this.fire('remove:frame', key.toString(), frame);
    }
  }

  destroy() {
    if (this._texture) {
      this._texture.destroy();
    }
  }

}

class Key {
  constructor(time, position, rotation, scale) {
    this.time = time;
    this.position = position;
    this.rotation = rotation;
    this.scale = scale;
  }

}

class Node$1 {
  constructor() {
    this._name = '';
    this._keys = [];
  }

}

class Animation {
  constructor() {
    this.name = '';
    this.duration = 0;
    this._nodes = [];
    this._nodeDict = {};
  }

  getNode(name) {
    return this._nodeDict[name];
  }

  addNode(node) {
    this._nodes.push(node);

    this._nodeDict[node._name] = node;
  }

  get nodes() {
    return this._nodes;
  }

}

class InterpolatedKey {
  constructor() {
    this._written = false;
    this._name = '';
    this._keyFrames = [];
    this._quat = new Quat();
    this._pos = new Vec3();
    this._scale = new Vec3();
    this._targetNode = null;
  }

  getTarget() {
    return this._targetNode;
  }

  setTarget(node) {
    this._targetNode = node;
  }

}

class Skeleton {
  constructor(graph) {
    this.looping = true;
    this._animation = null;
    this._time = 0;
    this._interpolatedKeys = [];
    this._interpolatedKeyDict = {};
    this._currKeyIndices = {};
    this.graph = null;

    const addInterpolatedKeys = node => {
      const interpKey = new InterpolatedKey();
      interpKey._name = node.name;

      this._interpolatedKeys.push(interpKey);

      this._interpolatedKeyDict[node.name] = interpKey;
      this._currKeyIndices[node.name] = 0;

      for (let i = 0; i < node._children.length; i++) addInterpolatedKeys(node._children[i]);
    };

    addInterpolatedKeys(graph);
  }

  set animation(value) {
    this._animation = value;
    this.currentTime = 0;
  }

  get animation() {
    return this._animation;
  }

  set currentTime(value) {
    this._time = value;
    const numNodes = this._interpolatedKeys.length;

    for (let i = 0; i < numNodes; i++) {
      const node = this._interpolatedKeys[i];
      const nodeName = node._name;
      this._currKeyIndices[nodeName] = 0;
    }

    this.addTime(0);
    this.updateGraph();
  }

  get currentTime() {
    return this._time;
  }

  get numNodes() {
    return this._interpolatedKeys.length;
  }

  addTime(delta) {
    if (this._animation !== null) {
      const nodes = this._animation._nodes;
      const duration = this._animation.duration;

      if (this._time === duration && !this.looping) {
        return;
      }

      this._time += delta;

      if (this._time > duration) {
        this._time = this.looping ? 0.0 : duration;

        for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          const nodeName = node._name;
          this._currKeyIndices[nodeName] = 0;
        }
      } else if (this._time < 0) {
        this._time = this.looping ? duration : 0.0;

        for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          const nodeName = node._name;
          this._currKeyIndices[nodeName] = node._keys.length - 2;
        }
      }

      const offset = delta >= 0 ? 1 : -1;

      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        const nodeName = node._name;
        const keys = node._keys;
        const interpKey = this._interpolatedKeyDict[nodeName];

        if (interpKey === undefined) {
          continue;
        }

        let foundKey = false;

        if (keys.length !== 1) {
          for (let currKeyIndex = this._currKeyIndices[nodeName]; currKeyIndex < keys.length - 1 && currKeyIndex >= 0; currKeyIndex += offset) {
            const k1 = keys[currKeyIndex];
            const k2 = keys[currKeyIndex + 1];

            if (k1.time <= this._time && k2.time >= this._time) {
              const alpha = (this._time - k1.time) / (k2.time - k1.time);

              interpKey._pos.lerp(k1.position, k2.position, alpha);

              interpKey._quat.slerp(k1.rotation, k2.rotation, alpha);

              interpKey._scale.lerp(k1.scale, k2.scale, alpha);

              interpKey._written = true;
              this._currKeyIndices[nodeName] = currKeyIndex;
              foundKey = true;
              break;
            }
          }
        }

        if (keys.length === 1 || !foundKey && this._time === 0.0 && this.looping) {
          interpKey._pos.copy(keys[0].position);

          interpKey._quat.copy(keys[0].rotation);

          interpKey._scale.copy(keys[0].scale);

          interpKey._written = true;
        }
      }
    }
  }

  blend(skel1, skel2, alpha) {
    const numNodes = this._interpolatedKeys.length;

    for (let i = 0; i < numNodes; i++) {
      const key1 = skel1._interpolatedKeys[i];
      const key2 = skel2._interpolatedKeys[i];
      const dstKey = this._interpolatedKeys[i];

      if (key1._written && key2._written) {
        dstKey._quat.slerp(key1._quat, skel2._interpolatedKeys[i]._quat, alpha);

        dstKey._pos.lerp(key1._pos, skel2._interpolatedKeys[i]._pos, alpha);

        dstKey._scale.lerp(key1._scale, key2._scale, alpha);

        dstKey._written = true;
      } else if (key1._written) {
        dstKey._quat.copy(key1._quat);

        dstKey._pos.copy(key1._pos);

        dstKey._scale.copy(key1._scale);

        dstKey._written = true;
      } else if (key2._written) {
        dstKey._quat.copy(key2._quat);

        dstKey._pos.copy(key2._pos);

        dstKey._scale.copy(key2._scale);

        dstKey._written = true;
      }
    }
  }

  setGraph(graph) {
    this.graph = graph;

    if (graph) {
      for (let i = 0; i < this._interpolatedKeys.length; i++) {
        const interpKey = this._interpolatedKeys[i];
        const graphNode = graph.findByName(interpKey._name);

        this._interpolatedKeys[i].setTarget(graphNode);
      }
    } else {
      for (let i = 0; i < this._interpolatedKeys.length; i++) {
        this._interpolatedKeys[i].setTarget(null);
      }
    }
  }

  updateGraph() {
    if (this.graph) {
      for (let i = 0; i < this._interpolatedKeys.length; i++) {
        const interpKey = this._interpolatedKeys[i];

        if (interpKey._written) {
          const transform = interpKey.getTarget();
          transform.localPosition.copy(interpKey._pos);
          transform.localRotation.copy(interpKey._quat);
          transform.localScale.copy(interpKey._scale);
          if (!transform._dirtyLocal) transform._dirtifyLocal();
          interpKey._written = false;
        }
      }
    }
  }

}

const INTERPOLATION_STEP = 0;
const INTERPOLATION_LINEAR = 1;
const INTERPOLATION_CUBIC = 2;

class AnimBinder {
  static joinPath(pathSegments, character) {
    character = character || '.';

    const escape = function escape(string) {
      return string.replace(/\\/g, '\\\\').replace(new RegExp('\\' + character, 'g'), '\\' + character);
    };

    return pathSegments.map(escape).join(character);
  }

  static splitPath(path, character) {
    character = character || '.';
    const result = [];
    let curr = "";
    let i = 0;

    while (i < path.length) {
      let c = path[i++];

      if (c === '\\' && i < path.length) {
        c = path[i++];

        if (c === '\\' || c === character) {
          curr += c;
        } else {
          curr += '\\' + c;
        }
      } else if (c === character) {
        result.push(curr);
        curr = '';
      } else {
        curr += c;
      }
    }

    if (curr.length > 0) {
      result.push(curr);
    }

    return result;
  }

  static encode(entityPath, component, propertyPath) {
    return `${Array.isArray(entityPath) ? entityPath.join('/') : entityPath}/${component}/${Array.isArray(propertyPath) ? propertyPath.join('/') : propertyPath}`;
  }

  resolve(path) {
    return null;
  }

  unresolve(path) {}

  update(deltaTime) {}

}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

class AnimCache {
  constructor() {
    this._left = Infinity;
    this._right = -Infinity;
    this._len = 0;
    this._recip = 0;
    this._p0 = 0;
    this._p1 = 0;
    this._t = 0;
    this._hermite = {
      valid: false,
      p0: 0,
      m0: 0,
      p1: 0,
      m1: 0
    };
  }

  update(time, input) {
    if (time < this._left || time >= this._right) {
      const len = input.length;

      if (!len) {
        this._left = -Infinity;
        this._right = Infinity;
        this._len = 0;
        this._recip = 0;
        this._p0 = this._p1 = 0;
      } else {
        if (time < input[0]) {
          this._left = -Infinity;
          this._right = input[0];
          this._len = 0;
          this._recip = 0;
          this._p0 = this._p1 = 0;
        } else if (time >= input[len - 1]) {
          this._left = input[len - 1];
          this._right = Infinity;
          this._len = 0;
          this._recip = 0;
          this._p0 = this._p1 = len - 1;
        } else {
          const index = this._findKey(time, input);

          this._left = input[index];
          this._right = input[index + 1];
          this._len = this._right - this._left;
          const diff = 1.0 / this._len;
          this._recip = isFinite(diff) ? diff : 0;
          this._p0 = index;
          this._p1 = index + 1;
        }
      }
    }

    this._t = this._recip === 0 ? 0 : (time - this._left) * this._recip;
    this._hermite.valid = false;
  }

  _findKey(time, input) {
    let index = 0;

    while (time >= input[index + 1]) {
      index++;
    }

    return index;
  }

  eval(result, interpolation, output) {
    const data = output._data;
    const comp = output._components;
    const idx0 = this._p0 * comp;

    if (interpolation === INTERPOLATION_STEP) {
      for (let i = 0; i < comp; ++i) {
        result[i] = data[idx0 + i];
      }
    } else {
      const t = this._t;
      const idx1 = this._p1 * comp;

      switch (interpolation) {
        case INTERPOLATION_LINEAR:
          for (let i = 0; i < comp; ++i) {
            result[i] = math$1.lerp(data[idx0 + i], data[idx1 + i], t);
          }

          break;

        case INTERPOLATION_CUBIC:
          {
            const hermite = this._hermite;

            if (!hermite.valid) {
              const t2 = t * t;
              const twot = t + t;
              const omt = 1 - t;
              const omt2 = omt * omt;
              hermite.valid = true;
              hermite.p0 = (1 + twot) * omt2;
              hermite.m0 = t * omt2;
              hermite.p1 = t2 * (3 - twot);
              hermite.m1 = t2 * (t - 1);
            }

            const p0 = (this._p0 * 3 + 1) * comp;
            const m0 = (this._p0 * 3 + 2) * comp;
            const p1 = (this._p1 * 3 + 1) * comp;
            const m1 = (this._p1 * 3 + 0) * comp;

            for (let i = 0; i < comp; ++i) {
              result[i] = hermite.p0 * data[p0 + i] + hermite.m0 * data[m0 + i] * this._len + hermite.p1 * data[p1 + i] + hermite.m1 * data[m1 + i] * this._len;
            }

            break;
          }
      }
    }
  }

}

class AnimSnapshot {
  constructor(animTrack) {
    this._name = animTrack.name + 'Snapshot';
    this._time = -1;
    this._cache = [];
    this._results = [];

    for (let i = 0; i < animTrack._inputs.length; ++i) {
      this._cache[i] = new AnimCache();
    }

    const curves = animTrack._curves;
    const outputs = animTrack._outputs;

    for (let i = 0; i < curves.length; ++i) {
      const curve = curves[i];
      const output = outputs[curve._output];
      const storage = [];

      for (let j = 0; j < output._components; ++j) {
        storage[j] = 0;
      }

      this._results[i] = storage;
    }
  }

}

class AnimClip {
  constructor(track, time, speed, playing, loop, eventHandler) {
    this._name = track.name;
    this._track = track;
    this._snapshot = new AnimSnapshot(track);
    this._playing = playing;
    this._time = time;
    this._speed = speed;
    this._loop = loop;
    this._blendWeight = 1.0;
    this._blendOrder = 0.0;
    this._eventHandler = eventHandler;
    this._eventCursor = 0;

    while (this._track.events[this._eventCursor] && this._track.events[this._eventCursor].time < this.time) {
      this._eventCursor++;
    }
  }

  set name(name) {
    this._name = name;
  }

  get name() {
    return this._name;
  }

  get track() {
    return this._track;
  }

  get snapshot() {
    return this._snapshot;
  }

  set time(time) {
    this._time = time;
  }

  get time() {
    return this._time;
  }

  set speed(speed) {
    this._speed = speed;
  }

  get speed() {
    return this._speed;
  }

  set loop(loop) {
    this._loop = loop;
  }

  get loop() {
    return this._loop;
  }

  set blendWeight(blendWeight) {
    this._blendWeight = blendWeight;
  }

  get blendWeight() {
    return this._blendWeight;
  }

  set blendOrder(blendOrder) {
    this._blendOrder = blendOrder;
  }

  get blendOrder() {
    return this._blendOrder;
  }

  set eventCursor(value) {
    this._eventCursor = value;
  }

  get eventCursor() {
    return this._eventCursor;
  }

  activeEventsForFrame(frameStartTime, frameEndTime) {
    if (frameStartTime === 0) {
      this.eventCursor = 0;
    }

    let clippedFrameDuration;

    if (frameEndTime > this.track.duration) {
      clippedFrameDuration = frameEndTime - this.track.duration;
      frameEndTime = this.track.duration;
    }

    while (this.track.events[this.eventCursor] && this.track.events[this.eventCursor].time >= frameStartTime && (frameEndTime === this.track.duration ? this.track.events[this.eventCursor].time <= frameEndTime : this.track.events[this.eventCursor].time < frameEndTime)) {
      const event = this.track.events[this.eventCursor];

      this._eventHandler.fire(event.name, _extends({
        track: this.track
      }, event));

      this.eventCursor++;
    }

    if (Number.isFinite(clippedFrameDuration)) {
      this.activeEventsForFrame(0, clippedFrameDuration);
    }
  }

  _update(deltaTime) {
    if (this._playing) {
      let time = this._time;
      const duration = this._track.duration;
      const speed = this._speed;
      const loop = this._loop;

      if (this._track.events.length > 0 && duration > 0) {
        this.activeEventsForFrame(time, time + speed * deltaTime);
      }

      time += speed * deltaTime;

      if (speed >= 0) {
        if (time > duration) {
          if (loop) {
            time = time % duration || 0;
          } else {
            time = this._track.duration;
            this.pause();
          }
        }
      } else {
        if (time < 0) {
          if (loop) {
            time = duration + (time % duration || 0);
          } else {
            time = 0;
            this.pause();
          }
        }
      }

      this._time = time;
    }

    if (this._time !== this._snapshot._time) {
      this._track.eval(this._time, this._snapshot);
    }
  }

  play() {
    this._playing = true;
    this._time = 0;
  }

  stop() {
    this._playing = false;
    this._time = 0;
  }

  pause() {
    this._playing = false;
  }

  resume() {
    this._playing = true;
  }

  reset() {
    this._time = 0;
  }

}

class AnimCurve {
  constructor(paths, input, output, interpolation) {
    this._paths = paths;
    this._input = input;
    this._output = output;
    this._interpolation = interpolation;
  }

  get paths() {
    return this._paths;
  }

  get input() {
    return this._input;
  }

  get output() {
    return this._output;
  }

  get interpolation() {
    return this._interpolation;
  }

}

class AnimData {
  constructor(components, data) {
    this._components = components;
    this._data = data;
  }

  get components() {
    return this._components;
  }

  get data() {
    return this._data;
  }

}

const ANIM_INTERRUPTION_NONE = 'NONE';
const ANIM_INTERRUPTION_PREV = 'PREV_STATE';
const ANIM_INTERRUPTION_NEXT = 'NEXT_STATE';
const ANIM_INTERRUPTION_PREV_NEXT = 'PREV_STATE_NEXT_STATE';
const ANIM_INTERRUPTION_NEXT_PREV = 'NEXT_STATE_PREV_STATE';
const ANIM_GREATER_THAN = 'GREATER_THAN';
const ANIM_LESS_THAN = 'LESS_THAN';
const ANIM_GREATER_THAN_EQUAL_TO = 'GREATER_THAN_EQUAL_TO';
const ANIM_LESS_THAN_EQUAL_TO = 'LESS_THAN_EQUAL_TO';
const ANIM_EQUAL_TO = 'EQUAL_TO';
const ANIM_NOT_EQUAL_TO = 'NOT_EQUAL_TO';
const ANIM_PARAMETER_INTEGER = 'INTEGER';
const ANIM_PARAMETER_FLOAT = 'FLOAT';
const ANIM_PARAMETER_BOOLEAN = 'BOOLEAN';
const ANIM_PARAMETER_TRIGGER = 'TRIGGER';
const ANIM_BLEND_1D = '1D';
const ANIM_BLEND_2D_DIRECTIONAL = '2D_DIRECTIONAL';
const ANIM_BLEND_2D_CARTESIAN = '2D_CARTESIAN';
const ANIM_BLEND_DIRECT = 'DIRECT';
const ANIM_STATE_START = 'START';
const ANIM_STATE_END = 'END';
const ANIM_STATE_ANY = 'ANY';
const ANIM_CONTROL_STATES = [ANIM_STATE_START, ANIM_STATE_END, ANIM_STATE_ANY];
const ANIM_LAYER_OVERWRITE = 'OVERWRITE';
const ANIM_LAYER_ADDITIVE = 'ADDITIVE';

class AnimTargetValue {
  constructor(component, type) {
    this._component = component;
    this.mask = new Int8Array(component.layers.length);
    this.weights = new Float32Array(component.layers.length);
    this.totalWeight = 0;
    this.counter = 0;
    this.layerCounter = 0;
    this.valueType = type;
    this.dirty = true;
    this.value = type === AnimTargetValue.TYPE_QUAT ? [0, 0, 0, 1] : [0, 0, 0];
    this.baseValue = null;
    this.setter = null;
  }

  get _normalizeWeights() {
    return this._component.normalizeWeights;
  }

  getWeight(index) {
    if (this.dirty) this.updateWeights();

    if (this._normalizeWeights && this.totalWeight === 0 || !this.mask[index]) {
      return 0;
    } else if (this._normalizeWeights) {
      return this.weights[index] / this.totalWeight;
    }

    return math$1.clamp(this.weights[index], 0, 1);
  }

  _layerBlendType(index) {
    return this._component.layers[index].blendType;
  }

  setMask(index, value) {
    this.mask[index] = value;

    if (this._normalizeWeights) {
      if (this._component.layers[index].blendType === ANIM_LAYER_OVERWRITE) {
        this.mask = this.mask.fill(0, 0, index);
      }

      this.dirty = true;
    }
  }

  updateWeights() {
    this.totalWeight = 0;

    for (let i = 0; i < this.weights.length; i++) {
      this.weights[i] = this._component.layers[i].weight;
      this.totalWeight += this.mask[i] * this.weights[i];
    }

    this.dirty = false;
  }

  updateValue(index, value) {
    if (this.counter === 0) {
      AnimEvaluator._set(this.value, AnimTargetValue.IDENTITY_QUAT_ARR, this.valueType);

      if (!this._normalizeWeights) {
        AnimEvaluator._blend(this.value, this.baseValue, 1, this.valueType);
      }
    }

    if (!this.mask[index] || this.getWeight(index) === 0) return;

    if (this._layerBlendType(index) === ANIM_LAYER_ADDITIVE && !this._normalizeWeights) {
      if (this.valueType === AnimTargetValue.TYPE_QUAT) {
        const v = AnimTargetValue.q1.set(this.value[0], this.value[1], this.value[2], this.value[3]);
        const aV1 = AnimTargetValue.q2.set(this.baseValue[0], this.baseValue[1], this.baseValue[2], this.baseValue[3]);
        const aV2 = AnimTargetValue.q3.set(value[0], value[1], value[2], value[3]);
        const aV = aV1.invert().mul(aV2);
        aV.slerp(Quat.IDENTITY, aV, this.getWeight(index));
        v.mul(aV);
        AnimTargetValue.quatArr[0] = v.x;
        AnimTargetValue.quatArr[1] = v.y;
        AnimTargetValue.quatArr[2] = v.z;
        AnimTargetValue.quatArr[3] = v.w;

        AnimEvaluator._set(this.value, AnimTargetValue.quatArr, this.valueType);
      } else {
        AnimTargetValue.vecArr[0] = value[0] - this.baseValue[0];
        AnimTargetValue.vecArr[1] = value[1] - this.baseValue[1];
        AnimTargetValue.vecArr[2] = value[2] - this.baseValue[2];

        AnimEvaluator._blend(this.value, AnimTargetValue.vecArr, this.getWeight(index), this.valueType, true);
      }
    } else {
      AnimEvaluator._blend(this.value, value, this.getWeight(index), this.valueType);
    }

    if (this.setter) this.setter(this.value);
  }

  unbind() {
    if (this.setter) {
      this.setter(this.baseValue);
    }
  }

}

AnimTargetValue.TYPE_QUAT = 'quaternion';
AnimTargetValue.TYPE_VEC3 = 'vector3';
AnimTargetValue.q1 = new Quat();
AnimTargetValue.q2 = new Quat();
AnimTargetValue.q3 = new Quat();
AnimTargetValue.quatArr = [0, 0, 0, 1];
AnimTargetValue.vecArr = [0, 0, 0];
AnimTargetValue.IDENTITY_QUAT_ARR = [0, 0, 0, 1];

class AnimEvaluator {
  constructor(binder) {
    this._binder = binder;
    this._clips = [];
    this._inputs = [];
    this._outputs = [];
    this._targets = {};
  }

  get clips() {
    return this._clips;
  }

  static _dot(a, b) {
    const len = a.length;
    let result = 0;

    for (let i = 0; i < len; ++i) {
      result += a[i] * b[i];
    }

    return result;
  }

  static _normalize(a) {
    let l = AnimEvaluator._dot(a, a);

    if (l > 0) {
      l = 1.0 / Math.sqrt(l);
      const len = a.length;

      for (let i = 0; i < len; ++i) {
        a[i] *= l;
      }
    }
  }

  static _set(a, b, type) {
    const len = a.length;

    if (type === 'quaternion') {
      let l = AnimEvaluator._dot(b, b);

      if (l > 0) {
        l = 1.0 / Math.sqrt(l);
      }

      for (let i = 0; i < len; ++i) {
        a[i] = b[i] * l;
      }
    } else {
      for (let i = 0; i < len; ++i) {
        a[i] = b[i];
      }
    }
  }

  static _blendVec(a, b, t, additive) {
    const it = additive ? 1.0 : 1.0 - t;
    const len = a.length;

    for (let i = 0; i < len; ++i) {
      a[i] = a[i] * it + b[i] * t;
    }
  }

  static _blendQuat(a, b, t, additive) {
    const len = a.length;
    const it = additive ? 1.0 : 1.0 - t;

    if (AnimEvaluator._dot(a, b) < 0) {
      t = -t;
    }

    for (let i = 0; i < len; ++i) {
      a[i] = a[i] * it + b[i] * t;
    }

    if (!additive) {
      AnimEvaluator._normalize(a);
    }
  }

  static _blend(a, b, t, type, additive) {
    if (type === 'quaternion') {
      AnimEvaluator._blendQuat(a, b, t, additive);
    } else {
      AnimEvaluator._blendVec(a, b, t, additive);
    }
  }

  static _stableSort(a, lessFunc) {
    const len = a.length;

    for (let i = 0; i < len - 1; ++i) {
      for (let j = i + 1; j < len; ++j) {
        if (lessFunc(a[j], a[i])) {
          const tmp = a[i];
          a[i] = a[j];
          a[j] = tmp;
        }
      }
    }
  }

  addClip(clip) {
    const targets = this._targets;
    const binder = this._binder;
    const curves = clip.track.curves;
    const snapshot = clip.snapshot;
    const inputs = [];
    const outputs = [];

    for (let i = 0; i < curves.length; ++i) {
      const curve = curves[i];
      const paths = curve.paths;

      for (let j = 0; j < paths.length; ++j) {
        const path = paths[j];
        const resolved = binder.resolve(path);
        let target = targets[resolved && resolved.targetPath || null];

        if (!target && resolved) {
          target = {
            target: resolved,
            value: [],
            curves: 0,
            blendCounter: 0
          };

          for (let k = 0; k < target.target.components; ++k) {
            target.value.push(0);
          }

          targets[resolved.targetPath] = target;

          if (binder.animComponent) {
            if (!binder.animComponent.targets[resolved.targetPath]) {
              let type;

              if (resolved.targetPath.substring(resolved.targetPath.length - 13) === 'localRotation') {
                type = AnimTargetValue.TYPE_QUAT;
              } else {
                type = AnimTargetValue.TYPE_VEC3;
              }

              binder.animComponent.targets[resolved.targetPath] = new AnimTargetValue(binder.animComponent, type);
            }

            binder.animComponent.targets[resolved.targetPath].layerCounter++;
            binder.animComponent.targets[resolved.targetPath].setMask(binder.layerIndex, 1);
          }
        }

        if (target) {
          target.curves++;
          inputs.push(snapshot._results[i]);
          outputs.push(target);
        }
      }
    }

    this._clips.push(clip);

    this._inputs.push(inputs);

    this._outputs.push(outputs);
  }

  removeClip(index) {
    const targets = this._targets;
    const binder = this._binder;
    const clips = this._clips;
    const clip = clips[index];
    const curves = clip.track.curves;

    for (let i = 0; i < curves.length; ++i) {
      const curve = curves[i];
      const paths = curve.paths;

      for (let j = 0; j < paths.length; ++j) {
        const path = paths[j];

        const target = this._binder.resolve(path);

        if (target) {
          target.curves--;

          if (target.curves === 0) {
            binder.unresolve(path);
            delete targets[target.targetPath];

            if (binder.animComponent) {
              binder.animComponent.targets[target.targetPath].layerCounter--;
            }
          }
        }
      }
    }

    clips.splice(index, 1);

    this._inputs.splice(index, 1);

    this._outputs.splice(index, 1);
  }

  removeClips() {
    while (this._clips.length > 0) {
      this.removeClip(0);
    }
  }

  findClip(name) {
    const clips = this._clips;

    for (let i = 0; i < clips.length; ++i) {
      const clip = clips[i];

      if (clip.name === name) {
        return clip;
      }
    }

    return null;
  }

  rebind() {
    this._binder.rebind();

    this._targets = {};
    const clips = [...this.clips];
    this.removeClips();
    clips.forEach(clip => {
      this.addClip(clip);
    });
  }

  assignMask(mask) {
    return this._binder.assignMask(mask);
  }

  update(deltaTime) {
    const clips = this._clips;
    const order = clips.map(function (c, i) {
      return i;
    });

    AnimEvaluator._stableSort(order, function (a, b) {
      return clips[a].blendOrder < clips[b].blendOrder;
    });

    for (let i = 0; i < order.length; ++i) {
      const index = order[i];
      const clip = clips[index];
      const inputs = this._inputs[index];
      const outputs = this._outputs[index];
      const blendWeight = clip.blendWeight;

      if (blendWeight > 0.0) {
        clip._update(deltaTime);
      }

      let input;
      let output;
      let value;

      if (blendWeight >= 1.0) {
        for (let j = 0; j < inputs.length; ++j) {
          input = inputs[j];
          output = outputs[j];
          value = output.value;

          AnimEvaluator._set(value, input, output.target.type);

          output.blendCounter++;
        }
      } else if (blendWeight > 0.0) {
        for (let j = 0; j < inputs.length; ++j) {
          input = inputs[j];
          output = outputs[j];
          value = output.value;

          if (output.blendCounter === 0) {
            AnimEvaluator._set(value, input, output.target.type);
          } else {
            AnimEvaluator._blend(value, input, blendWeight, output.target.type);
          }

          output.blendCounter++;
        }
      }
    }

    const targets = this._targets;
    const binder = this._binder;

    for (const path in targets) {
      if (targets.hasOwnProperty(path)) {
        const target = targets[path];

        if (binder.animComponent && target.target.isTransform) {
          const animTarget = binder.animComponent.targets[path];

          if (animTarget.counter === animTarget.layerCounter) {
            animTarget.counter = 0;
          }

          if (!animTarget.path) {
            animTarget.path = path;
            animTarget.baseValue = target.target.get();
            animTarget.setter = target.target.set;
          }

          animTarget.updateValue(binder.layerIndex, target.value);
          animTarget.counter++;
        } else {
          target.target.set(target.value);
        }

        target.blendCounter = 0;
      }
    }

    binder.update(deltaTime);
  }

}

class AnimTarget {
  constructor(func, type, components, targetPath) {
    if (func.set) {
      this._set = func.set;
      this._get = func.get;
    } else {
      this._set = func;
    }

    this._type = type;
    this._components = components;
    this._targetPath = targetPath;
    this._isTransform = this._targetPath.substring(this._targetPath.length - 13) === 'localRotation' || this._targetPath.substring(this._targetPath.length - 13) === 'localPosition' || this._targetPath.substring(this._targetPath.length - 10) === 'localScale';
  }

  get set() {
    return this._set;
  }

  get get() {
    return this._get;
  }

  get type() {
    return this._type;
  }

  get components() {
    return this._components;
  }

  get targetPath() {
    return this._targetPath;
  }

  get isTransform() {
    return this._isTransform;
  }

}

class AnimEvents {
  constructor(events) {
    this._events = [...events];

    this._events.sort((a, b) => a.time - b.time);
  }

  get events() {
    return this._events;
  }

}

class AnimTrack {
  constructor(name, duration, inputs, outputs, curves, animEvents = new AnimEvents([])) {
    this._name = name;
    this._duration = duration;
    this._inputs = inputs;
    this._outputs = outputs;
    this._curves = curves;
    this._animEvents = animEvents;
  }

  get name() {
    return this._name;
  }

  get duration() {
    return this._duration;
  }

  get inputs() {
    return this._inputs;
  }

  get outputs() {
    return this._outputs;
  }

  get curves() {
    return this._curves;
  }

  set events(animEvents) {
    this._animEvents = animEvents;
  }

  get events() {
    return this._animEvents.events;
  }

  eval(time, snapshot) {
    snapshot._time = time;
    const inputs = this._inputs;
    const outputs = this._outputs;
    const curves = this._curves;
    const cache = snapshot._cache;
    const results = snapshot._results;

    for (let i = 0; i < inputs.length; ++i) {
      cache[i].update(time, inputs[i]._data);
    }

    for (let i = 0; i < curves.length; ++i) {
      const curve = curves[i];
      const output = outputs[curve._output];
      const result = results[i];

      cache[curve._input].eval(result, curve._interpolation, output);
    }
  }

}

class DefaultAnimBinder {
  constructor(graph) {
    this._isPathInMask = (path, checkMaskValue) => {
      const maskItem = this._mask[path];
      if (!maskItem) return false;else if (maskItem.children || checkMaskValue && maskItem.value !== false) return true;
      return false;
    };

    this.graph = graph;
    if (!graph) return;
    this._mask = null;
    const nodes = {};

    const flatten = function flatten(node) {
      nodes[node.name] = node;

      for (let i = 0; i < node.children.length; ++i) {
        flatten(node.children[i]);
      }
    };

    flatten(graph);
    this.nodes = nodes;
    this.targetCache = {};

    const findMeshInstances = function findMeshInstances(node) {
      let object = node;

      while (object && !(object instanceof Entity)) {
        object = object.parent;
      }

      let meshInstances;

      if (object) {
        if (object.render) {
          meshInstances = object.render.meshInstances;
        } else if (object.model) {
          meshInstances = object.model.meshInstances;
        }
      }

      return meshInstances;
    };

    this.nodeCounts = {};
    this.activeNodes = [];
    this.handlers = {
      'localPosition': function (node) {
        const object = node.localPosition;

        const func = function func(value) {
          object.set(...value);
        };

        return DefaultAnimBinder.createAnimTarget(func, 'vector', 3, node, 'localPosition');
      },
      'localRotation': function (node) {
        const object = node.localRotation;

        const func = function func(value) {
          object.set(...value);
        };

        return DefaultAnimBinder.createAnimTarget(func, 'quaternion', 4, node, 'localRotation');
      },
      'localScale': function (node) {
        const object = node.localScale;

        const func = function func(value) {
          object.set(...value);
        };

        return DefaultAnimBinder.createAnimTarget(func, 'vector', 3, node, 'localScale');
      },
      'weight': function (node, weightName) {
        if (weightName.indexOf('name.') === 0) {
          weightName = weightName.replace('name.', '');
        } else {
          weightName = Number(weightName);
        }

        const meshInstances = findMeshInstances(node);

        if (meshInstances) {
          for (let i = 0; i < meshInstances.length; ++i) {
            if (meshInstances[i].node.name === node.name && meshInstances[i].morphInstance) {
              const morphInstance = meshInstances[i].morphInstance;

              const func = value => {
                morphInstance.setWeight(weightName, value[0]);
              };

              return DefaultAnimBinder.createAnimTarget(func, 'number', 1, node, `weight.${weightName}`);
            }
          }
        }

        return null;
      },
      'materialTexture': (node, textureName) => {
        const meshInstances = findMeshInstances(node);

        if (meshInstances) {
          let meshInstance;

          for (let i = 0; i < meshInstances.length; ++i) {
            if (meshInstances[i].node.name === node.name) {
              meshInstance = meshInstances[i];
              break;
            }
          }

          if (meshInstance) {
            const func = value => {
              const textureAsset = this.animComponent.system.app.assets.get(value[0]);

              if (textureAsset && textureAsset.resource && textureAsset.type === 'texture') {
                meshInstance.material[textureName] = textureAsset.resource;
                meshInstance.material.update();
              }
            };

            return DefaultAnimBinder.createAnimTarget(func, 'vector', 1, node, 'materialTexture', 'material');
          }
        }

        return null;
      }
    };
  }

  _isPathActive(path) {
    if (!this._mask) return true;
    const rootNodeNames = [path.entityPath[0], this.graph.name];

    for (let j = 0; j < rootNodeNames.length; ++j) {
      let currEntityPath = rootNodeNames[j];
      if (this._isPathInMask(currEntityPath, path.entityPath.length === 1)) return true;

      for (let i = 1; i < path.entityPath.length; i++) {
        currEntityPath += '/' + path.entityPath[i];
        if (this._isPathInMask(currEntityPath, i === path.entityPath.length - 1)) return true;
      }
    }

    return false;
  }

  findNode(path) {
    if (!this._isPathActive(path)) {
      return null;
    }

    let node;

    if (this.graph) {
      node = this.graph.findByPath(path.entityPath);

      if (!node) {
        node = this.graph.findByPath(path.entityPath.slice(1));
      }
    }

    if (!node) {
      node = this.nodes[path.entityPath[path.entityPath.length - 1] || ""];
    }

    return node;
  }

  static createAnimTarget(func, type, valueCount, node, propertyPath, componentType) {
    const targetPath = AnimBinder.encode(node.path, componentType ? componentType : 'entity', propertyPath);
    return new AnimTarget(func, type, valueCount, targetPath);
  }

  resolve(path) {
    const encodedPath = AnimBinder.encode(path.entityPath, path.component, path.propertyPath);
    let target = this.targetCache[encodedPath];
    if (target) return target;
    const node = this.findNode(path);

    if (!node) {
      return null;
    }

    const handler = this.handlers[path.propertyPath];

    if (!handler) {
      return null;
    }

    target = handler(node);

    if (!target) {
      return null;
    }

    this.targetCache[encodedPath] = target;

    if (!this.nodeCounts[node.path]) {
      this.activeNodes.push(node);
      this.nodeCounts[node.path] = 1;
    } else {
      this.nodeCounts[node.path]++;
    }

    return target;
  }

  unresolve(path) {
    if (path.component !== 'graph') return;
    const node = this.nodes[path.entityPath[path.entityPath.length - 1] || ""];
    this.nodeCounts[node.path]--;

    if (this.nodeCounts[node.path] === 0) {
      const activeNodes = this.activeNodes;
      const i = activeNodes.indexOf(node.node);
      const len = activeNodes.length;

      if (i < len - 1) {
        activeNodes[i] = activeNodes[len - 1];
      }

      activeNodes.pop();
    }
  }

  update(deltaTime) {
    const activeNodes = this.activeNodes;

    for (let i = 0; i < activeNodes.length; ++i) {
      activeNodes[i]._dirtifyLocal();
    }
  }

  assignMask(mask) {
    if (mask !== this._mask) {
      this._mask = mask;
      return true;
    }

    return false;
  }

}

class AnimNode {
  constructor(state, parent, name, point, speed = 1) {
    this._state = state;
    this._parent = parent;
    this._name = name;

    if (Array.isArray(point)) {
      this._point = new Vec2(point[0], point[1]);
      this._pointLength = this._point.length();
    } else {
      this._point = point;
      this._pointLength = point;
    }

    this._speed = speed;
    this._weightedSpeed = 1.0;
    this._weight = 1.0;
    this._animTrack = null;
  }

  get parent() {
    return this._parent;
  }

  get name() {
    return this._name;
  }

  get path() {
    return this._parent ? this._parent.path + '.' + this._name : this._name;
  }

  get point() {
    return this._point;
  }

  get pointLength() {
    return this._pointLength;
  }

  set weight(value) {
    this._weight = value;
  }

  get weight() {
    return this._parent ? this._parent.weight * this._weight : this._weight;
  }

  get normalizedWeight() {
    const totalWeight = this._state.totalWeight;
    if (totalWeight === 0.0) return 0.0;
    return this.weight / totalWeight;
  }

  get speed() {
    return this._weightedSpeed * this._speed;
  }

  get absoluteSpeed() {
    return Math.abs(this._speed);
  }

  set weightedSpeed(weightedSpeed) {
    this._weightedSpeed = weightedSpeed;
  }

  get weightedSpeed() {
    return this._weightedSpeed;
  }

  set animTrack(value) {
    this._animTrack = value;
  }

  get animTrack() {
    return this._animTrack;
  }

}

class AnimBlendTree extends AnimNode {
  constructor(state, parent, name, point, parameters, children, syncAnimations, createTree, findParameter) {
    super(state, parent, name, point);
    this._parameters = parameters;
    this._parameterValues = new Array(parameters.length);
    this._children = [];
    this._findParameter = findParameter;
    this._syncAnimations = syncAnimations !== false;
    this._pointCache = {};

    for (let i = 0; i < children.length; i++) {
      const child = children[i];

      if (child.children) {
        this._children.push(createTree(child.type, this, null, name, 1.0, child.parameter ? [child.parameter] : child.parameters, child.children, createTree, findParameter));
      } else {
        this._children.push(new AnimNode(state, this, child.name, child.point, child.speed));
      }
    }
  }

  get weight() {
    this.calculateWeights();
    return this._parent ? this._parent.weight * this._weight : this._weight;
  }

  get syncAnimations() {
    return this._syncAnimations;
  }

  getChild(name) {
    for (let i = 0; i < this._children.length; i++) {
      if (this._children[i].name === name) return this._children[i];
    }

    return null;
  }

  updateParameterValues() {
    let paramsEqual = true;

    for (let i = 0; i < this._parameterValues.length; i++) {
      const updatedParameter = this._findParameter(this._parameters[i]).value;

      if (this._parameterValues[i] !== updatedParameter) {
        this._parameterValues[i] = updatedParameter;
        paramsEqual = false;
      }
    }

    return paramsEqual;
  }

  getNodeWeightedDuration(i) {
    return this._children[i].animTrack.duration / this._children[i].speedMultiplier * this._children[i].weight;
  }

  getNodeCount() {
    let count = 0;

    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];

      if (child.constructor === AnimBlendTree) {
        count += this._children[i].getNodeCount();
      } else {
        count++;
      }
    }

    return count;
  }

}

class AnimBlendTree1D extends AnimBlendTree {
  constructor(state, parent, name, point, parameters, children, syncAnimations, createTree, findParameter) {
    children.sort((a, b) => a.point - b.point);
    super(state, parent, name, point, parameters, children, syncAnimations, createTree, findParameter);
  }

  calculateWeights() {
    if (this.updateParameterValues()) return;
    let weightedDurationSum = 0.0;
    this._children[0].weight = 0.0;

    for (let i = 0; i < this._children.length; i++) {
      const c1 = this._children[i];

      if (i !== this._children.length - 1) {
        const c2 = this._children[i + 1];

        if (c1.point === c2.point) {
          c1.weight = 0.5;
          c2.weight = 0.5;
        } else if (math$1.between(this._parameterValues[0], c1.point, c2.point, true)) {
          const child2Distance = Math.abs(c1.point - c2.point);
          const parameterDistance = Math.abs(c1.point - this._parameterValues[0]);
          const weight = (child2Distance - parameterDistance) / child2Distance;
          c1.weight = weight;
          c2.weight = 1.0 - weight;
        } else {
          c2.weight = 0.0;
        }
      }

      if (this._syncAnimations) {
        weightedDurationSum += c1.animTrack.duration / c1.absoluteSpeed * c1.weight;
      }
    }

    if (this._syncAnimations) {
      for (let i = 0; i < this._children.length; i++) {
        const child = this._children[i];
        child.weightedSpeed = child.animTrack.duration / child.absoluteSpeed / weightedDurationSum;
      }
    }
  }

}

class AnimBlendTreeCartesian2D extends AnimBlendTree {
  pointDistanceCache(i, j) {
    const pointKey = `${i}${j}`;

    if (!this._pointCache[pointKey]) {
      this._pointCache[pointKey] = this._children[j].point.clone().sub(this._children[i].point);
    }

    return this._pointCache[pointKey];
  }

  calculateWeights() {
    if (this.updateParameterValues()) return;
    let weightSum, weightedDurationSum;

    AnimBlendTreeCartesian2D._p.set(...this._parameterValues);

    weightSum = 0.0;
    weightedDurationSum = 0.0;

    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      const pi = child.point;

      AnimBlendTreeCartesian2D._pip.set(AnimBlendTreeCartesian2D._p.x, AnimBlendTreeCartesian2D._p.y).sub(pi);

      let minj = Number.MAX_VALUE;

      for (let j = 0; j < this._children.length; j++) {
        if (i === j) continue;
        const pipj = this.pointDistanceCache(i, j);
        const result = math$1.clamp(1.0 - AnimBlendTreeCartesian2D._pip.dot(pipj) / pipj.lengthSq(), 0.0, 1.0);
        if (result < minj) minj = result;
      }

      child.weight = minj;
      weightSum += minj;

      if (this._syncAnimations) {
        weightedDurationSum += child.animTrack.duration / child.absoluteSpeed * child.weight;
      }
    }

    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      child.weight = child._weight / weightSum;

      if (this._syncAnimations) {
        child.weightedSpeed = child.animTrack.duration / child.absoluteSpeed / weightedDurationSum;
      }
    }
  }

}

AnimBlendTreeCartesian2D._p = new Vec2();
AnimBlendTreeCartesian2D._pip = new Vec2();

class AnimBlendTreeDirectional2D extends AnimBlendTree {
  pointCache(i, j) {
    const pointKey = `${i}${j}`;

    if (!this._pointCache[pointKey]) {
      this._pointCache[pointKey] = new Vec2((this._children[j].pointLength - this._children[i].pointLength) / ((this._children[j].pointLength + this._children[i].pointLength) / 2), Vec2.angleRad(this._children[i].point, this._children[j].point) * 2.0);
    }

    return this._pointCache[pointKey];
  }

  calculateWeights() {
    if (this.updateParameterValues()) return;
    let weightSum, weightedDurationSum;

    AnimBlendTreeDirectional2D._p.set(...this._parameterValues);

    const pLength = AnimBlendTreeDirectional2D._p.length();

    weightSum = 0.0;
    weightedDurationSum = 0.0;

    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      const pi = child.point;
      const piLength = child.pointLength;
      let minj = Number.MAX_VALUE;

      for (let j = 0; j < this._children.length; j++) {
        if (i === j) continue;
        const pipj = this.pointCache(i, j);
        const pjLength = this._children[j].pointLength;

        AnimBlendTreeDirectional2D._pip.set((pLength - piLength) / ((pjLength + piLength) / 2), Vec2.angleRad(pi, AnimBlendTreeDirectional2D._p) * 2.0);

        const result = math$1.clamp(1.0 - Math.abs(AnimBlendTreeDirectional2D._pip.dot(pipj) / pipj.lengthSq()), 0.0, 1.0);
        if (result < minj) minj = result;
      }

      child.weight = minj;
      weightSum += minj;

      if (this._syncAnimations) {
        weightedDurationSum += child.animTrack.duration / child.absoluteSpeed * child.weight;
      }
    }

    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      child.weight = child._weight / weightSum;

      if (this._syncAnimations) {
        const weightedChildDuration = child.animTrack.duration / weightedDurationSum * weightSum;
        child.weightedSpeed = child.absoluteSpeed * weightedChildDuration;
      }
    }
  }

}

AnimBlendTreeDirectional2D._p = new Vec2();
AnimBlendTreeDirectional2D._pip = new Vec2();

class AnimBlendTreeDirect extends AnimBlendTree {
  calculateWeights() {
    if (this.updateParameterValues()) return;
    let weightSum = 0.0;
    let weightedDurationSum = 0.0;

    for (let i = 0; i < this._children.length; i++) {
      weightSum += Math.max(this._parameterValues[i], 0.0);

      if (this._syncAnimations) {
        const child = this._children[i];
        weightedDurationSum += child.animTrack.duration / child.absoluteSpeed * child.weight;
      }
    }

    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      const weight = Math.max(this._parameterValues[i], 0.0);

      if (weightSum) {
        child.weight = weight / weightSum;

        if (this._syncAnimations) {
          child.weightedSpeed = child.animTrack.duration / child.absoluteSpeed / weightedDurationSum;
        }
      } else {
        child.weight = 0.0;

        if (this._syncAnimations) {
          child.weightedSpeed = 0;
        }
      }
    }
  }

}

class AnimState {
  constructor(controller, name, speed, loop, blendTree) {
    this._controller = controller;
    this._name = name;
    this._animations = {};
    this._animationList = [];
    this._speed = speed || 1.0;
    this._loop = loop === undefined ? true : loop;

    const findParameter = this._controller.findParameter.bind(this._controller);

    if (blendTree) {
      this._blendTree = this._createTree(blendTree.type, this, null, name, 1.0, blendTree.parameter ? [blendTree.parameter] : blendTree.parameters, blendTree.children, blendTree.syncAnimations, this._createTree, findParameter);
    } else {
      this._blendTree = new AnimNode(this, null, name, 1.0, speed);
    }
  }

  _createTree(type, state, parent, name, point, parameters, children, syncAnimations, createTree, findParameter) {
    switch (type) {
      case ANIM_BLEND_1D:
        return new AnimBlendTree1D(state, parent, name, point, parameters, children, syncAnimations, createTree, findParameter);

      case ANIM_BLEND_2D_CARTESIAN:
        return new AnimBlendTreeCartesian2D(state, parent, name, point, parameters, children, syncAnimations, createTree, findParameter);

      case ANIM_BLEND_2D_DIRECTIONAL:
        return new AnimBlendTreeDirectional2D(state, parent, name, point, parameters, children, syncAnimations, createTree, findParameter);

      case ANIM_BLEND_DIRECT:
        return new AnimBlendTreeDirect(state, parent, name, point, parameters, children, syncAnimations, createTree, findParameter);
    }

    return undefined;
  }

  _getNodeFromPath(path) {
    let currNode = this._blendTree;

    for (let i = 1; i < path.length; i++) {
      currNode = currNode.getChild(path[i]);
    }

    return currNode;
  }

  addAnimation(path, animTrack) {
    const pathString = path.join('.');

    const indexOfAnimation = this._animationList.findIndex(function (animation) {
      return animation.path === pathString;
    });

    if (indexOfAnimation >= 0) {
      this._animationList[indexOfAnimation].animTrack = animTrack;
    } else {
      const node = this._getNodeFromPath(path);

      node.animTrack = animTrack;

      this._animationList.push(node);
    }
  }

  get name() {
    return this._name;
  }

  set animations(value) {
    this._animationList = value;
  }

  get animations() {
    return this._animationList;
  }

  set speed(value) {
    this._speed = value;
  }

  get speed() {
    return this._speed;
  }

  set loop(value) {
    this._loop = value;
  }

  get loop() {
    return this._loop;
  }

  get nodeCount() {
    if (!this._blendTree || this._blendTree.constructor === AnimNode) return 1;
    return this._blendTree.getNodeCount();
  }

  get playable() {
    return ANIM_CONTROL_STATES.indexOf(this.name) !== -1 || this.animations.length === this.nodeCount;
  }

  get looping() {
    if (this.animations.length > 0) {
      const trackClipName = this.name + '.' + this.animations[0].animTrack.name;

      const trackClip = this._controller.animEvaluator.findClip(trackClipName);

      if (trackClip) {
        return trackClip.loop;
      }
    }

    return false;
  }

  get totalWeight() {
    let sum = 0;

    for (let i = 0; i < this.animations.length; i++) {
      sum += this.animations[i].weight;
    }

    return sum;
  }

  get timelineDuration() {
    let duration = 0;

    for (let i = 0; i < this.animations.length; i++) {
      const animation = this.animations[i];

      if (animation.animTrack.duration > duration) {
        duration = animation.animTrack.duration;
      }
    }

    return duration;
  }

}

class AnimTransition {
  constructor({
    from,
    to,
    time = 0,
    priority = 0,
    conditions = [],
    exitTime = null,
    transitionOffset = null,
    interruptionSource = ANIM_INTERRUPTION_NONE
  }) {
    this._from = from;
    this._to = to;
    this._time = time;
    this._priority = priority;
    this._conditions = conditions;
    this._exitTime = exitTime;
    this._transitionOffset = transitionOffset;
    this._interruptionSource = interruptionSource;
  }

  get from() {
    return this._from;
  }

  set to(value) {
    this._to = value;
  }

  get to() {
    return this._to;
  }

  get time() {
    return this._time;
  }

  get priority() {
    return this._priority;
  }

  get conditions() {
    return this._conditions;
  }

  get exitTime() {
    return this._exitTime;
  }

  get transitionOffset() {
    return this._transitionOffset;
  }

  get interruptionSource() {
    return this._interruptionSource;
  }

  get hasExitTime() {
    return !!this.exitTime;
  }

}

class AnimController {
  constructor(animEvaluator, states, transitions, parameters, activate, eventHandler, consumedTriggers) {
    this._animEvaluator = animEvaluator;
    this._states = {};
    this._stateNames = [];
    this._eventHandler = eventHandler;
    this._consumedTriggers = consumedTriggers;

    for (let i = 0; i < states.length; i++) {
      this._states[states[i].name] = new AnimState(this, states[i].name, states[i].speed, states[i].loop, states[i].blendTree);

      this._stateNames.push(states[i].name);
    }

    this._transitions = transitions.map(transition => {
      return new AnimTransition(_extends({}, transition));
    });
    this._findTransitionsFromStateCache = {};
    this._findTransitionsBetweenStatesCache = {};
    this._parameters = parameters;
    this._previousStateName = null;
    this._activeStateName = ANIM_STATE_START;
    this._playing = false;
    this._activate = activate;
    this._currTransitionTime = 1.0;
    this._totalTransitionTime = 1.0;
    this._isTransitioning = false;
    this._transitionInterruptionSource = ANIM_INTERRUPTION_NONE;
    this._transitionPreviousStates = [];
    this._timeInState = 0;
    this._timeInStateBefore = 0;
  }

  get animEvaluator() {
    return this._animEvaluator;
  }

  set activeState(stateName) {
    this._activeStateName = stateName;
  }

  get activeState() {
    return this._findState(this._activeStateName);
  }

  get activeStateName() {
    return this._activeStateName;
  }

  get activeStateAnimations() {
    return this.activeState.animations;
  }

  set previousState(stateName) {
    this._previousStateName = stateName;
  }

  get previousState() {
    return this._findState(this._previousStateName);
  }

  get previousStateName() {
    return this._previousStateName;
  }

  get playable() {
    let playable = true;

    for (let i = 0; i < this._stateNames.length; i++) {
      if (!this._states[this._stateNames[i]].playable) {
        playable = false;
      }
    }

    return playable;
  }

  set playing(value) {
    this._playing = value;
  }

  get playing() {
    return this._playing;
  }

  get activeStateProgress() {
    return this._getActiveStateProgressForTime(this._timeInState);
  }

  get activeStateDuration() {
    if (this.activeStateName === ANIM_STATE_START || this.activeStateName === ANIM_STATE_END) return 0.0;
    let maxDuration = 0.0;

    for (let i = 0; i < this.activeStateAnimations.length; i++) {
      const activeClip = this._animEvaluator.findClip(this.activeStateAnimations[i].name);

      if (activeClip) {
        maxDuration = Math.max(maxDuration, activeClip.track.duration);
      }
    }

    return maxDuration;
  }

  set activeStateCurrentTime(time) {
    this._timeInStateBefore = time;
    this._timeInState = time;

    for (let i = 0; i < this.activeStateAnimations.length; i++) {
      const clip = this.animEvaluator.findClip(this.activeStateAnimations[i].name);

      if (clip) {
        clip.time = time;
      }
    }
  }

  get activeStateCurrentTime() {
    return this._timeInState;
  }

  get transitioning() {
    return this._isTransitioning;
  }

  get transitionProgress() {
    return this._currTransitionTime / this._totalTransitionTime;
  }

  get states() {
    return this._stateNames;
  }

  assignMask(mask) {
    return this._animEvaluator.assignMask(mask);
  }

  _findState(stateName) {
    return this._states[stateName];
  }

  _getActiveStateProgressForTime(time) {
    if (this.activeStateName === ANIM_STATE_START || this.activeStateName === ANIM_STATE_END || this.activeStateName === ANIM_STATE_ANY) return 1.0;

    const activeClip = this._animEvaluator.findClip(this.activeStateAnimations[0].name);

    if (activeClip) {
      return time / activeClip.track.duration;
    }

    return null;
  }

  _findTransitionsFromState(stateName) {
    let transitions = this._findTransitionsFromStateCache[stateName];

    if (!transitions) {
      transitions = this._transitions.filter(function (transition) {
        return transition.from === stateName;
      });
      sortPriority(transitions);
      this._findTransitionsFromStateCache[stateName] = transitions;
    }

    return transitions;
  }

  _findTransitionsBetweenStates(sourceStateName, destinationStateName) {
    let transitions = this._findTransitionsBetweenStatesCache[sourceStateName + '->' + destinationStateName];

    if (!transitions) {
      transitions = this._transitions.filter(function (transition) {
        return transition.from === sourceStateName && transition.to === destinationStateName;
      });
      sortPriority(transitions);
      this._findTransitionsBetweenStatesCache[sourceStateName + '->' + destinationStateName] = transitions;
    }

    return transitions;
  }

  _transitionHasConditionsMet(transition) {
    const conditions = transition.conditions;

    for (let i = 0; i < conditions.length; i++) {
      const condition = conditions[i];
      const parameter = this.findParameter(condition.parameterName);

      switch (condition.predicate) {
        case ANIM_GREATER_THAN:
          if (!(parameter.value > condition.value)) return false;
          break;

        case ANIM_LESS_THAN:
          if (!(parameter.value < condition.value)) return false;
          break;

        case ANIM_GREATER_THAN_EQUAL_TO:
          if (!(parameter.value >= condition.value)) return false;
          break;

        case ANIM_LESS_THAN_EQUAL_TO:
          if (!(parameter.value <= condition.value)) return false;
          break;

        case ANIM_EQUAL_TO:
          if (!(parameter.value === condition.value)) return false;
          break;

        case ANIM_NOT_EQUAL_TO:
          if (!(parameter.value !== condition.value)) return false;
          break;
      }
    }

    return true;
  }

  _findTransition(from, to) {
    let transitions = [];

    if (from && to) {
      transitions = transitions.concat(this._findTransitionsBetweenStates(from, to));
    } else {
      if (!this._isTransitioning) {
        transitions = transitions.concat(this._findTransitionsFromState(this._activeStateName));
        transitions = transitions.concat(this._findTransitionsFromState(ANIM_STATE_ANY));
      } else {
        switch (this._transitionInterruptionSource) {
          case ANIM_INTERRUPTION_PREV:
            transitions = transitions.concat(this._findTransitionsFromState(this._previousStateName));
            transitions = transitions.concat(this._findTransitionsFromState(ANIM_STATE_ANY));
            break;

          case ANIM_INTERRUPTION_NEXT:
            transitions = transitions.concat(this._findTransitionsFromState(this._activeStateName));
            transitions = transitions.concat(this._findTransitionsFromState(ANIM_STATE_ANY));
            break;

          case ANIM_INTERRUPTION_PREV_NEXT:
            transitions = transitions.concat(this._findTransitionsFromState(this._previousStateName));
            transitions = transitions.concat(this._findTransitionsFromState(this._activeStateName));
            transitions = transitions.concat(this._findTransitionsFromState(ANIM_STATE_ANY));
            break;

          case ANIM_INTERRUPTION_NEXT_PREV:
            transitions = transitions.concat(this._findTransitionsFromState(this._activeStateName));
            transitions = transitions.concat(this._findTransitionsFromState(this._previousStateName));
            transitions = transitions.concat(this._findTransitionsFromState(ANIM_STATE_ANY));
            break;
        }
      }
    }

    transitions = transitions.filter(transition => {
      if (transition.to === this.activeStateName) {
        return false;
      }

      if (transition.hasExitTime) {
        let progressBefore = this._getActiveStateProgressForTime(this._timeInStateBefore);

        let progress = this._getActiveStateProgressForTime(this._timeInState);

        if (transition.exitTime < 1.0 && this.activeState.loop) {
          progressBefore -= Math.floor(progressBefore);
          progress -= Math.floor(progress);
        }

        if (!(transition.exitTime > progressBefore && transition.exitTime <= progress)) {
          return null;
        }
      }

      return this._transitionHasConditionsMet(transition);
    });

    if (transitions.length > 0) {
      const transition = transitions[0];

      if (transition.to === ANIM_STATE_END) {
        const startTransition = this._findTransitionsFromState(ANIM_STATE_START)[0];

        transition.to = startTransition.to;
      }

      return transition;
    }

    return null;
  }

  updateStateFromTransition(transition) {
    let state;
    let animation;
    let clip;
    this.previousState = transition.from ? this.activeStateName : null;
    this.activeState = transition.to;

    for (let i = 0; i < transition.conditions.length; i++) {
      const condition = transition.conditions[i];
      const parameter = this.findParameter(condition.parameterName);

      if (parameter.type === ANIM_PARAMETER_TRIGGER) {
        this._consumedTriggers.add(condition.parameterName);
      }
    }

    if (this.previousState) {
      if (!this._isTransitioning) {
        this._transitionPreviousStates = [];
      }

      this._transitionPreviousStates.push({
        name: this._previousStateName,
        weight: 1
      });

      const interpolatedTime = Math.min(this._totalTransitionTime !== 0 ? this._currTransitionTime / this._totalTransitionTime : 1, 1.0);

      for (let i = 0; i < this._transitionPreviousStates.length; i++) {
        if (!this._isTransitioning) {
          this._transitionPreviousStates[i].weight = 1.0;
        } else if (i !== this._transitionPreviousStates.length - 1) {
          this._transitionPreviousStates[i].weight *= 1.0 - interpolatedTime;
        } else {
          this._transitionPreviousStates[i].weight = interpolatedTime;
        }

        state = this._findState(this._transitionPreviousStates[i].name);

        for (let j = 0; j < state.animations.length; j++) {
          animation = state.animations[j];
          clip = this._animEvaluator.findClip(animation.name + '.previous.' + i);

          if (!clip) {
            clip = this._animEvaluator.findClip(animation.name);
            clip.name = animation.name + '.previous.' + i;
          }

          if (i !== this._transitionPreviousStates.length - 1) {
            clip.pause();
          }
        }
      }
    }

    this._isTransitioning = true;
    this._totalTransitionTime = transition.time;
    this._currTransitionTime = 0;
    this._transitionInterruptionSource = transition.interruptionSource;
    const activeState = this.activeState;
    const hasTransitionOffset = transition.transitionOffset && transition.transitionOffset > 0.0 && transition.transitionOffset < 1.0;
    let timeInState = 0;
    let timeInStateBefore = 0;

    if (hasTransitionOffset) {
      const offsetTime = activeState.timelineDuration * transition.transitionOffset;
      timeInState = offsetTime;
      timeInStateBefore = offsetTime;
    }

    this._timeInState = timeInState;
    this._timeInStateBefore = timeInStateBefore;

    for (let i = 0; i < activeState.animations.length; i++) {
      clip = this._animEvaluator.findClip(activeState.animations[i].name);

      if (!clip) {
        const speed = Number.isFinite(activeState.animations[i].speed) ? activeState.animations[i].speed : activeState.speed;
        clip = new AnimClip(activeState.animations[i].animTrack, this._timeInState, speed, true, activeState.loop, this._eventHandler);
        clip.name = activeState.animations[i].name;

        this._animEvaluator.addClip(clip);
      } else {
        clip.reset();
      }

      if (transition.time > 0) {
        clip.blendWeight = 0.0;
      } else {
        clip.blendWeight = activeState.animations[i].normalizedWeight;
      }

      clip.play();

      if (hasTransitionOffset) {
        clip.time = activeState.timelineDuration * transition.transitionOffset;
      } else {
        const startTime = activeState.speed >= 0 ? 0 : this.activeStateDuration;
        clip.time = startTime;
      }
    }
  }

  _transitionToState(newStateName) {
    if (!this._findState(newStateName)) {
      return;
    }

    let transition = this._findTransition(this._activeStateName, newStateName);

    if (!transition) {
      this._animEvaluator.removeClips();

      transition = new AnimTransition({
        from: null,
        to: newStateName
      });
    }

    this.updateStateFromTransition(transition);
  }

  assignAnimation(pathString, animTrack, speed, loop) {
    const path = pathString.split('.');

    let state = this._findState(path[0]);

    if (!state) {
      state = new AnimState(this, path[0], 1.0);
      this._states[path[0]] = state;

      this._stateNames.push(path[0]);
    }

    state.addAnimation(path, animTrack);

    if (speed !== undefined) {
      state.speed = speed;
    }

    if (loop !== undefined) {
      state.loop = loop;
    }

    if (!this._playing && this._activate && this.playable) {
      this.play();
    }
  }

  removeNodeAnimations(nodeName) {
    if (ANIM_CONTROL_STATES.indexOf(nodeName) !== -1) {
      return false;
    }

    const state = this._findState(nodeName);

    if (!state) {
      return false;
    }

    state.animations = [];
    return true;
  }

  play(stateName) {
    if (stateName) {
      this._transitionToState(stateName);
    }

    this._playing = true;
  }

  pause() {
    this._playing = false;
  }

  reset() {
    this._previousStateName = null;
    this._activeStateName = ANIM_STATE_START;
    this._playing = false;
    this._currTransitionTime = 1.0;
    this._totalTransitionTime = 1.0;
    this._isTransitioning = false;
    this._timeInState = 0;
    this._timeInStateBefore = 0;

    this._animEvaluator.removeClips();
  }

  rebind() {
    this._animEvaluator.rebind();
  }

  update(dt) {
    if (!this._playing) {
      return;
    }

    let state;
    let animation;
    let clip;
    this._timeInStateBefore = this._timeInState;
    this._timeInState += dt;

    const transition = this._findTransition(this._activeStateName);

    if (transition) this.updateStateFromTransition(transition);

    if (this._isTransitioning) {
      this._currTransitionTime += dt;

      if (this._currTransitionTime <= this._totalTransitionTime) {
        const interpolatedTime = this._totalTransitionTime !== 0 ? this._currTransitionTime / this._totalTransitionTime : 1;

        for (let i = 0; i < this._transitionPreviousStates.length; i++) {
          state = this._findState(this._transitionPreviousStates[i].name);
          const stateWeight = this._transitionPreviousStates[i].weight;

          for (let j = 0; j < state.animations.length; j++) {
            animation = state.animations[j];
            clip = this._animEvaluator.findClip(animation.name + '.previous.' + i);

            if (clip) {
              clip.blendWeight = (1.0 - interpolatedTime) * animation.normalizedWeight * stateWeight;
            }
          }
        }

        state = this.activeState;

        for (let i = 0; i < state.animations.length; i++) {
          animation = state.animations[i];
          this._animEvaluator.findClip(animation.name).blendWeight = interpolatedTime * animation.normalizedWeight;
        }
      } else {
        this._isTransitioning = false;
        const activeClips = this.activeStateAnimations.length;
        const totalClips = this._animEvaluator.clips.length;

        for (let i = 0; i < totalClips - activeClips; i++) {
          this._animEvaluator.removeClip(0);
        }

        this._transitionPreviousStates = [];
        state = this.activeState;

        for (let i = 0; i < state.animations.length; i++) {
          animation = state.animations[i];
          clip = this._animEvaluator.findClip(animation.name);

          if (clip) {
            clip.blendWeight = animation.normalizedWeight;
          }
        }
      }
    } else {
      if (this.activeState._blendTree.constructor !== AnimNode) {
        state = this.activeState;

        for (let i = 0; i < state.animations.length; i++) {
          animation = state.animations[i];
          clip = this._animEvaluator.findClip(animation.name);

          if (clip) {
            clip.blendWeight = animation.normalizedWeight;

            if (animation.parent.syncAnimations) {
              clip.speed = animation.speed;
            }
          }
        }
      }
    }

    this._animEvaluator.update(dt);
  }

  findParameter(name) {
    return this._parameters[name];
  }

}

class AnimStateGraph {
  constructor(data) {
    this._layers = [];
    this._parameters = {};

    if (!Array.isArray(data.layers)) {
      for (const layerId in data.layers) {
        const dataLayer = data.layers[layerId];
        const layer = {
          name: dataLayer.name,
          blendType: dataLayer.blendType,
          weight: dataLayer.weight,
          states: [],
          transitions: []
        };

        for (let i = 0; i < dataLayer.states.length; i++) {
          layer.states.push(data.states[dataLayer.states[i]]);
        }

        for (let i = 0; i < dataLayer.transitions.length; i++) {
          const dataLayerTransition = data.transitions[dataLayer.transitions[i]];

          if (dataLayerTransition.conditions && !Array.isArray(dataLayerTransition.conditions)) {
            const conditionKeys = Object.keys(dataLayerTransition.conditions);
            const conditions = [];

            for (let j = 0; j < conditionKeys.length; j++) {
              const condition = dataLayerTransition.conditions[conditionKeys[j]];

              if (condition.parameterName) {
                conditions.push(condition);
              }
            }

            dataLayerTransition.conditions = conditions;
          }

          if (Number.isInteger(dataLayerTransition.from)) {
            dataLayerTransition.from = data.states[dataLayerTransition.from].name;
          }

          if (Number.isInteger(dataLayerTransition.to)) {
            dataLayerTransition.to = data.states[dataLayerTransition.to].name;
          }

          layer.transitions.push(dataLayerTransition);
        }

        this._layers.push(layer);
      }
    } else {
      this._layers = data.layers;
    }

    for (const paramId in data.parameters) {
      const param = data.parameters[paramId];
      this._parameters[param.name] = {
        type: param.type,
        value: param.value
      };
    }
  }

  get parameters() {
    return Object.assign({}, this._parameters);
  }

  get layers() {
    return this._layers;
  }

}

const FONT_MSDF = 'msdf';
const FONT_BITMAP = 'bitmap';

class Font {
  constructor(textures, data) {
    this.type = data ? data.type || FONT_MSDF : FONT_MSDF;
    this.em = 1;
    this.textures = textures;
    this.intensity = 0.0;
    this._data = null;
    this.data = data;
  }

  set data(value) {
    this._data = value;
    if (!value) return;

    if (this._data.intensity !== undefined) {
      this.intensity = this._data.intensity;
    }

    if (!this._data.info) this._data.info = {};

    if (!this._data.version || this._data.version < 2) {
      this._data.info.maps = [{
        width: this._data.info.width,
        height: this._data.info.height
      }];

      if (this._data.chars) {
        for (const key in this._data.chars) {
          this._data.chars[key].map = 0;
        }
      }
    }
  }

  get data() {
    return this._data;
  }

}

const MAX_TEXTURE_SIZE = 4096;
const DEFAULT_TEXTURE_SIZE = 512;

class CanvasFont extends EventHandler {
  constructor(app, options = {}) {
    super();
    this.type = 'bitmap';
    this.app = app;
    this.intensity = 0;
    this.fontWeight = options.fontWeight || 'normal';
    this.fontSize = parseInt(options.fontSize, 10);
    this.glyphSize = this.fontSize;
    this.fontName = options.fontName || 'Arial';
    this.color = options.color || new Color(1, 1, 1);
    this.padding = options.padding || 0;
    const w = options.width > MAX_TEXTURE_SIZE ? MAX_TEXTURE_SIZE : options.width || DEFAULT_TEXTURE_SIZE;
    const h = options.height > MAX_TEXTURE_SIZE ? MAX_TEXTURE_SIZE : options.height || DEFAULT_TEXTURE_SIZE;
    const canvas = document.createElement('canvas');
    canvas.height = h;
    canvas.width = w;
    const texture = new Texture(this.app.graphicsDevice, {
      name: 'font',
      format: PIXELFORMAT_R8_G8_B8_A8,
      minFilter: FILTER_LINEAR_MIPMAP_LINEAR,
      magFilter: FILTER_LINEAR,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      mipmaps: true
    });
    texture.setSource(canvas);
    this.textures = [texture];
    this.chars = '';
    this.data = {};
  }

  createTextures(text) {
    const _chars = this._normalizeCharsSet(text);

    if (_chars.length !== this.chars.length) {
      this._renderAtlas(_chars);

      return;
    }

    for (let i = 0; i < _chars.length; i++) {
      if (_chars[i] !== this.chars[i]) {
        this._renderAtlas(_chars);

        return;
      }
    }
  }

  updateTextures(text) {
    const _chars = this._normalizeCharsSet(text);

    const newCharsSet = [];

    for (let i = 0; i < _chars.length; i++) {
      const char = _chars[i];

      if (!this.data.chars[char]) {
        newCharsSet.push(char);
      }
    }

    if (newCharsSet.length > 0) {
      this._renderAtlas(this.chars.concat(newCharsSet));
    }
  }

  destroy() {
    for (let i = 0; i < this.textures.length; i++) {
      this.textures[i].destroy();
    }

    this.chars = null;
    this.color = null;
    this.data = null;
    this.fontName = null;
    this.fontSize = null;
    this.glyphSize = null;
    this.intensity = null;
    this.textures = null;
    this.type = null;
    this.fontWeight = null;
  }

  _getAndClearContext(canvas, clearColor) {
    const w = canvas.width;
    const h = canvas.height;
    const ctx = canvas.getContext('2d', {
      alpha: true
    });
    ctx.clearRect(0, 0, w, h);
    ctx.fillStyle = clearColor;
    ctx.fillRect(0, 0, w, h);
    return ctx;
  }

  _colorToRgbString(color, alpha) {
    let str;
    const r = Math.round(255 * color.r);
    const g = Math.round(255 * color.g);
    const b = Math.round(255 * color.b);

    if (alpha) {
      str = `rgba(${r}, ${g}, ${b}, ${color.a})`;
    } else {
      str = `rgb(${r}, ${g}, ${b})`;
    }

    return str;
  }

  renderCharacter(context, char, x, y, color) {
    context.fillStyle = color;
    context.fillText(char, x, y);
  }

  _renderAtlas(charsArray) {
    this.chars = charsArray;
    let numTextures = 1;
    let canvas = this.textures[numTextures - 1].getSource();
    const w = canvas.width;
    const h = canvas.height;

    const color = this._colorToRgbString(this.color, false);

    const a = this.color.a;
    this.color.a = 1 / 255;

    const transparent = this._colorToRgbString(this.color, true);

    this.color.a = a;
    const TEXT_ALIGN = 'center';
    const TEXT_BASELINE = 'alphabetic';

    let ctx = this._getAndClearContext(canvas, transparent);

    ctx.font = this.fontWeight + ' ' + this.fontSize.toString() + 'px ' + this.fontName;
    ctx.textAlign = TEXT_ALIGN;
    ctx.textBaseline = TEXT_BASELINE;
    this.data = this._createJson(this.chars, this.fontName, w, h);
    const symbols = string.getSymbols(this.chars.join(''));
    const prevNumTextures = this.textures.length;
    let maxHeight = 0;
    let maxDescent = 0;
    const metrics = {};

    for (let i = 0; i < symbols.length; i++) {
      const ch = symbols[i];
      metrics[ch] = this._getTextMetrics(ch);
      maxHeight = Math.max(maxHeight, metrics[ch].height);
      maxDescent = Math.max(maxDescent, metrics[ch].descent);
    }

    this.glyphSize = Math.max(this.glyphSize, maxHeight);
    const sx = this.glyphSize + this.padding * 2;
    const sy = this.glyphSize + this.padding * 2;

    const _xOffset = this.glyphSize / 2 + this.padding;

    const _yOffset = sy - maxDescent - this.padding;

    let _x = 0;
    let _y = 0;

    for (let i = 0; i < symbols.length; i++) {
      const ch = symbols[i];
      const code = string.getCodePoint(symbols[i]);
      let fs = this.fontSize;
      ctx.font = this.fontWeight + ' ' + fs.toString() + 'px ' + this.fontName;
      ctx.textAlign = TEXT_ALIGN;
      ctx.textBaseline = TEXT_BASELINE;
      let width = ctx.measureText(ch).width;

      if (width > fs) {
        fs = this.fontSize * this.fontSize / width;
        ctx.font = this.fontWeight + ' ' + fs.toString() + 'px ' + this.fontName;
        width = this.fontSize;
      }

      this.renderCharacter(ctx, ch, _x + _xOffset, _y + _yOffset, color);
      const xoffset = this.padding + (this.glyphSize - width) / 2;
      const yoffset = -this.padding + metrics[ch].descent - maxDescent;
      const xadvance = width;

      this._addChar(this.data, ch, code, _x, _y, sx, sy, xoffset, yoffset, xadvance, numTextures - 1, w, h);

      _x += sx;

      if (_x + sx > w) {
        _x = 0;
        _y += sy;

        if (_y + sy > h) {
          this.textures[numTextures - 1].upload();
          numTextures++;
          _y = 0;

          if (numTextures > prevNumTextures) {
            canvas = document.createElement('canvas');
            canvas.height = h;
            canvas.width = w;
            ctx = this._getAndClearContext(canvas, transparent);
            const texture = new Texture(this.app.graphicsDevice, {
              format: PIXELFORMAT_R8_G8_B8_A8,
              mipmaps: true,
              name: 'font-atlas'
            });
            texture.setSource(canvas);
            texture.minFilter = FILTER_LINEAR_MIPMAP_LINEAR;
            texture.magFilter = FILTER_LINEAR;
            texture.addressU = ADDRESS_CLAMP_TO_EDGE;
            texture.addressV = ADDRESS_CLAMP_TO_EDGE;
            this.textures.push(texture);
          } else {
            canvas = this.textures[numTextures - 1].getSource();
            ctx = this._getAndClearContext(canvas, transparent);
          }
        }
      }
    }

    this.textures[numTextures - 1].upload();

    if (numTextures < prevNumTextures) {
      for (let i = numTextures; i < prevNumTextures; i++) {
        this.textures[i].destroy();
      }

      this.textures.splice(numTextures);
    }

    this.fire('render');
  }

  _createJson(chars, fontName, width, height) {
    const base = {
      'version': 3,
      'intensity': this.intensity,
      'info': {
        'face': fontName,
        'width': width,
        'height': height,
        'maps': [{
          'width': width,
          'height': height
        }]
      },
      'chars': {}
    };
    return base;
  }

  _addChar(json, char, charCode, x, y, w, h, xoffset, yoffset, xadvance, mapNum, mapW, mapH) {
    if (json.info.maps.length < mapNum + 1) {
      json.info.maps.push({
        'width': mapW,
        'height': mapH
      });
    }

    const scale = this.fontSize / 32;
    json.chars[char] = {
      'id': charCode,
      'letter': char,
      'x': x,
      'y': y,
      'width': w,
      'height': h,
      'xadvance': xadvance / scale,
      'xoffset': xoffset / scale,
      'yoffset': (yoffset + this.padding) / scale,
      'scale': scale,
      'range': 1,
      'map': mapNum,
      'bounds': [0, 0, w / scale, h / scale]
    };
  }

  _normalizeCharsSet(text) {
    const unicodeConverterFunc = this.app.systems.element.getUnicodeConverter();

    if (unicodeConverterFunc) {
      text = unicodeConverterFunc(text);
    }

    const set = {};
    const symbols = string.getSymbols(text);

    for (let i = 0; i < symbols.length; i++) {
      const ch = symbols[i];
      if (set[ch]) continue;
      set[ch] = ch;
    }

    const chars = Object.keys(set);
    return chars.sort();
  }

  _getTextMetrics(text) {
    const textSpan = document.createElement('span');
    textSpan.id = 'content-span';
    textSpan.innerHTML = text;
    const block = document.createElement('div');
    block.id = 'content-block';
    block.style.display = 'inline-block';
    block.style.width = '1px';
    block.style.height = '0px';
    const div = document.createElement('div');
    div.appendChild(textSpan);
    div.appendChild(block);
    div.style.font = this.fontSize + 'px ' + this.fontName;
    const body = document.body;
    body.appendChild(div);
    let ascent = -1;
    let descent = -1;
    let height = -1;

    try {
      block.style['vertical-align'] = 'baseline';
      ascent = block.offsetTop - textSpan.offsetTop;
      block.style['vertical-align'] = 'bottom';
      height = block.offsetTop - textSpan.offsetTop;
      descent = height - ascent;
    } finally {
      document.body.removeChild(div);
    }

    return {
      ascent: ascent,
      descent: descent,
      height: height
    };
  }

}

const DISTANCE_LINEAR = 'linear';
const DISTANCE_INVERSE = 'inverse';
const DISTANCE_EXPONENTIAL = 'exponential';

function hasAudioContext() {
  return !!(typeof AudioContext !== 'undefined' || typeof webkitAudioContext !== 'undefined');
}

class Channel {
  constructor(manager, sound, options = {}) {
    this.volume = options.volume === undefined ? 1 : options.volume;
    this.loop = options.loop === undefined ? false : options.loop;
    this.pitch = options.pitch === undefined ? 1 : options.pitch;
    this.sound = sound;
    this.paused = false;
    this.suspended = false;
    this.manager = manager;
    this.source = null;

    if (hasAudioContext()) {
      this.startTime = 0;
      this.startOffset = 0;
      const context = manager.context;
      this.gain = context.createGain();
    } else if (sound.audio) {
      this.source = sound.audio.cloneNode(false);
      this.source.pause();
    }
  }

  getVolume() {
    return this.volume;
  }

  getLoop() {
    return this.loop;
  }

  setLoop(loop) {
    this.loop = loop;

    if (this.source) {
      this.source.loop = loop;
    }
  }

  getPitch() {
    return this.pitch;
  }

  onManagerVolumeChange() {
    this.setVolume(this.getVolume());
  }

  onManagerSuspend() {
    if (this.isPlaying() && !this.suspended) {
      this.suspended = true;
      this.pause();
    }
  }

  onManagerResume() {
    if (this.suspended) {
      this.suspended = false;
      this.unpause();
    }
  }

  play() {
    if (this.source) {
      throw new Error('Call stop() before calling play()');
    }

    this._createSource();

    if (!this.source) {
      return;
    }

    this.startTime = this.manager.context.currentTime;
    this.source.start(0, this.startOffset % this.source.buffer.duration);
    this.setVolume(this.volume);
    this.setLoop(this.loop);
    this.setPitch(this.pitch);
    this.manager.on('volumechange', this.onManagerVolumeChange, this);
    this.manager.on('suspend', this.onManagerSuspend, this);
    this.manager.on('resume', this.onManagerResume, this);
    if (this.manager.suspended) this.onManagerSuspend();
  }

  pause() {
    if (this.source) {
      this.paused = true;
      this.startOffset += this.manager.context.currentTime - this.startTime;
      this.source.stop(0);
      this.source = null;
    }
  }

  unpause() {
    if (this.source || !this.paused) {
      console.warn('Call pause() before unpausing.');
      return;
    }

    this._createSource();

    if (!this.source) {
      return;
    }

    this.startTime = this.manager.context.currentTime;
    this.source.start(0, this.startOffset % this.source.buffer.duration);
    this.setVolume(this.volume);
    this.setLoop(this.loop);
    this.setPitch(this.pitch);
    this.paused = false;
  }

  stop() {
    if (this.source) {
      this.source.stop(0);
      this.source = null;
    }

    this.manager.off('volumechange', this.onManagerVolumeChange, this);
    this.manager.off('suspend', this.onManagerSuspend, this);
    this.manager.off('resume', this.onManagerResume, this);
  }

  setVolume(volume) {
    volume = math$1.clamp(volume, 0, 1);
    this.volume = volume;

    if (this.gain) {
      this.gain.gain.value = volume * this.manager.volume;
    }
  }

  setPitch(pitch) {
    this.pitch = pitch;

    if (this.source) {
      this.source.playbackRate.value = pitch;
    }
  }

  isPlaying() {
    return !this.paused && this.source.playbackState === this.source.PLAYING_STATE;
  }

  getDuration() {
    return this.source ? this.source.buffer.duration : 0;
  }

  _createSource() {
    const context = this.manager.context;

    if (this.sound.buffer) {
      this.source = context.createBufferSource();
      this.source.buffer = this.sound.buffer;
      this.source.connect(this.gain);
      this.gain.connect(context.destination);

      if (!this.loop) {
        this.source.onended = this.pause.bind(this);
      }
    }
  }

}

if (!hasAudioContext()) {
  Object.assign(Channel.prototype, {
    play: function () {
      if (this.source) {
        this.paused = false;
        this.setVolume(this.volume);
        this.setLoop(this.loop);
        this.setPitch(this.pitch);
        this.source.play();
      }

      this.manager.on('volumechange', this.onManagerVolumeChange, this);
      this.manager.on('suspend', this.onManagerSuspend, this);
      this.manager.on('resume', this.onManagerResume, this);
      if (this.manager.suspended) this.onManagerSuspend();
    },
    pause: function () {
      if (this.source) {
        this.paused = true;
        this.source.pause();
      }
    },
    unpause: function () {
      if (this.source) {
        this.paused = false;
        this.source.play();
      }
    },
    stop: function () {
      if (this.source) {
        this.source.pause();
      }

      this.manager.off('volumechange', this.onManagerVolumeChange, this);
      this.manager.off('suspend', this.onManagerSuspend, this);
      this.manager.off('resume', this.onManagerResume, this);
    },
    setVolume: function (volume) {
      volume = math$1.clamp(volume, 0, 1);
      this.volume = volume;

      if (this.source) {
        this.source.volume = volume * this.manager.volume;
      }
    },
    setPitch: function (pitch) {
      this.pitch = pitch;

      if (this.source) {
        this.source.playbackRate = pitch;
      }
    },
    getDuration: function () {
      return this.source && !isNaN(this.source.duration) ? this.source.duration : 0;
    },
    isPlaying: function () {
      return !this.source.paused;
    }
  });
}

const MAX_DISTANCE$1 = 10000;

class Channel3d extends Channel {
  constructor(manager, sound, options) {
    super(manager, sound, options);
    this.position = new Vec3();
    this.velocity = new Vec3();

    if (hasAudioContext()) {
      this.panner = manager.context.createPanner();
    } else {
      this.maxDistance = MAX_DISTANCE$1;
      this.minDistance = 1;
      this.rollOffFactor = 1;
      this.distanceModel = DISTANCE_INVERSE;
    }
  }

  getPosition() {
    return this.position;
  }

  setPosition(position) {
    this.position.copy(position);
    const panner = this.panner;

    if ('positionX' in panner) {
      panner.positionX.value = position.x;
      panner.positionY.value = position.y;
      panner.positionZ.value = position.z;
    } else if (panner.setPosition) {
      panner.setPosition(position.x, position.y, position.z);
    }
  }

  getVelocity() {
    return this.velocity;
  }

  setVelocity(velocity) {
    this.velocity.copy(velocity);
  }

  getMaxDistance() {
    return this.panner.maxDistance;
  }

  setMaxDistance(max) {
    this.panner.maxDistance = max;
  }

  getMinDistance() {
    return this.panner.refDistance;
  }

  setMinDistance(min) {
    this.panner.refDistance = min;
  }

  getRollOffFactor() {
    return this.panner.rolloffFactor;
  }

  setRollOffFactor(factor) {
    this.panner.rolloffFactor = factor;
  }

  getDistanceModel() {
    return this.panner.distanceModel;
  }

  setDistanceModel(distanceModel) {
    this.panner.distanceModel = distanceModel;
  }

  _createSource() {
    const context = this.manager.context;
    this.source = context.createBufferSource();
    this.source.buffer = this.sound.buffer;
    this.source.connect(this.panner);
    this.panner.connect(this.gain);
    this.gain.connect(context.destination);

    if (!this.loop) {
      this.source.onended = this.pause.bind(this);
    }
  }

}

if (!hasAudioContext()) {
  let offset = new Vec3();

  const fallOff = function fallOff(posOne, posTwo, refDistance, maxDistance, rolloffFactor, distanceModel) {
    offset = offset.sub2(posOne, posTwo);
    const distance = offset.length();

    if (distance < refDistance) {
      return 1;
    } else if (distance > maxDistance) {
      return 0;
    }

    let result = 0;

    if (distanceModel === DISTANCE_LINEAR) {
      result = 1 - rolloffFactor * (distance - refDistance) / (maxDistance - refDistance);
    } else if (distanceModel === DISTANCE_INVERSE) {
      result = refDistance / (refDistance + rolloffFactor * (distance - refDistance));
    } else if (distanceModel === DISTANCE_EXPONENTIAL) {
      result = Math.pow(distance / refDistance, -rolloffFactor);
    }

    return math$1.clamp(result, 0, 1);
  };

  Object.assign(Channel3d.prototype, {
    setPosition: function (position) {
      this.position.copy(position);

      if (this.source) {
        const listener = this.manager.listener;
        const lpos = listener.getPosition();
        const factor = fallOff(lpos, this.position, this.minDistance, this.maxDistance, this.rollOffFactor, this.distanceModel);
        const v = this.getVolume();
        this.source.volume = v * factor;
      }
    },
    getMaxDistance: function () {
      return this.maxDistance;
    },
    setMaxDistance: function (max) {
      this.maxDistance = max;
    },
    getMinDistance: function () {
      return this.minDistance;
    },
    setMinDistance: function (min) {
      this.minDistance = min;
    },
    getRollOffFactor: function () {
      return this.rollOffFactor;
    },
    setRollOffFactor: function (factor) {
      this.rollOffFactor = factor;
    },
    getDistanceModel: function () {
      return this.distanceModel;
    },
    setDistanceModel: function (distanceModel) {
      this.distanceModel = distanceModel;
    }
  });
}

class Listener {
  constructor(manager) {
    this._manager = manager;
    this.position = new Vec3();
    this.velocity = new Vec3();
    this.orientation = new Mat4();
  }

  getPosition() {
    return this.position;
  }

  setPosition(position) {
    this.position.copy(position);
    const listener = this.listener;

    if (listener) {
      if ('positionX' in listener) {
        listener.positionX.value = position.x;
        listener.positionY.value = position.y;
        listener.positionZ.value = position.z;
      } else if (listener.setPosition) {
        listener.setPosition(position.x, position.y, position.z);
      }
    }
  }

  getVelocity() {
    return this.velocity;
  }

  setVelocity(velocity) {}

  setOrientation(orientation) {
    this.orientation.copy(orientation);
    const listener = this.listener;

    if (listener) {
      const m = orientation.data;

      if ('forwardX' in listener) {
        listener.forwardX.value = -m[8];
        listener.forwardY.value = -m[9];
        listener.forwardZ.value = -m[10];
        listener.upX.value = m[4];
        listener.upY.value = m[5];
        listener.upZ.value = m[6];
      } else if (listener.setOrientation) {
        listener.setOrientation(-m[8], -m[9], -m[10], m[4], m[5], m[6]);
      }
    }
  }

  getOrientation() {
    return this.orientation;
  }

  get listener() {
    const context = this._manager.context;
    return context ? context.listener : null;
  }

}

const CONTEXT_STATE_RUNNING = 'running';
const CONTEXT_STATE_INTERRUPTED = 'interrupted';
const USER_INPUT_EVENTS = ['click', 'contextmenu', 'auxclick', 'dblclick', 'mousedown', 'mouseup', 'pointerup', 'touchend', 'keydown', 'keyup'];

class SoundManager extends EventHandler {
  constructor(options) {
    super();
    this._context = null;
    this._forceWebAudioApi = options.forceWebAudioApi;
    this._resumeContextCallback = null;
    this._selfSuspended = false;
    this._unlocked = false;
    this._unlocking = false;

    if (!hasAudioContext() && !this._forceWebAudioApi) ;

    this.listener = new Listener(this);
    this._volume = 1;
  }

  set volume(volume) {
    volume = math$1.clamp(volume, 0, 1);
    this._volume = volume;
    this.fire('volumechange', volume);
  }

  get volume() {
    return this._volume;
  }

  get suspended() {
    return !this._context || !this._unlocked || this._context.state !== CONTEXT_STATE_RUNNING;
  }

  get context() {
    if (!this._context) {
      if (hasAudioContext() || this._forceWebAudioApi) {
        if (typeof AudioContext !== 'undefined') {
          this._context = new AudioContext();
        } else if (typeof webkitAudioContext !== 'undefined') {
          this._context = new webkitAudioContext();
        }

        if (this._context) {
          this._unlocked = this._context.state === CONTEXT_STATE_RUNNING;

          if (!this._unlocked) {
            this._addContextUnlockListeners();
          }

          const self = this;

          this._context.onstatechange = function () {
            if (self._unlocked && !self._selfSuspended && self._context.state !== CONTEXT_STATE_RUNNING) {
              self._context.resume().then(() => {}, e => {}).catch(e => {});
            }
          };
        }
      }
    }

    return this._context;
  }

  suspend() {
    this._selfSuspended = true;

    if (this.suspended) {
      return;
    }

    this.fire('suspend');
  }

  resume() {
    this._selfSuspended = false;

    if (!this._context || !this._unlocked && !this._unlocking) {
      return;
    }

    if (this._context.state === CONTEXT_STATE_INTERRUPTED) {
      this._context.resume().then(() => {
        this.fire('resume');
      }, e => {}).catch(e => {});
    } else {
      this.fire('resume');
    }
  }

  destroy() {
    this._removeUserInputListeners();

    this.fire('destroy');

    if (this._context && this._context.close) {
      this._context.close();

      this._context = null;
    }
  }

  playSound(sound, options = {}) {
    let channel = null;

    if (Channel) {
      channel = new Channel(this, sound, options);
      channel.play();
    }

    return channel;
  }

  playSound3d(sound, position, options = {}) {
    let channel = null;

    if (Channel3d) {
      channel = new Channel3d(this, sound, options);
      channel.setPosition(position);

      if (options.volume) {
        channel.setVolume(options.volume);
      }

      if (options.loop) {
        channel.setLoop(options.loop);
      }

      if (options.maxDistance) {
        channel.setMaxDistance(options.maxDistance);
      }

      if (options.minDistance) {
        channel.setMinDistance(options.minDistance);
      }

      if (options.rollOffFactor) {
        channel.setRollOffFactor(options.rollOffFactor);
      }

      if (options.distanceModel) {
        channel.setDistanceModel(options.distanceModel);
      }

      channel.play();
    }

    return channel;
  }

  _addContextUnlockListeners() {
    this._unlocking = false;

    if (!this._resumeContextCallback) {
      this._resumeContextCallback = () => {
        if (!this._context || this._unlocked || this._unlocking) {
          return;
        }

        this._unlocking = true;
        this.resume();

        const buffer = this._context.createBuffer(1, 1, this._context.sampleRate);

        const source = this._context.createBufferSource();

        source.buffer = buffer;
        source.connect(this._context.destination);
        source.start(0);

        source.onended = event => {
          source.disconnect(0);
          this._unlocked = true;
          this._unlocking = false;

          this._removeUserInputListeners();
        };
      };
    }

    USER_INPUT_EVENTS.forEach(eventName => {
      window.addEventListener(eventName, this._resumeContextCallback, false);
    });
  }

  _removeUserInputListeners() {
    if (!this._resumeContextCallback) {
      return;
    }

    USER_INPUT_EVENTS.forEach(eventName => {
      window.removeEventListener(eventName, this._resumeContextCallback, false);
    });
    this._resumeContextCallback = null;
  }

}

class Sound {
  constructor(resource) {
    this.audio = void 0;
    this.buffer = void 0;

    if (resource instanceof Audio) {
      this.audio = resource;
    } else {
      this.buffer = resource;
    }
  }

  get duration() {
    let duration = 0;

    if (this.buffer) {
      duration = this.buffer.duration;
    } else if (this.audio) {
      duration = this.audio.duration;
    }

    return duration || 0;
  }

}

const STATE_PLAYING = 0;
const STATE_PAUSED = 1;
const STATE_STOPPED = 2;

function capTime(time, duration) {
  return time % duration || 0;
}

class SoundInstance extends EventHandler {
  constructor(manager, sound, options) {
    super();
    this.source = null;
    this._manager = manager;
    this._volume = options.volume !== undefined ? math$1.clamp(Number(options.volume) || 0, 0, 1) : 1;
    this._pitch = options.pitch !== undefined ? Math.max(0.01, Number(options.pitch) || 0) : 1;
    this._loop = !!(options.loop !== undefined ? options.loop : false);
    this._sound = sound;
    this._state = STATE_STOPPED;
    this._suspended = false;
    this._suspendEndEvent = 0;
    this._suspendInstanceEvents = false;
    this._playWhenLoaded = true;
    this._startTime = Math.max(0, Number(options.startTime) || 0);
    this._duration = Math.max(0, Number(options.duration) || 0);
    this._startOffset = null;
    this._onPlayCallback = options.onPlay;
    this._onPauseCallback = options.onPause;
    this._onResumeCallback = options.onResume;
    this._onStopCallback = options.onStop;
    this._onEndCallback = options.onEnd;

    if (hasAudioContext()) {
      this._startedAt = 0;
      this._currentTime = 0;
      this._currentOffset = 0;
      this._inputNode = null;
      this._connectorNode = null;
      this._firstNode = null;
      this._lastNode = null;
      this._waitingContextSuspension = false;

      this._initializeNodes();

      this._endedHandler = this._onEnded.bind(this);
    } else {
      this._isReady = false;
      this._loadedMetadataHandler = this._onLoadedMetadata.bind(this);
      this._timeUpdateHandler = this._onTimeUpdate.bind(this);
      this._endedHandler = this._onEnded.bind(this);

      this._createSource();
    }
  }

  set currentTime(value) {
    if (value < 0) return;

    if (this._state === STATE_PLAYING) {
      const suspend = this._suspendInstanceEvents;
      this._suspendInstanceEvents = true;
      this.stop();
      this._startOffset = value;
      this.play();
      this._suspendInstanceEvents = suspend;
    } else {
      this._startOffset = value;
      this._currentTime = value;
    }
  }

  get currentTime() {
    if (this._startOffset !== null) {
      return this._startOffset;
    }

    if (this._state === STATE_PAUSED) {
      return this._currentTime;
    }

    if (this._state === STATE_STOPPED || !this.source) {
      return 0;
    }

    this._updateCurrentTime();

    return this._currentTime;
  }

  set duration(value) {
    this._duration = Math.max(0, Number(value) || 0);
    const isPlaying = this._state === STATE_PLAYING;
    this.stop();

    if (isPlaying) {
      this.play();
    }
  }

  get duration() {
    if (!this._sound) {
      return 0;
    }

    if (this._duration) {
      return capTime(this._duration, this._sound.duration);
    }

    return this._sound.duration;
  }

  get isPaused() {
    return this._state === STATE_PAUSED;
  }

  get isPlaying() {
    return this._state === STATE_PLAYING;
  }

  get isStopped() {
    return this._state === STATE_STOPPED;
  }

  get isSuspended() {
    return this._suspended;
  }

  set loop(value) {
    this._loop = !!value;

    if (this.source) {
      this.source.loop = this._loop;
    }
  }

  get loop() {
    return this._loop;
  }

  set pitch(pitch) {
    this._currentOffset = this.currentTime;
    this._startedAt = this._manager.context.currentTime;
    this._pitch = Math.max(Number(pitch) || 0, 0.01);

    if (this.source) {
      this.source.playbackRate.value = this._pitch;
    }
  }

  get pitch() {
    return this._pitch;
  }

  set sound(value) {
    this._sound = value;

    if (this._state !== STATE_STOPPED) {
      this.stop();
    } else {
      this._createSource();
    }
  }

  get sound() {
    return this._sound;
  }

  set startTime(value) {
    this._startTime = Math.max(0, Number(value) || 0);
    const isPlaying = this._state === STATE_PLAYING;
    this.stop();

    if (isPlaying) {
      this.play();
    }
  }

  get startTime() {
    return this._startTime;
  }

  set volume(volume) {
    volume = math$1.clamp(volume, 0, 1);
    this._volume = volume;

    if (this.gain) {
      this.gain.gain.value = volume * this._manager.volume;
    }
  }

  get volume() {
    return this._volume;
  }

  _onPlay() {
    this.fire('play');
    if (this._onPlayCallback) this._onPlayCallback(this);
  }

  _onPause() {
    this.fire('pause');
    if (this._onPauseCallback) this._onPauseCallback(this);
  }

  _onResume() {
    this.fire('resume');
    if (this._onResumeCallback) this._onResumeCallback(this);
  }

  _onStop() {
    this.fire('stop');
    if (this._onStopCallback) this._onStopCallback(this);
  }

  _onEnded() {
    if (this._suspendEndEvent > 0) {
      this._suspendEndEvent--;
      return;
    }

    this.fire('end');
    if (this._onEndCallback) this._onEndCallback(this);
    this.stop();
  }

  _onManagerVolumeChange() {
    this.volume = this._volume;
  }

  _onManagerSuspend() {
    if (this._state === STATE_PLAYING && !this._suspended) {
      this._suspended = true;
      this.pause();
    }
  }

  _onManagerResume() {
    if (this._suspended) {
      this._suspended = false;
      this.resume();
    }
  }

  _initializeNodes() {
    this.gain = this._manager.context.createGain();
    this._inputNode = this.gain;
    this._connectorNode = this.gain;

    this._connectorNode.connect(this._manager.context.destination);
  }

  play() {
    if (this._state !== STATE_STOPPED) {
      this.stop();
    }

    this._state = STATE_PLAYING;
    this._playWhenLoaded = false;

    if (this._waitingContextSuspension) {
      return false;
    }

    if (this._manager.suspended) {
      this._manager.once('resume', this._playAudioImmediate, this);

      this._waitingContextSuspension = true;
      return false;
    }

    this._playAudioImmediate();

    return true;
  }

  _playAudioImmediate() {
    this._waitingContextSuspension = false;

    if (this._state !== STATE_PLAYING) {
      return;
    }

    if (!this.source) {
      this._createSource();
    }

    let offset = capTime(this._startOffset, this.duration);
    offset = capTime(this._startTime + offset, this._sound.duration);
    this._startOffset = null;

    if (this._duration) {
      this.source.start(0, offset, this._duration);
    } else {
      this.source.start(0, offset);
    }

    this._startedAt = this._manager.context.currentTime;
    this._currentTime = 0;
    this._currentOffset = offset;
    this.volume = this._volume;
    this.loop = this._loop;
    this.pitch = this._pitch;

    this._manager.on('volumechange', this._onManagerVolumeChange, this);

    this._manager.on('suspend', this._onManagerSuspend, this);

    this._manager.on('resume', this._onManagerResume, this);

    this._manager.on('destroy', this._onManagerDestroy, this);

    if (!this._suspendInstanceEvents) {
      this._onPlay();
    }
  }

  pause() {
    this._playWhenLoaded = false;
    if (this._state !== STATE_PLAYING) return false;
    this._state = STATE_PAUSED;

    if (this._waitingContextSuspension) {
      return true;
    }

    this._updateCurrentTime();

    this._suspendEndEvent++;
    this.source.stop(0);
    this.source = null;
    this._startOffset = null;
    if (!this._suspendInstanceEvents) this._onPause();
    return true;
  }

  resume() {
    if (this._state !== STATE_PAUSED) {
      return false;
    }

    this._state = STATE_PLAYING;

    if (this._waitingContextSuspension) {
      return true;
    }

    if (!this.source) {
      this._createSource();
    }

    let offset = this.currentTime;

    if (this._startOffset !== null) {
      offset = capTime(this._startOffset, this.duration);
      offset = capTime(this._startTime + offset, this._sound.duration);
      this._startOffset = null;
    }

    if (this._duration) {
      this.source.start(0, offset, this._duration);
    } else {
      this.source.start(0, offset);
    }

    this._startedAt = this._manager.context.currentTime;
    this._currentOffset = offset;
    this.volume = this._volume;
    this.loop = this._loop;
    this.pitch = this._pitch;
    this._playWhenLoaded = false;
    if (!this._suspendInstanceEvents) this._onResume();
    return true;
  }

  stop() {
    this._playWhenLoaded = false;
    if (this._state === STATE_STOPPED) return false;
    const wasPlaying = this._state === STATE_PLAYING;
    this._state = STATE_STOPPED;

    if (this._waitingContextSuspension) {
      return true;
    }

    this._manager.off('volumechange', this._onManagerVolumeChange, this);

    this._manager.off('suspend', this._onManagerSuspend, this);

    this._manager.off('resume', this._onManagerResume, this);

    this._manager.off('destroy', this._onManagerDestroy, this);

    this._startedAt = 0;
    this._currentTime = 0;
    this._currentOffset = 0;
    this._startOffset = null;
    this._suspendEndEvent++;

    if (wasPlaying && this.source) {
      this.source.stop(0);
    }

    this.source = null;
    if (!this._suspendInstanceEvents) this._onStop();
    return true;
  }

  setExternalNodes(firstNode, lastNode) {
    if (!firstNode) {
      console.error('The firstNode must be a valid Audio Node');
      return;
    }

    if (!lastNode) {
      lastNode = firstNode;
    }

    const speakers = this._manager.context.destination;

    if (this._firstNode !== firstNode) {
      if (this._firstNode) {
        this._connectorNode.disconnect(this._firstNode);
      } else {
        this._connectorNode.disconnect(speakers);
      }

      this._firstNode = firstNode;

      this._connectorNode.connect(firstNode);
    }

    if (this._lastNode !== lastNode) {
      if (this._lastNode) {
        this._lastNode.disconnect(speakers);
      }

      this._lastNode = lastNode;

      this._lastNode.connect(speakers);
    }
  }

  clearExternalNodes() {
    const speakers = this._manager.context.destination;

    if (this._firstNode) {
      this._connectorNode.disconnect(this._firstNode);

      this._firstNode = null;
    }

    if (this._lastNode) {
      this._lastNode.disconnect(speakers);

      this._lastNode = null;
    }

    this._connectorNode.connect(speakers);
  }

  getExternalNodes() {
    return [this._firstNode, this._lastNode];
  }

  _createSource() {
    if (!this._sound) {
      return null;
    }

    const context = this._manager.context;

    if (this._sound.buffer) {
      this.source = context.createBufferSource();
      this.source.buffer = this._sound.buffer;
      this.source.connect(this._inputNode);
      this.source.onended = this._endedHandler;
      this.source.loopStart = capTime(this._startTime, this.source.buffer.duration);

      if (this._duration) {
        this.source.loopEnd = Math.max(this.source.loopStart, capTime(this._startTime + this._duration, this.source.buffer.duration));
      }
    }

    return this.source;
  }

  _updateCurrentTime() {
    this._currentTime = capTime((this._manager.context.currentTime - this._startedAt) * this._pitch + this._currentOffset, this.duration);
  }

  _onManagerDestroy() {
    if (this.source && this._state === STATE_PLAYING) {
      this.source.stop(0);
      this.source = null;
    }
  }

}

if (!hasAudioContext()) {
  Object.assign(SoundInstance.prototype, {
    play: function () {
      if (this._state !== STATE_STOPPED) {
        this.stop();
      }

      if (!this.source) {
        if (!this._createSource()) {
          return false;
        }
      }

      this.volume = this._volume;
      this.pitch = this._pitch;
      this.loop = this._loop;
      this.source.play();
      this._state = STATE_PLAYING;
      this._playWhenLoaded = false;

      this._manager.on('volumechange', this._onManagerVolumeChange, this);

      this._manager.on('suspend', this._onManagerSuspend, this);

      this._manager.on('resume', this._onManagerResume, this);

      this._manager.on('destroy', this._onManagerDestroy, this);

      if (this._manager.suspended) this._onManagerSuspend();
      if (!this._suspendInstanceEvents) this._onPlay();
      return true;
    },
    pause: function () {
      if (!this.source || this._state !== STATE_PLAYING) return false;
      this._suspendEndEvent++;
      this.source.pause();
      this._playWhenLoaded = false;
      this._state = STATE_PAUSED;
      this._startOffset = null;
      if (!this._suspendInstanceEvents) this._onPause();
      return true;
    },
    resume: function () {
      if (!this.source || this._state !== STATE_PAUSED) return false;
      this._state = STATE_PLAYING;
      this._playWhenLoaded = false;

      if (this.source.paused) {
        this.source.play();
        if (!this._suspendInstanceEvents) this._onResume();
      }

      return true;
    },
    stop: function () {
      if (!this.source || this._state === STATE_STOPPED) return false;

      this._manager.off('volumechange', this._onManagerVolumeChange, this);

      this._manager.off('suspend', this._onManagerSuspend, this);

      this._manager.off('resume', this._onManagerResume, this);

      this._manager.off('destroy', this._onManagerDestroy, this);

      this._suspendEndEvent++;
      this.source.pause();
      this._playWhenLoaded = false;
      this._state = STATE_STOPPED;
      this._startOffset = null;
      if (!this._suspendInstanceEvents) this._onStop();
      return true;
    },
    setExternalNodes: function () {},
    clearExternalNodes: function () {},
    getExternalNodes: function () {
      return [null, null];
    },
    _onLoadedMetadata: function () {
      this.source.removeEventListener('loadedmetadata', this._loadedMetadataHandler);
      this._isReady = true;
      let offset = capTime(this._startOffset, this.duration);
      offset = capTime(this._startTime + offset, this._sound.duration);
      this._startOffset = null;
      this.source.currentTime = offset;
    },
    _createSource: function () {
      if (this._sound && this._sound.audio) {
        this._isReady = false;
        this.source = this._sound.audio.cloneNode(true);
        this.source.addEventListener('loadedmetadata', this._loadedMetadataHandler);
        this.source.addEventListener('timeupdate', this._timeUpdateHandler);
        this.source.onended = this._endedHandler;
      }

      return this.source;
    },
    _onTimeUpdate: function () {
      if (!this._duration) return;

      if (this.source.currentTime > capTime(this._startTime + this._duration, this.source.duration)) {
        if (this.loop) {
          this.source.currentTime = capTime(this._startTime, this.source.duration);
        } else {
          this.source.removeEventListener('timeupdate', this._timeUpdateHandler);
          this.source.pause();

          this._onEnded();
        }
      }
    },
    _onManagerDestroy: function () {
      if (this.source) {
        this.source.pause();
      }
    }
  });
  Object.defineProperty(SoundInstance.prototype, 'volume', {
    get: function () {
      return this._volume;
    },
    set: function (volume) {
      volume = math$1.clamp(volume, 0, 1);
      this._volume = volume;

      if (this.source) {
        this.source.volume = volume * this._manager.volume;
      }
    }
  });
  Object.defineProperty(SoundInstance.prototype, 'pitch', {
    get: function () {
      return this._pitch;
    },
    set: function (pitch) {
      this._pitch = Math.max(Number(pitch) || 0, 0.01);

      if (this.source) {
        this.source.playbackRate = this._pitch;
      }
    }
  });
  Object.defineProperty(SoundInstance.prototype, 'sound', {
    get: function () {
      return this._sound;
    },
    set: function (value) {
      this.stop();
      this._sound = value;
    }
  });
  Object.defineProperty(SoundInstance.prototype, 'currentTime', {
    get: function () {
      if (this._startOffset !== null) {
        return this._startOffset;
      }

      if (this._state === STATE_STOPPED || !this.source) {
        return 0;
      }

      return this.source.currentTime - this._startTime;
    },
    set: function (value) {
      if (value < 0) return;
      this._startOffset = value;

      if (this.source && this._isReady) {
        this.source.currentTime = capTime(this._startTime + capTime(value, this.duration), this._sound.duration);
        this._startOffset = null;
      }
    }
  });
}

const MAX_DISTANCE = 10000;

class SoundInstance3d extends SoundInstance {
  constructor(manager, sound, options = {}) {
    super(manager, sound, options);
    this._position = new Vec3();
    this._velocity = new Vec3();
    if (options.position) this.position = options.position;
    this.maxDistance = options.maxDistance !== undefined ? Number(options.maxDistance) : MAX_DISTANCE;
    this.refDistance = options.refDistance !== undefined ? Number(options.refDistance) : 1;
    this.rollOffFactor = options.rollOffFactor !== undefined ? Number(options.rollOffFactor) : 1;
    this.distanceModel = options.distanceModel !== undefined ? options.distanceModel : DISTANCE_LINEAR;
  }

  _initializeNodes() {
    this.gain = this._manager.context.createGain();
    this.panner = this._manager.context.createPanner();
    this.panner.connect(this.gain);
    this._inputNode = this.panner;
    this._connectorNode = this.gain;

    this._connectorNode.connect(this._manager.context.destination);
  }

  set position(value) {
    this._position.copy(value);

    const panner = this.panner;

    if ('positionX' in panner) {
      panner.positionX.value = value.x;
      panner.positionY.value = value.y;
      panner.positionZ.value = value.z;
    } else if (panner.setPosition) {
      panner.setPosition(value.x, value.y, value.z);
    }
  }

  get position() {
    return this._position;
  }

  set velocity(velocity) {
    this._velocity.copy(velocity);
  }

  get velocity() {
    return this._velocity;
  }

  set maxDistance(value) {
    this.panner.maxDistance = value;
  }

  get maxDistance() {
    return this.panner.maxDistance;
  }

  set refDistance(value) {
    this.panner.refDistance = value;
  }

  get refDistance() {
    return this.panner.refDistance;
  }

  set rollOffFactor(value) {
    this.panner.rolloffFactor = value;
  }

  get rollOffFactor() {
    return this.panner.rolloffFactor;
  }

  set distanceModel(value) {
    this.panner.distanceModel = value;
  }

  get distanceModel() {
    return this.panner.distanceModel;
  }

}

if (!hasAudioContext()) {
  let offset = new Vec3();

  const fallOff = function fallOff(posOne, posTwo, refDistance, maxDistance, rollOffFactor, distanceModel) {
    offset = offset.sub2(posOne, posTwo);
    const distance = offset.length();

    if (distance < refDistance) {
      return 1;
    } else if (distance > maxDistance) {
      return 0;
    }

    let result = 0;

    if (distanceModel === DISTANCE_LINEAR) {
      result = 1 - rollOffFactor * (distance - refDistance) / (maxDistance - refDistance);
    } else if (distanceModel === DISTANCE_INVERSE) {
      result = refDistance / (refDistance + rollOffFactor * (distance - refDistance));
    } else if (distanceModel === DISTANCE_EXPONENTIAL) {
      result = Math.pow(distance / refDistance, -rollOffFactor);
    }

    return math$1.clamp(result, 0, 1);
  };

  Object.defineProperty(SoundInstance3d.prototype, 'position', {
    get: function () {
      return this._position;
    },
    set: function (position) {
      this._position.copy(position);

      if (this.source) {
        const listener = this._manager.listener;
        const lpos = listener.getPosition();
        const factor = fallOff(lpos, this._position, this.refDistance, this.maxDistance, this.rollOffFactor, this.distanceModel);
        const v = this.volume;
        this.source.volume = v * factor * this._manager.volume;
      }
    }
  });
  Object.defineProperty(SoundInstance3d.prototype, 'maxDistance', {
    get: function () {
      return this._maxDistance;
    },
    set: function (value) {
      this._maxDistance = value;
    }
  });
  Object.defineProperty(SoundInstance3d.prototype, 'refDistance', {
    get: function () {
      return this._refDistance;
    },
    set: function (value) {
      this._refDistance = value;
    }
  });
  Object.defineProperty(SoundInstance3d.prototype, 'rollOffFactor', {
    get: function () {
      return this._rollOffFactor;
    },
    set: function (value) {
      this._rollOffFactor = value;
    }
  });
  Object.defineProperty(SoundInstance3d.prototype, 'distanceModel', {
    get: function () {
      return this._distanceModel;
    },
    set: function (value) {
      this._distanceModel = value;
    }
  });
}

function BasisWorker() {
  const BASIS_FORMAT = {
    cTFETC1: 0,
    cTFETC2: 1,
    cTFBC1: 2,
    cTFBC3: 3,
    cTFPVRTC1_4_RGB: 8,
    cTFPVRTC1_4_RGBA: 9,
    cTFASTC_4x4: 10,
    cTFATC_RGB: 11,
    cTFATC_RGBA_INTERPOLATED_ALPHA: 12,
    cTFRGBA32: 13,
    cTFRGB565: 14,
    cTFRGBA4444: 16
  };
  const opaqueMapping = {
    astc: BASIS_FORMAT.cTFASTC_4x4,
    dxt: BASIS_FORMAT.cTFBC1,
    etc1: BASIS_FORMAT.cTFETC1,
    etc2: BASIS_FORMAT.cTFETC1,
    pvr: BASIS_FORMAT.cTFPVRTC1_4_RGB,
    atc: BASIS_FORMAT.cTFATC_RGB,
    none: BASIS_FORMAT.cTFRGB565
  };
  const alphaMapping = {
    astc: BASIS_FORMAT.cTFASTC_4x4,
    dxt: BASIS_FORMAT.cTFBC3,
    etc1: BASIS_FORMAT.cTFRGBA4444,
    etc2: BASIS_FORMAT.cTFETC2,
    pvr: BASIS_FORMAT.cTFPVRTC1_4_RGBA,
    atc: BASIS_FORMAT.cTFATC_RGBA_INTERPOLATED_ALPHA,
    none: BASIS_FORMAT.cTFRGBA4444
  };
  const PIXEL_FORMAT = {
    ETC1: 21,
    ETC2_RGB: 22,
    ETC2_RGBA: 23,
    DXT1: 8,
    DXT5: 10,
    PVRTC_4BPP_RGB_1: 26,
    PVRTC_4BPP_RGBA_1: 27,
    ASTC_4x4: 28,
    ATC_RGB: 29,
    ATC_RGBA: 30,
    R8_G8_B8_A8: 7,
    R5_G6_B5: 3,
    R4_G4_B4_A4: 5
  };

  const basisToEngineMapping = (basisFormat, deviceDetails) => {
    switch (basisFormat) {
      case BASIS_FORMAT.cTFETC1:
        return deviceDetails.formats.etc1 ? PIXEL_FORMAT.ETC1 : PIXEL_FORMAT.ETC2_RGB;

      case BASIS_FORMAT.cTFETC2:
        return PIXEL_FORMAT.ETC2_RGBA;

      case BASIS_FORMAT.cTFBC1:
        return PIXEL_FORMAT.DXT1;

      case BASIS_FORMAT.cTFBC3:
        return PIXEL_FORMAT.DXT5;

      case BASIS_FORMAT.cTFPVRTC1_4_RGB:
        return PIXEL_FORMAT.PVRTC_4BPP_RGB_1;

      case BASIS_FORMAT.cTFPVRTC1_4_RGBA:
        return PIXEL_FORMAT.PVRTC_4BPP_RGBA_1;

      case BASIS_FORMAT.cTFASTC_4x4:
        return PIXEL_FORMAT.ASTC_4x4;

      case BASIS_FORMAT.cTFATC_RGB:
        return PIXEL_FORMAT.ATC_RGB;

      case BASIS_FORMAT.cTFATC_RGBA_INTERPOLATED_ALPHA:
        return PIXEL_FORMAT.ATC_RGBA;

      case BASIS_FORMAT.cTFRGBA32:
        return PIXEL_FORMAT.R8_G8_B8_A8;

      case BASIS_FORMAT.cTFRGB565:
        return PIXEL_FORMAT.R5_G6_B5;

      case BASIS_FORMAT.cTFRGBA4444:
        return PIXEL_FORMAT.R4_G4_B4_A4;
    }
  };

  const unswizzleGGGR = data => {
    const genB = function genB(R, G) {
      const r = R * (2.0 / 255.0) - 1.0;
      const g = G * (2.0 / 255.0) - 1.0;
      const b = Math.sqrt(1.0 - Math.min(1.0, r * r + g * g));
      return Math.max(0, Math.min(255, Math.floor((b + 1.0) * 0.5 * 255.0)));
    };

    for (let offset = 0; offset < data.length; offset += 4) {
      const R = data[offset + 3];
      const G = data[offset + 1];
      data[offset + 0] = R;
      data[offset + 2] = genB(R, G);
      data[offset + 3] = 255;
    }

    return data;
  };

  const pack565 = data => {
    const result = new Uint16Array(data.length / 4);

    for (let offset = 0; offset < data.length; offset += 4) {
      const R = data[offset + 0];
      const G = data[offset + 1];
      const B = data[offset + 2];
      result[offset / 4] = (R & 0xf8) << 8 | (G & 0xfc) << 3 | B >> 3;
    }

    return result;
  };

  const isPOT = (width, height) => {
    return (width & width - 1) === 0 && (height & height - 1) === 0;
  };

  const performanceNow = () => {
    return typeof performance !== 'undefined' ? performance.now() : 0;
  };

  let basis;
  let rgbPriority;
  let rgbaPriority;

  const chooseTargetFormat = (deviceDetails, hasAlpha, isUASTC) => {
    if (isUASTC) {
      if (deviceDetails.formats.astc) {
        return 'astc';
      }
    } else {
      if (hasAlpha) {
        if (deviceDetails.formats.etc2) {
          return 'etc2';
        }
      } else {
        if (deviceDetails.formats.etc1 || deviceDetails.formats.etc2) {
          return 'etc1';
        }
      }
    }

    const testInOrder = priority => {
      for (let i = 0; i < priority.length; ++i) {
        const format = priority[i];

        if (deviceDetails.formats[format]) {
          return format;
        }
      }

      return 'none';
    };

    return testInOrder(hasAlpha ? rgbaPriority : rgbPriority);
  };

  const dimensionsValid = (width, height, format, webgl2) => {
    switch (format) {
      case BASIS_FORMAT.cTFETC1:
      case BASIS_FORMAT.cTFETC2:
        return true;

      case BASIS_FORMAT.cTFBC1:
      case BASIS_FORMAT.cTFBC3:
        return (width & 0x3) === 0 && (height & 0x3) === 0;

      case BASIS_FORMAT.cTFPVRTC1_4_RGB:
      case BASIS_FORMAT.cTFPVRTC1_4_RGBA:
        return isPOT(width, height) && (width === height || webgl2);

      case BASIS_FORMAT.cTFASTC_4x4:
        return true;

      case BASIS_FORMAT.cTFATC_RGB:
      case BASIS_FORMAT.cTFATC_RGBA_INTERPOLATED_ALPHA:
        return true;
    }
  };

  const transcodeKTX2 = (url, data, options) => {
    if (!basis.KTX2File) {
      throw new Error('Basis transcoder module does not include support for KTX2.');
    }

    const funcStart = performanceNow();
    const basisFile = new basis.KTX2File(new Uint8Array(data));
    const width = basisFile.getWidth();
    const height = basisFile.getHeight();
    const levels = basisFile.getLevels();
    const hasAlpha = !!basisFile.getHasAlpha();
    const isUASTC = basisFile.isUASTC && basisFile.isUASTC();

    if (!width || !height || !levels) {
      basisFile.close();
      basisFile.delete();
      throw new Error(`Invalid image dimensions url=${url} width=${width} height=${height} levels=${levels}`);
    }

    const format = chooseTargetFormat(options.deviceDetails, hasAlpha, isUASTC);
    const unswizzle = !!options.isGGGR && format === 'pvr';
    let basisFormat;

    if (unswizzle) {
      basisFormat = BASIS_FORMAT.cTFRGBA32;
    } else {
      basisFormat = hasAlpha ? alphaMapping[format] : opaqueMapping[format];

      if (!dimensionsValid(width, height, basisFormat, options.deviceDetails.webgl2)) {
        basisFormat = hasAlpha ? BASIS_FORMAT.cTFRGBA32 : BASIS_FORMAT.cTFRGB565;
      }
    }

    if (!basisFile.startTranscoding()) {
      basisFile.close();
      basisFile.delete();
      throw new Error('Failed to start transcoding url=' + url);
    }

    let i;
    const levelData = [];

    for (let mip = 0; mip < levels; ++mip) {
      const dstSize = basisFile.getImageTranscodedSizeInBytes(mip, 0, 0, basisFormat);
      const dst = new Uint8Array(dstSize);

      if (!basisFile.transcodeImage(dst, mip, 0, 0, basisFormat, 0, -1, -1)) {
        basisFile.close();
        basisFile.delete();
        throw new Error('Failed to transcode image url=' + url);
      }

      const is16BitFormat = basisFormat === BASIS_FORMAT.cTFRGB565 || basisFormat === BASIS_FORMAT.cTFRGBA4444;
      levelData.push(is16BitFormat ? new Uint16Array(dst.buffer) : dst);
    }

    basisFile.close();
    basisFile.delete();

    if (unswizzle) {
      basisFormat = BASIS_FORMAT.cTFRGB565;

      for (i = 0; i < levelData.length; ++i) {
        levelData[i] = pack565(unswizzleGGGR(levelData[i]));
      }
    }

    return {
      format: basisToEngineMapping(basisFormat, options.deviceDetails),
      width: width,
      height: height,
      levels: levelData,
      cubemap: false,
      transcodeTime: performanceNow() - funcStart,
      url: url,
      unswizzledGGGR: unswizzle
    };
  };

  const transcodeBasis = (url, data, options) => {
    const funcStart = performanceNow();
    const basisFile = new basis.BasisFile(new Uint8Array(data));
    const width = basisFile.getImageWidth(0, 0);
    const height = basisFile.getImageHeight(0, 0);
    const images = basisFile.getNumImages();
    const levels = basisFile.getNumLevels(0);
    const hasAlpha = !!basisFile.getHasAlpha();
    const isUASTC = basisFile.isUASTC && basisFile.isUASTC();

    if (!width || !height || !images || !levels) {
      basisFile.close();
      basisFile.delete();
      throw new Error(`Invalid image dimensions url=${url} width=${width} height=${height} images=${images} levels=${levels}`);
    }

    const format = chooseTargetFormat(options.deviceDetails, hasAlpha, isUASTC);
    const unswizzle = !!options.isGGGR && format === 'pvr';
    let basisFormat;

    if (unswizzle) {
      basisFormat = BASIS_FORMAT.cTFRGBA32;
    } else {
      basisFormat = hasAlpha ? alphaMapping[format] : opaqueMapping[format];

      if (!dimensionsValid(width, height, basisFormat, options.deviceDetails.webgl2)) {
        basisFormat = hasAlpha ? BASIS_FORMAT.cTFRGBA32 : BASIS_FORMAT.cTFRGB565;
      }
    }

    if (!basisFile.startTranscoding()) {
      basisFile.close();
      basisFile.delete();
      throw new Error('Failed to start transcoding url=' + url);
    }

    let i;
    const levelData = [];

    for (let mip = 0; mip < levels; ++mip) {
      const dstSize = basisFile.getImageTranscodedSizeInBytes(0, mip, basisFormat);
      const dst = new Uint8Array(dstSize);

      if (!basisFile.transcodeImage(dst, 0, mip, basisFormat, 0, 0)) {
        basisFile.close();
        basisFile.delete();
        throw new Error('Failed to transcode image url=' + url);
      }

      const is16BitFormat = basisFormat === BASIS_FORMAT.cTFRGB565 || basisFormat === BASIS_FORMAT.cTFRGBA4444;
      levelData.push(is16BitFormat ? new Uint16Array(dst.buffer) : dst);
    }

    basisFile.close();
    basisFile.delete();

    if (unswizzle) {
      basisFormat = BASIS_FORMAT.cTFRGB565;

      for (i = 0; i < levelData.length; ++i) {
        levelData[i] = pack565(unswizzleGGGR(levelData[i]));
      }
    }

    return {
      format: basisToEngineMapping(basisFormat, options.deviceDetails),
      width: width,
      height: height,
      levels: levelData,
      cubemap: false,
      transcodeTime: performanceNow() - funcStart,
      url: url,
      unswizzledGGGR: unswizzle
    };
  };

  const transcode = (url, data, options) => {
    return options.isKTX2 ? transcodeKTX2(url, data, options) : transcodeBasis(url, data, options);
  };

  const workerTranscode = (url, data, options) => {
    try {
      const result = transcode(url, data, options);
      result.levels = result.levels.map(v => v.buffer);
      self.postMessage({
        url: url,
        data: result
      }, result.levels);
    } catch (err) {
      self.postMessage({
        url: url,
        err: err
      }, null);
    }
  };

  const workerInit = (config, callback) => {
    self.importScripts(config.basisUrl);

    const instantiateWasmFunc = (imports, successCallback) => {
      WebAssembly.instantiate(config.module, imports).then(result => {
        successCallback(result);
      }).catch(reason => {
        console.error('instantiate failed + ' + reason);
      });
      return {};
    };

    self.BASIS(config.module ? {
      instantiateWasm: instantiateWasmFunc
    } : null).then(instance => {
      instance.initializeBasis();
      basis = instance;
      rgbPriority = config.rgbPriority;
      rgbaPriority = config.rgbaPriority;
      callback(null);
    });
  };

  const queue = [];

  self.onmessage = message => {
    const data = message.data;

    switch (data.type) {
      case 'init':
        workerInit(data.config, () => {
          for (let i = 0; i < queue.length; ++i) {
            workerTranscode(queue[i].url, queue[i].data, queue[i].options);
          }

          queue.length = 0;
        });
        break;

      case 'transcode':
        if (basis) {
          workerTranscode(data.url, data.data, data.options);
        } else {
          queue.push(data);
        }

        break;
    }
  };
}

const getCompressionFormats = device => {
  return {
    astc: !!device.extCompressedTextureASTC,
    atc: !!device.extCompressedTextureATC,
    dxt: !!device.extCompressedTextureS3TC,
    etc1: !!device.extCompressedTextureETC1,
    etc2: !!device.extCompressedTextureETC,
    pvr: !!device.extCompressedTexturePVRTC
  };
};

const prepareWorkerModules = (config, callback) => {
  const getWorkerBlob = () => {
    const code = '(' + BasisWorker.toString() + ')()\n\n';
    return new Blob([code], {
      type: 'application/javascript'
    });
  };

  const wasmSupported = () => {
    try {
      if (typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function') {
        const module = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));
        if (module instanceof WebAssembly.Module) return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;
      }
    } catch (e) {}

    return false;
  };

  const sendResponse = (basisCode, module) => {
    callback(null, {
      workerUrl: URL.createObjectURL(getWorkerBlob()),
      basisUrl: URL.createObjectURL(basisCode),
      module: module,
      rgbPriority: config.rgbPriority,
      rgbaPriority: config.rgbaPriority
    });
  };

  const options = {
    responseType: 'blob',
    retry: config.maxRetries > 0,
    maxRetries: config.maxRetries
  };

  if (config.glueUrl && config.wasmUrl && wasmSupported()) {
    let basisCode = null;
    let module = null;
    http.get(config.glueUrl, options, (err, response) => {
      if (err) {
        callback(err);
      } else {
        if (module) {
          sendResponse(response, module);
        } else {
          basisCode = response;
        }
      }
    });
    const fetchPromise = fetch(config.wasmUrl);

    const compileManual = () => {
      fetchPromise.then(result => result.arrayBuffer()).then(buffer => WebAssembly.compile(buffer)).then(module_ => {
        if (basisCode) {
          sendResponse(basisCode, module_);
        } else {
          module = module_;
        }
      }).catch(err => {
        callback(err, null);
      });
    };

    if (WebAssembly.compileStreaming) {
      WebAssembly.compileStreaming(fetchPromise).then(module_ => {
        if (basisCode) {
          sendResponse(basisCode, module_);
        } else {
          module = module_;
        }
      }).catch(err => {
        compileManual();
      });
    } else {
      compileManual();
    }
  } else {
    http.get(config.fallbackUrl, options, (err, response) => {
      if (err) {
        callback(err, null);
      } else {
        sendResponse(response, null);
      }
    });
  }
};

class BasisQueue {
  constructor() {
    this.callbacks = {};
    this.queue = [];
    this.clients = [];
  }

  enqueueJob(url, data, callback, options) {
    if (this.callbacks.hasOwnProperty(url)) {
      this.callbacks[url].push(callback);
    } else {
      this.callbacks[url] = [callback];
      const job = {
        url: url,
        data: data,
        options: options
      };

      if (this.clients.length > 0) {
        this.clients.shift().run(job);
      } else {
        this.queue.push(job);
      }
    }
  }

  enqueueClient(client) {
    if (this.queue.length > 0) {
      client.run(this.queue.shift());
    } else {
      this.clients.push(client);
    }
  }

  handleResponse(url, err, data) {
    const callback = this.callbacks[url];

    if (err) {
      for (let i = 0; i < callback.length; ++i) {
        callback[i](err);
      }
    } else {
      if (data.format === PIXELFORMAT_R5_G6_B5 || data.format === PIXELFORMAT_R4_G4_B4_A4) {
        data.levels = data.levels.map(function (v) {
          return new Uint16Array(v);
        });
      } else {
        data.levels = data.levels.map(function (v) {
          return new Uint8Array(v);
        });
      }

      for (let i = 0; i < callback.length; ++i) {
        callback[i](null, data);
      }
    }

    delete this.callbacks[url];
  }

}

class BasisClient {
  constructor(queue, config, eager) {
    this.queue = queue;
    this.worker = new Worker(config.workerUrl);
    this.worker.addEventListener('message', message => {
      const data = message.data;
      this.queue.handleResponse(data.url, data.err, data.data);

      if (!this.eager) {
        this.queue.enqueueClient(this);
      }
    });
    this.worker.postMessage({
      type: 'init',
      config: config
    });
    this.eager = eager;
  }

  run(job) {
    const transfer = [];

    if (job.data instanceof ArrayBuffer) {
      transfer.push(job.data);
    }

    this.worker.postMessage({
      type: 'transcode',
      url: job.url,
      format: job.format,
      data: job.data,
      options: job.options
    }, transfer);

    if (this.eager) {
      this.queue.enqueueClient(this);
    }
  }

}

const defaultNumWorkers = 1;
const defaultRgbPriority = ['etc1', 'etc2', 'astc', 'dxt', 'pvr', 'atc'];
const defaultRgbaPriority = ['astc', 'dxt', 'etc2', 'pvr', 'atc'];
const defaultMaxRetries = 5;
const queue = new BasisQueue();
let lazyConfig = null;
let initializing = false;

function basisInitialize(config) {
  if (initializing) {
    return;
  }

  if (!config) {
    config = lazyConfig || {};
  } else if (config.lazyInit) {
    lazyConfig = config;
    return;
  }

  if (!config.glueUrl || !config.wasmUrl || !config.fallbackUrl) {
    const modules = (window.config ? window.config.wasmModules : window.PRELOAD_MODULES) || [];
    const wasmModule = modules.find(function (m) {
      return m.moduleName === 'BASIS';
    });

    if (wasmModule) {
      const urlBase = window.ASSET_PREFIX || '';

      if (!config.glueUrl) {
        config.glueUrl = urlBase + wasmModule.glueUrl;
      }

      if (!config.wasmUrl) {
        config.wasmUrl = urlBase + wasmModule.wasmUrl;
      }

      if (!config.fallbackUrl) {
        config.fallbackUrl = urlBase + wasmModule.fallbackUrl;
      }
    }
  }

  if (config.glueUrl || config.wasmUrl || config.fallbackUrl) {
    initializing = true;
    const numWorkers = Math.max(1, Math.min(16, config.numWorkers || defaultNumWorkers));
    const eagerWorkers = config.numWorkers === 1 || (config.hasOwnProperty('eagerWorkers') ? config.eagerWorkers : true);
    config.rgbPriority = config.rgbPriority || defaultRgbPriority;
    config.rgbaPriority = config.rgbaPriority || defaultRgbaPriority;
    config.maxRetries = config.hasOwnProperty('maxRetries') ? config.maxRetries : defaultMaxRetries;
    prepareWorkerModules(config, (err, clientConfig) => {
      if (err) {
        console.error(`failed to initialize basis worker: ${err}`);
      } else {
        for (let i = 0; i < numWorkers; ++i) {
          queue.enqueueClient(new BasisClient(queue, clientConfig, eagerWorkers));
        }
      }
    });
  }
}

let deviceDetails = null;

function basisTranscode(device, url, data, callback, options) {
  basisInitialize();

  if (!deviceDetails) {
    deviceDetails = {
      webgl2: device.webgl2,
      formats: getCompressionFormats(device)
    };
  }

  queue.enqueueJob(url, data, callback, {
    deviceDetails: deviceDetails,
    isGGGR: !!(options != null && options.isGGGR),
    isKTX2: !!(options != null && options.isKTX2)
  });
  return initializing;
}

class AnimClipHandler {
  constructor(app) {
    this.handlerType = "animclip";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const options = {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };

    if (url.load.startsWith('blob:')) {
      options.responseType = Http.ResponseType.JSON;
    }

    http.get(url.load, options, function (err, response) {
      if (err) {
        callback(`Error loading animation clip resource: ${url.original} [${err}]`);
      } else {
        callback(null, response);
      }
    });
  }

  open(url, data) {
    const name = data.name;
    const duration = data.duration;
    const inputs = data.inputs.map(function (input) {
      return new AnimData(1, input);
    });
    const outputs = data.outputs.map(function (output) {
      return new AnimData(output.components, output.data);
    });
    const curves = data.curves.map(function (curve) {
      return new AnimCurve([curve.path], curve.inputIndex, curve.outputIndex, curve.interpolation);
    });
    return new AnimTrack(name, duration, inputs, outputs, curves);
  }

  patch(asset, assets) {}

}

class AnimStateGraphHandler {
  constructor(app) {
    this.handlerType = "animstategraph";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const options = {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };

    if (url.load.startsWith('blob:')) {
      options.responseType = Http.ResponseType.JSON;
    }

    http.get(url.load, options, function (err, response) {
      if (err) {
        callback(`Error loading animation state graph resource: ${url.original} [${err}]`);
      } else {
        callback(null, response);
      }
    });
  }

  open(url, data) {
    return new AnimStateGraph(data);
  }

  patch(asset, assets) {}

}

class Render extends EventHandler {
  constructor() {
    super();
    this._meshes = null;
  }

  set meshes(value) {
    this.decRefMeshes();
    this._meshes = value;
    this.incRefMeshes();
    this.fire('set:meshes', value);
  }

  get meshes() {
    return this._meshes;
  }

  destroy() {
    this.meshes = null;
  }

  decRefMeshes() {
    if (this._meshes) {
      const count = this._meshes.length;

      for (let i = 0; i < count; i++) {
        const mesh = this._meshes[i];

        if (mesh) {
          mesh.decRefCount();

          if (mesh.refCount < 1) {
            mesh.destroy();
            this._meshes[i] = null;
          }
        }
      }
    }
  }

  incRefMeshes() {
    if (this._meshes) {
      const count = this._meshes.length;

      for (let i = 0; i < count; i++) {
        if (this._meshes[i]) {
          this._meshes[i].incRefCount();
        }
      }
    }
  }

}

class SkinInstanceCachedObject extends RefCountedObject {
  constructor(skin, skinInstance) {
    super();
    this.skin = skin;
    this.skinInstance = skinInstance;
  }

}

class SkinInstanceCache {
  static createCachedSkinInstance(skin, rootBone, entity) {
    let skinInst = SkinInstanceCache.getCachedSkinInstance(skin, rootBone);

    if (!skinInst) {
      skinInst = new SkinInstance(skin);
      skinInst.resolve(rootBone, entity);
      SkinInstanceCache.addCachedSkinInstance(skin, rootBone, skinInst);
    }

    return skinInst;
  }

  static getCachedSkinInstance(skin, rootBone) {
    let skinInstance = null;

    const cachedObjArray = SkinInstanceCache._skinInstanceCache.get(rootBone);

    if (cachedObjArray) {
      const cachedObj = cachedObjArray.find(element => element.skin === skin);

      if (cachedObj) {
        cachedObj.incRefCount();
        skinInstance = cachedObj.skinInstance;
      }
    }

    return skinInstance;
  }

  static addCachedSkinInstance(skin, rootBone, skinInstance) {
    let cachedObjArray = SkinInstanceCache._skinInstanceCache.get(rootBone);

    if (!cachedObjArray) {
      cachedObjArray = [];

      SkinInstanceCache._skinInstanceCache.set(rootBone, cachedObjArray);
    }

    let cachedObj = cachedObjArray.find(element => element.skin === skin);

    if (!cachedObj) {
      cachedObj = new SkinInstanceCachedObject(skin, skinInstance);
      cachedObjArray.push(cachedObj);
    }

    cachedObj.incRefCount();
  }

  static removeCachedSkinInstance(skinInstance) {
    if (skinInstance) {
      const rootBone = skinInstance.rootBone;

      if (rootBone) {
        const cachedObjArray = SkinInstanceCache._skinInstanceCache.get(rootBone);

        if (cachedObjArray) {
          const cachedObjIndex = cachedObjArray.findIndex(element => element.skinInstance === skinInstance);

          if (cachedObjIndex >= 0) {
            const cachedObj = cachedObjArray[cachedObjIndex];
            cachedObj.decRefCount();

            if (cachedObj.refCount === 0) {
              cachedObjArray.splice(cachedObjIndex, 1);

              if (!cachedObjArray.length) {
                SkinInstanceCache._skinInstanceCache.delete(rootBone);
              }

              if (skinInstance) {
                skinInstance.destroy();
                cachedObj.skinInstance = null;
              }
            }
          }
        }
      }
    }
  }

}

SkinInstanceCache._skinInstanceCache = new Map();

class GlbContainerResource {
  constructor(data, asset, assets, defaultMaterial) {
    const createAsset = function createAsset(type, resource, index) {
      const subAsset = GlbContainerResource.createAsset(asset.name, type, resource, index);
      assets.add(subAsset);
      return subAsset;
    };

    const renders = [];

    for (let i = 0; i < data.renders.length; ++i) {
      renders.push(createAsset('render', data.renders[i], i));
    }

    const materials = [];

    for (let i = 0; i < data.materials.length; ++i) {
      materials.push(createAsset('material', data.materials[i], i));
    }

    const animations = [];

    for (let i = 0; i < data.animations.length; ++i) {
      animations.push(createAsset('animation', data.animations[i], i));
    }

    this.data = data;
    this._model = null;
    this._assetName = asset.name;
    this._assets = assets;
    this._defaultMaterial = defaultMaterial;
    this.renders = renders;
    this.materials = materials;
    this.textures = data.textures;
    this.animations = animations;
  }

  get model() {
    if (!this._model) {
      const model = GlbContainerResource.createModel(this.data, this._defaultMaterial);
      const modelAsset = GlbContainerResource.createAsset(this._assetName, 'model', model, 0);

      this._assets.add(modelAsset);

      this._model = modelAsset;
    }

    return this._model;
  }

  static createAsset(assetName, type, resource, index) {
    const subAsset = new Asset(assetName + '/' + type + '/' + index, type, {
      url: ''
    });
    subAsset.resource = resource;
    subAsset.loaded = true;
    return subAsset;
  }

  instantiateModelEntity(options) {
    const entity = new Entity();
    entity.addComponent('model', Object.assign({
      type: 'asset',
      asset: this.model
    }, options));
    return entity;
  }

  instantiateRenderEntity(options) {
    const defaultMaterial = this._defaultMaterial;
    const skinnedMeshInstances = [];

    const createMeshInstance = function createMeshInstance(root, entity, mesh, materials, meshDefaultMaterials, skins, gltfNode) {
      const materialIndex = meshDefaultMaterials[mesh.id];
      const material = materialIndex === undefined ? defaultMaterial : materials[materialIndex];
      const meshInstance = new MeshInstance(mesh, material);

      if (mesh.morph) {
        meshInstance.morphInstance = new MorphInstance(mesh.morph);
      }

      if (gltfNode.hasOwnProperty('skin')) {
        skinnedMeshInstances.push({
          meshInstance: meshInstance,
          rootBone: root,
          entity: entity
        });
      }

      return meshInstance;
    };

    const cloneHierarchy = (root, node, glb) => {
      const entity = new Entity();

      node._cloneInternal(entity);

      if (!root) root = entity;
      let attachedMi = null;
      let renderAsset = null;

      for (let i = 0; i < glb.nodes.length; i++) {
        const glbNode = glb.nodes[i];

        if (glbNode === node) {
          const gltfNode = glb.gltf.nodes[i];

          if (gltfNode.hasOwnProperty('mesh')) {
            const meshGroup = glb.renders[gltfNode.mesh].meshes;
            renderAsset = this.renders[gltfNode.mesh];

            for (var mi = 0; mi < meshGroup.length; mi++) {
              const mesh = meshGroup[mi];

              if (mesh) {
                const cloneMi = createMeshInstance(root, entity, mesh, glb.materials, glb.meshDefaultMaterials, glb.skins, gltfNode);

                if (!attachedMi) {
                  attachedMi = [];
                }

                attachedMi.push(cloneMi);
              }
            }
          }

          if (glb.lights) {
            const lightEntity = glb.lights.get(gltfNode);

            if (lightEntity) {
              entity.addChild(lightEntity.clone());
            }
          }

          if (glb.cameras) {
            const cameraEntity = glb.cameras.get(gltfNode);

            if (cameraEntity) {
              cameraEntity.camera.system.cloneComponent(cameraEntity, entity);
            }
          }
        }
      }

      if (attachedMi) {
        entity.addComponent('render', Object.assign({
          type: 'asset',
          meshInstances: attachedMi,
          rootBone: root
        }, options));
        entity.render.assignAsset(renderAsset);
      }

      const children = node.children;

      for (let i = 0; i < children.length; i++) {
        const childClone = cloneHierarchy(root, children[i], glb);
        entity.addChild(childClone);
      }

      return entity;
    };

    const sceneClones = [];

    for (const scene of this.data.scenes) {
      sceneClones.push(cloneHierarchy(null, scene, this.data));
    }

    skinnedMeshInstances.forEach(data => {
      data.meshInstance.skinInstance = SkinInstanceCache.createCachedSkinInstance(data.meshInstance.mesh.skin, data.rootBone, data.entity);
    });
    return GlbContainerResource.createSceneHierarchy(sceneClones, 'Entity');
  }

  getMaterialVariants() {
    return this.data.variants ? Object.keys(this.data.variants) : [];
  }

  applyMaterialVariant(entity, name) {
    const variant = name ? this.data.variants[name] : null;

    if (variant === undefined) {
      return;
    }

    const renders = entity.findComponents("render");

    for (let i = 0; i < renders.length; i++) {
      const renderComponent = renders[i];

      this._applyMaterialVariant(variant, renderComponent.meshInstances);
    }
  }

  applyMaterialVariantInstances(instances, name) {
    const variant = name ? this.data.variants[name] : null;

    if (variant === undefined) {
      return;
    }

    this._applyMaterialVariant(variant, instances);
  }

  _applyMaterialVariant(variant, instances) {
    instances.forEach(instance => {
      if (variant === null) {
        instance.material = this._defaultMaterial;
      } else {
        const meshVariants = this.data.meshVariants[instance.mesh.id];

        if (meshVariants) {
          instance.material = this.data.materials[meshVariants[variant]];
        }
      }
    });
  }

  static createSceneHierarchy(sceneNodes, nodeType) {
    let root = null;

    if (sceneNodes.length === 1) {
      root = sceneNodes[0];
    } else {
      root = new nodeType('SceneGroup');

      for (const scene of sceneNodes) {
        root.addChild(scene);
      }
    }

    return root;
  }

  static createModel(glb, defaultMaterial) {
    const createMeshInstance = function createMeshInstance(model, mesh, skins, skinInstances, materials, node, gltfNode) {
      const materialIndex = glb.meshDefaultMaterials[mesh.id];
      const material = materialIndex === undefined ? defaultMaterial : materials[materialIndex];
      const meshInstance = new MeshInstance(mesh, material, node);

      if (mesh.morph) {
        const morphInstance = new MorphInstance(mesh.morph);
        meshInstance.morphInstance = morphInstance;
        model.morphInstances.push(morphInstance);
      }

      if (gltfNode.hasOwnProperty('skin')) {
        const skinIndex = gltfNode.skin;
        const skin = skins[skinIndex];
        mesh.skin = skin;
        const skinInstance = skinInstances[skinIndex];
        meshInstance.skinInstance = skinInstance;
        model.skinInstances.push(skinInstance);
      }

      model.meshInstances.push(meshInstance);
    };

    const model = new Model();
    const skinInstances = [];

    for (const skin of glb.skins) {
      const skinInstance = new SkinInstance(skin);
      skinInstance.bones = skin.bones;
      skinInstances.push(skinInstance);
    }

    model.graph = GlbContainerResource.createSceneHierarchy(glb.scenes, 'GraphNode');

    for (let i = 0; i < glb.nodes.length; i++) {
      const node = glb.nodes[i];

      if (node.root === model.graph) {
        const gltfNode = glb.gltf.nodes[i];

        if (gltfNode.hasOwnProperty('mesh')) {
          const meshGroup = glb.renders[gltfNode.mesh].meshes;

          for (var mi = 0; mi < meshGroup.length; mi++) {
            const mesh = meshGroup[mi];

            if (mesh) {
              createMeshInstance(model, mesh, glb.skins, skinInstances, glb.materials, node, gltfNode);
            }
          }
        }
      }
    }

    return model;
  }

  destroy() {
    const registry = this._assets;

    const destroyAsset = function destroyAsset(asset) {
      registry.remove(asset);
      asset.unload();
    };

    const destroyAssets = function destroyAssets(assets) {
      assets.forEach(function (asset) {
        destroyAsset(asset);
      });
    };

    if (this.animations) {
      destroyAssets(this.animations);
      this.animations = null;
    }

    if (this.textures) {
      destroyAssets(this.textures);
      this.textures = null;
    }

    if (this.materials) {
      destroyAssets(this.materials);
      this.materials = null;
    }

    if (this.renders) {
      destroyAssets(this.renders);
      this.renders = null;
    }

    if (this._model) {
      destroyAsset(this._model);
      this._model = null;
    }

    this.data = null;
    this.assets = null;
  }

}

let dracoDecoderInstance = null;

const getGlobalDracoDecoderModule = () => {
  return typeof window !== 'undefined' && window.DracoDecoderModule;
};

class GlbResources {
  constructor(gltf) {
    this.gltf = gltf;
    this.nodes = null;
    this.scenes = null;
    this.animations = null;
    this.textures = null;
    this.materials = null;
    this.variants = null;
    this.meshVariants = null;
    this.meshDefaultMaterials = null;
    this.renders = null;
    this.skins = null;
    this.lights = null;
    this.cameras = null;
  }

  destroy() {
    if (this.renders) {
      this.renders.forEach(render => {
        render.meshes = null;
      });
    }
  }

}

const isDataURI = function isDataURI(uri) {
  return /^data:.*,.*$/i.test(uri);
};

const getDataURIMimeType = function getDataURIMimeType(uri) {
  return uri.substring(uri.indexOf(':') + 1, uri.indexOf(';'));
};

const getNumComponents = function getNumComponents(accessorType) {
  switch (accessorType) {
    case 'SCALAR':
      return 1;

    case 'VEC2':
      return 2;

    case 'VEC3':
      return 3;

    case 'VEC4':
      return 4;

    case 'MAT2':
      return 4;

    case 'MAT3':
      return 9;

    case 'MAT4':
      return 16;

    default:
      return 3;
  }
};

const getComponentType = function getComponentType(componentType) {
  switch (componentType) {
    case 5120:
      return TYPE_INT8;

    case 5121:
      return TYPE_UINT8;

    case 5122:
      return TYPE_INT16;

    case 5123:
      return TYPE_UINT16;

    case 5124:
      return TYPE_INT32;

    case 5125:
      return TYPE_UINT32;

    case 5126:
      return TYPE_FLOAT32;

    default:
      return 0;
  }
};

const getComponentSizeInBytes = function getComponentSizeInBytes(componentType) {
  switch (componentType) {
    case 5120:
      return 1;

    case 5121:
      return 1;

    case 5122:
      return 2;

    case 5123:
      return 2;

    case 5124:
      return 4;

    case 5125:
      return 4;

    case 5126:
      return 4;

    default:
      return 0;
  }
};

const getComponentDataType = function getComponentDataType(componentType) {
  switch (componentType) {
    case 5120:
      return Int8Array;

    case 5121:
      return Uint8Array;

    case 5122:
      return Int16Array;

    case 5123:
      return Uint16Array;

    case 5124:
      return Int32Array;

    case 5125:
      return Uint32Array;

    case 5126:
      return Float32Array;

    default:
      return null;
  }
};

const gltfToEngineSemanticMap = {
  'POSITION': SEMANTIC_POSITION,
  'NORMAL': SEMANTIC_NORMAL,
  'TANGENT': SEMANTIC_TANGENT,
  'COLOR_0': SEMANTIC_COLOR,
  'JOINTS_0': SEMANTIC_BLENDINDICES,
  'WEIGHTS_0': SEMANTIC_BLENDWEIGHT,
  'TEXCOORD_0': SEMANTIC_TEXCOORD0,
  'TEXCOORD_1': SEMANTIC_TEXCOORD1,
  'TEXCOORD_2': SEMANTIC_TEXCOORD2,
  'TEXCOORD_3': SEMANTIC_TEXCOORD3,
  'TEXCOORD_4': SEMANTIC_TEXCOORD4,
  'TEXCOORD_5': SEMANTIC_TEXCOORD5,
  'TEXCOORD_6': SEMANTIC_TEXCOORD6,
  'TEXCOORD_7': SEMANTIC_TEXCOORD7
};

const getDequantizeFunc = srcType => {
  switch (srcType) {
    case TYPE_INT8:
      return x => Math.max(x / 127.0, -1.0);

    case TYPE_UINT8:
      return x => x / 255.0;

    case TYPE_INT16:
      return x => Math.max(x / 32767.0, -1.0);

    case TYPE_UINT16:
      return x => x / 65535.0;

    default:
      return x => x;
  }
};

const dequantizeArray = function dequantizeArray(dstArray, srcArray, srcType) {
  const convFunc = getDequantizeFunc(srcType);
  const len = srcArray.length;

  for (let i = 0; i < len; ++i) {
    dstArray[i] = convFunc(srcArray[i]);
  }

  return dstArray;
};

const getAccessorData = function getAccessorData(gltfAccessor, bufferViews, flatten = false) {
  const numComponents = getNumComponents(gltfAccessor.type);
  const dataType = getComponentDataType(gltfAccessor.componentType);

  if (!dataType) {
    return null;
  }

  const bufferView = bufferViews[gltfAccessor.bufferView];
  let result;

  if (gltfAccessor.sparse) {
    const sparse = gltfAccessor.sparse;
    const indicesAccessor = {
      count: sparse.count,
      type: 'SCALAR'
    };
    const indices = getAccessorData(Object.assign(indicesAccessor, sparse.indices), bufferViews, true);
    const valuesAccessor = {
      count: sparse.count,
      type: gltfAccessor.scalar,
      componentType: gltfAccessor.componentType
    };
    const values = getAccessorData(Object.assign(valuesAccessor, sparse.values), bufferViews, true);

    if (gltfAccessor.hasOwnProperty('bufferView')) {
      const baseAccessor = {
        bufferView: gltfAccessor.bufferView,
        byteOffset: gltfAccessor.byteOffset,
        componentType: gltfAccessor.componentType,
        count: gltfAccessor.count,
        type: gltfAccessor.type
      };
      result = getAccessorData(baseAccessor, bufferViews, true).slice();
    } else {
      result = new dataType(gltfAccessor.count * numComponents);
    }

    for (let i = 0; i < sparse.count; ++i) {
      const targetIndex = indices[i];

      for (let j = 0; j < numComponents; ++j) {
        result[targetIndex * numComponents + j] = values[i * numComponents + j];
      }
    }
  } else if (flatten && bufferView.hasOwnProperty('byteStride')) {
    const bytesPerElement = numComponents * dataType.BYTES_PER_ELEMENT;
    const storage = new ArrayBuffer(gltfAccessor.count * bytesPerElement);
    const tmpArray = new Uint8Array(storage);
    let dstOffset = 0;

    for (let i = 0; i < gltfAccessor.count; ++i) {
      let srcOffset = (gltfAccessor.byteOffset || 0) + i * bufferView.byteStride;

      for (let b = 0; b < bytesPerElement; ++b) {
        tmpArray[dstOffset++] = bufferView[srcOffset++];
      }
    }

    result = new dataType(storage);
  } else {
    result = new dataType(bufferView.buffer, bufferView.byteOffset + (gltfAccessor.byteOffset || 0), gltfAccessor.count * numComponents);
  }

  return result;
};

const getAccessorDataFloat32 = function getAccessorDataFloat32(gltfAccessor, bufferViews) {
  const data = getAccessorData(gltfAccessor, bufferViews, true);

  if (data instanceof Float32Array || !gltfAccessor.normalized) {
    return data;
  }

  const float32Data = new Float32Array(data.length);
  dequantizeArray(float32Data, data, getComponentType(gltfAccessor.componentType));
  return float32Data;
};

const getAccessorBoundingBox = function getAccessorBoundingBox(gltfAccessor) {
  let min = gltfAccessor.min;
  let max = gltfAccessor.max;

  if (!min || !max) {
    return null;
  }

  if (gltfAccessor.normalized) {
    const ctype = getComponentType(gltfAccessor.componentType);
    min = dequantizeArray([], min, ctype);
    max = dequantizeArray([], max, ctype);
  }

  return new BoundingBox(new Vec3((max[0] + min[0]) * 0.5, (max[1] + min[1]) * 0.5, (max[2] + min[2]) * 0.5), new Vec3((max[0] - min[0]) * 0.5, (max[1] - min[1]) * 0.5, (max[2] - min[2]) * 0.5));
};

const getPrimitiveType = function getPrimitiveType(primitive) {
  if (!primitive.hasOwnProperty('mode')) {
    return PRIMITIVE_TRIANGLES;
  }

  switch (primitive.mode) {
    case 0:
      return PRIMITIVE_POINTS;

    case 1:
      return PRIMITIVE_LINES;

    case 2:
      return PRIMITIVE_LINELOOP;

    case 3:
      return PRIMITIVE_LINESTRIP;

    case 4:
      return PRIMITIVE_TRIANGLES;

    case 5:
      return PRIMITIVE_TRISTRIP;

    case 6:
      return PRIMITIVE_TRIFAN;

    default:
      return PRIMITIVE_TRIANGLES;
  }
};

const generateIndices = function generateIndices(numVertices) {
  const dummyIndices = new Uint16Array(numVertices);

  for (let i = 0; i < numVertices; i++) {
    dummyIndices[i] = i;
  }

  return dummyIndices;
};

const generateNormals = function generateNormals(sourceDesc, indices) {
  const p = sourceDesc[SEMANTIC_POSITION];

  if (!p || p.components !== 3) {
    return;
  }

  let positions;

  if (p.size !== p.stride) {
    const srcStride = p.stride / typedArrayTypesByteSize[p.type];
    const src = new typedArrayTypes[p.type](p.buffer, p.offset, p.count * srcStride);
    positions = new typedArrayTypes[p.type](p.count * 3);

    for (let i = 0; i < p.count; ++i) {
      positions[i * 3 + 0] = src[i * srcStride + 0];
      positions[i * 3 + 1] = src[i * srcStride + 1];
      positions[i * 3 + 2] = src[i * srcStride + 2];
    }
  } else {
    positions = new typedArrayTypes[p.type](p.buffer, p.offset, p.count * 3);
  }

  const numVertices = p.count;

  if (!indices) {
    indices = generateIndices(numVertices);
  }

  const normalsTemp = calculateNormals(positions, indices);
  const normals = new Float32Array(normalsTemp.length);
  normals.set(normalsTemp);
  sourceDesc[SEMANTIC_NORMAL] = {
    buffer: normals.buffer,
    size: 12,
    offset: 0,
    stride: 12,
    count: numVertices,
    components: 3,
    type: TYPE_FLOAT32
  };
};

const flipTexCoordVs = function flipTexCoordVs(vertexBuffer) {
  let i, j;
  const floatOffsets = [];
  const shortOffsets = [];
  const byteOffsets = [];

  for (i = 0; i < vertexBuffer.format.elements.length; ++i) {
    const element = vertexBuffer.format.elements[i];

    if (element.name === SEMANTIC_TEXCOORD0 || element.name === SEMANTIC_TEXCOORD1) {
      switch (element.dataType) {
        case TYPE_FLOAT32:
          floatOffsets.push({
            offset: element.offset / 4 + 1,
            stride: element.stride / 4
          });
          break;

        case TYPE_UINT16:
          shortOffsets.push({
            offset: element.offset / 2 + 1,
            stride: element.stride / 2
          });
          break;

        case TYPE_UINT8:
          byteOffsets.push({
            offset: element.offset + 1,
            stride: element.stride
          });
          break;
      }
    }
  }

  const flip = function flip(offsets, type, one) {
    const typedArray = new type(vertexBuffer.storage);

    for (i = 0; i < offsets.length; ++i) {
      let index = offsets[i].offset;
      const stride = offsets[i].stride;

      for (j = 0; j < vertexBuffer.numVertices; ++j) {
        typedArray[index] = one - typedArray[index];
        index += stride;
      }
    }
  };

  if (floatOffsets.length > 0) {
    flip(floatOffsets, Float32Array, 1.0);
  }

  if (shortOffsets.length > 0) {
    flip(shortOffsets, Uint16Array, 65535);
  }

  if (byteOffsets.length > 0) {
    flip(byteOffsets, Uint8Array, 255);
  }
};

const cloneTexture = function cloneTexture(texture) {
  const shallowCopyLevels = function shallowCopyLevels(texture) {
    const result = [];

    for (let mip = 0; mip < texture._levels.length; ++mip) {
      let level = [];

      if (texture.cubemap) {
        for (let face = 0; face < 6; ++face) {
          level.push(texture._levels[mip][face]);
        }
      } else {
        level = texture._levels[mip];
      }

      result.push(level);
    }

    return result;
  };

  const result = new Texture(texture.device, texture);
  result._levels = shallowCopyLevels(texture);
  return result;
};

const cloneTextureAsset = function cloneTextureAsset(src) {
  const result = new Asset(src.name + '_clone', src.type, src.file, src.data, src.options);
  result.loaded = true;
  result.resource = cloneTexture(src.resource);
  src.registry.add(result);
  return result;
};

const createVertexBufferInternal = function createVertexBufferInternal(device, sourceDesc, flipV) {
  const positionDesc = sourceDesc[SEMANTIC_POSITION];

  if (!positionDesc) {
    return null;
  }

  const numVertices = positionDesc.count;
  const vertexDesc = [];

  for (const semantic in sourceDesc) {
    if (sourceDesc.hasOwnProperty(semantic)) {
      vertexDesc.push({
        semantic: semantic,
        components: sourceDesc[semantic].components,
        type: sourceDesc[semantic].type,
        normalize: !!sourceDesc[semantic].normalize
      });
    }
  }

  const elementOrder = [SEMANTIC_POSITION, SEMANTIC_NORMAL, SEMANTIC_TANGENT, SEMANTIC_COLOR, SEMANTIC_BLENDINDICES, SEMANTIC_BLENDWEIGHT, SEMANTIC_TEXCOORD0, SEMANTIC_TEXCOORD1];
  vertexDesc.sort(function (lhs, rhs) {
    const lhsOrder = elementOrder.indexOf(lhs.semantic);
    const rhsOrder = elementOrder.indexOf(rhs.semantic);
    return lhsOrder < rhsOrder ? -1 : rhsOrder < lhsOrder ? 1 : 0;
  });
  let i, j, k;
  let source, target, sourceOffset;
  const vertexFormat = new VertexFormat(device, vertexDesc);
  let isCorrectlyInterleaved = true;

  for (i = 0; i < vertexFormat.elements.length; ++i) {
    target = vertexFormat.elements[i];
    source = sourceDesc[target.name];
    sourceOffset = source.offset - positionDesc.offset;

    if (source.buffer !== positionDesc.buffer || source.stride !== target.stride || source.size !== target.size || sourceOffset !== target.offset) {
      isCorrectlyInterleaved = false;
      break;
    }
  }

  const vertexBuffer = new VertexBuffer(device, vertexFormat, numVertices, BUFFER_STATIC);
  const vertexData = vertexBuffer.lock();
  const targetArray = new Uint32Array(vertexData);
  let sourceArray;

  if (isCorrectlyInterleaved) {
    sourceArray = new Uint32Array(positionDesc.buffer, positionDesc.offset, numVertices * vertexBuffer.format.size / 4);
    targetArray.set(sourceArray);
  } else {
    let targetStride, sourceStride;

    for (i = 0; i < vertexBuffer.format.elements.length; ++i) {
      target = vertexBuffer.format.elements[i];
      targetStride = target.stride / 4;
      source = sourceDesc[target.name];
      sourceStride = source.stride / 4;
      sourceArray = new Uint32Array(source.buffer, source.offset, (source.count - 1) * sourceStride + (source.size + 3) / 4);
      let src = 0;
      let dst = target.offset / 4;
      const kend = Math.floor((source.size + 3) / 4);

      for (j = 0; j < numVertices; ++j) {
        for (k = 0; k < kend; ++k) {
          targetArray[dst + k] = sourceArray[src + k];
        }

        src += sourceStride;
        dst += targetStride;
      }
    }
  }

  if (flipV) {
    flipTexCoordVs(vertexBuffer);
  }

  vertexBuffer.unlock();
  return vertexBuffer;
};

const createVertexBuffer = function createVertexBuffer(device, attributes, indices, accessors, bufferViews, flipV, vertexBufferDict) {
  const useAttributes = {};
  const attribIds = [];

  for (const attrib in attributes) {
    if (attributes.hasOwnProperty(attrib) && gltfToEngineSemanticMap.hasOwnProperty(attrib)) {
      useAttributes[attrib] = attributes[attrib];
      attribIds.push(attrib + ':' + attributes[attrib]);
    }
  }

  attribIds.sort();
  const vbKey = attribIds.join();
  let vb = vertexBufferDict[vbKey];

  if (!vb) {
    const sourceDesc = {};

    for (const attrib in useAttributes) {
      const accessor = accessors[attributes[attrib]];
      const accessorData = getAccessorData(accessor, bufferViews);
      const bufferView = bufferViews[accessor.bufferView];
      const semantic = gltfToEngineSemanticMap[attrib];
      const size = getNumComponents(accessor.type) * getComponentSizeInBytes(accessor.componentType);
      const stride = bufferView.hasOwnProperty('byteStride') ? bufferView.byteStride : size;
      sourceDesc[semantic] = {
        buffer: accessorData.buffer,
        size: size,
        offset: accessorData.byteOffset,
        stride: stride,
        count: accessor.count,
        components: getNumComponents(accessor.type),
        type: getComponentType(accessor.componentType),
        normalize: accessor.normalized
      };
    }

    if (!sourceDesc.hasOwnProperty(SEMANTIC_NORMAL)) {
      generateNormals(sourceDesc, indices);
    }

    vb = createVertexBufferInternal(device, sourceDesc, flipV);
    vertexBufferDict[vbKey] = vb;
  }

  return vb;
};

const createVertexBufferDraco = function createVertexBufferDraco(device, outputGeometry, extDraco, decoder, decoderModule, indices, flipV) {
  const numPoints = outputGeometry.num_points();

  const extractDracoAttributeInfo = function extractDracoAttributeInfo(uniqueId, semantic) {
    const attribute = decoder.GetAttributeByUniqueId(outputGeometry, uniqueId);
    const numValues = numPoints * attribute.num_components();
    const dracoFormat = attribute.data_type();
    let ptr, values, componentSizeInBytes, storageType;

    switch (dracoFormat) {
      case decoderModule.DT_UINT8:
        storageType = TYPE_UINT8;
        componentSizeInBytes = 1;
        ptr = decoderModule._malloc(numValues * componentSizeInBytes);
        decoder.GetAttributeDataArrayForAllPoints(outputGeometry, attribute, decoderModule.DT_UINT8, numValues * componentSizeInBytes, ptr);
        values = new Uint8Array(decoderModule.HEAPU8.buffer, ptr, numValues).slice();
        break;

      case decoderModule.DT_UINT16:
        storageType = TYPE_UINT16;
        componentSizeInBytes = 2;
        ptr = decoderModule._malloc(numValues * componentSizeInBytes);
        decoder.GetAttributeDataArrayForAllPoints(outputGeometry, attribute, decoderModule.DT_UINT16, numValues * componentSizeInBytes, ptr);
        values = new Uint16Array(decoderModule.HEAPU16.buffer, ptr, numValues).slice();
        break;

      case decoderModule.DT_FLOAT32:
      default:
        storageType = TYPE_FLOAT32;
        componentSizeInBytes = 4;
        ptr = decoderModule._malloc(numValues * componentSizeInBytes);
        decoder.GetAttributeDataArrayForAllPoints(outputGeometry, attribute, decoderModule.DT_FLOAT32, numValues * componentSizeInBytes, ptr);
        values = new Float32Array(decoderModule.HEAPF32.buffer, ptr, numValues).slice();
        break;
    }

    decoderModule._free(ptr);

    return {
      values: values,
      numComponents: attribute.num_components(),
      componentSizeInBytes: componentSizeInBytes,
      storageType: storageType,
      normalized: semantic === SEMANTIC_COLOR && storageType === TYPE_UINT8 ? true : attribute.normalized()
    };
  };

  const sourceDesc = {};
  const attributes = extDraco.attributes;

  for (const attrib in attributes) {
    if (attributes.hasOwnProperty(attrib) && gltfToEngineSemanticMap.hasOwnProperty(attrib)) {
      const semantic = gltfToEngineSemanticMap[attrib];
      const attributeInfo = extractDracoAttributeInfo(attributes[attrib], semantic);
      const size = attributeInfo.numComponents * attributeInfo.componentSizeInBytes;
      sourceDesc[semantic] = {
        values: attributeInfo.values,
        buffer: attributeInfo.values.buffer,
        size: size,
        offset: 0,
        stride: size,
        count: numPoints,
        components: attributeInfo.numComponents,
        type: attributeInfo.storageType,
        normalize: attributeInfo.normalized
      };
    }
  }

  if (!sourceDesc.hasOwnProperty(SEMANTIC_NORMAL)) {
    generateNormals(sourceDesc, indices);
  }

  return createVertexBufferInternal(device, sourceDesc, flipV);
};

const createSkin = function createSkin(device, gltfSkin, accessors, bufferViews, nodes, glbSkins) {
  let i, j, bindMatrix;
  const joints = gltfSkin.joints;
  const numJoints = joints.length;
  const ibp = [];

  if (gltfSkin.hasOwnProperty('inverseBindMatrices')) {
    const inverseBindMatrices = gltfSkin.inverseBindMatrices;
    const ibmData = getAccessorData(accessors[inverseBindMatrices], bufferViews, true);
    const ibmValues = [];

    for (i = 0; i < numJoints; i++) {
      for (j = 0; j < 16; j++) {
        ibmValues[j] = ibmData[i * 16 + j];
      }

      bindMatrix = new Mat4();
      bindMatrix.set(ibmValues);
      ibp.push(bindMatrix);
    }
  } else {
    for (i = 0; i < numJoints; i++) {
      bindMatrix = new Mat4();
      ibp.push(bindMatrix);
    }
  }

  const boneNames = [];

  for (i = 0; i < numJoints; i++) {
    boneNames[i] = nodes[joints[i]].name;
  }

  const key = boneNames.join('#');
  let skin = glbSkins.get(key);

  if (!skin) {
    skin = new Skin(device, ibp, boneNames);
    glbSkins.set(key, skin);
  }

  return skin;
};

const tempMat = new Mat4();
const tempVec = new Vec3();

const createMesh = function createMesh(device, gltfMesh, accessors, bufferViews, callback, flipV, vertexBufferDict, meshVariants, meshDefaultMaterials, assetOptions) {
  const meshes = [];
  gltfMesh.primitives.forEach(function (primitive) {
    let primitiveType, vertexBuffer, numIndices;
    let indices = null;
    let canUseMorph = true;

    if (primitive.hasOwnProperty('extensions')) {
      const extensions = primitive.extensions;

      if (extensions.hasOwnProperty('KHR_draco_mesh_compression')) {
        const decoderModule = dracoDecoderInstance || getGlobalDracoDecoderModule();

        if (decoderModule) {
          const extDraco = extensions.KHR_draco_mesh_compression;

          if (extDraco.hasOwnProperty('attributes')) {
            const uint8Buffer = bufferViews[extDraco.bufferView];
            const buffer = new decoderModule.DecoderBuffer();
            buffer.Init(uint8Buffer, uint8Buffer.length);
            const decoder = new decoderModule.Decoder();
            const geometryType = decoder.GetEncodedGeometryType(buffer);
            let outputGeometry, status;

            switch (geometryType) {
              case decoderModule.POINT_CLOUD:
                primitiveType = PRIMITIVE_POINTS;
                outputGeometry = new decoderModule.PointCloud();
                status = decoder.DecodeBufferToPointCloud(buffer, outputGeometry);
                break;

              case decoderModule.TRIANGULAR_MESH:
                primitiveType = PRIMITIVE_TRIANGLES;
                outputGeometry = new decoderModule.Mesh();
                status = decoder.DecodeBufferToMesh(buffer, outputGeometry);
                break;

              case decoderModule.INVALID_GEOMETRY_TYPE:
            }

            if (!status || !status.ok() || outputGeometry.ptr === 0) {
              callback('Failed to decode draco compressed asset: ' + (status ? status.error_msg() : 'Mesh asset - invalid draco compressed geometry type: ' + geometryType));
              return;
            }

            const numFaces = outputGeometry.num_faces();

            if (geometryType === decoderModule.TRIANGULAR_MESH) {
              const bit32 = outputGeometry.num_points() > 65535;
              numIndices = numFaces * 3;
              const dataSize = numIndices * (bit32 ? 4 : 2);

              const ptr = decoderModule._malloc(dataSize);

              if (bit32) {
                decoder.GetTrianglesUInt32Array(outputGeometry, dataSize, ptr);
                indices = new Uint32Array(decoderModule.HEAPU32.buffer, ptr, numIndices).slice();
              } else {
                decoder.GetTrianglesUInt16Array(outputGeometry, dataSize, ptr);
                indices = new Uint16Array(decoderModule.HEAPU16.buffer, ptr, numIndices).slice();
              }

              decoderModule._free(ptr);
            }

            vertexBuffer = createVertexBufferDraco(device, outputGeometry, extDraco, decoder, decoderModule, indices, flipV);
            decoderModule.destroy(outputGeometry);
            decoderModule.destroy(decoder);
            decoderModule.destroy(buffer);
            canUseMorph = false;
          }
        }
      }
    }

    if (!vertexBuffer) {
      indices = primitive.hasOwnProperty('indices') ? getAccessorData(accessors[primitive.indices], bufferViews, true) : null;
      vertexBuffer = createVertexBuffer(device, primitive.attributes, indices, accessors, bufferViews, flipV, vertexBufferDict);
      primitiveType = getPrimitiveType(primitive);
    }

    let mesh = null;

    if (vertexBuffer) {
      mesh = new Mesh(device);
      mesh.vertexBuffer = vertexBuffer;
      mesh.primitive[0].type = primitiveType;
      mesh.primitive[0].base = 0;
      mesh.primitive[0].indexed = indices !== null;

      if (indices !== null) {
        let indexFormat;

        if (indices instanceof Uint8Array) {
          indexFormat = INDEXFORMAT_UINT8;
        } else if (indices instanceof Uint16Array) {
          indexFormat = INDEXFORMAT_UINT16;
        } else {
          indexFormat = INDEXFORMAT_UINT32;
        }

        if (indexFormat === INDEXFORMAT_UINT32 && !device.extUintElement) {
          indexFormat = INDEXFORMAT_UINT16;
          indices = new Uint16Array(indices);
        }

        const indexBuffer = new IndexBuffer(device, indexFormat, indices.length, BUFFER_STATIC, indices);
        mesh.indexBuffer[0] = indexBuffer;
        mesh.primitive[0].count = indices.length;
      } else {
        mesh.primitive[0].count = vertexBuffer.numVertices;
      }

      if (primitive.hasOwnProperty("extensions") && primitive.extensions.hasOwnProperty("KHR_materials_variants")) {
        const variants = primitive.extensions.KHR_materials_variants;
        const tempMapping = {};
        variants.mappings.forEach(mapping => {
          mapping.variants.forEach(variant => {
            tempMapping[variant] = mapping.material;
          });
        });
        meshVariants[mesh.id] = tempMapping;
      }

      meshDefaultMaterials[mesh.id] = primitive.material;
      let accessor = accessors[primitive.attributes.POSITION];
      mesh.aabb = getAccessorBoundingBox(accessor);

      if (canUseMorph && primitive.hasOwnProperty('targets')) {
        const targets = [];
        primitive.targets.forEach(function (target, index) {
          const options = {};

          if (target.hasOwnProperty('POSITION')) {
            accessor = accessors[target.POSITION];
            options.deltaPositions = getAccessorDataFloat32(accessor, bufferViews);
            options.deltaPositionsType = TYPE_FLOAT32;
            options.aabb = getAccessorBoundingBox(accessor);
          }

          if (target.hasOwnProperty('NORMAL')) {
            accessor = accessors[target.NORMAL];
            options.deltaNormals = getAccessorDataFloat32(accessor, bufferViews);
            options.deltaNormalsType = TYPE_FLOAT32;
          }

          if (gltfMesh.hasOwnProperty('extras') && gltfMesh.extras.hasOwnProperty('targetNames')) {
            options.name = gltfMesh.extras.targetNames[index];
          } else {
            options.name = index.toString(10);
          }

          if (gltfMesh.hasOwnProperty('weights')) {
            options.defaultWeight = gltfMesh.weights[index];
          }

          options.preserveData = assetOptions.morphPreserveData;
          targets.push(new MorphTarget(options));
        });
        mesh.morph = new Morph(targets, device);
      }
    }

    meshes.push(mesh);
  });
  return meshes;
};

const extractTextureTransform = function extractTextureTransform(source, material, maps) {
  var _source$extensions;

  let map;
  const texCoord = source.texCoord;

  if (texCoord) {
    for (map = 0; map < maps.length; ++map) {
      material[maps[map] + 'MapUv'] = texCoord;
    }
  }

  const zeros = [0, 0];
  const ones = [1, 1];
  const textureTransform = (_source$extensions = source.extensions) == null ? void 0 : _source$extensions.KHR_texture_transform;

  if (textureTransform) {
    const offset = textureTransform.offset || zeros;
    const scale = textureTransform.scale || ones;
    const rotation = textureTransform.rotation ? -textureTransform.rotation * math$1.RAD_TO_DEG : 0;
    const tilingVec = new Vec2(scale[0], scale[1]);
    const offsetVec = new Vec2(offset[0], 1.0 - scale[1] - offset[1]);

    for (map = 0; map < maps.length; ++map) {
      material[`${maps[map]}MapTiling`] = tilingVec;
      material[`${maps[map]}MapOffset`] = offsetVec;
      material[`${maps[map]}MapRotation`] = rotation;
    }
  }
};

const extensionPbrSpecGlossiness = function extensionPbrSpecGlossiness(data, material, textures) {
  let color, texture;

  if (data.hasOwnProperty('diffuseFactor')) {
    color = data.diffuseFactor;
    material.diffuse.set(Math.pow(color[0], 1 / 2.2), Math.pow(color[1], 1 / 2.2), Math.pow(color[2], 1 / 2.2));
    material.opacity = color[3];
  } else {
    material.diffuse.set(1, 1, 1);
    material.opacity = 1;
  }

  if (data.hasOwnProperty('diffuseTexture')) {
    const diffuseTexture = data.diffuseTexture;
    texture = textures[diffuseTexture.index];
    material.diffuseMap = texture;
    material.diffuseMapChannel = 'rgb';
    material.opacityMap = texture;
    material.opacityMapChannel = 'a';
    extractTextureTransform(diffuseTexture, material, ['diffuse', 'opacity']);
  }

  material.useMetalness = false;

  if (data.hasOwnProperty('specularFactor')) {
    color = data.specularFactor;
    material.specular.set(Math.pow(color[0], 1 / 2.2), Math.pow(color[1], 1 / 2.2), Math.pow(color[2], 1 / 2.2));
  } else {
    material.specular.set(1, 1, 1);
  }

  if (data.hasOwnProperty('glossinessFactor')) {
    material.shininess = 100 * data.glossinessFactor;
  } else {
    material.shininess = 100;
  }

  if (data.hasOwnProperty('specularGlossinessTexture')) {
    const specularGlossinessTexture = data.specularGlossinessTexture;
    material.specularEncoding = 'srgb';
    material.specularMap = material.glossMap = textures[specularGlossinessTexture.index];
    material.specularMapChannel = 'rgb';
    material.glossMapChannel = 'a';
    extractTextureTransform(specularGlossinessTexture, material, ['gloss', 'metalness']);
  }
};

const extensionClearCoat = function extensionClearCoat(data, material, textures) {
  if (data.hasOwnProperty('clearcoatFactor')) {
    material.clearCoat = data.clearcoatFactor * 0.25;
  } else {
    material.clearCoat = 0;
  }

  if (data.hasOwnProperty('clearcoatTexture')) {
    const clearcoatTexture = data.clearcoatTexture;
    material.clearCoatMap = textures[clearcoatTexture.index];
    material.clearCoatMapChannel = 'r';
    extractTextureTransform(clearcoatTexture, material, ['clearCoat']);
  }

  if (data.hasOwnProperty('clearcoatRoughnessFactor')) {
    material.clearCoatGlossiness = data.clearcoatRoughnessFactor;
  } else {
    material.clearCoatGlossiness = 0;
  }

  if (data.hasOwnProperty('clearcoatRoughnessTexture')) {
    const clearcoatRoughnessTexture = data.clearcoatRoughnessTexture;
    material.clearCoatGlossMap = textures[clearcoatRoughnessTexture.index];
    material.clearCoatGlossMapChannel = 'g';
    extractTextureTransform(clearcoatRoughnessTexture, material, ['clearCoatGloss']);
  }

  if (data.hasOwnProperty('clearcoatNormalTexture')) {
    const clearcoatNormalTexture = data.clearcoatNormalTexture;
    material.clearCoatNormalMap = textures[clearcoatNormalTexture.index];
    extractTextureTransform(clearcoatNormalTexture, material, ['clearCoatNormal']);

    if (clearcoatNormalTexture.hasOwnProperty('scale')) {
      material.clearCoatBumpiness = clearcoatNormalTexture.scale;
    }
  }

  const clearCoatGlossChunk = `
        #ifdef MAPFLOAT
        uniform float material_clearCoatGlossiness;
        #endif
        
        void getClearCoatGlossiness() {
            ccGlossiness = 1.0;
        
        #ifdef MAPFLOAT
            ccGlossiness *= material_clearCoatGlossiness;
        #endif
        
        #ifdef MAPTEXTURE
            ccGlossiness *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
        #endif
        
        #ifdef MAPVERTEX
            ccGlossiness *= saturate(vVertexColor.$VC);
        #endif
        
            ccGlossiness = 1.0 - ccGlossiness;
        
            ccGlossiness += 0.0000001;
        }
        `;
  material.chunks.clearCoatGlossPS = clearCoatGlossChunk;
};

const extensionUnlit = function extensionUnlit(data, material, textures) {
  material.useLighting = false;
  material.emissive.copy(material.diffuse);
  material.emissiveTint = material.diffuseTint;
  material.emissiveMap = material.diffuseMap;
  material.emissiveMapUv = material.diffuseMapUv;
  material.emissiveMapTiling.copy(material.diffuseMapTiling);
  material.emissiveMapOffset.copy(material.diffuseMapOffset);
  material.emissiveMapRotation = material.diffuseMapRotation;
  material.emissiveMapChannel = material.diffuseMapChannel;
  material.emissiveVertexColor = material.diffuseVertexColor;
  material.emissiveVertexColorChannel = material.diffuseVertexColorChannel;
  material.diffuse.set(0, 0, 0);
  material.diffuseTint = false;
  material.diffuseMap = null;
  material.diffuseVertexColor = false;
};

const extensionSpecular = function extensionSpecular(data, material, textures) {
  material.useMetalnessSpecularColor = true;

  if (data.hasOwnProperty('specularColorTexture')) {
    material.specularEncoding = 'srgb';
    material.specularMap = textures[data.specularColorTexture.index];
    material.specularMapChannel = 'rgb';
    extractTextureTransform(data.specularColorTexture, material, ['specular']);
  }

  if (data.hasOwnProperty('specularColorFactor')) {
    const color = data.specularColorFactor;
    material.specular.set(Math.pow(color[0], 1 / 2.2), Math.pow(color[1], 1 / 2.2), Math.pow(color[2], 1 / 2.2));
  } else {
    material.specular.set(1, 1, 1);
  }

  if (data.hasOwnProperty('specularFactor')) {
    material.specularityFactor = data.specularFactor;
  } else {
    material.specularityFactor = 1;
  }

  if (data.hasOwnProperty('specularTexture')) {
    material.specularityFactorMapChannel = 'a';
    material.specularityFactorMap = textures[data.specularTexture.index];
    extractTextureTransform(data.specularTexture, material, ['specularityFactor']);
  }
};

const extensionIor = function extensionIor(data, material, textures) {
  if (data.hasOwnProperty('ior')) {
    material.refractionIndex = 1.0 / data.ior;
  }
};

const extensionTransmission = function extensionTransmission(data, material, textures) {
  material.blendType = BLEND_NORMAL;
  material.useDynamicRefraction = true;

  if (data.hasOwnProperty('transmissionFactor')) {
    material.refraction = data.transmissionFactor;
  }

  if (data.hasOwnProperty('transmissionTexture')) {
    material.refractionMapChannel = 'r';
    material.refractionMap = textures[data.transmissionTexture.index];
    extractTextureTransform(data.transmissionTexture, material, ['refraction']);
  }
};

const extensionSheen = function extensionSheen(data, material, textures) {
  material.useSheen = true;

  if (data.hasOwnProperty('sheenColorFactor')) {
    const color = data.sheenColorFactor;
    material.sheen.set(Math.pow(color[0], 1 / 2.2), Math.pow(color[1], 1 / 2.2), Math.pow(color[2], 1 / 2.2));
  } else {
    material.sheen.set(1, 1, 1);
  }

  if (data.hasOwnProperty('sheenColorTexture')) {
    material.sheenMap = textures[data.sheenColorTexture.index];
    material.sheenEncoding = 'srgb';
    extractTextureTransform(data.sheenColorTexture, material, ['sheen']);
  }

  if (data.hasOwnProperty('sheenRoughnessFactor')) {
    material.sheenGlossiness = data.sheenRoughnessFactor;
  } else {
    material.sheenGlossiness = 0.0;
  }

  if (data.hasOwnProperty('sheenRoughnessTexture')) {
    material.sheenGlossinessMap = textures[data.sheenRoughnessTexture.index];
    material.sheenGlossinessMapChannel = 'a';
    extractTextureTransform(data.sheenRoughnessTexture, material, ['sheenGlossiness']);
  }

  const sheenGlossChunk = `
    #ifdef MAPFLOAT
    uniform float material_sheenGlossiness;
    #endif

    #ifdef MAPTEXTURE
    uniform sampler2D texture_sheenGlossinessMap;
    #endif

    void getSheenGlossiness() {
        float sheenGlossiness = 1.0;

        #ifdef MAPFLOAT
        sheenGlossiness *= material_sheenGlossiness;
        #endif

        #ifdef MAPTEXTURE
        sheenGlossiness *= texture2DBias(texture_sheenGlossinessMap, $UV, textureBias).$CH;
        #endif

        #ifdef MAPVERTEX
        sheenGlossiness *= saturate(vVertexColor.$VC);
        #endif

        sheenGlossiness = 1.0 - sheenGlossiness;
        sheenGlossiness += 0.0000001;
        sGlossiness = sheenGlossiness;
    }
    `;
  material.chunks.sheenGlossPS = sheenGlossChunk;
};

const extensionVolume = function extensionVolume(data, material, textures) {
  material.blendType = BLEND_NORMAL;
  material.useDynamicRefraction = true;

  if (data.hasOwnProperty('thicknessFactor')) {
    material.thickness = data.thicknessFactor;
  }

  if (data.hasOwnProperty('thicknessTexture')) {
    material.thicknessMap = textures[data.thicknessTexture.index];
    extractTextureTransform(data.thicknessTexture, material, ['thickness']);
  }

  if (data.hasOwnProperty('attenuationDistance')) {
    material.attenuationDistance = data.attenuationDistance;
  }

  if (data.hasOwnProperty('attenuationColor')) {
    const color = data.attenuationColor;
    material.attenuation.set(Math.pow(color[0], 1 / 2.2), Math.pow(color[1], 1 / 2.2), Math.pow(color[2], 1 / 2.2));
  }
};

const extensionEmissiveStrength = function extensionEmissiveStrength(data, material, textures) {
  if (data.hasOwnProperty('emissiveStrength')) {
    material.emissiveIntensity = data.emissiveStrength;
  }
};

const extensionIridescence = function extensionIridescence(data, material, textures) {
  material.useIridescence = true;

  if (data.hasOwnProperty('iridescenceFactor')) {
    material.iridescence = data.iridescenceFactor;
  }

  if (data.hasOwnProperty('iridescenceTexture')) {
    material.iridescenceMapChannel = 'r';
    material.iridescenceMap = textures[data.iridescenceTexture.index];
    extractTextureTransform(data.iridescenceTexture, material, ['iridescence']);
  }

  if (data.hasOwnProperty('iridescenceIor')) {
    material.iridescenceRefractionIndex = data.iridescenceIor;
  }

  if (data.hasOwnProperty('iridescenceThicknessMinimum')) {
    material.iridescenceThicknessMin = data.iridescenceThicknessMinimum;
  }

  if (data.hasOwnProperty('iridescenceThicknessMaximum')) {
    material.iridescenceThicknessMax = data.iridescenceThicknessMaximum;
  }

  if (data.hasOwnProperty('iridescenceThicknessTexture')) {
    material.iridescenceThicknessMapChannel = 'g';
    material.iridescenceThicknessMap = textures[data.iridescenceThicknessTexture.index];
    extractTextureTransform(data.iridescenceThicknessTexture, material, ['iridescenceThickness']);
  }
};

const createMaterial = function createMaterial(gltfMaterial, textures, flipV) {
  const glossChunk = `
        #ifdef MAPFLOAT
        uniform float material_shininess;
        #endif
        
        void getGlossiness() {
            dGlossiness = 1.0;
        
        #ifdef MAPFLOAT
            dGlossiness *= material_shininess;
        #endif
        
        #ifdef MAPTEXTURE
            dGlossiness *= texture2DBias($SAMPLER, $UV, textureBias).$CH;
        #endif
        
        #ifdef MAPVERTEX
            dGlossiness *= saturate(vVertexColor.$VC);
        #endif
        
            dGlossiness = 1.0 - dGlossiness;
        
            dGlossiness += 0.0000001;
        }
        `;
  const material = new StandardMaterial();
  material.occludeSpecular = SPECOCC_AO;
  material.diffuseTint = true;
  material.diffuseVertexColor = true;
  material.specularTint = true;
  material.specularVertexColor = true;
  material.chunks.APIVersion = CHUNKAPI_1_57;

  if (gltfMaterial.hasOwnProperty('name')) {
    material.name = gltfMaterial.name;
  }

  let color, texture;

  if (gltfMaterial.hasOwnProperty('pbrMetallicRoughness')) {
    const pbrData = gltfMaterial.pbrMetallicRoughness;

    if (pbrData.hasOwnProperty('baseColorFactor')) {
      color = pbrData.baseColorFactor;
      material.diffuse.set(Math.pow(color[0], 1 / 2.2), Math.pow(color[1], 1 / 2.2), Math.pow(color[2], 1 / 2.2));
      material.opacity = color[3];
    } else {
      material.diffuse.set(1, 1, 1);
      material.opacity = 1;
    }

    if (pbrData.hasOwnProperty('baseColorTexture')) {
      const baseColorTexture = pbrData.baseColorTexture;
      texture = textures[baseColorTexture.index];
      material.diffuseMap = texture;
      material.diffuseMapChannel = 'rgb';
      material.opacityMap = texture;
      material.opacityMapChannel = 'a';
      extractTextureTransform(baseColorTexture, material, ['diffuse', 'opacity']);
    }

    material.useMetalness = true;
    material.specular.set(1, 1, 1);

    if (pbrData.hasOwnProperty('metallicFactor')) {
      material.metalness = pbrData.metallicFactor;
    } else {
      material.metalness = 1;
    }

    if (pbrData.hasOwnProperty('roughnessFactor')) {
      material.shininess = 100 * pbrData.roughnessFactor;
    } else {
      material.shininess = 100;
    }

    if (pbrData.hasOwnProperty('metallicRoughnessTexture')) {
      const metallicRoughnessTexture = pbrData.metallicRoughnessTexture;
      material.metalnessMap = material.glossMap = textures[metallicRoughnessTexture.index];
      material.metalnessMapChannel = 'b';
      material.glossMapChannel = 'g';
      extractTextureTransform(metallicRoughnessTexture, material, ['gloss', 'metalness']);
    }

    material.chunks.glossPS = glossChunk;
  }

  if (gltfMaterial.hasOwnProperty('normalTexture')) {
    const normalTexture = gltfMaterial.normalTexture;
    material.normalMap = textures[normalTexture.index];
    extractTextureTransform(normalTexture, material, ['normal']);

    if (normalTexture.hasOwnProperty('scale')) {
      material.bumpiness = normalTexture.scale;
    }
  }

  if (gltfMaterial.hasOwnProperty('occlusionTexture')) {
    const occlusionTexture = gltfMaterial.occlusionTexture;
    material.aoMap = textures[occlusionTexture.index];
    material.aoMapChannel = 'r';
    extractTextureTransform(occlusionTexture, material, ['ao']);
  }

  if (gltfMaterial.hasOwnProperty('emissiveFactor')) {
    color = gltfMaterial.emissiveFactor;
    material.emissive.set(Math.pow(color[0], 1 / 2.2), Math.pow(color[1], 1 / 2.2), Math.pow(color[2], 1 / 2.2));
    material.emissiveTint = true;
  } else {
    material.emissive.set(0, 0, 0);
    material.emissiveTint = false;
  }

  if (gltfMaterial.hasOwnProperty('emissiveTexture')) {
    const emissiveTexture = gltfMaterial.emissiveTexture;
    material.emissiveMap = textures[emissiveTexture.index];
    extractTextureTransform(emissiveTexture, material, ['emissive']);
  }

  if (gltfMaterial.hasOwnProperty('alphaMode')) {
    switch (gltfMaterial.alphaMode) {
      case 'MASK':
        material.blendType = BLEND_NONE;

        if (gltfMaterial.hasOwnProperty('alphaCutoff')) {
          material.alphaTest = gltfMaterial.alphaCutoff;
        } else {
          material.alphaTest = 0.5;
        }

        break;

      case 'BLEND':
        material.blendType = BLEND_NORMAL;
        material.depthWrite = false;
        break;

      default:
      case 'OPAQUE':
        material.blendType = BLEND_NONE;
        break;
    }
  } else {
    material.blendType = BLEND_NONE;
  }

  if (gltfMaterial.hasOwnProperty('doubleSided')) {
    material.twoSidedLighting = gltfMaterial.doubleSided;
    material.cull = gltfMaterial.doubleSided ? CULLFACE_NONE : CULLFACE_BACK;
  } else {
    material.twoSidedLighting = false;
    material.cull = CULLFACE_BACK;
  }

  const extensions = {
    "KHR_materials_clearcoat": extensionClearCoat,
    "KHR_materials_emissive_strength": extensionEmissiveStrength,
    "KHR_materials_ior": extensionIor,
    "KHR_materials_iridescence": extensionIridescence,
    "KHR_materials_pbrSpecularGlossiness": extensionPbrSpecGlossiness,
    "KHR_materials_sheen": extensionSheen,
    "KHR_materials_specular": extensionSpecular,
    "KHR_materials_transmission": extensionTransmission,
    "KHR_materials_unlit": extensionUnlit,
    "KHR_materials_volume": extensionVolume
  };

  if (gltfMaterial.hasOwnProperty('extensions')) {
    for (const key in gltfMaterial.extensions) {
      const extensionFunc = extensions[key];

      if (extensionFunc !== undefined) {
        extensionFunc(gltfMaterial.extensions[key], material, textures);
      }
    }
  }

  material.update();
  return material;
};

const createAnimation = function createAnimation(gltfAnimation, animationIndex, gltfAccessors, bufferViews, nodes, meshes) {
  const createAnimData = function createAnimData(gltfAccessor) {
    return new AnimData(getNumComponents(gltfAccessor.type), getAccessorDataFloat32(gltfAccessor, bufferViews));
  };

  const interpMap = {
    'STEP': INTERPOLATION_STEP,
    'LINEAR': INTERPOLATION_LINEAR,
    'CUBICSPLINE': INTERPOLATION_CUBIC
  };
  const inputMap = {};
  const outputMap = {};
  const curveMap = {};
  let outputCounter = 1;
  let i;

  for (i = 0; i < gltfAnimation.samplers.length; ++i) {
    const sampler = gltfAnimation.samplers[i];

    if (!inputMap.hasOwnProperty(sampler.input)) {
      inputMap[sampler.input] = createAnimData(gltfAccessors[sampler.input]);
    }

    if (!outputMap.hasOwnProperty(sampler.output)) {
      outputMap[sampler.output] = createAnimData(gltfAccessors[sampler.output]);
    }

    const interpolation = sampler.hasOwnProperty('interpolation') && interpMap.hasOwnProperty(sampler.interpolation) ? interpMap[sampler.interpolation] : INTERPOLATION_LINEAR;
    const curve = {
      paths: [],
      input: sampler.input,
      output: sampler.output,
      interpolation: interpolation
    };
    curveMap[i] = curve;
  }

  const quatArrays = [];
  const transformSchema = {
    'translation': 'localPosition',
    'rotation': 'localRotation',
    'scale': 'localScale'
  };

  const constructNodePath = node => {
    const path = [];

    while (node) {
      path.unshift(node.name);
      node = node.parent;
    }

    return path;
  };

  const retrieveWeightName = (nodeName, weightIndex) => {
    if (!meshes) return weightIndex;

    for (let i = 0; i < meshes.length; i++) {
      const mesh = meshes[i];

      if (mesh.name === nodeName && mesh.hasOwnProperty('extras') && mesh.extras.hasOwnProperty('targetNames') && mesh.extras.targetNames[weightIndex]) {
        return `name.${mesh.extras.targetNames[weightIndex]}`;
      }
    }

    return weightIndex;
  };

  const createMorphTargetCurves = (curve, node, entityPath) => {
    if (!outputMap[curve.output]) {
      return;
    }

    const morphTargetCount = outputMap[curve.output].data.length / inputMap[curve.input].data.length;
    const keyframeCount = outputMap[curve.output].data.length / morphTargetCount;

    for (let j = 0; j < morphTargetCount; j++) {
      const morphTargetOutput = new Float32Array(keyframeCount);

      for (let k = 0; k < keyframeCount; k++) {
        morphTargetOutput[k] = outputMap[curve.output].data[k * morphTargetCount + j];
      }

      const output = new AnimData(1, morphTargetOutput);
      outputMap[-outputCounter] = output;
      const morphCurve = {
        paths: [{
          entityPath: entityPath,
          component: 'graph',
          propertyPath: [`weight.${retrieveWeightName(node.name, j)}`]
        }],
        input: curve.input,
        output: -outputCounter,
        interpolation: curve.interpolation
      };
      outputCounter++;
      curveMap[`morphCurve-${i}-${j}`] = morphCurve;
    }
  };

  for (i = 0; i < gltfAnimation.channels.length; ++i) {
    const channel = gltfAnimation.channels[i];
    const target = channel.target;
    const curve = curveMap[channel.sampler];
    const node = nodes[target.node];
    const entityPath = constructNodePath(node);

    if (target.path.startsWith('weights')) {
      createMorphTargetCurves(curve, node, entityPath);
      delete curveMap[channel.sampler];
      delete outputMap[curve.output];
    } else {
      curve.paths.push({
        entityPath: entityPath,
        component: 'graph',
        propertyPath: [transformSchema[target.path]]
      });
    }
  }

  const inputs = [];
  const outputs = [];
  const curves = [];

  for (const inputKey in inputMap) {
    inputs.push(inputMap[inputKey]);
    inputMap[inputKey] = inputs.length - 1;
  }

  for (const outputKey in outputMap) {
    outputs.push(outputMap[outputKey]);
    outputMap[outputKey] = outputs.length - 1;
  }

  for (const curveKey in curveMap) {
    const curveData = curveMap[curveKey];
    curves.push(new AnimCurve(curveData.paths, inputMap[curveData.input], outputMap[curveData.output], curveData.interpolation));

    if (curveData.paths.length > 0 && curveData.paths[0].propertyPath[0] === 'localRotation' && curveData.interpolation !== INTERPOLATION_CUBIC) {
      quatArrays.push(curves[curves.length - 1].output);
    }
  }

  quatArrays.sort();
  let prevIndex = null;
  let data;

  for (i = 0; i < quatArrays.length; ++i) {
    const index = quatArrays[i];

    if (i === 0 || index !== prevIndex) {
      data = outputs[index];

      if (data.components === 4) {
        const d = data.data;
        const len = d.length - 4;

        for (let j = 0; j < len; j += 4) {
          const dp = d[j + 0] * d[j + 4] + d[j + 1] * d[j + 5] + d[j + 2] * d[j + 6] + d[j + 3] * d[j + 7];

          if (dp < 0) {
            d[j + 4] *= -1;
            d[j + 5] *= -1;
            d[j + 6] *= -1;
            d[j + 7] *= -1;
          }
        }
      }

      prevIndex = index;
    }
  }

  let duration = 0;

  for (i = 0; i < inputs.length; i++) {
    data = inputs[i]._data;
    duration = Math.max(duration, data.length === 0 ? 0 : data[data.length - 1]);
  }

  return new AnimTrack(gltfAnimation.hasOwnProperty('name') ? gltfAnimation.name : 'animation_' + animationIndex, duration, inputs, outputs, curves);
};

const createNode = function createNode(gltfNode, nodeIndex) {
  const entity = new GraphNode();

  if (gltfNode.hasOwnProperty('name') && gltfNode.name.length > 0) {
    entity.name = gltfNode.name;
  } else {
    entity.name = 'node_' + nodeIndex;
  }

  if (gltfNode.hasOwnProperty('matrix')) {
    tempMat.data.set(gltfNode.matrix);
    tempMat.getTranslation(tempVec);
    entity.setLocalPosition(tempVec);
    tempMat.getEulerAngles(tempVec);
    entity.setLocalEulerAngles(tempVec);
    tempMat.getScale(tempVec);
    entity.setLocalScale(tempVec);
  }

  if (gltfNode.hasOwnProperty('rotation')) {
    const r = gltfNode.rotation;
    entity.setLocalRotation(r[0], r[1], r[2], r[3]);
  }

  if (gltfNode.hasOwnProperty('translation')) {
    const t = gltfNode.translation;
    entity.setLocalPosition(t[0], t[1], t[2]);
  }

  if (gltfNode.hasOwnProperty('scale')) {
    const s = gltfNode.scale;
    entity.setLocalScale(s[0], s[1], s[2]);
  }

  return entity;
};

const createCamera = function createCamera(gltfCamera, node) {
  const projection = gltfCamera.type === 'orthographic' ? PROJECTION_ORTHOGRAPHIC : PROJECTION_PERSPECTIVE;
  const gltfProperties = projection === PROJECTION_ORTHOGRAPHIC ? gltfCamera.orthographic : gltfCamera.perspective;
  const componentData = {
    enabled: false,
    projection: projection,
    nearClip: gltfProperties.znear,
    aspectRatioMode: ASPECT_AUTO
  };

  if (gltfProperties.zfar) {
    componentData.farClip = gltfProperties.zfar;
  }

  if (projection === PROJECTION_ORTHOGRAPHIC) {
    componentData.orthoHeight = 0.5 * gltfProperties.ymag;

    if (gltfProperties.ymag) {
      componentData.aspectRatioMode = ASPECT_MANUAL;
      componentData.aspectRatio = gltfProperties.xmag / gltfProperties.ymag;
    }
  } else {
    componentData.fov = gltfProperties.yfov * math$1.RAD_TO_DEG;

    if (gltfProperties.aspectRatio) {
      componentData.aspectRatioMode = ASPECT_MANUAL;
      componentData.aspectRatio = gltfProperties.aspectRatio;
    }
  }

  const cameraEntity = new Entity(gltfCamera.name);
  cameraEntity.addComponent('camera', componentData);
  return cameraEntity;
};

const createLight = function createLight(gltfLight, node) {
  const lightProps = {
    enabled: false,
    type: gltfLight.type === 'point' ? 'omni' : gltfLight.type,
    color: gltfLight.hasOwnProperty('color') ? new Color(gltfLight.color) : Color.WHITE,
    range: gltfLight.hasOwnProperty('range') ? gltfLight.range : 9999,
    falloffMode: LIGHTFALLOFF_INVERSESQUARED,
    intensity: gltfLight.hasOwnProperty('intensity') ? math$1.clamp(gltfLight.intensity, 0, 2) : 1
  };

  if (gltfLight.hasOwnProperty('spot')) {
    lightProps.innerConeAngle = gltfLight.spot.hasOwnProperty('innerConeAngle') ? gltfLight.spot.innerConeAngle * math$1.RAD_TO_DEG : 0;
    lightProps.outerConeAngle = gltfLight.spot.hasOwnProperty('outerConeAngle') ? gltfLight.spot.outerConeAngle * math$1.RAD_TO_DEG : Math.PI / 4;
  }

  if (gltfLight.hasOwnProperty("intensity")) {
    lightProps.luminance = gltfLight.intensity * Light.getLightUnitConversion(lightTypes[lightProps.type], lightProps.outerConeAngle, lightProps.innerConeAngle);
  }

  const lightEntity = new Entity(node.name);
  lightEntity.rotateLocal(90, 0, 0);
  lightEntity.addComponent('light', lightProps);
  return lightEntity;
};

const createSkins = function createSkins(device, gltf, nodes, bufferViews) {
  if (!gltf.hasOwnProperty('skins') || gltf.skins.length === 0) {
    return [];
  }

  const glbSkins = new Map();
  return gltf.skins.map(function (gltfSkin) {
    return createSkin(device, gltfSkin, gltf.accessors, bufferViews, nodes, glbSkins);
  });
};

const createMeshes = function createMeshes(device, gltf, bufferViews, callback, flipV, meshVariants, meshDefaultMaterials, options) {
  if (!gltf.hasOwnProperty('meshes') || gltf.meshes.length === 0 || !gltf.hasOwnProperty('accessors') || gltf.accessors.length === 0 || !gltf.hasOwnProperty('bufferViews') || gltf.bufferViews.length === 0) {
    return [];
  }

  const vertexBufferDict = {};
  return gltf.meshes.map(function (gltfMesh) {
    return createMesh(device, gltfMesh, gltf.accessors, bufferViews, callback, flipV, vertexBufferDict, meshVariants, meshDefaultMaterials, options);
  });
};

const createMaterials = function createMaterials(gltf, textures, options, flipV) {
  if (!gltf.hasOwnProperty('materials') || gltf.materials.length === 0) {
    return [];
  }

  const preprocess = options && options.material && options.material.preprocess;
  const process = options && options.material && options.material.process || createMaterial;
  const postprocess = options && options.material && options.material.postprocess;
  return gltf.materials.map(function (gltfMaterial) {
    if (preprocess) {
      preprocess(gltfMaterial);
    }

    const material = process(gltfMaterial, textures, flipV);

    if (postprocess) {
      postprocess(gltfMaterial, material);
    }

    return material;
  });
};

const createVariants = function createVariants(gltf) {
  if (!gltf.hasOwnProperty("extensions") || !gltf.extensions.hasOwnProperty("KHR_materials_variants")) return null;
  const data = gltf.extensions.KHR_materials_variants.variants;
  const variants = {};

  for (let i = 0; i < data.length; i++) {
    variants[data[i].name] = i;
  }

  return variants;
};

const createAnimations = function createAnimations(gltf, nodes, bufferViews, options) {
  if (!gltf.hasOwnProperty('animations') || gltf.animations.length === 0) {
    return [];
  }

  const preprocess = options && options.animation && options.animation.preprocess;
  const postprocess = options && options.animation && options.animation.postprocess;
  return gltf.animations.map(function (gltfAnimation, index) {
    if (preprocess) {
      preprocess(gltfAnimation);
    }

    const animation = createAnimation(gltfAnimation, index, gltf.accessors, bufferViews, nodes, gltf.meshes);

    if (postprocess) {
      postprocess(gltfAnimation, animation);
    }

    return animation;
  });
};

const createNodes = function createNodes(gltf, options) {
  if (!gltf.hasOwnProperty('nodes') || gltf.nodes.length === 0) {
    return [];
  }

  const preprocess = options && options.node && options.node.preprocess;
  const process = options && options.node && options.node.process || createNode;
  const postprocess = options && options.node && options.node.postprocess;
  const nodes = gltf.nodes.map(function (gltfNode, index) {
    if (preprocess) {
      preprocess(gltfNode);
    }

    const node = process(gltfNode, index);

    if (postprocess) {
      postprocess(gltfNode, node);
    }

    return node;
  });

  for (let i = 0; i < gltf.nodes.length; ++i) {
    const gltfNode = gltf.nodes[i];

    if (gltfNode.hasOwnProperty('children')) {
      const parent = nodes[i];
      const uniqueNames = {};

      for (let j = 0; j < gltfNode.children.length; ++j) {
        const child = nodes[gltfNode.children[j]];

        if (!child.parent) {
          if (uniqueNames.hasOwnProperty(child.name)) {
            child.name += uniqueNames[child.name]++;
          } else {
            uniqueNames[child.name] = 1;
          }

          parent.addChild(child);
        }
      }
    }
  }

  return nodes;
};

const createScenes = function createScenes(gltf, nodes) {
  var _gltf$scenes$0$nodes;

  const scenes = [];
  const count = gltf.scenes.length;

  if (count === 1 && ((_gltf$scenes$0$nodes = gltf.scenes[0].nodes) == null ? void 0 : _gltf$scenes$0$nodes.length) === 1) {
    const nodeIndex = gltf.scenes[0].nodes[0];
    scenes.push(nodes[nodeIndex]);
  } else {
    for (let i = 0; i < count; i++) {
      const scene = gltf.scenes[i];

      if (scene.nodes) {
        const sceneRoot = new GraphNode(scene.name);

        for (let n = 0; n < scene.nodes.length; n++) {
          const childNode = nodes[scene.nodes[n]];
          sceneRoot.addChild(childNode);
        }

        scenes.push(sceneRoot);
      }
    }
  }

  return scenes;
};

const createCameras = function createCameras(gltf, nodes, options) {
  let cameras = null;

  if (gltf.hasOwnProperty('nodes') && gltf.hasOwnProperty('cameras') && gltf.cameras.length > 0) {
    const preprocess = options && options.camera && options.camera.preprocess;
    const process = options && options.camera && options.camera.process || createCamera;
    const postprocess = options && options.camera && options.camera.postprocess;
    gltf.nodes.forEach(function (gltfNode, nodeIndex) {
      if (gltfNode.hasOwnProperty('camera')) {
        const gltfCamera = gltf.cameras[gltfNode.camera];

        if (gltfCamera) {
          if (preprocess) {
            preprocess(gltfCamera);
          }

          const camera = process(gltfCamera, nodes[nodeIndex]);

          if (postprocess) {
            postprocess(gltfCamera, camera);
          }

          if (camera) {
            if (!cameras) cameras = new Map();
            cameras.set(gltfNode, camera);
          }
        }
      }
    });
  }

  return cameras;
};

const createLights = function createLights(gltf, nodes, options) {
  let lights = null;

  if (gltf.hasOwnProperty('nodes') && gltf.hasOwnProperty('extensions') && gltf.extensions.hasOwnProperty('KHR_lights_punctual') && gltf.extensions.KHR_lights_punctual.hasOwnProperty('lights')) {
    const gltfLights = gltf.extensions.KHR_lights_punctual.lights;

    if (gltfLights.length) {
      const preprocess = options && options.light && options.light.preprocess;
      const process = options && options.light && options.light.process || createLight;
      const postprocess = options && options.light && options.light.postprocess;
      gltf.nodes.forEach(function (gltfNode, nodeIndex) {
        if (gltfNode.hasOwnProperty('extensions') && gltfNode.extensions.hasOwnProperty('KHR_lights_punctual') && gltfNode.extensions.KHR_lights_punctual.hasOwnProperty('light')) {
          const lightIndex = gltfNode.extensions.KHR_lights_punctual.light;
          const gltfLight = gltfLights[lightIndex];

          if (gltfLight) {
            if (preprocess) {
              preprocess(gltfLight);
            }

            const light = process(gltfLight, nodes[nodeIndex]);

            if (postprocess) {
              postprocess(gltfLight, light);
            }

            if (light) {
              if (!lights) lights = new Map();
              lights.set(gltfNode, light);
            }
          }
        }
      });
    }
  }

  return lights;
};

const linkSkins = function linkSkins(gltf, renders, skins) {
  gltf.nodes.forEach(gltfNode => {
    if (gltfNode.hasOwnProperty('mesh') && gltfNode.hasOwnProperty('skin')) {
      const meshGroup = renders[gltfNode.mesh].meshes;
      meshGroup.forEach(mesh => {
        mesh.skin = skins[gltfNode.skin];
      });
    }
  });
};

const createResources = function createResources(device, gltf, bufferViews, textureAssets, options, callback) {
  const preprocess = options && options.global && options.global.preprocess;
  const postprocess = options && options.global && options.global.postprocess;

  if (preprocess) {
    preprocess(gltf);
  }

  const flipV = gltf.asset && gltf.asset.generator === 'PlayCanvas';

  const nodes = createNodes(gltf, options);
  const scenes = createScenes(gltf, nodes);
  const lights = createLights(gltf, nodes, options);
  const cameras = createCameras(gltf, nodes, options);
  const animations = createAnimations(gltf, nodes, bufferViews, options);
  const materials = createMaterials(gltf, textureAssets.map(function (textureAsset) {
    return textureAsset.resource;
  }), options, flipV);
  const variants = createVariants(gltf);
  const meshVariants = {};
  const meshDefaultMaterials = {};
  const meshes = createMeshes(device, gltf, bufferViews, callback, flipV, meshVariants, meshDefaultMaterials, options);
  const skins = createSkins(device, gltf, nodes, bufferViews);
  const renders = [];

  for (let i = 0; i < meshes.length; i++) {
    renders[i] = new Render();
    renders[i].meshes = meshes[i];
  }

  linkSkins(gltf, renders, skins);
  const result = new GlbResources(gltf);
  result.nodes = nodes;
  result.scenes = scenes;
  result.animations = animations;
  result.textures = textureAssets;
  result.materials = materials;
  result.variants = variants;
  result.meshVariants = meshVariants;
  result.meshDefaultMaterials = meshDefaultMaterials;
  result.renders = renders;
  result.skins = skins;
  result.lights = lights;
  result.cameras = cameras;

  if (postprocess) {
    postprocess(gltf, result);
  }

  callback(null, result);
};

const applySampler = function applySampler(texture, gltfSampler) {
  const getFilter = function getFilter(filter, defaultValue) {
    switch (filter) {
      case 9728:
        return FILTER_NEAREST;

      case 9729:
        return FILTER_LINEAR;

      case 9984:
        return FILTER_NEAREST_MIPMAP_NEAREST;

      case 9985:
        return FILTER_LINEAR_MIPMAP_NEAREST;

      case 9986:
        return FILTER_NEAREST_MIPMAP_LINEAR;

      case 9987:
        return FILTER_LINEAR_MIPMAP_LINEAR;

      default:
        return defaultValue;
    }
  };

  const getWrap = function getWrap(wrap, defaultValue) {
    switch (wrap) {
      case 33071:
        return ADDRESS_CLAMP_TO_EDGE;

      case 33648:
        return ADDRESS_MIRRORED_REPEAT;

      case 10497:
        return ADDRESS_REPEAT;

      default:
        return defaultValue;
    }
  };

  if (texture) {
    gltfSampler = gltfSampler || {};
    texture.minFilter = getFilter(gltfSampler.minFilter, FILTER_LINEAR_MIPMAP_LINEAR);
    texture.magFilter = getFilter(gltfSampler.magFilter, FILTER_LINEAR);
    texture.addressU = getWrap(gltfSampler.wrapS, ADDRESS_REPEAT);
    texture.addressV = getWrap(gltfSampler.wrapT, ADDRESS_REPEAT);
  }
};

let gltfTextureUniqueId = 0;

const loadImageAsync = function loadImageAsync(gltfImage, index, bufferViews, urlBase, registry, options, callback) {
  const preprocess = options && options.image && options.image.preprocess;

  const processAsync = options && options.image && options.image.processAsync || function (gltfImage, callback) {
    callback(null, null);
  };

  const postprocess = options && options.image && options.image.postprocess;

  const onLoad = function onLoad(textureAsset) {
    if (postprocess) {
      postprocess(gltfImage, textureAsset);
    }

    callback(null, textureAsset);
  };

  const mimeTypeFileExtensions = {
    'image/png': 'png',
    'image/jpeg': 'jpg',
    'image/basis': 'basis',
    'image/ktx': 'ktx',
    'image/ktx2': 'ktx2',
    'image/vnd-ms.dds': 'dds'
  };

  const loadTexture = function loadTexture(url, bufferView, mimeType, options) {
    const name = (gltfImage.name || 'gltf-texture') + '-' + gltfTextureUniqueId++;
    const file = {
      url: url || name
    };

    if (bufferView) {
      file.contents = bufferView.slice(0).buffer;
    }

    if (mimeType) {
      const extension = mimeTypeFileExtensions[mimeType];

      if (extension) {
        file.filename = file.url + '.' + extension;
      }
    }

    const asset = new Asset(name, 'texture', file, null, options);
    asset.on('load', onLoad);
    asset.on('error', callback);
    registry.add(asset);
    registry.load(asset);
  };

  if (preprocess) {
    preprocess(gltfImage);
  }

  processAsync(gltfImage, function (err, textureAsset) {
    if (err) {
      callback(err);
    } else if (textureAsset) {
      onLoad(textureAsset);
    } else {
      if (gltfImage.hasOwnProperty('uri')) {
        if (isDataURI(gltfImage.uri)) {
          loadTexture(gltfImage.uri, null, getDataURIMimeType(gltfImage.uri), null);
        } else {
          loadTexture(path.join(urlBase, gltfImage.uri), null, null, {
            crossOrigin: 'anonymous'
          });
        }
      } else if (gltfImage.hasOwnProperty('bufferView') && gltfImage.hasOwnProperty('mimeType')) {
        loadTexture(null, bufferViews[gltfImage.bufferView], gltfImage.mimeType, null);
      } else {
        callback('Invalid image found in gltf (neither uri or bufferView found). index=' + index);
      }
    }
  });
};

const loadTexturesAsync = function loadTexturesAsync(gltf, bufferViews, urlBase, registry, options, callback) {
  if (!gltf.hasOwnProperty('images') || gltf.images.length === 0 || !gltf.hasOwnProperty('textures') || gltf.textures.length === 0) {
    callback(null, []);
    return;
  }

  const preprocess = options && options.texture && options.texture.preprocess;

  const processAsync = options && options.texture && options.texture.processAsync || function (gltfTexture, gltfImages, callback) {
    callback(null, null);
  };

  const postprocess = options && options.texture && options.texture.postprocess;
  const assets = [];
  const textures = [];
  let remaining = gltf.textures.length;

  const onLoad = function onLoad(textureIndex, imageIndex) {
    if (!textures[imageIndex]) {
      textures[imageIndex] = [];
    }

    textures[imageIndex].push(textureIndex);

    if (--remaining === 0) {
      const result = [];
      textures.forEach(function (textureList, imageIndex) {
        textureList.forEach(function (textureIndex, index) {
          const textureAsset = index === 0 ? assets[imageIndex] : cloneTextureAsset(assets[imageIndex]);
          applySampler(textureAsset.resource, (gltf.samplers || [])[gltf.textures[textureIndex].sampler]);
          result[textureIndex] = textureAsset;

          if (postprocess) {
            postprocess(gltf.textures[textureIndex], textureAsset);
          }
        });
      });
      callback(null, result);
    }
  };

  for (let i = 0; i < gltf.textures.length; ++i) {
    const gltfTexture = gltf.textures[i];

    if (preprocess) {
      preprocess(gltfTexture);
    }

    processAsync(gltfTexture, gltf.images, function (i, gltfTexture, err, gltfImageIndex) {
      if (err) {
        callback(err);
      } else {
        if (gltfImageIndex === undefined || gltfImageIndex === null) {
          var _gltfTexture$extensio, _gltfTexture$extensio2;

          gltfImageIndex = gltfTexture == null ? void 0 : (_gltfTexture$extensio = gltfTexture.extensions) == null ? void 0 : (_gltfTexture$extensio2 = _gltfTexture$extensio.KHR_texture_basisu) == null ? void 0 : _gltfTexture$extensio2.source;

          if (gltfImageIndex === undefined) {
            gltfImageIndex = gltfTexture.source;
          }
        }

        if (assets[gltfImageIndex]) {
          onLoad(i, gltfImageIndex);
        } else {
          const gltfImage = gltf.images[gltfImageIndex];
          loadImageAsync(gltfImage, i, bufferViews, urlBase, registry, options, function (err, textureAsset) {
            if (err) {
              callback(err);
            } else {
              assets[gltfImageIndex] = textureAsset;
              onLoad(i, gltfImageIndex);
            }
          });
        }
      }
    }.bind(null, i, gltfTexture));
  }
};

const loadBuffersAsync = function loadBuffersAsync(gltf, binaryChunk, urlBase, options, callback) {
  const result = [];

  if (!gltf.buffers || gltf.buffers.length === 0) {
    callback(null, result);
    return;
  }

  const preprocess = options && options.buffer && options.buffer.preprocess;

  const processAsync = options && options.buffer && options.buffer.processAsync || function (gltfBuffer, callback) {
    callback(null, null);
  };

  const postprocess = options && options.buffer && options.buffer.postprocess;
  let remaining = gltf.buffers.length;

  const onLoad = function onLoad(index, buffer) {
    result[index] = buffer;

    if (postprocess) {
      postprocess(gltf.buffers[index], buffer);
    }

    if (--remaining === 0) {
      callback(null, result);
    }
  };

  for (let i = 0; i < gltf.buffers.length; ++i) {
    const gltfBuffer = gltf.buffers[i];

    if (preprocess) {
      preprocess(gltfBuffer);
    }

    processAsync(gltfBuffer, function (i, gltfBuffer, err, arrayBuffer) {
      if (err) {
        callback(err);
      } else if (arrayBuffer) {
        onLoad(i, new Uint8Array(arrayBuffer));
      } else {
        if (gltfBuffer.hasOwnProperty('uri')) {
          if (isDataURI(gltfBuffer.uri)) {
            const byteString = atob(gltfBuffer.uri.split(',')[1]);
            const binaryArray = new Uint8Array(byteString.length);

            for (let j = 0; j < byteString.length; j++) {
              binaryArray[j] = byteString.charCodeAt(j);
            }

            onLoad(i, binaryArray);
          } else {
            http.get(path.join(urlBase, gltfBuffer.uri), {
              cache: true,
              responseType: 'arraybuffer',
              retry: false
            }, function (i, err, result) {
              if (err) {
                callback(err);
              } else {
                onLoad(i, new Uint8Array(result));
              }
            }.bind(null, i));
          }
        } else {
          onLoad(i, binaryChunk);
        }
      }
    }.bind(null, i, gltfBuffer));
  }
};

const parseGltf = function parseGltf(gltfChunk, callback) {
  const decodeBinaryUtf8 = function decodeBinaryUtf8(array) {
    if (typeof TextDecoder !== 'undefined') {
      return new TextDecoder().decode(array);
    }

    let str = '';

    for (let i = 0; i < array.length; i++) {
      str += String.fromCharCode(array[i]);
    }

    return decodeURIComponent(escape(str));
  };

  const gltf = JSON.parse(decodeBinaryUtf8(gltfChunk));

  if (gltf.asset && gltf.asset.version && parseFloat(gltf.asset.version) < 2) {
    callback(`Invalid gltf version. Expected version 2.0 or above but found version '${gltf.asset.version}'.`);
    return;
  }

  const extensionsRequired = (gltf == null ? void 0 : gltf.extensionsRequired) || [];

  if (!dracoDecoderInstance && !getGlobalDracoDecoderModule() && extensionsRequired.indexOf('KHR_draco_mesh_compression') !== -1) {
    WasmModule.getInstance('DracoDecoderModule', instance => {
      dracoDecoderInstance = instance;
      callback(null, gltf);
    });
  } else {
    callback(null, gltf);
  }
};

const parseGlb = function parseGlb(glbData, callback) {
  const data = glbData instanceof ArrayBuffer ? new DataView(glbData) : new DataView(glbData.buffer, glbData.byteOffset, glbData.byteLength);
  const magic = data.getUint32(0, true);
  const version = data.getUint32(4, true);
  const length = data.getUint32(8, true);

  if (magic !== 0x46546C67) {
    callback('Invalid magic number found in glb header. Expected 0x46546C67, found 0x' + magic.toString(16));
    return;
  }

  if (version !== 2) {
    callback('Invalid version number found in glb header. Expected 2, found ' + version);
    return;
  }

  if (length <= 0 || length > data.byteLength) {
    callback('Invalid length found in glb header. Found ' + length);
    return;
  }

  const chunks = [];
  let offset = 12;

  while (offset < length) {
    const chunkLength = data.getUint32(offset, true);

    if (offset + chunkLength + 8 > data.byteLength) {
      throw new Error('Invalid chunk length found in glb. Found ' + chunkLength);
    }

    const chunkType = data.getUint32(offset + 4, true);
    const chunkData = new Uint8Array(data.buffer, data.byteOffset + offset + 8, chunkLength);
    chunks.push({
      length: chunkLength,
      type: chunkType,
      data: chunkData
    });
    offset += chunkLength + 8;
  }

  if (chunks.length !== 1 && chunks.length !== 2) {
    callback('Invalid number of chunks found in glb file.');
    return;
  }

  if (chunks[0].type !== 0x4E4F534A) {
    callback('Invalid chunk type found in glb file. Expected 0x4E4F534A, found 0x' + chunks[0].type.toString(16));
    return;
  }

  if (chunks.length > 1 && chunks[1].type !== 0x004E4942) {
    callback('Invalid chunk type found in glb file. Expected 0x004E4942, found 0x' + chunks[1].type.toString(16));
    return;
  }

  callback(null, {
    gltfChunk: chunks[0].data,
    binaryChunk: chunks.length === 2 ? chunks[1].data : null
  });
};

const parseChunk = function parseChunk(filename, data, callback) {
  if (filename && filename.toLowerCase().endsWith('.glb')) {
    parseGlb(data, callback);
  } else {
    callback(null, {
      gltfChunk: data,
      binaryChunk: null
    });
  }
};

const parseBufferViewsAsync = function parseBufferViewsAsync(gltf, buffers, options, callback) {
  const result = [];
  const preprocess = options && options.bufferView && options.bufferView.preprocess;

  const processAsync = options && options.bufferView && options.bufferView.processAsync || function (gltfBufferView, buffers, callback) {
    callback(null, null);
  };

  const postprocess = options && options.bufferView && options.bufferView.postprocess;
  let remaining = gltf.bufferViews ? gltf.bufferViews.length : 0;

  if (!remaining) {
    callback(null, null);
    return;
  }

  const onLoad = function onLoad(index, bufferView) {
    const gltfBufferView = gltf.bufferViews[index];

    if (gltfBufferView.hasOwnProperty('byteStride')) {
      bufferView.byteStride = gltfBufferView.byteStride;
    }

    result[index] = bufferView;

    if (postprocess) {
      postprocess(gltfBufferView, bufferView);
    }

    if (--remaining === 0) {
      callback(null, result);
    }
  };

  for (let i = 0; i < gltf.bufferViews.length; ++i) {
    const gltfBufferView = gltf.bufferViews[i];

    if (preprocess) {
      preprocess(gltfBufferView);
    }

    processAsync(gltfBufferView, buffers, function (i, gltfBufferView, err, result) {
      if (err) {
        callback(err);
      } else if (result) {
        onLoad(i, result);
      } else {
        const buffer = buffers[gltfBufferView.buffer];
        const typedArray = new Uint8Array(buffer.buffer, buffer.byteOffset + (gltfBufferView.byteOffset || 0), gltfBufferView.byteLength);
        onLoad(i, typedArray);
      }
    }.bind(null, i, gltfBufferView));
  }
};

class GlbParser {
  static parseAsync(filename, urlBase, data, device, registry, options, callback) {
    parseChunk(filename, data, function (err, chunks) {
      if (err) {
        callback(err);
        return;
      }

      parseGltf(chunks.gltfChunk, function (err, gltf) {
        if (err) {
          callback(err);
          return;
        }

        loadBuffersAsync(gltf, chunks.binaryChunk, urlBase, options, function (err, buffers) {
          if (err) {
            callback(err);
            return;
          }

          parseBufferViewsAsync(gltf, buffers, options, function (err, bufferViews) {
            if (err) {
              callback(err);
              return;
            }

            loadTexturesAsync(gltf, bufferViews, urlBase, registry, options, function (err, textureAssets) {
              if (err) {
                callback(err);
                return;
              }

              createResources(device, gltf, bufferViews, textureAssets, options, callback);
            });
          });
        });
      });
    });
  }

  static parse(filename, data, device, options) {
    let result = null;
    options = options || {};
    parseChunk(filename, data, function (err, chunks) {
      if (err) {
        console.error(err);
      } else {
        parseGltf(chunks.gltfChunk, function (err, gltf) {
          if (err) {
            console.error(err);
          } else {
            parseBufferViewsAsync(gltf, [chunks.binaryChunk], options, function (err, bufferViews) {
              if (err) {
                console.error(err);
              } else {
                createResources(device, gltf, bufferViews, [], options, function (err, result_) {
                  if (err) {
                    console.error(err);
                  } else {
                    result = result_;
                  }
                });
              }
            });
          }
        });
      }
    });
    return result;
  }

  constructor(device, assets, maxRetries) {
    this._device = device;
    this._assets = assets;
    this._defaultMaterial = createMaterial({
      name: 'defaultGlbMaterial'
    }, []);
    this.maxRetries = maxRetries;
  }

  _getUrlWithoutParams(url) {
    return url.indexOf('?') >= 0 ? url.split('?')[0] : url;
  }

  load(url, callback, asset) {
    Asset.fetchArrayBuffer(url.load, (err, result) => {
      if (err) {
        callback(err);
      } else {
        GlbParser.parseAsync(this._getUrlWithoutParams(url.original), path.extractPath(url.load), result, this._device, asset.registry, asset.options, (err, result) => {
          if (err) {
            callback(err);
          } else {
            callback(null, new GlbContainerResource(result, asset, this._assets, this._defaultMaterial));
          }
        });
      }
    }, asset, this.maxRetries);
  }

  open(url, data, asset) {
    return data;
  }

  patch(asset, assets) {}

}

class AnimationHandler {
  constructor(app) {
    this.handlerType = "animation";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const options = {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };

    if (url.load.startsWith('blob:') || url.load.startsWith('data:')) {
      if (path.getExtension(url.original).toLowerCase() === '.glb') {
        options.responseType = Http.ResponseType.ARRAY_BUFFER;
      } else {
        options.responseType = Http.ResponseType.JSON;
      }
    }

    http.get(url.load, options, function (err, response) {
      if (err) {
        callback(`Error loading animation resource: ${url.original} [${err}]`);
      } else {
        callback(null, response);
      }
    });
  }

  open(url, data, asset) {
    if (path.getExtension(url).toLowerCase() === '.glb') {
      const glbResources = GlbParser.parse('filename.glb', data, null);

      if (glbResources) {
        var _asset$data;

        const animations = glbResources.animations;

        if (asset != null && (_asset$data = asset.data) != null && _asset$data.events) {
          for (let i = 0; i < animations.length; i++) {
            animations[i].events = new AnimEvents(Object.values(asset.data.events));
          }
        }

        glbResources.destroy();
        return animations;
      }

      return null;
    }

    return this['_parseAnimationV' + data.animation.version](data);
  }

  patch(asset, assets) {}

  _parseAnimationV3(data) {
    const animData = data.animation;
    const anim = new Animation();
    anim.name = animData.name;
    anim.duration = animData.duration;

    for (let i = 0; i < animData.nodes.length; i++) {
      const node = new Node$1();
      const n = animData.nodes[i];
      node._name = n.name;

      for (let j = 0; j < n.keys.length; j++) {
        const k = n.keys[j];
        const t = k.time;
        const p = k.pos;
        const r = k.rot;
        const s = k.scale;
        const pos = new Vec3(p[0], p[1], p[2]);
        const rot = new Quat().setFromEulerAngles(r[0], r[1], r[2]);
        const scl = new Vec3(s[0], s[1], s[2]);
        const key = new Key(t, pos, rot, scl);

        node._keys.push(key);
      }

      anim.addNode(node);
    }

    return anim;
  }

  _parseAnimationV4(data) {
    const animData = data.animation;
    const anim = new Animation();
    anim.name = animData.name;
    anim.duration = animData.duration;

    for (let i = 0; i < animData.nodes.length; i++) {
      const node = new Node$1();
      const n = animData.nodes[i];
      node._name = n.name;
      const defPos = n.defaults.p;
      const defRot = n.defaults.r;
      const defScl = n.defaults.s;

      for (let j = 0; j < n.keys.length; j++) {
        const k = n.keys[j];
        const t = k.t;
        const p = defPos ? defPos : k.p;
        const r = defRot ? defRot : k.r;
        const s = defScl ? defScl : k.s;
        const pos = new Vec3(p[0], p[1], p[2]);
        const rot = new Quat().setFromEulerAngles(r[0], r[1], r[2]);
        const scl = new Vec3(s[0], s[1], s[2]);
        const key = new Key(t, pos, rot, scl);

        node._keys.push(key);
      }

      anim.addNode(node);
    }

    return anim;
  }

}

const ie = function () {
  if (typeof window === 'undefined') {
    return false;
  }

  const ua = window.navigator.userAgent;
  const msie = ua.indexOf('MSIE ');

  if (msie > 0) {
    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
  }

  const trident = ua.indexOf('Trident/');

  if (trident > 0) {
    const rv = ua.indexOf('rv:');
    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
  }

  return false;
}();

const supportedExtensions = ['.ogg', '.mp3', '.wav', '.mp4a', '.m4a', '.mp4', '.aac', '.opus'];

class AudioHandler {
  constructor(app) {
    this.handlerType = "audio";
    this.manager = app.soundManager;
    this.maxRetries = 0;
  }

  _isSupported(url) {
    const ext = path.getExtension(url);
    return supportedExtensions.indexOf(ext) > -1;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const success = function success(resource) {
      callback(null, new Sound(resource));
    };

    const error = function error(err) {
      let msg = 'Error loading audio url: ' + url.original;

      if (err) {
        msg += ': ' + (err.message || err);
      }

      console.warn(msg);
      callback(msg);
    };

    if (this._createSound) {
      if (!this._isSupported(url.original)) {
        error(`Audio format for ${url.original} not supported`);
        return;
      }

      this._createSound(url.load, success, error);
    } else {
      error(null);
    }
  }

  open(url, data) {
    return data;
  }

  patch(asset, assets) {}

  _createSound(url, success, error) {
    if (hasAudioContext()) {
      const manager = this.manager;

      if (!manager.context) {
        error('Audio manager has no audio context');
        return;
      }

      const options = {
        retry: this.maxRetries > 0,
        maxRetries: this.maxRetries
      };

      if (url.startsWith('blob:') || url.startsWith('data:')) {
        options.responseType = Http.ResponseType.ARRAY_BUFFER;
      }

      http.get(url, options, function (err, response) {
        if (err) {
          error(err);
          return;
        }

        manager.context.decodeAudioData(response, success, error);
      });
    } else {
      let audio = null;

      try {
        audio = new Audio();
      } catch (e) {
        error('No support for Audio element');
        return;
      }

      if (ie) {
        document.body.appendChild(audio);
      }

      const onReady = function onReady() {
        audio.removeEventListener('canplaythrough', onReady);

        if (ie) {
          document.body.removeChild(audio);
        }

        success(audio);
      };

      audio.onerror = function () {
        audio.onerror = null;

        if (ie) {
          document.body.removeChild(audio);
        }

        error();
      };

      audio.addEventListener('canplaythrough', onReady);
      audio.src = url;
    }
  }

}

class BinaryHandler {
  constructor(app) {
    this.handlerType = "binary";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    http.get(url.load, {
      responseType: Http.ResponseType.ARRAY_BUFFER,
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(`Error loading binary resource: ${url.original} [${err}]`);
      }
    });
  }

  open(url, data) {
    return data;
  }

  patch(asset, assets) {}

}

class ContainerResource {
  instantiateModelEntity(options) {
    return null;
  }

  instantiateRenderEntity(options) {
    return null;
  }

  getMaterialVariants() {
    return null;
  }

  applyMaterialVariant(entity, name) {}

  applyMaterialVariantInstances(instances, name) {}

}

class ContainerHandler {
  constructor(app) {
    this.handlerType = "container";
    this.glbParser = new GlbParser(app.graphicsDevice, app.assets, 0);
    this.parsers = {};
  }

  set maxRetries(value) {
    this.glbParser.maxRetries = value;

    for (const parser in this.parsers) {
      if (this.parsers.hasOwnProperty(parser)) {
        this.parsers[parser].maxRetries = value;
      }
    }
  }

  get maxRetries() {
    return this.glbParser.maxRetries;
  }

  _getUrlWithoutParams(url) {
    return url.indexOf('?') >= 0 ? url.split('?')[0] : url;
  }

  _getParser(url) {
    const ext = url ? path.getExtension(this._getUrlWithoutParams(url)).toLowerCase().replace('.', '') : null;
    return this.parsers[ext] || this.glbParser;
  }

  load(url, callback, asset) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    this._getParser(url.original).load(url, callback, asset);
  }

  open(url, data, asset) {
    return this._getParser(url).open(url, data, asset);
  }

  patch(asset, assets) {}

}

class CssHandler {
  constructor(app) {
    this.handlerType = "css";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    http.get(url.load, {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(`Error loading css resource: ${url.original} [${err}]`);
      }
    });
  }

  open(url, data) {
    return data;
  }

  patch(asset, assets) {}

}

function createStyle(cssString) {
  const result = document.createElement('style');
  result.type = 'text/css';

  if (result.styleSheet) {
    result.styleSheet.cssText = cssString;
  } else {
    result.appendChild(document.createTextNode(cssString));
  }

  return result;
}

class CubemapHandler {
  constructor(app) {
    this.handlerType = "cubemap";
    this._device = app.graphicsDevice;
    this._registry = app.assets;
    this._loader = app.loader;
  }

  load(url, callback, asset) {
    this.loadAssets(asset, callback);
  }

  open(url, data, asset) {
    return asset ? asset.resource : null;
  }

  patch(asset, registry) {
    this.loadAssets(asset, function (err, result) {
      if (err) {
        registry.fire('error', asset);
        registry.fire('error:' + asset.id, err, asset);
        asset.fire('error', asset);
      }
    });
  }

  getAssetIds(cubemapAsset) {
    const result = [];
    result[0] = cubemapAsset.file;

    if ((cubemapAsset.loadFaces || !cubemapAsset.file) && cubemapAsset.data && cubemapAsset.data.textures) {
      for (let i = 0; i < 6; ++i) {
        result[i + 1] = cubemapAsset.data.textures[i];
      }
    } else {
      result[1] = result[2] = result[3] = result[4] = result[5] = result[6] = null;
    }

    return result;
  }

  compareAssetIds(assetIdA, assetIdB) {
    if (assetIdA && assetIdB) {
      if (parseInt(assetIdA, 10) === assetIdA || typeof assetIdA === 'string') {
        return assetIdA === assetIdB;
      }

      return assetIdA.url === assetIdB.url;
    }

    return assetIdA !== null === (assetIdB !== null);
  }

  update(cubemapAsset, assetIds, assets) {
    const assetData = cubemapAsset.data || {};
    const oldAssets = cubemapAsset._handlerState.assets;
    const oldResources = cubemapAsset._resources;
    let tex, mip, i;
    const resources = [null, null, null, null, null, null, null];

    const getType = function getType() {
      if (assetData.hasOwnProperty('type')) {
        return assetData.type;
      }

      if (assetData.hasOwnProperty('rgbm')) {
        return assetData.rgbm ? TEXTURETYPE_RGBM : TEXTURETYPE_DEFAULT;
      }

      return null;
    };

    if (!cubemapAsset.loaded || assets[0] !== oldAssets[0]) {
      if (assets[0]) {
        tex = assets[0].resource;

        for (i = 0; i < 6; ++i) {
          resources[i + 1] = new Texture(this._device, {
            name: cubemapAsset.name + '_prelitCubemap' + (tex.width >> i),
            cubemap: true,
            type: getType() || tex.type,
            width: tex.width >> i,
            height: tex.height >> i,
            format: tex.format,
            levels: [tex._levels[i]],
            fixCubemapSeams: true,
            addressU: ADDRESS_CLAMP_TO_EDGE,
            addressV: ADDRESS_CLAMP_TO_EDGE,
            mipmaps: i === 0
          });
        }
      }
    } else {
      resources[1] = oldResources[1] || null;
      resources[2] = oldResources[2] || null;
      resources[3] = oldResources[3] || null;
      resources[4] = oldResources[4] || null;
      resources[5] = oldResources[5] || null;
      resources[6] = oldResources[6] || null;
    }

    const faceAssets = assets.slice(1);

    if (!cubemapAsset.loaded || !this.cmpArrays(faceAssets, oldAssets.slice(1))) {
      if (faceAssets.indexOf(null) === -1) {
        const faceTextures = faceAssets.map(function (asset) {
          return asset.resource;
        });
        const faceLevels = [];

        for (mip = 0; mip < faceTextures[0]._levels.length; ++mip) {
          faceLevels.push(faceTextures.map(function (faceTexture) {
            return faceTexture._levels[mip];
          }));
        }

        const format = faceTextures[0].format;
        const faces = new Texture(this._device, {
          name: cubemapAsset.name + '_faces',
          cubemap: true,
          type: getType() || faceTextures[0].type,
          width: faceTextures[0].width,
          height: faceTextures[0].height,
          format: format === PIXELFORMAT_R8_G8_B8 ? PIXELFORMAT_R8_G8_B8_A8 : format,
          levels: faceLevels,
          minFilter: assetData.hasOwnProperty('minFilter') ? assetData.minFilter : faceTextures[0].minFilter,
          magFilter: assetData.hasOwnProperty('magFilter') ? assetData.magFilter : faceTextures[0].magFilter,
          anisotropy: assetData.hasOwnProperty('anisotropy') ? assetData.anisotropy : 1,
          addressU: ADDRESS_CLAMP_TO_EDGE,
          addressV: ADDRESS_CLAMP_TO_EDGE,
          fixCubemapSeams: !!assets[0]
        });
        resources[0] = faces;
      }
    } else {
      resources[0] = oldResources[0] || null;
    }

    if (!this.cmpArrays(resources, oldResources)) {
      cubemapAsset.resources = resources;
      cubemapAsset._handlerState.assetIds = assetIds;
      cubemapAsset._handlerState.assets = assets;

      for (i = 0; i < oldResources.length; ++i) {
        if (oldResources[i] !== null && resources.indexOf(oldResources[i]) === -1) {
          oldResources[i].destroy();
        }
      }
    }

    for (i = 0; i < oldAssets.length; ++i) {
      if (oldAssets[i] !== null && assets.indexOf(oldAssets[i]) === -1) {
        oldAssets[i].unload();
      }
    }
  }

  cmpArrays(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return false;
    }

    for (let i = 0; i < arr1.length; ++i) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }

    return true;
  }

  resolveId(value) {
    const valueInt = parseInt(value, 10);
    return valueInt === value || valueInt.toString() === value ? valueInt : value;
  }

  loadAssets(cubemapAsset, callback) {
    if (!cubemapAsset.hasOwnProperty('_handlerState')) {
      cubemapAsset._handlerState = {
        assetIds: [null, null, null, null, null, null, null],
        assets: [null, null, null, null, null, null, null]
      };
    }

    const self = this;
    const assetIds = self.getAssetIds(cubemapAsset);
    const assets = [null, null, null, null, null, null, null];
    const loadedAssetIds = cubemapAsset._handlerState.assetIds;
    const loadedAssets = cubemapAsset._handlerState.assets;
    const registry = self._registry;
    let awaiting = 7;

    const onLoad = function onLoad(index, asset) {
      assets[index] = asset;
      awaiting--;

      if (awaiting === 0) {
        self.update(cubemapAsset, assetIds, assets);
        callback(null, cubemapAsset.resources);
      }
    };

    const onError = function onError(index, err, asset) {
      callback(err);
    };

    const processTexAsset = function processTexAsset(index, texAsset) {
      if (texAsset.loaded) {
        onLoad(index, texAsset);
      } else {
        registry.once('load:' + texAsset.id, onLoad.bind(self, index));
        registry.once('error:' + texAsset.id, onError.bind(self, index));

        if (!texAsset.loading) {
          registry.load(texAsset);
        }
      }
    };

    let texAsset;

    for (let i = 0; i < 7; ++i) {
      const assetId = this.resolveId(assetIds[i]);

      if (!assetId) {
        onLoad(i, null);
      } else if (self.compareAssetIds(assetId, loadedAssetIds[i])) {
        onLoad(i, loadedAssets[i]);
      } else if (parseInt(assetId, 10) === assetId) {
        texAsset = registry.get(assetId);

        if (texAsset) {
          processTexAsset(i, texAsset);
        } else {
          setTimeout(function (index, assetId_) {
            const texAsset = registry.get(assetId_);

            if (texAsset) {
              processTexAsset(index, texAsset);
            } else {
              onError(index, 'failed to find dependent cubemap asset=' + assetId_);
            }
          }.bind(null, i, assetId));
        }
      } else {
        const file = typeof assetId === 'string' ? {
          url: assetId,
          filename: assetId
        } : assetId;
        texAsset = new Asset(cubemapAsset.name + '_part_' + i, 'texture', file);
        registry.add(texAsset);
        registry.once('load:' + texAsset.id, onLoad.bind(self, i));
        registry.once('error:' + texAsset.id, onError.bind(self, i));
        registry.load(texAsset);
      }
    }
  }

}

class FolderHandler {
  constructor() {
    this.handlerType = "folder";
  }

  load(url, callback) {
    callback(null, null);
  }

  open(url, data) {
    return data;
  }

}

function upgradeDataSchema(data) {
  if (data.version < 3) {
    if (data.version < 2) {
      data.info.maps = data.info.maps || [{
        width: data.info.width,
        height: data.info.height
      }];
    }

    data.chars = Object.keys(data.chars || {}).reduce(function (newChars, key) {
      const existing = data.chars[key];
      const newKey = existing.letter !== undefined ? existing.letter : string.fromCodePoint(key);

      if (data.version < 2) {
        existing.map = existing.map || 0;
      }

      newChars[newKey] = existing;
      return newChars;
    }, {});
    data.version = 3;
  }

  return data;
}

class FontHandler {
  constructor(app) {
    this.handlerType = "font";
    this._loader = app.loader;
    this.maxRetries = 0;
  }

  load(url, callback, asset) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const self = this;

    if (path.getExtension(url.original) === '.json') {
      http.get(url.load, {
        retry: this.maxRetries > 0,
        maxRetries: this.maxRetries
      }, function (err, response) {
        if (!err) {
          const data = upgradeDataSchema(response);

          self._loadTextures(url.load.replace('.json', '.png'), data, function (err, textures) {
            if (err) return callback(err);
            callback(null, {
              data: data,
              textures: textures
            });
          });
        } else {
          callback(`Error loading font resource: ${url.original} [${err}]`);
        }
      });
    } else {
      if (asset && asset.data) {
        asset.data = upgradeDataSchema(asset.data);
      }

      this._loadTextures(url.load, asset && asset.data, callback);
    }
  }

  _loadTextures(url, data, callback) {
    const numTextures = data.info.maps.length;
    let numLoaded = 0;
    let error = null;
    const textures = new Array(numTextures);
    const loader = this._loader;

    const loadTexture = function loadTexture(index) {
      const onLoaded = function onLoaded(err, texture) {
        if (error) return;

        if (err) {
          error = err;
          return callback(err);
        }

        texture.upload();
        textures[index] = texture;
        numLoaded++;

        if (numLoaded === numTextures) {
          callback(null, textures);
        }
      };

      if (index === 0) {
        loader.load(url, 'texture', onLoaded);
      } else {
        loader.load(url.replace('.png', index + '.png'), 'texture', onLoaded);
      }
    };

    for (let i = 0; i < numTextures; i++) loadTexture(i);
  }

  open(url, data, asset) {
    let font;

    if (data.textures) {
      font = new Font(data.textures, data.data);
    } else {
      font = new Font(data, null);
    }

    return font;
  }

  patch(asset, assets) {
    const font = asset.resource;

    if (!font.data && asset.data) {
      font.data = asset.data;
    } else if (!asset.data && font.data) {
      asset.data = font.data;
    }

    if (asset.data) {
      asset.data = upgradeDataSchema(asset.data);
    }
  }

}

const CompressUtils = {
  setCompressedPRS: function (entity, data, compressed) {
    const a = compressed.singleVecs;
    let b, i;
    const v = data.___1;

    if (!v) {
      b = compressed.tripleVecs;
      i = data.___2;
    }

    let n = v ? v[0] : b[i];
    entity.setLocalPosition(a[n], a[n + 1], a[n + 2]);
    n = v ? v[1] : b[i + 1];
    entity.setLocalEulerAngles(a[n], a[n + 1], a[n + 2]);
    n = v ? v[2] : b[i + 2];
    entity.setLocalScale(a[n], a[n + 1], a[n + 2]);
  },
  oneCharToKey: function (s, data) {
    const i = s.charCodeAt(0) - data.fieldFirstCode;
    return data.fieldArray[i];
  },
  multCharToKey: function (s, data) {
    let ind = 0;

    for (let i = 0; i < s.length; i++) {
      ind = ind * data.fieldCodeBase + s.charCodeAt(i) - data.fieldFirstCode;
    }

    return data.fieldArray[ind];
  }
};

class Decompress {
  constructor(node, data) {
    this._node = node;
    this._data = data;
  }

  run() {
    const type = Object.prototype.toString.call(this._node);

    if (type === '[object Object]') {
      this._handleMap();
    } else if (type === '[object Array]') {
      this._handleArray();
    } else {
      this._result = this._node;
    }

    return this._result;
  }

  _handleMap() {
    this._result = {};
    const a = Object.keys(this._node);
    a.forEach(this._handleKey, this);
  }

  _handleKey(origKey) {
    let newKey = origKey;
    const len = origKey.length;

    if (len === 1) {
      newKey = CompressUtils.oneCharToKey(origKey, this._data);
    } else if (len === 2) {
      newKey = CompressUtils.multCharToKey(origKey, this._data);
    }

    this._result[newKey] = new Decompress(this._node[origKey], this._data).run();
  }

  _handleArray() {
    this._result = [];

    this._node.forEach(this._handleArElt, this);
  }

  _handleArElt(elt) {
    const v = new Decompress(elt, this._data).run();

    this._result.push(v);
  }

}

class SceneParser {
  constructor(app, isTemplate) {
    this._app = app;
    this._isTemplate = isTemplate;
  }

  parse(data) {
    const entities = {};
    let parent = null;
    const compressed = data.compressedFormat;

    if (compressed && !data.entDecompressed) {
      data.entDecompressed = true;
      data.entities = new Decompress(data.entities, compressed).run();
    }

    for (const id in data.entities) {
      const curData = data.entities[id];

      const curEnt = this._createEntity(curData, compressed);

      entities[id] = curEnt;

      if (curData.parent === null) {
        parent = curEnt;
      }
    }

    for (const id in data.entities) {
      const curEnt = entities[id];
      const children = data.entities[id].children;
      const len = children.length;

      for (let i = 0; i < len; i++) {
        const childEnt = entities[children[i]];

        if (childEnt) {
          curEnt.addChild(childEnt);
        }
      }
    }

    this._openComponentData(parent, data.entities);

    return parent;
  }

  _createEntity(data, compressed) {
    const entity = new Entity(data.name, this._app);
    entity.setGuid(data.resource_id);

    this._setPosRotScale(entity, data, compressed);

    entity._enabled = data.enabled !== undefined ? data.enabled : true;

    if (this._isTemplate) {
      entity._template = true;
    } else {
      entity._enabledInHierarchy = entity._enabled;
    }

    entity.template = data.template;

    if (data.tags) {
      for (let i = 0; i < data.tags.length; i++) {
        entity.tags.add(data.tags[i]);
      }
    }

    if (data.labels) {
      data.labels.forEach(function (label) {
        entity.addLabel(label);
      });
    }

    return entity;
  }

  _setPosRotScale(entity, data, compressed) {
    if (compressed) {
      CompressUtils.setCompressedPRS(entity, data, compressed);
    } else {
      const p = data.position;
      const r = data.rotation;
      const s = data.scale;
      entity.setLocalPosition(p[0], p[1], p[2]);
      entity.setLocalEulerAngles(r[0], r[1], r[2]);
      entity.setLocalScale(s[0], s[1], s[2]);
    }
  }

  _openComponentData(entity, entities) {
    const systemsList = this._app.systems.list;
    let len = systemsList.length;
    const entityData = entities[entity.getGuid()];

    for (let i = 0; i < len; i++) {
      const system = systemsList[i];
      const componentData = entityData.components[system.id];

      if (componentData) {
        system.addComponent(entity, componentData);
      }
    }

    len = entityData.children.length;
    const children = entity._children;

    for (let i = 0; i < len; i++) {
      children[i] = this._openComponentData(children[i], entities);
    }

    return entity;
  }

}

const SceneUtils = {
  load: function (url, maxRetries, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    http.get(url.load, {
      retry: maxRetries > 0,
      maxRetries: maxRetries
    }, function (err, response) {
      if (!err) {
        callback(err, response);
      } else {
        let errMsg = 'Error while loading scene JSON ' + url.original;

        if (err.message) {
          errMsg += ': ' + err.message;

          if (err.stack) {
            errMsg += '\n' + err.stack;
          }
        } else {
          errMsg += ': ' + err;
        }

        callback(errMsg);
      }
    });
  }
};

class HierarchyHandler {
  constructor(app) {
    this.handlerType = "hierarchy";
    this._app = app;
    this.maxRetries = 0;
  }

  load(url, callback) {
    SceneUtils.load(url, this.maxRetries, callback);
  }

  open(url, data) {
    this._app.systems.script.preloading = true;
    const parser = new SceneParser(this._app, false);
    const parent = parser.parse(data);
    this._app.systems.script.preloading = false;
    return parent;
  }

}

class HtmlHandler {
  constructor(app) {
    this.handlerType = "html";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    http.get(url.load, {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(`Error loading html resource: ${url.original} [${err}]`);
      }
    });
  }

  open(url, data) {
    return data;
  }

  patch(asset, assets) {}

}

class JsonHandler {
  constructor(app) {
    this.handlerType = "json";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const options = {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };

    if (url.load.startsWith('blob:')) {
      options.responseType = Http.ResponseType.JSON;
    }

    http.get(url.load, options, function (err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(`Error loading JSON resource: ${url.original} [${err}]`);
      }
    });
  }

  open(url, data) {
    return data;
  }

  patch(asset, assets) {}

}

class StandardMaterialValidator {
  constructor() {
    this.removeInvalid = true;
    this.valid = true;
    this.enumValidators = {
      occludeSpecular: this._createEnumValidator([SPECOCC_NONE, SPECOCC_AO, SPECOCC_GLOSSDEPENDENT]),
      cull: this._createEnumValidator([CULLFACE_NONE, CULLFACE_BACK, CULLFACE_FRONT, CULLFACE_FRONTANDBACK]),
      blendType: this._createEnumValidator([BLEND_SUBTRACTIVE, BLEND_ADDITIVE, BLEND_NORMAL, BLEND_NONE, BLEND_PREMULTIPLIED, BLEND_MULTIPLICATIVE, BLEND_ADDITIVEALPHA, BLEND_MULTIPLICATIVE2X, BLEND_SCREEN, BLEND_MIN, BLEND_MAX]),
      depthFunc: this._createEnumValidator([FUNC_NEVER, FUNC_LESS, FUNC_EQUAL, FUNC_LESSEQUAL, FUNC_GREATER, FUNC_NOTEQUAL, FUNC_GREATEREQUAL, FUNC_ALWAYS]),
      shadingModel: this._createEnumValidator([SPECULAR_PHONG, SPECULAR_BLINN])
    };
  }

  setInvalid(key, data) {
    this.valid = false;

    if (this.removeInvalid) {
      delete data[key];
    }
  }

  validate(data) {
    const TYPES = standardMaterialParameterTypes;
    const REMOVED = standardMaterialRemovedParameters;
    const pathMapping = data.mappingFormat === 'path';

    for (const key in data) {
      const type = TYPES[key];

      if (!type) {
        if (REMOVED[key]) {
          delete data[key];
        } else {
          this.valid = false;
        }

        continue;
      }

      if (type.startsWith('enum')) {
        const enumType = type.split(':')[1];

        if (this.enumValidators[enumType]) {
          if (!this.enumValidators[enumType](data[key])) {
            this.setInvalid(key, data);
          }
        }
      } else if (type === 'number') {
        if (typeof data[key] !== 'number') {
          this.setInvalid(key, data);
        }
      } else if (type === 'boolean') {
        if (typeof data[key] !== 'boolean') {
          this.setInvalid(key, data);
        }
      } else if (type === 'string') {
        if (typeof data[key] !== 'string') {
          this.setInvalid(key, data);
        }
      } else if (type === 'vec2') {
        if (!(data[key] instanceof Array && data[key].length === 2)) {
          this.setInvalid(key, data);
        }
      } else if (type === 'rgb') {
        if (!(data[key] instanceof Array && data[key].length === 3)) {
          this.setInvalid(key, data);
        }
      } else if (type === 'texture') {
        if (!pathMapping) {
          if (!(typeof data[key] === 'number' || data[key] === null)) {
            if (!(data[key] instanceof Texture)) {
              this.setInvalid(key, data);
            }
          }
        } else {
          if (!(typeof data[key] === 'string' || data[key] === null)) {
            if (!(data[key] instanceof Texture)) {
              this.setInvalid(key, data);
            }
          }
        }
      } else if (type === 'boundingbox') {
        if (!(data[key].center && data[key].center instanceof Array && data[key].center.length === 3)) {
          this.setInvalid(key, data);
        }

        if (!(data[key].halfExtents && data[key].halfExtents instanceof Array && data[key].halfExtents.length === 3)) {
          this.setInvalid(key, data);
        }
      } else if (type === 'cubemap') {
        if (!(typeof data[key] === 'number' || data[key] === null || data[key] === undefined)) {
          if (!(data[key] instanceof Texture && data[key].cubemap)) {
            this.setInvalid(key, data);
          }
        }
      } else if (type === 'chunks') {
        const chunkNames = Object.keys(data[key]);

        for (let i = 0; i < chunkNames.length; i++) {
          if (typeof data[key][chunkNames[i]] !== 'string') {
            this.setInvalid(chunkNames[i], data[key]);
          }
        }
      } else {
        console.error('Unknown material type: ' + type);
      }
    }

    data.validated = true;
    return this.valid;
  }

  _createEnumValidator(values) {
    return function (value) {
      return values.indexOf(value) >= 0;
    };
  }

}

class JsonStandardMaterialParser {
  constructor() {
    this._validator = null;
  }

  parse(input) {
    const migrated = this.migrate(input);

    const validated = this._validate(migrated);

    const material = new StandardMaterial();
    this.initialize(material, validated);
    return material;
  }

  initialize(material, data) {
    if (!data.validated) {
      data = this._validate(data);
    }

    if (data.chunks) {
      material.chunks = _extends({}, data.chunks);
    }

    for (const key in data) {
      const type = standardMaterialParameterTypes[key];
      const value = data[key];

      if (type === 'vec2') {
        material[key] = new Vec2(value[0], value[1]);
      } else if (type === 'rgb') {
        material[key] = new Color(value[0], value[1], value[2]);
      } else if (type === 'texture') {
        if (value instanceof Texture) {
          material[key] = value;
        } else if (!(material[key] instanceof Texture && typeof value === 'number' && value > 0)) {
          material[key] = null;
        }
      } else if (type === 'cubemap') {
        if (value instanceof Texture) {
          material[key] = value;
        } else if (!(material[key] instanceof Texture && typeof value === 'number' && value > 0)) {
          material[key] = null;
        }

        if (key === 'cubeMap' && !value) {
          material.prefilteredCubemaps = null;
        }
      } else if (type === 'boundingbox') {
        const center = new Vec3(value.center[0], value.center[1], value.center[2]);
        const halfExtents = new Vec3(value.halfExtents[0], value.halfExtents[1], value.halfExtents[2]);
        material[key] = new BoundingBox(center, halfExtents);
      } else {
        material[key] = data[key];
      }
    }

    material.update();
  }

  migrate(data) {
    if (data.shadingModel === undefined) {
      if (data.shader === 'blinn') {
        data.shadingModel = SPECULAR_BLINN;
      } else {
        data.shadingModel = SPECULAR_PHONG;
      }
    }

    if (data.shader) delete data.shader;

    if (data.mapping_format) {
      data.mappingFormat = data.mapping_format;
      delete data.mapping_format;
    }

    let i;
    const RENAMED_PROPERTIES = [['bumpMapFactor', 'bumpiness'], ['aoUvSet', 'aoMapUv'], ['aoMapVertexColor', 'aoVertexColor'], ['diffuseMapVertexColor', 'diffuseVertexColor'], ['emissiveMapVertexColor', 'emissiveVertexColor'], ['specularMapVertexColor', 'specularVertexColor'], ['metalnessMapVertexColor', 'metalnessVertexColor'], ['opacityMapVertexColor', 'opacityVertexColor'], ['glossMapVertexColor', 'glossVertexColor'], ['lightMapVertexColor', 'lightVertexColor'], ['diffuseMapTint', 'diffuseTint'], ['specularMapTint', 'specularTint'], ['emissiveMapTint', 'emissiveTint'], ['metalnessMapTint', 'metalnessTint']];

    for (i = 0; i < RENAMED_PROPERTIES.length; i++) {
      const _old = RENAMED_PROPERTIES[i][0];
      const _new = RENAMED_PROPERTIES[i][1];

      if (data[_old] !== undefined && !(data[_new] !== undefined)) {
        data[_new] = data[_old];
        delete data[_old];
      }
    }

    const DEPRECATED_PROPERTIES = ['fresnelFactor', 'shadowSampleType'];

    for (i = 0; i < DEPRECATED_PROPERTIES.length; i++) {
      const name = DEPRECATED_PROPERTIES[i];

      if (data.hasOwnProperty(name)) {
        delete data[name];
      }
    }

    return data;
  }

  _validate(data) {
    if (!data.validated) {
      if (!this._validator) {
        this._validator = new StandardMaterialValidator();
      }

      this._validator.validate(data);
    }

    return data;
  }

}

class AssetReference {
  constructor(propertyName, parent, registry, callbacks, scope) {
    this.propertyName = propertyName;
    this.parent = parent;
    this._scope = scope;
    this._registry = registry;
    this.id = null;
    this.url = null;
    this.asset = null;
    this._onAssetLoad = callbacks.load;
    this._onAssetAdd = callbacks.add;
    this._onAssetRemove = callbacks.remove;
    this._onAssetUnload = callbacks.unload;
  }

  set id(value) {
    if (this.url) throw Error('Can\'t set id and url');

    this._unbind();

    this._id = value;
    this.asset = this._registry.get(this._id);

    this._bind();
  }

  get id() {
    return this._id;
  }

  set url(value) {
    if (this.id) throw Error('Can\'t set id and url');

    this._unbind();

    this._url = value;
    this.asset = this._registry.getByUrl(this._url);

    this._bind();
  }

  get url() {
    return this._url;
  }

  _bind() {
    if (this.id) {
      if (this._onAssetLoad) this._registry.on('load:' + this.id, this._onLoad, this);
      if (this._onAssetAdd) this._registry.once('add:' + this.id, this._onAdd, this);
      if (this._onAssetRemove) this._registry.on('remove:' + this.id, this._onRemove, this);
      if (this._onAssetUnload) this._registry.on('unload:' + this.id, this._onUnload, this);
    }

    if (this.url) {
      if (this._onAssetLoad) this._registry.on('load:url:' + this.url, this._onLoad, this);
      if (this._onAssetAdd) this._registry.once('add:url:' + this.url, this._onAdd, this);
      if (this._onAssetRemove) this._registry.on('remove:url:' + this.url, this._onRemove, this);
    }
  }

  _unbind() {
    if (this.id) {
      if (this._onAssetLoad) this._registry.off('load:' + this.id, this._onLoad, this);
      if (this._onAssetAdd) this._registry.off('add:' + this.id, this._onAdd, this);
      if (this._onAssetRemove) this._registry.off('remove:' + this.id, this._onRemove, this);
      if (this._onAssetUnload) this._registry.off('unload:' + this.id, this._onUnload, this);
    }

    if (this.url) {
      if (this._onAssetLoad) this._registry.off('load:' + this.url, this._onLoad, this);
      if (this._onAssetAdd) this._registry.off('add:' + this.url, this._onAdd, this);
      if (this._onAssetRemove) this._registry.off('remove:' + this.url, this._onRemove, this);
    }
  }

  _onLoad(asset) {
    this._onAssetLoad.call(this._scope, this.propertyName, this.parent, asset);
  }

  _onAdd(asset) {
    this.asset = asset;

    this._onAssetAdd.call(this._scope, this.propertyName, this.parent, asset);
  }

  _onRemove(asset) {
    this._onAssetRemove.call(this._scope, this.propertyName, this.parent, asset);

    this.asset = null;
  }

  _onUnload(asset) {
    this._onAssetUnload.call(this._scope, this.propertyName, this.parent, asset);
  }

}

const PLACEHOLDER_MAP = {
  aoMap: 'white',
  diffuseMap: 'gray',
  specularMap: 'gray',
  specularityFactorMap: 'white',
  metalnessMap: 'black',
  glossMap: 'gray',
  sheenMap: 'black',
  sheenGlossinessMap: 'gray',
  clearCoatMap: 'black',
  clearCoatGlossMap: 'gray',
  clearCoatNormalMap: 'normal',
  refractionMap: 'white',
  emissiveMap: 'gray',
  normalMap: 'normal',
  heightMap: 'gray',
  opacityMap: 'gray',
  sphereMap: 'gray',
  lightMap: 'white'
};

class MaterialHandler {
  constructor(app) {
    this.handlerType = "material";
    this._assets = app.assets;
    this._device = app.graphicsDevice;
    this._placeholderTextures = null;
    this._parser = new JsonStandardMaterialParser();
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    http.get(url.load, {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        if (callback) {
          response._engine = true;
          callback(null, response);
        }
      } else {
        if (callback) {
          callback(`Error loading material: ${url.original} [${err}]`);
        }
      }
    });
  }

  open(url, data) {
    const material = this._parser.parse(data);

    if (data._engine) {
      material._data = data;
      delete data._engine;
    }

    return material;
  }

  _createPlaceholders() {
    this._placeholderTextures = {};
    const textures = {
      white: [255, 255, 255, 255],
      gray: [128, 128, 128, 255],
      black: [0, 0, 0, 255],
      normal: [128, 128, 255, 255]
    };

    for (const key in textures) {
      if (!textures.hasOwnProperty(key)) continue;
      this._placeholderTextures[key] = new Texture(this._device, {
        width: 2,
        height: 2,
        format: PIXELFORMAT_R8_G8_B8_A8,
        name: 'material_placeholder'
      });

      const pixels = this._placeholderTextures[key].lock();

      for (let i = 0; i < 4; i++) {
        for (let c = 0; c < 4; c++) {
          pixels[i * 4 + c] = textures[key][c];
        }
      }

      this._placeholderTextures[key].unlock();
    }
  }

  patch(asset, assets) {
    if (asset.resource._data) {
      asset._data = asset.resource._data;
      delete asset.resource._data;
    }

    asset.data.name = asset.name;
    asset.resource.name = asset.name;

    this._bindAndAssignAssets(asset, assets);

    asset.off('unload', this._onAssetUnload, this);
    asset.on('unload', this._onAssetUnload, this);
  }

  _onAssetUnload(asset) {
    delete asset.data.parameters;
    delete asset.data.chunks;
    delete asset.data.name;
  }

  _assignTexture(parameterName, materialAsset, texture) {
    materialAsset.resource[parameterName] = texture;
  }

  _getPlaceholderTexture(parameterName) {
    if (!this._placeholderTextures) {
      this._createPlaceholders();
    }

    const placeholder = PLACEHOLDER_MAP[parameterName];
    const texture = this._placeholderTextures[placeholder];
    return texture;
  }

  _assignPlaceholderTexture(parameterName, materialAsset) {
    materialAsset.resource[parameterName] = this._getPlaceholderTexture(parameterName);
  }

  _onTextureLoad(parameterName, materialAsset, textureAsset) {
    this._assignTexture(parameterName, materialAsset, textureAsset.resource);

    materialAsset.resource.update();
  }

  _onTextureAdd(parameterName, materialAsset, textureAsset) {
    this._assets.load(textureAsset);
  }

  _onTextureRemoveOrUnload(parameterName, materialAsset, textureAsset) {
    const material = materialAsset.resource;

    if (material) {
      if (materialAsset.resource[parameterName] === textureAsset.resource) {
        this._assignPlaceholderTexture(parameterName, materialAsset);

        material.update();
      }
    }
  }

  _assignCubemap(parameterName, materialAsset, textures) {
    materialAsset.resource[parameterName] = textures[0];

    if (parameterName === 'cubeMap') {
      materialAsset.resource.prefilteredCubemaps = textures.slice(1);
    }
  }

  _onCubemapLoad(parameterName, materialAsset, cubemapAsset) {
    this._assignCubemap(parameterName, materialAsset, cubemapAsset.resources);

    this._parser.initialize(materialAsset.resource, materialAsset.data);
  }

  _onCubemapAdd(parameterName, materialAsset, cubemapAsset) {
    if (materialAsset.data.shadingModel === SPECULAR_PHONG) {
      materialAsset.loadFaces = true;
    }

    this._assets.load(cubemapAsset);
  }

  _onCubemapRemoveOrUnload(parameterName, materialAsset, cubemapAsset) {
    const material = materialAsset.resource;

    if (materialAsset.data.prefilteredCubeMap128 === cubemapAsset.resources[1]) {
      this._assignCubemap(parameterName, materialAsset, [null, null, null, null, null, null, null]);

      material.update();
    }
  }

  _bindAndAssignAssets(materialAsset, assets) {
    const data = this._parser.migrate(materialAsset.data);

    const material = materialAsset.resource;
    const pathMapping = data.mappingFormat === 'path';
    const TEXTURES = standardMaterialTextureParameters;
    let i, name, assetReference;

    for (i = 0; i < TEXTURES.length; i++) {
      name = TEXTURES[i];
      assetReference = material._assetReferences[name];
      const dataAssetId = data[name];
      const materialTexture = material[name];

      const isPlaceHolderTexture = materialTexture === this._getPlaceholderTexture(name);

      const dataValidated = data.validated;

      if (dataAssetId && (!materialTexture || !dataValidated || isPlaceHolderTexture)) {
        if (!assetReference) {
          assetReference = new AssetReference(name, materialAsset, assets, {
            load: this._onTextureLoad,
            add: this._onTextureAdd,
            remove: this._onTextureRemoveOrUnload,
            unload: this._onTextureRemoveOrUnload
          }, this);
          material._assetReferences[name] = assetReference;
        }

        if (pathMapping) {
          assetReference.url = materialAsset.getAbsoluteUrl(dataAssetId);
        } else {
          assetReference.id = dataAssetId;
        }

        if (assetReference.asset) {
          if (assetReference.asset.resource) {
            this._assignTexture(name, materialAsset, assetReference.asset.resource);
          } else {
            this._assignPlaceholderTexture(name, materialAsset);
          }

          assets.load(assetReference.asset);
        }
      } else {
        if (assetReference) {
          if (pathMapping) {
            assetReference.url = null;
          } else {
            assetReference.id = null;
          }
        }
      }
    }

    const CUBEMAPS = standardMaterialCubemapParameters;

    for (i = 0; i < CUBEMAPS.length; i++) {
      name = CUBEMAPS[i];
      assetReference = material._assetReferences[name];

      if (data[name] && !materialAsset.data.prefilteredCubeMap128) {
        if (!assetReference) {
          assetReference = new AssetReference(name, materialAsset, assets, {
            load: this._onCubemapLoad,
            add: this._onCubemapAdd,
            remove: this._onCubemapRemoveOrUnload,
            unload: this._onCubemapRemoveOrUnload
          }, this);
          material._assetReferences[name] = assetReference;
        }

        if (pathMapping) {
          assetReference.url = data[name];
        } else {
          assetReference.id = data[name];
        }

        if (assetReference.asset) {
          if (assetReference.asset.loaded) {
            this._assignCubemap(name, materialAsset, assetReference.asset.resources);
          }

          assets.load(assetReference.asset);
        }
      }
    }

    this._parser.initialize(material, data);
  }

}

class GlbModelParser {
  constructor(device, defaultMaterial) {
    this._device = device;
    this._defaultMaterial = defaultMaterial;
  }

  parse(data) {
    const glbResources = GlbParser.parse('filename.glb', data, this._device);

    if (glbResources) {
      const model = GlbContainerResource.createModel(glbResources, this._defaultMaterial);
      glbResources.destroy();
      return model;
    }

    return null;
  }

}

class PartitionedVertex {
  constructor() {
    this.index = 0;
    this.boneIndices = [0, 0, 0, 0];
  }

}

class SkinPartition {
  constructor() {
    this.partition = 0;
    this.vertexStart = 0;
    this.vertexCount = 0;
    this.indexStart = 0;
    this.indexCount = 0;
    this.boneIndices = [];
    this.vertices = [];
    this.indices = [];
    this.indexMap = {};
    this.originalMesh = null;
  }

  addVertex(vertex, idx, vertexArray) {
    let remappedIndex = -1;

    if (this.indexMap[idx] !== undefined) {
      remappedIndex = this.indexMap[idx];
      this.indices.push(remappedIndex);
    } else {
      for (let influence = 0; influence < 4; influence++) {
        if (vertexArray.blendWeight.data[idx * 4 + influence] === 0) continue;
        const originalBoneIndex = vertexArray.blendIndices.data[vertex.index * 4 + influence];
        vertex.boneIndices[influence] = this.getBoneRemap(originalBoneIndex);
      }

      remappedIndex = this.vertices.length;
      this.indices.push(remappedIndex);
      this.vertices.push(vertex);
      this.indexMap[idx] = remappedIndex;
    }
  }

  addPrimitive(vertices, vertexIndices, vertexArray, boneLimit) {
    const bonesToAdd = [];
    let bonesToAddCount = 0;
    const vertexCount = vertices.length;

    for (let i = 0; i < vertexCount; i++) {
      const vertex = vertices[i];
      const idx = vertex.index;

      for (let influence = 0; influence < 4; influence++) {
        if (vertexArray.blendWeight.data[idx * 4 + influence] > 0) {
          const boneIndex = vertexArray.blendIndices.data[idx * 4 + influence];
          let needToAdd = true;

          for (let j = 0; j < bonesToAddCount; j++) {
            if (bonesToAdd[j] === boneIndex) {
              needToAdd = false;
              break;
            }
          }

          if (needToAdd) {
            bonesToAdd[bonesToAddCount] = boneIndex;
            const boneRemap = this.getBoneRemap(boneIndex);
            bonesToAddCount += boneRemap === -1 ? 1 : 0;
          }
        }
      }
    }

    if (this.boneIndices.length + bonesToAddCount > boneLimit) {
      return false;
    }

    for (let i = 0; i < bonesToAddCount; i++) {
      this.boneIndices.push(bonesToAdd[i]);
    }

    for (let i = 0; i < vertexCount; i++) {
      this.addVertex(vertices[i], vertexIndices[i], vertexArray);
    }

    return true;
  }

  getBoneRemap(boneIndex) {
    for (let i = 0; i < this.boneIndices.length; i++) {
      if (this.boneIndices[i] === boneIndex) {
        return i;
      }
    }

    return -1;
  }

}

function indicesToReferences(model) {
  const vertices = model.vertices;
  const skins = model.skins;
  const meshes = model.meshes;
  const meshInstances = model.meshInstances;

  for (let i = 0; i < meshes.length; i++) {
    meshes[i].vertices = vertices[meshes[i].vertices];

    if (meshes[i].skin !== undefined) {
      meshes[i].skin = skins[meshes[i].skin];
    }
  }

  for (let i = 0; i < meshInstances.length; i++) {
    meshInstances[i].mesh = meshes[meshInstances[i].mesh];
  }
}

function referencesToIndices(model) {
  const vertices = model.vertices;
  const skins = model.skins;
  const meshes = model.meshes;
  const meshInstances = model.meshInstances;

  for (let i = 0; i < meshes.length; i++) {
    meshes[i].vertices = vertices.indexOf(meshes[i].vertices);

    if (meshes[i].skin !== undefined) {
      meshes[i].skin = skins.indexOf(meshes[i].skin);
    }
  }

  for (let i = 0; i < meshInstances.length; i++) {
    meshInstances[i].mesh = meshes.indexOf(meshInstances[i].mesh);
  }
}

function partitionSkin(model, materialMappings, boneLimit) {
  let i, j, k, index;
  indicesToReferences(model);
  const vertexArrays = model.vertices;
  const skins = model.skins;
  let mesh;
  const meshes = model.meshes;
  const meshInstances = model.meshInstances;

  const getVertex = function getVertex(idx) {
    const vert = new PartitionedVertex();
    vert.index = idx;
    return vert;
  };

  for (i = skins.length - 1; i >= 0; i--) {
    if (skins[i].boneNames.length > boneLimit) {
      const skin = skins.splice(i, 1)[0];
      const meshesToSplit = [];

      for (j = 0; j < meshes.length; j++) {
        if (meshes[j].skin === skin) {
          meshesToSplit.push(meshes[j]);
        }
      }

      for (j = 0; j < meshesToSplit.length; j++) {
        index = meshes.indexOf(meshesToSplit[j]);

        if (index !== -1) {
          meshes.splice(index, 1);
        }
      }

      if (meshesToSplit.length === 0) {
        throw new Error('partitionSkin: There should be at least one mesh that references a skin');
      }

      const vertexArray = meshesToSplit[0].vertices;

      for (j = 1; j < meshesToSplit.length; j++) {
        if (meshesToSplit[j].vertices !== vertexArray) {
          throw new Error('partitionSkin: All meshes that share a skin should also share the same vertex buffer');
        }
      }

      let partition;
      const partitions = [];
      const primitiveVertices = [];
      const primitiveIndices = [];
      let basePartition = 0;

      for (j = 0; j < meshesToSplit.length; j++) {
        mesh = meshesToSplit[j];
        const indices = mesh.indices;

        for (let iIndex = mesh.base; iIndex < mesh.base + mesh.count;) {
          index = indices[iIndex++];
          primitiveVertices[0] = getVertex(index);
          primitiveIndices[0] = index;
          index = indices[iIndex++];
          primitiveVertices[1] = getVertex(index);
          primitiveIndices[1] = index;
          index = indices[iIndex++];
          primitiveVertices[2] = getVertex(index);
          primitiveIndices[2] = index;
          let added = false;

          for (let iBonePartition = basePartition; iBonePartition < partitions.length; iBonePartition++) {
            partition = partitions[iBonePartition];

            if (partition.addPrimitive(primitiveVertices, primitiveIndices, vertexArray, boneLimit)) {
              added = true;
              break;
            }
          }

          if (!added) {
            partition = new SkinPartition();
            partition.originalMesh = mesh;
            partition.addPrimitive(primitiveVertices, primitiveIndices, vertexArray, boneLimit);
            partitions.push(partition);
          }
        }

        basePartition = partitions.length;
      }

      const partitionedVertices = [];
      const partitionedIndices = [];

      for (j = 0; j < partitions.length; j++) {
        partition = partitions[j];

        if (partition.vertices.length && partition.indices.length) {
          const vertexStart = partitionedVertices.length;
          const vertexCount = partition.vertices.length;
          const indexStart = partitionedIndices.length;
          const indexCount = partition.indices.length;
          partition.partition = j;
          partition.vertexStart = vertexStart;
          partition.vertexCount = vertexCount;
          partition.indexStart = indexStart;
          partition.indexCount = indexCount;
          let iSour;
          let iDest;
          iSour = 0;
          iDest = vertexStart;

          while (iSour < vertexCount) {
            partitionedVertices[iDest++] = partition.vertices[iSour++];
          }

          iSour = 0;
          iDest = indexStart;

          while (iSour < indexCount) {
            partitionedIndices[iDest++] = partition.indices[iSour++] + vertexStart;
          }
        }
      }

      const splitSkins = [];

      for (j = 0; j < partitions.length; j++) {
        partition = partitions[j];
        const ibp = [];
        const boneNames = [];

        for (k = 0; k < partition.boneIndices.length; k++) {
          ibp.push(skin.inverseBindMatrices[partition.boneIndices[k]]);
          boneNames.push(skin.boneNames[partition.boneIndices[k]]);
        }

        const splitSkin = {
          inverseBindMatrices: ibp,
          boneNames: boneNames
        };
        splitSkins.push(splitSkin);
        skins.push(splitSkin);
      }

      let attrib, attribName, data, components;
      const splitVertexArray = {};

      for (attribName in vertexArray) {
        splitVertexArray[attribName] = {
          components: vertexArray[attribName].components,
          data: [],
          type: vertexArray[attribName].type
        };
      }

      for (attribName in vertexArray) {
        if (attribName === 'blendIndices') {
          const dstBoneIndices = splitVertexArray[attribName].data;

          for (j = 0; j < partitionedVertices.length; j++) {
            const srcBoneIndices = partitionedVertices[j].boneIndices;
            dstBoneIndices.push(srcBoneIndices[0], srcBoneIndices[1], srcBoneIndices[2], srcBoneIndices[3]);
          }
        } else {
          attrib = vertexArray[attribName];
          data = attrib.data;
          components = attrib.components;

          for (j = 0; j < partitionedVertices.length; j++) {
            index = partitionedVertices[j].index;

            for (k = 0; k < components; k++) {
              splitVertexArray[attribName].data.push(data[index * components + k]);
            }
          }
        }
      }

      vertexArrays[vertexArrays.indexOf(vertexArray)] = splitVertexArray;

      for (j = 0; j < partitions.length; j++) {
        partition = partitions[j];
        mesh = {
          aabb: {
            min: [0, 0, 0],
            max: [0, 0, 0]
          },
          vertices: splitVertexArray,
          skin: splitSkins[j],
          indices: partitionedIndices.splice(0, partition.indexCount),
          type: 'triangles',
          base: 0,
          count: partition.indexCount
        };
        meshes.push(mesh);

        for (k = meshInstances.length - 1; k >= 0; k--) {
          if (meshInstances[k].mesh === partition.originalMesh) {
            meshInstances.push({
              mesh: mesh,
              node: meshInstances[k].node
            });

            if (materialMappings) {
              materialMappings.push({
                material: materialMappings[k].material,
                path: materialMappings[k].path
              });
            }
          }
        }
      }

      for (j = 0; j < partitions.length; j++) {
        partition = partitions[j];

        for (k = meshInstances.length - 1; k >= 0; k--) {
          if (meshInstances[k].mesh === partition.originalMesh) {
            meshInstances.splice(k, 1);

            if (materialMappings) {
              materialMappings.splice(k, 1);
            }
          }
        }
      }
    }
  }

  referencesToIndices(model);
}

const JSON_PRIMITIVE_TYPE = {
  'points': PRIMITIVE_POINTS,
  'lines': PRIMITIVE_LINES,
  'lineloop': PRIMITIVE_LINELOOP,
  'linestrip': PRIMITIVE_LINESTRIP,
  'triangles': PRIMITIVE_TRIANGLES,
  'trianglestrip': PRIMITIVE_TRISTRIP,
  'trianglefan': PRIMITIVE_TRIFAN
};
const JSON_VERTEX_ELEMENT_TYPE = {
  'int8': TYPE_INT8,
  'uint8': TYPE_UINT8,
  'int16': TYPE_INT16,
  'uint16': TYPE_UINT16,
  'int32': TYPE_INT32,
  'uint32': TYPE_UINT32,
  'float32': TYPE_FLOAT32
};

class JsonModelParser {
  constructor(device, defaultMaterial) {
    this._device = device;
    this._defaultMaterial = defaultMaterial;
  }

  parse(data) {
    const modelData = data.model;

    if (!modelData) {
      return null;
    }

    if (modelData.version <= 1) {
      return null;
    }

    const nodes = this._parseNodes(data);

    const skins = this._parseSkins(data, nodes);

    const vertexBuffers = this._parseVertexBuffers(data);

    const indices = this._parseIndexBuffers(data, vertexBuffers);

    const morphs = this._parseMorphs(data, nodes, vertexBuffers);

    const meshes = this._parseMeshes(data, skins.skins, morphs.morphs, vertexBuffers, indices.buffer, indices.data);

    const meshInstances = this._parseMeshInstances(data, nodes, meshes, skins.skins, skins.instances, morphs.morphs, morphs.instances);

    const model = new Model();
    model.graph = nodes[0];
    model.meshInstances = meshInstances;
    model.skinInstances = skins.instances;
    model.morphInstances = morphs.instances;
    model.getGraph().syncHierarchy();
    return model;
  }

  _parseNodes(data) {
    const modelData = data.model;
    const nodes = [];
    let i;

    for (i = 0; i < modelData.nodes.length; i++) {
      const nodeData = modelData.nodes[i];
      const node = new GraphNode(nodeData.name);
      node.setLocalPosition(nodeData.position[0], nodeData.position[1], nodeData.position[2]);
      node.setLocalEulerAngles(nodeData.rotation[0], nodeData.rotation[1], nodeData.rotation[2]);
      node.setLocalScale(nodeData.scale[0], nodeData.scale[1], nodeData.scale[2]);
      node.scaleCompensation = !!nodeData.scaleCompensation;
      nodes.push(node);
    }

    for (i = 1; i < modelData.parents.length; i++) {
      nodes[modelData.parents[i]].addChild(nodes[i]);
    }

    return nodes;
  }

  _parseSkins(data, nodes) {
    const modelData = data.model;
    const skins = [];
    const skinInstances = [];
    let i, j;

    if (!this._device.supportsBoneTextures && modelData.skins.length > 0) {
      const boneLimit = this._device.getBoneLimit();

      partitionSkin(modelData, null, boneLimit);
    }

    for (i = 0; i < modelData.skins.length; i++) {
      const skinData = modelData.skins[i];
      const inverseBindMatrices = [];

      for (j = 0; j < skinData.inverseBindMatrices.length; j++) {
        const ibm = skinData.inverseBindMatrices[j];
        inverseBindMatrices[j] = new Mat4().set(ibm);
      }

      const skin = new Skin(this._device, inverseBindMatrices, skinData.boneNames);
      skins.push(skin);
      const skinInstance = new SkinInstance(skin);
      const bones = [];

      for (j = 0; j < skin.boneNames.length; j++) {
        const boneName = skin.boneNames[j];
        const bone = nodes[0].findByName(boneName);
        bones.push(bone);
      }

      skinInstance.bones = bones;
      skinInstances.push(skinInstance);
    }

    return {
      skins: skins,
      instances: skinInstances
    };
  }

  _getMorphVertexCount(modelData, morphIndex, vertexBuffers) {
    for (let i = 0; i < modelData.meshes.length; i++) {
      const meshData = modelData.meshes[i];

      if (meshData.morph === morphIndex) {
        const vertexBuffer = vertexBuffers[meshData.vertices];
        return vertexBuffer.numVertices;
      }
    }

    return undefined;
  }

  _parseMorphs(data, nodes, vertexBuffers) {
    const modelData = data.model;
    const morphs = [];
    const morphInstances = [];
    let i, j, vertexCount;
    let targets, morphTarget, morphTargetArray;

    if (modelData.morphs) {
      const sparseToFull = function sparseToFull(data, indices, totalCount) {
        const full = new Float32Array(totalCount * 3);

        for (let s = 0; s < indices.length; s++) {
          const dstIndex = indices[s] * 3;
          full[dstIndex] = data[s * 3];
          full[dstIndex + 1] = data[s * 3 + 1];
          full[dstIndex + 2] = data[s * 3 + 2];
        }

        return full;
      };

      for (i = 0; i < modelData.morphs.length; i++) {
        targets = modelData.morphs[i].targets;
        morphTargetArray = [];
        vertexCount = this._getMorphVertexCount(modelData, i, vertexBuffers);

        for (j = 0; j < targets.length; j++) {
          const targetAabb = targets[j].aabb;
          const min = targetAabb.min;
          const max = targetAabb.max;
          const aabb = new BoundingBox(new Vec3((max[0] + min[0]) * 0.5, (max[1] + min[1]) * 0.5, (max[2] + min[2]) * 0.5), new Vec3((max[0] - min[0]) * 0.5, (max[1] - min[1]) * 0.5, (max[2] - min[2]) * 0.5));
          const indices = targets[j].indices;
          let deltaPositions = targets[j].deltaPositions;
          let deltaNormals = targets[j].deltaNormals;

          if (indices) {
            deltaPositions = sparseToFull(deltaPositions, indices, vertexCount);
            deltaNormals = sparseToFull(deltaNormals, indices, vertexCount);
          }

          morphTarget = new MorphTarget({
            deltaPositions: deltaPositions,
            deltaNormals: deltaNormals,
            name: targets[j].name,
            aabb: aabb
          });
          morphTargetArray.push(morphTarget);
        }

        const morph = new Morph(morphTargetArray, this._device);
        morphs.push(morph);
        const morphInstance = new MorphInstance(morph);
        morphInstances.push(morphInstance);
      }
    }

    return {
      morphs: morphs,
      instances: morphInstances
    };
  }

  _parseVertexBuffers(data) {
    const modelData = data.model;
    const vertexBuffers = [];
    const attributeMap = {
      position: SEMANTIC_POSITION,
      normal: SEMANTIC_NORMAL,
      tangent: SEMANTIC_TANGENT,
      blendWeight: SEMANTIC_BLENDWEIGHT,
      blendIndices: SEMANTIC_BLENDINDICES,
      color: SEMANTIC_COLOR,
      texCoord0: SEMANTIC_TEXCOORD0,
      texCoord1: SEMANTIC_TEXCOORD1,
      texCoord2: SEMANTIC_TEXCOORD2,
      texCoord3: SEMANTIC_TEXCOORD3,
      texCoord4: SEMANTIC_TEXCOORD4,
      texCoord5: SEMANTIC_TEXCOORD5,
      texCoord6: SEMANTIC_TEXCOORD6,
      texCoord7: SEMANTIC_TEXCOORD7
    };

    for (let i = 0; i < modelData.vertices.length; i++) {
      const vertexData = modelData.vertices[i];
      const formatDesc = [];

      for (const attributeName in vertexData) {
        const attribute = vertexData[attributeName];
        formatDesc.push({
          semantic: attributeMap[attributeName],
          components: attribute.components,
          type: JSON_VERTEX_ELEMENT_TYPE[attribute.type],
          normalize: attributeMap[attributeName] === SEMANTIC_COLOR
        });
      }

      const vertexFormat = new VertexFormat(this._device, formatDesc);
      const numVertices = vertexData.position.data.length / vertexData.position.components;
      const vertexBuffer = new VertexBuffer(this._device, vertexFormat, numVertices);
      const iterator = new VertexIterator(vertexBuffer);

      for (let j = 0; j < numVertices; j++) {
        for (const attributeName in vertexData) {
          const attribute = vertexData[attributeName];

          switch (attribute.components) {
            case 1:
              iterator.element[attributeMap[attributeName]].set(attribute.data[j]);
              break;

            case 2:
              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 2], 1.0 - attribute.data[j * 2 + 1]);
              break;

            case 3:
              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 3], attribute.data[j * 3 + 1], attribute.data[j * 3 + 2]);
              break;

            case 4:
              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 4], attribute.data[j * 4 + 1], attribute.data[j * 4 + 2], attribute.data[j * 4 + 3]);
              break;
          }
        }

        iterator.next();
      }

      iterator.end();
      vertexBuffers.push(vertexBuffer);
    }

    return vertexBuffers;
  }

  _parseIndexBuffers(data, vertexBuffers) {
    const modelData = data.model;
    let indexBuffer = null;
    let indexData = null;
    let i;
    let numIndices = 0;

    for (i = 0; i < modelData.meshes.length; i++) {
      const meshData = modelData.meshes[i];

      if (meshData.indices !== undefined) {
        numIndices += meshData.indices.length;
      }
    }

    let maxVerts = 0;

    for (i = 0; i < vertexBuffers.length; i++) {
      maxVerts = Math.max(maxVerts, vertexBuffers[i].numVertices);
    }

    if (numIndices > 0) {
      if (maxVerts > 0xFFFF && this._device.extUintElement) {
        indexBuffer = new IndexBuffer(this._device, INDEXFORMAT_UINT32, numIndices);
        indexData = new Uint32Array(indexBuffer.lock());
      } else {
        indexBuffer = new IndexBuffer(this._device, INDEXFORMAT_UINT16, numIndices);
        indexData = new Uint16Array(indexBuffer.lock());
      }
    }

    return {
      buffer: indexBuffer,
      data: indexData
    };
  }

  _parseMeshes(data, skins, morphs, vertexBuffers, indexBuffer, indexData) {
    const modelData = data.model;
    const meshes = [];
    let indexBase = 0;

    for (let i = 0; i < modelData.meshes.length; i++) {
      const meshData = modelData.meshes[i];
      const meshAabb = meshData.aabb;
      const min = meshAabb.min;
      const max = meshAabb.max;
      const aabb = new BoundingBox(new Vec3((max[0] + min[0]) * 0.5, (max[1] + min[1]) * 0.5, (max[2] + min[2]) * 0.5), new Vec3((max[0] - min[0]) * 0.5, (max[1] - min[1]) * 0.5, (max[2] - min[2]) * 0.5));
      const indexed = meshData.indices !== undefined;
      const mesh = new Mesh(this._device);
      mesh.vertexBuffer = vertexBuffers[meshData.vertices];
      mesh.indexBuffer[0] = indexed ? indexBuffer : null;
      mesh.primitive[0].type = JSON_PRIMITIVE_TYPE[meshData.type];
      mesh.primitive[0].base = indexed ? meshData.base + indexBase : meshData.base;
      mesh.primitive[0].count = meshData.count;
      mesh.primitive[0].indexed = indexed;
      mesh.skin = meshData.skin !== undefined ? skins[meshData.skin] : null;
      mesh.morph = meshData.morph !== undefined ? morphs[meshData.morph] : null;
      mesh.aabb = aabb;

      if (indexed) {
        indexData.set(meshData.indices, indexBase);
        indexBase += meshData.indices.length;
      }

      meshes.push(mesh);
    }

    if (indexBuffer !== null) {
      indexBuffer.unlock();
    }

    return meshes;
  }

  _parseMeshInstances(data, nodes, meshes, skins, skinInstances, morphs, morphInstances) {
    const modelData = data.model;
    const meshInstances = [];
    let i;

    for (i = 0; i < modelData.meshInstances.length; i++) {
      const meshInstanceData = modelData.meshInstances[i];
      const node = nodes[meshInstanceData.node];
      const mesh = meshes[meshInstanceData.mesh];
      const meshInstance = new MeshInstance(mesh, this._defaultMaterial, node);

      if (mesh.skin) {
        const skinIndex = skins.indexOf(mesh.skin);
        meshInstance.skinInstance = skinInstances[skinIndex];
      }

      if (mesh.morph) {
        const morphIndex = morphs.indexOf(mesh.morph);
        meshInstance.morphInstance = morphInstances[morphIndex];
      }

      meshInstances.push(meshInstance);
    }

    return meshInstances;
  }

}

class ModelHandler {
  constructor(app) {
    this.handlerType = "model";
    this._device = app.graphicsDevice;
    this._parsers = [];
    this._defaultMaterial = getDefaultMaterial(this._device);
    this.maxRetries = 0;
    this.addParser(new JsonModelParser(this._device, this._defaultMaterial), function (url, data) {
      return path.getExtension(url) === '.json';
    });
    this.addParser(new GlbModelParser(this._device, this._defaultMaterial), function (url, data) {
      return path.getExtension(url) === '.glb';
    });
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const options = {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };

    if (url.load.startsWith('blob:') || url.load.startsWith('data:')) {
      if (path.getExtension(url.original).toLowerCase() === '.glb') {
        options.responseType = Http.ResponseType.ARRAY_BUFFER;
      } else {
        options.responseType = Http.ResponseType.JSON;
      }
    }

    http.get(url.load, options, function (err, response) {
      if (!callback) return;

      if (!err) {
        callback(null, response);
      } else {
        callback(`Error loading model: ${url.original} [${err}]`);
      }
    });
  }

  open(url, data) {
    for (let i = 0; i < this._parsers.length; i++) {
      const p = this._parsers[i];

      if (p.decider(url, data)) {
        return p.parser.parse(data);
      }
    }

    return null;
  }

  patch(asset, assets) {
    if (!asset.resource) return;
    const data = asset.data;
    const self = this;
    asset.resource.meshInstances.forEach(function (meshInstance, i) {
      if (data.mapping) {
        const handleMaterial = function handleMaterial(asset) {
          if (asset.resource) {
            meshInstance.material = asset.resource;
          } else {
            asset.once('load', handleMaterial);
            assets.load(asset);
          }

          asset.once('remove', function (asset) {
            if (meshInstance.material === asset.resource) {
              meshInstance.material = self._defaultMaterial;
            }
          });
        };

        if (!data.mapping[i]) {
          meshInstance.material = self._defaultMaterial;
          return;
        }

        const id = data.mapping[i].material;
        const url = data.mapping[i].path;
        let material;

        if (id !== undefined) {
          if (!id) {
            meshInstance.material = self._defaultMaterial;
          } else {
            material = assets.get(id);

            if (material) {
              handleMaterial(material);
            } else {
              assets.once('add:' + id, handleMaterial);
            }
          }
        } else if (url) {
          const path = asset.getAbsoluteUrl(data.mapping[i].path);
          material = assets.getByUrl(path);

          if (material) {
            handleMaterial(material);
          } else {
            assets.once('add:url:' + path, handleMaterial);
          }
        }
      }
    });
  }

  addParser(parser, decider) {
    this._parsers.push({
      parser: parser,
      decider: decider
    });
  }

}

function onContainerAssetLoaded(containerAsset) {
  const renderAsset = this;
  if (!renderAsset.resource) return;
  const containerResource = containerAsset.resource;
  const render = containerResource.renders && containerResource.renders[renderAsset.data.renderIndex];

  if (render) {
    renderAsset.resource.meshes = render.resource.meshes;
  }
}

function onContainerAssetAdded(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.on('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.off('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);
  renderAsset.registry.once('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);

  if (!containerAsset.resource) {
    renderAsset.registry.load(containerAsset);
  } else {
    onContainerAssetLoaded.call(renderAsset, containerAsset);
  }
}

function onContainerAssetRemoved(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);

  if (renderAsset.resource) {
    renderAsset.resource.destroy();
  }
}

class RenderHandler {
  constructor(app) {
    this.handlerType = "render";
    this._registry = app.assets;
  }

  load(url, callback, asset) {}

  open(url, data) {
    return new Render();
  }

  patch(asset, registry) {
    if (!asset.data.containerAsset) return;
    const containerAsset = registry.get(asset.data.containerAsset);

    if (!containerAsset) {
      registry.once('add:' + asset.data.containerAsset, onContainerAssetAdded, asset);
      return;
    }

    onContainerAssetAdded.call(asset, containerAsset);
  }

}

class ResourceHandler {
  load(url, callback, asset) {
    throw new Error('not implemented');
  }

  open(url, data, asset) {
    throw new Error('not implemented');
  }

  patch(asset, assets) {}

}

class SceneHandler {
  constructor(app) {
    this.handlerType = "scene";
    this._app = app;
    this.maxRetries = 0;
  }

  load(url, callback) {
    SceneUtils.load(url, this.maxRetries, callback);
  }

  open(url, data) {
    this._app.systems.script.preloading = true;
    const parser = new SceneParser(this._app, false);
    const parent = parser.parse(data);
    const scene = this._app.scene;
    scene.root = parent;

    this._app.applySceneSettings(data.settings);

    this._app.systems.script.preloading = false;
    return scene;
  }

  patch(asset, assets) {}

}

class SceneSettingsHandler {
  constructor(app) {
    this._app = app;
    this.maxRetries = 0;
  }

  load(url, callback) {
    SceneUtils.load(url, this.maxRetries, callback);
  }

  open(url, data) {
    return data.settings;
  }

}

class ShaderHandler {
  constructor(app) {
    this.handlerType = "shader";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    http.get(url.load, {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(`Error loading shader resource: ${url.original} [${err}]`);
      }
    });
  }

  open(url, data) {
    return data;
  }

  patch(asset, assets) {}

}

function onTextureAtlasLoaded(atlasAsset) {
  const spriteAsset = this;

  if (spriteAsset.resource) {
    spriteAsset.resource.atlas = atlasAsset.resource;
  }
}

function onTextureAtlasAdded(atlasAsset) {
  const spriteAsset = this;
  spriteAsset.registry.load(atlasAsset);
}

class SpriteHandler {
  constructor(app) {
    this.handlerType = "sprite";
    this._assets = app.assets;
    this._device = app.graphicsDevice;
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    if (path.getExtension(url.original) === '.json') {
      http.get(url.load, {
        retry: this.maxRetries > 0,
        maxRetries: this.maxRetries
      }, function (err, response) {
        if (!err) {
          callback(null, response);
        } else {
          callback(err);
        }
      });
    }
  }

  open(url, data) {
    const sprite = new Sprite(this._device);

    if (url) {
      sprite.__data = data;
    }

    return sprite;
  }

  patch(asset, assets) {
    const sprite = asset.resource;

    if (sprite.__data) {
      asset.data.pixelsPerUnit = sprite.__data.pixelsPerUnit;
      asset.data.renderMode = sprite.__data.renderMode;
      asset.data.frameKeys = sprite.__data.frameKeys;

      if (sprite.__data.textureAtlasAsset) {
        const atlas = assets.getByUrl(sprite.__data.textureAtlasAsset);

        if (atlas) {
          asset.data.textureAtlasAsset = atlas.id;
        } else {
          console.warn('Could not find textureatlas with url: ' + sprite.__data.textureAtlasAsset);
        }
      }
    }

    sprite.startUpdate();
    sprite.renderMode = asset.data.renderMode;
    sprite.pixelsPerUnit = asset.data.pixelsPerUnit;
    sprite.frameKeys = asset.data.frameKeys;

    this._updateAtlas(asset);

    sprite.endUpdate();
    asset.off('change', this._onAssetChange, this);
    asset.on('change', this._onAssetChange, this);
  }

  _updateAtlas(asset) {
    const sprite = asset.resource;

    if (!asset.data.textureAtlasAsset) {
      sprite.atlas = null;
      return;
    }

    this._assets.off('load:' + asset.data.textureAtlasAsset, onTextureAtlasLoaded, asset);

    this._assets.on('load:' + asset.data.textureAtlasAsset, onTextureAtlasLoaded, asset);

    const atlasAsset = this._assets.get(asset.data.textureAtlasAsset);

    if (atlasAsset && atlasAsset.resource) {
      sprite.atlas = atlasAsset.resource;
    } else {
      if (!atlasAsset) {
        this._assets.off('add:' + asset.data.textureAtlasAsset, onTextureAtlasAdded, asset);

        this._assets.on('add:' + asset.data.textureAtlasAsset, onTextureAtlasAdded, asset);
      } else {
        this._assets.load(atlasAsset);
      }
    }
  }

  _onAssetChange(asset, attribute, value, oldValue) {
    if (attribute === 'data') {
      if (value && value.textureAtlasAsset && oldValue && value.textureAtlasAsset !== oldValue.textureAtlasAsset) {
        this._assets.off('load:' + oldValue.textureAtlasAsset, onTextureAtlasLoaded, asset);

        this._assets.off('add:' + oldValue.textureAtlasAsset, onTextureAtlasAdded, asset);
      }
    }
  }

}

class Template {
  constructor(app, data) {
    this._app = app;
    this._data = data;
    this._templateRoot = null;
  }

  instantiate() {
    if (!this._templateRoot) {
      this._parseTemplate();
    }

    return this._templateRoot.clone();
  }

  _parseTemplate() {
    const parser = new SceneParser(this._app, true);
    this._templateRoot = parser.parse(this._data);
  }

}

class TemplateHandler {
  constructor(app) {
    this.handlerType = "template";
    this._app = app;
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const options = {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };
    http.get(url.load, options, function (err, response) {
      if (err) {
        callback('Error requesting template: ' + url.original);
      } else {
        callback(err, response);
      }
    });
  }

  open(url, data) {
    return new Template(this._app, data);
  }

}

class TextHandler {
  constructor(app) {
    this.handlerType = "text";
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    http.get(url.load, {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(`Error loading text resource: ${url.original} [${err}]`);
      }
    });
  }

  open(url, data) {
    return data;
  }

  patch(asset, assets) {}

}

class BasisParser {
  constructor(registry, device) {
    this.device = device;
    this.maxRetries = 0;
  }

  load(url, callback, asset) {
    const device = this.device;

    const transcode = data => {
      var _asset$file, _asset$file$variants, _asset$file$variants$;

      const basisModuleFound = basisTranscode(device, url.load, data, callback, {
        isGGGR: ((asset == null ? void 0 : (_asset$file = asset.file) == null ? void 0 : (_asset$file$variants = _asset$file.variants) == null ? void 0 : (_asset$file$variants$ = _asset$file$variants.basis) == null ? void 0 : _asset$file$variants$.opt) & 8) !== 0
      });

      if (!basisModuleFound) {
        callback(`Basis module not found. Asset '${asset.name}' basis texture variant will not be loaded.`);
      }
    };

    Asset.fetchArrayBuffer(url.load, (err, result) => {
      if (err) {
        callback(err);
      } else {
        transcode(result);
      }
    }, asset, this.maxRetries);
  }

  open(url, data, device) {
    const texture = new Texture(device, {
      name: url,
      addressU: data.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      addressV: data.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      width: data.width,
      height: data.height,
      format: data.format,
      cubemap: data.cubemap,
      levels: data.levels
    });
    texture.upload();
    return texture;
  }

}

class ImgParser {
  constructor(registry, device) {
    this.crossOrigin = registry.prefix ? 'anonymous' : null;
    this.maxRetries = 0;
    this.device = device;
  }

  load(url, callback, asset) {
    var _asset$file;

    const hasContents = !!(asset != null && (_asset$file = asset.file) != null && _asset$file.contents);

    if (hasContents) {
      if (this.device.supportsImageBitmap) {
        this._loadImageBitmapFromData(asset.file.contents, callback);

        return;
      }

      url = {
        load: URL.createObjectURL(new Blob([asset.file.contents])),
        original: url.original
      };
    }

    const handler = (err, result) => {
      if (hasContents) {
        URL.revokeObjectURL(url.load);
      }

      callback(err, result);
    };

    let crossOrigin;

    if (asset && asset.options && asset.options.hasOwnProperty('crossOrigin')) {
      crossOrigin = asset.options.crossOrigin;
    } else if (ABSOLUTE_URL.test(url.load)) {
      crossOrigin = this.crossOrigin;
    }

    if (this.device.supportsImageBitmap) {
      this._loadImageBitmap(url.load, url.original, crossOrigin, handler);
    } else {
      this._loadImage(url.load, url.original, crossOrigin, handler);
    }
  }

  open(url, data, device) {
    const ext = path.getExtension(url).toLowerCase();
    const format = ext === '.jpg' || ext === '.jpeg' ? PIXELFORMAT_R8_G8_B8 : PIXELFORMAT_R8_G8_B8_A8;
    const texture = new Texture(device, {
      name: url,
      width: data.width,
      height: data.height,
      format: format
    });
    texture.setSource(data);
    return texture;
  }

  _loadImage(url, originalUrl, crossOrigin, callback) {
    const image = new Image();

    if (crossOrigin) {
      image.crossOrigin = crossOrigin;
    }

    let retries = 0;
    const maxRetries = this.maxRetries;
    let retryTimeout;

    image.onload = function () {
      callback(null, image);
    };

    image.onerror = function () {
      if (retryTimeout) return;

      if (maxRetries > 0 && ++retries <= maxRetries) {
        const retryDelay = Math.pow(2, retries) * 100;
        console.log(`Error loading Texture from: '${originalUrl}' - Retrying in ${retryDelay}ms...`);
        const idx = url.indexOf('?');
        const separator = idx >= 0 ? '&' : '?';
        retryTimeout = setTimeout(function () {
          image.src = url + separator + 'retry=' + Date.now();
          retryTimeout = null;
        }, retryDelay);
      } else {
        callback(`Error loading Texture from: '${originalUrl}'`);
      }
    };

    image.src = url;
  }

  _loadImageBitmap(url, originalUrl, crossOrigin, callback) {
    const options = {
      cache: true,
      responseType: 'blob',
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };
    http.get(url, options, function (err, blob) {
      if (err) {
        callback(err);
      } else {
        createImageBitmap(blob, {
          premultiplyAlpha: 'none'
        }).then(imageBitmap => callback(null, imageBitmap)).catch(e => callback(e));
      }
    });
  }

  _loadImageBitmapFromData(data, callback) {
    createImageBitmap(new Blob([data]), {
      premultiplyAlpha: 'none'
    }).then(imageBitmap => callback(null, imageBitmap)).catch(e => callback(e));
  }

}

const IDENTIFIER = [0x58544BAB, 0xBB313120, 0x0A1A0A0D];
const KNOWN_FORMATS = {
  0x83F0: PIXELFORMAT_DXT1,
  0x83F2: PIXELFORMAT_DXT3,
  0x83F3: PIXELFORMAT_DXT5,
  0x8D64: PIXELFORMAT_ETC1,
  0x9274: PIXELFORMAT_ETC2_RGB,
  0x9278: PIXELFORMAT_ETC2_RGBA,
  0x8C00: PIXELFORMAT_PVRTC_4BPP_RGB_1,
  0x8C01: PIXELFORMAT_PVRTC_2BPP_RGB_1,
  0x8C02: PIXELFORMAT_PVRTC_4BPP_RGBA_1,
  0x8C03: PIXELFORMAT_PVRTC_2BPP_RGBA_1,
  0x8051: PIXELFORMAT_R8_G8_B8,
  0x8058: PIXELFORMAT_R8_G8_B8_A8,
  0x8C41: PIXELFORMAT_SRGB,
  0x8C43: PIXELFORMAT_SRGBA,
  0x8C3A: PIXELFORMAT_111110F,
  0x881B: PIXELFORMAT_RGB16F,
  0x881A: PIXELFORMAT_RGBA16F
};

function createContainer(pixelFormat, buffer, byteOffset, byteSize) {
  return pixelFormat === PIXELFORMAT_111110F ? new Uint32Array(buffer, byteOffset, byteSize / 4) : new Uint8Array(buffer, byteOffset, byteSize);
}

class KtxParser {
  constructor(registry) {
    this.maxRetries = 0;
  }

  load(url, callback, asset) {
    Asset.fetchArrayBuffer(url.load, callback, asset, this.maxRetries);
  }

  open(url, data, device) {
    const textureData = this.parse(data);

    if (!textureData) {
      return null;
    }

    const texture = new Texture(device, {
      name: url,
      addressU: textureData.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      addressV: textureData.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      width: textureData.width,
      height: textureData.height,
      format: textureData.format,
      cubemap: textureData.cubemap,
      levels: textureData.levels
    });
    texture.upload();
    return texture;
  }

  parse(data) {
    const dataU32 = new Uint32Array(data);

    if (IDENTIFIER[0] !== dataU32[0] || IDENTIFIER[1] !== dataU32[1] || IDENTIFIER[2] !== dataU32[2]) {
      return null;
    }

    const header = {
      endianness: dataU32[3],
      glType: dataU32[4],
      glTypeSize: dataU32[5],
      glFormat: dataU32[6],
      glInternalFormat: dataU32[7],
      glBaseInternalFormat: dataU32[8],
      pixelWidth: dataU32[9],
      pixelHeight: dataU32[10],
      pixelDepth: dataU32[11],
      numberOfArrayElements: dataU32[12],
      numberOfFaces: dataU32[13],
      numberOfMipmapLevels: dataU32[14],
      bytesOfKeyValueData: dataU32[15]
    };

    if (header.pixelDepth > 1) {
      return null;
    }

    if (header.numberOfArrayElements !== 0) {
      return null;
    }

    const format = KNOWN_FORMATS[header.glInternalFormat];

    if (format === undefined) {
      return null;
    }

    let offset = 16 + header.bytesOfKeyValueData / 4;
    const isCubemap = header.numberOfFaces > 1;
    const levels = [];

    for (let mipmapLevel = 0; mipmapLevel < (header.numberOfMipmapLevels || 1); mipmapLevel++) {
      const imageSizeInBytes = dataU32[offset++];

      if (isCubemap) {
        levels.push([]);
      }

      const target = isCubemap ? levels[mipmapLevel] : levels;

      for (let face = 0; face < (isCubemap ? 6 : 1); ++face) {
        target.push(createContainer(format, data, offset * 4, imageSizeInBytes));
        offset += imageSizeInBytes + 3 >> 2;
      }
    }

    return {
      format: format,
      width: header.pixelWidth,
      height: header.pixelHeight,
      levels: levels,
      cubemap: isCubemap
    };
  }

}

const KHRConstants = {
  KHR_DF_MODEL_ETC1S: 163,
  KHR_DF_MODEL_UASTC: 166
};

class Ktx2Parser {
  constructor(registry, device) {
    this.maxRetries = 0;
    this.device = device;
  }

  load(url, callback, asset) {
    Asset.fetchArrayBuffer(url.load, (err, result) => {
      if (err) {
        callback(err, result);
      } else {
        this.parse(result, url, callback, asset);
      }
    }, asset, this.maxRetries);
  }

  open(url, data, device) {
    const texture = new Texture(device, {
      name: url,
      addressU: data.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      addressV: data.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      width: data.width,
      height: data.height,
      format: data.format,
      cubemap: data.cubemap,
      levels: data.levels
    });
    texture.upload();
    return texture;
  }

  parse(arraybuffer, url, callback, asset) {
    const rs = new ReadStream(arraybuffer);
    const magic = [rs.readU32be(), rs.readU32be(), rs.readU32be()];

    if (magic[0] !== 0xAB4B5458 || magic[1] !== 0x203230BB || magic[2] !== 0x0D0A1A0A) {
      return null;
    }

    const header = {
      vkFormat: rs.readU32(),
      typeSize: rs.readU32(),
      pixelWidth: rs.readU32(),
      pixelHeight: rs.readU32(),
      pixelDepth: rs.readU32(),
      layerCount: rs.readU32(),
      faceCount: rs.readU32(),
      levelCount: rs.readU32(),
      supercompressionScheme: rs.readU32()
    };
    const index = {
      dfdByteOffset: rs.readU32(),
      dfdByteLength: rs.readU32(),
      kvdByteOffset: rs.readU32(),
      kvdByteLength: rs.readU32(),
      sgdByteOffset: rs.readU64(),
      sgdByteLength: rs.readU64()
    };
    const levels = [];

    for (let i = 0; i < Math.max(1, header.levelCount); ++i) {
      levels.push({
        byteOffset: rs.readU64(),
        byteLength: rs.readU64(),
        uncompressedByteLength: rs.readU64()
      });
    }

    const dfdTotalSize = rs.readU32();

    if (dfdTotalSize !== index.kvdByteOffset - index.dfdByteOffset) {
      return null;
    }

    rs.skip(8);
    const colorModel = rs.readU8();
    rs.skip(index.dfdByteLength - 9);
    rs.skip(index.kvdByteLength);

    if (header.supercompressionScheme === 1 || colorModel === KHRConstants.KHR_DF_MODEL_UASTC) {
      var _asset$file, _asset$file$variants, _asset$file$variants$;

      const basisModuleFound = basisTranscode(this.device, url.load, arraybuffer, callback, {
        isGGGR: ((asset == null ? void 0 : (_asset$file = asset.file) == null ? void 0 : (_asset$file$variants = _asset$file.variants) == null ? void 0 : (_asset$file$variants$ = _asset$file$variants.basis) == null ? void 0 : _asset$file$variants$.opt) & 8) !== 0,
        isKTX2: true
      });

      if (!basisModuleFound) {
        callback('Basis module not found. Asset "' + asset.name + '" basis texture variant will not be loaded.');
      }
    } else {
      callback('unsupported KTX2 pixel format');
    }
  }

}

class DdsParser {
  constructor(registry) {
    this.maxRetries = 0;
  }

  load(url, callback, asset) {
    Asset.fetchArrayBuffer(url.load, callback, asset, this.maxRetries);
  }

  open(url, data, device) {
    const header = new Uint32Array(data, 0, 128 / 4);
    const width = header[4];
    const height = header[3];
    const mips = Math.max(header[7], 1);
    const isFourCc = header[20] === 4;
    const fcc = header[21];
    const bpp = header[22];
    const isCubemap = header[28] === 65024;
    const FCC_DXT1 = 827611204;
    const FCC_DXT5 = 894720068;
    const FCC_FP16 = 113;
    const FCC_FP32 = 116;
    const FCC_ETC1 = 826496069;
    const FCC_PVRTC_2BPP_RGB_1 = 825438800;
    const FCC_PVRTC_2BPP_RGBA_1 = 825504336;
    const FCC_PVRTC_4BPP_RGB_1 = 825439312;
    const FCC_PVRTC_4BPP_RGBA_1 = 825504848;
    let compressed = false;
    let etc1 = false;
    let pvrtc2 = false;
    let pvrtc4 = false;
    let format = null;
    let componentSize = 1;
    let texture;

    if (isFourCc) {
      if (fcc === FCC_DXT1) {
        format = PIXELFORMAT_DXT1;
        compressed = true;
      } else if (fcc === FCC_DXT5) {
        format = PIXELFORMAT_DXT5;
        compressed = true;
      } else if (fcc === FCC_FP16) {
        format = PIXELFORMAT_RGBA16F;
        componentSize = 2;
      } else if (fcc === FCC_FP32) {
        format = PIXELFORMAT_RGBA32F;
        componentSize = 4;
      } else if (fcc === FCC_ETC1) {
        format = PIXELFORMAT_ETC1;
        compressed = true;
        etc1 = true;
      } else if (fcc === FCC_PVRTC_2BPP_RGB_1 || fcc === FCC_PVRTC_2BPP_RGBA_1) {
        format = fcc === FCC_PVRTC_2BPP_RGB_1 ? PIXELFORMAT_PVRTC_2BPP_RGB_1 : PIXELFORMAT_PVRTC_2BPP_RGBA_1;
        compressed = true;
        pvrtc2 = true;
      } else if (fcc === FCC_PVRTC_4BPP_RGB_1 || fcc === FCC_PVRTC_4BPP_RGBA_1) {
        format = fcc === FCC_PVRTC_4BPP_RGB_1 ? PIXELFORMAT_PVRTC_4BPP_RGB_1 : PIXELFORMAT_PVRTC_4BPP_RGBA_1;
        compressed = true;
        pvrtc4 = true;
      }
    } else {
      if (bpp === 32) {
        format = PIXELFORMAT_R8_G8_B8_A8;
      }
    }

    if (!format) {
      texture = new Texture(device, {
        width: 4,
        height: 4,
        format: PIXELFORMAT_R8_G8_B8,
        name: 'dds-legacy-empty'
      });
      return texture;
    }

    texture = new Texture(device, {
      name: url,
      addressU: isCubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      addressV: isCubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      width: width,
      height: height,
      format: format,
      cubemap: isCubemap,
      mipmaps: mips > 1
    });
    let offset = 128;
    const faces = isCubemap ? 6 : 1;
    let mipSize;
    const DXT_BLOCK_WIDTH = 4;
    const DXT_BLOCK_HEIGHT = 4;
    const blockSize = fcc === FCC_DXT1 ? 8 : 16;
    let numBlocksAcross, numBlocksDown, numBlocks;

    for (let face = 0; face < faces; face++) {
      let mipWidth = width;
      let mipHeight = height;

      for (let i = 0; i < mips; i++) {
        if (compressed) {
          if (etc1) {
            mipSize = Math.floor((mipWidth + 3) / 4) * Math.floor((mipHeight + 3) / 4) * 8;
          } else if (pvrtc2) {
            mipSize = Math.max(mipWidth, 16) * Math.max(mipHeight, 8) / 4;
          } else if (pvrtc4) {
            mipSize = Math.max(mipWidth, 8) * Math.max(mipHeight, 8) / 2;
          } else {
            numBlocksAcross = Math.floor((mipWidth + DXT_BLOCK_WIDTH - 1) / DXT_BLOCK_WIDTH);
            numBlocksDown = Math.floor((mipHeight + DXT_BLOCK_HEIGHT - 1) / DXT_BLOCK_HEIGHT);
            numBlocks = numBlocksAcross * numBlocksDown;
            mipSize = numBlocks * blockSize;
          }
        } else {
          mipSize = mipWidth * mipHeight * 4;
        }

        const mipBuff = format === PIXELFORMAT_RGBA32F ? new Float32Array(data, offset, mipSize) : format === PIXELFORMAT_RGBA16F ? new Uint16Array(data, offset, mipSize) : new Uint8Array(data, offset, mipSize);

        if (!isCubemap) {
          texture._levels[i] = mipBuff;
        } else {
          if (!texture._levels[i]) texture._levels[i] = [];
          texture._levels[i][face] = mipBuff;
        }

        offset += mipSize * componentSize;
        mipWidth = Math.max(mipWidth * 0.5, 1);
        mipHeight = Math.max(mipHeight * 0.5, 1);
      }
    }

    texture.upload();
    return texture;
  }

}

class HdrParser {
  constructor(registry) {
    this.maxRetries = 0;
  }

  load(url, callback, asset) {
    Asset.fetchArrayBuffer(url.load, callback, asset, this.maxRetries);
  }

  open(url, data, device) {
    const textureData = this.parse(data);

    if (!textureData) {
      return null;
    }

    const texture = new Texture(device, {
      name: url,
      addressU: ADDRESS_REPEAT,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      minFilter: FILTER_NEAREST,
      magFilter: FILTER_NEAREST,
      width: textureData.width,
      height: textureData.height,
      levels: textureData.levels,
      format: PIXELFORMAT_R8_G8_B8_A8,
      type: TEXTURETYPE_RGBE,
      mipmaps: false
    });
    texture.upload();
    return texture;
  }

  parse(data) {
    const readStream = new ReadStream(data);
    const magic = readStream.readLine();

    if (!magic.startsWith('#?RADIANCE')) {
      return null;
    }

    const variables = {};

    while (true) {
      const line = readStream.readLine();

      if (line.length === 0) {
        break;
      } else {
        const parts = line.split('=');

        if (parts.length === 2) {
          variables[parts[0]] = parts[1];
        }
      }
    }

    if (!variables.hasOwnProperty('FORMAT')) {
      return null;
    }

    const resolution = readStream.readLine().split(' ');

    if (resolution.length !== 4) {
      return null;
    }

    const height = parseInt(resolution[1], 10);
    const width = parseInt(resolution[3], 10);

    const pixels = this._readPixels(readStream, width, height, resolution[0] === '-Y');

    if (!pixels) {
      return null;
    }

    return {
      width: width,
      height: height,
      levels: [pixels]
    };
  }

  _readPixels(readStream, width, height, flipY) {
    if (width < 8 || width > 0x7fff) {
      return this._readPixelsFlat(readStream, width, height);
    }

    const rgbe = [0, 0, 0, 0];
    readStream.readArray(rgbe);

    if (rgbe[0] !== 2 || rgbe[1] !== 2 || (rgbe[2] & 0x80) !== 0) {
      readStream.skip(-4);
      return this._readPixelsFlat(readStream, width, height);
    }

    const buffer = new ArrayBuffer(width * height * 4);
    const view = new Uint8Array(buffer);
    let scanstart = flipY ? 0 : width * 4 * (height - 1);
    let x, y, i, channel, count, value;

    for (y = 0; y < height; ++y) {
      if (y) {
        readStream.readArray(rgbe);
      }

      if ((rgbe[2] << 8) + rgbe[3] !== width) {
        return null;
      }

      for (channel = 0; channel < 4; ++channel) {
        x = 0;

        while (x < width) {
          count = readStream.readU8();

          if (count > 128) {
            count -= 128;

            if (x + count > width) {
              return null;
            }

            value = readStream.readU8();

            for (i = 0; i < count; ++i) {
              view[scanstart + channel + 4 * x++] = value;
            }
          } else {
            if (count === 0 || x + count > width) {
              return null;
            }

            for (i = 0; i < count; ++i) {
              view[scanstart + channel + 4 * x++] = readStream.readU8();
            }
          }
        }
      }

      scanstart += width * 4 * (flipY ? 1 : -1);
    }

    return view;
  }

  _readPixelsFlat(readStream, width, height) {
    return readStream.remainingBytes === width * height * 4 ? new Uint8Array(readStream.arraybuffer, readStream.offset) : null;
  }

}

const JSON_ADDRESS_MODE$1 = {
  'repeat': ADDRESS_REPEAT,
  'clamp': ADDRESS_CLAMP_TO_EDGE,
  'mirror': ADDRESS_MIRRORED_REPEAT
};
const JSON_FILTER_MODE$1 = {
  'nearest': FILTER_NEAREST,
  'linear': FILTER_LINEAR,
  'nearest_mip_nearest': FILTER_NEAREST_MIPMAP_NEAREST,
  'linear_mip_nearest': FILTER_LINEAR_MIPMAP_NEAREST,
  'nearest_mip_linear': FILTER_NEAREST_MIPMAP_LINEAR,
  'linear_mip_linear': FILTER_LINEAR_MIPMAP_LINEAR
};
const JSON_TEXTURE_TYPE = {
  'default': TEXTURETYPE_DEFAULT,
  'rgbm': TEXTURETYPE_RGBM,
  'rgbe': TEXTURETYPE_RGBE,
  'rgbp': TEXTURETYPE_RGBP,
  'swizzleGGGR': TEXTURETYPE_SWIZZLEGGGR
};

class TextureParser {
  load(url, callback, asset) {
    throw new Error('not implemented');
  }

  open(url, data, device) {
    throw new Error('not implemented');
  }

}

const _completePartialMipmapChain = function _completePartialMipmapChain(texture) {
  const requiredMipLevels = Math.log2(Math.max(texture._width, texture._height)) + 1;

  const isHtmlElement = function isHtmlElement(object) {
    return object instanceof HTMLCanvasElement || object instanceof HTMLImageElement || object instanceof HTMLVideoElement;
  };

  if (!(texture._format === PIXELFORMAT_R8_G8_B8_A8 || texture._format === PIXELFORMAT_RGBA32F) || texture._volume || texture._compressed || texture._levels.length === 1 || texture._levels.length === requiredMipLevels || isHtmlElement(texture._cubemap ? texture._levels[0][0] : texture._levels[0])) {
    return;
  }

  const downsample = function downsample(width, height, data) {
    const sampledWidth = Math.max(1, width >> 1);
    const sampledHeight = Math.max(1, height >> 1);
    const sampledData = new data.constructor(sampledWidth * sampledHeight * 4);
    const xs = Math.floor(width / sampledWidth);
    const ys = Math.floor(height / sampledHeight);
    const xsys = xs * ys;

    for (let y = 0; y < sampledHeight; ++y) {
      for (let x = 0; x < sampledWidth; ++x) {
        for (let e = 0; e < 4; ++e) {
          let sum = 0;

          for (let sy = 0; sy < ys; ++sy) {
            for (let sx = 0; sx < xs; ++sx) {
              sum += data[(x * xs + sx + (y * ys + sy) * width) * 4 + e];
            }
          }

          sampledData[(x + y * sampledWidth) * 4 + e] = sum / xsys;
        }
      }
    }

    return sampledData;
  };

  for (let level = texture._levels.length; level < requiredMipLevels; ++level) {
    const width = Math.max(1, texture._width >> level - 1);
    const height = Math.max(1, texture._height >> level - 1);

    if (texture._cubemap) {
      const mips = [];

      for (let face = 0; face < 6; ++face) {
        mips.push(downsample(width, height, texture._levels[level - 1][face]));
      }

      texture._levels.push(mips);
    } else {
      texture._levels.push(downsample(width, height, texture._levels[level - 1]));
    }
  }

  texture._levelsUpdated = texture._cubemap ? [[true, true, true, true, true, true]] : [true];
};

class TextureHandler {
  constructor(app) {
    this.handlerType = "texture";
    const assets = app.assets;
    const device = app.graphicsDevice;
    this._device = device;
    this._assets = assets;
    this._loader = app.loader;
    this.imgParser = new ImgParser(assets, device);
    this.parsers = {
      dds: new DdsParser(assets),
      ktx: new KtxParser(assets),
      ktx2: new Ktx2Parser(assets, device),
      basis: new BasisParser(assets, device),
      hdr: new HdrParser(assets)
    };
  }

  set crossOrigin(value) {
    this.imgParser.crossOrigin = value;
  }

  get crossOrigin() {
    return this.imgParser.crossOrigin;
  }

  set maxRetries(value) {
    this.imgParser.maxRetries = value;

    for (const parser in this.parsers) {
      if (this.parsers.hasOwnProperty(parser)) {
        this.parsers[parser].maxRetries = value;
      }
    }
  }

  get maxRetries() {
    return this.imgParser.maxRetries;
  }

  _getUrlWithoutParams(url) {
    return url.indexOf('?') >= 0 ? url.split('?')[0] : url;
  }

  _getParser(url) {
    const ext = path.getExtension(this._getUrlWithoutParams(url)).toLowerCase().replace('.', '');
    return this.parsers[ext] || this.imgParser;
  }

  load(url, callback, asset) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    this._getParser(url.original).load(url, callback, asset);
  }

  open(url, data, asset) {
    if (!url) return undefined;

    let texture = this._getParser(url).open(url, data, this._device);

    if (texture === null) {
      texture = new Texture(this._device, {
        width: 4,
        height: 4,
        format: PIXELFORMAT_R8_G8_B8
      });
    } else {
      _completePartialMipmapChain(texture);

      if (data.unswizzledGGGR) {
        asset.file.variants.basis.opt &= ~8;
      }
    }

    return texture;
  }

  patch(asset, assets) {
    const texture = asset.resource;

    if (!texture) {
      return;
    }

    if (asset.name && asset.name.length > 0) {
      texture.name = asset.name;
    }

    const assetData = asset.data;

    if (assetData.hasOwnProperty('minfilter')) {
      texture.minFilter = JSON_FILTER_MODE$1[assetData.minfilter];
    }

    if (assetData.hasOwnProperty('magfilter')) {
      texture.magFilter = JSON_FILTER_MODE$1[assetData.magfilter];
    }

    if (!texture.cubemap) {
      if (assetData.hasOwnProperty('addressu')) {
        texture.addressU = JSON_ADDRESS_MODE$1[assetData.addressu];
      }

      if (assetData.hasOwnProperty('addressv')) {
        texture.addressV = JSON_ADDRESS_MODE$1[assetData.addressv];
      }
    }

    if (assetData.hasOwnProperty('mipmaps')) {
      texture.mipmaps = assetData.mipmaps;
    }

    if (assetData.hasOwnProperty('anisotropy')) {
      texture.anisotropy = assetData.anisotropy;
    }

    if (assetData.hasOwnProperty('flipY')) {
      texture.flipY = !!assetData.flipY;
    }

    if (assetData.hasOwnProperty('type')) {
      texture.type = JSON_TEXTURE_TYPE[assetData.type];
    } else if (assetData.hasOwnProperty('rgbm') && assetData.rgbm) {
      texture.type = TEXTURETYPE_RGBM;
    } else if (asset.file && (asset.file.opt & 8) !== 0) {
      texture.type = TEXTURETYPE_SWIZZLEGGGR;
    }
  }

}

const JSON_ADDRESS_MODE = {
  'repeat': ADDRESS_REPEAT,
  'clamp': ADDRESS_CLAMP_TO_EDGE,
  'mirror': ADDRESS_MIRRORED_REPEAT
};
const JSON_FILTER_MODE = {
  'nearest': FILTER_NEAREST,
  'linear': FILTER_LINEAR,
  'nearest_mip_nearest': FILTER_NEAREST_MIPMAP_NEAREST,
  'linear_mip_nearest': FILTER_LINEAR_MIPMAP_NEAREST,
  'nearest_mip_linear': FILTER_NEAREST_MIPMAP_LINEAR,
  'linear_mip_linear': FILTER_LINEAR_MIPMAP_LINEAR
};
const regexFrame = /^data\.frames\.(\d+)$/;

class TextureAtlasHandler {
  constructor(app) {
    this.handlerType = "textureatlas";
    this._loader = app.loader;
    this.maxRetries = 0;
  }

  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    const self = this;

    const handler = this._loader.getHandler('texture');

    if (path.getExtension(url.original) === '.json') {
      http.get(url.load, {
        retry: this.maxRetries > 0,
        maxRetries: this.maxRetries
      }, function (err, response) {
        if (!err) {
          const textureUrl = url.original.replace('.json', '.png');

          self._loader.load(textureUrl, 'texture', function (err, texture) {
            if (err) {
              callback(err);
            } else {
              callback(null, {
                data: response,
                texture: texture
              });
            }
          });
        } else {
          callback(err);
        }
      });
    } else {
      return handler.load(url, callback);
    }
  }

  open(url, data) {
    const resource = new TextureAtlas();

    if (data.texture && data.data) {
      resource.texture = data.texture;
      resource.__data = data.data;
    } else {
      const handler = this._loader.getHandler('texture');

      const texture = handler.open(url, data);
      if (!texture) return null;
      resource.texture = texture;
    }

    return resource;
  }

  patch(asset, assets) {
    if (!asset.resource) {
      return;
    }

    if (asset.resource.__data) {
      if (asset.resource.__data.minfilter !== undefined) asset.data.minfilter = asset.resource.__data.minfilter;
      if (asset.resource.__data.magfilter !== undefined) asset.data.magfilter = asset.resource.__data.magfilter;
      if (asset.resource.__data.addressu !== undefined) asset.data.addressu = asset.resource.__data.addressu;
      if (asset.resource.__data.addressv !== undefined) asset.data.addressv = asset.resource.__data.addressv;
      if (asset.resource.__data.mipmaps !== undefined) asset.data.mipmaps = asset.resource.__data.mipmaps;
      if (asset.resource.__data.anisotropy !== undefined) asset.data.anisotropy = asset.resource.__data.anisotropy;
      if (asset.resource.__data.rgbm !== undefined) asset.data.rgbm = !!asset.resource.__data.rgbm;
      asset.data.frames = asset.resource.__data.frames;
      delete asset.resource.__data;
    }

    const texture = asset.resource.texture;

    if (texture) {
      texture.name = asset.name;
      if (asset.data.hasOwnProperty('minfilter') && texture.minFilter !== JSON_FILTER_MODE[asset.data.minfilter]) texture.minFilter = JSON_FILTER_MODE[asset.data.minfilter];
      if (asset.data.hasOwnProperty('magfilter') && texture.magFilter !== JSON_FILTER_MODE[asset.data.magfilter]) texture.magFilter = JSON_FILTER_MODE[asset.data.magfilter];
      if (asset.data.hasOwnProperty('addressu') && texture.addressU !== JSON_ADDRESS_MODE[asset.data.addressu]) texture.addressU = JSON_ADDRESS_MODE[asset.data.addressu];
      if (asset.data.hasOwnProperty('addressv') && texture.addressV !== JSON_ADDRESS_MODE[asset.data.addressv]) texture.addressV = JSON_ADDRESS_MODE[asset.data.addressv];
      if (asset.data.hasOwnProperty('mipmaps') && texture.mipmaps !== asset.data.mipmaps) texture.mipmaps = asset.data.mipmaps;
      if (asset.data.hasOwnProperty('anisotropy') && texture.anisotropy !== asset.data.anisotropy) texture.anisotropy = asset.data.anisotropy;

      if (asset.data.hasOwnProperty('rgbm')) {
        const type = asset.data.rgbm ? TEXTURETYPE_RGBM : TEXTURETYPE_DEFAULT;

        if (texture.type !== type) {
          texture.type = type;
        }
      }
    }

    asset.resource.texture = texture;
    const frames = {};

    for (const key in asset.data.frames) {
      const frame = asset.data.frames[key];
      frames[key] = {
        rect: new Vec4(frame.rect),
        pivot: new Vec2(frame.pivot),
        border: new Vec4(frame.border)
      };
    }

    asset.resource.frames = frames;
    asset.off('change', this._onAssetChange, this);
    asset.on('change', this._onAssetChange, this);
  }

  _onAssetChange(asset, attribute, value) {
    let frame;

    if (attribute === 'data' || attribute === 'data.frames') {
      const frames = {};

      for (const key in value.frames) {
        frame = value.frames[key];
        frames[key] = {
          rect: new Vec4(frame.rect),
          pivot: new Vec2(frame.pivot),
          border: new Vec4(frame.border)
        };
      }

      asset.resource.frames = frames;
    } else {
      const match = attribute.match(regexFrame);

      if (match) {
        const frameKey = match[1];

        if (value) {
          if (!asset.resource.frames[frameKey]) {
            asset.resource.frames[frameKey] = {
              rect: new Vec4(value.rect),
              pivot: new Vec2(value.pivot),
              border: new Vec4(value.border)
            };
          } else {
            frame = asset.resource.frames[frameKey];
            frame.rect.set(value.rect[0], value.rect[1], value.rect[2], value.rect[3]);
            frame.pivot.set(value.pivot[0], value.pivot[1]);
            frame.border.set(value.border[0], value.border[1], value.border[2], value.border[3]);
          }

          asset.resource.fire('set:frame', frameKey, asset.resource.frames[frameKey]);
        } else {
          if (asset.resource.frames[frameKey]) {
            delete asset.resource.frames[frameKey];
            asset.resource.fire('remove:frame', frameKey);
          }
        }
      }
    }
  }

}

class AssetListLoader extends EventHandler {
  constructor(assetList, assetRegistry) {
    super();
    this._assets = new Set();
    this._loadingAssets = new Set();
    this._waitingAssets = new Set();
    this._registry = assetRegistry;
    this._loading = false;
    this._loaded = false;
    this._failed = [];
    assetList.forEach(a => {
      if (a instanceof Asset) {
        if (!a.registry) {
          a.registry = assetRegistry;
        }

        this._assets.add(a);
      } else {
        const asset = assetRegistry.get(a);

        if (asset) {
          this._assets.add(asset);
        } else {
          this._waitForAsset(a);
        }
      }
    });
  }

  destroy() {
    const self = this;

    this._registry.off("load", this._onLoad);

    this._registry.off("error", this._onError);

    this._waitingAssets.forEach(function (id) {
      self._registry.off("add:" + id, this._onAddAsset);
    });

    this.off("progress");
    this.off("load");
  }

  _assetHasDependencies(asset) {
    var _asset$file;

    return asset.type === 'model' && ((_asset$file = asset.file) == null ? void 0 : _asset$file.url) && asset.file.url && asset.file.url.match(/.json$/g);
  }

  load(done, scope) {
    if (this._loading) {
      return;
    }

    this._loading = true;
    this._callback = done;
    this._scope = scope;

    this._registry.on("load", this._onLoad, this);

    this._registry.on("error", this._onError, this);

    let loadingAssets = false;

    this._assets.forEach(asset => {
      if (!asset.loaded) {
        loadingAssets = true;

        if (this._assetHasDependencies(asset)) {
          this._registry.loadFromUrl(asset.file.url, asset.type, (err, loadedAsset) => {
            if (err) {
              this._onError(err, asset);

              return;
            }

            this._onLoad(asset);
          });
        }

        this._loadingAssets.add(asset);

        this._registry.add(asset);
      }
    });

    this._loadingAssets.forEach(asset => {
      if (!this._assetHasDependencies(asset)) {
        this._registry.load(asset);
      }
    });

    if (!loadingAssets && this._waitingAssets.size === 0) {
      this._loadingComplete();
    }
  }

  ready(done, scope = this) {
    if (this._loaded) {
      done.call(scope, Array.from(this._assets));
    } else {
      this.once("load", function (assets) {
        done.call(scope, assets);
      });
    }
  }

  _loadingComplete() {
    if (this._loaded) return;
    this._loaded = true;

    this._registry.off("load", this._onLoad, this);

    this._registry.off("error", this._onError, this);

    if (this._failed.length) {
      if (this._callback) {
        this._callback.call(this._scope, "Failed to load some assets", this._failed);
      }

      this.fire("error", this._failed);
    } else {
      if (this._callback) {
        this._callback.call(this._scope);
      }

      this.fire("load", Array.from(this._assets));
    }
  }

  _onLoad(asset) {
    if (this._loadingAssets.has(asset)) {
      this.fire("progress", asset);

      this._loadingAssets.delete(asset);
    }

    if (this._loadingAssets.size === 0) {
      setTimeout(() => {
        this._loadingComplete(this._failed);
      }, 0);
    }
  }

  _onError(err, asset) {
    if (this._loadingAssets.has(asset)) {
      this._failed.push(asset);

      this._loadingAssets.delete(asset);
    }

    if (this._loadingAssets.size === 0) {
      setTimeout(() => {
        this._loadingComplete(this._failed);
      }, 0);
    }
  }

  _onAddAsset(asset) {
    this._waitingAssets.delete(asset);

    this._assets.add(asset);

    if (!asset.loaded) {
      this._loadingAssets.add(asset);

      this._registry.load(asset);
    }
  }

  _waitForAsset(assetId) {
    this._waitingAssets.add(assetId);

    this._registry.once('add:' + assetId, this._onAddAsset, this);
  }

}

class LocalizedAsset extends EventHandler {
  constructor(app) {
    super();
    this._app = app;
    app.i18n.on('set:locale', this._onSetLocale, this);
    this._autoLoad = false;
    this._disableLocalization = false;
    this._defaultAsset = null;
    this._localizedAsset = null;
  }

  set defaultAsset(value) {
    const id = value instanceof Asset ? value.id : value;
    if (this._defaultAsset === id) return;

    if (this._defaultAsset) {
      this._unbindDefaultAsset();
    }

    this._defaultAsset = id;

    if (this._defaultAsset) {
      this._bindDefaultAsset();
    }

    this._onSetLocale(this._app.i18n.locale);
  }

  get defaultAsset() {
    return this._defaultAsset;
  }

  set localizedAsset(value) {
    const id = value instanceof Asset ? value.id : value;

    if (this._localizedAsset === id) {
      return;
    }

    if (this._localizedAsset) {
      this._app.assets.off('add:' + this._localizedAsset, this._onLocalizedAssetAdd, this);

      this._unbindLocalizedAsset();

      this._localizedAsset = null;
    }

    this._localizedAsset = id;

    if (this._localizedAsset) {
      const asset = this._app.assets.get(this._localizedAsset);

      if (!asset) {
        this._app.assets.once('add:' + this._localizedAsset, this._onLocalizedAssetAdd, this);
      } else {
        this._bindLocalizedAsset();
      }
    }
  }

  get localizedAsset() {
    return this._localizedAsset;
  }

  set autoLoad(value) {
    if (this._autoLoad === value) return;
    this._autoLoad = value;

    if (this._autoLoad && this._localizedAsset) {
      this._unbindLocalizedAsset();

      this._bindLocalizedAsset();
    }
  }

  get autoLoad() {
    return this._autoLoad;
  }

  set disableLocalization(value) {
    if (this._disableLocalization === value) return;
    this._disableLocalization = value;

    this._onSetLocale(this._app.i18n.locale);
  }

  get disableLocalization() {
    return this._disableLocalization;
  }

  _bindDefaultAsset() {
    const asset = this._app.assets.get(this._defaultAsset);

    if (!asset) {
      this._app.assets.once('add:' + this._defaultAsset, this._onDefaultAssetAdd, this);
    } else {
      this._onDefaultAssetAdd(asset);
    }
  }

  _unbindDefaultAsset() {
    if (!this._defaultAsset) return;

    this._app.assets.off('add:' + this._defaultAsset, this._onDefaultAssetAdd, this);

    const asset = this._app.assets.get(this._defaultAsset);

    if (!asset) return;
    asset.off('add:localized', this._onLocaleAdd, this);
    asset.off('remove:localized', this._onLocaleRemove, this);
    asset.off('remove', this._onDefaultAssetRemove, this);
  }

  _onDefaultAssetAdd(asset) {
    if (this._defaultAsset !== asset.id) return;
    asset.on('add:localized', this._onLocaleAdd, this);
    asset.on('remove:localized', this._onLocaleRemove, this);
    asset.once('remove', this._onDefaultAssetRemove, this);
  }

  _onDefaultAssetRemove(asset) {
    if (this._defaultAsset !== asset.id) return;
    asset.off('add:localized', this._onLocaleAdd, this);
    asset.off('remove:localized', this._onLocaleAdd, this);

    this._app.assets.once('add:' + this._defaultAsset, this._onDefaultAssetAdd, this);
  }

  _bindLocalizedAsset() {
    if (!this._autoLoad) return;

    const asset = this._app.assets.get(this._localizedAsset);

    if (!asset) return;
    asset.on('load', this._onLocalizedAssetLoad, this);
    asset.on('change', this._onLocalizedAssetChange, this);
    asset.on('remove', this._onLocalizedAssetRemove, this);

    if (asset.resource) {
      this._onLocalizedAssetLoad(asset);
    } else {
      this._app.assets.load(asset);
    }
  }

  _unbindLocalizedAsset() {
    const asset = this._app.assets.get(this._localizedAsset);

    if (!asset) return;
    asset.off('load', this._onLocalizedAssetLoad, this);
    asset.off('change', this._onLocalizedAssetChange, this);
    asset.off('remove', this._onLocalizedAssetRemove, this);
  }

  _onLocalizedAssetAdd(asset) {
    if (this._localizedAsset !== asset.id) return;

    this._bindLocalizedAsset();
  }

  _onLocalizedAssetLoad(asset) {
    this.fire('load', asset);
  }

  _onLocalizedAssetChange(asset, name, newValue, oldValue) {
    this.fire('change', asset, name, newValue, oldValue);
  }

  _onLocalizedAssetRemove(asset) {
    if (this._localizedAsset === asset.id) {
      this.localizedAsset = this._defaultAsset;
    }

    this.fire('remove', asset);
  }

  _onLocaleAdd(locale, assetId) {
    if (this._app.i18n.locale !== locale) return;

    this._onSetLocale(locale);
  }

  _onLocaleRemove(locale, assetId) {
    if (this._app.i18n.locale !== locale) return;

    this._onSetLocale(locale);
  }

  _onSetLocale(locale) {
    if (!this._defaultAsset) {
      this.localizedAsset = null;
      return;
    }

    const asset = this._app.assets.get(this._defaultAsset);

    if (!asset || this._disableLocalization) {
      this.localizedAsset = this._defaultAsset;
      return;
    }

    const localizedAssetId = asset.getLocalizedAssetId(locale);

    if (!localizedAssetId) {
      this.localizedAsset = this._defaultAsset;
      return;
    }

    this.localizedAsset = localizedAssetId;
  }

  destroy() {
    this.defaultAsset = null;

    this._app.i18n.off('set:locale', this._onSetLocale, this);

    this.off();
  }

}

const reservedScriptNames = new Set(['system', 'entity', 'create', 'destroy', 'swap', 'move', 'scripts', '_scripts', '_scriptsIndex', '_scriptsData', 'enabled', '_oldState', 'onEnable', 'onDisable', 'onPostStateChange', '_onSetEnabled', '_checkState', '_onBeforeRemove', '_onInitializeAttributes', '_onInitialize', '_onPostInitialize', '_onUpdate', '_onPostUpdate', '_callbacks', 'has', 'get', 'on', 'off', 'fire', 'once', 'hasEvent']);

function createScript(name, app) {
  if (script.legacy) {
    return null;
  }

  if (reservedScriptNames.has(name)) throw new Error(`script name: '${name}' is reserved, please change script name`);

  const scriptType = function scriptType(args) {
    EventHandler.prototype.initEventHandler.call(this);
    ScriptType.prototype.initScriptType.call(this, args);
  };

  scriptType.prototype = Object.create(ScriptType.prototype);
  scriptType.prototype.constructor = scriptType;
  scriptType.extend = ScriptType.extend;
  scriptType.attributes = new ScriptAttributes(scriptType);
  registerScript(scriptType, name, app);
  return scriptType;
}

const reservedAttributes = {};
ScriptAttributes.reservedNames.forEach((value, value2, set) => {
  reservedAttributes[value] = 1;
});
createScript.reservedAttributes = reservedAttributes;

function registerScript(script, name, app) {
  if (script.legacy) {
    return;
  }

  if (typeof script !== 'function') throw new Error(`script class: '${script}' must be a constructor function (i.e. class).`);
  if (!(script.prototype instanceof ScriptType)) throw new Error(`script class: '${ScriptType.__getScriptName(script)}' does not extend pc.ScriptType.`);
  name = name || script.__name || ScriptType.__getScriptName(script);
  if (reservedScriptNames.has(name)) throw new Error(`script name: '${name}' is reserved, please change script name`);
  script.__name = name;
  const registry = app ? app.scripts : AppBase.getApplication().scripts;
  registry.add(script);

  ScriptHandler._push(script);
}

const ACTION_MOUSE = 'mouse';
const ACTION_KEYBOARD = 'keyboard';
const ACTION_GAMEPAD = 'gamepad';
const AXIS_MOUSE_X = 'mousex';
const AXIS_MOUSE_Y = 'mousey';
const AXIS_PAD_L_X = 'padlx';
const AXIS_PAD_L_Y = 'padly';
const AXIS_PAD_R_X = 'padrx';
const AXIS_PAD_R_Y = 'padry';
const AXIS_KEY = 'key';
const EVENT_KEYDOWN = 'keydown';
const EVENT_KEYUP = 'keyup';
const EVENT_MOUSEDOWN = 'mousedown';
const EVENT_MOUSEMOVE = 'mousemove';
const EVENT_MOUSEUP = 'mouseup';
const EVENT_MOUSEWHEEL = 'mousewheel';
const EVENT_TOUCHSTART = 'touchstart';
const EVENT_TOUCHEND = 'touchend';
const EVENT_TOUCHMOVE = 'touchmove';
const EVENT_TOUCHCANCEL = 'touchcancel';
const EVENT_SELECT = 'select';
const EVENT_SELECTSTART = 'selectstart';
const EVENT_SELECTEND = 'selectend';
const KEY_BACKSPACE = 8;
const KEY_TAB = 9;
const KEY_RETURN = 13;
const KEY_ENTER = 13;
const KEY_SHIFT = 16;
const KEY_CONTROL = 17;
const KEY_ALT = 18;
const KEY_PAUSE = 19;
const KEY_CAPS_LOCK = 20;
const KEY_ESCAPE = 27;
const KEY_SPACE = 32;
const KEY_PAGE_UP = 33;
const KEY_PAGE_DOWN = 34;
const KEY_END = 35;
const KEY_HOME = 36;
const KEY_LEFT = 37;
const KEY_UP = 38;
const KEY_RIGHT = 39;
const KEY_DOWN = 40;
const KEY_PRINT_SCREEN = 44;
const KEY_INSERT = 45;
const KEY_DELETE = 46;
const KEY_0 = 48;
const KEY_1 = 49;
const KEY_2 = 50;
const KEY_3 = 51;
const KEY_4 = 52;
const KEY_5 = 53;
const KEY_6 = 54;
const KEY_7 = 55;
const KEY_8 = 56;
const KEY_9 = 57;
const KEY_SEMICOLON = 59;
const KEY_EQUAL = 61;
const KEY_A = 65;
const KEY_B = 66;
const KEY_C = 67;
const KEY_D = 68;
const KEY_E = 69;
const KEY_F = 70;
const KEY_G = 71;
const KEY_H = 72;
const KEY_I = 73;
const KEY_J = 74;
const KEY_K = 75;
const KEY_L = 76;
const KEY_M = 77;
const KEY_N = 78;
const KEY_O = 79;
const KEY_P = 80;
const KEY_Q = 81;
const KEY_R = 82;
const KEY_S = 83;
const KEY_T = 84;
const KEY_U = 85;
const KEY_V = 86;
const KEY_W = 87;
const KEY_X = 88;
const KEY_Y = 89;
const KEY_Z = 90;
const KEY_WINDOWS = 91;
const KEY_CONTEXT_MENU = 93;
const KEY_NUMPAD_0 = 96;
const KEY_NUMPAD_1 = 97;
const KEY_NUMPAD_2 = 98;
const KEY_NUMPAD_3 = 99;
const KEY_NUMPAD_4 = 100;
const KEY_NUMPAD_5 = 101;
const KEY_NUMPAD_6 = 102;
const KEY_NUMPAD_7 = 103;
const KEY_NUMPAD_8 = 104;
const KEY_NUMPAD_9 = 105;
const KEY_MULTIPLY = 106;
const KEY_ADD = 107;
const KEY_SEPARATOR = 108;
const KEY_SUBTRACT = 109;
const KEY_DECIMAL = 110;
const KEY_DIVIDE = 111;
const KEY_F1 = 112;
const KEY_F2 = 113;
const KEY_F3 = 114;
const KEY_F4 = 115;
const KEY_F5 = 116;
const KEY_F6 = 117;
const KEY_F7 = 118;
const KEY_F8 = 119;
const KEY_F9 = 120;
const KEY_F10 = 121;
const KEY_F11 = 122;
const KEY_F12 = 123;
const KEY_COMMA = 188;
const KEY_PERIOD = 190;
const KEY_SLASH = 191;
const KEY_OPEN_BRACKET = 219;
const KEY_BACK_SLASH = 220;
const KEY_CLOSE_BRACKET = 221;
const KEY_META = 224;
const MOUSEBUTTON_NONE = -1;
const MOUSEBUTTON_LEFT = 0;
const MOUSEBUTTON_MIDDLE = 1;
const MOUSEBUTTON_RIGHT = 2;
const PAD_1 = 0;
const PAD_2 = 1;
const PAD_3 = 2;
const PAD_4 = 3;
const PAD_FACE_1 = 0;
const PAD_FACE_2 = 1;
const PAD_FACE_3 = 2;
const PAD_FACE_4 = 3;
const PAD_L_SHOULDER_1 = 4;
const PAD_R_SHOULDER_1 = 5;
const PAD_L_SHOULDER_2 = 6;
const PAD_R_SHOULDER_2 = 7;
const PAD_SELECT = 8;
const PAD_START = 9;
const PAD_L_STICK_BUTTON = 10;
const PAD_R_STICK_BUTTON = 11;
const PAD_UP = 12;
const PAD_DOWN = 13;
const PAD_LEFT = 14;
const PAD_RIGHT = 15;
const PAD_VENDOR = 16;
const PAD_L_STICK_X = 0;
const PAD_L_STICK_Y = 1;
const PAD_R_STICK_X = 2;
const PAD_R_STICK_Y = 3;

class KeyboardEvent {
  constructor(keyboard, event) {
    if (event) {
      this.key = event.keyCode;
      this.element = event.target;
      this.event = event;
    } else {
      this.key = null;
      this.element = null;
      this.event = null;
    }
  }

}

const _keyboardEvent = new KeyboardEvent();

function makeKeyboardEvent(event) {
  _keyboardEvent.key = event.keyCode;
  _keyboardEvent.element = event.target;
  _keyboardEvent.event = event;
  return _keyboardEvent;
}

function toKeyCode(s) {
  if (typeof s === 'string') {
    return s.toUpperCase().charCodeAt(0);
  }

  return s;
}

const _keyCodeToKeyIdentifier = {
  '9': 'Tab',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '27': 'Escape',
  '37': 'Left',
  '38': 'Up',
  '39': 'Right',
  '40': 'Down',
  '46': 'Delete',
  '91': 'Win'
};

class Keyboard extends EventHandler {
  constructor(element, options = {}) {
    super();
    this._element = null;
    this._keyDownHandler = this._handleKeyDown.bind(this);
    this._keyUpHandler = this._handleKeyUp.bind(this);
    this._keyPressHandler = this._handleKeyPress.bind(this);
    this._visibilityChangeHandler = this._handleVisibilityChange.bind(this);
    this._windowBlurHandler = this._handleWindowBlur.bind(this);
    this._keymap = {};
    this._lastmap = {};

    if (element) {
      this.attach(element);
    }

    this.preventDefault = options.preventDefault || false;
    this.stopPropagation = options.stopPropagation || false;
  }

  attach(element) {
    if (this._element) {
      this.detach();
    }

    this._element = element;

    this._element.addEventListener('keydown', this._keyDownHandler, false);

    this._element.addEventListener('keypress', this._keyPressHandler, false);

    this._element.addEventListener('keyup', this._keyUpHandler, false);

    document.addEventListener('visibilitychange', this._visibilityChangeHandler, false);
    window.addEventListener('blur', this._windowBlurHandler, false);
  }

  detach() {
    if (!this._element) {
      return;
    }

    this._element.removeEventListener('keydown', this._keyDownHandler);

    this._element.removeEventListener('keypress', this._keyPressHandler);

    this._element.removeEventListener('keyup', this._keyUpHandler);

    this._element = null;
    document.removeEventListener('visibilitychange', this._visibilityChangeHandler, false);
    window.removeEventListener('blur', this._windowBlurHandler, false);
  }

  toKeyIdentifier(keyCode) {
    keyCode = toKeyCode(keyCode);

    const id = _keyCodeToKeyIdentifier[keyCode.toString()];

    if (id) {
      return id;
    }

    let hex = keyCode.toString(16).toUpperCase();
    const length = hex.length;

    for (let count = 0; count < 4 - length; count++) {
      hex = '0' + hex;
    }

    return 'U+' + hex;
  }

  _handleKeyDown(event) {
    const code = event.keyCode || event.charCode;
    if (code === undefined) return;
    const id = this.toKeyIdentifier(code);
    this._keymap[id] = true;
    this.fire('keydown', makeKeyboardEvent(event));

    if (this.preventDefault) {
      event.preventDefault();
    }

    if (this.stopPropagation) {
      event.stopPropagation();
    }
  }

  _handleKeyUp(event) {
    const code = event.keyCode || event.charCode;
    if (code === undefined) return;
    const id = this.toKeyIdentifier(code);
    delete this._keymap[id];
    this.fire('keyup', makeKeyboardEvent(event));

    if (this.preventDefault) {
      event.preventDefault();
    }

    if (this.stopPropagation) {
      event.stopPropagation();
    }
  }

  _handleKeyPress(event) {
    this.fire('keypress', makeKeyboardEvent(event));

    if (this.preventDefault) {
      event.preventDefault();
    }

    if (this.stopPropagation) {
      event.stopPropagation();
    }
  }

  _handleVisibilityChange() {
    if (document.visibilityState === 'hidden') {
      this._handleWindowBlur();
    }
  }

  _handleWindowBlur() {
    this._keymap = {};
    this._lastmap = {};
  }

  update() {
    for (const prop in this._lastmap) {
      delete this._lastmap[prop];
    }

    for (const prop in this._keymap) {
      if (this._keymap.hasOwnProperty(prop)) {
        this._lastmap[prop] = this._keymap[prop];
      }
    }
  }

  isPressed(key) {
    const keyCode = toKeyCode(key);
    const id = this.toKeyIdentifier(keyCode);
    return !!this._keymap[id];
  }

  wasPressed(key) {
    const keyCode = toKeyCode(key);
    const id = this.toKeyIdentifier(keyCode);
    return !!this._keymap[id] && !!!this._lastmap[id];
  }

  wasReleased(key) {
    const keyCode = toKeyCode(key);
    const id = this.toKeyIdentifier(keyCode);
    return !!!this._keymap[id] && !!this._lastmap[id];
  }

}

function isMousePointerLocked() {
  return !!(document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement);
}

class MouseEvent$1 {
  constructor(mouse, event) {
    let coords = {
      x: 0,
      y: 0
    };

    if (event) {
      if (event instanceof MouseEvent$1) {
        throw Error('Expected MouseEvent');
      }

      coords = mouse._getTargetCoords(event);
    } else {
      event = {};
    }

    if (coords) {
      this.x = coords.x;
      this.y = coords.y;
    } else if (isMousePointerLocked()) {
      this.x = 0;
      this.y = 0;
    } else {
      return;
    }

    this.wheelDelta = 0;

    if (event.type === 'wheel') {
      if (event.deltaY > 0) {
        this.wheelDelta = 1;
      } else if (event.deltaY < 0) {
        this.wheelDelta = -1;
      }
    }

    if (isMousePointerLocked()) {
      this.dx = event.movementX || event.webkitMovementX || event.mozMovementX || 0;
      this.dy = event.movementY || event.webkitMovementY || event.mozMovementY || 0;
    } else {
      this.dx = this.x - mouse._lastX;
      this.dy = this.y - mouse._lastY;
    }

    if (event.type === 'mousedown' || event.type === 'mouseup') {
      this.button = event.button;
    } else {
      this.button = MOUSEBUTTON_NONE;
    }

    this.buttons = mouse._buttons.slice(0);
    this.element = event.target;
    this.ctrlKey = event.ctrlKey || false;
    this.altKey = event.altKey || false;
    this.shiftKey = event.shiftKey || false;
    this.metaKey = event.metaKey || false;
    this.event = event;
  }

}

class Mouse extends EventHandler {
  constructor(element) {
    super();
    this._lastX = 0;
    this._lastY = 0;
    this._buttons = [false, false, false];
    this._lastbuttons = [false, false, false];
    this._upHandler = this._handleUp.bind(this);
    this._downHandler = this._handleDown.bind(this);
    this._moveHandler = this._handleMove.bind(this);
    this._wheelHandler = this._handleWheel.bind(this);

    this._contextMenuHandler = event => {
      event.preventDefault();
    };

    this._target = null;
    this._attached = false;
    this.attach(element);
  }

  static isPointerLocked() {
    return isMousePointerLocked();
  }

  attach(element) {
    this._target = element;
    if (this._attached) return;
    this._attached = true;
    const opts = platform.passiveEvents ? {
      passive: false
    } : false;
    window.addEventListener('mouseup', this._upHandler, opts);
    window.addEventListener('mousedown', this._downHandler, opts);
    window.addEventListener('mousemove', this._moveHandler, opts);
    window.addEventListener('wheel', this._wheelHandler, opts);
  }

  detach() {
    if (!this._attached) return;
    this._attached = false;
    this._target = null;
    const opts = platform.passiveEvents ? {
      passive: false
    } : false;
    window.removeEventListener('mouseup', this._upHandler, opts);
    window.removeEventListener('mousedown', this._downHandler, opts);
    window.removeEventListener('mousemove', this._moveHandler, opts);
    window.removeEventListener('wheel', this._wheelHandler, opts);
  }

  disableContextMenu() {
    if (!this._target) return;

    this._target.addEventListener('contextmenu', this._contextMenuHandler);
  }

  enableContextMenu() {
    if (!this._target) return;

    this._target.removeEventListener('contextmenu', this._contextMenuHandler);
  }

  enablePointerLock(success, error) {
    if (!document.body.requestPointerLock) {
      if (error) error();
      return;
    }

    const s = () => {
      success();
      document.removeEventListener('pointerlockchange', s);
    };

    const e = () => {
      error();
      document.removeEventListener('pointerlockerror', e);
    };

    if (success) {
      document.addEventListener('pointerlockchange', s, false);
    }

    if (error) {
      document.addEventListener('pointerlockerror', e, false);
    }

    document.body.requestPointerLock();
  }

  disablePointerLock(success) {
    if (!document.exitPointerLock) {
      return;
    }

    const s = () => {
      success();
      document.removeEventListener('pointerlockchange', s);
    };

    if (success) {
      document.addEventListener('pointerlockchange', s, false);
    }

    document.exitPointerLock();
  }

  update() {
    this._lastbuttons[0] = this._buttons[0];
    this._lastbuttons[1] = this._buttons[1];
    this._lastbuttons[2] = this._buttons[2];
  }

  isPressed(button) {
    return this._buttons[button];
  }

  wasPressed(button) {
    return this._buttons[button] && !this._lastbuttons[button];
  }

  wasReleased(button) {
    return !this._buttons[button] && this._lastbuttons[button];
  }

  _handleUp(event) {
    this._buttons[event.button] = false;
    const e = new MouseEvent$1(this, event);
    if (!e.event) return;
    this.fire(EVENT_MOUSEUP, e);
  }

  _handleDown(event) {
    this._buttons[event.button] = true;
    const e = new MouseEvent$1(this, event);
    if (!e.event) return;
    this.fire(EVENT_MOUSEDOWN, e);
  }

  _handleMove(event) {
    const e = new MouseEvent$1(this, event);
    if (!e.event) return;
    this.fire(EVENT_MOUSEMOVE, e);
    this._lastX = e.x;
    this._lastY = e.y;
  }

  _handleWheel(event) {
    const e = new MouseEvent$1(this, event);
    if (!e.event) return;
    this.fire(EVENT_MOUSEWHEEL, e);
  }

  _getTargetCoords(event) {
    const rect = this._target.getBoundingClientRect();

    const left = Math.floor(rect.left);
    const top = Math.floor(rect.top);

    if (event.clientX < left || event.clientX >= left + this._target.clientWidth || event.clientY < top || event.clientY >= top + this._target.clientHeight) {
      return null;
    }

    return {
      x: event.clientX - left,
      y: event.clientY - top
    };
  }

}

class Controller {
  constructor(element, options = {}) {
    this._keyboard = options.keyboard || null;
    this._mouse = options.mouse || null;
    this._gamepads = options.gamepads || null;
    this._element = null;
    this._actions = {};
    this._axes = {};
    this._axesValues = {};

    if (element) {
      this.attach(element);
    }
  }

  attach(element) {
    this._element = element;

    if (this._keyboard) {
      this._keyboard.attach(element);
    }

    if (this._mouse) {
      this._mouse.attach(element);
    }
  }

  detach() {
    if (this._keyboard) {
      this._keyboard.detach();
    }

    if (this._mouse) {
      this._mouse.detach();
    }

    this._element = null;
  }

  disableContextMenu() {
    if (!this._mouse) {
      this._enableMouse();
    }

    this._mouse.disableContextMenu();
  }

  enableContextMenu() {
    if (!this._mouse) {
      this._enableMouse();
    }

    this._mouse.enableContextMenu();
  }

  update(dt) {
    if (this._keyboard) {
      this._keyboard.update();
    }

    if (this._mouse) {
      this._mouse.update();
    }

    if (this._gamepads) {
      this._gamepads.update();
    }

    this._axesValues = {};

    for (const key in this._axes) {
      this._axesValues[key] = [];
    }
  }

  appendAction(action_name, action) {
    this._actions[action_name] = this._actions[action_name] || [];

    this._actions[action_name].push(action);
  }

  registerKeys(action, keys) {
    if (!this._keyboard) {
      this._enableKeyboard();
    }

    if (this._actions[action]) {
      throw new Error(`Action: ${action} already registered`);
    }

    if (keys === undefined) {
      throw new Error('Invalid button');
    }

    if (!keys.length) {
      keys = [keys];
    }

    this.appendAction(action, {
      type: ACTION_KEYBOARD,
      keys
    });
  }

  registerMouse(action, button) {
    if (!this._mouse) {
      this._enableMouse();
    }

    if (button === undefined) {
      throw new Error('Invalid button');
    }

    this.appendAction(action, {
      type: ACTION_MOUSE,
      button
    });
  }

  registerPadButton(action, pad, button) {
    if (button === undefined) {
      throw new Error('Invalid button');
    }

    this.appendAction(action, {
      type: ACTION_GAMEPAD,
      button,
      pad
    });
  }

  registerAxis(options) {
    const name = options.name;

    if (!this._axes[name]) {
      this._axes[name] = [];
    }

    const i = this._axes[name].push(name);

    options = options || {};
    options.pad = options.pad || PAD_1;

    const bind = function bind(controller, source, value, key) {
      switch (source) {
        case 'mousex':
          controller._mouse.on(EVENT_MOUSEMOVE, function (e) {
            controller._axesValues[name][i] = e.dx / 10;
          });

          break;

        case 'mousey':
          controller._mouse.on(EVENT_MOUSEMOVE, function (e) {
            controller._axesValues[name][i] = e.dy / 10;
          });

          break;

        case 'key':
          controller._axes[name].push(function () {
            return controller._keyboard.isPressed(key) ? value : 0;
          });

          break;

        case 'padrx':
          controller._axes[name].push(function () {
            return controller._gamepads.getAxis(options.pad, PAD_R_STICK_X);
          });

          break;

        case 'padry':
          controller._axes[name].push(function () {
            return controller._gamepads.getAxis(options.pad, PAD_R_STICK_Y);
          });

          break;

        case 'padlx':
          controller._axes[name].push(function () {
            return controller._gamepads.getAxis(options.pad, PAD_L_STICK_X);
          });

          break;

        case 'padly':
          controller._axes[name].push(function () {
            return controller._gamepads.getAxis(options.pad, PAD_L_STICK_Y);
          });

          break;

        default:
          throw new Error('Unknown axis');
      }
    };

    bind(this, options.positive, 1, options.positiveKey);

    if (options.negativeKey || options.negative !== options.positive) {
      bind(this, options.negative, -1, options.negativeKey);
    }
  }

  isPressed(actionName) {
    if (!this._actions[actionName]) {
      return false;
    }

    const length = this._actions[actionName].length;

    for (let index = 0; index < length; ++index) {
      const action = this._actions[actionName][index];

      switch (action.type) {
        case ACTION_KEYBOARD:
          if (this._keyboard) {
            const len = action.keys.length;

            for (let i = 0; i < len; i++) {
              if (this._keyboard.isPressed(action.keys[i])) {
                return true;
              }
            }
          }

          break;

        case ACTION_MOUSE:
          if (this._mouse && this._mouse.isPressed(action.button)) {
            return true;
          }

          break;

        case ACTION_GAMEPAD:
          if (this._gamepads && this._gamepads.isPressed(action.pad, action.button)) {
            return true;
          }

          break;
      }
    }

    return false;
  }

  wasPressed(actionName) {
    if (!this._actions[actionName]) {
      return false;
    }

    const length = this._actions[actionName].length;

    for (let index = 0; index < length; ++index) {
      const action = this._actions[actionName][index];

      switch (action.type) {
        case ACTION_KEYBOARD:
          if (this._keyboard) {
            const len = action.keys.length;

            for (let i = 0; i < len; i++) {
              if (this._keyboard.wasPressed(action.keys[i])) {
                return true;
              }
            }
          }

          break;

        case ACTION_MOUSE:
          if (this._mouse && this._mouse.wasPressed(action.button)) {
            return true;
          }

          break;

        case ACTION_GAMEPAD:
          if (this._gamepads && this._gamepads.wasPressed(action.pad, action.button)) {
            return true;
          }

          break;
      }
    }

    return false;
  }

  getAxis(name) {
    let value = 0;

    if (this._axes[name]) {
      const len = this._axes[name].length;

      for (let i = 0; i < len; i++) {
        if (type$1(this._axes[name][i]) === 'function') {
          const v = this._axes[name][i]();

          if (Math.abs(v) > Math.abs(value)) {
            value = v;
          }
        } else if (this._axesValues[name]) {
          if (Math.abs(this._axesValues[name][i]) > Math.abs(value)) {
            value = this._axesValues[name][i];
          }
        }
      }
    }

    return value;
  }

  _enableMouse() {
    this._mouse = new Mouse();

    if (!this._element) {
      throw new Error('Controller must be attached to an Element');
    }

    this._mouse.attach(this._element);
  }

  _enableKeyboard() {
    this._keyboard = new Keyboard();

    if (!this._element) {
      throw new Error('Controller must be attached to an Element');
    }

    this._keyboard.attach(this._element);
  }

}

let targetX, targetY;
const vecA$2 = new Vec3();
const vecB$2 = new Vec3();
const rayA = new Ray();
const rayB = new Ray();
const rayC = new Ray();
rayA.end = new Vec3();
rayB.end = new Vec3();
rayC.end = new Vec3();

const _pq = new Vec3();

const _pa = new Vec3();

const _pb = new Vec3();

const _pc = new Vec3();

const _pd = new Vec3();

const _m = new Vec3();

const _au = new Vec3();

const _bv = new Vec3();

const _cw = new Vec3();

const _ir = new Vec3();

const _sct = new Vec3();

const _accumulatedScale = new Vec3();

const _paddingTop = new Vec3();

const _paddingBottom = new Vec3();

const _paddingLeft = new Vec3();

const _paddingRight = new Vec3();

const _cornerBottomLeft = new Vec3();

const _cornerBottomRight = new Vec3();

const _cornerTopRight = new Vec3();

const _cornerTopLeft = new Vec3();

const ZERO_VEC4 = new Vec4();

function scalarTriple(p1, p2, p3) {
  return _sct.cross(p1, p2).dot(p3);
}

function intersectLineQuad(p, q, corners) {
  _pq.sub2(q, p);

  _pa.sub2(corners[0], p);

  _pb.sub2(corners[1], p);

  _pc.sub2(corners[2], p);

  _m.cross(_pc, _pq);

  let v = _pa.dot(_m);

  let u;
  let w;

  if (v >= 0) {
    u = -_pb.dot(_m);
    if (u < 0) return -1;
    w = scalarTriple(_pq, _pb, _pa);
    if (w < 0) return -1;
    const denom = 1.0 / (u + v + w);

    _au.copy(corners[0]).mulScalar(u * denom);

    _bv.copy(corners[1]).mulScalar(v * denom);

    _cw.copy(corners[2]).mulScalar(w * denom);

    _ir.copy(_au).add(_bv).add(_cw);
  } else {
    _pd.sub2(corners[3], p);

    u = _pd.dot(_m);
    if (u < 0) return -1;
    w = scalarTriple(_pq, _pa, _pd);
    if (w < 0) return -1;
    v = -v;
    const denom = 1.0 / (u + v + w);

    _au.copy(corners[0]).mulScalar(u * denom);

    _bv.copy(corners[3]).mulScalar(v * denom);

    _cw.copy(corners[2]).mulScalar(w * denom);

    _ir.copy(_au).add(_bv).add(_cw);
  }

  if (_pq.sub2(corners[0], corners[2]).lengthSq() < 0.0001 * 0.0001) return -1;
  if (_pq.sub2(corners[1], corners[3]).lengthSq() < 0.0001 * 0.0001) return -1;
  return _ir.sub(p).lengthSq();
}

class ElementInputEvent {
  constructor(event, element, camera) {
    this.event = event;
    this.element = element;
    this.camera = camera;
    this._stopPropagation = false;
  }

  stopPropagation() {
    this._stopPropagation = true;

    if (this.event) {
      this.event.stopImmediatePropagation();
      this.event.stopPropagation();
    }
  }

}

class ElementMouseEvent extends ElementInputEvent {
  constructor(event, element, camera, x, y, lastX, lastY) {
    super(event, element, camera);
    this.x = x;
    this.y = y;
    this.ctrlKey = event.ctrlKey || false;
    this.altKey = event.altKey || false;
    this.shiftKey = event.shiftKey || false;
    this.metaKey = event.metaKey || false;
    this.button = event.button;

    if (Mouse.isPointerLocked()) {
      this.dx = event.movementX || event.webkitMovementX || event.mozMovementX || 0;
      this.dy = event.movementY || event.webkitMovementY || event.mozMovementY || 0;
    } else {
      this.dx = x - lastX;
      this.dy = y - lastY;
    }

    this.wheelDelta = 0;

    if (event.type === 'wheel') {
      if (event.deltaY > 0) {
        this.wheelDelta = 1;
      } else if (event.deltaY < 0) {
        this.wheelDelta = -1;
      }
    }
  }

}

class ElementTouchEvent extends ElementInputEvent {
  constructor(event, element, camera, x, y, touch) {
    super(event, element, camera);
    this.touches = event.touches;
    this.changedTouches = event.changedTouches;
    this.x = x;
    this.y = y;
    this.touch = touch;
  }

}

class ElementSelectEvent extends ElementInputEvent {
  constructor(event, element, camera, inputSource) {
    super(event, element, camera);
    this.inputSource = inputSource;
  }

}

class ElementInput {
  constructor(domElement, options) {
    this._app = null;
    this._attached = false;
    this._target = null;
    this._enabled = true;
    this._lastX = 0;
    this._lastY = 0;
    this._upHandler = this._handleUp.bind(this);
    this._downHandler = this._handleDown.bind(this);
    this._moveHandler = this._handleMove.bind(this);
    this._wheelHandler = this._handleWheel.bind(this);
    this._touchstartHandler = this._handleTouchStart.bind(this);
    this._touchendHandler = this._handleTouchEnd.bind(this);
    this._touchcancelHandler = this._touchendHandler;
    this._touchmoveHandler = this._handleTouchMove.bind(this);
    this._sortHandler = this._sortElements.bind(this);
    this._elements = [];
    this._hoveredElement = null;
    this._pressedElement = null;
    this._touchedElements = {};
    this._touchesForWhichTouchLeaveHasFired = {};
    this._selectedElements = {};
    this._selectedPressedElements = {};
    this._useMouse = !options || options.useMouse !== false;
    this._useTouch = !options || options.useTouch !== false;
    this._useXr = !options || options.useXr !== false;
    this._selectEventsAttached = false;
    if (platform.touch) this._clickedEntities = {};
    this.attach(domElement);
  }

  set enabled(value) {
    this._enabled = value;
  }

  get enabled() {
    return this._enabled;
  }

  set app(value) {
    this._app = value;
  }

  get app() {
    return this._app || getApplication();
  }

  attach(domElement) {
    if (this._attached) {
      this._attached = false;
      this.detach();
    }

    this._target = domElement;
    this._attached = true;
    const opts = platform.passiveEvents ? {
      passive: true
    } : false;

    if (this._useMouse) {
      window.addEventListener('mouseup', this._upHandler, opts);
      window.addEventListener('mousedown', this._downHandler, opts);
      window.addEventListener('mousemove', this._moveHandler, opts);
      window.addEventListener('wheel', this._wheelHandler, opts);
    }

    if (this._useTouch && platform.touch) {
      this._target.addEventListener('touchstart', this._touchstartHandler, opts);

      this._target.addEventListener('touchend', this._touchendHandler, false);

      this._target.addEventListener('touchmove', this._touchmoveHandler, false);

      this._target.addEventListener('touchcancel', this._touchcancelHandler, false);
    }

    this.attachSelectEvents();
  }

  attachSelectEvents() {
    if (!this._selectEventsAttached && this._useXr && this.app && this.app.xr && this.app.xr.supported) {
      if (!this._clickedEntities) this._clickedEntities = {};
      this._selectEventsAttached = true;
      this.app.xr.on('start', this._onXrStart, this);
    }
  }

  detach() {
    if (!this._attached) return;
    this._attached = false;
    const opts = platform.passiveEvents ? {
      passive: true
    } : false;

    if (this._useMouse) {
      window.removeEventListener('mouseup', this._upHandler, opts);
      window.removeEventListener('mousedown', this._downHandler, opts);
      window.removeEventListener('mousemove', this._moveHandler, opts);
      window.removeEventListener('wheel', this._wheelHandler, opts);
    }

    if (this._useTouch) {
      this._target.removeEventListener('touchstart', this._touchstartHandler, opts);

      this._target.removeEventListener('touchend', this._touchendHandler, false);

      this._target.removeEventListener('touchmove', this._touchmoveHandler, false);

      this._target.removeEventListener('touchcancel', this._touchcancelHandler, false);
    }

    if (this._selectEventsAttached) {
      this._selectEventsAttached = false;
      this.app.xr.off('start', this._onXrStart, this);
      this.app.xr.off('end', this._onXrEnd, this);
      this.app.xr.off('update', this._onXrUpdate, this);
      this.app.xr.input.off('selectstart', this._onSelectStart, this);
      this.app.xr.input.off('selectend', this._onSelectEnd, this);
      this.app.xr.input.off('remove', this._onXrInputRemove, this);
    }

    this._target = null;
  }

  addElement(element) {
    if (this._elements.indexOf(element) === -1) this._elements.push(element);
  }

  removeElement(element) {
    const idx = this._elements.indexOf(element);

    if (idx !== -1) this._elements.splice(idx, 1);
  }

  _handleUp(event) {
    if (!this._enabled) return;
    if (Mouse.isPointerLocked()) return;

    this._calcMouseCoords(event);

    this._onElementMouseEvent('mouseup', event);
  }

  _handleDown(event) {
    if (!this._enabled) return;
    if (Mouse.isPointerLocked()) return;

    this._calcMouseCoords(event);

    this._onElementMouseEvent('mousedown', event);
  }

  _handleMove(event) {
    if (!this._enabled) return;

    this._calcMouseCoords(event);

    this._onElementMouseEvent('mousemove', event);

    this._lastX = targetX;
    this._lastY = targetY;
  }

  _handleWheel(event) {
    if (!this._enabled) return;

    this._calcMouseCoords(event);

    this._onElementMouseEvent('mousewheel', event);
  }

  _determineTouchedElements(event) {
    const touchedElements = {};
    const cameras = this.app.systems.camera.cameras;

    for (let i = cameras.length - 1; i >= 0; i--) {
      const camera = cameras[i];
      let done = 0;
      const len = event.changedTouches.length;

      for (let j = 0; j < len; j++) {
        if (touchedElements[event.changedTouches[j].identifier]) {
          done++;
          continue;
        }

        const coords = this._calcTouchCoords(event.changedTouches[j]);

        const element = this._getTargetElementByCoords(camera, coords.x, coords.y);

        if (element) {
          done++;
          touchedElements[event.changedTouches[j].identifier] = {
            element: element,
            camera: camera,
            x: coords.x,
            y: coords.y
          };
        }
      }

      if (done === len) {
        break;
      }
    }

    return touchedElements;
  }

  _handleTouchStart(event) {
    if (!this._enabled) return;

    const newTouchedElements = this._determineTouchedElements(event);

    for (let i = 0, len = event.changedTouches.length; i < len; i++) {
      const touch = event.changedTouches[i];
      const newTouchInfo = newTouchedElements[touch.identifier];
      const oldTouchInfo = this._touchedElements[touch.identifier];

      if (newTouchInfo && (!oldTouchInfo || newTouchInfo.element !== oldTouchInfo.element)) {
        this._fireEvent(event.type, new ElementTouchEvent(event, newTouchInfo.element, newTouchInfo.camera, newTouchInfo.x, newTouchInfo.y, touch));

        this._touchesForWhichTouchLeaveHasFired[touch.identifier] = false;
      }
    }

    for (const touchId in newTouchedElements) {
      this._touchedElements[touchId] = newTouchedElements[touchId];
    }
  }

  _handleTouchEnd(event) {
    if (!this._enabled) return;
    const cameras = this.app.systems.camera.cameras;

    for (const key in this._clickedEntities) {
      delete this._clickedEntities[key];
    }

    for (let i = 0, len = event.changedTouches.length; i < len; i++) {
      const touch = event.changedTouches[i];
      const touchInfo = this._touchedElements[touch.identifier];
      if (!touchInfo) continue;
      const element = touchInfo.element;
      const camera = touchInfo.camera;
      const x = touchInfo.x;
      const y = touchInfo.y;
      delete this._touchedElements[touch.identifier];
      delete this._touchesForWhichTouchLeaveHasFired[touch.identifier];

      this._fireEvent(event.type, new ElementTouchEvent(event, element, camera, x, y, touch));

      const coords = this._calcTouchCoords(touch);

      for (let c = cameras.length - 1; c >= 0; c--) {
        const hovered = this._getTargetElementByCoords(cameras[c], coords.x, coords.y);

        if (hovered === element) {
          if (!this._clickedEntities[element.entity.getGuid()]) {
            this._fireEvent('click', new ElementTouchEvent(event, element, camera, x, y, touch));

            this._clickedEntities[element.entity.getGuid()] = true;
          }
        }
      }
    }
  }

  _handleTouchMove(event) {
    event.preventDefault();
    if (!this._enabled) return;

    const newTouchedElements = this._determineTouchedElements(event);

    for (let i = 0, len = event.changedTouches.length; i < len; i++) {
      const touch = event.changedTouches[i];
      const newTouchInfo = newTouchedElements[touch.identifier];
      const oldTouchInfo = this._touchedElements[touch.identifier];

      if (oldTouchInfo) {
        const coords = this._calcTouchCoords(touch);

        if ((!newTouchInfo || newTouchInfo.element !== oldTouchInfo.element) && !this._touchesForWhichTouchLeaveHasFired[touch.identifier]) {
          this._fireEvent('touchleave', new ElementTouchEvent(event, oldTouchInfo.element, oldTouchInfo.camera, coords.x, coords.y, touch));

          this._touchesForWhichTouchLeaveHasFired[touch.identifier] = true;
        }

        this._fireEvent('touchmove', new ElementTouchEvent(event, oldTouchInfo.element, oldTouchInfo.camera, coords.x, coords.y, touch));
      }
    }
  }

  _onElementMouseEvent(eventType, event) {
    let element = null;
    const lastHovered = this._hoveredElement;
    this._hoveredElement = null;
    const cameras = this.app.systems.camera.cameras;
    let camera;

    for (let i = cameras.length - 1; i >= 0; i--) {
      camera = cameras[i];
      element = this._getTargetElementByCoords(camera, targetX, targetY);
      if (element) break;
    }

    this._hoveredElement = element;

    if ((eventType === 'mousemove' || eventType === 'mouseup') && this._pressedElement) {
      this._fireEvent(eventType, new ElementMouseEvent(event, this._pressedElement, camera, targetX, targetY, this._lastX, this._lastY));
    } else if (element) {
      this._fireEvent(eventType, new ElementMouseEvent(event, element, camera, targetX, targetY, this._lastX, this._lastY));

      if (eventType === 'mousedown') {
        this._pressedElement = element;
      }
    }

    if (lastHovered !== this._hoveredElement) {
      if (lastHovered) {
        this._fireEvent('mouseleave', new ElementMouseEvent(event, lastHovered, camera, targetX, targetY, this._lastX, this._lastY));
      }

      if (this._hoveredElement) {
        this._fireEvent('mouseenter', new ElementMouseEvent(event, this._hoveredElement, camera, targetX, targetY, this._lastX, this._lastY));
      }
    }

    if (eventType === 'mouseup' && this._pressedElement) {
      if (this._pressedElement === this._hoveredElement) {
        this._pressedElement = null;

        if (!this._clickedEntities || !this._clickedEntities[this._hoveredElement.entity.getGuid()]) {
          this._fireEvent('click', new ElementMouseEvent(event, this._hoveredElement, camera, targetX, targetY, this._lastX, this._lastY));
        }
      } else {
        this._pressedElement = null;
      }
    }
  }

  _onXrStart() {
    this.app.xr.on('end', this._onXrEnd, this);
    this.app.xr.on('update', this._onXrUpdate, this);
    this.app.xr.input.on('selectstart', this._onSelectStart, this);
    this.app.xr.input.on('selectend', this._onSelectEnd, this);
    this.app.xr.input.on('remove', this._onXrInputRemove, this);
  }

  _onXrEnd() {
    this.app.xr.off('update', this._onXrUpdate, this);
    this.app.xr.input.off('selectstart', this._onSelectStart, this);
    this.app.xr.input.off('selectend', this._onSelectEnd, this);
    this.app.xr.input.off('remove', this._onXrInputRemove, this);
  }

  _onXrUpdate() {
    if (!this._enabled) return;
    const inputSources = this.app.xr.input.inputSources;

    for (let i = 0; i < inputSources.length; i++) {
      this._onElementSelectEvent('selectmove', inputSources[i], null);
    }
  }

  _onXrInputRemove(inputSource) {
    const hovered = this._selectedElements[inputSource.id];

    if (hovered) {
      inputSource._elementEntity = null;

      this._fireEvent('selectleave', new ElementSelectEvent(null, hovered, null, inputSource));
    }

    delete this._selectedElements[inputSource.id];
    delete this._selectedPressedElements[inputSource.id];
  }

  _onSelectStart(inputSource, event) {
    if (!this._enabled) return;

    this._onElementSelectEvent('selectstart', inputSource, event);
  }

  _onSelectEnd(inputSource, event) {
    if (!this._enabled) return;

    this._onElementSelectEvent('selectend', inputSource, event);
  }

  _onElementSelectEvent(eventType, inputSource, event) {
    let element;
    const hoveredBefore = this._selectedElements[inputSource.id];
    let hoveredNow;
    const cameras = this.app.systems.camera.cameras;
    let camera;

    if (inputSource.elementInput) {
      rayC.set(inputSource.getOrigin(), inputSource.getDirection());

      for (let i = cameras.length - 1; i >= 0; i--) {
        camera = cameras[i];
        element = this._getTargetElementByRay(rayC, camera);
        if (element) break;
      }
    }

    inputSource._elementEntity = element || null;

    if (element) {
      this._selectedElements[inputSource.id] = element;
      hoveredNow = element;
    } else {
      delete this._selectedElements[inputSource.id];
    }

    if (hoveredBefore !== hoveredNow) {
      if (hoveredBefore) this._fireEvent('selectleave', new ElementSelectEvent(event, hoveredBefore, camera, inputSource));
      if (hoveredNow) this._fireEvent('selectenter', new ElementSelectEvent(event, hoveredNow, camera, inputSource));
    }

    if (eventType === 'selectstart') {
      this._selectedPressedElements[inputSource.id] = hoveredNow;
      if (hoveredNow) this._fireEvent('selectstart', new ElementSelectEvent(event, hoveredNow, camera, inputSource));
    }

    const pressed = this._selectedPressedElements[inputSource.id];

    if (!inputSource.elementInput && pressed) {
      delete this._selectedPressedElements[inputSource.id];
      if (hoveredBefore) this._fireEvent('selectend', new ElementSelectEvent(event, hoveredBefore, camera, inputSource));
    }

    if (eventType === 'selectend' && inputSource.elementInput) {
      delete this._selectedPressedElements[inputSource.id];
      if (hoveredBefore) this._fireEvent('selectend', new ElementSelectEvent(event, hoveredBefore, camera, inputSource));

      if (pressed && pressed === hoveredBefore) {
        this._fireEvent('click', new ElementSelectEvent(event, pressed, camera, inputSource));
      }
    }
  }

  _fireEvent(name, evt) {
    let element = evt.element;

    while (true) {
      element.fire(name, evt);
      if (evt._stopPropagation) break;
      if (!element.entity.parent) break;
      element = element.entity.parent.element;
      if (!element) break;
    }
  }

  _calcMouseCoords(event) {
    const rect = this._target.getBoundingClientRect();

    const left = Math.floor(rect.left);
    const top = Math.floor(rect.top);
    targetX = event.clientX - left;
    targetY = event.clientY - top;
  }

  _calcTouchCoords(touch) {
    let totalOffsetX = 0;
    let totalOffsetY = 0;
    let target = touch.target;

    while (!(target instanceof HTMLElement)) {
      target = target.parentNode;
    }

    let currentElement = target;

    do {
      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
      currentElement = currentElement.offsetParent;
    } while (currentElement);

    return {
      x: touch.pageX - totalOffsetX,
      y: touch.pageY - totalOffsetY
    };
  }

  _sortElements(a, b) {
    const layerOrder = this.app.scene.layers.sortTransparentLayers(a.layers, b.layers);
    if (layerOrder !== 0) return layerOrder;
    if (a.screen && !b.screen) return -1;
    if (!a.screen && b.screen) return 1;
    if (!a.screen && !b.screen) return 0;
    if (a.screen.screen.screenSpace && !b.screen.screen.screenSpace) return -1;
    if (b.screen.screen.screenSpace && !a.screen.screen.screenSpace) return 1;
    return b.drawOrder - a.drawOrder;
  }

  _getTargetElementByCoords(camera, x, y) {
    const rayScreen = this._calculateRayScreen(x, y, camera, rayA) ? rayA : null;
    const ray3d = this._calculateRay3d(x, y, camera, rayB) ? rayB : null;
    return this._getTargetElement(camera, rayScreen, ray3d);
  }

  _getTargetElementByRay(ray, camera) {
    rayA.origin.copy(ray.origin);
    rayA.direction.copy(ray.direction);
    rayA.end.copy(rayA.direction).mulScalar(camera.farClip * 2).add(rayA.origin);
    const ray3d = rayA;
    const screenPos = camera.worldToScreen(ray3d.origin, vecA$2);
    const rayScreen = this._calculateRayScreen(screenPos.x, screenPos.y, camera, rayB) ? rayB : null;
    return this._getTargetElement(camera, rayScreen, ray3d);
  }

  _getTargetElement(camera, rayScreen, ray3d) {
    let result = null;
    let closestDistance3d = Infinity;

    this._elements.sort(this._sortHandler);

    for (let i = 0, len = this._elements.length; i < len; i++) {
      const element = this._elements[i];

      if (!element.layers.some(v => camera.layersSet.has(v))) {
        continue;
      }

      if (element.screen && element.screen.screen.screenSpace) {
        if (!rayScreen) {
          continue;
        }

        const currentDistance = this._checkElement(rayScreen, element, true);

        if (currentDistance >= 0) {
          result = element;
          break;
        }
      } else {
        if (!ray3d) {
          continue;
        }

        const currentDistance = this._checkElement(ray3d, element, false);

        if (currentDistance >= 0) {
          if (currentDistance < closestDistance3d) {
            result = element;
            closestDistance3d = currentDistance;
          }

          if (element.screen) {
            result = element;
            break;
          }
        }
      }
    }

    return result;
  }

  _buildHitCorners(element, screenOrWorldCorners, scaleX, scaleY, scaleZ) {
    let hitCorners = screenOrWorldCorners;
    const button = element.entity && element.entity.button;

    if (button) {
      const hitPadding = element.entity.button.hitPadding || ZERO_VEC4;

      _paddingTop.copy(element.entity.up);

      _paddingBottom.copy(_paddingTop).mulScalar(-1);

      _paddingRight.copy(element.entity.right);

      _paddingLeft.copy(_paddingRight).mulScalar(-1);

      _paddingTop.mulScalar(hitPadding.w * scaleY);

      _paddingBottom.mulScalar(hitPadding.y * scaleY);

      _paddingRight.mulScalar(hitPadding.z * scaleX);

      _paddingLeft.mulScalar(hitPadding.x * scaleX);

      _cornerBottomLeft.copy(hitCorners[0]).add(_paddingBottom).add(_paddingLeft);

      _cornerBottomRight.copy(hitCorners[1]).add(_paddingBottom).add(_paddingRight);

      _cornerTopRight.copy(hitCorners[2]).add(_paddingTop).add(_paddingRight);

      _cornerTopLeft.copy(hitCorners[3]).add(_paddingTop).add(_paddingLeft);

      hitCorners = [_cornerBottomLeft, _cornerBottomRight, _cornerTopRight, _cornerTopLeft];
    }

    if (scaleX < 0) {
      const left = hitCorners[2].x;
      const right = hitCorners[0].x;
      hitCorners[0].x = left;
      hitCorners[1].x = right;
      hitCorners[2].x = right;
      hitCorners[3].x = left;
    }

    if (scaleY < 0) {
      const bottom = hitCorners[2].y;
      const top = hitCorners[0].y;
      hitCorners[0].y = bottom;
      hitCorners[1].y = bottom;
      hitCorners[2].y = top;
      hitCorners[3].y = top;
    }

    if (scaleZ < 0) {
      const x = hitCorners[2].x;
      const y = hitCorners[2].y;
      const z = hitCorners[2].z;
      hitCorners[2].x = hitCorners[0].x;
      hitCorners[2].y = hitCorners[0].y;
      hitCorners[2].z = hitCorners[0].z;
      hitCorners[0].x = x;
      hitCorners[0].y = y;
      hitCorners[0].z = z;
    }

    return hitCorners;
  }

  _calculateScaleToScreen(element) {
    let current = element.entity;
    const screenScale = element.screen.screen.scale;

    _accumulatedScale.set(screenScale, screenScale, screenScale);

    while (current && !current.screen) {
      _accumulatedScale.mul(current.getLocalScale());

      current = current.parent;
    }

    return _accumulatedScale;
  }

  _calculateScaleToWorld(element) {
    let current = element.entity;

    _accumulatedScale.set(1, 1, 1);

    while (current) {
      _accumulatedScale.mul(current.getLocalScale());

      current = current.parent;
    }

    return _accumulatedScale;
  }

  _calculateRayScreen(x, y, camera, ray) {
    const sw = this.app.graphicsDevice.width;
    const sh = this.app.graphicsDevice.height;
    const cameraWidth = camera.rect.z * sw;
    const cameraHeight = camera.rect.w * sh;
    const cameraLeft = camera.rect.x * sw;
    const cameraRight = cameraLeft + cameraWidth;
    const cameraBottom = (1 - camera.rect.y) * sh;
    const cameraTop = cameraBottom - cameraHeight;

    let _x = x * sw / this._target.clientWidth;

    let _y = y * sh / this._target.clientHeight;

    if (_x >= cameraLeft && _x <= cameraRight && _y <= cameraBottom && _y >= cameraTop) {
      _x = sw * (_x - cameraLeft) / cameraWidth;
      _y = sh * (_y - cameraTop) / cameraHeight;
      _y = sh - _y;
      ray.origin.set(_x, _y, 1);
      ray.direction.set(0, 0, -1);
      ray.end.copy(ray.direction).mulScalar(2).add(ray.origin);
      return true;
    }

    return false;
  }

  _calculateRay3d(x, y, camera, ray) {
    const sw = this._target.clientWidth;
    const sh = this._target.clientHeight;
    const cameraWidth = camera.rect.z * sw;
    const cameraHeight = camera.rect.w * sh;
    const cameraLeft = camera.rect.x * sw;
    const cameraRight = cameraLeft + cameraWidth;
    const cameraBottom = (1 - camera.rect.y) * sh;
    const cameraTop = cameraBottom - cameraHeight;
    let _x = x;
    let _y = y;

    if (x >= cameraLeft && x <= cameraRight && y <= cameraBottom && _y >= cameraTop) {
      _x = sw * (_x - cameraLeft) / cameraWidth;
      _y = sh * (_y - cameraTop) / cameraHeight;
      camera.screenToWorld(_x, _y, camera.nearClip, vecA$2);
      camera.screenToWorld(_x, _y, camera.farClip, vecB$2);
      ray.origin.copy(vecA$2);
      ray.direction.set(0, 0, -1);
      ray.end.copy(vecB$2);
      return true;
    }

    return false;
  }

  _checkElement(ray, element, screen) {
    if (element.maskedBy) {
      if (this._checkElement(ray, element.maskedBy.element, screen) < 0) {
        return -1;
      }
    }

    let scale;

    if (screen) {
      scale = this._calculateScaleToScreen(element);
    } else {
      scale = this._calculateScaleToWorld(element);
    }

    const corners = this._buildHitCorners(element, screen ? element.screenCorners : element.worldCorners, scale.x, scale.y, scale.z);

    return intersectLineQuad(ray.origin, ray.end, corners);
  }

}

const MAPS = {
  DEFAULT: {
    buttons: ['PAD_FACE_1', 'PAD_FACE_2', 'PAD_FACE_3', 'PAD_FACE_4', 'PAD_L_SHOULDER_1', 'PAD_R_SHOULDER_1', 'PAD_L_SHOULDER_2', 'PAD_R_SHOULDER_2', 'PAD_SELECT', 'PAD_START', 'PAD_L_STICK_BUTTON', 'PAD_R_STICK_BUTTON', 'PAD_UP', 'PAD_DOWN', 'PAD_LEFT', 'PAD_RIGHT', 'PAD_VENDOR'],
    axes: ['PAD_L_STICK_X', 'PAD_L_STICK_Y', 'PAD_R_STICK_X', 'PAD_R_STICK_Y']
  },
  PS3: {
    buttons: ['PAD_FACE_1', 'PAD_FACE_2', 'PAD_FACE_4', 'PAD_FACE_3', 'PAD_L_SHOULDER_1', 'PAD_R_SHOULDER_1', 'PAD_L_SHOULDER_2', 'PAD_R_SHOULDER_2', 'PAD_SELECT', 'PAD_START', 'PAD_L_STICK_BUTTON', 'PAD_R_STICK_BUTTON', 'PAD_UP', 'PAD_DOWN', 'PAD_LEFT', 'PAD_RIGHT', 'PAD_VENDOR'],
    axes: ['PAD_L_STICK_X', 'PAD_L_STICK_Y', 'PAD_R_STICK_X', 'PAD_R_STICK_Y']
  }
};
const PRODUCT_CODES = {
  'Product: 0268': 'PS3'
};

class GamePads {
  constructor() {
    this.gamepadsSupported = !!navigator.getGamepads || !!navigator.webkitGetGamepads;
    this.current = [];
    this.previous = [];
    this.deadZone = 0.25;
  }

  update() {
    for (let i = 0, l = this.current.length; i < l; i++) {
      const buttons = this.current[i].pad.buttons;
      const buttonsLen = buttons.length;

      for (let j = 0; j < buttonsLen; j++) {
        if (this.previous[i] === undefined) {
          this.previous[i] = [];
        }

        this.previous[i][j] = buttons[j].pressed;
      }
    }

    this.poll(this.current);
  }

  poll(pads = []) {
    if (pads.length > 0) {
      pads.length = 0;
    }

    if (this.gamepadsSupported) {
      const padDevices = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads();

      for (let i = 0, len = padDevices.length; i < len; i++) {
        if (padDevices[i]) {
          pads.push({
            map: this.getMap(padDevices[i]),
            pad: padDevices[i]
          });
        }
      }
    }

    return pads;
  }

  getMap(pad) {
    for (const code in PRODUCT_CODES) {
      if (pad.id.indexOf(code) >= 0) {
        return MAPS[PRODUCT_CODES[code]];
      }
    }

    return MAPS.DEFAULT;
  }

  isPressed(index, button) {
    if (!this.current[index]) {
      return false;
    }

    const key = this.current[index].map.buttons[button];
    return this.current[index].pad.buttons[pc[key]].pressed;
  }

  wasPressed(index, button) {
    if (!this.current[index]) {
      return false;
    }

    const key = this.current[index].map.buttons[button];
    const i = pc[key];
    return this.current[index].pad.buttons[i].pressed && !(this.previous[index] && this.previous[index][i]);
  }

  wasReleased(index, button) {
    if (!this.current[index]) {
      return false;
    }

    const key = this.current[index].map.buttons[button];
    const i = pc[key];
    return !this.current[index].pad.buttons[i].pressed && this.previous[index] && this.previous[index][i];
  }

  getAxis(index, axes) {
    if (!this.current[index]) {
      return 0;
    }

    const key = this.current[index].map.axes[axes];
    let value = this.current[index].pad.axes[pc[key]];

    if (Math.abs(value) < this.deadZone) {
      value = 0;
    }

    return value;
  }

}

function getTouchTargetCoords(touch) {
  let totalOffsetX = 0;
  let totalOffsetY = 0;
  let target = touch.target;

  while (!(target instanceof HTMLElement)) {
    target = target.parentNode;
  }

  let currentElement = target;

  do {
    totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
    totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    currentElement = currentElement.offsetParent;
  } while (currentElement);

  return {
    x: touch.pageX - totalOffsetX,
    y: touch.pageY - totalOffsetY
  };
}

class Touch {
  constructor(touch) {
    const coords = getTouchTargetCoords(touch);
    this.id = touch.identifier;
    this.x = coords.x;
    this.y = coords.y;
    this.target = touch.target;
    this.touch = touch;
  }

}

class TouchEvent {
  constructor(device, event) {
    this.element = event.target;
    this.event = event;
    this.touches = [];
    this.changedTouches = [];

    if (event) {
      for (let i = 0, l = event.touches.length; i < l; i++) {
        this.touches.push(new Touch(event.touches[i]));
      }

      for (let i = 0, l = event.changedTouches.length; i < l; i++) {
        this.changedTouches.push(new Touch(event.changedTouches[i]));
      }
    }
  }

  getTouchById(id, list) {
    for (let i = 0, l = list.length; i < l; i++) {
      if (list[i].id === id) {
        return list[i];
      }
    }

    return null;
  }

}

class TouchDevice extends EventHandler {
  constructor(element) {
    super();
    this._element = null;
    this._startHandler = this._handleTouchStart.bind(this);
    this._endHandler = this._handleTouchEnd.bind(this);
    this._moveHandler = this._handleTouchMove.bind(this);
    this._cancelHandler = this._handleTouchCancel.bind(this);
    this.attach(element);
  }

  attach(element) {
    if (this._element) {
      this.detach();
    }

    this._element = element;

    this._element.addEventListener('touchstart', this._startHandler, false);

    this._element.addEventListener('touchend', this._endHandler, false);

    this._element.addEventListener('touchmove', this._moveHandler, false);

    this._element.addEventListener('touchcancel', this._cancelHandler, false);
  }

  detach() {
    if (this._element) {
      this._element.removeEventListener('touchstart', this._startHandler, false);

      this._element.removeEventListener('touchend', this._endHandler, false);

      this._element.removeEventListener('touchmove', this._moveHandler, false);

      this._element.removeEventListener('touchcancel', this._cancelHandler, false);
    }

    this._element = null;
  }

  _handleTouchStart(e) {
    this.fire('touchstart', new TouchEvent(this, e));
  }

  _handleTouchEnd(e) {
    this.fire('touchend', new TouchEvent(this, e));
  }

  _handleTouchMove(e) {
    e.preventDefault();
    this.fire('touchmove', new TouchEvent(this, e));
  }

  _handleTouchCancel(e) {
    this.fire('touchcancel', new TouchEvent(this, e));
  }

}

class AppOptions {
  constructor() {
    this.elementInput = void 0;
    this.keyboard = void 0;
    this.mouse = void 0;
    this.touch = void 0;
    this.gamepads = void 0;
    this.scriptPrefix = void 0;
    this.assetPrefix = void 0;
    this.scriptsOrder = void 0;
    this.soundManager = void 0;
    this.graphicsDevice = void 0;
    this.lightmapper = void 0;
    this.batchManager = void 0;
    this.xr = void 0;
    this.componentSystems = [];
    this.resourceHandlers = [];
  }

}

class ComponentSystem extends EventHandler {
  constructor(app) {
    super();
    this.app = app;
    this.store = {};
    this.schema = [];
  }

  addComponent(entity, data = {}) {
    const component = new this.ComponentType(this, entity);
    const componentData = new this.DataType();
    this.store[entity.getGuid()] = {
      entity: entity,
      data: componentData
    };
    entity[this.id] = component;
    entity.c[this.id] = component;
    this.initializeComponentData(component, data, []);
    this.fire('add', entity, component);
    return component;
  }

  removeComponent(entity) {
    const record = this.store[entity.getGuid()];
    const component = entity.c[this.id];
    this.fire('beforeremove', entity, component);
    delete this.store[entity.getGuid()];
    entity[this.id] = undefined;
    delete entity.c[this.id];
    this.fire('remove', entity, record.data);
  }

  cloneComponent(entity, clone) {
    const src = this.store[entity.getGuid()];
    return this.addComponent(clone, src.data);
  }

  initializeComponentData(component, data = {}, properties) {
    for (let i = 0, len = properties.length; i < len; i++) {
      const descriptor = properties[i];
      let name, type;

      if (typeof descriptor === 'object') {
        name = descriptor.name;
        type = descriptor.type;
      } else {
        name = descriptor;
        type = undefined;
      }

      let value = data[name];

      if (value !== undefined) {
        if (type !== undefined) {
          value = convertValue(value, type);
        }

        component[name] = value;
      } else {
        component[name] = component.data[name];
      }
    }

    if (component.enabled && component.entity.enabled) {
      component.onEnable();
    }
  }

  getPropertiesOfType(type) {
    const matchingProperties = [];
    const schema = this.schema || [];
    schema.forEach(function (descriptor) {
      if (descriptor && typeof descriptor === 'object' && descriptor.type === type) {
        matchingProperties.push(descriptor);
      }
    });
    return matchingProperties;
  }

  destroy() {
    this.off();
  }

}

function convertValue(value, type) {
  if (!value) {
    return value;
  }

  switch (type) {
    case 'rgb':
      if (value instanceof Color) {
        return value.clone();
      }

      return new Color(value[0], value[1], value[2]);

    case 'rgba':
      if (value instanceof Color) {
        return value.clone();
      }

      return new Color(value[0], value[1], value[2], value[3]);

    case 'vec2':
      if (value instanceof Vec2) {
        return value.clone();
      }

      return new Vec2(value[0], value[1]);

    case 'vec3':
      if (value instanceof Vec3) {
        return value.clone();
      }

      return new Vec3(value[0], value[1], value[2]);

    case 'vec4':
      if (value instanceof Vec4) {
        return value.clone();
      }

      return new Vec4(value[0], value[1], value[2], value[3]);

    case 'boolean':
    case 'number':
    case 'string':
      return value;

    case 'entity':
      return value;

    default:
      throw new Error('Could not convert unhandled type: ' + type);
  }
}

class AnimationComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._animations = {};
    this._assets = [];
    this._loop = true;
    this.animEvaluator = null;
    this.model = null;
    this.skeleton = null;
    this.fromSkel = null;
    this.toSkel = null;
    this.animationsIndex = {};
    this.prevAnim = null;
    this.currAnim = null;
    this.blend = 0;
    this.blending = false;
    this.blendSpeed = 0;
    this.activate = true;
    this.speed = 1;
  }

  set animations(value) {
    this._animations = value;
    this.onSetAnimations();
  }

  get animations() {
    return this._animations;
  }

  set assets(value) {
    const assets = this._assets;

    if (assets && assets.length) {
      for (let i = 0; i < assets.length; i++) {
        if (assets[i]) {
          const asset = this.system.app.assets.get(assets[i]);

          if (asset) {
            asset.off('change', this.onAssetChanged, this);
            asset.off('remove', this.onAssetRemoved, this);
            const animName = this.animationsIndex[asset.id];
            if (this.currAnim === animName) this._stopCurrentAnimation();
            delete this.animations[animName];
            delete this.animationsIndex[asset.id];
          }
        }
      }
    }

    this._assets = value;
    const assetIds = value.map(value => {
      return value instanceof Asset ? value.id : value;
    });
    this.loadAnimationAssets(assetIds);
  }

  get assets() {
    return this._assets;
  }

  set currentTime(currentTime) {
    if (this.skeleton) {
      this.skeleton.currentTime = currentTime;
      this.skeleton.addTime(0);
      this.skeleton.updateGraph();
    }

    if (this.animEvaluator) {
      const clips = this.animEvaluator.clips;

      for (let i = 0; i < clips.length; ++i) {
        clips[i].time = currentTime;
      }
    }
  }

  get currentTime() {
    if (this.skeleton) {
      return this.skeleton._time;
    }

    if (this.animEvaluator) {
      const clips = this.animEvaluator.clips;

      if (clips.length > 0) {
        return clips[clips.length - 1].time;
      }
    }

    return 0;
  }

  get duration() {
    return this.animations[this.currAnim].duration;
  }

  set loop(value) {
    this._loop = value;

    if (this.skeleton) {
      this.skeleton.looping = value;
    }

    if (this.animEvaluator) {
      for (let i = 0; i < this.animEvaluator.clips.length; ++i) {
        this.animEvaluator.clips[i].loop = value;
      }
    }
  }

  get loop() {
    return this._loop;
  }

  play(name, blendTime = 0) {
    if (!this.enabled || !this.entity.enabled) {
      return;
    }

    if (!this.animations[name]) {
      return;
    }

    this.prevAnim = this.currAnim;
    this.currAnim = name;

    if (this.model) {
      if (!this.skeleton && !this.animEvaluator) {
        this._createAnimationController();
      }

      const prevAnim = this.animations[this.prevAnim];
      const currAnim = this.animations[this.currAnim];
      this.blending = blendTime > 0 && !!this.prevAnim;

      if (this.blending) {
        this.blend = 0;
        this.blendSpeed = 1 / blendTime;
      }

      if (this.skeleton) {
        if (this.blending) {
          this.fromSkel.animation = prevAnim;
          this.fromSkel.addTime(this.skeleton._time);
          this.toSkel.animation = currAnim;
        } else {
          this.skeleton.animation = currAnim;
        }
      }

      if (this.animEvaluator) {
        const animEvaluator = this.animEvaluator;

        if (this.blending) {
          while (animEvaluator.clips.length > 1) {
            animEvaluator.removeClip(0);
          }
        } else {
          this.animEvaluator.removeClips();
        }

        const clip = new AnimClip(this.animations[this.currAnim], 0, 1.0, true, this.loop);
        clip.name = this.currAnim;
        clip.blendWeight = this.blending ? 0 : 1;
        clip.reset();
        this.animEvaluator.addClip(clip);
      }
    }

    this.playing = true;
  }

  getAnimation(name) {
    return this.animations[name];
  }

  setModel(model) {
    if (model !== this.model) {
      this._resetAnimationController();

      this.model = model;

      if (this.animations && this.currAnim && this.animations[this.currAnim]) {
        this.play(this.currAnim);
      }
    }
  }

  onSetAnimations() {
    const modelComponent = this.entity.model;

    if (modelComponent) {
      const m = modelComponent.model;

      if (m && m !== this.model) {
        this.setModel(m);
      }
    }

    if (!this.currAnim && this.activate && this.enabled && this.entity.enabled) {
      const animationNames = Object.keys(this._animations);

      if (animationNames.length > 0) {
        this.play(animationNames[0]);
      }
    }
  }

  _resetAnimationController() {
    this.skeleton = null;
    this.fromSkel = null;
    this.toSkel = null;
    this.animEvaluator = null;
  }

  _createAnimationController() {
    const model = this.model;
    const animations = this.animations;
    let hasJson = false;
    let hasGlb = false;

    for (const animation in animations) {
      if (animations.hasOwnProperty(animation)) {
        const anim = animations[animation];

        if (anim.constructor === AnimTrack) {
          hasGlb = true;
        } else {
          hasJson = true;
        }
      }
    }

    const graph = model.getGraph();

    if (hasJson) {
      this.fromSkel = new Skeleton(graph);
      this.toSkel = new Skeleton(graph);
      this.skeleton = new Skeleton(graph);
      this.skeleton.looping = this.loop;
      this.skeleton.setGraph(graph);
    } else if (hasGlb) {
      this.animEvaluator = new AnimEvaluator(new DefaultAnimBinder(this.entity));
    }
  }

  loadAnimationAssets(ids) {
    if (!ids || !ids.length) return;
    const assets = this.system.app.assets;

    const onAssetReady = asset => {
      if (asset.resources.length > 1) {
        for (let i = 0; i < asset.resources.length; i++) {
          this.animations[asset.resources[i].name] = asset.resources[i];
          this.animationsIndex[asset.id] = asset.resources[i].name;
        }
      } else {
        this.animations[asset.name] = asset.resource;
        this.animationsIndex[asset.id] = asset.name;
      }

      this.animations = this.animations;
    };

    const onAssetAdd = asset => {
      asset.off('change', this.onAssetChanged, this);
      asset.on('change', this.onAssetChanged, this);
      asset.off('remove', this.onAssetRemoved, this);
      asset.on('remove', this.onAssetRemoved, this);

      if (asset.resource) {
        onAssetReady(asset);
      } else {
        asset.once('load', onAssetReady, this);
        if (this.enabled && this.entity.enabled) assets.load(asset);
      }
    };

    for (let i = 0, l = ids.length; i < l; i++) {
      const asset = assets.get(ids[i]);

      if (asset) {
        onAssetAdd(asset);
      } else {
        assets.on('add:' + ids[i], onAssetAdd);
      }
    }
  }

  onAssetChanged(asset, attribute, newValue, oldValue) {
    if (attribute === 'resource' || attribute === 'resources') {
      if (attribute === 'resources' && newValue && newValue.length === 0) {
        newValue = null;
      }

      if (newValue) {
        let restarted = false;

        if (newValue.length > 1) {
          if (oldValue && oldValue.length > 1) {
            for (let i = 0; i < oldValue.length; i++) {
              delete this.animations[oldValue[i].name];
            }
          } else {
            delete this.animations[asset.name];
          }

          restarted = false;

          for (let i = 0; i < newValue.length; i++) {
            this.animations[newValue[i].name] = newValue[i];

            if (!restarted && this.currAnim === newValue[i].name) {
              if (this.playing && this.enabled && this.entity.enabled) {
                restarted = true;
                this.play(newValue[i].name);
              }
            }
          }

          if (!restarted) {
            this._stopCurrentAnimation();

            this.onSetAnimations();
          }
        } else {
          if (oldValue && oldValue.length > 1) {
            for (let i = 0; i < oldValue.length; i++) {
              delete this.animations[oldValue[i].name];
            }
          }

          this.animations[asset.name] = newValue[0] || newValue;
          restarted = false;

          if (this.currAnim === asset.name) {
            if (this.playing && this.enabled && this.entity.enabled) {
              restarted = true;
              this.play(asset.name);
            }
          }

          if (!restarted) {
            this._stopCurrentAnimation();

            this.onSetAnimations();
          }
        }

        this.animationsIndex[asset.id] = asset.name;
      } else {
        if (oldValue.length > 1) {
          for (let i = 0; i < oldValue.length; i++) {
            delete this.animations[oldValue[i].name];

            if (this.currAnim === oldValue[i].name) {
              this._stopCurrentAnimation();
            }
          }
        } else {
          delete this.animations[asset.name];

          if (this.currAnim === asset.name) {
            this._stopCurrentAnimation();
          }
        }

        delete this.animationsIndex[asset.id];
      }
    }
  }

  onAssetRemoved(asset) {
    asset.off('remove', this.onAssetRemoved, this);

    if (this.animations) {
      if (asset.resources.length > 1) {
        for (let i = 0; i < asset.resources.length; i++) {
          delete this.animations[asset.resources[i].name];
          if (this.currAnim === asset.resources[i].name) this._stopCurrentAnimation();
        }
      } else {
        delete this.animations[asset.name];
        if (this.currAnim === asset.name) this._stopCurrentAnimation();
      }

      delete this.animationsIndex[asset.id];
    }
  }

  _stopCurrentAnimation() {
    this.currAnim = null;
    this.playing = false;

    if (this.skeleton) {
      this.skeleton.currentTime = 0;
      this.skeleton.animation = null;
    }

    if (this.animEvaluator) {
      for (let i = 0; i < this.animEvaluator.clips.length; ++i) {
        this.animEvaluator.clips[i].stop();
      }

      this.animEvaluator.update(0);
      this.animEvaluator.removeClips();
    }
  }

  onEnable() {
    super.onEnable();
    const assets = this.assets;
    const registry = this.system.app.assets;

    if (assets) {
      for (let i = 0, len = assets.length; i < len; i++) {
        let asset = assets[i];
        if (!(asset instanceof Asset)) asset = registry.get(asset);
        if (asset && !asset.resource) registry.load(asset);
      }
    }

    if (this.activate && !this.currAnim) {
      const animationNames = Object.keys(this.animations);

      if (animationNames.length > 0) {
        this.play(animationNames[0]);
      }
    }
  }

  onBeforeRemove() {
    for (let i = 0; i < this.assets.length; i++) {
      let asset = this.assets[i];

      if (typeof asset === 'number') {
        asset = this.system.app.assets.get(asset);
      }

      if (!asset) continue;
      asset.off('change', this.onAssetChanged, this);
      asset.off('remove', this.onAssetRemoved, this);
    }

    this.skeleton = null;
    this.fromSkel = null;
    this.toSkel = null;
    this.animEvaluator = null;
  }

  update(dt) {
    if (this.blending) {
      this.blend += dt * this.blendSpeed;

      if (this.blend >= 1) {
        this.blend = 1;
      }
    }

    if (this.playing) {
      const skeleton = this.skeleton;

      if (skeleton !== null && this.model !== null) {
        if (this.blending) {
          skeleton.blend(this.fromSkel, this.toSkel, this.blend);
        } else {
          const delta = dt * this.speed;
          skeleton.addTime(delta);

          if (this.speed > 0 && skeleton._time === skeleton.animation.duration && !this.loop) {
            this.playing = false;
          } else if (this.speed < 0 && skeleton._time === 0 && !this.loop) {
            this.playing = false;
          }
        }

        if (this.blending && this.blend === 1) {
          skeleton.animation = this.toSkel.animation;
        }

        skeleton.updateGraph();
      }
    }

    const animEvaluator = this.animEvaluator;

    if (animEvaluator) {
      for (let i = 0; i < animEvaluator.clips.length; ++i) {
        const clip = animEvaluator.clips[i];
        clip.speed = this.speed;

        if (!this.playing) {
          clip.pause();
        } else {
          clip.resume();
        }
      }

      if (this.blending && animEvaluator.clips.length > 1) {
        animEvaluator.clips[1].blendWeight = this.blend;
      }

      animEvaluator.update(dt);
    }

    if (this.blending && this.blend === 1) {
      this.blending = false;
    }
  }

}

class AnimationComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$l = ['enabled'];

class AnimationComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'animation';
    this.ComponentType = AnimationComponent;
    this.DataType = AnimationComponentData;
    this.schema = _schema$l;
    this.on('beforeremove', this.onBeforeRemove, this);
    this.app.systems.on('update', this.onUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    properties = ['activate', 'enabled', 'loop', 'speed', 'assets'];

    for (const property of properties) {
      if (data.hasOwnProperty(property)) {
        component[property] = data[property];
      }
    }

    super.initializeComponentData(component, data, _schema$l);
  }

  cloneComponent(entity, clone) {
    this.addComponent(clone, {});
    clone.animation.assets = entity.animation.assets.slice();
    clone.animation.speed = entity.animation.speed;
    clone.animation.loop = entity.animation.loop;
    clone.animation.activate = entity.animation.activate;
    clone.animation.enabled = entity.animation.enabled;
    const clonedAnimations = {};
    const animations = entity.animation.animations;

    for (const key in animations) {
      if (animations.hasOwnProperty(key)) {
        clonedAnimations[key] = animations[key];
      }
    }

    clone.animation.animations = clonedAnimations;
    const clonedAnimationsIndex = {};
    const animationsIndex = entity.animation.animationsIndex;

    for (const key in animationsIndex) {
      if (animationsIndex.hasOwnProperty(key)) {
        clonedAnimationsIndex[key] = animationsIndex[key];
      }
    }

    clone.animation.animationsIndex = clonedAnimationsIndex;
    return clone.animation;
  }

  onBeforeRemove(entity, component) {
    component.onBeforeRemove();
  }

  onUpdate(dt) {
    const components = this.store;

    for (const id in components) {
      if (components.hasOwnProperty(id)) {
        const component = components[id];

        if (component.data.enabled && component.entity.enabled) {
          component.entity.animation.update(dt);
        }
      }
    }
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(AnimationComponent.prototype, _schema$l);

const v2 = new Vec2();
const v3 = new Vec3();
const v4 = new Vec4();
const c = new Color();
const q = new Quat();

class AnimComponentBinder extends DefaultAnimBinder {
  constructor(animComponent, graph, layerName, mask, layerIndex) {
    super(graph);
    this.animComponent = animComponent;
    this._mask = mask;
    this.layerName = layerName;
    this.layerIndex = layerIndex;
  }

  static _packFloat(values) {
    return values[0];
  }

  static _packBoolean(values) {
    return !!values[0];
  }

  static _packVec2(values) {
    v2.x = values[0];
    v2.y = values[1];
    return v2;
  }

  static _packVec3(values) {
    v3.x = values[0];
    v3.y = values[1];
    v3.z = values[2];
    return v3;
  }

  static _packVec4(values) {
    v4.x = values[0];
    v4.y = values[1];
    v4.z = values[2];
    v4.w = values[3];
    return v4;
  }

  static _packColor(values) {
    c.r = values[0];
    c.g = values[1];
    c.b = values[2];
    c.a = values[3];
    return c;
  }

  static _packQuat(values) {
    q.x = values[0];
    q.y = values[1];
    q.z = values[2];
    q.w = values[3];
    return q;
  }

  resolve(path) {
    const encodedPath = AnimBinder.encode(path.entityPath, path.component, path.propertyPath);
    let target = this.targetCache[encodedPath];
    if (target) return target;
    let entity;
    let propertyComponent;
    let targetPath;

    switch (path.component) {
      case 'entity':
        entity = this._getEntityFromHierarchy(path.entityPath);
        targetPath = AnimBinder.encode(entity.path, 'entity', path.propertyPath);
        propertyComponent = entity;
        break;

      case 'graph':
        propertyComponent = this.findNode(path);
        if (!propertyComponent) return null;
        targetPath = AnimBinder.encode(propertyComponent.path, 'graph', path.propertyPath);
        break;

      default:
        entity = this._getEntityFromHierarchy(path.entityPath);
        propertyComponent = entity.findComponent(path.component);
        if (!propertyComponent) return null;
        targetPath = AnimBinder.encode(entity.path, path.component, path.propertyPath);
        break;
    }

    target = this._createAnimTargetForProperty(propertyComponent, path.propertyPath, targetPath);
    this.targetCache[encodedPath] = target;
    return target;
  }

  update(deltaTime) {
    const activeNodes = this.activeNodes;

    if (activeNodes) {
      for (let i = 0; i < activeNodes.length; i++) {
        activeNodes[i]._dirtifyLocal();
      }
    }
  }

  _getEntityFromHierarchy(entityHierarchy) {
    if (!this.animComponent.entity.name === entityHierarchy[0]) {
      return null;
    }

    const currEntity = this.animComponent.entity;

    if (entityHierarchy.length === 1) {
      return currEntity;
    }

    return currEntity._parent.findByPath(entityHierarchy);
  }

  _resolvePath(object, path, resolveLeaf) {
    const steps = path.length - (resolveLeaf ? 0 : 1);

    for (let i = 0; i < steps; i++) {
      object = object[path[i]];
    }

    return object;
  }

  _setter(object, path, packFunc) {
    const obj = this._resolvePath(object, path);

    const key = path[path.length - 1];
    const setterFuncName = 'set' + key.substring(0, 1).toUpperCase() + key.substring(1);

    if (obj[setterFuncName]) {
      const getterFunc = obj['get' + key.substring(0, 1).toUpperCase() + key.substring(1)].bind(obj);
      let baseValues = getterFunc();
      baseValues = [baseValues.x, baseValues.y, baseValues.z, baseValues.w];
      const setterFunc = obj[setterFuncName].bind(obj);
      return {
        set: values => {
          setterFunc(packFunc(values));
        },
        get: () => baseValues
      };
    }

    const prop = obj[key];

    if (typeof prop === 'object' && prop.hasOwnProperty('copy')) {
      return function (values) {
        prop.copy(packFunc(values));
      };
    }

    if ([Vec2, Vec3, Vec4, Color, Quat].indexOf(obj.constructor) !== -1 && path.length > 1) {
      const parent = path.length > 2 ? this._resolvePath(object, path.slice(0, -1)) : object;
      const objKey = path[path.length - 2];
      return function (values) {
        obj[key] = packFunc(values);
        parent[objKey] = obj;
      };
    }

    return function (values) {
      obj[key] = packFunc(values);
    };
  }

  _createAnimTargetForProperty(propertyComponent, propertyHierarchy, targetPath) {
    if (this.handlers && propertyHierarchy[0].startsWith('weight.')) {
      return this.handlers.weight(propertyComponent, propertyHierarchy[0].replace('weight.', ''));
    } else if (this.handlers && propertyHierarchy[0] === 'material' && propertyHierarchy.length === 2) {
      const materialPropertyName = propertyHierarchy[1];

      if (materialPropertyName.endsWith('Map')) {
        return this.handlers.materialTexture(propertyComponent, materialPropertyName);
      }
    }

    const property = this._resolvePath(propertyComponent, propertyHierarchy, true);

    if (typeof property === 'undefined') return null;
    let setter;
    let animDataType;
    let animDataComponents;

    if (typeof property === 'number') {
      setter = this._setter(propertyComponent, propertyHierarchy, AnimComponentBinder._packFloat);
      animDataType = 'vector';
      animDataComponents = 1;
    } else if (typeof property === 'boolean') {
      setter = this._setter(propertyComponent, propertyHierarchy, AnimComponentBinder._packBoolean);
      animDataType = 'vector';
      animDataComponents = 1;
    } else if (typeof property === 'object') {
      switch (property.constructor) {
        case Vec2:
          setter = this._setter(propertyComponent, propertyHierarchy, AnimComponentBinder._packVec2);
          animDataType = 'vector';
          animDataComponents = 2;
          break;

        case Vec3:
          setter = this._setter(propertyComponent, propertyHierarchy, AnimComponentBinder._packVec3);
          animDataType = 'vector';
          animDataComponents = 3;
          break;

        case Vec4:
          setter = this._setter(propertyComponent, propertyHierarchy, AnimComponentBinder._packVec4);
          animDataType = 'vector';
          animDataComponents = 4;
          break;

        case Color:
          setter = this._setter(propertyComponent, propertyHierarchy, AnimComponentBinder._packColor);
          animDataType = 'vector';
          animDataComponents = 4;
          break;

        case Quat:
          setter = this._setter(propertyComponent, propertyHierarchy, AnimComponentBinder._packQuat);
          animDataType = 'quaternion';
          animDataComponents = 4;
          break;

        default:
          return null;
      }
    }

    if (propertyHierarchy.indexOf('material') !== -1) {
      return new AnimTarget(function (values) {
        setter(values);
        propertyComponent.material.update();
      }, animDataType, animDataComponents, targetPath);
    }

    return new AnimTarget(setter, animDataType, animDataComponents, targetPath);
  }

  rebind() {
    this.targetCache = {};

    if (this.animComponent.rootBone) {
      this.graph = this.animComponent.rootBone;
    } else {
      this.graph = this.animComponent.entity;
    }

    const nodes = {};

    const flatten = function flatten(node) {
      nodes[node.name] = node;

      for (let i = 0; i < node.children.length; ++i) {
        flatten(node.children[i]);
      }
    };

    flatten(this.graph);
    this.nodes = nodes;
  }

}

class AnimComponentLayer {
  constructor(name, controller, component, weight = 1, blendType = ANIM_LAYER_OVERWRITE, normalizedWeight = true) {
    this._name = name;
    this._controller = controller;
    this._component = component;
    this._weight = weight;
    this._blendType = blendType;
    this._normalizedWeight = normalizedWeight;
    this._mask = null;
    this._blendTime = 0;
    this._blendTimeElapsed = 0;
    this._startingWeight = 0;
    this._targetWeight = 0;
  }

  get name() {
    return this._name;
  }

  set playing(value) {
    this._controller.playing = value;
  }

  get playing() {
    return this._controller.playing;
  }

  get playable() {
    return this._controller.playable;
  }

  get activeState() {
    return this._controller.activeStateName;
  }

  get previousState() {
    return this._controller.previousStateName;
  }

  get activeStateProgress() {
    return this._controller.activeStateProgress;
  }

  get activeStateDuration() {
    return this._controller.activeStateDuration;
  }

  set activeStateCurrentTime(time) {
    const controller = this._controller;
    const layerPlaying = controller.playing;
    controller.playing = true;
    controller.activeStateCurrentTime = time;

    if (!layerPlaying) {
      controller.update(0);
    }

    controller.playing = layerPlaying;
  }

  get activeStateCurrentTime() {
    return this._controller.activeStateCurrentTime;
  }

  get transitioning() {
    return this._controller.transitioning;
  }

  get transitionProgress() {
    if (this.transitioning) {
      return this._controller.transitionProgress;
    }

    return null;
  }

  get states() {
    return this._controller.states;
  }

  set weight(value) {
    this._weight = value;

    this._component.dirtifyTargets();
  }

  get weight() {
    return this._weight;
  }

  set blendType(value) {
    if (value !== this._blendType) {
      this._blendType = value;

      if (this._controller.normalizeWeights) {
        this._component.rebind();
      }
    }
  }

  get blendType() {
    return this._blendType;
  }

  set mask(value) {
    if (this._controller.assignMask(value)) {
      this._component.rebind();
    }

    this._mask = value;
  }

  get mask() {
    return this._mask;
  }

  play(name) {
    this._controller.play(name);
  }

  pause() {
    this._controller.pause();
  }

  reset() {
    this._controller.reset();
  }

  rebind() {
    this._controller.rebind();
  }

  update(dt) {
    if (this._blendTime) {
      if (this._blendTimeElapsed < this._blendTime) {
        this.weight = math$1.lerp(this._startingWeight, this._targetWeight, this._blendTimeElapsed / this._blendTime);
        this._blendTimeElapsed += dt;
      } else {
        this.weight = this._targetWeight;
        this._blendTime = 0;
        this._blendTimeElapsed = 0;
        this._startingWeight = 0;
        this._targetWeight = 0;
      }
    }

    this._controller.update(dt);
  }

  blendToWeight(weight, time) {
    this._startingWeight = this.weight;
    this._targetWeight = weight;
    this._blendTime = Math.max(0, time);
    this._blendTimeElapsed = 0;
  }

  assignMask(mask) {
    if (this._controller.assignMask(mask)) {
      this._component.rebind();
    }

    this._mask = mask;
  }

  assignAnimation(nodePath, animTrack, speed, loop) {
    if (animTrack.constructor !== AnimTrack) {
      return;
    }

    this._controller.assignAnimation(nodePath, animTrack, speed, loop);

    if (this._controller._transitions.length === 0) {
      this._controller._transitions.push(new AnimTransition({
        from: 'START',
        to: nodePath
      }));
    }

    if (this._component.activate && this._component.playable) {
      this._component.playing = true;
    }
  }

  removeNodeAnimations(nodeName) {
    if (this._controller.removeNodeAnimations(nodeName)) {
      this._component.playing = false;
    }
  }

  getAnimationAsset(stateName) {
    return this._component.animationAssets[`${this.name}:${stateName}`];
  }

  transition(to, time = 0, transitionOffset = null) {
    this._controller.updateStateFromTransition(new AnimTransition({
      from: this._controller.activeStateName,
      to,
      time,
      transitionOffset
    }));
  }

}

class AnimComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._stateGraphAsset = null;
    this._animationAssets = {};
    this._speed = 1.0;
    this._activate = true;
    this._playing = false;
    this._rootBone = null;
    this._stateGraph = null;
    this._layers = [];
    this._layerIndices = {};
    this._parameters = {};
    this._targets = {};
    this._consumedTriggers = new Set();
    this._normalizeWeights = false;
  }

  set stateGraphAsset(value) {
    if (value === null) {
      this.removeStateGraph();
      return;
    }

    if (this._stateGraphAsset) {
      const stateGraphAsset = this.system.app.assets.get(this._stateGraphAsset);
      stateGraphAsset.off('change', this._onStateGraphAssetChangeEvent, this);
    }

    let _id;

    let _asset;

    if (value instanceof Asset) {
      _id = value.id;
      _asset = this.system.app.assets.get(_id);

      if (!_asset) {
        this.system.app.assets.add(value);
        _asset = this.system.app.assets.get(_id);
      }
    } else {
      _id = value;
      _asset = this.system.app.assets.get(_id);
    }

    if (!_asset || this._stateGraphAsset === _id) {
      return;
    }

    if (_asset.resource) {
      this._stateGraph = _asset.resource;
      this.loadStateGraph(this._stateGraph);

      _asset.on('change', this._onStateGraphAssetChangeEvent, this);
    } else {
      _asset.once('load', asset => {
        this._stateGraph = asset.resource;
        this.loadStateGraph(this._stateGraph);
      });

      _asset.on('change', this._onStateGraphAssetChangeEvent, this);

      this.system.app.assets.load(_asset);
    }

    this._stateGraphAsset = _id;
  }

  get stateGraphAsset() {
    return this._stateGraphAsset;
  }

  set normalizeWeights(value) {
    this._normalizeWeights = value;
    this.unbind();
  }

  get normalizeWeights() {
    return this._normalizeWeights;
  }

  set animationAssets(value) {
    this._animationAssets = value;
    this.loadAnimationAssets();
  }

  get animationAssets() {
    return this._animationAssets;
  }

  set speed(value) {
    this._speed = value;
  }

  get speed() {
    return this._speed;
  }

  set activate(value) {
    this._activate = value;
  }

  get activate() {
    return this._activate;
  }

  set playing(value) {
    this._playing = value;
  }

  get playing() {
    return this._playing;
  }

  set rootBone(value) {
    if (typeof value === 'string') {
      const entity = this.entity.root.findByGuid(value);
      this._rootBone = entity;
    } else if (value instanceof Entity) {
      this._rootBone = value;
    } else {
      this._rootBone = null;
    }

    this.rebind();
  }

  get rootBone() {
    return this._rootBone;
  }

  set stateGraph(value) {
    this._stateGraph = value;
  }

  get stateGraph() {
    return this._stateGraph;
  }

  get layers() {
    return this._layers;
  }

  set layerIndices(value) {
    this._layerIndices = value;
  }

  get layerIndices() {
    return this._layerIndices;
  }

  set parameters(value) {
    this._parameters = value;
  }

  get parameters() {
    return this._parameters;
  }

  set targets(value) {
    this._targets = value;
  }

  get targets() {
    return this._targets;
  }

  get playable() {
    for (let i = 0; i < this._layers.length; i++) {
      if (!this._layers[i].playable) {
        return false;
      }
    }

    return true;
  }

  get baseLayer() {
    if (this._layers.length > 0) {
      return this._layers[0];
    }

    return null;
  }

  _onStateGraphAssetChangeEvent(asset) {
    const prevAnimationAssets = this.animationAssets;
    const prevMasks = this.layers.map(layer => layer.mask);
    this.removeStateGraph();
    this._stateGraph = new AnimStateGraph(asset._data);
    this.loadStateGraph(this._stateGraph);
    this.animationAssets = prevAnimationAssets;
    this.loadAnimationAssets();
    this.layers.forEach((layer, i) => {
      layer.mask = prevMasks[i];
    });
    this.rebind();
  }

  dirtifyTargets() {
    const targets = Object.values(this._targets);

    for (let i = 0; i < targets.length; i++) {
      targets[i].dirty = true;
    }
  }

  _addLayer({
    name,
    states,
    transitions,
    weight,
    mask,
    blendType
  }) {
    let graph;

    if (this.rootBone) {
      graph = this.rootBone;
    } else {
      graph = this.entity;
    }

    const layerIndex = this._layers.length;
    const animBinder = new AnimComponentBinder(this, graph, name, mask, layerIndex);
    const animEvaluator = new AnimEvaluator(animBinder);
    const controller = new AnimController(animEvaluator, states, transitions, this._parameters, this._activate, this, this._consumedTriggers);

    this._layers.push(new AnimComponentLayer(name, controller, this, weight, blendType));

    this._layerIndices[name] = layerIndex;
    return this._layers[layerIndex];
  }

  addLayer(name, weight, mask, blendType) {
    const layer = this.findAnimationLayer(name);
    if (layer) return layer;
    const states = [{
      'name': 'START',
      'speed': 1
    }];
    const transitions = [];
    return this._addLayer({
      name,
      states,
      transitions,
      weight,
      mask,
      blendType
    });
  }

  loadStateGraph(stateGraph) {
    this._stateGraph = stateGraph;
    this._parameters = {};
    const paramKeys = Object.keys(stateGraph.parameters);

    for (let i = 0; i < paramKeys.length; i++) {
      const paramKey = paramKeys[i];
      this._parameters[paramKey] = {
        type: stateGraph.parameters[paramKey].type,
        value: stateGraph.parameters[paramKey].value
      };
    }

    this._layers = [];

    for (let i = 0; i < stateGraph.layers.length; i++) {
      const layer = stateGraph.layers[i];

      this._addLayer.bind(this)(_extends({}, layer));
    }

    this.setupAnimationAssets();
  }

  setupAnimationAssets() {
    for (let i = 0; i < this._layers.length; i++) {
      const layer = this._layers[i];
      const layerName = layer.name;

      for (let j = 0; j < layer.states.length; j++) {
        const stateName = layer.states[j];

        if (ANIM_CONTROL_STATES.indexOf(stateName) === -1) {
          const stateKey = layerName + ':' + stateName;

          if (!this._animationAssets[stateKey]) {
            this._animationAssets[stateKey] = {
              asset: null
            };
          }
        }
      }
    }

    this.loadAnimationAssets();
  }

  loadAnimationAssets() {
    for (let i = 0; i < this._layers.length; i++) {
      const layer = this._layers[i];

      for (let j = 0; j < layer.states.length; j++) {
        const stateName = layer.states[j];
        if (ANIM_CONTROL_STATES.indexOf(stateName) !== -1) continue;
        const animationAsset = this._animationAssets[layer.name + ':' + stateName];

        if (!animationAsset || !animationAsset.asset) {
          this.removeNodeAnimations(stateName, layer.name);
          continue;
        }

        const assetId = animationAsset.asset;
        const asset = this.system.app.assets.get(assetId);

        if (asset) {
          if (asset.resource) {
            this.onAnimationAssetLoaded(layer.name, stateName, asset);
          } else {
            asset.once('load', function (layerName, stateName) {
              return function (asset) {
                this.onAnimationAssetLoaded(layerName, stateName, asset);
              }.bind(this);
            }.bind(this)(layer.name, stateName));
            this.system.app.assets.load(asset);
          }
        }
      }
    }
  }

  onAnimationAssetLoaded(layerName, stateName, asset) {
    this.findAnimationLayer(layerName).assignAnimation(stateName, asset.resource);
  }

  removeStateGraph() {
    this._stateGraph = null;
    this._stateGraphAsset = null;
    this._animationAssets = {};
    this._layers = [];
    this._layerIndices = {};
    this._parameters = {};
    this._playing = false;
    this.unbind();
    this._targets = {};
  }

  reset() {
    this._parameters = Object.assign({}, this._stateGraph.parameters);

    for (let i = 0; i < this._layers.length; i++) {
      const layerPlaying = this._layers[i].playing;

      this._layers[i].reset();

      this._layers[i].playing = layerPlaying;
    }
  }

  unbind() {
    if (!this._normalizeWeights) {
      Object.keys(this._targets).forEach(targetKey => {
        this._targets[targetKey].unbind();
      });
    }
  }

  rebind() {
    this._targets = {};

    for (let i = 0; i < this._layers.length; i++) {
      this._layers[i].rebind();
    }
  }

  findAnimationLayer(name) {
    const layerIndex = this._layerIndices[name];
    return this._layers[layerIndex] || null;
  }

  addAnimationState(nodeName, animTrack, speed = 1, loop = true, layerName = 'Base') {
    if (!this._stateGraph) {
      this.loadStateGraph(new AnimStateGraph({
        'layers': [{
          'name': layerName,
          'states': [{
            'name': 'START',
            'speed': 1
          }, {
            'name': nodeName,
            'speed': speed,
            'loop': loop,
            'defaultState': true
          }],
          'transitions': [{
            'from': 'START',
            'to': nodeName
          }]
        }],
        'parameters': {}
      }));
    }

    const layer = this.findAnimationLayer(layerName);

    if (layer) {
      layer.assignAnimation(nodeName, animTrack, speed, loop);
    } else {
      var _this$addLayer;

      (_this$addLayer = this.addLayer(layerName)) == null ? void 0 : _this$addLayer.assignAnimation(nodeName, animTrack, speed, loop);
    }
  }

  assignAnimation(nodePath, animTrack, layerName, speed = 1, loop = true) {
    if (!this._stateGraph && nodePath.indexOf('.') === -1) {
      this.loadStateGraph(new AnimStateGraph({
        'layers': [{
          'name': 'Base',
          'states': [{
            'name': 'START',
            'speed': 1
          }, {
            'name': nodePath,
            'speed': speed,
            'loop': loop,
            'defaultState': true
          }],
          'transitions': [{
            'from': 'START',
            'to': nodePath
          }]
        }],
        'parameters': {}
      }));
      this.baseLayer.assignAnimation(nodePath, animTrack);
      return;
    }

    const layer = layerName ? this.findAnimationLayer(layerName) : this.baseLayer;

    if (!layer) {
      return;
    }

    layer.assignAnimation(nodePath, animTrack, speed, loop);
  }

  removeNodeAnimations(nodeName, layerName) {
    const layer = layerName ? this.findAnimationLayer(layerName) : this.baseLayer;

    if (!layer) {
      return;
    }

    layer.removeNodeAnimations(nodeName);
  }

  getParameterValue(name, type) {
    const param = this._parameters[name];

    if (param && param.type === type) {
      return param.value;
    }

    return undefined;
  }

  setParameterValue(name, type, value) {
    const param = this._parameters[name];

    if (param && param.type === type) {
      param.value = value;
      return;
    }
  }

  getFloat(name) {
    return this.getParameterValue(name, ANIM_PARAMETER_FLOAT);
  }

  setFloat(name, value) {
    this.setParameterValue(name, ANIM_PARAMETER_FLOAT, value);
  }

  getInteger(name) {
    return this.getParameterValue(name, ANIM_PARAMETER_INTEGER);
  }

  setInteger(name, value) {
    if (typeof value === 'number' && value % 1 === 0) {
      this.setParameterValue(name, ANIM_PARAMETER_INTEGER, value);
    }
  }

  getBoolean(name) {
    return this.getParameterValue(name, ANIM_PARAMETER_BOOLEAN);
  }

  setBoolean(name, value) {
    this.setParameterValue(name, ANIM_PARAMETER_BOOLEAN, !!value);
  }

  getTrigger(name) {
    return this.getParameterValue(name, ANIM_PARAMETER_TRIGGER);
  }

  setTrigger(name, singleFrame = false) {
    this.setParameterValue(name, ANIM_PARAMETER_TRIGGER, true);

    if (singleFrame) {
      this._consumedTriggers.add(name);
    }
  }

  resetTrigger(name) {
    this.setParameterValue(name, ANIM_PARAMETER_TRIGGER, false);
  }

  onBeforeRemove() {
    if (Number.isFinite(this._stateGraphAsset)) {
      const stateGraphAsset = this.system.app.assets.get(this._stateGraphAsset);
      stateGraphAsset.off('change', this._onStateGraphAssetChangeEvent, this);
    }
  }

  update(dt) {
    for (let i = 0; i < this.layers.length; i++) {
      this.layers[i].update(dt * this.speed);
    }

    this._consumedTriggers.forEach(trigger => {
      this.parameters[trigger].value = false;
    });

    this._consumedTriggers.clear();
  }

  resolveDuplicatedEntityReferenceProperties(oldAnim, duplicatedIdsMap) {
    if (oldAnim.rootBone && duplicatedIdsMap[oldAnim.rootBone.getGuid()]) {
      this.rootBone = duplicatedIdsMap[oldAnim.rootBone.getGuid()];
    } else {
      this.rebind();
    }
  }

}

class AnimComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$k = ['enabled'];

class AnimComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'anim';
    this.ComponentType = AnimComponent;
    this.DataType = AnimComponentData;
    this.schema = _schema$k;
    this.on('beforeremove', this.onBeforeRemove, this);
    this.app.systems.on('animationUpdate', this.onAnimationUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    super.initializeComponentData(component, data, _schema$k);
    const complexProperties = ['animationAssets', 'stateGraph', 'layers', 'masks'];
    Object.keys(data).forEach(key => {
      if (complexProperties.includes(key)) return;
      component[key] = data[key];
    });

    if (data.stateGraph) {
      component.stateGraph = data.stateGraph;
      component.loadStateGraph(component.stateGraph);
    }

    if (data.layers) {
      data.layers.forEach((layer, i) => {
        layer._controller.states.forEach(stateKey => {
          layer._controller._states[stateKey]._animationList.forEach(node => {
            component.layers[i].assignAnimation(node.name, node.animTrack);
          });
        });
      });
    } else if (data.animationAssets) {
      component.animationAssets = Object.assign(component.animationAssets, data.animationAssets);
    }

    if (data.masks) {
      Object.keys(data.masks).forEach(key => {
        if (component.layers[key]) {
          const maskData = data.masks[key].mask;
          const mask = {};
          Object.keys(maskData).forEach(maskKey => {
            mask[decodeURI(maskKey)] = maskData[maskKey];
          });
          component.layers[key].mask = mask;
        }
      });
    }
  }

  onAnimationUpdate(dt) {
    const components = this.store;

    for (const id in components) {
      if (components.hasOwnProperty(id)) {
        const component = components[id].entity.anim;
        const componentData = component.data;

        if (componentData.enabled && component.entity.enabled && component.playing) {
          component.update(dt);
        }
      }
    }
  }

  cloneComponent(entity, clone) {
    let masks;

    if (!entity.anim.rootBone || entity.anim.rootBone === entity) {
      masks = {};
      entity.anim.layers.forEach((layer, i) => {
        if (layer.mask) {
          const mask = {};
          Object.keys(layer.mask).forEach(path => {
            const pathArr = path.split('/');
            pathArr.shift();
            const clonePath = [clone.name, ...pathArr].join('/');
            mask[clonePath] = layer.mask[path];
          });
          masks[i] = {
            mask
          };
        }
      });
    }

    const data = {
      stateGraphAsset: entity.anim.stateGraphAsset,
      animationAssets: entity.anim.animationAssets,
      speed: entity.anim.speed,
      activate: entity.anim.activate,
      playing: entity.anim.playing,
      rootBone: entity.anim.rootBone,
      stateGraph: entity.anim.stateGraph,
      layers: entity.anim.layers,
      layerIndices: entity.anim.layerIndices,
      parameters: entity.anim.parameters,
      normalizeWeights: entity.anim.normalizeWeights,
      masks
    };
    return this.addComponent(clone, data);
  }

  onBeforeRemove(entity, component) {
    component.onBeforeRemove();
  }

  destroy() {
    super.destroy();
    this.app.systems.off('animationUpdate', this.onAnimationUpdate, this);
  }

}

Component._buildAccessors(AnimComponent.prototype, _schema$k);

class AudioListenerComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
  }

  setCurrentListener() {
    if (this.enabled && this.entity.audiolistener && this.entity.enabled) {
      this.system.current = this.entity;
      const position = this.system.current.getPosition();
      this.system.manager.listener.setPosition(position);
    }
  }

  onEnable() {
    this.setCurrentListener();
  }

  onDisable() {
    if (this.system.current === this.entity) {
      this.system.current = null;
    }
  }

}

class AudioListenerComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$j = ['enabled'];

class AudioListenerComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'audiolistener';
    this.ComponentType = AudioListenerComponent;
    this.DataType = AudioListenerComponentData;
    this.schema = _schema$j;
    this.manager = app.soundManager;
    this.current = null;
    this.app.systems.on('update', this.onUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    properties = ['enabled'];
    super.initializeComponentData(component, data, properties);
  }

  onUpdate(dt) {
    if (this.current) {
      const position = this.current.getPosition();
      this.manager.listener.setPosition(position);
      const wtm = this.current.getWorldTransform();
      this.manager.listener.setOrientation(wtm);
    }
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(AudioListenerComponent.prototype, _schema$j);

class AudioSourceComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this.on('set_assets', this.onSetAssets, this);
    this.on('set_loop', this.onSetLoop, this);
    this.on('set_volume', this.onSetVolume, this);
    this.on('set_pitch', this.onSetPitch, this);
    this.on('set_minDistance', this.onSetMinDistance, this);
    this.on('set_maxDistance', this.onSetMaxDistance, this);
    this.on('set_rollOffFactor', this.onSetRollOffFactor, this);
    this.on('set_distanceModel', this.onSetDistanceModel, this);
    this.on('set_3d', this.onSet3d, this);
  }

  play(name) {
    if (!this.enabled || !this.entity.enabled) {
      return;
    }

    if (this.channel) {
      this.stop();
    }

    let channel;
    const componentData = this.data;

    if (componentData.sources[name]) {
      if (!componentData['3d']) {
        channel = this.system.manager.playSound(componentData.sources[name], componentData);
        componentData.currentSource = name;
        componentData.channel = channel;
      } else {
        const pos = this.entity.getPosition();
        channel = this.system.manager.playSound3d(componentData.sources[name], pos, componentData);
        componentData.currentSource = name;
        componentData.channel = channel;
      }
    }
  }

  pause() {
    if (this.channel) {
      this.channel.pause();
    }
  }

  unpause() {
    if (this.channel && this.channel.paused) {
      this.channel.unpause();
    }
  }

  stop() {
    if (this.channel) {
      this.channel.stop();
      this.channel = null;
    }
  }

  onSetAssets(name, oldValue, newValue) {
    const newAssets = [];
    const len = newValue.length;

    if (oldValue && oldValue.length) {
      for (let i = 0; i < oldValue.length; i++) {
        if (oldValue[i]) {
          const asset = this.system.app.assets.get(oldValue[i]);

          if (asset) {
            asset.off('change', this.onAssetChanged, this);
            asset.off('remove', this.onAssetRemoved, this);

            if (this.currentSource === asset.name) {
              this.stop();
            }
          }
        }
      }
    }

    if (len) {
      for (let i = 0; i < len; i++) {
        if (oldValue.indexOf(newValue[i]) < 0) {
          if (newValue[i] instanceof Asset) {
            newAssets.push(newValue[i].id);
          } else {
            newAssets.push(newValue[i]);
          }
        }
      }
    }

    if (!this.system._inTools && newAssets.length) {
      this.loadAudioSourceAssets(newAssets);
    }
  }

  onAssetChanged(asset, attribute, newValue, oldValue) {
    if (attribute === 'resource') {
      const sources = this.data.sources;

      if (sources) {
        this.data.sources[asset.name] = newValue;

        if (this.data.currentSource === asset.name) {
          if (this.channel) {
            if (this.channel.paused) {
              this.play(asset.name);
              this.pause();
            } else {
              this.play(asset.name);
            }
          }
        }
      }
    }
  }

  onAssetRemoved(asset) {
    asset.off('remove', this.onAssetRemoved, this);

    if (this.data.sources[asset.name]) {
      delete this.data.sources[asset.name];

      if (this.data.currentSource === asset.name) {
        this.stop();
        this.data.currentSource = null;
      }
    }
  }

  onSetLoop(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel) {
        this.channel.setLoop(newValue);
      }
    }
  }

  onSetVolume(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel) {
        this.channel.setVolume(newValue);
      }
    }
  }

  onSetPitch(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel) {
        this.channel.setPitch(newValue);
      }
    }
  }

  onSetMaxDistance(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof Channel3d) {
        this.channel.setMaxDistance(newValue);
      }
    }
  }

  onSetMinDistance(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof Channel3d) {
        this.channel.setMinDistance(newValue);
      }
    }
  }

  onSetRollOffFactor(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof Channel3d) {
        this.channel.setRollOffFactor(newValue);
      }
    }
  }

  onSetDistanceModel(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof Channel3d) {
        this.channel.setDistanceModel(newValue);
      }
    }
  }

  onSet3d(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.system.initialized && this.currentSource) {
        let paused = false;
        let suspended = false;

        if (this.channel) {
          paused = this.channel.paused;
          suspended = this.channel.suspended;
        }

        this.play(this.currentSource);

        if (this.channel) {
          this.channel.paused = paused;
          this.channel.suspended = suspended;
        }
      }
    }
  }

  onEnable() {
    const assets = this.data.assets;

    if (assets) {
      const registry = this.system.app.assets;

      for (let i = 0, len = assets.length; i < len; i++) {
        let asset = assets[i];
        if (!(asset instanceof Asset)) asset = registry.get(asset);

        if (asset && !asset.resource) {
          registry.load(asset);
        }
      }
    }

    if (this.system.initialized) {
      if (this.data.activate && !this.channel) {
        this.play(this.currentSource);
      } else {
        this.unpause();
      }
    }
  }

  onDisable() {
    this.pause();
  }

  loadAudioSourceAssets(ids) {
    const assets = ids.map(id => {
      return this.system.app.assets.get(id);
    });
    const sources = {};
    let currentSource = null;
    let count = assets.length;

    const _error = e => {
      count--;
    };

    const _done = () => {
      this.data.sources = sources;
      this.data.currentSource = currentSource;

      if (this.enabled && this.activate && currentSource) {
        this.onEnable();
      }
    };

    assets.forEach((asset, index) => {
      if (asset) {
        currentSource = currentSource || asset.name;
        asset.off('change', this.onAssetChanged, this);
        asset.on('change', this.onAssetChanged, this);
        asset.off('remove', this.onAssetRemoved, this);
        asset.on('remove', this.onAssetRemoved, this);
        asset.off('error', _error, this);
        asset.on('error', _error, this);
        asset.ready(asset => {
          sources[asset.name] = asset.resource;
          count--;

          if (count === 0) {
            _done();
          }
        });
        if (!asset.resource && this.enabled && this.entity.enabled) this.system.app.assets.load(asset);
      } else {
        count--;

        if (count === 0) {
          _done();
        }

        this.system.app.assets.on('add:' + ids[index], asset => {
          asset.ready(asset => {
            this.data.sources[asset.name] = asset.resource;
          });
          if (!asset.resource) this.system.app.assets.load(asset);
        });
      }
    });
  }

}

class AudioSourceComponentData {
  constructor() {
    this.enabled = true;
    this.assets = [];
    this.activate = true;
    this.volume = 1;
    this.pitch = 1;
    this.loop = false;
    this['3d'] = true;
    this.minDistance = 1;
    this.maxDistance = 10000;
    this.rollOffFactor = 1;
    this.distanceModel = DISTANCE_INVERSE;
    this.paused = true;
    this.sources = {};
    this.currentSource = null;
    this.channel = null;
  }

}

const _schema$i = ['enabled', 'assets', 'volume', 'pitch', 'loop', 'activate', '3d', 'minDistance', 'maxDistance', 'rollOffFactor', 'distanceModel', 'sources', 'currentSource', 'channel'];

class AudioSourceComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'audiosource';
    this.ComponentType = AudioSourceComponent;
    this.DataType = AudioSourceComponentData;
    this.schema = _schema$i;
    this.manager = app.soundManager;
    this.initialized = false;
    this.app.systems.on('initialize', this.onInitialize, this);
    this.app.systems.on('update', this.onUpdate, this);
    this.on('remove', this.onRemove, this);
  }

  initializeComponentData(component, data, properties) {
    properties = ['activate', 'volume', 'pitch', 'loop', '3d', 'minDistance', 'maxDistance', 'rollOffFactor', 'distanceModel', 'enabled', 'assets'];
    super.initializeComponentData(component, data, properties);
    component.paused = !(component.enabled && component.activate);
  }

  onInitialize(root) {
    if (root.audiosource && root.enabled && root.audiosource.enabled && root.audiosource.activate) {
      root.audiosource.play(root.audiosource.currentSource);
    }

    const children = root._children;

    for (let i = 0, len = children.length; i < len; i++) {
      if (children[i] instanceof Entity) {
        this.onInitialize(children[i]);
      }
    }

    this.initialized = true;
  }

  onUpdate(dt) {
    const components = this.store;

    for (const id in components) {
      if (components.hasOwnProperty(id)) {
        const component = components[id];
        const entity = component.entity;
        const componentData = component.data;

        if (componentData.enabled && entity.enabled && componentData.channel instanceof Channel3d) {
          const pos = entity.getPosition();
          componentData.channel.setPosition(pos);
        }
      }
    }
  }

  onRemove(entity, data) {
    if (data.channel) {
      data.channel.stop();
      data.channel = null;
    }
  }

  setVolume(volume) {
    this.manager.setVolume(volume);
  }

  destroy() {
    super.destroy();
    this.app.systems.off('initialize', this.onInitialize, this);
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(AudioSourceComponent.prototype, _schema$i);

class EntityReference extends EventHandler {
  constructor(parentComponent, entityPropertyName, eventConfig) {
    super();

    if (!parentComponent || !(parentComponent instanceof Component)) {
      throw new Error('The parentComponent argument is required and must be a Component');
    } else if (!entityPropertyName || typeof entityPropertyName !== 'string') {
      throw new Error('The propertyName argument is required and must be a string');
    } else if (eventConfig && typeof eventConfig !== 'object') {
      throw new Error('If provided, the eventConfig argument must be an object');
    }

    this._parentComponent = parentComponent;
    this._entityPropertyName = entityPropertyName;
    this._entity = null;
    this._app = parentComponent.system.app;

    this._configureEventListeners(eventConfig || {}, {
      'entity#destroy': this._onEntityDestroy
    });

    this._toggleLifecycleListeners('on');
  }

  _configureEventListeners(externalEventConfig, internalEventConfig) {
    const externalEventListenerConfigs = this._parseEventListenerConfig(externalEventConfig, 'external', this._parentComponent);

    const internalEventListenerConfigs = this._parseEventListenerConfig(internalEventConfig, 'internal', this);

    this._eventListenerConfigs = externalEventListenerConfigs.concat(internalEventListenerConfigs);
    this._listenerStatusFlags = {};
    this._gainListeners = {};
    this._loseListeners = {};
  }

  _parseEventListenerConfig(eventConfig, prefix, scope) {
    return Object.keys(eventConfig).map(function (listenerDescription, index) {
      const listenerDescriptionParts = listenerDescription.split('#');
      const sourceName = listenerDescriptionParts[0];
      const eventName = listenerDescriptionParts[1];
      const callback = eventConfig[listenerDescription];

      if (listenerDescriptionParts.length !== 2 || typeof sourceName !== 'string' || sourceName.length === 0 || typeof eventName !== 'string' || eventName.length === 0) {
        throw new Error('Invalid event listener description: `' + listenerDescription + '`');
      }

      if (typeof callback !== 'function') {
        throw new Error('Invalid or missing callback for event listener `' + listenerDescription + '`');
      }

      return {
        id: prefix + '_' + index + '_' + listenerDescription,
        sourceName: sourceName,
        eventName: eventName,
        callback: callback,
        scope: scope
      };
    }, this);
  }

  _toggleLifecycleListeners(onOrOff) {
    this._parentComponent[onOrOff]('set_' + this._entityPropertyName, this._onSetEntity, this);

    this._parentComponent.system[onOrOff]('beforeremove', this._onParentComponentRemove, this);

    this._app.systems[onOrOff]('postPostInitialize', this._updateEntityReference, this);

    this._app[onOrOff]('tools:sceneloaded', this._onSceneLoaded, this);

    const allComponentSystems = [];

    for (let i = 0; i < this._eventListenerConfigs.length; ++i) {
      const config = this._eventListenerConfigs[i];
      const componentSystem = this._app.systems[config.sourceName];

      if (componentSystem) {
        if (allComponentSystems.indexOf(componentSystem) === -1) {
          allComponentSystems.push(componentSystem);
        }

        if (componentSystem && config.eventName === 'gain') {
          this._gainListeners[config.sourceName] = config;
        }

        if (componentSystem && config.eventName === 'lose') {
          this._loseListeners[config.sourceName] = config;
        }
      }
    }

    for (let i = 0; i < allComponentSystems.length; ++i) {
      allComponentSystems[i][onOrOff]('add', this._onComponentAdd, this);
      allComponentSystems[i][onOrOff]('beforeremove', this._onComponentRemove, this);
    }
  }

  _onSetEntity(name, oldValue, newValue) {
    if (newValue instanceof Entity) {
      this._updateEntityReference();
    } else {
      if (newValue !== null && newValue !== undefined && typeof newValue !== 'string') {
        console.warn("Entity field `" + this._entityPropertyName + "` was set to unexpected type '" + typeof newValue + "'");
        return;
      }

      if (oldValue !== newValue) {
        this._updateEntityReference();
      }
    }
  }

  onParentComponentEnable() {
    if (!this._entity) {
      this._updateEntityReference();
    }
  }

  _onSceneLoaded() {
    this._updateEntityReference();
  }

  _updateEntityReference() {
    let nextEntityGuid = this._parentComponent.data[this._entityPropertyName];
    let nextEntity;

    if (nextEntityGuid instanceof Entity) {
      nextEntity = nextEntityGuid;
      nextEntityGuid = nextEntity.getGuid();
      this._parentComponent.data[this._entityPropertyName] = nextEntityGuid;
    } else {
      const root = this._parentComponent.system.app.root;

      const isOnSceneGraph = this._parentComponent.entity.isDescendantOf(root);

      nextEntity = isOnSceneGraph && nextEntityGuid ? root.findByGuid(nextEntityGuid) : null;
    }

    const hasChanged = this._entity !== nextEntity;

    if (hasChanged) {
      if (this._entity) {
        this._onBeforeEntityChange();
      }

      this._entity = nextEntity;

      if (this._entity) {
        this._onAfterEntityChange();
      }

      this.fire('set:entity', this._entity);
    }
  }

  _onBeforeEntityChange() {
    this._toggleEntityListeners('off');

    this._callAllGainOrLoseListeners(this._loseListeners);
  }

  _onAfterEntityChange() {
    this._toggleEntityListeners('on');

    this._callAllGainOrLoseListeners(this._gainListeners);
  }

  _onComponentAdd(entity, component) {
    const componentName = component.system.id;

    if (entity === this._entity) {
      this._callGainOrLoseListener(componentName, this._gainListeners);

      this._toggleComponentListeners('on', componentName);
    }
  }

  _onComponentRemove(entity, component) {
    const componentName = component.system.id;

    if (entity === this._entity) {
      this._callGainOrLoseListener(componentName, this._loseListeners);

      this._toggleComponentListeners('off', componentName, true);
    }
  }

  _callAllGainOrLoseListeners(listenerMap) {
    for (const componentName in this._entity.c) {
      this._callGainOrLoseListener(componentName, listenerMap);
    }
  }

  _callGainOrLoseListener(componentName, listenerMap) {
    if (this._entity.c.hasOwnProperty(componentName) && listenerMap[componentName]) {
      const config = listenerMap[componentName];
      config.callback.call(config.scope);
    }
  }

  _toggleEntityListeners(onOrOff, isDestroying) {
    if (this._entity) {
      for (let i = 0; i < this._eventListenerConfigs.length; ++i) {
        this._safeToggleListener(onOrOff, this._eventListenerConfigs[i], isDestroying);
      }
    }
  }

  _toggleComponentListeners(onOrOff, componentName, isDestroying) {
    for (let i = 0; i < this._eventListenerConfigs.length; ++i) {
      const config = this._eventListenerConfigs[i];

      if (config.sourceName === componentName) {
        this._safeToggleListener(onOrOff, config, isDestroying);
      }
    }
  }

  _safeToggleListener(onOrOff, config, isDestroying) {
    const isAdding = onOrOff === 'on';

    if (isAdding && this._listenerStatusFlags[config.id]) {
      return;
    }

    const source = this._getEventSource(config.sourceName, isDestroying);

    if (source) {
      source[onOrOff](config.eventName, config.callback, config.scope);
      this._listenerStatusFlags[config.id] = isAdding;
    }
  }

  _getEventSource(sourceName, isDestroying) {
    if (sourceName === 'entity') {
      return this._entity;
    }

    const component = this._entity[sourceName];

    if (component) {
      return component;
    }

    if (!isDestroying) {
      console.warn('Entity has no component with name ' + sourceName);
    }

    return null;
  }

  _onEntityDestroy(entity) {
    if (this._entity === entity) {
      this._toggleEntityListeners('off', true);

      this._entity = null;
    }
  }

  _onParentComponentRemove(entity, component) {
    if (component === this._parentComponent) {
      this._toggleLifecycleListeners('off');

      this._toggleEntityListeners('off', true);
    }
  }

  hasComponent(componentName) {
    return this._entity && this._entity.c ? !!this._entity.c[componentName] : false;
  }

  get entity() {
    return this._entity;
  }

}

const BUTTON_TRANSITION_MODE_TINT = 0;
const BUTTON_TRANSITION_MODE_SPRITE_CHANGE = 1;

const ELEMENTTYPE_GROUP = 'group';
const ELEMENTTYPE_IMAGE = 'image';
const ELEMENTTYPE_TEXT = 'text';
const FITMODE_STRETCH = 'stretch';
const FITMODE_CONTAIN = 'contain';
const FITMODE_COVER = 'cover';

const VisualState = {
  DEFAULT: 'DEFAULT',
  HOVER: 'HOVER',
  PRESSED: 'PRESSED',
  INACTIVE: 'INACTIVE'
};
const STATES_TO_TINT_NAMES = {};
STATES_TO_TINT_NAMES[VisualState.DEFAULT] = '_defaultTint';
STATES_TO_TINT_NAMES[VisualState.HOVER] = 'hoverTint';
STATES_TO_TINT_NAMES[VisualState.PRESSED] = 'pressedTint';
STATES_TO_TINT_NAMES[VisualState.INACTIVE] = 'inactiveTint';
const STATES_TO_SPRITE_ASSET_NAMES = {};
STATES_TO_SPRITE_ASSET_NAMES[VisualState.DEFAULT] = '_defaultSpriteAsset';
STATES_TO_SPRITE_ASSET_NAMES[VisualState.HOVER] = 'hoverSpriteAsset';
STATES_TO_SPRITE_ASSET_NAMES[VisualState.PRESSED] = 'pressedSpriteAsset';
STATES_TO_SPRITE_ASSET_NAMES[VisualState.INACTIVE] = 'inactiveSpriteAsset';
const STATES_TO_SPRITE_FRAME_NAMES = {};
STATES_TO_SPRITE_FRAME_NAMES[VisualState.DEFAULT] = '_defaultSpriteFrame';
STATES_TO_SPRITE_FRAME_NAMES[VisualState.HOVER] = 'hoverSpriteFrame';
STATES_TO_SPRITE_FRAME_NAMES[VisualState.PRESSED] = 'pressedSpriteFrame';
STATES_TO_SPRITE_FRAME_NAMES[VisualState.INACTIVE] = 'inactiveSpriteFrame';

class ButtonComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._visualState = VisualState.DEFAULT;
    this._isHovering = false;
    this._hoveringCounter = 0;
    this._isPressed = false;
    this._defaultTint = new Color(1, 1, 1, 1);
    this._defaultSpriteAsset = null;
    this._defaultSpriteFrame = 0;
    this._imageReference = new EntityReference(this, 'imageEntity', {
      'element#gain': this._onImageElementGain,
      'element#lose': this._onImageElementLose,
      'element#set:color': this._onSetColor,
      'element#set:opacity': this._onSetOpacity,
      'element#set:spriteAsset': this._onSetSpriteAsset,
      'element#set:spriteFrame': this._onSetSpriteFrame
    });

    this._toggleLifecycleListeners('on', system);
  }

  _toggleLifecycleListeners(onOrOff, system) {
    this[onOrOff]('set_active', this._onSetActive, this);
    this[onOrOff]('set_transitionMode', this._onSetTransitionMode, this);
    this[onOrOff]('set_hoverTint', this._onSetTransitionValue, this);
    this[onOrOff]('set_pressedTint', this._onSetTransitionValue, this);
    this[onOrOff]('set_inactiveTint', this._onSetTransitionValue, this);
    this[onOrOff]('set_hoverSpriteAsset', this._onSetTransitionValue, this);
    this[onOrOff]('set_hoverSpriteFrame', this._onSetTransitionValue, this);
    this[onOrOff]('set_pressedSpriteAsset', this._onSetTransitionValue, this);
    this[onOrOff]('set_pressedSpriteFrame', this._onSetTransitionValue, this);
    this[onOrOff]('set_inactiveSpriteAsset', this._onSetTransitionValue, this);
    this[onOrOff]('set_inactiveSpriteFrame', this._onSetTransitionValue, this);
    system.app.systems.element[onOrOff]('add', this._onElementComponentAdd, this);
    system.app.systems.element[onOrOff]('beforeremove', this._onElementComponentRemove, this);
  }

  _onSetActive(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      this._updateVisualState();
    }
  }

  _onSetTransitionMode(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      this._cancelTween();

      this._resetToDefaultVisualState(oldValue);

      this._forceReapplyVisualState();
    }
  }

  _onSetTransitionValue(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      this._forceReapplyVisualState();
    }
  }

  _onElementComponentRemove(entity) {
    if (this.entity === entity) {
      this._toggleHitElementListeners('off');
    }
  }

  _onElementComponentAdd(entity) {
    if (this.entity === entity) {
      this._toggleHitElementListeners('on');
    }
  }

  _onImageElementLose() {
    this._cancelTween();

    this._resetToDefaultVisualState(this.transitionMode);
  }

  _onImageElementGain() {
    this._storeDefaultVisualState();

    this._forceReapplyVisualState();
  }

  _toggleHitElementListeners(onOrOff) {
    if (this.entity.element) {
      const isAdding = onOrOff === 'on';

      if (isAdding && this._hasHitElementListeners) {
        return;
      }

      this.entity.element[onOrOff]('mouseenter', this._onMouseEnter, this);
      this.entity.element[onOrOff]('mouseleave', this._onMouseLeave, this);
      this.entity.element[onOrOff]('mousedown', this._onMouseDown, this);
      this.entity.element[onOrOff]('mouseup', this._onMouseUp, this);
      this.entity.element[onOrOff]('touchstart', this._onTouchStart, this);
      this.entity.element[onOrOff]('touchend', this._onTouchEnd, this);
      this.entity.element[onOrOff]('touchleave', this._onTouchLeave, this);
      this.entity.element[onOrOff]('touchcancel', this._onTouchCancel, this);
      this.entity.element[onOrOff]('selectstart', this._onSelectStart, this);
      this.entity.element[onOrOff]('selectend', this._onSelectEnd, this);
      this.entity.element[onOrOff]('selectenter', this._onSelectEnter, this);
      this.entity.element[onOrOff]('selectleave', this._onSelectLeave, this);
      this.entity.element[onOrOff]('click', this._onClick, this);
      this._hasHitElementListeners = isAdding;
    }
  }

  _storeDefaultVisualState() {
    if (this._imageReference.hasComponent('element')) {
      const element = this._imageReference.entity.element;

      if (element.type !== ELEMENTTYPE_GROUP) {
        this._storeDefaultColor(element.color);

        this._storeDefaultOpacity(element.opacity);

        this._storeDefaultSpriteAsset(element.spriteAsset);

        this._storeDefaultSpriteFrame(element.spriteFrame);
      }
    }
  }

  _storeDefaultColor(color) {
    this._defaultTint.r = color.r;
    this._defaultTint.g = color.g;
    this._defaultTint.b = color.b;
  }

  _storeDefaultOpacity(opacity) {
    this._defaultTint.a = opacity;
  }

  _storeDefaultSpriteAsset(spriteAsset) {
    this._defaultSpriteAsset = spriteAsset;
  }

  _storeDefaultSpriteFrame(spriteFrame) {
    this._defaultSpriteFrame = spriteFrame;
  }

  _onSetColor(color) {
    if (!this._isApplyingTint) {
      this._storeDefaultColor(color);

      this._forceReapplyVisualState();
    }
  }

  _onSetOpacity(opacity) {
    if (!this._isApplyingTint) {
      this._storeDefaultOpacity(opacity);

      this._forceReapplyVisualState();
    }
  }

  _onSetSpriteAsset(spriteAsset) {
    if (!this._isApplyingSprite) {
      this._storeDefaultSpriteAsset(spriteAsset);

      this._forceReapplyVisualState();
    }
  }

  _onSetSpriteFrame(spriteFrame) {
    if (!this._isApplyingSprite) {
      this._storeDefaultSpriteFrame(spriteFrame);

      this._forceReapplyVisualState();
    }
  }

  _onMouseEnter(event) {
    this._isHovering = true;

    this._updateVisualState();

    this._fireIfActive('mouseenter', event);
  }

  _onMouseLeave(event) {
    this._isHovering = false;
    this._isPressed = false;

    this._updateVisualState();

    this._fireIfActive('mouseleave', event);
  }

  _onMouseDown(event) {
    this._isPressed = true;

    this._updateVisualState();

    this._fireIfActive('mousedown', event);
  }

  _onMouseUp(event) {
    this._isPressed = false;

    this._updateVisualState();

    this._fireIfActive('mouseup', event);
  }

  _onTouchStart(event) {
    this._isPressed = true;

    this._updateVisualState();

    this._fireIfActive('touchstart', event);
  }

  _onTouchEnd(event) {
    event.event.preventDefault();
    this._isPressed = false;

    this._updateVisualState();

    this._fireIfActive('touchend', event);
  }

  _onTouchLeave(event) {
    this._isPressed = false;

    this._updateVisualState();

    this._fireIfActive('touchleave', event);
  }

  _onTouchCancel(event) {
    this._isPressed = false;

    this._updateVisualState();

    this._fireIfActive('touchcancel', event);
  }

  _onSelectStart(event) {
    this._isPressed = true;

    this._updateVisualState();

    this._fireIfActive('selectstart', event);
  }

  _onSelectEnd(event) {
    this._isPressed = false;

    this._updateVisualState();

    this._fireIfActive('selectend', event);
  }

  _onSelectEnter(event) {
    this._hoveringCounter++;

    if (this._hoveringCounter === 1) {
      this._isHovering = true;

      this._updateVisualState();
    }

    this._fireIfActive('selectenter', event);
  }

  _onSelectLeave(event) {
    this._hoveringCounter--;

    if (this._hoveringCounter === 0) {
      this._isHovering = false;
      this._isPressed = false;

      this._updateVisualState();
    }

    this._fireIfActive('selectleave', event);
  }

  _onClick(event) {
    this._fireIfActive('click', event);
  }

  _fireIfActive(name, event) {
    if (this.data.active) {
      this.fire(name, event);
    }
  }

  _updateVisualState(force) {
    const oldVisualState = this._visualState;

    const newVisualState = this._determineVisualState();

    if ((oldVisualState !== newVisualState || force) && this.enabled) {
      this._visualState = newVisualState;

      if (oldVisualState === VisualState.HOVER) {
        this._fireIfActive('hoverend');
      }

      if (oldVisualState === VisualState.PRESSED) {
        this._fireIfActive('pressedend');
      }

      if (newVisualState === VisualState.HOVER) {
        this._fireIfActive('hoverstart');
      }

      if (newVisualState === VisualState.PRESSED) {
        this._fireIfActive('pressedstart');
      }

      switch (this.transitionMode) {
        case BUTTON_TRANSITION_MODE_TINT:
          {
            const tintName = STATES_TO_TINT_NAMES[this._visualState];
            const tintColor = this[tintName];

            this._applyTint(tintColor);

            break;
          }

        case BUTTON_TRANSITION_MODE_SPRITE_CHANGE:
          {
            const spriteAssetName = STATES_TO_SPRITE_ASSET_NAMES[this._visualState];
            const spriteFrameName = STATES_TO_SPRITE_FRAME_NAMES[this._visualState];
            const spriteAsset = this[spriteAssetName];
            const spriteFrame = this[spriteFrameName];

            this._applySprite(spriteAsset, spriteFrame);

            break;
          }
      }
    }
  }

  _forceReapplyVisualState() {
    this._updateVisualState(true);
  }

  _resetToDefaultVisualState(transitionMode) {
    if (this._imageReference.hasComponent('element')) {
      switch (transitionMode) {
        case BUTTON_TRANSITION_MODE_TINT:
          this._cancelTween();

          this._applyTintImmediately(this._defaultTint);

          break;

        case BUTTON_TRANSITION_MODE_SPRITE_CHANGE:
          this._applySprite(this._defaultSpriteAsset, this._defaultSpriteFrame);

          break;
      }
    }
  }

  _determineVisualState() {
    if (!this.active) {
      return VisualState.INACTIVE;
    } else if (this._isPressed) {
      return VisualState.PRESSED;
    } else if (this._isHovering) {
      return VisualState.HOVER;
    }

    return VisualState.DEFAULT;
  }

  _applySprite(spriteAsset, spriteFrame) {
    spriteFrame = spriteFrame || 0;

    if (this._imageReference.hasComponent('element')) {
      this._isApplyingSprite = true;

      if (this._imageReference.entity.element.spriteAsset !== spriteAsset) {
        this._imageReference.entity.element.spriteAsset = spriteAsset;
      }

      if (this._imageReference.entity.element.spriteFrame !== spriteFrame) {
        this._imageReference.entity.element.spriteFrame = spriteFrame;
      }

      this._isApplyingSprite = false;
    }
  }

  _applyTint(tintColor) {
    this._cancelTween();

    if (this.fadeDuration === 0) {
      this._applyTintImmediately(tintColor);
    } else {
      this._applyTintWithTween(tintColor);
    }
  }

  _applyTintImmediately(tintColor) {
    if (!tintColor || !this._imageReference.hasComponent('element') || this._imageReference.entity.element.type === ELEMENTTYPE_GROUP) return;
    const color3 = toColor3(tintColor);
    this._isApplyingTint = true;
    if (!color3.equals(this._imageReference.entity.element.color)) this._imageReference.entity.element.color = color3;
    if (this._imageReference.entity.element.opacity !== tintColor.a) this._imageReference.entity.element.opacity = tintColor.a;
    this._isApplyingTint = false;
  }

  _applyTintWithTween(tintColor) {
    if (!tintColor || !this._imageReference.hasComponent('element') || this._imageReference.entity.element.type === ELEMENTTYPE_GROUP) return;
    const color3 = toColor3(tintColor);
    const color = this._imageReference.entity.element.color;
    const opacity = this._imageReference.entity.element.opacity;
    if (color3.equals(color) && tintColor.a === opacity) return;
    this._tweenInfo = {
      startTime: now(),
      from: new Color(color.r, color.g, color.b, opacity),
      to: tintColor.clone(),
      lerpColor: new Color()
    };
  }

  _updateTintTween() {
    const elapsedTime = now() - this._tweenInfo.startTime;

    let elapsedProportion = this.fadeDuration === 0 ? 1 : elapsedTime / this.fadeDuration;
    elapsedProportion = math$1.clamp(elapsedProportion, 0, 1);

    if (Math.abs(elapsedProportion - 1) > 1e-5) {
      const lerpColor = this._tweenInfo.lerpColor;
      lerpColor.lerp(this._tweenInfo.from, this._tweenInfo.to, elapsedProportion);

      this._applyTintImmediately(new Color(lerpColor.r, lerpColor.g, lerpColor.b, lerpColor.a));
    } else {
      this._applyTintImmediately(this._tweenInfo.to);

      this._cancelTween();
    }
  }

  _cancelTween() {
    delete this._tweenInfo;
  }

  onUpdate() {
    if (this._tweenInfo) {
      this._updateTintTween();
    }
  }

  onEnable() {
    this._isHovering = false;
    this._hoveringCounter = 0;
    this._isPressed = false;

    this._imageReference.onParentComponentEnable();

    this._toggleHitElementListeners('on');

    this._forceReapplyVisualState();
  }

  onDisable() {
    this._toggleHitElementListeners('off');

    this._resetToDefaultVisualState(this.transitionMode);
  }

  onRemove() {
    this._toggleLifecycleListeners('off', this.system);

    this.onDisable();
  }

}

function toColor3(color4) {
  return new Color(color4.r, color4.g, color4.b);
}

class ButtonComponentData {
  constructor() {
    this.enabled = true;
    this.active = true;
    this.imageEntity = null;
    this.hitPadding = new Vec4();
    this.transitionMode = BUTTON_TRANSITION_MODE_TINT;
    this.hoverTint = new Color(0.75, 0.75, 0.75);
    this.pressedTint = new Color(0.5, 0.5, 0.5);
    this.inactiveTint = new Color(0.25, 0.25, 0.25);
    this.fadeDuration = 0;
    this.hoverSpriteAsset = null;
    this.hoverSpriteFrame = 0;
    this.pressedSpriteAsset = null;
    this.pressedSpriteFrame = 0;
    this.inactiveSpriteAsset = null;
    this.inactiveSpriteFrame = 0;
  }

}

const _schema$h = ['enabled', 'active', {
  name: 'imageEntity',
  type: 'entity'
}, {
  name: 'hitPadding',
  type: 'vec4'
}, 'transitionMode', {
  name: 'hoverTint',
  type: 'rgba'
}, {
  name: 'pressedTint',
  type: 'rgba'
}, {
  name: 'inactiveTint',
  type: 'rgba'
}, 'fadeDuration', 'hoverSpriteAsset', 'hoverSpriteFrame', 'pressedSpriteAsset', 'pressedSpriteFrame', 'inactiveSpriteAsset', 'inactiveSpriteFrame'];

class ButtonComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'button';
    this.ComponentType = ButtonComponent;
    this.DataType = ButtonComponentData;
    this.schema = _schema$h;
    this.on('beforeremove', this._onRemoveComponent, this);
    this.app.systems.on('update', this.onUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    super.initializeComponentData(component, data, _schema$h);
  }

  onUpdate(dt) {
    const components = this.store;

    for (const id in components) {
      const entity = components[id].entity;
      const component = entity.button;

      if (component.enabled && entity.enabled) {
        component.onUpdate();
      }
    }
  }

  _onRemoveComponent(entity, component) {
    component.onRemove();
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(ButtonComponent.prototype, _schema$h);

class CollisionComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._compoundParent = null;
    this.entity.on('insert', this._onInsert, this);
    this.on('set_type', this.onSetType, this);
    this.on('set_halfExtents', this.onSetHalfExtents, this);
    this.on('set_radius', this.onSetRadius, this);
    this.on('set_height', this.onSetHeight, this);
    this.on('set_axis', this.onSetAxis, this);
    this.on('set_asset', this.onSetAsset, this);
    this.on('set_renderAsset', this.onSetRenderAsset, this);
    this.on('set_model', this.onSetModel, this);
    this.on('set_render', this.onSetRender, this);
  }

  onSetType(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      this.system.changeType(this, oldValue, newValue);
    }
  }

  onSetHalfExtents(name, oldValue, newValue) {
    const t = this.data.type;

    if (this.data.initialized && t === 'box') {
      this.system.recreatePhysicalShapes(this);
    }
  }

  onSetRadius(name, oldValue, newValue) {
    const t = this.data.type;

    if (this.data.initialized && (t === 'sphere' || t === 'capsule' || t === 'cylinder' || t === 'cone')) {
      this.system.recreatePhysicalShapes(this);
    }
  }

  onSetHeight(name, oldValue, newValue) {
    const t = this.data.type;

    if (this.data.initialized && (t === 'capsule' || t === 'cylinder' || t === 'cone')) {
      this.system.recreatePhysicalShapes(this);
    }
  }

  onSetAxis(name, oldValue, newValue) {
    const t = this.data.type;

    if (this.data.initialized && (t === 'capsule' || t === 'cylinder' || t === 'cone')) {
      this.system.recreatePhysicalShapes(this);
    }
  }

  onSetAsset(name, oldValue, newValue) {
    const assets = this.system.app.assets;

    if (oldValue) {
      const asset = assets.get(oldValue);

      if (asset) {
        asset.off('remove', this.onAssetRemoved, this);
      }
    }

    if (newValue) {
      if (newValue instanceof Asset) {
        this.data.asset = newValue.id;
      }

      const asset = assets.get(this.data.asset);

      if (asset) {
        asset.off('remove', this.onAssetRemoved, this);
        asset.on('remove', this.onAssetRemoved, this);
      }
    }

    if (this.data.initialized && this.data.type === 'mesh') {
      if (!newValue) {
        this.data.model = null;
      }

      this.system.recreatePhysicalShapes(this);
    }
  }

  onSetRenderAsset(name, oldValue, newValue) {
    const assets = this.system.app.assets;

    if (oldValue) {
      const asset = assets.get(oldValue);

      if (asset) {
        asset.off('remove', this.onRenderAssetRemoved, this);
      }
    }

    if (newValue) {
      if (newValue instanceof Asset) {
        this.data.renderAsset = newValue.id;
      }

      const asset = assets.get(this.data.renderAsset);

      if (asset) {
        asset.off('remove', this.onRenderAssetRemoved, this);
        asset.on('remove', this.onRenderAssetRemoved, this);
      }
    }

    if (this.data.initialized && this.data.type === 'mesh') {
      if (!newValue) {
        this.data.render = null;
      }

      this.system.recreatePhysicalShapes(this);
    }
  }

  onSetModel(name, oldValue, newValue) {
    if (this.data.initialized && this.data.type === 'mesh') {
      this.system.implementations.mesh.doRecreatePhysicalShape(this);
    }
  }

  onSetRender(name, oldValue, newValue) {
    this.onSetModel(name, oldValue, newValue);
  }

  onAssetRemoved(asset) {
    asset.off('remove', this.onAssetRemoved, this);

    if (this.data.asset === asset.id) {
      this.asset = null;
    }
  }

  onRenderAssetRemoved(asset) {
    asset.off('remove', this.onRenderAssetRemoved, this);

    if (this.data.renderAsset === asset.id) {
      this.renderAsset = null;
    }
  }

  _getCompoundChildShapeIndex(shape) {
    const compound = this.data.shape;
    const shapes = compound.getNumChildShapes();

    for (let i = 0; i < shapes; i++) {
      const childShape = compound.getChildShape(i);

      if (childShape.ptr === shape.ptr) {
        return i;
      }
    }

    return null;
  }

  _onInsert(parent) {
    if (typeof Ammo === 'undefined') return;

    if (this._compoundParent) {
      this.system.recreatePhysicalShapes(this);
    } else if (!this.entity.rigidbody) {
      let ancestor = this.entity.parent;

      while (ancestor) {
        if (ancestor.collision && ancestor.collision.type === 'compound') {
          if (ancestor.collision.shape.getNumChildShapes() === 0) {
            this.system.recreatePhysicalShapes(ancestor.collision);
          } else {
            this.system.recreatePhysicalShapes(this);
          }

          break;
        }

        ancestor = ancestor.parent;
      }
    }
  }

  _updateCompound() {
    const entity = this.entity;

    if (entity._dirtyWorld) {
      let dirty = entity._dirtyLocal;
      let parent = entity;

      while (parent && !dirty) {
        if (parent.collision && parent.collision === this._compoundParent) break;
        if (parent._dirtyLocal) dirty = true;
        parent = parent.parent;
      }

      if (dirty) {
        entity.forEach(this.system.implementations.compound._updateEachDescendantTransform, entity);
        const bodyComponent = this._compoundParent.entity.rigidbody;
        if (bodyComponent) bodyComponent.activate();
      }
    }
  }

  onEnable() {
    if (this.data.type === 'mesh' && (this.data.asset || this.data.renderAsset) && this.data.initialized) {
      const asset = this.system.app.assets.get(this.data.asset || this.data.renderAsset);

      if (asset && (!asset.resource || !this.data.shape)) {
        this.system.recreatePhysicalShapes(this);
        return;
      }
    }

    if (this.entity.rigidbody) {
      if (this.entity.rigidbody.enabled) {
        this.entity.rigidbody.enableSimulation();
      }
    } else if (this._compoundParent && this !== this._compoundParent) {
      if (this._compoundParent.shape.getNumChildShapes() === 0) {
        this.system.recreatePhysicalShapes(this._compoundParent);
      } else {
        const transform = this.system._getNodeTransform(this.entity, this._compoundParent.entity);

        this._compoundParent.shape.addChildShape(transform, this.data.shape);

        Ammo.destroy(transform);
        if (this._compoundParent.entity.rigidbody) this._compoundParent.entity.rigidbody.activate();
      }
    } else if (this.entity.trigger) {
      this.entity.trigger.enable();
    }
  }

  onDisable() {
    if (this.entity.rigidbody) {
      this.entity.rigidbody.disableSimulation();
    } else if (this._compoundParent && this !== this._compoundParent) {
      if (!this._compoundParent.entity._destroying) {
        this.system._removeCompoundChild(this._compoundParent, this.data.shape);

        if (this._compoundParent.entity.rigidbody) this._compoundParent.entity.rigidbody.activate();
      }
    } else if (this.entity.trigger) {
      this.entity.trigger.disable();
    }
  }

  onBeforeRemove() {
    if (this.asset) {
      this.asset = null;
    }

    if (this.renderAsset) {
      this.renderAsset = null;
    }

    this.entity.off('insert', this._onInsert, this);
    this.off();
  }

}

class CollisionComponentData {
  constructor() {
    this.enabled = true;
    this.type = 'box';
    this.halfExtents = new Vec3(0.5, 0.5, 0.5);
    this.radius = 0.5;
    this.axis = 1;
    this.height = 2;
    this.asset = null;
    this.renderAsset = null;
    this.shape = null;
    this.model = null;
    this.render = null;
    this.initialized = false;
  }

}

const BODYTYPE_STATIC = 'static';
const BODYTYPE_DYNAMIC = 'dynamic';
const BODYTYPE_KINEMATIC = 'kinematic';
const BODYFLAG_STATIC_OBJECT = 1;
const BODYFLAG_KINEMATIC_OBJECT = 2;
const BODYFLAG_NORESPONSE_OBJECT = 4;
const BODYSTATE_ACTIVE_TAG = 1;
const BODYSTATE_ISLAND_SLEEPING = 2;
const BODYSTATE_WANTS_DEACTIVATION = 3;
const BODYSTATE_DISABLE_DEACTIVATION = 4;
const BODYSTATE_DISABLE_SIMULATION = 5;
const BODYGROUP_NONE = 0;
const BODYGROUP_DEFAULT = 1;
const BODYGROUP_DYNAMIC = 1;
const BODYGROUP_STATIC = 2;
const BODYGROUP_KINEMATIC = 4;
const BODYGROUP_ENGINE_1 = 8;
const BODYGROUP_TRIGGER = 16;
const BODYGROUP_ENGINE_2 = 32;
const BODYGROUP_ENGINE_3 = 64;
const BODYGROUP_USER_1 = 128;
const BODYGROUP_USER_2 = 256;
const BODYGROUP_USER_3 = 512;
const BODYGROUP_USER_4 = 1024;
const BODYGROUP_USER_5 = 2048;
const BODYGROUP_USER_6 = 4096;
const BODYGROUP_USER_7 = 8192;
const BODYGROUP_USER_8 = 16384;
const BODYMASK_NONE = 0;
const BODYMASK_ALL = 65535;
const BODYMASK_STATIC = 2;
const BODYMASK_NOT_STATIC = 65535 ^ 2;
const BODYMASK_NOT_STATIC_KINEMATIC = 65535 ^ (2 | 4);

let ammoVec1$1, ammoQuat$1, ammoTransform$1;

class Trigger {
  constructor(app, component, data) {
    this.entity = component.entity;
    this.component = component;
    this.app = app;

    if (typeof Ammo !== 'undefined' && !ammoVec1$1) {
      ammoVec1$1 = new Ammo.btVector3();
      ammoQuat$1 = new Ammo.btQuaternion();
      ammoTransform$1 = new Ammo.btTransform();
    }

    this.initialize(data);
  }

  initialize(data) {
    const entity = this.entity;
    const shape = data.shape;

    if (shape && typeof Ammo !== 'undefined') {
      if (entity.trigger) {
        entity.trigger.destroy();
      }

      const mass = 1;
      const pos = entity.getPosition();
      const rot = entity.getRotation();
      ammoVec1$1.setValue(pos.x, pos.y, pos.z);
      ammoQuat$1.setValue(rot.x, rot.y, rot.z, rot.w);
      ammoTransform$1.setOrigin(ammoVec1$1);
      ammoTransform$1.setRotation(ammoQuat$1);
      const body = this.app.systems.rigidbody.createBody(mass, shape, ammoTransform$1);
      body.setRestitution(0);
      body.setFriction(0);
      body.setDamping(0, 0);
      ammoVec1$1.setValue(0, 0, 0);
      body.setLinearFactor(ammoVec1$1);
      body.setAngularFactor(ammoVec1$1);
      body.setCollisionFlags(body.getCollisionFlags() | BODYFLAG_NORESPONSE_OBJECT);
      body.entity = entity;
      this.body = body;

      if (this.component.enabled && entity.enabled) {
        this.enable();
      }
    }
  }

  destroy() {
    const body = this.body;
    if (!body) return;
    this.disable();
    this.app.systems.rigidbody.destroyBody(body);
  }

  _getEntityTransform(transform) {
    const pos = this.entity.getPosition();
    const rot = this.entity.getRotation();
    ammoVec1$1.setValue(pos.x, pos.y, pos.z);
    ammoQuat$1.setValue(rot.x, rot.y, rot.z, rot.w);
    transform.setOrigin(ammoVec1$1);
    transform.setRotation(ammoQuat$1);
  }

  updateTransform() {
    this._getEntityTransform(ammoTransform$1);

    const body = this.body;
    body.setWorldTransform(ammoTransform$1);
    body.activate();
  }

  enable() {
    const body = this.body;
    if (!body) return;
    const systems = this.app.systems;
    systems.rigidbody.addBody(body, BODYGROUP_TRIGGER, BODYMASK_NOT_STATIC ^ BODYGROUP_TRIGGER);

    systems.rigidbody._triggers.push(this);

    body.forceActivationState(BODYSTATE_ACTIVE_TAG);
    this.updateTransform();
  }

  disable() {
    const body = this.body;
    if (!body) return;
    const systems = this.app.systems;

    const idx = systems.rigidbody._triggers.indexOf(this);

    if (idx > -1) {
      systems.rigidbody._triggers.splice(idx, 1);
    }

    systems.rigidbody.removeBody(body);
    body.forceActivationState(BODYSTATE_DISABLE_SIMULATION);
  }

}

const mat4 = new Mat4();
const vec3 = new Vec3();
const quat$1 = new Quat();
const tempGraphNode = new GraphNode();
const _schema$g = ['enabled', 'type', 'halfExtents', 'radius', 'axis', 'height', 'asset', 'renderAsset', 'shape', 'model', 'render'];

class CollisionSystemImpl {
  constructor(system) {
    this.system = system;
  }

  beforeInitialize(component, data) {
    data.shape = null;
    data.model = new Model();
    data.model.graph = new GraphNode();
  }

  afterInitialize(component, data) {
    this.recreatePhysicalShapes(component);
    component.data.initialized = true;
  }

  reset(component, data) {
    this.beforeInitialize(component, data);
    this.afterInitialize(component, data);
  }

  recreatePhysicalShapes(component) {
    const entity = component.entity;
    const data = component.data;

    if (typeof Ammo !== 'undefined') {
      if (entity.trigger) {
        entity.trigger.destroy();
        delete entity.trigger;
      }

      if (data.shape) {
        if (component._compoundParent) {
          this.system._removeCompoundChild(component._compoundParent, data.shape);

          if (component._compoundParent.entity.rigidbody) component._compoundParent.entity.rigidbody.activate();
        }

        Ammo.destroy(data.shape);
        data.shape = null;
      }

      data.shape = this.createPhysicalShape(component.entity, data);
      const firstCompoundChild = !component._compoundParent;

      if (data.type === 'compound' && (!component._compoundParent || component === component._compoundParent)) {
        component._compoundParent = component;
        entity.forEach(this._addEachDescendant, component);
      } else if (data.type !== 'compound') {
        if (component._compoundParent && component === component._compoundParent) {
          entity.forEach(this.system.implementations.compound._updateEachDescendant, component);
        }

        if (!component.rigidbody) {
          component._compoundParent = null;
          let parent = entity.parent;

          while (parent) {
            if (parent.collision && parent.collision.type === 'compound') {
              component._compoundParent = parent.collision;
              break;
            }

            parent = parent.parent;
          }
        }
      }

      if (component._compoundParent) {
        if (component !== component._compoundParent) {
          if (firstCompoundChild && component._compoundParent.shape.getNumChildShapes() === 0) {
            this.system.recreatePhysicalShapes(component._compoundParent);
          } else {
            this.system.updateCompoundChildTransform(entity);
            if (component._compoundParent.entity.rigidbody) component._compoundParent.entity.rigidbody.activate();
          }
        }
      }

      if (entity.rigidbody) {
        entity.rigidbody.disableSimulation();
        entity.rigidbody.createBody();

        if (entity.enabled && entity.rigidbody.enabled) {
          entity.rigidbody.enableSimulation();
        }
      } else if (!component._compoundParent) {
        if (!entity.trigger) {
          entity.trigger = new Trigger(this.system.app, component, data);
        } else {
          entity.trigger.initialize(data);
        }
      }
    }
  }

  createPhysicalShape(entity, data) {
    return undefined;
  }

  updateTransform(component, position, rotation, scale) {
    if (component.entity.trigger) {
      component.entity.trigger.updateTransform();
    }
  }

  beforeRemove(entity, component) {
    if (component.data.shape) {
      if (component._compoundParent && !component._compoundParent.entity._destroying) {
        this.system._removeCompoundChild(component._compoundParent, component.data.shape);

        if (component._compoundParent.entity.rigidbody) component._compoundParent.entity.rigidbody.activate();
      }

      component._compoundParent = null;
      Ammo.destroy(component.data.shape);
      component.data.shape = null;
    }
  }

  remove(entity, data) {
    if (entity.rigidbody && entity.rigidbody.body) {
      entity.rigidbody.disableSimulation();
    }

    if (entity.trigger) {
      entity.trigger.destroy();
      delete entity.trigger;
    }
  }

  clone(entity, clone) {
    const src = this.system.store[entity.getGuid()];
    const data = {
      enabled: src.data.enabled,
      type: src.data.type,
      halfExtents: [src.data.halfExtents.x, src.data.halfExtents.y, src.data.halfExtents.z],
      radius: src.data.radius,
      axis: src.data.axis,
      height: src.data.height,
      asset: src.data.asset,
      renderAsset: src.data.renderAsset,
      model: src.data.model,
      render: src.data.render
    };
    return this.system.addComponent(clone, data);
  }

}

class CollisionBoxSystemImpl extends CollisionSystemImpl {
  createPhysicalShape(entity, data) {
    if (typeof Ammo !== 'undefined') {
      const he = data.halfExtents;
      const ammoHe = new Ammo.btVector3(he ? he.x : 0.5, he ? he.y : 0.5, he ? he.z : 0.5);
      const shape = new Ammo.btBoxShape(ammoHe);
      Ammo.destroy(ammoHe);
      return shape;
    }

    return undefined;
  }

}

class CollisionSphereSystemImpl extends CollisionSystemImpl {
  createPhysicalShape(entity, data) {
    if (typeof Ammo !== 'undefined') {
      return new Ammo.btSphereShape(data.radius);
    }

    return undefined;
  }

}

class CollisionCapsuleSystemImpl extends CollisionSystemImpl {
  createPhysicalShape(entity, data) {
    const axis = data.axis !== undefined ? data.axis : 1;
    const radius = data.radius || 0.5;
    const height = Math.max((data.height || 2) - 2 * radius, 0);
    let shape = null;

    if (typeof Ammo !== 'undefined') {
      switch (axis) {
        case 0:
          shape = new Ammo.btCapsuleShapeX(radius, height);
          break;

        case 1:
          shape = new Ammo.btCapsuleShape(radius, height);
          break;

        case 2:
          shape = new Ammo.btCapsuleShapeZ(radius, height);
          break;
      }
    }

    return shape;
  }

}

class CollisionCylinderSystemImpl extends CollisionSystemImpl {
  createPhysicalShape(entity, data) {
    const axis = data.axis !== undefined ? data.axis : 1;
    const radius = data.radius !== undefined ? data.radius : 0.5;
    const height = data.height !== undefined ? data.height : 1;
    let halfExtents = null;
    let shape = null;

    if (typeof Ammo !== 'undefined') {
      switch (axis) {
        case 0:
          halfExtents = new Ammo.btVector3(height * 0.5, radius, radius);
          shape = new Ammo.btCylinderShapeX(halfExtents);
          break;

        case 1:
          halfExtents = new Ammo.btVector3(radius, height * 0.5, radius);
          shape = new Ammo.btCylinderShape(halfExtents);
          break;

        case 2:
          halfExtents = new Ammo.btVector3(radius, radius, height * 0.5);
          shape = new Ammo.btCylinderShapeZ(halfExtents);
          break;
      }
    }

    if (halfExtents) Ammo.destroy(halfExtents);
    return shape;
  }

}

class CollisionConeSystemImpl extends CollisionSystemImpl {
  createPhysicalShape(entity, data) {
    const axis = data.axis !== undefined ? data.axis : 1;
    const radius = data.radius !== undefined ? data.radius : 0.5;
    const height = data.height !== undefined ? data.height : 1;
    let shape = null;

    if (typeof Ammo !== 'undefined') {
      switch (axis) {
        case 0:
          shape = new Ammo.btConeShapeX(radius, height);
          break;

        case 1:
          shape = new Ammo.btConeShape(radius, height);
          break;

        case 2:
          shape = new Ammo.btConeShapeZ(radius, height);
          break;
      }
    }

    return shape;
  }

}

class CollisionMeshSystemImpl extends CollisionSystemImpl {
  beforeInitialize(component, data) {}

  createAmmoMesh(mesh, node, shape) {
    let triMesh;

    if (this.system._triMeshCache[mesh.id]) {
      triMesh = this.system._triMeshCache[mesh.id];
    } else {
      const vb = mesh.vertexBuffer;
      const format = vb.getFormat();
      let stride;
      let positions;

      for (let i = 0; i < format.elements.length; i++) {
        const element = format.elements[i];

        if (element.name === SEMANTIC_POSITION) {
          positions = new Float32Array(vb.lock(), element.offset);
          stride = element.stride / 4;
          break;
        }
      }

      const indices = [];
      mesh.getIndices(indices);
      const numTriangles = mesh.primitive[0].count / 3;
      const v1 = new Ammo.btVector3();
      const v2 = new Ammo.btVector3();
      const v3 = new Ammo.btVector3();
      let i1, i2, i3;
      const base = mesh.primitive[0].base;
      triMesh = new Ammo.btTriangleMesh();
      this.system._triMeshCache[mesh.id] = triMesh;

      for (let i = 0; i < numTriangles; i++) {
        i1 = indices[base + i * 3] * stride;
        i2 = indices[base + i * 3 + 1] * stride;
        i3 = indices[base + i * 3 + 2] * stride;
        v1.setValue(positions[i1], positions[i1 + 1], positions[i1 + 2]);
        v2.setValue(positions[i2], positions[i2 + 1], positions[i2 + 2]);
        v3.setValue(positions[i3], positions[i3 + 1], positions[i3 + 2]);
        triMesh.addTriangle(v1, v2, v3, true);
      }

      Ammo.destroy(v1);
      Ammo.destroy(v2);
      Ammo.destroy(v3);
    }

    const useQuantizedAabbCompression = true;
    const triMeshShape = new Ammo.btBvhTriangleMeshShape(triMesh, useQuantizedAabbCompression);

    const scaling = this.system._getNodeScaling(node);

    triMeshShape.setLocalScaling(scaling);
    Ammo.destroy(scaling);

    const transform = this.system._getNodeTransform(node);

    shape.addChildShape(transform, triMeshShape);
    Ammo.destroy(transform);
  }

  createPhysicalShape(entity, data) {
    if (typeof Ammo === 'undefined') return undefined;

    if (data.model || data.render) {
      const shape = new Ammo.btCompoundShape();

      if (data.model) {
        const meshInstances = data.model.meshInstances;

        for (let i = 0; i < meshInstances.length; i++) {
          this.createAmmoMesh(meshInstances[i].mesh, meshInstances[i].node, shape);
        }
      } else if (data.render) {
        const meshes = data.render.meshes;

        for (let i = 0; i < meshes.length; i++) {
          this.createAmmoMesh(meshes[i], tempGraphNode, shape);
        }
      }

      const entityTransform = entity.getWorldTransform();
      const scale = entityTransform.getScale();
      const vec = new Ammo.btVector3(scale.x, scale.y, scale.z);
      shape.setLocalScaling(vec);
      Ammo.destroy(vec);
      return shape;
    }

    return undefined;
  }

  recreatePhysicalShapes(component) {
    const data = component.data;

    if (data.renderAsset || data.asset) {
      if (component.enabled && component.entity.enabled) {
        this.loadAsset(component, data.renderAsset || data.asset, data.renderAsset ? 'render' : 'model');
        return;
      }
    }

    this.doRecreatePhysicalShape(component);
  }

  loadAsset(component, id, property) {
    const data = component.data;
    const assets = this.system.app.assets;
    const asset = assets.get(id);

    if (asset) {
      asset.ready(asset => {
        data[property] = asset.resource;
        this.doRecreatePhysicalShape(component);
      });
      assets.load(asset);
    } else {
      assets.once('add:' + id, asset => {
        asset.ready(asset => {
          data[property] = asset.resource;
          this.doRecreatePhysicalShape(component);
        });
        assets.load(asset);
      });
    }
  }

  doRecreatePhysicalShape(component) {
    const entity = component.entity;
    const data = component.data;

    if (data.model || data.render) {
      this.destroyShape(data);
      data.shape = this.createPhysicalShape(entity, data);

      if (entity.rigidbody) {
        entity.rigidbody.disableSimulation();
        entity.rigidbody.createBody();

        if (entity.enabled && entity.rigidbody.enabled) {
          entity.rigidbody.enableSimulation();
        }
      } else {
        if (!entity.trigger) {
          entity.trigger = new Trigger(this.system.app, component, data);
        } else {
          entity.trigger.initialize(data);
        }
      }
    } else {
      this.beforeRemove(entity, component);
      this.remove(entity, data);
    }
  }

  updateTransform(component, position, rotation, scale) {
    if (component.shape) {
      const entityTransform = component.entity.getWorldTransform();
      const worldScale = entityTransform.getScale();
      const previousScale = component.shape.getLocalScaling();

      if (worldScale.x !== previousScale.x() || worldScale.y !== previousScale.y() || worldScale.z !== previousScale.z()) {
        this.doRecreatePhysicalShape(component);
      }
    }

    super.updateTransform(component, position, rotation, scale);
  }

  destroyShape(data) {
    if (!data.shape) return;
    const numShapes = data.shape.getNumChildShapes();

    for (let i = 0; i < numShapes; i++) {
      const shape = data.shape.getChildShape(i);
      Ammo.destroy(shape);
    }

    Ammo.destroy(data.shape);
    data.shape = null;
  }

  remove(entity, data) {
    this.destroyShape(data);
    super.remove(entity, data);
  }

}

class CollisionCompoundSystemImpl extends CollisionSystemImpl {
  createPhysicalShape(entity, data) {
    if (typeof Ammo !== 'undefined') {
      return new Ammo.btCompoundShape();
    }

    return undefined;
  }

  _addEachDescendant(entity) {
    if (!entity.collision || entity.rigidbody) return;
    entity.collision._compoundParent = this;

    if (entity !== this.entity) {
      entity.collision.system.recreatePhysicalShapes(entity.collision);
    }
  }

  _updateEachDescendant(entity) {
    if (!entity.collision) return;
    if (entity.collision._compoundParent !== this) return;
    entity.collision._compoundParent = null;

    if (entity !== this.entity && !entity.rigidbody) {
      entity.collision.system.recreatePhysicalShapes(entity.collision);
    }
  }

  _updateEachDescendantTransform(entity) {
    if (!entity.collision || entity.collision._compoundParent !== this.collision._compoundParent) return;
    this.collision.system.updateCompoundChildTransform(entity);
  }

}

class CollisionComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'collision';
    this.ComponentType = CollisionComponent;
    this.DataType = CollisionComponentData;
    this.schema = _schema$g;
    this.implementations = {};
    this._triMeshCache = {};
    this.on('beforeremove', this.onBeforeRemove, this);
    this.on('remove', this.onRemove, this);
  }

  initializeComponentData(component, _data, properties) {
    properties = ['type', 'halfExtents', 'radius', 'axis', 'height', 'shape', 'model', 'asset', 'render', 'renderAsset', 'enabled'];
    const data = {};

    for (let i = 0, len = properties.length; i < len; i++) {
      const property = properties[i];
      data[property] = _data[property];
    }

    let idx;

    if (_data.hasOwnProperty('asset')) {
      idx = properties.indexOf('model');

      if (idx !== -1) {
        properties.splice(idx, 1);
      }

      idx = properties.indexOf('render');

      if (idx !== -1) {
        properties.splice(idx, 1);
      }
    } else if (_data.hasOwnProperty('model')) {
      idx = properties.indexOf('asset');

      if (idx !== -1) {
        properties.splice(idx, 1);
      }
    }

    if (!data.type) {
      data.type = component.data.type;
    }

    component.data.type = data.type;

    if (data.halfExtents && Array.isArray(data.halfExtents)) {
      data.halfExtents = new Vec3(data.halfExtents[0], data.halfExtents[1], data.halfExtents[2]);
    }

    const impl = this._createImplementation(data.type);

    impl.beforeInitialize(component, data);
    super.initializeComponentData(component, data, properties);
    impl.afterInitialize(component, data);
  }

  _createImplementation(type) {
    if (this.implementations[type] === undefined) {
      let impl;

      switch (type) {
        case 'box':
          impl = new CollisionBoxSystemImpl(this);
          break;

        case 'sphere':
          impl = new CollisionSphereSystemImpl(this);
          break;

        case 'capsule':
          impl = new CollisionCapsuleSystemImpl(this);
          break;

        case 'cylinder':
          impl = new CollisionCylinderSystemImpl(this);
          break;

        case 'cone':
          impl = new CollisionConeSystemImpl(this);
          break;

        case 'mesh':
          impl = new CollisionMeshSystemImpl(this);
          break;

        case 'compound':
          impl = new CollisionCompoundSystemImpl(this);
          break;
      }

      this.implementations[type] = impl;
    }

    return this.implementations[type];
  }

  _getImplementation(entity) {
    return this.implementations[entity.collision.data.type];
  }

  cloneComponent(entity, clone) {
    return this._getImplementation(entity).clone(entity, clone);
  }

  onBeforeRemove(entity, component) {
    this.implementations[component.data.type].beforeRemove(entity, component);
    component.onBeforeRemove();
  }

  onRemove(entity, data) {
    this.implementations[data.type].remove(entity, data);
  }

  updateCompoundChildTransform(entity) {
    this._removeCompoundChild(entity.collision._compoundParent, entity.collision.data.shape);

    if (entity.enabled && entity.collision.enabled) {
      const transform = this._getNodeTransform(entity, entity.collision._compoundParent.entity);

      entity.collision._compoundParent.shape.addChildShape(transform, entity.collision.data.shape);

      Ammo.destroy(transform);
    }
  }

  _removeCompoundChild(collision, shape) {
    if (collision.shape.removeChildShape) {
      collision.shape.removeChildShape(shape);
    } else {
      const ind = collision._getCompoundChildShapeIndex(shape);

      if (ind !== null) {
        collision.shape.removeChildShapeByIndex(ind);
      }
    }
  }

  onTransformChanged(component, position, rotation, scale) {
    this.implementations[component.data.type].updateTransform(component, position, rotation, scale);
  }

  changeType(component, previousType, newType) {
    this.implementations[previousType].beforeRemove(component.entity, component);
    this.implementations[previousType].remove(component.entity, component.data);

    this._createImplementation(newType).reset(component, component.data);
  }

  recreatePhysicalShapes(component) {
    this.implementations[component.data.type].recreatePhysicalShapes(component);
  }

  _calculateNodeRelativeTransform(node, relative) {
    if (node === relative) {
      const scale = node.getWorldTransform().getScale();
      mat4.setScale(scale.x, scale.y, scale.z);
    } else {
      this._calculateNodeRelativeTransform(node.parent, relative);

      mat4.mul(node.getLocalTransform());
    }
  }

  _getNodeScaling(node) {
    const wtm = node.getWorldTransform();
    const scl = wtm.getScale();
    return new Ammo.btVector3(scl.x, scl.y, scl.z);
  }

  _getNodeTransform(node, relative) {
    let pos, rot;

    if (relative) {
      this._calculateNodeRelativeTransform(node, relative);

      pos = vec3;
      rot = quat$1;
      mat4.getTranslation(pos);
      rot.setFromMat4(mat4);
    } else {
      pos = node.getPosition();
      rot = node.getRotation();
    }

    const transform = new Ammo.btTransform();
    transform.setIdentity();
    const origin = transform.getOrigin();
    origin.setValue(pos.x, pos.y, pos.z);
    const ammoQuat = new Ammo.btQuaternion();
    ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);
    transform.setRotation(ammoQuat);
    Ammo.destroy(ammoQuat);
    Ammo.destroy(origin);
    return transform;
  }

  destroy() {
    for (const key in this._triMeshCache) {
      Ammo.destroy(this._triMeshCache[key]);
    }

    this._triMeshCache = null;
    super.destroy();
  }

}

Component._buildAccessors(CollisionComponent.prototype, _schema$g);

class ImageRenderable {
  constructor(entity, mesh, material) {
    this._entity = entity;
    this._element = entity.element;
    this.model = new Model();
    this.node = new GraphNode();
    this.model.graph = this.node;
    this.mesh = mesh;
    this.meshInstance = new MeshInstance(this.mesh, material, this.node);
    this.meshInstance.name = 'ImageElement: ' + entity.name;
    this.meshInstance.castShadow = false;
    this.meshInstance.receiveShadow = false;
    this._meshDirty = false;
    this.model.meshInstances.push(this.meshInstance);

    this._entity.addChild(this.model.graph);

    this.model._entity = this._entity;
    this.unmaskMeshInstance = null;
  }

  destroy() {
    this.setMaterial(null);

    this._element.removeModelFromLayers(this.model);

    this.model.destroy();
    this.model = null;
    this.node = null;
    this.mesh = null;
    this.meshInstance = null;
    this._entity = null;
    this._element = null;
  }

  setMesh(mesh) {
    if (!this.meshInstance) return;
    this.mesh = mesh;
    this.meshInstance.mesh = mesh;
    this.meshInstance.visible = !!mesh;

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance.mesh = mesh;
    }

    this.forceUpdateAabb();
  }

  setMask(mask) {
    if (!this.meshInstance) return;

    if (mask) {
      this.unmaskMeshInstance = new MeshInstance(this.mesh, this.meshInstance.material, this.node);
      this.unmaskMeshInstance.name = 'Unmask: ' + this._entity.name;
      this.unmaskMeshInstance.castShadow = false;
      this.unmaskMeshInstance.receiveShadow = false;
      this.unmaskMeshInstance.pick = false;
      this.model.meshInstances.push(this.unmaskMeshInstance);

      for (const name in this.meshInstance.parameters) {
        this.unmaskMeshInstance.setParameter(name, this.meshInstance.parameters[name].data);
      }
    } else {
      const idx = this.model.meshInstances.indexOf(this.unmaskMeshInstance);

      if (idx >= 0) {
        this.model.meshInstances.splice(idx, 1);
      }

      this.unmaskMeshInstance = null;
    }

    if (this._entity.enabled && this._element.enabled) {
      this._element.removeModelFromLayers(this.model);

      this._element.addModelToLayers(this.model);
    }
  }

  setMaterial(material) {
    if (!this.meshInstance) return;
    this.meshInstance.material = material;

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance.material = material;
    }
  }

  setParameter(name, value) {
    if (!this.meshInstance) return;
    this.meshInstance.setParameter(name, value);

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance.setParameter(name, value);
    }
  }

  deleteParameter(name) {
    if (!this.meshInstance) return;
    this.meshInstance.deleteParameter(name);

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance.deleteParameter(name);
    }
  }

  setUnmaskDrawOrder() {
    if (!this.meshInstance) return;

    const getLastChild = function getLastChild(e) {
      let last;
      const c = e.children;
      const l = c.length;

      if (l) {
        for (let i = 0; i < l; i++) {
          if (c[i].element) {
            last = c[i];
          }
        }

        if (!last) return null;
        const child = getLastChild(last);

        if (child) {
          return child;
        }

        return last;
      }

      return null;
    };

    if (this.unmaskMeshInstance) {
      const lastChild = getLastChild(this._entity);

      if (lastChild && lastChild.element) {
        this.unmaskMeshInstance.drawOrder = lastChild.element.drawOrder + lastChild.element.getMaskOffset();
      } else {
        this.unmaskMeshInstance.drawOrder = this.meshInstance.drawOrder + this._element.getMaskOffset();
      }
    }
  }

  setDrawOrder(drawOrder) {
    if (!this.meshInstance) return;
    this.meshInstance.drawOrder = drawOrder;
  }

  setCull(cull) {
    if (!this.meshInstance) return;
    const element = this._element;
    let visibleFn = null;

    if (cull && element._isScreenSpace()) {
      visibleFn = function (camera) {
        return element.isVisibleForCamera(camera);
      };
    }

    this.meshInstance.cull = cull;
    this.meshInstance.isVisibleFunc = visibleFn;

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance.cull = cull;
      this.unmaskMeshInstance.isVisibleFunc = visibleFn;
    }
  }

  setScreenSpace(screenSpace) {
    if (!this.meshInstance) return;
    this.meshInstance.screenSpace = screenSpace;

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance.screenSpace = screenSpace;
    }
  }

  setLayer(layer) {
    if (!this.meshInstance) return;
    this.meshInstance.layer = layer;

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance.layer = layer;
    }
  }

  forceUpdateAabb(mask) {
    if (!this.meshInstance) return;
    this.meshInstance._aabbVer = -1;

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance._aabbVer = -1;
    }
  }

  setAabbFunc(fn) {
    if (!this.meshInstance) return;
    this.meshInstance._updateAabbFunc = fn;

    if (this.unmaskMeshInstance) {
      this.unmaskMeshInstance._updateAabbFunc = fn;
    }
  }

}

class ImageElement {
  constructor(element) {
    this._element = element;
    this._entity = element.entity;
    this._system = element.system;
    this._textureAsset = null;
    this._texture = null;
    this._materialAsset = null;
    this._material = null;
    this._spriteAsset = null;
    this._sprite = null;
    this._spriteFrame = 0;
    this._pixelsPerUnit = null;
    this._targetAspectRatio = -1;
    this._rect = new Vec4(0, 0, 1, 1);
    this._mask = false;
    this._maskRef = 0;
    this._outerScale = new Vec2();
    this._outerScaleUniform = new Float32Array(2);
    this._innerOffset = new Vec4();
    this._innerOffsetUniform = new Float32Array(4);
    this._atlasRect = new Vec4();
    this._atlasRectUniform = new Float32Array(4);
    this._defaultMesh = this._createMesh();
    this._renderable = new ImageRenderable(this._entity, this._defaultMesh, this._material);
    this._color = new Color(1, 1, 1, 1);
    this._colorUniform = new Float32Array([1, 1, 1]);

    this._renderable.setParameter('material_emissive', this._colorUniform);

    this._renderable.setParameter('material_opacity', 1);

    this._updateAabbFunc = this._updateAabb.bind(this);

    this._onScreenChange(this._element.screen);

    this._element.on('resize', this._onParentResizeOrPivotChange, this);

    this._element.on('set:pivot', this._onParentResizeOrPivotChange, this);

    this._element.on('screen:set:screenspace', this._onScreenSpaceChange, this);

    this._element.on('set:screen', this._onScreenChange, this);

    this._element.on('set:draworder', this._onDrawOrderChange, this);

    this._element.on('screen:set:resolution', this._onResolutionChange, this);
  }

  destroy() {
    this.textureAsset = null;
    this.spriteAsset = null;
    this.materialAsset = null;

    this._renderable.setMesh(this._defaultMesh);

    this._renderable.destroy();

    this._defaultMesh = null;

    this._element.off('resize', this._onParentResizeOrPivotChange, this);

    this._element.off('set:pivot', this._onParentResizeOrPivotChange, this);

    this._element.off('screen:set:screenspace', this._onScreenSpaceChange, this);

    this._element.off('set:screen', this._onScreenChange, this);

    this._element.off('set:draworder', this._onDrawOrderChange, this);

    this._element.off('screen:set:resolution', this._onResolutionChange, this);
  }

  _onResolutionChange(res) {}

  _onParentResizeOrPivotChange() {
    if (this._renderable.mesh) {
      this._updateMesh(this._renderable.mesh);
    }
  }

  _onScreenSpaceChange(value) {
    this._updateMaterial(value);
  }

  _onScreenChange(screen, previous) {
    if (screen) {
      this._updateMaterial(screen.screen.screenSpace);
    } else {
      this._updateMaterial(false);
    }
  }

  _onDrawOrderChange(order) {
    this._renderable.setDrawOrder(order);

    if (this.mask && this._element.screen) {
      this._element.screen.screen.once('syncdraworder', function () {
        this._renderable.setUnmaskDrawOrder();
      }, this);
    }
  }

  _hasUserMaterial() {
    return !!this._materialAsset || !!this._material && this._system.defaultImageMaterials.indexOf(this._material) === -1;
  }

  _use9Slicing() {
    return this.sprite && (this.sprite.renderMode === SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === SPRITE_RENDERMODE_TILED);
  }

  _updateMaterial(screenSpace) {
    const mask = !!this._mask;
    const nineSliced = !!(this.sprite && this.sprite.renderMode === SPRITE_RENDERMODE_SLICED);
    const nineTiled = !!(this.sprite && this.sprite.renderMode === SPRITE_RENDERMODE_TILED);

    if (!this._hasUserMaterial()) {
      this._material = this._system.getImageElementMaterial(screenSpace, mask, nineSliced, nineTiled);
    }

    if (this._renderable) {
      this._renderable.setCull(!this._element._isScreenSpace() || this._element._isScreenCulled());

      this._renderable.setMaterial(this._material);

      this._renderable.setScreenSpace(screenSpace);

      this._renderable.setLayer(screenSpace ? LAYER_HUD : LAYER_WORLD);
    }
  }

  _createMesh() {
    const element = this._element;
    const w = element.calculatedWidth;
    const h = element.calculatedHeight;
    const r = this._rect;
    const vertexData = new ArrayBuffer(4 * 8 * 4);
    const vertexDataF32 = new Float32Array(vertexData);
    vertexDataF32[5] = 1;
    vertexDataF32[6] = r.x;
    vertexDataF32[7] = 1.0 - r.y;
    vertexDataF32[8] = w;
    vertexDataF32[13] = 1;
    vertexDataF32[14] = r.x + r.z;
    vertexDataF32[15] = 1.0 - r.y;
    vertexDataF32[16] = w;
    vertexDataF32[17] = h;
    vertexDataF32[21] = 1;
    vertexDataF32[22] = r.x + r.z;
    vertexDataF32[23] = 1.0 - (r.y + r.w);
    vertexDataF32[25] = h;
    vertexDataF32[29] = 1;
    vertexDataF32[30] = r.x;
    vertexDataF32[31] = 1.0 - (r.y + r.w);
    const vertexDesc = [{
      semantic: SEMANTIC_POSITION,
      components: 3,
      type: TYPE_FLOAT32
    }, {
      semantic: SEMANTIC_NORMAL,
      components: 3,
      type: TYPE_FLOAT32
    }, {
      semantic: SEMANTIC_TEXCOORD0,
      components: 2,
      type: TYPE_FLOAT32
    }];
    const device = this._system.app.graphicsDevice;
    const vertexFormat = new VertexFormat(device, vertexDesc);
    const vertexBuffer = new VertexBuffer(device, vertexFormat, 4, BUFFER_STATIC, vertexData);
    const mesh = new Mesh(device);
    mesh.vertexBuffer = vertexBuffer;
    mesh.primitive[0].type = PRIMITIVE_TRIFAN;
    mesh.primitive[0].base = 0;
    mesh.primitive[0].count = 4;
    mesh.primitive[0].indexed = false;
    mesh.aabb.setMinMax(Vec3.ZERO, new Vec3(w, h, 0));

    this._updateMesh(mesh);

    return mesh;
  }

  _updateMesh(mesh) {
    const element = this._element;
    let w = element.calculatedWidth;
    let h = element.calculatedHeight;

    if (element.fitMode !== FITMODE_STRETCH && this._targetAspectRatio > 0) {
      const actualRatio = element.calculatedWidth / element.calculatedHeight;

      if (element.fitMode === FITMODE_CONTAIN && actualRatio > this._targetAspectRatio || element.fitMode === FITMODE_COVER && actualRatio < this._targetAspectRatio) {
        w = element.calculatedHeight * this._targetAspectRatio;
      } else {
        h = element.calculatedWidth / this._targetAspectRatio;
      }
    }

    const screenSpace = element._isScreenSpace();

    this._updateMaterial(screenSpace);

    if (this._renderable) this._renderable.forceUpdateAabb();

    if (this.sprite && (this.sprite.renderMode === SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === SPRITE_RENDERMODE_TILED)) {
      const frameData = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];
      const borderWidthScale = 2 / frameData.rect.z;
      const borderHeightScale = 2 / frameData.rect.w;

      this._innerOffset.set(frameData.border.x * borderWidthScale, frameData.border.y * borderHeightScale, frameData.border.z * borderWidthScale, frameData.border.w * borderHeightScale);

      const tex = this.sprite.atlas.texture;

      this._atlasRect.set(frameData.rect.x / tex.width, frameData.rect.y / tex.height, frameData.rect.z / tex.width, frameData.rect.w / tex.height);

      const ppu = this._pixelsPerUnit !== null ? this._pixelsPerUnit : this.sprite.pixelsPerUnit;
      const scaleMulX = frameData.rect.z / ppu;
      const scaleMulY = frameData.rect.w / ppu;

      this._outerScale.set(Math.max(w, this._innerOffset.x * scaleMulX), Math.max(h, this._innerOffset.y * scaleMulY));

      let scaleX = scaleMulX;
      let scaleY = scaleMulY;
      this._outerScale.x /= scaleMulX;
      this._outerScale.y /= scaleMulY;
      scaleX *= math$1.clamp(w / (this._innerOffset.x * scaleMulX), 0.0001, 1);
      scaleY *= math$1.clamp(h / (this._innerOffset.y * scaleMulY), 0.0001, 1);

      if (this._renderable) {
        this._innerOffsetUniform[0] = this._innerOffset.x;
        this._innerOffsetUniform[1] = this._innerOffset.y;
        this._innerOffsetUniform[2] = this._innerOffset.z;
        this._innerOffsetUniform[3] = this._innerOffset.w;

        this._renderable.setParameter('innerOffset', this._innerOffsetUniform);

        this._atlasRectUniform[0] = this._atlasRect.x;
        this._atlasRectUniform[1] = this._atlasRect.y;
        this._atlasRectUniform[2] = this._atlasRect.z;
        this._atlasRectUniform[3] = this._atlasRect.w;

        this._renderable.setParameter('atlasRect', this._atlasRectUniform);

        this._outerScaleUniform[0] = this._outerScale.x;
        this._outerScaleUniform[1] = this._outerScale.y;

        this._renderable.setParameter('outerScale', this._outerScaleUniform);

        this._renderable.setAabbFunc(this._updateAabbFunc);

        this._renderable.node.setLocalScale(scaleX, scaleY, 1);

        this._renderable.node.setLocalPosition((0.5 - element.pivot.x) * w, (0.5 - element.pivot.y) * h, 0);
      }
    } else {
      const vb = mesh.vertexBuffer;
      const vertexDataF32 = new Float32Array(vb.lock());
      const hp = element.pivot.x;
      const vp = element.pivot.y;
      vertexDataF32[0] = 0 - hp * w;
      vertexDataF32[1] = 0 - vp * h;
      vertexDataF32[8] = w - hp * w;
      vertexDataF32[9] = 0 - vp * h;
      vertexDataF32[16] = w - hp * w;
      vertexDataF32[17] = h - vp * h;
      vertexDataF32[24] = 0 - hp * w;
      vertexDataF32[25] = h - vp * h;
      let atlasTextureWidth = 1;
      let atlasTextureHeight = 1;
      let rect = this._rect;

      if (this._sprite && this._sprite.frameKeys[this._spriteFrame] && this._sprite.atlas) {
        const frame = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];

        if (frame) {
          rect = frame.rect;
          atlasTextureWidth = this._sprite.atlas.texture.width;
          atlasTextureHeight = this._sprite.atlas.texture.height;
        }
      }

      vertexDataF32[6] = rect.x / atlasTextureWidth;
      vertexDataF32[7] = 1.0 - rect.y / atlasTextureHeight;
      vertexDataF32[14] = (rect.x + rect.z) / atlasTextureWidth;
      vertexDataF32[15] = 1.0 - rect.y / atlasTextureHeight;
      vertexDataF32[22] = (rect.x + rect.z) / atlasTextureWidth;
      vertexDataF32[23] = 1.0 - (rect.y + rect.w) / atlasTextureHeight;
      vertexDataF32[30] = rect.x / atlasTextureWidth;
      vertexDataF32[31] = 1.0 - (rect.y + rect.w) / atlasTextureHeight;
      vb.unlock();
      const min = new Vec3(0 - hp * w, 0 - vp * h, 0);
      const max = new Vec3(w - hp * w, h - vp * h, 0);
      mesh.aabb.setMinMax(min, max);

      if (this._renderable) {
        this._renderable.node.setLocalScale(1, 1, 1);

        this._renderable.node.setLocalPosition(0, 0, 0);

        this._renderable.setAabbFunc(null);
      }
    }

    this._meshDirty = false;
  }

  _updateSprite() {
    let nineSlice = false;
    let mesh = null;
    this._targetAspectRatio = -1;

    if (this._sprite && this._sprite.atlas) {
      mesh = this._sprite.meshes[this.spriteFrame];
      nineSlice = this._sprite.renderMode === SPRITE_RENDERMODE_SLICED || this._sprite.renderMode === SPRITE_RENDERMODE_TILED;
      const frameData = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];

      if ((frameData == null ? void 0 : frameData.rect.w) > 0) {
        this._targetAspectRatio = frameData.rect.z / frameData.rect.w;
      }
    }

    this.mesh = nineSlice ? mesh : this._defaultMesh;
    this.refreshMesh();
  }

  refreshMesh() {
    if (this.mesh) {
      if (!this._element._beingInitialized) {
        this._updateMesh(this.mesh);
      } else {
        this._meshDirty = true;
      }
    }
  }

  _updateAabb(aabb) {
    aabb.center.set(0, 0, 0);
    aabb.halfExtents.set(this._outerScale.x * 0.5, this._outerScale.y * 0.5, 0.001);
    aabb.setFromTransformedAabb(aabb, this._renderable.node.getWorldTransform());
    return aabb;
  }

  _toggleMask() {
    this._element._dirtifyMask();

    const screenSpace = this._element._isScreenSpace();

    this._updateMaterial(screenSpace);

    this._renderable.setMask(!!this._mask);
  }

  _onMaterialLoad(asset) {
    this.material = asset.resource;
  }

  _onMaterialAdded(asset) {
    this._system.app.assets.off('add:' + asset.id, this._onMaterialAdded, this);

    if (this._materialAsset === asset.id) {
      this._bindMaterialAsset(asset);
    }
  }

  _bindMaterialAsset(asset) {
    if (!this._entity.enabled) return;
    asset.on('load', this._onMaterialLoad, this);
    asset.on('change', this._onMaterialChange, this);
    asset.on('remove', this._onMaterialRemove, this);

    if (asset.resource) {
      this._onMaterialLoad(asset);
    } else {
      this._system.app.assets.load(asset);
    }
  }

  _unbindMaterialAsset(asset) {
    asset.off('load', this._onMaterialLoad, this);
    asset.off('change', this._onMaterialChange, this);
    asset.off('remove', this._onMaterialRemove, this);
  }

  _onMaterialChange() {}

  _onMaterialRemove() {}

  _onTextureAdded(asset) {
    this._system.app.assets.off('add:' + asset.id, this._onTextureAdded, this);

    if (this._textureAsset === asset.id) {
      this._bindTextureAsset(asset);
    }
  }

  _bindTextureAsset(asset) {
    if (!this._entity.enabled) return;
    asset.on('load', this._onTextureLoad, this);
    asset.on('change', this._onTextureChange, this);
    asset.on('remove', this._onTextureRemove, this);

    if (asset.resource) {
      this._onTextureLoad(asset);
    } else {
      this._system.app.assets.load(asset);
    }
  }

  _unbindTextureAsset(asset) {
    asset.off('load', this._onTextureLoad, this);
    asset.off('change', this._onTextureChange, this);
    asset.off('remove', this._onTextureRemove, this);
  }

  _onTextureLoad(asset) {
    this.texture = asset.resource;
  }

  _onTextureChange(asset) {}

  _onTextureRemove(asset) {}

  _onSpriteAssetAdded(asset) {
    this._system.app.assets.off('add:' + asset.id, this._onSpriteAssetAdded, this);

    if (this._spriteAsset === asset.id) {
      this._bindSpriteAsset(asset);
    }
  }

  _bindSpriteAsset(asset) {
    if (!this._entity.enabled) return;
    asset.on('load', this._onSpriteAssetLoad, this);
    asset.on('change', this._onSpriteAssetChange, this);
    asset.on('remove', this._onSpriteAssetRemove, this);

    if (asset.resource) {
      this._onSpriteAssetLoad(asset);
    } else {
      this._system.app.assets.load(asset);
    }
  }

  _unbindSpriteAsset(asset) {
    asset.off('load', this._onSpriteAssetLoad, this);
    asset.off('change', this._onSpriteAssetChange, this);
    asset.off('remove', this._onSpriteAssetRemove, this);

    if (asset.data.textureAtlasAsset) {
      this._system.app.assets.off('load:' + asset.data.textureAtlasAsset, this._onTextureAtlasLoad, this);
    }
  }

  _onSpriteAssetLoad(asset) {
    if (!asset || !asset.resource) {
      this.sprite = null;
    } else {
      if (!asset.resource.atlas) {
        const atlasAssetId = asset.data.textureAtlasAsset;

        if (atlasAssetId) {
          const assets = this._system.app.assets;
          assets.off('load:' + atlasAssetId, this._onTextureAtlasLoad, this);
          assets.once('load:' + atlasAssetId, this._onTextureAtlasLoad, this);
        }
      } else {
        this.sprite = asset.resource;
      }
    }
  }

  _onSpriteAssetChange(asset) {
    this._onSpriteAssetLoad(asset);
  }

  _onSpriteAssetRemove(asset) {}

  _bindSprite(sprite) {
    sprite.on('set:meshes', this._onSpriteMeshesChange, this);
    sprite.on('set:pixelsPerUnit', this._onSpritePpuChange, this);
    sprite.on('set:atlas', this._onAtlasTextureChange, this);

    if (sprite.atlas) {
      sprite.atlas.on('set:texture', this._onAtlasTextureChange, this);
    }
  }

  _unbindSprite(sprite) {
    sprite.off('set:meshes', this._onSpriteMeshesChange, this);
    sprite.off('set:pixelsPerUnit', this._onSpritePpuChange, this);
    sprite.off('set:atlas', this._onAtlasTextureChange, this);

    if (sprite.atlas) {
      sprite.atlas.off('set:texture', this._onAtlasTextureChange, this);
    }
  }

  _onSpriteMeshesChange() {
    if (this._sprite) {
      this._spriteFrame = math$1.clamp(this._spriteFrame, 0, this._sprite.frameKeys.length - 1);
    }

    this._updateSprite();
  }

  _onSpritePpuChange() {
    if (this.sprite.renderMode !== SPRITE_RENDERMODE_SIMPLE && this._pixelsPerUnit === null) {
      this._updateSprite();
    }
  }

  _onAtlasTextureChange() {
    if (this.sprite && this.sprite.atlas && this.sprite.atlas.texture) {
      this._renderable.setParameter('texture_emissiveMap', this._sprite.atlas.texture);

      this._renderable.setParameter('texture_opacityMap', this._sprite.atlas.texture);
    } else {
      this._renderable.deleteParameter('texture_emissiveMap');

      this._renderable.deleteParameter('texture_opacityMap');
    }
  }

  _onTextureAtlasLoad(atlasAsset) {
    const spriteAsset = this._spriteAsset;

    if (spriteAsset instanceof Asset) {
      this._onSpriteAssetLoad(spriteAsset);
    } else {
      this._onSpriteAssetLoad(this._system.app.assets.get(spriteAsset));
    }
  }

  onEnable() {
    if (this._materialAsset) {
      const asset = this._system.app.assets.get(this._materialAsset);

      if (asset && asset.resource !== this._material) {
        this._bindMaterialAsset(asset);
      }
    }

    if (this._textureAsset) {
      const asset = this._system.app.assets.get(this._textureAsset);

      if (asset && asset.resource !== this._texture) {
        this._bindTextureAsset(asset);
      }
    }

    if (this._spriteAsset) {
      const asset = this._system.app.assets.get(this._spriteAsset);

      if (asset && asset.resource !== this._sprite) {
        this._bindSpriteAsset(asset);
      }
    }

    this._element.addModelToLayers(this._renderable.model);
  }

  onDisable() {
    this._element.removeModelFromLayers(this._renderable.model);
  }

  _setStencil(stencilParams) {
    this._renderable.meshInstance.stencilFront = stencilParams;
    this._renderable.meshInstance.stencilBack = stencilParams;
    let ref = 0;

    if (this._element.maskedBy) {
      ref = this._element.maskedBy.element._image._maskRef;
    }

    if (this._renderable.unmaskMeshInstance) {
      const sp = new StencilParameters({
        ref: ref + 1,
        func: FUNC_EQUAL,
        zpass: STENCILOP_DECREMENT
      });
      this._renderable.unmaskMeshInstance.stencilFront = sp;
      this._renderable.unmaskMeshInstance.stencilBack = sp;
    }
  }

  set color(value) {
    const r = value.r;
    const g = value.g;
    const b = value.b;

    if (this._color.r !== r || this._color.g !== g || this._color.b !== b) {
      this._color.r = r;
      this._color.g = g;
      this._color.b = b;
      this._colorUniform[0] = r;
      this._colorUniform[1] = g;
      this._colorUniform[2] = b;

      this._renderable.setParameter('material_emissive', this._colorUniform);
    }

    if (this._element) {
      this._element.fire('set:color', this._color);
    }
  }

  get color() {
    return this._color;
  }

  set opacity(value) {
    if (value !== this._color.a) {
      this._color.a = value;

      this._renderable.setParameter('material_opacity', value);
    }

    if (this._element) {
      this._element.fire('set:opacity', value);
    }
  }

  get opacity() {
    return this._color.a;
  }

  set rect(value) {
    let x, y, z, w;

    if (value instanceof Vec4) {
      x = value.x;
      y = value.y;
      z = value.z;
      w = value.w;
    } else {
      x = value[0];
      y = value[1];
      z = value[2];
      w = value[3];
    }

    if (x === this._rect.x && y === this._rect.y && z === this._rect.z && w === this._rect.w) {
      return;
    }

    this._rect.set(x, y, z, w);

    if (this._renderable.mesh) {
      if (!this._element._beingInitialized) {
        this._updateMesh(this._renderable.mesh);
      } else {
        this._meshDirty = true;
      }
    }
  }

  get rect() {
    return this._rect;
  }

  set material(value) {
    if (this._material === value) return;

    if (!value) {
      const screenSpace = this._element._isScreenSpace();

      if (this.mask) {
        value = screenSpace ? this._system.defaultScreenSpaceImageMaskMaterial : this._system.defaultImageMaskMaterial;
      } else {
        value = screenSpace ? this._system.defaultScreenSpaceImageMaterial : this._system.defaultImageMaterial;
      }
    }

    this._material = value;

    if (value) {
      this._renderable.setMaterial(value);

      if (this._hasUserMaterial()) {
        this._renderable.deleteParameter('material_opacity');

        this._renderable.deleteParameter('material_emissive');
      } else {
        this._colorUniform[0] = this._color.r;
        this._colorUniform[1] = this._color.g;
        this._colorUniform[2] = this._color.b;

        this._renderable.setParameter('material_emissive', this._colorUniform);

        this._renderable.setParameter('material_opacity', this._color.a);
      }
    }
  }

  get material() {
    return this._material;
  }

  set materialAsset(value) {
    const assets = this._system.app.assets;
    let _id = value;

    if (value instanceof Asset) {
      _id = value.id;
    }

    if (this._materialAsset !== _id) {
      if (this._materialAsset) {
        assets.off('add:' + this._materialAsset, this._onMaterialAdded, this);

        const _prev = assets.get(this._materialAsset);

        if (_prev) {
          _prev.off('load', this._onMaterialLoad, this);

          _prev.off('change', this._onMaterialChange, this);

          _prev.off('remove', this._onMaterialRemove, this);
        }
      }

      this._materialAsset = _id;

      if (this._materialAsset) {
        const asset = assets.get(this._materialAsset);

        if (!asset) {
          this.material = null;
          assets.on('add:' + this._materialAsset, this._onMaterialAdded, this);
        } else {
          this._bindMaterialAsset(asset);
        }
      } else {
        this.material = null;
      }
    }
  }

  get materialAsset() {
    return this._materialAsset;
  }

  set texture(value) {
    if (this._texture === value) return;

    if (this._textureAsset) {
      const textureAsset = this._system.app.assets.get(this._textureAsset);

      if (textureAsset && textureAsset.resource !== value) {
        this.textureAsset = null;
      }
    }

    this._texture = value;

    if (value) {
      if (this._spriteAsset) {
        this.spriteAsset = null;
      }

      this._renderable.setParameter('texture_emissiveMap', this._texture);

      this._renderable.setParameter('texture_opacityMap', this._texture);

      this._colorUniform[0] = this._color.r;
      this._colorUniform[1] = this._color.g;
      this._colorUniform[2] = this._color.b;

      this._renderable.setParameter('material_emissive', this._colorUniform);

      this._renderable.setParameter('material_opacity', this._color.a);

      const newAspectRatio = this._texture.width / this._texture.height;

      if (newAspectRatio !== this._targetAspectRatio) {
        this._targetAspectRatio = newAspectRatio;

        if (this._element.fitMode !== FITMODE_STRETCH) {
          this.refreshMesh();
        }
      }
    } else {
      this._renderable.deleteParameter('texture_emissiveMap');

      this._renderable.deleteParameter('texture_opacityMap');

      this._targetAspectRatio = -1;

      if (this._element.fitMode !== FITMODE_STRETCH) {
        this.refreshMesh();
      }
    }
  }

  get texture() {
    return this._texture;
  }

  set textureAsset(value) {
    const assets = this._system.app.assets;
    let _id = value;

    if (value instanceof Asset) {
      _id = value.id;
    }

    if (this._textureAsset !== _id) {
      if (this._textureAsset) {
        assets.off('add:' + this._textureAsset, this._onTextureAdded, this);

        const _prev = assets.get(this._textureAsset);

        if (_prev) {
          _prev.off('load', this._onTextureLoad, this);

          _prev.off('change', this._onTextureChange, this);

          _prev.off('remove', this._onTextureRemove, this);
        }
      }

      this._textureAsset = _id;

      if (this._textureAsset) {
        const asset = assets.get(this._textureAsset);

        if (!asset) {
          this.texture = null;
          assets.on('add:' + this._textureAsset, this._onTextureAdded, this);
        } else {
          this._bindTextureAsset(asset);
        }
      } else {
        this.texture = null;
      }
    }
  }

  get textureAsset() {
    return this._textureAsset;
  }

  set spriteAsset(value) {
    const assets = this._system.app.assets;
    let _id = value;

    if (value instanceof Asset) {
      _id = value.id;
    }

    if (this._spriteAsset !== _id) {
      if (this._spriteAsset) {
        assets.off('add:' + this._spriteAsset, this._onSpriteAssetAdded, this);

        const _prev = assets.get(this._spriteAsset);

        if (_prev) {
          this._unbindSpriteAsset(_prev);
        }
      }

      this._spriteAsset = _id;

      if (this._spriteAsset) {
        const asset = assets.get(this._spriteAsset);

        if (!asset) {
          this.sprite = null;
          assets.on('add:' + this._spriteAsset, this._onSpriteAssetAdded, this);
        } else {
          this._bindSpriteAsset(asset);
        }
      } else {
        this.sprite = null;
      }
    }

    if (this._element) {
      this._element.fire('set:spriteAsset', _id);
    }
  }

  get spriteAsset() {
    return this._spriteAsset;
  }

  set sprite(value) {
    if (this._sprite === value) return;

    if (this._sprite) {
      this._unbindSprite(this._sprite);
    }

    if (this._spriteAsset) {
      const spriteAsset = this._system.app.assets.get(this._spriteAsset);

      if (spriteAsset && spriteAsset.resource !== value) {
        this.spriteAsset = null;
      }
    }

    this._sprite = value;

    if (this._sprite) {
      this._bindSprite(this._sprite);

      if (this._textureAsset) {
        this.textureAsset = null;
      }
    }

    if (this._sprite && this._sprite.atlas && this._sprite.atlas.texture) {
      this._renderable.setParameter('texture_emissiveMap', this._sprite.atlas.texture);

      this._renderable.setParameter('texture_opacityMap', this._sprite.atlas.texture);
    } else {
      this._renderable.deleteParameter('texture_emissiveMap');

      this._renderable.deleteParameter('texture_opacityMap');
    }

    if (this._sprite) {
      this._spriteFrame = math$1.clamp(this._spriteFrame, 0, this._sprite.frameKeys.length - 1);
    }

    this._updateSprite();
  }

  get sprite() {
    return this._sprite;
  }

  set spriteFrame(value) {
    const oldValue = this._spriteFrame;

    if (this._sprite) {
      this._spriteFrame = math$1.clamp(value, 0, this._sprite.frameKeys.length - 1);
    } else {
      this._spriteFrame = value;
    }

    if (this._spriteFrame !== oldValue) {
      this._updateSprite();
    }

    if (this._element) {
      this._element.fire('set:spriteFrame', value);
    }
  }

  get spriteFrame() {
    return this._spriteFrame;
  }

  set mesh(value) {
    this._renderable.setMesh(value);

    if (this._defaultMesh === value) {
      this._renderable.setAabbFunc(null);
    } else {
      this._renderable.setAabbFunc(this._updateAabbFunc);
    }
  }

  get mesh() {
    return this._renderable.mesh;
  }

  set mask(value) {
    if (this._mask !== value) {
      this._mask = value;

      this._toggleMask();
    }
  }

  get mask() {
    return this._mask;
  }

  set pixelsPerUnit(value) {
    if (this._pixelsPerUnit === value) return;
    this._pixelsPerUnit = value;

    if (this._sprite && (this._sprite.renderMode === SPRITE_RENDERMODE_SLICED || this._sprite.renderMode === SPRITE_RENDERMODE_TILED)) {
      this._updateSprite();
    }
  }

  get pixelsPerUnit() {
    return this._pixelsPerUnit;
  }

  get aabb() {
    if (this._renderable.meshInstance) {
      return this._renderable.meshInstance.aabb;
    }

    return null;
  }

}

const EOF_TOKEN = 0;
const ERROR_TOKEN = 1;
const TEXT_TOKEN = 2;
const OPEN_BRACKET_TOKEN = 3;
const CLOSE_BRACKET_TOKEN = 4;
const EQUALS_TOKEN = 5;
const STRING_TOKEN = 6;
const IDENTIFIER_TOKEN = 7;
const WHITESPACE_TOKEN = 8;
const WHITESPACE_CHARS = ' \t\n\r\v\f';
const IDENTIFIER_REGEX = /[A-Z|a-z|0-9|_|-|/]/;

class Scanner {
  constructor(symbols) {
    this._symbols = symbols;
    this._index = 0;
    this._last = 0;
    this._cur = this._symbols.length > 0 ? this._symbols[0] : null;
    this._buf = [];
    this._mode = 'text';
    this._error = null;
  }

  read() {
    let token = this._read();

    while (token === WHITESPACE_TOKEN) {
      token = this._read();
    }

    if (token !== EOF_TOKEN && token !== ERROR_TOKEN) {
      this._last = this._index;
    }

    return token;
  }

  buf() {
    return this._buf;
  }

  last() {
    return this._last;
  }

  error() {
    return this._error;
  }

  debugPrint() {
    const tokenStrings = ['EOF', 'ERROR', 'TEXT', 'OPEN_BRACKET', 'CLOSE_BRACKET', 'EQUALS', 'STRING', 'IDENTIFIER', 'WHITESPACE'];
    let token = this.read();
    let result = '';

    while (true) {
      result += (result.length > 0 ? '\n' : '') + tokenStrings[token] + ' \'' + this.buf().join('') + '\'';

      if (token === EOF_TOKEN || token === ERROR_TOKEN) {
        break;
      }

      token = this.read();
    }

    return result;
  }

  _read() {
    this._buf = [];

    if (this._eof()) {
      return EOF_TOKEN;
    }

    return this._mode === 'text' ? this._text() : this._tag();
  }

  _text() {
    while (true) {
      switch (this._cur) {
        case null:
          return this._buf.length > 0 ? TEXT_TOKEN : EOF_TOKEN;

        case '[':
          this._mode = 'tag';
          return this._buf.length > 0 ? TEXT_TOKEN : this._tag();

        case '\\':
          this._next();

          switch (this._cur) {
            case '[':
              this._store();

              break;

            default:
              this._output('\\');

              break;
          }

          break;

        default:
          this._store();

          break;
      }
    }
  }

  _tag() {
    switch (this._cur) {
      case null:
        this._error = 'unexpected end of input reading tag';
        return ERROR_TOKEN;

      case '[':
        this._store();

        return OPEN_BRACKET_TOKEN;

      case ']':
        this._store();

        this._mode = 'text';
        return CLOSE_BRACKET_TOKEN;

      case '=':
        this._store();

        return EQUALS_TOKEN;

      case ' ':
      case '\t':
      case '\n':
      case '\r':
      case '\v':
      case '\f':
        return this._whitespace();

      case '"':
        return this._string();

      default:
        if (!this._isIdentifierSymbol(this._cur)) {
          this._error = 'unrecognized character';
          return ERROR_TOKEN;
        }

        return this._identifier();
    }
  }

  _whitespace() {
    this._store();

    while (WHITESPACE_CHARS.indexOf(this._cur) !== -1) {
      this._store();
    }

    return WHITESPACE_TOKEN;
  }

  _string() {
    this._next();

    while (true) {
      switch (this._cur) {
        case null:
          this._error = 'unexpected end of input reading string';
          return ERROR_TOKEN;

        case '"':
          this._next();

          return STRING_TOKEN;

        default:
          this._store();

          break;
      }
    }
  }

  _identifier() {
    this._store();

    while (this._cur !== null && this._isIdentifierSymbol(this._cur)) {
      this._store();
    }

    return IDENTIFIER_TOKEN;
  }

  _isIdentifierSymbol(s) {
    return s.length === 1 && s.match(IDENTIFIER_REGEX) !== null;
  }

  _eof() {
    return this._cur === null;
  }

  _next() {
    if (!this._eof()) {
      this._index++;
      this._cur = this._index < this._symbols.length ? this._symbols[this._index] : null;
    }

    return this._cur;
  }

  _store() {
    this._buf.push(this._cur);

    return this._next();
  }

  _output(c) {
    this._buf.push(c);
  }

}

class Parser {
  constructor(symbols) {
    this._scanner = new Scanner(symbols);
    this._error = null;
  }

  parse(symbols, tags) {
    while (true) {
      const token = this._scanner.read();

      switch (token) {
        case EOF_TOKEN:
          return true;

        case ERROR_TOKEN:
          return false;

        case TEXT_TOKEN:
          Array.prototype.push.apply(symbols, this._scanner.buf());
          break;

        case OPEN_BRACKET_TOKEN:
          if (!this._parseTag(symbols, tags)) {
            return false;
          }

          break;

        default:
          return false;
      }
    }
  }

  error() {
    return 'Error evaluating markup at #' + this._scanner.last().toString() + ' (' + (this._scanner.error() || this._error) + ')';
  }

  _parseTag(symbols, tags) {
    let token = this._scanner.read();

    if (token !== IDENTIFIER_TOKEN) {
      this._error = 'expected identifier';
      return false;
    }

    const name = this._scanner.buf().join('');

    if (name[0] === '/') {
      for (let index = tags.length - 1; index >= 0; --index) {
        if (name === '/' + tags[index].name && tags[index].end === null) {
          tags[index].end = symbols.length;
          token = this._scanner.read();

          if (token !== CLOSE_BRACKET_TOKEN) {
            this._error = 'expected close bracket';
            return false;
          }

          return true;
        }
      }

      this._error = 'failed to find matching tag';
      return false;
    }

    const tag = {
      name: name,
      value: null,
      attributes: {},
      start: symbols.length,
      end: null
    };
    token = this._scanner.read();

    if (token === EQUALS_TOKEN) {
      token = this._scanner.read();

      if (token !== STRING_TOKEN) {
        this._error = 'expected string';
        return false;
      }

      tag.value = this._scanner.buf().join('');
      token = this._scanner.read();
    }

    while (true) {
      switch (token) {
        case CLOSE_BRACKET_TOKEN:
          tags.push(tag);
          return true;

        case IDENTIFIER_TOKEN:
          {
            const identifier = this._scanner.buf().join('');

            token = this._scanner.read();

            if (token !== EQUALS_TOKEN) {
              this._error = 'expected equals';
              return false;
            }

            token = this._scanner.read();

            if (token !== STRING_TOKEN) {
              this._error = 'expected string';
              return false;
            }

            const value = this._scanner.buf().join('');

            tag.attributes[identifier] = value;
            break;
          }

        default:
          this._error = 'expected close bracket or identifier';
          return false;
      }

      token = this._scanner.read();
    }
  }

}

function merge(target, source) {
  for (const key in source) {
    if (!source.hasOwnProperty(key)) {
      continue;
    }

    const value = source[key];

    if (value instanceof Object) {
      if (!target.hasOwnProperty(key)) {
        target[key] = {};
      }

      merge(target[key], source[key]);
    } else {
      target[key] = value;
    }
  }
}

function combineTags(tags) {
  if (tags.length === 0) {
    return null;
  }

  const result = {};

  for (let index = 0; index < tags.length; ++index) {
    const tag = tags[index];
    const tmp = {};
    tmp[tag.name] = {
      value: tag.value,
      attributes: tag.attributes
    };
    merge(result, tmp);
  }

  return result;
}

function resolveMarkupTags(tags, numSymbols) {
  if (tags.length === 0) {
    return null;
  }

  const edges = {};

  for (let index = 0; index < tags.length; ++index) {
    const tag = tags[index];

    if (!edges.hasOwnProperty(tag.start)) {
      edges[tag.start] = {
        open: [tag],
        close: null
      };
    } else {
      if (edges[tag.start].open === null) {
        edges[tag.start].open = [tag];
      } else {
        edges[tag.start].open.push(tag);
      }
    }

    if (!edges.hasOwnProperty(tag.end)) {
      edges[tag.end] = {
        open: null,
        close: [tag]
      };
    } else {
      if (edges[tag.end].close === null) {
        edges[tag.end].close = [tag];
      } else {
        edges[tag.end].close.push(tag);
      }
    }
  }

  let tagStack = [];

  function removeTags(tags) {
    tagStack = tagStack.filter(function (tag) {
      return tags.find(function (t) {
        return t === tag;
      }) === undefined;
    });
  }

  function addTags(tags) {
    for (let index = 0; index < tags.length; ++index) {
      tagStack.push(tags[index]);
    }
  }

  const edgeKeys = Object.keys(edges).sort(function (a, b) {
    return a - b;
  });
  const resolvedTags = [];

  for (let index = 0; index < edgeKeys.length; ++index) {
    const edge = edges[edgeKeys[index]];

    if (edge.close !== null) {
      removeTags(edge.close);
    }

    if (edge.open !== null) {
      addTags(edge.open);
    }

    resolvedTags.push({
      start: edgeKeys[index],
      tags: combineTags(tagStack)
    });
  }

  const result = [];
  let prevTag = null;

  for (let index = 0; index < resolvedTags.length; ++index) {
    const resolvedTag = resolvedTags[index];

    while (result.length < resolvedTag.start) {
      result.push(prevTag ? prevTag.tags : null);
    }

    prevTag = resolvedTag;
  }

  while (result.length < numSymbols) {
    result.push(null);
  }

  return result;
}

function evaluateMarkup(symbols) {
  const parser = new Parser(symbols);
  const stripped_symbols = [];
  const tags = [];

  if (!parser.parse(stripped_symbols, tags)) {
    console.warn(parser.error());
    return {
      symbols: symbols,
      tags: null
    };
  }

  const invalidTag = tags.find(function (t) {
    return t.end === null;
  });

  if (invalidTag) {
    console.warn(`Markup error: found unclosed tag='${invalidTag.name}'`);
    return {
      symbols: symbols,
      tags: null
    };
  }

  const resolved_tags = resolveMarkupTags(tags, stripped_symbols.length);
  return {
    symbols: stripped_symbols,
    tags: resolved_tags
  };
}

class Markup {
  static evaluate(symbols) {
    return evaluateMarkup(symbols);
  }

}

class MeshInfo {
  constructor() {
    this.count = 0;
    this.quad = 0;
    this.lines = {};
    this.positions = [];
    this.normals = [];
    this.uvs = [];
    this.colors = [];
    this.indices = [];
    this.outlines = [];
    this.shadows = [];
    this.meshInstance = null;
  }

}

function createTextMesh(device, meshInfo) {
  const mesh = new Mesh(device);
  mesh.setPositions(meshInfo.positions);
  mesh.setNormals(meshInfo.normals);
  mesh.setColors32(meshInfo.colors);
  mesh.setUvs(0, meshInfo.uvs);
  mesh.setIndices(meshInfo.indices);
  mesh.setVertexStream(SEMANTIC_ATTR8, meshInfo.outlines, 3, undefined, TYPE_FLOAT32, false);
  mesh.setVertexStream(SEMANTIC_ATTR9, meshInfo.shadows, 3, undefined, TYPE_FLOAT32, false);
  mesh.update();
  return mesh;
}

const LINE_BREAK_CHAR = /^[\r\n]$/;
const WHITESPACE_CHAR = /^[ \t]$/;
const WORD_BOUNDARY_CHAR = /^[ \t\-]|[\u200b]$/;
const ALPHANUMERIC_CHAR = /^[a-z0-9]$/i;
const CJK_CHAR = /^[\u1100-\u11ff]|[\u3000-\u9fff]|[\ua960-\ua97f]|[\uac00-\ud7ff]$/;
const NO_LINE_BREAK_CJK_CHAR = /^[〕〉》」』】〙〗〟ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻]$/;
const CONTROL_CHARS = ['\u200B', '\u061C', '\u200E', '\u200F', '\u202A', '\u202B', '\u202C', '\u202D', '\u202E', '\u2066', '\u2067', '\u2068', '\u2069'];
const CONTROL_GLYPH_DATA = {
  width: 0,
  height: 0,
  xadvance: 0,
  xoffset: 0,
  yoffset: 0
};
const colorTmp = new Color();
const vec2Tmp = new Vec2();

class TextElement {
  constructor(element) {
    this._element = element;
    this._system = element.system;
    this._entity = element.entity;
    this._text = '';
    this._symbols = [];
    this._colorPalette = [];
    this._outlinePalette = [];
    this._shadowPalette = [];
    this._symbolColors = null;
    this._symbolOutlineParams = null;
    this._symbolShadowParams = null;
    this._i18nKey = null;
    this._fontAsset = new LocalizedAsset(this._system.app);
    this._fontAsset.disableLocalization = true;

    this._fontAsset.on('load', this._onFontLoad, this);

    this._fontAsset.on('change', this._onFontChange, this);

    this._fontAsset.on('remove', this._onFontRemove, this);

    this._font = null;
    this._color = new Color(1, 1, 1, 1);
    this._colorUniform = new Float32Array(3);
    this._spacing = 1;
    this._fontSize = 32;
    this._fontMinY = 0;
    this._fontMaxY = 0;
    this._originalFontSize = 32;
    this._maxFontSize = 32;
    this._minFontSize = 8;
    this._autoFitWidth = false;
    this._autoFitHeight = false;
    this._maxLines = -1;
    this._lineHeight = 32;
    this._scaledLineHeight = 32;
    this._wrapLines = false;
    this._drawOrder = 0;
    this._alignment = new Vec2(0.5, 0.5);
    this._autoWidth = true;
    this._autoHeight = true;
    this.width = 0;
    this.height = 0;
    this._node = new GraphNode();
    this._model = new Model();
    this._model.graph = this._node;

    this._entity.addChild(this._node);

    this._meshInfo = [];
    this._material = null;
    this._aabbDirty = true;
    this._aabb = new BoundingBox();
    this._noResize = false;
    this._currentMaterialType = null;
    this._maskedMaterialSrc = null;
    this._rtlReorder = false;
    this._unicodeConverter = false;
    this._rtl = false;
    this._outlineColor = new Color(0, 0, 0, 1);
    this._outlineColorUniform = new Float32Array(4);
    this._outlineThicknessScale = 0.2;
    this._outlineThickness = 0.0;
    this._shadowColor = new Color(0, 0, 0, 1);
    this._shadowColorUniform = new Float32Array(4);
    this._shadowOffsetScale = 0.005;
    this._shadowOffset = new Vec2(0, 0);
    this._shadowOffsetUniform = new Float32Array(2);
    this._enableMarkup = false;

    this._onScreenChange(this._element.screen);

    element.on('resize', this._onParentResize, this);
    element.on('set:screen', this._onScreenChange, this);
    element.on('screen:set:screenspace', this._onScreenSpaceChange, this);
    element.on('set:draworder', this._onDrawOrderChange, this);
    element.on('set:pivot', this._onPivotChange, this);

    this._system.app.i18n.on('set:locale', this._onLocaleSet, this);

    this._system.app.i18n.on('data:add', this._onLocalizationData, this);

    this._system.app.i18n.on('data:remove', this._onLocalizationData, this);

    this._rangeStart = 0;
    this._rangeEnd = 0;
  }

  destroy() {
    this._setMaterial(null);

    if (this._model) {
      this._element.removeModelFromLayers(this._model);

      this._model.destroy();

      this._model = null;
    }

    this._fontAsset.destroy();

    this.font = null;

    this._element.off('resize', this._onParentResize, this);

    this._element.off('set:screen', this._onScreenChange, this);

    this._element.off('screen:set:screenspace', this._onScreenSpaceChange, this);

    this._element.off('set:draworder', this._onDrawOrderChange, this);

    this._element.off('set:pivot', this._onPivotChange, this);

    this._system.app.i18n.off('set:locale', this._onLocaleSet, this);

    this._system.app.i18n.off('data:add', this._onLocalizationData, this);

    this._system.app.i18n.off('data:remove', this._onLocalizationData, this);
  }

  _onParentResize(width, height) {
    if (this._noResize) return;
    if (this._font) this._updateText();
  }

  _onScreenChange(screen) {
    if (screen) {
      this._updateMaterial(screen.screen.screenSpace);
    } else {
      this._updateMaterial(false);
    }
  }

  _onScreenSpaceChange(value) {
    this._updateMaterial(value);
  }

  _onDrawOrderChange(order) {
    this._drawOrder = order;

    if (this._model) {
      for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
        this._model.meshInstances[i].drawOrder = order;
      }
    }
  }

  _onPivotChange(pivot) {
    if (this._font) this._updateText();
  }

  _onLocaleSet(locale) {
    if (!this._i18nKey) return;

    if (this.fontAsset) {
      const asset = this._system.app.assets.get(this.fontAsset);

      if (!asset || !asset.resource || asset.resource !== this._font) {
        this.font = null;
      }
    }

    this._resetLocalizedText();
  }

  _onLocalizationData(locale, messages) {
    if (this._i18nKey && messages[this._i18nKey]) {
      this._resetLocalizedText();
    }
  }

  _resetLocalizedText() {
    this._setText(this._system.app.i18n.getText(this._i18nKey));
  }

  _setText(text) {
    if (this.unicodeConverter) {
      const unicodeConverterFunc = this._system.getUnicodeConverter();

      if (unicodeConverterFunc) {
        text = unicodeConverterFunc(text);
      } else {
        console.warn('Element created with unicodeConverter option but no unicodeConverter function registered');
      }
    }

    if (this._text !== text) {
      if (this._font) {
        this._updateText(text);
      }

      this._text = text;
    }
  }

  _updateText(text) {
    let tags;
    if (text === undefined) text = this._text;
    this._symbols = string.getSymbols(text.normalize ? text.normalize('NFC') : text);

    if (this._symbols.length === 0) {
      this._symbols = [' '];
    }

    if (this._enableMarkup) {
      const results = Markup.evaluate(this._symbols);
      this._symbols = results.symbols;
      tags = results.tags || [];
    }

    if (this._rtlReorder) {
      const rtlReorderFunc = this._system.app.systems.element.getRtlReorder();

      if (rtlReorderFunc) {
        const results = rtlReorderFunc(this._symbols);
        this._rtl = results.rtl;
        this._symbols = results.mapping.map(function (v) {
          return this._symbols[v];
        }, this);

        if (tags) {
          tags = results.mapping.map(function (v) {
            return tags[v];
          });
        }
      } else {
        console.warn('Element created with rtlReorder option but no rtlReorder function registered');
      }
    } else {
      this._rtl = false;
    }

    const getColorThicknessHash = (color, thickness) => {
      return `${color.toString(true).toLowerCase()}:${thickness.toFixed(2)}`;
    };

    const getColorOffsetHash = (color, offset) => {
      return `${color.toString(true).toLowerCase()}:${offset.x.toFixed(2)}:${offset.y.toFixed(2)}`;
    };

    if (tags) {
      const paletteMap = {};
      const outlinePaletteMap = {};
      const shadowPaletteMap = {};
      this._colorPalette = [Math.round(this._color.r * 255), Math.round(this._color.g * 255), Math.round(this._color.b * 255)];
      this._outlinePalette = [Math.round(this._outlineColor.r * 255), Math.round(this._outlineColor.g * 255), Math.round(this._outlineColor.b * 255), Math.round(this._outlineColor.a * 255), Math.round(this._outlineThickness * 255)];
      this._shadowPalette = [Math.round(this._shadowColor.r * 255), Math.round(this._shadowColor.g * 255), Math.round(this._shadowColor.b * 255), Math.round(this._shadowColor.a * 255), Math.round(this._shadowOffset.x * 127), Math.round(this._shadowOffset.y * 127)];
      this._symbolColors = [];
      this._symbolOutlineParams = [];
      this._symbolShadowParams = [];
      paletteMap[this._color.toString(false).toLowerCase()] = 0;
      outlinePaletteMap[getColorThicknessHash(this._outlineColor, this._outlineThickness)] = 0;
      shadowPaletteMap[getColorOffsetHash(this._shadowColor, this._shadowOffset)] = 0;

      for (let i = 0, len = this._symbols.length; i < len; ++i) {
        const tag = tags[i];
        let color = 0;

        if (tag && tag.color && tag.color.value) {
          const c = tag.color.value;

          if (c.length === 7 && c[0] === '#') {
            const hex = c.substring(1).toLowerCase();

            if (paletteMap.hasOwnProperty(hex)) {
              color = paletteMap[hex];
            } else {
              if (/^([0-9a-f]{2}){3}$/.test(hex)) {
                color = this._colorPalette.length / 3;
                paletteMap[hex] = color;

                this._colorPalette.push(parseInt(hex.substring(0, 2), 16));

                this._colorPalette.push(parseInt(hex.substring(2, 4), 16));

                this._colorPalette.push(parseInt(hex.substring(4, 6), 16));
              }
            }
          }
        }

        this._symbolColors.push(color);

        let outline = 0;

        if (tag && tag.outline && (tag.outline.attributes.color || tag.outline.attributes.thickness)) {
          let _color = tag.outline.attributes.color ? colorTmp.fromString(tag.outline.attributes.color) : this._outlineColor;

          let thickness = Number(tag.outline.attributes.thickness);

          if (Number.isNaN(_color.r) || Number.isNaN(_color.g) || Number.isNaN(_color.b) || Number.isNaN(_color.a)) {
            _color = this._outlineColor;
          }

          if (Number.isNaN(thickness)) {
            thickness = this._outlineThickness;
          }

          const outlineHash = getColorThicknessHash(_color, thickness);

          if (outlinePaletteMap.hasOwnProperty(outlineHash)) {
            outline = outlinePaletteMap[outlineHash];
          } else {
            outline = this._outlinePalette.length / 5;
            outlinePaletteMap[outlineHash] = outline;

            this._outlinePalette.push(Math.round(_color.r * 255), Math.round(_color.g * 255), Math.round(_color.b * 255), Math.round(_color.a * 255), Math.round(thickness * 255));
          }
        }

        this._symbolOutlineParams.push(outline);

        let shadow = 0;

        if (tag && tag.shadow && (tag.shadow.attributes.color || tag.shadow.attributes.offset || tag.shadow.attributes.offsetX || tag.shadow.attributes.offsetY)) {
          let _color2 = tag.shadow.attributes.color ? colorTmp.fromString(tag.shadow.attributes.color) : this._shadowColor;

          const off = Number(tag.shadow.attributes.offset);
          const offX = Number(tag.shadow.attributes.offsetX);
          const offY = Number(tag.shadow.attributes.offsetY);

          if (Number.isNaN(_color2.r) || Number.isNaN(_color2.g) || Number.isNaN(_color2.b) || Number.isNaN(_color2.a)) {
            _color2 = this._shadowColor;
          }

          const offset = vec2Tmp.set(!Number.isNaN(offX) ? offX : !Number.isNaN(off) ? off : this._shadowOffset.x, !Number.isNaN(offY) ? offY : !Number.isNaN(off) ? off : this._shadowOffset.y);
          const shadowHash = getColorOffsetHash(_color2, offset);

          if (shadowPaletteMap.hasOwnProperty(shadowHash)) {
            shadow = shadowPaletteMap[shadowHash];
          } else {
            shadow = this._shadowPalette.length / 6;
            shadowPaletteMap[shadowHash] = shadow;

            this._shadowPalette.push(Math.round(_color2.r * 255), Math.round(_color2.g * 255), Math.round(_color2.b * 255), Math.round(_color2.a * 255), Math.round(offset.x * 127), Math.round(offset.y * 127));
          }
        }

        this._symbolShadowParams.push(shadow);
      }
    } else {
      this._colorPalette = [];
      this._symbolColors = null;
      this._symbolOutlineParams = null;
      this._symbolShadowParams = null;
    }

    this._updateMaterialEmissive();

    this._updateMaterialOutline();

    this._updateMaterialShadow();

    const charactersPerTexture = this._calculateCharsPerTexture();

    let removedModel = false;
    const element = this._element;

    const screenSpace = element._isScreenSpace();

    const screenCulled = element._isScreenCulled();

    const visibleFn = function visibleFn(camera) {
      return element.isVisibleForCamera(camera);
    };

    for (let i = 0, len = this._meshInfo.length; i < len; i++) {
      const l = charactersPerTexture[i] || 0;
      const meshInfo = this._meshInfo[i];

      if (meshInfo.count !== l) {
        if (!removedModel) {
          element.removeModelFromLayers(this._model);
          removedModel = true;
        }

        meshInfo.count = l;
        meshInfo.positions.length = meshInfo.normals.length = l * 3 * 4;
        meshInfo.indices.length = l * 3 * 2;
        meshInfo.uvs.length = l * 2 * 4;
        meshInfo.colors.length = l * 4 * 4;
        meshInfo.outlines.length = l * 4 * 3;
        meshInfo.shadows.length = l * 4 * 3;

        if (meshInfo.meshInstance) {
          this._removeMeshInstance(meshInfo.meshInstance);
        }

        if (l === 0) {
          meshInfo.meshInstance = null;
          continue;
        }

        for (let v = 0; v < l; v++) {
          meshInfo.indices[v * 3 * 2 + 0] = v * 4;
          meshInfo.indices[v * 3 * 2 + 1] = v * 4 + 1;
          meshInfo.indices[v * 3 * 2 + 2] = v * 4 + 3;
          meshInfo.indices[v * 3 * 2 + 3] = v * 4 + 2;
          meshInfo.indices[v * 3 * 2 + 4] = v * 4 + 3;
          meshInfo.indices[v * 3 * 2 + 5] = v * 4 + 1;
          meshInfo.normals[v * 4 * 3 + 0] = 0;
          meshInfo.normals[v * 4 * 3 + 1] = 0;
          meshInfo.normals[v * 4 * 3 + 2] = -1;
          meshInfo.normals[v * 4 * 3 + 3] = 0;
          meshInfo.normals[v * 4 * 3 + 4] = 0;
          meshInfo.normals[v * 4 * 3 + 5] = -1;
          meshInfo.normals[v * 4 * 3 + 6] = 0;
          meshInfo.normals[v * 4 * 3 + 7] = 0;
          meshInfo.normals[v * 4 * 3 + 8] = -1;
          meshInfo.normals[v * 4 * 3 + 9] = 0;
          meshInfo.normals[v * 4 * 3 + 10] = 0;
          meshInfo.normals[v * 4 * 3 + 11] = -1;
        }

        const mesh = createTextMesh(this._system.app.graphicsDevice, meshInfo);
        const mi = new MeshInstance(mesh, this._material, this._node);
        mi.name = 'Text Element: ' + this._entity.name;
        mi.castShadow = false;
        mi.receiveShadow = false;
        mi.cull = !screenSpace;
        mi.screenSpace = screenSpace;
        mi.drawOrder = this._drawOrder;

        if (screenCulled) {
          mi.cull = true;
          mi.isVisibleFunc = visibleFn;
        }

        this._setTextureParams(mi, this._font.textures[i]);

        mi.setParameter('material_emissive', this._colorUniform);
        mi.setParameter('material_opacity', this._color.a);
        mi.setParameter('font_sdfIntensity', this._font.intensity);
        mi.setParameter('font_pxrange', this._getPxRange(this._font));
        mi.setParameter('font_textureWidth', this._font.data.info.maps[i].width);
        mi.setParameter('outline_color', this._outlineColorUniform);
        mi.setParameter('outline_thickness', this._outlineThicknessScale * this._outlineThickness);
        mi.setParameter('shadow_color', this._shadowColorUniform);

        if (this._symbolShadowParams) {
          this._shadowOffsetUniform[0] = 0;
          this._shadowOffsetUniform[1] = 0;
        } else {
          const ratio = -this._font.data.info.maps[i].width / this._font.data.info.maps[i].height;
          this._shadowOffsetUniform[0] = this._shadowOffsetScale * this._shadowOffset.x;
          this._shadowOffsetUniform[1] = ratio * this._shadowOffsetScale * this._shadowOffset.y;
        }

        mi.setParameter('shadow_offset', this._shadowOffsetUniform);
        meshInfo.meshInstance = mi;

        this._model.meshInstances.push(mi);
      }
    }

    if (this._element.maskedBy) {
      this._element._setMaskedBy(this._element.maskedBy);
    }

    if (removedModel && this._element.enabled && this._entity.enabled) {
      this._element.addModelToLayers(this._model);
    }

    this._updateMeshes();

    this._rangeStart = 0;
    this._rangeEnd = this._symbols.length;

    this._updateRenderRange();
  }

  _removeMeshInstance(meshInstance) {
    meshInstance.destroy();

    const idx = this._model.meshInstances.indexOf(meshInstance);

    if (idx !== -1) this._model.meshInstances.splice(idx, 1);
  }

  _setMaterial(material) {
    this._material = material;

    if (this._model) {
      for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
        const mi = this._model.meshInstances[i];
        mi.material = material;
      }
    }
  }

  _updateMaterial(screenSpace) {
    const element = this._element;

    const screenCulled = element._isScreenCulled();

    const visibleFn = function visibleFn(camera) {
      return element.isVisibleForCamera(camera);
    };

    const msdf = this._font && this._font.type === FONT_MSDF;
    this._material = this._system.getTextElementMaterial(screenSpace, msdf, this._enableMarkup);

    if (this._model) {
      for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
        const mi = this._model.meshInstances[i];
        mi.cull = !screenSpace;
        mi.material = this._material;
        mi.screenSpace = screenSpace;

        if (screenCulled) {
          mi.cull = true;
          mi.isVisibleFunc = visibleFn;
        } else {
          mi.isVisibleFunc = null;
        }
      }
    }
  }

  _updateMaterialEmissive() {
    if (this._symbolColors) {
      this._colorUniform[0] = 1;
      this._colorUniform[1] = 1;
      this._colorUniform[2] = 1;
    } else {
      this._colorUniform[0] = this._color.r;
      this._colorUniform[1] = this._color.g;
      this._colorUniform[2] = this._color.b;
    }
  }

  _updateMaterialOutline() {
    if (this._symbolOutlineParams) {
      this._outlineColorUniform[0] = 0;
      this._outlineColorUniform[1] = 0;
      this._outlineColorUniform[2] = 0;
      this._outlineColorUniform[3] = 1;
    } else {
      this._outlineColorUniform[0] = this._outlineColor.r;
      this._outlineColorUniform[1] = this._outlineColor.g;
      this._outlineColorUniform[2] = this._outlineColor.b;
      this._outlineColorUniform[3] = this._outlineColor.a;
    }
  }

  _updateMaterialShadow() {
    if (this._symbolOutlineParams) {
      this._shadowColorUniform[0] = 0;
      this._shadowColorUniform[1] = 0;
      this._shadowColorUniform[2] = 0;
      this._shadowColorUniform[3] = 0;
    } else {
      this._shadowColorUniform[0] = this._shadowColor.r;
      this._shadowColorUniform[1] = this._shadowColor.g;
      this._shadowColorUniform[2] = this._shadowColor.b;
      this._shadowColorUniform[3] = this._shadowColor.a;
    }
  }

  _isWordBoundary(char) {
    return WORD_BOUNDARY_CHAR.test(char);
  }

  _isValidNextChar(nextchar) {
    return nextchar !== null && !NO_LINE_BREAK_CJK_CHAR.test(nextchar);
  }

  _isNextCJKBoundary(char, nextchar) {
    return CJK_CHAR.test(char) && (WORD_BOUNDARY_CHAR.test(nextchar) || ALPHANUMERIC_CHAR.test(nextchar));
  }

  _isNextCJKWholeWord(nextchar) {
    return CJK_CHAR.test(nextchar);
  }

  _updateMeshes() {
    const json = this._font.data;
    const self = this;
    const minFont = Math.min(this._minFontSize, this._maxFontSize);
    const maxFont = this._maxFontSize;

    const autoFit = this._shouldAutoFit();

    if (autoFit) {
      this._fontSize = this._maxFontSize;
    }

    const MAGIC = 32;
    const l = this._symbols.length;
    let _x = 0;
    let _y = 0;
    let _z = 0;
    let _xMinusTrailingWhitespace = 0;
    let lines = 1;
    let wordStartX = 0;
    let wordStartIndex = 0;
    let lineStartIndex = 0;
    let numWordsThisLine = 0;
    let numCharsThisLine = 0;
    let numBreaksThisLine = 0;
    const splitHorizontalAnchors = Math.abs(this._element.anchor.x - this._element.anchor.z) >= 0.0001;
    let maxLineWidth = this._element.calculatedWidth;

    if (this.autoWidth && !splitHorizontalAnchors || !this._wrapLines) {
      maxLineWidth = Number.POSITIVE_INFINITY;
    }

    let fontMinY = 0;
    let fontMaxY = 0;
    let char, data, quad, nextchar;

    function breakLine(symbols, lineBreakIndex, lineBreakX) {
      self._lineWidths.push(Math.abs(lineBreakX));

      const sliceStart = lineStartIndex > lineBreakIndex ? lineBreakIndex + 1 : lineStartIndex;
      const sliceEnd = lineStartIndex > lineBreakIndex ? lineStartIndex + 1 : lineBreakIndex;
      const chars = symbols.slice(sliceStart, sliceEnd);

      if (numBreaksThisLine) {
        let i = chars.length;

        while (i-- && numBreaksThisLine > 0) {
          if (LINE_BREAK_CHAR.test(chars[i])) {
            chars.splice(i, 1);
            numBreaksThisLine--;
          }
        }
      }

      self._lineContents.push(chars.join(''));

      _x = 0;
      _y -= self._scaledLineHeight;
      lines++;
      numWordsThisLine = 0;
      numCharsThisLine = 0;
      numBreaksThisLine = 0;
      wordStartX = 0;
      lineStartIndex = lineBreakIndex;
    }

    let retryUpdateMeshes = true;

    while (retryUpdateMeshes) {
      retryUpdateMeshes = false;

      if (autoFit) {
        this._scaledLineHeight = this._lineHeight * this._fontSize / (this._maxFontSize || 0.0001);
      } else {
        this._scaledLineHeight = this._lineHeight;
      }

      this.width = 0;
      this.height = 0;
      this._lineWidths = [];
      this._lineContents = [];
      _x = 0;
      _y = 0;
      _z = 0;
      _xMinusTrailingWhitespace = 0;
      lines = 1;
      wordStartX = 0;
      wordStartIndex = 0;
      lineStartIndex = 0;
      numWordsThisLine = 0;
      numCharsThisLine = 0;
      numBreaksThisLine = 0;
      const scale = this._fontSize / MAGIC;
      fontMinY = this._fontMinY * scale;
      fontMaxY = this._fontMaxY * scale;

      for (let i = 0; i < this._meshInfo.length; i++) {
        this._meshInfo[i].quad = 0;
        this._meshInfo[i].lines = {};
      }

      let color_r = 255;
      let color_g = 255;
      let color_b = 255;
      let outline_color_rg = 255 + 255 * 256;
      let outline_color_ba = 255 + 255 * 256;
      let outline_thickness = 0;
      let shadow_color_rg = 255 + 255 * 256;
      let shadow_color_ba = 255 + 255 * 256;
      let shadow_offset_xy = 127 + 127 * 256;

      for (let i = 0; i < l; i++) {
        char = this._symbols[i];
        nextchar = i + 1 >= l ? null : this._symbols[i + 1];
        const isLineBreak = LINE_BREAK_CHAR.test(char);

        if (isLineBreak) {
          numBreaksThisLine++;

          if (!this._wrapLines || this._maxLines < 0 || lines < this._maxLines) {
            breakLine(this._symbols, i, _xMinusTrailingWhitespace);
            wordStartIndex = i + 1;
            lineStartIndex = i + 1;
          }

          continue;
        }

        let x = 0;
        let y = 0;
        let advance = 0;
        let quadsize = 1;
        let dataScale, size;
        data = json.chars[char];

        if (!data) {
          if (CONTROL_CHARS.indexOf(char) !== -1) {
            data = CONTROL_GLYPH_DATA;
          } else {
            if (json.chars[' ']) {
              data = json.chars[' '];
            } else {
              for (const key in json.chars) {
                data = json.chars[key];
                break;
              }
            }
          }
        }

        if (data) {
          let kerning = 0;

          if (numCharsThisLine > 0) {
            const kernTable = this._font.data.kerning;

            if (kernTable) {
              const kernLeft = kernTable[string.getCodePoint(this._symbols[i - 1]) || 0];

              if (kernLeft) {
                kerning = kernLeft[string.getCodePoint(this._symbols[i]) || 0] || 0;
              }
            }
          }

          dataScale = data.scale || 1;
          size = (data.width + data.height) / 2;
          quadsize = scale * size / dataScale;
          advance = (data.xadvance + kerning) * scale;
          x = (data.xoffset - kerning) * scale;
          y = data.yoffset * scale;
        } else {
          console.error(`Couldn't substitute missing character: '${char}'`);
        }

        const isWhitespace = WHITESPACE_CHAR.test(char);
        const meshInfoId = data && data.map || 0;
        const ratio = -this._font.data.info.maps[meshInfoId].width / this._font.data.info.maps[meshInfoId].height;
        const meshInfo = this._meshInfo[meshInfoId];
        const candidateLineWidth = _x + this._spacing * advance;

        if (candidateLineWidth > maxLineWidth && numCharsThisLine > 0 && !isWhitespace) {
          if (this._maxLines < 0 || lines < this._maxLines) {
            if (numWordsThisLine === 0) {
              wordStartIndex = i;
              breakLine(this._symbols, i, _xMinusTrailingWhitespace);
            } else {
              const backtrack = Math.max(i - wordStartIndex, 0);

              if (this._meshInfo.length <= 1) {
                meshInfo.lines[lines - 1] -= backtrack;
                meshInfo.quad -= backtrack;
              } else {
                const backtrackStart = wordStartIndex;
                const backtrackEnd = i;

                for (let j = backtrackStart; j < backtrackEnd; j++) {
                  const backChar = this._symbols[j];
                  const backCharData = json.chars[backChar];
                  const backMeshInfo = this._meshInfo[backCharData && backCharData.map || 0];
                  backMeshInfo.lines[lines - 1] -= 1;
                  backMeshInfo.quad -= 1;
                }
              }

              i -= backtrack + 1;
              breakLine(this._symbols, wordStartIndex, wordStartX);
              continue;
            }
          }
        }

        quad = meshInfo.quad;
        meshInfo.lines[lines - 1] = quad;
        let left = _x - x;
        let right = left + quadsize;
        const bottom = _y - y;
        const top = bottom + quadsize;

        if (this._rtl) {
          const shift = quadsize - x - this._spacing * advance - x;
          left -= shift;
          right -= shift;
        }

        meshInfo.positions[quad * 4 * 3 + 0] = left;
        meshInfo.positions[quad * 4 * 3 + 1] = bottom;
        meshInfo.positions[quad * 4 * 3 + 2] = _z;
        meshInfo.positions[quad * 4 * 3 + 3] = right;
        meshInfo.positions[quad * 4 * 3 + 4] = bottom;
        meshInfo.positions[quad * 4 * 3 + 5] = _z;
        meshInfo.positions[quad * 4 * 3 + 6] = right;
        meshInfo.positions[quad * 4 * 3 + 7] = top;
        meshInfo.positions[quad * 4 * 3 + 8] = _z;
        meshInfo.positions[quad * 4 * 3 + 9] = left;
        meshInfo.positions[quad * 4 * 3 + 10] = top;
        meshInfo.positions[quad * 4 * 3 + 11] = _z;
        this.width = Math.max(this.width, candidateLineWidth);
        let fontSize;

        if (this._shouldAutoFitWidth() && this.width > this._element.calculatedWidth) {
          fontSize = Math.floor(this._element.fontSize * this._element.calculatedWidth / (this.width || 0.0001));
          fontSize = math$1.clamp(fontSize, minFont, maxFont);

          if (fontSize !== this._element.fontSize) {
            this._fontSize = fontSize;
            retryUpdateMeshes = true;
            break;
          }
        }

        this.height = Math.max(this.height, fontMaxY - (_y + fontMinY));

        if (this._shouldAutoFitHeight() && this.height > this._element.calculatedHeight) {
          fontSize = math$1.clamp(this._fontSize - 1, minFont, maxFont);

          if (fontSize !== this._element.fontSize) {
            this._fontSize = fontSize;
            retryUpdateMeshes = true;
            break;
          }
        }

        _x += this._spacing * advance;

        if (!isWhitespace) {
          _xMinusTrailingWhitespace = _x;
        }

        if (this._isWordBoundary(char) || this._isValidNextChar(nextchar) && (this._isNextCJKBoundary(char, nextchar) || this._isNextCJKWholeWord(nextchar))) {
          numWordsThisLine++;
          wordStartX = _xMinusTrailingWhitespace;
          wordStartIndex = i + 1;
        }

        numCharsThisLine++;

        const uv = this._getUv(char);

        meshInfo.uvs[quad * 4 * 2 + 0] = uv[0];
        meshInfo.uvs[quad * 4 * 2 + 1] = 1.0 - uv[1];
        meshInfo.uvs[quad * 4 * 2 + 2] = uv[2];
        meshInfo.uvs[quad * 4 * 2 + 3] = 1.0 - uv[1];
        meshInfo.uvs[quad * 4 * 2 + 4] = uv[2];
        meshInfo.uvs[quad * 4 * 2 + 5] = 1.0 - uv[3];
        meshInfo.uvs[quad * 4 * 2 + 6] = uv[0];
        meshInfo.uvs[quad * 4 * 2 + 7] = 1.0 - uv[3];

        if (this._symbolColors) {
          const colorIdx = this._symbolColors[i] * 3;
          color_r = this._colorPalette[colorIdx];
          color_g = this._colorPalette[colorIdx + 1];
          color_b = this._colorPalette[colorIdx + 2];
        }

        meshInfo.colors[quad * 4 * 4 + 0] = color_r;
        meshInfo.colors[quad * 4 * 4 + 1] = color_g;
        meshInfo.colors[quad * 4 * 4 + 2] = color_b;
        meshInfo.colors[quad * 4 * 4 + 3] = 255;
        meshInfo.colors[quad * 4 * 4 + 4] = color_r;
        meshInfo.colors[quad * 4 * 4 + 5] = color_g;
        meshInfo.colors[quad * 4 * 4 + 6] = color_b;
        meshInfo.colors[quad * 4 * 4 + 7] = 255;
        meshInfo.colors[quad * 4 * 4 + 8] = color_r;
        meshInfo.colors[quad * 4 * 4 + 9] = color_g;
        meshInfo.colors[quad * 4 * 4 + 10] = color_b;
        meshInfo.colors[quad * 4 * 4 + 11] = 255;
        meshInfo.colors[quad * 4 * 4 + 12] = color_r;
        meshInfo.colors[quad * 4 * 4 + 13] = color_g;
        meshInfo.colors[quad * 4 * 4 + 14] = color_b;
        meshInfo.colors[quad * 4 * 4 + 15] = 255;

        if (this._symbolOutlineParams) {
          const outlineIdx = this._symbolOutlineParams[i] * 5;
          outline_color_rg = this._outlinePalette[outlineIdx] + this._outlinePalette[outlineIdx + 1] * 256;
          outline_color_ba = this._outlinePalette[outlineIdx + 2] + this._outlinePalette[outlineIdx + 3] * 256;
          outline_thickness = this._outlinePalette[outlineIdx + 4];
        }

        meshInfo.outlines[quad * 4 * 3 + 0] = outline_color_rg;
        meshInfo.outlines[quad * 4 * 3 + 1] = outline_color_ba;
        meshInfo.outlines[quad * 4 * 3 + 2] = outline_thickness;
        meshInfo.outlines[quad * 4 * 3 + 3] = outline_color_rg;
        meshInfo.outlines[quad * 4 * 3 + 4] = outline_color_ba;
        meshInfo.outlines[quad * 4 * 3 + 5] = outline_thickness;
        meshInfo.outlines[quad * 4 * 3 + 6] = outline_color_rg;
        meshInfo.outlines[quad * 4 * 3 + 7] = outline_color_ba;
        meshInfo.outlines[quad * 4 * 3 + 8] = outline_thickness;
        meshInfo.outlines[quad * 4 * 3 + 9] = outline_color_rg;
        meshInfo.outlines[quad * 4 * 3 + 10] = outline_color_ba;
        meshInfo.outlines[quad * 4 * 3 + 11] = outline_thickness;

        if (this._symbolShadowParams) {
          const shadowIdx = this._symbolShadowParams[i] * 6;
          shadow_color_rg = this._shadowPalette[shadowIdx] + this._shadowPalette[shadowIdx + 1] * 256;
          shadow_color_ba = this._shadowPalette[shadowIdx + 2] + this._shadowPalette[shadowIdx + 3] * 256;
          shadow_offset_xy = this._shadowPalette[shadowIdx + 4] + 127 + Math.round(ratio * this._shadowPalette[shadowIdx + 5] + 127) * 256;
        }

        meshInfo.shadows[quad * 4 * 3 + 0] = shadow_color_rg;
        meshInfo.shadows[quad * 4 * 3 + 1] = shadow_color_ba;
        meshInfo.shadows[quad * 4 * 3 + 2] = shadow_offset_xy;
        meshInfo.shadows[quad * 4 * 3 + 3] = shadow_color_rg;
        meshInfo.shadows[quad * 4 * 3 + 4] = shadow_color_ba;
        meshInfo.shadows[quad * 4 * 3 + 5] = shadow_offset_xy;
        meshInfo.shadows[quad * 4 * 3 + 6] = shadow_color_rg;
        meshInfo.shadows[quad * 4 * 3 + 7] = shadow_color_ba;
        meshInfo.shadows[quad * 4 * 3 + 8] = shadow_offset_xy;
        meshInfo.shadows[quad * 4 * 3 + 9] = shadow_color_rg;
        meshInfo.shadows[quad * 4 * 3 + 10] = shadow_color_ba;
        meshInfo.shadows[quad * 4 * 3 + 11] = shadow_offset_xy;
        meshInfo.quad++;
      }

      if (retryUpdateMeshes) {
        continue;
      }

      if (lineStartIndex < l) {
        breakLine(this._symbols, l, _x);
      }
    }

    this._noResize = true;
    this.autoWidth = this._autoWidth;
    this.autoHeight = this._autoHeight;
    this._noResize = false;
    const hp = this._element.pivot.x;
    const vp = this._element.pivot.y;
    const ha = this._alignment.x;
    const va = this._alignment.y;

    for (let i = 0; i < this._meshInfo.length; i++) {
      if (this._meshInfo[i].count === 0) continue;
      let prevQuad = 0;

      for (const line in this._meshInfo[i].lines) {
        const index = this._meshInfo[i].lines[line];

        const lw = this._lineWidths[parseInt(line, 10)];

        const hoffset = -hp * this._element.calculatedWidth + ha * (this._element.calculatedWidth - lw) * (this._rtl ? -1 : 1);
        const voffset = (1 - vp) * this._element.calculatedHeight - fontMaxY - (1 - va) * (this._element.calculatedHeight - this.height);

        for (let _quad = prevQuad; _quad <= index; _quad++) {
          this._meshInfo[i].positions[_quad * 4 * 3] += hoffset;
          this._meshInfo[i].positions[_quad * 4 * 3 + 3] += hoffset;
          this._meshInfo[i].positions[_quad * 4 * 3 + 6] += hoffset;
          this._meshInfo[i].positions[_quad * 4 * 3 + 9] += hoffset;
          this._meshInfo[i].positions[_quad * 4 * 3 + 1] += voffset;
          this._meshInfo[i].positions[_quad * 4 * 3 + 4] += voffset;
          this._meshInfo[i].positions[_quad * 4 * 3 + 7] += voffset;
          this._meshInfo[i].positions[_quad * 4 * 3 + 10] += voffset;
        }

        if (this._rtl) {
          for (let _quad2 = prevQuad; _quad2 <= index; _quad2++) {
            const idx = _quad2 * 4 * 3;

            for (let vert = 0; vert < 4; ++vert) {
              this._meshInfo[i].positions[idx + vert * 3] = this._element.calculatedWidth - this._meshInfo[i].positions[idx + vert * 3] + hoffset * 2;
            }

            const tmp0 = this._meshInfo[i].positions[idx + 3];
            const tmp1 = this._meshInfo[i].positions[idx + 6];
            this._meshInfo[i].positions[idx + 3] = this._meshInfo[i].positions[idx + 0];
            this._meshInfo[i].positions[idx + 6] = this._meshInfo[i].positions[idx + 9];
            this._meshInfo[i].positions[idx + 0] = tmp0;
            this._meshInfo[i].positions[idx + 9] = tmp1;
          }
        }

        prevQuad = index + 1;
      }

      const numVertices = this._meshInfo[i].count * 4;
      const vertMax = this._meshInfo[i].quad * 4;
      const it = new VertexIterator(this._meshInfo[i].meshInstance.mesh.vertexBuffer);

      for (let v = 0; v < numVertices; v++) {
        if (v >= vertMax) {
          it.element[SEMANTIC_POSITION].set(0, 0, 0);
          it.element[SEMANTIC_TEXCOORD0].set(0, 0);
          it.element[SEMANTIC_COLOR].set(0, 0, 0, 0);
          it.element[SEMANTIC_ATTR8].set(0, 0, 0, 0);
          it.element[SEMANTIC_ATTR9].set(0, 0, 0, 0);
        } else {
          it.element[SEMANTIC_POSITION].set(this._meshInfo[i].positions[v * 3 + 0], this._meshInfo[i].positions[v * 3 + 1], this._meshInfo[i].positions[v * 3 + 2]);
          it.element[SEMANTIC_TEXCOORD0].set(this._meshInfo[i].uvs[v * 2 + 0], this._meshInfo[i].uvs[v * 2 + 1]);
          it.element[SEMANTIC_COLOR].set(this._meshInfo[i].colors[v * 4 + 0], this._meshInfo[i].colors[v * 4 + 1], this._meshInfo[i].colors[v * 4 + 2], this._meshInfo[i].colors[v * 4 + 3]);
          it.element[SEMANTIC_ATTR8].set(this._meshInfo[i].outlines[v * 3 + 0], this._meshInfo[i].outlines[v * 3 + 1], this._meshInfo[i].outlines[v * 3 + 2]);
          it.element[SEMANTIC_ATTR9].set(this._meshInfo[i].shadows[v * 3 + 0], this._meshInfo[i].shadows[v * 3 + 1], this._meshInfo[i].shadows[v * 3 + 2]);
        }

        it.next();
      }

      it.end();

      this._meshInfo[i].meshInstance.mesh.aabb.compute(this._meshInfo[i].positions);

      this._meshInfo[i].meshInstance._aabbVer = -1;
    }

    this._aabbDirty = true;
  }

  _onFontRender() {
    this.font = this._font;
  }

  _onFontLoad(asset) {
    if (this.font !== asset.resource) {
      this.font = asset.resource;
    }
  }

  _onFontChange(asset, name, _new, _old) {
    if (name === 'data') {
      this._font.data = _new;
      const maps = this._font.data.info.maps.length;

      for (let i = 0; i < maps; i++) {
        if (!this._meshInfo[i]) continue;
        const mi = this._meshInfo[i].meshInstance;

        if (mi) {
          mi.setParameter('font_sdfIntensity', this._font.intensity);
          mi.setParameter('font_pxrange', this._getPxRange(this._font));
          mi.setParameter('font_textureWidth', this._font.data.info.maps[i].width);
        }
      }
    }
  }

  _onFontRemove(asset) {}

  _setTextureParams(mi, texture) {
    if (this._font) {
      if (this._font.type === FONT_MSDF) {
        mi.deleteParameter('texture_emissiveMap');
        mi.deleteParameter('texture_opacityMap');
        mi.setParameter('texture_msdfMap', texture);
      } else if (this._font.type === FONT_BITMAP) {
        mi.deleteParameter('texture_msdfMap');
        mi.setParameter('texture_emissiveMap', texture);
        mi.setParameter('texture_opacityMap', texture);
      }
    }
  }

  _getPxRange(font) {
    const keys = Object.keys(this._font.data.chars);

    for (let i = 0; i < keys.length; i++) {
      const char = this._font.data.chars[keys[i]];

      if (char.range) {
        return (char.scale || 1) * char.range;
      }
    }

    return 2;
  }

  _getUv(char) {
    const data = this._font.data;

    if (!data.chars[char]) {
      const space = ' ';

      if (data.chars[space]) {
        return this._getUv(space);
      }

      return [0, 0, 0, 0];
    }

    const map = data.chars[char].map;
    const width = data.info.maps[map].width;
    const height = data.info.maps[map].height;
    const x = data.chars[char].x;
    const y = data.chars[char].y;
    const x1 = x;
    const y1 = y;
    const x2 = x + data.chars[char].width;
    const y2 = y - data.chars[char].height;
    const edge = 1 - data.chars[char].height / height;
    return [x1 / width, edge - y1 / height, x2 / width, edge - y2 / height];
  }

  onEnable() {
    this._fontAsset.autoLoad = true;

    if (this._model) {
      this._element.addModelToLayers(this._model);
    }
  }

  onDisable() {
    this._fontAsset.autoLoad = false;

    if (this._model) {
      this._element.removeModelFromLayers(this._model);
    }
  }

  _setStencil(stencilParams) {
    if (this._model) {
      const instances = this._model.meshInstances;

      for (let i = 0; i < instances.length; i++) {
        instances[i].stencilFront = stencilParams;
        instances[i].stencilBack = stencilParams;
      }
    }
  }

  _shouldAutoFitWidth() {
    return this._autoFitWidth && !this._autoWidth;
  }

  _shouldAutoFitHeight() {
    return this._autoFitHeight && !this._autoHeight;
  }

  _shouldAutoFit() {
    return this._autoFitWidth && !this._autoWidth || this._autoFitHeight && !this._autoHeight;
  }

  _calculateCharsPerTexture(symbolIndex) {
    const charactersPerTexture = {};

    if (symbolIndex === undefined) {
      symbolIndex = this._symbols.length;
    }

    for (let i = 0, len = symbolIndex; i < len; i++) {
      const char = this._symbols[i];
      let info = this._font.data.chars[char];

      if (!info) {
        info = this._font.data.chars[' '];

        if (!info) {
          info = this._font.data.chars[Object.keys(this._font.data.chars)[0]];
        }
      }

      const map = info.map;

      if (!charactersPerTexture[map]) {
        charactersPerTexture[map] = 1;
      } else {
        charactersPerTexture[map]++;
      }
    }

    return charactersPerTexture;
  }

  _updateRenderRange() {
    const startChars = this._rangeStart === 0 ? 0 : this._calculateCharsPerTexture(this._rangeStart);
    const endChars = this._rangeEnd === 0 ? 0 : this._calculateCharsPerTexture(this._rangeEnd);

    for (let i = 0, len = this._meshInfo.length; i < len; i++) {
      const start = startChars[i] || 0;
      const end = endChars[i] || 0;
      const instance = this._meshInfo[i].meshInstance;

      if (instance) {
        const mesh = instance.mesh;

        if (mesh) {
          mesh.primitive[0].base = start * 3 * 2;
          mesh.primitive[0].count = (end - start) * 3 * 2;
        }
      }
    }
  }

  set text(value) {
    this._i18nKey = null;
    const str = value != null && value.toString() || '';

    this._setText(str);
  }

  get text() {
    return this._text;
  }

  set key(value) {
    const str = value !== null ? value.toString() : null;

    if (this._i18nKey === str) {
      return;
    }

    this._i18nKey = str;

    if (str) {
      this._fontAsset.disableLocalization = false;

      this._resetLocalizedText();
    } else {
      this._fontAsset.disableLocalization = true;
    }
  }

  get key() {
    return this._i18nKey;
  }

  set color(value) {
    const r = value.r;
    const g = value.g;
    const b = value.b;

    if (this._color.r === r && this._color.g === g && this._color.b === b) {
      return;
    }

    this._color.r = r;
    this._color.g = g;
    this._color.b = b;

    if (!this._model) {
      return;
    }

    if (this._symbolColors) {
      if (this._font) {
        this._updateText();
      }
    } else {
      this._colorUniform[0] = this._color.r;
      this._colorUniform[1] = this._color.g;
      this._colorUniform[2] = this._color.b;

      for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
        const mi = this._model.meshInstances[i];
        mi.setParameter('material_emissive', this._colorUniform);
      }
    }

    if (this._element) {
      this._element.fire('set:color', this._color);
    }
  }

  get color() {
    return this._color;
  }

  set opacity(value) {
    if (this._color.a !== value) {
      this._color.a = value;

      if (this._model) {
        for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
          const mi = this._model.meshInstances[i];
          mi.setParameter('material_opacity', value);
        }
      }
    }

    if (this._element) {
      this._element.fire('set:opacity', value);
    }
  }

  get opacity() {
    return this._color.a;
  }

  set lineHeight(value) {
    const _prev = this._lineHeight;
    this._lineHeight = value;
    this._scaledLineHeight = value;

    if (_prev !== value && this._font) {
      this._updateText();
    }
  }

  get lineHeight() {
    return this._lineHeight;
  }

  set wrapLines(value) {
    const _prev = this._wrapLines;
    this._wrapLines = value;

    if (_prev !== value && this._font) {
      this._updateText();
    }
  }

  get wrapLines() {
    return this._wrapLines;
  }

  get lines() {
    return this._lineContents;
  }

  set spacing(value) {
    const _prev = this._spacing;
    this._spacing = value;

    if (_prev !== value && this._font) {
      this._updateText();
    }
  }

  get spacing() {
    return this._spacing;
  }

  set fontSize(value) {
    const _prev = this._fontSize;
    this._fontSize = value;
    this._originalFontSize = value;

    if (_prev !== value && this._font) {
      this._updateText();
    }
  }

  get fontSize() {
    return this._fontSize;
  }

  set fontAsset(value) {
    this._fontAsset.defaultAsset = value;
  }

  get fontAsset() {
    return this._fontAsset.localizedAsset;
  }

  set font(value) {
    let previousFontType;

    if (this._font) {
      previousFontType = this._font.type;
      if (this._font.off) this._font.off('render', this._onFontRender, this);
    }

    this._font = value;
    this._fontMinY = 0;
    this._fontMaxY = 0;
    if (!value) return;
    const json = this._font.data;

    for (const charId in json.chars) {
      const data = json.chars[charId];

      if (data.bounds) {
        this._fontMinY = Math.min(this._fontMinY, data.bounds[1]);
        this._fontMaxY = Math.max(this._fontMaxY, data.bounds[3]);
      }
    }

    if (this._font.on) this._font.on('render', this._onFontRender, this);

    if (this._fontAsset.localizedAsset) {
      const asset = this._system.app.assets.get(this._fontAsset.localizedAsset);

      if (asset.resource !== this._font) {
        this._fontAsset.defaultAsset = null;
      }
    }

    if (value.type !== previousFontType) {
      const screenSpace = this._element._isScreenSpace();

      this._updateMaterial(screenSpace);
    }

    for (let i = 0, len = this._font.textures.length; i < len; i++) {
      if (!this._meshInfo[i]) {
        this._meshInfo[i] = new MeshInfo();
      } else {
        const mi = this._meshInfo[i].meshInstance;

        if (mi) {
          mi.setParameter('font_sdfIntensity', this._font.intensity);
          mi.setParameter('font_pxrange', this._getPxRange(this._font));
          mi.setParameter('font_textureWidth', this._font.data.info.maps[i].width);

          this._setTextureParams(mi, this._font.textures[i]);
        }
      }
    }

    let removedModel = false;

    for (let i = this._font.textures.length; i < this._meshInfo.length; i++) {
      if (this._meshInfo[i].meshInstance) {
        if (!removedModel) {
          this._element.removeModelFromLayers(this._model);

          removedModel = true;
        }

        this._removeMeshInstance(this._meshInfo[i].meshInstance);
      }
    }

    if (this._meshInfo.length > this._font.textures.length) this._meshInfo.length = this._font.textures.length;

    this._updateText();
  }

  get font() {
    return this._font;
  }

  set alignment(value) {
    if (value instanceof Vec2) {
      this._alignment.set(value.x, value.y);
    } else {
      this._alignment.set(value[0], value[1]);
    }

    if (this._font) this._updateText();
  }

  get alignment() {
    return this._alignment;
  }

  set autoWidth(value) {
    const old = this._autoWidth;
    this._autoWidth = value;

    if (value && Math.abs(this._element.anchor.x - this._element.anchor.z) < 0.0001) {
      this._element.width = this.width;
    }

    if (old !== value) {
      const newFontSize = this._shouldAutoFit() ? this._maxFontSize : this._originalFontSize;

      if (newFontSize !== this._fontSize) {
        this._fontSize = newFontSize;

        if (this._font) {
          this._updateText();
        }
      }
    }
  }

  get autoWidth() {
    return this._autoWidth;
  }

  set autoHeight(value) {
    const old = this._autoHeight;
    this._autoHeight = value;

    if (value && Math.abs(this._element.anchor.y - this._element.anchor.w) < 0.0001) {
      this._element.height = this.height;
    }

    if (old !== value) {
      const newFontSize = this._shouldAutoFit() ? this._maxFontSize : this._originalFontSize;

      if (newFontSize !== this._fontSize) {
        this._fontSize = newFontSize;

        if (this._font) {
          this._updateText();
        }
      }
    }
  }

  get autoHeight() {
    return this._autoHeight;
  }

  set rtlReorder(value) {
    if (this._rtlReorder !== value) {
      this._rtlReorder = value;

      if (this._font) {
        this._updateText();
      }
    }
  }

  get rtlReorder() {
    return this._rtlReorder;
  }

  set unicodeConverter(value) {
    if (this._unicodeConverter !== value) {
      this._unicodeConverter = value;

      this._setText(this._text);
    }
  }

  get unicodeConverter() {
    return this._unicodeConverter;
  }

  get aabb() {
    if (this._aabbDirty) {
      let initialized = false;

      for (let i = 0; i < this._meshInfo.length; i++) {
        if (!this._meshInfo[i].meshInstance) continue;

        if (!initialized) {
          this._aabb.copy(this._meshInfo[i].meshInstance.aabb);

          initialized = true;
        } else {
          this._aabb.add(this._meshInfo[i].meshInstance.aabb);
        }
      }

      this._aabbDirty = false;
    }

    return this._aabb;
  }

  set outlineColor(value) {
    const r = value instanceof Color ? value.r : value[0];
    const g = value instanceof Color ? value.g : value[1];
    const b = value instanceof Color ? value.b : value[2];
    const a = value instanceof Color ? value.a : value[3];

    if (this._outlineColor.r === r && this._outlineColor.g === g && this._outlineColor.b === b && this._outlineColor.a === a) {
      return;
    }

    this._outlineColor.r = r;
    this._outlineColor.g = g;
    this._outlineColor.b = b;
    this._outlineColor.a = a;

    if (!this._model) {
      return;
    }

    if (this._symbolOutlineParams) {
      if (this._font) {
        this._updateText();
      }
    } else {
      this._outlineColorUniform[0] = this._outlineColor.r;
      this._outlineColorUniform[1] = this._outlineColor.g;
      this._outlineColorUniform[2] = this._outlineColor.b;
      this._outlineColorUniform[3] = this._outlineColor.a;

      for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
        const mi = this._model.meshInstances[i];
        mi.setParameter('outline_color', this._outlineColorUniform);
      }
    }

    if (this._element) {
      this._element.fire('set:outline', this._color);
    }
  }

  get outlineColor() {
    return this._outlineColor;
  }

  set outlineThickness(value) {
    const _prev = this._outlineThickness;
    this._outlineThickness = value;

    if (_prev !== value && this._font) {
      if (!this._model) {
        return;
      }

      if (this._symbolOutlineParams) {
        if (this._font) {
          this._updateText();
        }
      } else {
        for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
          const mi = this._model.meshInstances[i];
          mi.setParameter('outline_thickness', this._outlineThicknessScale * this._outlineThickness);
        }
      }
    }
  }

  get outlineThickness() {
    return this._outlineThickness;
  }

  set shadowColor(value) {
    const r = value instanceof Color ? value.r : value[0];
    const g = value instanceof Color ? value.g : value[1];
    const b = value instanceof Color ? value.b : value[2];
    const a = value instanceof Color ? value.a : value[3];

    if (this._shadowColor.r === r && this._shadowColor.g === g && this._shadowColor.b === b && this._shadowColor.a === a) {
      return;
    }

    this._shadowColor.r = r;
    this._shadowColor.g = g;
    this._shadowColor.b = b;
    this._shadowColor.a = a;

    if (!this._model) {
      return;
    }

    if (this._symbolShadowParams) {
      if (this._font) {
        this._updateText();
      }
    } else {
      this._shadowColorUniform[0] = this._shadowColor.r;
      this._shadowColorUniform[1] = this._shadowColor.g;
      this._shadowColorUniform[2] = this._shadowColor.b;
      this._shadowColorUniform[3] = this._shadowColor.a;

      for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
        const mi = this._model.meshInstances[i];
        mi.setParameter('shadow_color', this._shadowColorUniform);
      }
    }
  }

  get shadowColor() {
    return this._shadowColor;
  }

  set shadowOffset(value) {
    const x = value instanceof Vec2 ? value.x : value[0],
          y = value instanceof Vec2 ? value.y : value[1];

    if (this._shadowOffset.x === x && this._shadowOffset.y === y) {
      return;
    }

    this._shadowOffset.set(x, y);

    if (this._font && this._model) {
      if (this._symbolShadowParams) {
        this._updateText();
      } else {
        for (let i = 0, len = this._model.meshInstances.length; i < len; i++) {
          const ratio = -this._font.data.info.maps[i].width / this._font.data.info.maps[i].height;
          this._shadowOffsetUniform[0] = this._shadowOffsetScale * this._shadowOffset.x;
          this._shadowOffsetUniform[1] = ratio * this._shadowOffsetScale * this._shadowOffset.y;
          const mi = this._model.meshInstances[i];
          mi.setParameter('shadow_offset', this._shadowOffsetUniform);
        }
      }
    }
  }

  get shadowOffset() {
    return this._shadowOffset;
  }

  set minFontSize(value) {
    if (this._minFontSize === value) return;
    this._minFontSize = value;

    if (this.font && this._shouldAutoFit()) {
      this._updateText();
    }
  }

  get minFontSize() {
    return this._minFontSize;
  }

  set maxFontSize(value) {
    if (this._maxFontSize === value) return;
    this._maxFontSize = value;

    if (this.font && this._shouldAutoFit()) {
      this._updateText();
    }
  }

  get maxFontSize() {
    return this._maxFontSize;
  }

  set autoFitWidth(value) {
    if (this._autoFitWidth === value) return;
    this._autoFitWidth = value;
    this._fontSize = this._shouldAutoFit() ? this._maxFontSize : this._originalFontSize;

    if (this.font) {
      this._updateText();
    }
  }

  get autoFitWidth() {
    return this._autoFitWidth;
  }

  set autoFitHeight(value) {
    if (this._autoFitHeight === value) return;
    this._autoFitHeight = value;
    this._fontSize = this._shouldAutoFit() ? this._maxFontSize : this._originalFontSize;

    if (this.font) {
      this._updateText();
    }
  }

  get autoFitHeight() {
    return this._autoFitHeight;
  }

  set maxLines(value) {
    if (this._maxLines === value) return;
    if (value === null && this._maxLines === -1) return;
    this._maxLines = value === null ? -1 : value;

    if (this.font && this._wrapLines) {
      this._updateText();
    }
  }

  get maxLines() {
    return this._maxLines;
  }

  set enableMarkup(value) {
    value = !!value;
    if (this._enableMarkup === value) return;
    this._enableMarkup = value;

    if (this.font) {
      this._updateText();
    }

    const screenSpace = this._element._isScreenSpace();

    this._updateMaterial(screenSpace);
  }

  get enableMarkup() {
    return this._enableMarkup;
  }

  get symbols() {
    return this._symbols;
  }

  get symbolColors() {
    if (this._symbolColors === null) {
      return null;
    }

    return this._symbolColors.map(function (c) {
      return this._colorPalette.slice(c * 3, c * 3 + 3);
    }, this);
  }

  get symbolOutlineParams() {
    if (this._symbolOutlineParams === null) {
      return null;
    }

    return this._symbolOutlineParams.map(function (paramId) {
      return this._outlinePalette.slice(paramId * 5, paramId * 5 + 5);
    }, this);
  }

  get symbolShadowParams() {
    if (this._symbolShadowParams === null) {
      return null;
    }

    return this._symbolShadowParams.map(function (paramId) {
      return this._shadowPalette.slice(paramId * 6, paramId * 6 + 6);
    }, this);
  }

  get rtl() {
    return this._rtl;
  }

  set rangeStart(rangeStart) {
    rangeStart = Math.max(0, Math.min(rangeStart, this._symbols.length));

    if (rangeStart !== this._rangeStart) {
      this._rangeStart = rangeStart;

      this._updateRenderRange();
    }
  }

  get rangeStart() {
    return this._rangeStart;
  }

  set rangeEnd(rangeEnd) {
    rangeEnd = Math.max(this._rangeStart, Math.min(rangeEnd, this._symbols.length));

    if (rangeEnd !== this._rangeEnd) {
      this._rangeEnd = rangeEnd;

      this._updateRenderRange();
    }
  }

  get rangeEnd() {
    return this._rangeEnd;
  }

}

const position = new Vec3();
const invParentWtm = new Mat4();
const vecA$1 = new Vec3();
const vecB$1 = new Vec3();
const matA = new Mat4();
const matB = new Mat4();
const matC = new Mat4();
const matD = new Mat4();

class ElementComponent$2 extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._beingInitialized = false;
    this._anchor = new Vec4();
    this._localAnchor = new Vec4();
    this._pivot = new Vec2();
    this._width = this._calculatedWidth = 32;
    this._height = this._calculatedHeight = 32;
    this._margin = new Vec4(0, 0, -32, -32);
    this._modelTransform = new Mat4();
    this._screenToWorld = new Mat4();
    this._anchorTransform = new Mat4();
    this._anchorDirty = true;
    this._parentWorldTransform = new Mat4();
    this._screenTransform = new Mat4();
    this._screenCorners = [new Vec3(), new Vec3(), new Vec3(), new Vec3()];
    this._canvasCorners = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];
    this._worldCorners = [new Vec3(), new Vec3(), new Vec3(), new Vec3()];
    this._cornersDirty = true;
    this._canvasCornersDirty = true;
    this._worldCornersDirty = true;
    this.entity.on('insert', this._onInsert, this);

    this._patch();

    this.screen = null;
    this._type = ELEMENTTYPE_GROUP;
    this._image = null;
    this._text = null;
    this._group = null;
    this._drawOrder = 0;
    this._fitMode = FITMODE_STRETCH;
    this._useInput = false;
    this._layers = [LAYERID_UI];
    this._addedModels = [];
    this._batchGroupId = -1;
    this._offsetReadAt = 0;
    this._maskOffset = 0.5;
    this._maskedBy = null;
  }

  get _absLeft() {
    return this._localAnchor.x + this._margin.x;
  }

  get _absRight() {
    return this._localAnchor.z - this._margin.z;
  }

  get _absTop() {
    return this._localAnchor.w - this._margin.w;
  }

  get _absBottom() {
    return this._localAnchor.y + this._margin.y;
  }

  get _hasSplitAnchorsX() {
    return Math.abs(this._anchor.x - this._anchor.z) > 0.001;
  }

  get _hasSplitAnchorsY() {
    return Math.abs(this._anchor.y - this._anchor.w) > 0.001;
  }

  get aabb() {
    if (this._image) return this._image.aabb;
    if (this._text) return this._text.aabb;
    return null;
  }

  set anchor(value) {
    if (value instanceof Vec4) {
      this._anchor.copy(value);
    } else {
      this._anchor.set(...value);
    }

    if (!this.entity._parent && !this.screen) {
      this._calculateLocalAnchors();
    } else {
      this._calculateSize(this._hasSplitAnchorsX, this._hasSplitAnchorsY);
    }

    this._anchorDirty = true;
    if (!this.entity._dirtyLocal) this.entity._dirtifyLocal();
    this.fire('set:anchor', this._anchor);
  }

  get anchor() {
    return this._anchor;
  }

  set batchGroupId(value) {
    if (this._batchGroupId === value) return;

    if (this.entity.enabled && this._batchGroupId >= 0) {
      var _this$system$app$batc;

      (_this$system$app$batc = this.system.app.batcher) == null ? void 0 : _this$system$app$batc.remove(BatchGroup.ELEMENT, this.batchGroupId, this.entity);
    }

    if (this.entity.enabled && value >= 0) {
      var _this$system$app$batc2;

      (_this$system$app$batc2 = this.system.app.batcher) == null ? void 0 : _this$system$app$batc2.insert(BatchGroup.ELEMENT, value, this.entity);
    }

    if (value < 0 && this._batchGroupId >= 0 && this.enabled && this.entity.enabled) {
      if (this._image && this._image._renderable.model) {
        this.addModelToLayers(this._image._renderable.model);
      } else if (this._text && this._text._model) {
        this.addModelToLayers(this._text._model);
      }
    }

    this._batchGroupId = value;
  }

  get batchGroupId() {
    return this._batchGroupId;
  }

  set bottom(value) {
    this._margin.y = value;
    const p = this.entity.getLocalPosition();
    const wt = this._absTop;
    const wb = this._localAnchor.y + value;

    this._setHeight(wt - wb);

    p.y = value + this._calculatedHeight * this._pivot.y;
    this.entity.setLocalPosition(p);
  }

  get bottom() {
    return this._margin.y;
  }

  set calculatedWidth(value) {
    this._setCalculatedWidth(value, true);
  }

  get calculatedWidth() {
    return this._calculatedWidth;
  }

  set calculatedHeight(value) {
    this._setCalculatedHeight(value, true);
  }

  get calculatedHeight() {
    return this._calculatedHeight;
  }

  get canvasCorners() {
    if (!this._canvasCornersDirty || !this.screen || !this.screen.screen.screenSpace) return this._canvasCorners;
    const device = this.system.app.graphicsDevice;
    const screenCorners = this.screenCorners;
    const sx = device.canvas.clientWidth / device.width;
    const sy = device.canvas.clientHeight / device.height;

    for (let i = 0; i < 4; i++) {
      this._canvasCorners[i].set(screenCorners[i].x * sx, (device.height - screenCorners[i].y) * sy);
    }

    this._canvasCornersDirty = false;
    return this._canvasCorners;
  }

  set drawOrder(value) {
    let priority = 0;

    if (this.screen) {
      priority = this.screen.screen.priority;
    }

    if (value > 0xFFFFFF) {
      value = 0xFFFFFF;
    }

    this._drawOrder = (priority << 24) + value;
    this.fire('set:draworder', this._drawOrder);
  }

  get drawOrder() {
    return this._drawOrder;
  }

  set height(value) {
    this._height = value;

    if (!this._hasSplitAnchorsY) {
      this._setCalculatedHeight(value, true);
    }

    this.fire('set:height', this._height);
  }

  get height() {
    return this._height;
  }

  set layers(value) {
    if (this._addedModels.length) {
      for (let i = 0; i < this._layers.length; i++) {
        const layer = this.system.app.scene.layers.getLayerById(this._layers[i]);

        if (layer) {
          for (let j = 0; j < this._addedModels.length; j++) {
            layer.removeMeshInstances(this._addedModels[j].meshInstances);
          }
        }
      }
    }

    this._layers = value;
    if (!this.enabled || !this.entity.enabled || !this._addedModels.length) return;

    for (let i = 0; i < this._layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this._layers[i]);

      if (layer) {
        for (let j = 0; j < this._addedModels.length; j++) {
          layer.addMeshInstances(this._addedModels[j].meshInstances);
        }
      }
    }
  }

  get layers() {
    return this._layers;
  }

  set left(value) {
    this._margin.x = value;
    const p = this.entity.getLocalPosition();
    const wr = this._absRight;
    const wl = this._localAnchor.x + value;

    this._setWidth(wr - wl);

    p.x = value + this._calculatedWidth * this._pivot.x;
    this.entity.setLocalPosition(p);
  }

  get left() {
    return this._margin.x;
  }

  set margin(value) {
    this._margin.copy(value);

    this._calculateSize(true, true);

    this.fire('set:margin', this._margin);
  }

  get margin() {
    return this._margin;
  }

  get maskedBy() {
    return this._maskedBy;
  }

  set pivot(value) {
    const {
      pivot,
      margin
    } = this;
    const prevX = pivot.x;
    const prevY = pivot.y;

    if (value instanceof Vec2) {
      pivot.copy(value);
    } else {
      pivot.set(...value);
    }

    const mx = margin.x + margin.z;
    const dx = pivot.x - prevX;
    margin.x += mx * dx;
    margin.z -= mx * dx;
    const my = margin.y + margin.w;
    const dy = pivot.y - prevY;
    margin.y += my * dy;
    margin.w -= my * dy;
    this._anchorDirty = true;
    this._cornersDirty = true;
    this._worldCornersDirty = true;

    this._calculateSize(false, false);

    this._flagChildrenAsDirty();

    this.fire('set:pivot', pivot);
  }

  get pivot() {
    return this._pivot;
  }

  set right(value) {
    this._margin.z = value;
    const p = this.entity.getLocalPosition();
    const wl = this._absLeft;
    const wr = this._localAnchor.z - value;

    this._setWidth(wr - wl);

    p.x = this._localAnchor.z - this._localAnchor.x - value - this._calculatedWidth * (1 - this._pivot.x);
    this.entity.setLocalPosition(p);
  }

  get right() {
    return this._margin.z;
  }

  get screenCorners() {
    if (!this._cornersDirty || !this.screen) return this._screenCorners;
    const parentBottomLeft = this.entity.parent && this.entity.parent.element && this.entity.parent.element.screenCorners[0];

    this._screenCorners[0].set(this._absLeft, this._absBottom, 0);

    this._screenCorners[1].set(this._absRight, this._absBottom, 0);

    this._screenCorners[2].set(this._absRight, this._absTop, 0);

    this._screenCorners[3].set(this._absLeft, this._absTop, 0);

    const screenSpace = this.screen.screen.screenSpace;

    for (let i = 0; i < 4; i++) {
      this._screenTransform.transformPoint(this._screenCorners[i], this._screenCorners[i]);

      if (screenSpace) this._screenCorners[i].mulScalar(this.screen.screen.scale);

      if (parentBottomLeft) {
        this._screenCorners[i].add(parentBottomLeft);
      }
    }

    this._cornersDirty = false;
    this._canvasCornersDirty = true;
    this._worldCornersDirty = true;
    return this._screenCorners;
  }

  get textWidth() {
    return this._text ? this._text.width : 0;
  }

  get textHeight() {
    return this._text ? this._text.height : 0;
  }

  set top(value) {
    this._margin.w = value;
    const p = this.entity.getLocalPosition();
    const wb = this._absBottom;
    const wt = this._localAnchor.w - value;

    this._setHeight(wt - wb);

    p.y = this._localAnchor.w - this._localAnchor.y - value - this._calculatedHeight * (1 - this._pivot.y);
    this.entity.setLocalPosition(p);
  }

  get top() {
    return this._margin.w;
  }

  set type(value) {
    if (value !== this._type) {
      this._type = value;

      if (this._image) {
        this._image.destroy();

        this._image = null;
      }

      if (this._text) {
        this._text.destroy();

        this._text = null;
      }

      if (value === ELEMENTTYPE_IMAGE) {
        this._image = new ImageElement(this);
      } else if (value === ELEMENTTYPE_TEXT) {
        this._text = new TextElement(this);
      }
    }
  }

  get type() {
    return this._type;
  }

  set useInput(value) {
    if (this._useInput === value) return;
    this._useInput = value;

    if (this.system.app.elementInput) {
      if (value) {
        if (this.enabled && this.entity.enabled) {
          this.system.app.elementInput.addElement(this);
        }
      } else {
        this.system.app.elementInput.removeElement(this);
      }
    } else {
      if (this._useInput === true) ;
    }

    this.fire('set:useInput', value);
  }

  get useInput() {
    return this._useInput;
  }

  set fitMode(value) {
    this._fitMode = value;

    this._calculateSize(true, true);

    if (this._image) {
      this._image.refreshMesh();
    }
  }

  get fitMode() {
    return this._fitMode;
  }

  set width(value) {
    this._width = value;

    if (!this._hasSplitAnchorsX) {
      this._setCalculatedWidth(value, true);
    }

    this.fire('set:width', this._width);
  }

  get width() {
    return this._width;
  }

  get worldCorners() {
    if (!this._worldCornersDirty) {
      return this._worldCorners;
    }

    if (this.screen) {
      const screenCorners = this.screenCorners;

      if (!this.screen.screen.screenSpace) {
        matA.copy(this.screen.screen._screenMatrix);
        matA.data[13] = -matA.data[13];
        matA.mul2(this.screen.getWorldTransform(), matA);

        for (let i = 0; i < 4; i++) {
          matA.transformPoint(screenCorners[i], this._worldCorners[i]);
        }
      }
    } else {
      const localPos = this.entity.getLocalPosition();
      matA.setTranslate(-localPos.x, -localPos.y, -localPos.z);
      matB.setTRS(Vec3.ZERO, this.entity.getLocalRotation(), this.entity.getLocalScale());
      matC.setTranslate(localPos.x, localPos.y, localPos.z);
      const entity = this.entity.parent ? this.entity.parent : this.entity;
      matD.copy(entity.getWorldTransform());
      matD.mul(matC).mul(matB).mul(matA);
      vecA$1.set(localPos.x - this.pivot.x * this.calculatedWidth, localPos.y - this.pivot.y * this.calculatedHeight, localPos.z);
      matD.transformPoint(vecA$1, this._worldCorners[0]);
      vecA$1.set(localPos.x + (1 - this.pivot.x) * this.calculatedWidth, localPos.y - this.pivot.y * this.calculatedHeight, localPos.z);
      matD.transformPoint(vecA$1, this._worldCorners[1]);
      vecA$1.set(localPos.x + (1 - this.pivot.x) * this.calculatedWidth, localPos.y + (1 - this.pivot.y) * this.calculatedHeight, localPos.z);
      matD.transformPoint(vecA$1, this._worldCorners[2]);
      vecA$1.set(localPos.x - this.pivot.x * this.calculatedWidth, localPos.y + (1 - this.pivot.y) * this.calculatedHeight, localPos.z);
      matD.transformPoint(vecA$1, this._worldCorners[3]);
    }

    this._worldCornersDirty = false;
    return this._worldCorners;
  }

  _patch() {
    this.entity._sync = this._sync;
    this.entity.setPosition = this._setPosition;
    this.entity.setLocalPosition = this._setLocalPosition;
  }

  _unpatch() {
    this.entity._sync = Entity.prototype._sync;
    this.entity.setPosition = Entity.prototype.setPosition;
    this.entity.setLocalPosition = Entity.prototype.setLocalPosition;
  }

  _setPosition(x, y, z) {
    if (!this.element.screen) {
      Entity.prototype.setPosition.call(this, x, y, z);
      return;
    }

    if (x instanceof Vec3) {
      position.copy(x);
    } else {
      position.set(x, y, z);
    }

    this.getWorldTransform();
    invParentWtm.copy(this.element._screenToWorld).invert();
    invParentWtm.transformPoint(position, this.localPosition);
    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  _setLocalPosition(x, y, z) {
    if (x instanceof Vec3) {
      this.localPosition.copy(x);
    } else {
      this.localPosition.set(x, y, z);
    }

    const element = this.element;
    const p = this.localPosition;
    const pvt = element._pivot;
    element._margin.x = p.x - element._calculatedWidth * pvt.x;
    element._margin.z = element._localAnchor.z - element._localAnchor.x - element._calculatedWidth - element._margin.x;
    element._margin.y = p.y - element._calculatedHeight * pvt.y;
    element._margin.w = element._localAnchor.w - element._localAnchor.y - element._calculatedHeight - element._margin.y;
    if (!this._dirtyLocal) this._dirtifyLocal();
  }

  _sync() {
    const element = this.element;
    const screen = element.screen;

    if (screen) {
      if (element._anchorDirty) {
        let resx = 0;
        let resy = 0;
        let px = 0;
        let py = 1;

        if (this._parent && this._parent.element) {
          resx = this._parent.element.calculatedWidth;
          resy = this._parent.element.calculatedHeight;
          px = this._parent.element.pivot.x;
          py = this._parent.element.pivot.y;
        } else {
          const resolution = screen.screen.resolution;
          resx = resolution.x / screen.screen.scale;
          resy = resolution.y / screen.screen.scale;
        }

        element._anchorTransform.setTranslate(resx * (element.anchor.x - px), -(resy * (py - element.anchor.y)), 0);

        element._anchorDirty = false;

        element._calculateLocalAnchors();
      }

      if (element._sizeDirty) {
        element._calculateSize(false, false);
      }
    }

    if (this._dirtyLocal) {
      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);
      const p = this.localPosition;
      const pvt = element._pivot;
      element._margin.x = p.x - element._calculatedWidth * pvt.x;
      element._margin.z = element._localAnchor.z - element._localAnchor.x - element._calculatedWidth - element._margin.x;
      element._margin.y = p.y - element._calculatedHeight * pvt.y;
      element._margin.w = element._localAnchor.w - element._localAnchor.y - element._calculatedHeight - element._margin.y;
      this._dirtyLocal = false;
    }

    if (!screen) {
      if (this._dirtyWorld) {
        element._cornersDirty = true;
        element._canvasCornersDirty = true;
        element._worldCornersDirty = true;
      }

      return Entity.prototype._sync.call(this);
    }

    if (this._dirtyWorld) {
      if (this._parent === null) {
        this.worldTransform.copy(this.localTransform);
      } else {
        if (this._parent.element) {
          element._screenToWorld.mul2(this._parent.element._modelTransform, element._anchorTransform);
        } else {
          element._screenToWorld.copy(element._anchorTransform);
        }

        element._modelTransform.mul2(element._screenToWorld, this.localTransform);

        if (screen) {
          element._screenToWorld.mul2(screen.screen._screenMatrix, element._screenToWorld);

          if (!screen.screen.screenSpace) {
            element._screenToWorld.mul2(screen.worldTransform, element._screenToWorld);
          }

          this.worldTransform.mul2(element._screenToWorld, this.localTransform);
          const parentWorldTransform = element._parentWorldTransform;
          parentWorldTransform.setIdentity();
          const parent = this._parent;

          if (parent && parent.element && parent !== screen) {
            matA.setTRS(Vec3.ZERO, parent.getLocalRotation(), parent.getLocalScale());
            parentWorldTransform.mul2(parent.element._parentWorldTransform, matA);
          }

          const depthOffset = vecA$1;
          depthOffset.set(0, 0, this.localPosition.z);
          const pivotOffset = vecB$1;
          pivotOffset.set(element._absLeft + element._pivot.x * element.calculatedWidth, element._absBottom + element._pivot.y * element.calculatedHeight, 0);
          matA.setTranslate(-pivotOffset.x, -pivotOffset.y, -pivotOffset.z);
          matB.setTRS(depthOffset, this.getLocalRotation(), this.getLocalScale());
          matC.setTranslate(pivotOffset.x, pivotOffset.y, pivotOffset.z);

          element._screenTransform.mul2(element._parentWorldTransform, matC).mul(matB).mul(matA);

          element._cornersDirty = true;
          element._canvasCornersDirty = true;
          element._worldCornersDirty = true;
        } else {
          this.worldTransform.copy(element._modelTransform);
        }
      }

      this._dirtyWorld = false;
    }
  }

  _onInsert(parent) {
    const result = this._parseUpToScreen();

    this.entity._dirtifyWorld();

    this._updateScreen(result.screen);

    this._dirtifyMask();
  }

  _dirtifyMask() {
    let current = this.entity;

    while (current) {
      const next = current.parent;

      if ((next === null || next.screen) && current.element) {
        if (!this.system._prerender || !this.system._prerender.length) {
          this.system._prerender = [];
          this.system.app.once('prerender', this._onPrerender, this);
        }

        const i = this.system._prerender.indexOf(this.entity);

        if (i >= 0) {
          this.system._prerender.splice(i, 1);
        }

        const j = this.system._prerender.indexOf(current);

        if (j < 0) {
          this.system._prerender.push(current);
        }
      }

      current = next;
    }
  }

  _onPrerender() {
    for (let i = 0; i < this.system._prerender.length; i++) {
      const mask = this.system._prerender[i];

      if (mask.element) {
        const depth = 1;
        mask.element.syncMask(depth);
      }
    }

    this.system._prerender.length = 0;
  }

  _bindScreen(screen) {
    screen._bindElement(this);
  }

  _unbindScreen(screen) {
    screen._unbindElement(this);
  }

  _updateScreen(screen) {
    if (this.screen && this.screen !== screen) {
      this._unbindScreen(this.screen.screen);
    }

    const previousScreen = this.screen;
    this.screen = screen;

    if (this.screen) {
      this._bindScreen(this.screen.screen);
    }

    this._calculateSize(this._hasSplitAnchorsX, this._hasSplitAnchorsY);

    this.fire('set:screen', this.screen, previousScreen);
    this._anchorDirty = true;
    const children = this.entity.children;

    for (let i = 0, l = children.length; i < l; i++) {
      if (children[i].element) children[i].element._updateScreen(screen);
    }

    if (this.screen) this.screen.screen.syncDrawOrder();
  }

  syncMask(depth) {
    const result = this._parseUpToScreen();

    this._updateMask(result.mask, depth);
  }

  _setMaskedBy(mask) {
    const renderableElement = this._image || this._text;

    if (mask) {
      const ref = mask.element._image._maskRef;
      const sp = new StencilParameters({
        ref: ref,
        func: FUNC_EQUAL
      });

      if (renderableElement && renderableElement._setStencil) {
        renderableElement._setStencil(sp);
      }

      this._maskedBy = mask;
    } else {
      if (renderableElement && renderableElement._setStencil) {
        renderableElement._setStencil(null);
      }

      this._maskedBy = null;
    }
  }

  _updateMask(currentMask, depth) {
    if (currentMask) {
      this._setMaskedBy(currentMask);

      if (this.mask) {
        const ref = currentMask.element._image._maskRef;
        const sp = new StencilParameters({
          ref: ref,
          func: FUNC_EQUAL,
          zpass: STENCILOP_INCREMENT
        });

        this._image._setStencil(sp);

        this._image._maskRef = depth;
        depth++;
        currentMask = this.entity;
      }

      const children = this.entity.children;

      for (let i = 0, l = children.length; i < l; i++) {
        if (children[i].element) {
          children[i].element._updateMask(currentMask, depth);
        }
      }

      if (this.mask) depth--;
    } else {
      this._setMaskedBy(null);

      if (this.mask) {
        const sp = new StencilParameters({
          ref: depth,
          func: FUNC_ALWAYS,
          zpass: STENCILOP_REPLACE
        });

        this._image._setStencil(sp);

        this._image._maskRef = depth;
        depth++;
        currentMask = this.entity;
      }

      const children = this.entity.children;

      for (let i = 0, l = children.length; i < l; i++) {
        if (children[i].element) {
          children[i].element._updateMask(currentMask, depth);
        }
      }

      if (this.mask) depth--;
    }
  }

  _parseUpToScreen() {
    const result = {
      screen: null,
      mask: null
    };
    let parent = this.entity._parent;

    while (parent && !parent.screen) {
      if (parent.element && parent.element.mask) {
        if (!result.mask) result.mask = parent;
      }

      parent = parent.parent;
    }

    if (parent && parent.screen) result.screen = parent;
    return result;
  }

  _onScreenResize(res) {
    this._anchorDirty = true;
    this._cornersDirty = true;
    this._worldCornersDirty = true;

    this._calculateSize(this._hasSplitAnchorsX, this._hasSplitAnchorsY);

    this.fire('screen:set:resolution', res);
  }

  _onScreenSpaceChange() {
    this.fire('screen:set:screenspace', this.screen.screen.screenSpace);
  }

  _onScreenRemove() {
    if (this.screen) {
      if (this.screen._destroying) {
        this.screen = null;
      } else {
        this._updateScreen(null);
      }
    }
  }

  _calculateLocalAnchors() {
    let resx = 1000;
    let resy = 1000;
    const parent = this.entity._parent;

    if (parent && parent.element) {
      resx = parent.element.calculatedWidth;
      resy = parent.element.calculatedHeight;
    } else if (this.screen) {
      const res = this.screen.screen.resolution;
      const scale = this.screen.screen.scale;
      resx = res.x / scale;
      resy = res.y / scale;
    }

    this._localAnchor.set(this._anchor.x * resx, this._anchor.y * resy, this._anchor.z * resx, this._anchor.w * resy);
  }

  getOffsetPosition(x, y) {
    const p = this.entity.getLocalPosition().clone();
    p.x += x;
    p.y += y;

    this._screenToWorld.transformPoint(p, p);

    return p;
  }

  onLayersChanged(oldComp, newComp) {
    this.addModelToLayers(this._image ? this._image._renderable.model : this._text._model);
    oldComp.off('add', this.onLayerAdded, this);
    oldComp.off('remove', this.onLayerRemoved, this);
    newComp.on('add', this.onLayerAdded, this);
    newComp.on('remove', this.onLayerRemoved, this);
  }

  onLayerAdded(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;

    if (this._image) {
      layer.addMeshInstances(this._image._renderable.model.meshInstances);
    } else if (this._text) {
      layer.addMeshInstances(this._text._model.meshInstances);
    }
  }

  onLayerRemoved(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;

    if (this._image) {
      layer.removeMeshInstances(this._image._renderable.model.meshInstances);
    } else if (this._text) {
      layer.removeMeshInstances(this._text._model.meshInstances);
    }
  }

  onEnable() {
    if (this._image) this._image.onEnable();
    if (this._text) this._text.onEnable();
    if (this._group) this._group.onEnable();

    if (this.useInput && this.system.app.elementInput) {
      this.system.app.elementInput.addElement(this);
    }

    this.system.app.scene.on('set:layers', this.onLayersChanged, this);

    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on('add', this.onLayerAdded, this);
      this.system.app.scene.layers.on('remove', this.onLayerRemoved, this);
    }

    if (this._batchGroupId >= 0) {
      var _this$system$app$batc3;

      (_this$system$app$batc3 = this.system.app.batcher) == null ? void 0 : _this$system$app$batc3.insert(BatchGroup.ELEMENT, this.batchGroupId, this.entity);
    }

    this.fire('enableelement');
  }

  onDisable() {
    this.system.app.scene.off('set:layers', this.onLayersChanged, this);

    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off('add', this.onLayerAdded, this);
      this.system.app.scene.layers.off('remove', this.onLayerRemoved, this);
    }

    if (this._image) this._image.onDisable();
    if (this._text) this._text.onDisable();
    if (this._group) this._group.onDisable();

    if (this.system.app.elementInput && this.useInput) {
      this.system.app.elementInput.removeElement(this);
    }

    if (this._batchGroupId >= 0) {
      var _this$system$app$batc4;

      (_this$system$app$batc4 = this.system.app.batcher) == null ? void 0 : _this$system$app$batc4.remove(BatchGroup.ELEMENT, this.batchGroupId, this.entity);
    }

    this.fire('disableelement');
  }

  onRemove() {
    this.entity.off('insert', this._onInsert, this);

    this._unpatch();

    if (this._image) this._image.destroy();
    if (this._text) this._text.destroy();

    if (this.system.app.elementInput && this.useInput) {
      this.system.app.elementInput.removeElement(this);
    }

    if (this.screen && this.screen.screen) {
      this._unbindScreen(this.screen.screen);

      this.screen.screen.syncDrawOrder();
    }

    this.off();
  }

  _calculateSize(propagateCalculatedWidth, propagateCalculatedHeight) {
    if (!this.entity._parent && !this.screen) return;

    this._calculateLocalAnchors();

    const newWidth = this._absRight - this._absLeft;
    const newHeight = this._absTop - this._absBottom;

    if (propagateCalculatedWidth) {
      this._setWidth(newWidth);
    } else {
      this._setCalculatedWidth(newWidth, false);
    }

    if (propagateCalculatedHeight) {
      this._setHeight(newHeight);
    } else {
      this._setCalculatedHeight(newHeight, false);
    }

    const p = this.entity.getLocalPosition();
    p.x = this._margin.x + this._calculatedWidth * this._pivot.x;
    p.y = this._margin.y + this._calculatedHeight * this._pivot.y;
    this.entity.setLocalPosition(p);
    this._sizeDirty = false;
  }

  _setWidth(w) {
    this._width = w;

    this._setCalculatedWidth(w, false);

    this.fire('set:width', this._width);
  }

  _setHeight(h) {
    this._height = h;

    this._setCalculatedHeight(h, false);

    this.fire('set:height', this._height);
  }

  _setCalculatedWidth(value, updateMargins) {
    if (Math.abs(value - this._calculatedWidth) <= 1e-4) return;
    this._calculatedWidth = value;

    this.entity._dirtifyLocal();

    if (updateMargins) {
      const p = this.entity.getLocalPosition();
      const pvt = this._pivot;
      this._margin.x = p.x - this._calculatedWidth * pvt.x;
      this._margin.z = this._localAnchor.z - this._localAnchor.x - this._calculatedWidth - this._margin.x;
    }

    this._flagChildrenAsDirty();

    this.fire('set:calculatedWidth', this._calculatedWidth);
    this.fire('resize', this._calculatedWidth, this._calculatedHeight);
  }

  _setCalculatedHeight(value, updateMargins) {
    if (Math.abs(value - this._calculatedHeight) <= 1e-4) return;
    this._calculatedHeight = value;

    this.entity._dirtifyLocal();

    if (updateMargins) {
      const p = this.entity.getLocalPosition();
      const pvt = this._pivot;
      this._margin.y = p.y - this._calculatedHeight * pvt.y;
      this._margin.w = this._localAnchor.w - this._localAnchor.y - this._calculatedHeight - this._margin.y;
    }

    this._flagChildrenAsDirty();

    this.fire('set:calculatedHeight', this._calculatedHeight);
    this.fire('resize', this._calculatedWidth, this._calculatedHeight);
  }

  _flagChildrenAsDirty() {
    const c = this.entity._children;

    for (let i = 0, l = c.length; i < l; i++) {
      if (c[i].element) {
        c[i].element._anchorDirty = true;
        c[i].element._sizeDirty = true;
      }
    }
  }

  addModelToLayers(model) {
    this._addedModels.push(model);

    for (let i = 0; i < this.layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) continue;
      layer.addMeshInstances(model.meshInstances);
    }
  }

  removeModelFromLayers(model) {
    const idx = this._addedModels.indexOf(model);

    if (idx >= 0) {
      this._addedModels.splice(idx, 1);
    }

    for (let i = 0; i < this.layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) continue;
      layer.removeMeshInstances(model.meshInstances);
    }
  }

  getMaskOffset() {
    const frame = this.system.app.frame;

    if (this._offsetReadAt !== frame) {
      this._maskOffset = 0.5;
      this._offsetReadAt = frame;
    }

    const mo = this._maskOffset;
    this._maskOffset -= 0.001;
    return mo;
  }

  isVisibleForCamera(camera) {
    let clipL, clipR, clipT, clipB;

    if (this.maskedBy) {
      const corners = this.maskedBy.element.screenCorners;
      clipL = Math.min(Math.min(corners[0].x, corners[1].x), Math.min(corners[2].x, corners[3].x));
      clipR = Math.max(Math.max(corners[0].x, corners[1].x), Math.max(corners[2].x, corners[3].x));
      clipB = Math.min(Math.min(corners[0].y, corners[1].y), Math.min(corners[2].y, corners[3].y));
      clipT = Math.max(Math.max(corners[0].y, corners[1].y), Math.max(corners[2].y, corners[3].y));
    } else {
      const sw = this.system.app.graphicsDevice.width;
      const sh = this.system.app.graphicsDevice.height;
      const cameraWidth = camera._rect.z * sw;
      const cameraHeight = camera._rect.w * sh;
      clipL = camera._rect.x * sw;
      clipR = clipL + cameraWidth;
      clipT = (1 - camera._rect.y) * sh;
      clipB = clipT - cameraHeight;
    }

    const hitCorners = this.screenCorners;
    const left = Math.min(Math.min(hitCorners[0].x, hitCorners[1].x), Math.min(hitCorners[2].x, hitCorners[3].x));
    const right = Math.max(Math.max(hitCorners[0].x, hitCorners[1].x), Math.max(hitCorners[2].x, hitCorners[3].x));
    const bottom = Math.min(Math.min(hitCorners[0].y, hitCorners[1].y), Math.min(hitCorners[2].y, hitCorners[3].y));
    const top = Math.max(Math.max(hitCorners[0].y, hitCorners[1].y), Math.max(hitCorners[2].y, hitCorners[3].y));

    if (right < clipL || left > clipR || bottom > clipT || top < clipB) {
      return false;
    }

    return true;
  }

  _isScreenSpace() {
    if (this.screen && this.screen.screen) {
      return this.screen.screen.screenSpace;
    }

    return false;
  }

  _isScreenCulled() {
    if (this.screen && this.screen.screen) {
      return this.screen.screen.cull;
    }

    return false;
  }

  _dirtyBatch() {
    if (this.batchGroupId !== -1) {
      var _this$system$app$batc5;

      (_this$system$app$batc5 = this.system.app.batcher) == null ? void 0 : _this$system$app$batc5.markGroupDirty(this.batchGroupId);
    }
  }

}

function _define(name) {
  Object.defineProperty(ElementComponent$2.prototype, name, {
    get: function () {
      if (this._text) {
        return this._text[name];
      } else if (this._image) {
        return this._image[name];
      }

      return null;
    },
    set: function (value) {
      if (this._text) {
        if (this._text[name] !== value) {
          this._dirtyBatch();
        }

        this._text[name] = value;
      } else if (this._image) {
        if (this._image[name] !== value) {
          this._dirtyBatch();
        }

        this._image[name] = value;
      }
    }
  });
}

_define('fontSize');

_define('minFontSize');

_define('maxFontSize');

_define('maxLines');

_define('autoFitWidth');

_define('autoFitHeight');

_define('color');

_define('font');

_define('fontAsset');

_define('spacing');

_define('lineHeight');

_define('wrapLines');

_define('lines');

_define('alignment');

_define('autoWidth');

_define('autoHeight');

_define('rtlReorder');

_define('unicodeConverter');

_define('text');

_define('key');

_define('texture');

_define('textureAsset');

_define('material');

_define('materialAsset');

_define('sprite');

_define('spriteAsset');

_define('spriteFrame');

_define('pixelsPerUnit');

_define('opacity');

_define('rect');

_define('mask');

_define('outlineColor');

_define('outlineThickness');

_define('shadowColor');

_define('shadowOffset');

_define('enableMarkup');

_define('rangeStart');

_define('rangeEnd');

class ElementComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$f = ['enabled'];

class ElementComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'element';
    this.ComponentType = ElementComponent$2;
    this.DataType = ElementComponentData;
    this.schema = _schema$f;
    this._unicodeConverter = null;
    this._rtlReorder = null;
    this._defaultTexture = new Texture(app.graphicsDevice, {
      width: 1,
      height: 1,
      format: PIXELFORMAT_R8_G8_B8_A8,
      name: 'element-system'
    });

    const pixels = this._defaultTexture.lock();

    const pixelData = new Uint8Array(4);
    pixelData[0] = 255.0;
    pixelData[1] = 255.0;
    pixelData[2] = 255.0;
    pixelData[3] = 255.0;
    pixels.set(pixelData);

    this._defaultTexture.unlock();

    this.defaultImageMaterial = null;
    this.defaultImage9SlicedMaterial = null;
    this.defaultImage9TiledMaterial = null;
    this.defaultImageMaskMaterial = null;
    this.defaultImage9SlicedMaskMaterial = null;
    this.defaultImage9TiledMaskMaterial = null;
    this.defaultScreenSpaceImageMaterial = null;
    this.defaultScreenSpaceImage9SlicedMaterial = null;
    this.defaultScreenSpaceImage9TiledMaterial = null;
    this.defaultScreenSpaceImageMask9SlicedMaterial = null;
    this.defaultScreenSpaceImageMask9TiledMaterial = null;
    this.defaultScreenSpaceImageMaskMaterial = null;
    this._defaultTextMaterials = {};
    this.defaultImageMaterials = [];
    this.on('beforeremove', this.onRemoveComponent, this);
  }

  destroy() {
    super.destroy();

    this._defaultTexture.destroy();
  }

  initializeComponentData(component, data, properties) {
    component._beingInitialized = true;

    if (data.anchor !== undefined) {
      if (data.anchor instanceof Vec4) {
        component.anchor.copy(data.anchor);
      } else {
        component.anchor.set(data.anchor[0], data.anchor[1], data.anchor[2], data.anchor[3]);
      }
    }

    if (data.pivot !== undefined) {
      if (data.pivot instanceof Vec2) {
        component.pivot.copy(data.pivot);
      } else {
        component.pivot.set(data.pivot[0], data.pivot[1]);
      }
    }

    const splitHorAnchors = Math.abs(component.anchor.x - component.anchor.z) > 0.001;
    const splitVerAnchors = Math.abs(component.anchor.y - component.anchor.w) > 0.001;
    let _marginChange = false;
    let color;

    if (data.margin !== undefined) {
      if (data.margin instanceof Vec4) {
        component.margin.copy(data.margin);
      } else {
        component._margin.set(data.margin[0], data.margin[1], data.margin[2], data.margin[3]);
      }

      _marginChange = true;
    }

    if (data.left !== undefined) {
      component._margin.x = data.left;
      _marginChange = true;
    }

    if (data.bottom !== undefined) {
      component._margin.y = data.bottom;
      _marginChange = true;
    }

    if (data.right !== undefined) {
      component._margin.z = data.right;
      _marginChange = true;
    }

    if (data.top !== undefined) {
      component._margin.w = data.top;
      _marginChange = true;
    }

    if (_marginChange) {
      component.margin = component._margin;
    }

    let shouldForceSetAnchor = false;

    if (data.width !== undefined && !splitHorAnchors) {
      component.width = data.width;
    } else if (splitHorAnchors) {
      shouldForceSetAnchor = true;
    }

    if (data.height !== undefined && !splitVerAnchors) {
      component.height = data.height;
    } else if (splitVerAnchors) {
      shouldForceSetAnchor = true;
    }

    if (shouldForceSetAnchor) {
      component.anchor = component.anchor;
    }

    if (data.enabled !== undefined) {
      component.enabled = data.enabled;
    }

    if (data.useInput !== undefined) {
      component.useInput = data.useInput;
    }

    if (data.fitMode !== undefined) {
      component.fitMode = data.fitMode;
    }

    component.batchGroupId = data.batchGroupId === undefined || data.batchGroupId === null ? -1 : data.batchGroupId;

    if (data.layers && Array.isArray(data.layers)) {
      component.layers = data.layers.slice(0);
    }

    if (data.type !== undefined) {
      component.type = data.type;
    }

    if (component.type === ELEMENTTYPE_IMAGE) {
      if (data.rect !== undefined) {
        component.rect = data.rect;
      }

      if (data.color !== undefined) {
        color = data.color;

        if (!(color instanceof Color)) {
          color = new Color(data.color[0], data.color[1], data.color[2]);
        }

        component.color = color;
      }

      if (data.opacity !== undefined) component.opacity = data.opacity;
      if (data.textureAsset !== undefined) component.textureAsset = data.textureAsset;
      if (data.texture) component.texture = data.texture;
      if (data.spriteAsset !== undefined) component.spriteAsset = data.spriteAsset;
      if (data.sprite) component.sprite = data.sprite;
      if (data.spriteFrame !== undefined) component.spriteFrame = data.spriteFrame;
      if (data.pixelsPerUnit !== undefined && data.pixelsPerUnit !== null) component.pixelsPerUnit = data.pixelsPerUnit;
      if (data.materialAsset !== undefined) component.materialAsset = data.materialAsset;
      if (data.material) component.material = data.material;

      if (data.mask !== undefined) {
        component.mask = data.mask;
      }
    } else if (component.type === ELEMENTTYPE_TEXT) {
      if (data.autoWidth !== undefined) component.autoWidth = data.autoWidth;
      if (data.autoHeight !== undefined) component.autoHeight = data.autoHeight;
      if (data.rtlReorder !== undefined) component.rtlReorder = data.rtlReorder;
      if (data.unicodeConverter !== undefined) component.unicodeConverter = data.unicodeConverter;

      if (data.text !== null && data.text !== undefined) {
        component.text = data.text;
      } else if (data.key !== null && data.key !== undefined) {
        component.key = data.key;
      }

      if (data.color !== undefined) {
        color = data.color;

        if (!(color instanceof Color)) {
          color = new Color(color[0], color[1], color[2]);
        }

        component.color = color;
      }

      if (data.opacity !== undefined) {
        component.opacity = data.opacity;
      }

      if (data.spacing !== undefined) component.spacing = data.spacing;

      if (data.fontSize !== undefined) {
        component.fontSize = data.fontSize;
        if (!data.lineHeight) component.lineHeight = data.fontSize;
      }

      if (data.lineHeight !== undefined) component.lineHeight = data.lineHeight;
      if (data.maxLines !== undefined) component.maxLines = data.maxLines;
      if (data.wrapLines !== undefined) component.wrapLines = data.wrapLines;
      if (data.minFontSize !== undefined) component.minFontSize = data.minFontSize;
      if (data.maxFontSize !== undefined) component.maxFontSize = data.maxFontSize;
      if (data.autoFitWidth) component.autoFitWidth = data.autoFitWidth;
      if (data.autoFitHeight) component.autoFitHeight = data.autoFitHeight;
      if (data.fontAsset !== undefined) component.fontAsset = data.fontAsset;
      if (data.font !== undefined) component.font = data.font;
      if (data.alignment !== undefined) component.alignment = data.alignment;
      if (data.outlineColor !== undefined) component.outlineColor = data.outlineColor;
      if (data.outlineThickness !== undefined) component.outlineThickness = data.outlineThickness;
      if (data.shadowColor !== undefined) component.shadowColor = data.shadowColor;
      if (data.shadowOffset !== undefined) component.shadowOffset = data.shadowOffset;
      if (data.enableMarkup !== undefined) component.enableMarkup = data.enableMarkup;
    }

    const result = component._parseUpToScreen();

    if (result.screen) {
      component._updateScreen(result.screen);
    }

    super.initializeComponentData(component, data, properties);
    component._beingInitialized = false;

    if (component.type === ELEMENTTYPE_IMAGE && component._image._meshDirty) {
      component._image._updateMesh(component._image.mesh);
    }
  }

  onRemoveComponent(entity, component) {
    component.onRemove();
  }

  cloneComponent(entity, clone) {
    const source = entity.element;
    const data = {
      enabled: source.enabled,
      width: source.width,
      height: source.height,
      anchor: source.anchor.clone(),
      pivot: source.pivot.clone(),
      margin: source.margin.clone(),
      alignment: source.alignment && source.alignment.clone() || source.alignment,
      autoWidth: source.autoWidth,
      autoHeight: source.autoHeight,
      type: source.type,
      rect: source.rect && source.rect.clone() || source.rect,
      rtlReorder: source.rtlReorder,
      unicodeConverter: source.unicodeConverter,
      materialAsset: source.materialAsset,
      material: source.material,
      color: source.color && source.color.clone() || source.color,
      opacity: source.opacity,
      textureAsset: source.textureAsset,
      texture: source.texture,
      spriteAsset: source.spriteAsset,
      sprite: source.sprite,
      spriteFrame: source.spriteFrame,
      pixelsPerUnit: source.pixelsPerUnit,
      spacing: source.spacing,
      lineHeight: source.lineHeight,
      wrapLines: source.wrapLines,
      layers: source.layers,
      fontSize: source.fontSize,
      minFontSize: source.minFontSize,
      maxFontSize: source.maxFontSize,
      autoFitWidth: source.autoFitWidth,
      autoFitHeight: source.autoFitHeight,
      maxLines: source.maxLines,
      fontAsset: source.fontAsset,
      font: source.font,
      useInput: source.useInput,
      fitMode: source.fitMode,
      batchGroupId: source.batchGroupId,
      mask: source.mask,
      outlineColor: source.outlineColor && source.outlineColor.clone() || source.outlineColor,
      outlineThickness: source.outlineThickness,
      shadowColor: source.shadowColor && source.shadowColor.clone() || source.shadowColor,
      shadowOffset: source.shadowOffset && source.shadowOffset.clone() || source.shadowOffset,
      enableMarkup: source.enableMarkup
    };

    if (source.key !== undefined && source.key !== null) {
      data.key = source.key;
    } else {
      data.text = source.text;
    }

    return this.addComponent(clone, data);
  }

  getTextElementMaterial(screenSpace, msdf, textAttibutes) {
    const hash = (screenSpace && 1 << 0) | (msdf && 1 << 1) | (textAttibutes && 1 << 2);
    let material = this._defaultTextMaterials[hash];

    if (material) {
      return material;
    }

    let name = "TextMaterial";
    material = new StandardMaterial();

    if (msdf) {
      material.msdfMap = this._defaultTexture;
      material.msdfTextAttribute = textAttibutes;
      material.emissive.set(1, 1, 1);
    } else {
      name = "Bitmap" + name;
      material.emissive.set(0.5, 0.5, 0.5);
      material.emissiveMap = this._defaultTexture;
      material.emissiveTint = true;
      material.opacityMap = this._defaultTexture;
      material.opacityMapChannel = 'a';
    }

    if (screenSpace) {
      name = 'ScreenSpace' + name;
      material.depthTest = false;
    }

    material.name = 'default' + name;
    material.useLighting = false;
    material.useGammaTonemap = false;
    material.useFog = false;
    material.useSkybox = false;
    material.diffuse.set(0, 0, 0);
    material.opacity = 0.5;
    material.blendType = BLEND_PREMULTIPLIED;
    material.depthWrite = false;
    material.emissiveVertexColor = true;
    material.update();
    this._defaultTextMaterials[hash] = material;
    return material;
  }

  _createBaseImageMaterial() {
    const material = new StandardMaterial();
    material.diffuse.set(0, 0, 0);
    material.emissive.set(0.5, 0.5, 0.5);
    material.emissiveMap = this._defaultTexture;
    material.emissiveTint = true;
    material.opacityMap = this._defaultTexture;
    material.opacityMapChannel = 'a';
    material.opacityTint = true;
    material.opacity = 0;
    material.useLighting = false;
    material.useGammaTonemap = false;
    material.useFog = false;
    material.useSkybox = false;
    material.blendType = BLEND_PREMULTIPLIED;
    material.depthWrite = false;
    return material;
  }

  getImageElementMaterial(screenSpace, mask, nineSliced, nineSliceTiled) {
    if (screenSpace) {
      if (mask) {
        if (nineSliced) {
          if (!this.defaultScreenSpaceImageMask9SlicedMaterial) {
            this.defaultScreenSpaceImageMask9SlicedMaterial = this._createBaseImageMaterial();
            this.defaultScreenSpaceImageMask9SlicedMaterial.name = 'defaultScreenSpaceImageMask9SlicedMaterial';
            this.defaultScreenSpaceImageMask9SlicedMaterial.nineSlicedMode = SPRITE_RENDERMODE_SLICED;
            this.defaultScreenSpaceImageMask9SlicedMaterial.depthTest = false;
            this.defaultScreenSpaceImageMask9SlicedMaterial.alphaTest = 1;
            this.defaultScreenSpaceImageMask9SlicedMaterial.redWrite = false;
            this.defaultScreenSpaceImageMask9SlicedMaterial.greenWrite = false;
            this.defaultScreenSpaceImageMask9SlicedMaterial.blueWrite = false;
            this.defaultScreenSpaceImageMask9SlicedMaterial.alphaWrite = false;
            this.defaultScreenSpaceImageMask9SlicedMaterial.update();
            this.defaultImageMaterials.push(this.defaultScreenSpaceImageMask9SlicedMaterial);
          }

          return this.defaultScreenSpaceImageMask9SlicedMaterial;
        } else if (nineSliceTiled) {
          if (!this.defaultScreenSpaceImageMask9TiledMaterial) {
            this.defaultScreenSpaceImageMask9TiledMaterial = this.defaultScreenSpaceImage9TiledMaterial.clone();
            this.defaultScreenSpaceImageMask9TiledMaterial.name = 'defaultScreenSpaceImageMask9TiledMaterial';
            this.defaultScreenSpaceImageMask9TiledMaterial.nineSlicedMode = SPRITE_RENDERMODE_TILED;
            this.defaultScreenSpaceImageMask9TiledMaterial.depthTest = false;
            this.defaultScreenSpaceImageMask9TiledMaterial.alphaTest = 1;
            this.defaultScreenSpaceImageMask9TiledMaterial.redWrite = false;
            this.defaultScreenSpaceImageMask9TiledMaterial.greenWrite = false;
            this.defaultScreenSpaceImageMask9TiledMaterial.blueWrite = false;
            this.defaultScreenSpaceImageMask9TiledMaterial.alphaWrite = false;
            this.defaultScreenSpaceImageMask9TiledMaterial.update();
            this.defaultImageMaterials.push(this.defaultScreenSpaceImageMask9TiledMaterial);
          }

          return this.defaultScreenSpaceImageMask9TiledMaterial;
        } else {
          if (!this.defaultScreenSpaceImageMaskMaterial) {
            this.defaultScreenSpaceImageMaskMaterial = this._createBaseImageMaterial();
            this.defaultScreenSpaceImageMaskMaterial.name = 'defaultScreenSpaceImageMaskMaterial';
            this.defaultScreenSpaceImageMaskMaterial.depthTest = false;
            this.defaultScreenSpaceImageMaskMaterial.alphaTest = 1;
            this.defaultScreenSpaceImageMaskMaterial.redWrite = false;
            this.defaultScreenSpaceImageMaskMaterial.greenWrite = false;
            this.defaultScreenSpaceImageMaskMaterial.blueWrite = false;
            this.defaultScreenSpaceImageMaskMaterial.alphaWrite = false;
            this.defaultScreenSpaceImageMaskMaterial.update();
            this.defaultImageMaterials.push(this.defaultScreenSpaceImageMaskMaterial);
          }

          return this.defaultScreenSpaceImageMaskMaterial;
        }
      } else {
        if (nineSliced) {
          if (!this.defaultScreenSpaceImage9SlicedMaterial) {
            this.defaultScreenSpaceImage9SlicedMaterial = this._createBaseImageMaterial();
            this.defaultScreenSpaceImage9SlicedMaterial.name = 'defaultScreenSpaceImage9SlicedMaterial';
            this.defaultScreenSpaceImage9SlicedMaterial.nineSlicedMode = SPRITE_RENDERMODE_SLICED;
            this.defaultScreenSpaceImage9SlicedMaterial.depthTest = false;
            this.defaultScreenSpaceImage9SlicedMaterial.update();
            this.defaultImageMaterials.push(this.defaultScreenSpaceImage9SlicedMaterial);
          }

          return this.defaultScreenSpaceImage9SlicedMaterial;
        } else if (nineSliceTiled) {
          if (!this.defaultScreenSpaceImage9TiledMaterial) {
            this.defaultScreenSpaceImage9TiledMaterial = this._createBaseImageMaterial();
            this.defaultScreenSpaceImage9TiledMaterial.name = 'defaultScreenSpaceImage9TiledMaterial';
            this.defaultScreenSpaceImage9TiledMaterial.nineSlicedMode = SPRITE_RENDERMODE_TILED;
            this.defaultScreenSpaceImage9TiledMaterial.depthTest = false;
            this.defaultScreenSpaceImage9TiledMaterial.update();
            this.defaultImageMaterials.push(this.defaultScreenSpaceImage9TiledMaterial);
          }

          return this.defaultScreenSpaceImage9TiledMaterial;
        } else {
          if (!this.defaultScreenSpaceImageMaterial) {
            this.defaultScreenSpaceImageMaterial = this._createBaseImageMaterial();
            this.defaultScreenSpaceImageMaterial.name = 'defaultScreenSpaceImageMaterial';
            this.defaultScreenSpaceImageMaterial.depthTest = false;
            this.defaultScreenSpaceImageMaterial.update();
            this.defaultImageMaterials.push(this.defaultScreenSpaceImageMaterial);
          }

          return this.defaultScreenSpaceImageMaterial;
        }
      }
    } else {
      if (mask) {
        if (nineSliced) {
          if (!this.defaultImage9SlicedMaskMaterial) {
            this.defaultImage9SlicedMaskMaterial = this._createBaseImageMaterial();
            this.defaultImage9SlicedMaskMaterial.name = 'defaultImage9SlicedMaskMaterial';
            this.defaultImage9SlicedMaskMaterial.nineSlicedMode = SPRITE_RENDERMODE_SLICED;
            this.defaultImage9SlicedMaskMaterial.alphaTest = 1;
            this.defaultImage9SlicedMaskMaterial.redWrite = false;
            this.defaultImage9SlicedMaskMaterial.greenWrite = false;
            this.defaultImage9SlicedMaskMaterial.blueWrite = false;
            this.defaultImage9SlicedMaskMaterial.alphaWrite = false;
            this.defaultImage9SlicedMaskMaterial.update();
            this.defaultImageMaterials.push(this.defaultImage9SlicedMaskMaterial);
          }

          return this.defaultImage9SlicedMaskMaterial;
        } else if (nineSliceTiled) {
          if (!this.defaultImage9TiledMaskMaterial) {
            this.defaultImage9TiledMaskMaterial = this._createBaseImageMaterial();
            this.defaultImage9TiledMaskMaterial.name = 'defaultImage9TiledMaskMaterial';
            this.defaultImage9TiledMaskMaterial.nineSlicedMode = SPRITE_RENDERMODE_TILED;
            this.defaultImage9TiledMaskMaterial.alphaTest = 1;
            this.defaultImage9TiledMaskMaterial.redWrite = false;
            this.defaultImage9TiledMaskMaterial.greenWrite = false;
            this.defaultImage9TiledMaskMaterial.blueWrite = false;
            this.defaultImage9TiledMaskMaterial.alphaWrite = false;
            this.defaultImage9TiledMaskMaterial.update();
            this.defaultImageMaterials.push(this.defaultImage9TiledMaskMaterial);
          }

          return this.defaultImage9TiledMaskMaterial;
        } else {
          if (!this.defaultImageMaskMaterial) {
            this.defaultImageMaskMaterial = this._createBaseImageMaterial();
            this.defaultImageMaskMaterial.name = 'defaultImageMaskMaterial';
            this.defaultImageMaskMaterial.alphaTest = 1;
            this.defaultImageMaskMaterial.redWrite = false;
            this.defaultImageMaskMaterial.greenWrite = false;
            this.defaultImageMaskMaterial.blueWrite = false;
            this.defaultImageMaskMaterial.alphaWrite = false;
            this.defaultImageMaskMaterial.update();
            this.defaultImageMaterials.push(this.defaultImageMaskMaterial);
          }

          return this.defaultImageMaskMaterial;
        }
      } else {
        if (nineSliced) {
          if (!this.defaultImage9SlicedMaterial) {
            this.defaultImage9SlicedMaterial = this._createBaseImageMaterial();
            this.defaultImage9SlicedMaterial.name = 'defaultImage9SlicedMaterial';
            this.defaultImage9SlicedMaterial.nineSlicedMode = SPRITE_RENDERMODE_SLICED;
            this.defaultImage9SlicedMaterial.update();
            this.defaultImageMaterials.push(this.defaultImage9SlicedMaterial);
          }

          return this.defaultImage9SlicedMaterial;
        } else if (nineSliceTiled) {
          if (!this.defaultImage9TiledMaterial) {
            this.defaultImage9TiledMaterial = this._createBaseImageMaterial();
            this.defaultImage9TiledMaterial.name = 'defaultImage9TiledMaterial';
            this.defaultImage9TiledMaterial.nineSlicedMode = SPRITE_RENDERMODE_TILED;
            this.defaultImage9TiledMaterial.update();
            this.defaultImageMaterials.push(this.defaultImage9TiledMaterial);
          }

          return this.defaultImage9TiledMaterial;
        } else {
          if (!this.defaultImageMaterial) {
            this.defaultImageMaterial = this._createBaseImageMaterial();
            this.defaultImageMaterial.name = 'defaultImageMaterial';
            this.defaultImageMaterial.update();
            this.defaultImageMaterials.push(this.defaultImageMaterial);
          }

          return this.defaultImageMaterial;
        }
      }
    }
  }

  registerUnicodeConverter(func) {
    this._unicodeConverter = func;
  }

  registerRtlReorder(func) {
    this._rtlReorder = func;
  }

  getUnicodeConverter() {
    return this._unicodeConverter;
  }

  getRtlReorder() {
    return this._rtlReorder;
  }

}

Component._buildAccessors(ElementComponent$2.prototype, _schema$f);

const MOTION_FREE = 'free';
const MOTION_LIMITED = 'limited';
const MOTION_LOCKED = 'locked';

const properties$1 = ['angularDampingX', 'angularDampingY', 'angularDampingZ', 'angularEquilibriumX', 'angularEquilibriumY', 'angularEquilibriumZ', 'angularLimitsX', 'angularLimitsY', 'angularLimitsZ', 'angularMotionX', 'angularMotionY', 'angularMotionZ', 'angularSpringX', 'angularSpringY', 'angularSpringZ', 'angularStiffnessX', 'angularStiffnessY', 'angularStiffnessZ', 'breakForce', 'enableCollision', 'enabled', 'entityA', 'entityB', 'linearDampingX', 'linearDampingY', 'linearDampingZ', 'linearEquilibriumX', 'linearEquilibriumY', 'linearEquilibriumZ', 'linearLimitsX', 'linearLimitsY', 'linearLimitsZ', 'linearMotionX', 'linearMotionY', 'linearMotionZ', 'linearSpringX', 'linearSpringY', 'linearSpringZ', 'linearStiffnessX', 'linearStiffnessY', 'linearStiffnessZ'];

class JointComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._constraint = null;
    this._entityA = null;
    this._entityB = null;
    this._breakForce = 3.4e+38;
    this._enableCollision = true;
    this._linearMotionX = MOTION_LOCKED;
    this._linearLimitsX = new Vec2(0, 0);
    this._linearSpringX = false;
    this._linearStiffnessX = 0;
    this._linearDampingX = 1;
    this._linearEquilibriumX = 0;
    this._linearMotionY = MOTION_LOCKED;
    this._linearLimitsY = new Vec2(0, 0);
    this._linearSpringY = false;
    this._linearStiffnessY = 0;
    this._linearDampingY = 1;
    this._linearEquilibriumY = 0;
    this._linearMotionZ = MOTION_LOCKED;
    this._linearLimitsZ = new Vec2(0, 0);
    this._linearSpringZ = false;
    this._linearStiffnessZ = 0;
    this._linearDampingZ = 1;
    this._linearEquilibriumZ = 0;
    this._angularMotionX = MOTION_LOCKED;
    this._angularLimitsX = new Vec2(0, 0);
    this._angularSpringX = false;
    this._angularStiffnessX = 0;
    this._angularDampingX = 1;
    this._angularEquilibriumX = 0;
    this._angularMotionY = MOTION_LOCKED;
    this._angularLimitsY = new Vec2(0, 0);
    this._angularSpringY = false;
    this._angularStiffnessY = 0;
    this._angularDampingY = 1;
    this._angularEquilibriumY = 0;
    this._angularMotionZ = MOTION_LOCKED;
    this._angularLimitsZ = new Vec2(0, 0);
    this._angularSpringZ = false;
    this._angularEquilibriumZ = 0;
    this._angularDampingZ = 1;
    this._angularStiffnessZ = 0;
    this.on('set_enabled', this._onSetEnabled, this);
  }

  set entityA(body) {
    this._destroyConstraint();

    this._entityA = body;

    this._createConstraint();
  }

  get entityA() {
    return this._entityA;
  }

  set entityB(body) {
    this._destroyConstraint();

    this._entityB = body;

    this._createConstraint();
  }

  get entityB() {
    return this._entityB;
  }

  set breakForce(force) {
    if (this._constraint && this._breakForce !== force) {
      this._constraint.setBreakingImpulseThreshold(force);

      this._breakForce = force;
    }
  }

  get breakForce() {
    return this._breakForce;
  }

  set enableCollision(enableCollision) {
    this._destroyConstraint();

    this._enableCollision = enableCollision;

    this._createConstraint();
  }

  get enableCollision() {
    return this._enableCollision;
  }

  set angularLimitsX(limits) {
    if (!this._angularLimitsX.equals(limits)) {
      this._angularLimitsX.copy(limits);

      this._updateAngularLimits();
    }
  }

  get angularLimitsX() {
    return this._angularLimitsX;
  }

  set angularMotionX(value) {
    if (this._angularMotionX !== value) {
      this._angularMotionX = value;

      this._updateAngularLimits();
    }
  }

  get angularMotionX() {
    return this._angularMotionX;
  }

  set angularLimitsY(limits) {
    if (!this._angularLimitsY.equals(limits)) {
      this._angularLimitsY.copy(limits);

      this._updateAngularLimits();
    }
  }

  get angularLimitsY() {
    return this._angularLimitsY;
  }

  set angularMotionY(value) {
    if (this._angularMotionY !== value) {
      this._angularMotionY = value;

      this._updateAngularLimits();
    }
  }

  get angularMotionY() {
    return this._angularMotionY;
  }

  set angularLimitsZ(limits) {
    if (!this._angularLimitsZ.equals(limits)) {
      this._angularLimitsZ.copy(limits);

      this._updateAngularLimits();
    }
  }

  get angularLimitsZ() {
    return this._angularLimitsZ;
  }

  set angularMotionZ(value) {
    if (this._angularMotionZ !== value) {
      this._angularMotionZ = value;

      this._updateAngularLimits();
    }
  }

  get angularMotionZ() {
    return this._angularMotionZ;
  }

  set linearLimitsX(limits) {
    if (!this._linearLimitsX.equals(limits)) {
      this._linearLimitsX.copy(limits);

      this._updateLinearLimits();
    }
  }

  get linearLimitsX() {
    return this._linearLimitsX;
  }

  set linearMotionX(value) {
    if (this._linearMotionX !== value) {
      this._linearMotionX = value;

      this._updateLinearLimits();
    }
  }

  get linearMotionX() {
    return this._linearMotionX;
  }

  set linearLimitsY(limits) {
    if (!this._linearLimitsY.equals(limits)) {
      this._linearLimitsY.copy(limits);

      this._updateLinearLimits();
    }
  }

  get linearLimitsY() {
    return this._linearLimitsY;
  }

  set linearMotionY(value) {
    if (this._linearMotionY !== value) {
      this._linearMotionY = value;

      this._updateLinearLimits();
    }
  }

  get linearMotionY() {
    return this._linearMotionY;
  }

  set linearLimitsZ(limits) {
    if (!this._linearLimitsZ.equals(limits)) {
      this._linearLimitsZ.copy(limits);

      this._updateLinearLimits();
    }
  }

  get linearLimitsZ() {
    return this._linearLimitsZ;
  }

  set linearMotionZ(value) {
    if (this._linearMotionZ !== value) {
      this._linearMotionZ = value;

      this._updateLinearLimits();
    }
  }

  get linearMotionZ() {
    return this._linearMotionZ;
  }

  _convertTransform(pcTransform, ammoTransform) {
    const pos = pcTransform.getTranslation();
    const rot = new Quat();
    rot.setFromMat4(pcTransform);
    const ammoVec = new Ammo.btVector3(pos.x, pos.y, pos.z);
    const ammoQuat = new Ammo.btQuaternion(rot.x, rot.y, rot.z, rot.w);
    ammoTransform.setOrigin(ammoVec);
    ammoTransform.setRotation(ammoQuat);
    Ammo.destroy(ammoVec);
    Ammo.destroy(ammoQuat);
  }

  _updateAngularLimits() {
    const constraint = this._constraint;

    if (constraint) {
      let lx, ly, lz, ux, uy, uz;

      if (this._angularMotionX === MOTION_LIMITED) {
        lx = this._angularLimitsX.x * math$1.DEG_TO_RAD;
        ux = this._angularLimitsX.y * math$1.DEG_TO_RAD;
      } else if (this._angularMotionX === MOTION_FREE) {
        lx = 1;
        ux = 0;
      } else {
        lx = ux = 0;
      }

      if (this._angularMotionY === MOTION_LIMITED) {
        ly = this._angularLimitsY.x * math$1.DEG_TO_RAD;
        uy = this._angularLimitsY.y * math$1.DEG_TO_RAD;
      } else if (this._angularMotionY === MOTION_FREE) {
        ly = 1;
        uy = 0;
      } else {
        ly = uy = 0;
      }

      if (this._angularMotionZ === MOTION_LIMITED) {
        lz = this._angularLimitsZ.x * math$1.DEG_TO_RAD;
        uz = this._angularLimitsZ.y * math$1.DEG_TO_RAD;
      } else if (this._angularMotionZ === MOTION_FREE) {
        lz = 1;
        uz = 0;
      } else {
        lz = uz = 0;
      }

      const limits = new Ammo.btVector3(lx, ly, lz);
      constraint.setAngularLowerLimit(limits);
      limits.setValue(ux, uy, uz);
      constraint.setAngularUpperLimit(limits);
      Ammo.destroy(limits);
    }
  }

  _updateLinearLimits() {
    const constraint = this._constraint;

    if (constraint) {
      let lx, ly, lz, ux, uy, uz;

      if (this._linearMotionX === MOTION_LIMITED) {
        lx = this._linearLimitsX.x;
        ux = this._linearLimitsX.y;
      } else if (this._linearMotionX === MOTION_FREE) {
        lx = 1;
        ux = 0;
      } else {
        lx = ux = 0;
      }

      if (this._linearMotionY === MOTION_LIMITED) {
        ly = this._linearLimitsY.x;
        uy = this._linearLimitsY.y;
      } else if (this._linearMotionY === MOTION_FREE) {
        ly = 1;
        uy = 0;
      } else {
        ly = uy = 0;
      }

      if (this._linearMotionZ === MOTION_LIMITED) {
        lz = this._linearLimitsZ.x;
        uz = this._linearLimitsZ.y;
      } else if (this._linearMotionZ === MOTION_FREE) {
        lz = 1;
        uz = 0;
      } else {
        lz = uz = 0;
      }

      const limits = new Ammo.btVector3(lx, ly, lz);
      constraint.setLinearLowerLimit(limits);
      limits.setValue(ux, uy, uz);
      constraint.setLinearUpperLimit(limits);
      Ammo.destroy(limits);
    }
  }

  _createConstraint() {
    if (this._entityA && this._entityA.rigidbody) {
      this._destroyConstraint();

      const mat = new Mat4();
      const bodyA = this._entityA.rigidbody.body;
      bodyA.activate();
      const jointWtm = this.entity.getWorldTransform();

      const entityAWtm = this._entityA.getWorldTransform();

      const invEntityAWtm = entityAWtm.clone().invert();
      mat.mul2(invEntityAWtm, jointWtm);
      const frameA = new Ammo.btTransform();

      this._convertTransform(mat, frameA);

      if (this._entityB && this._entityB.rigidbody) {
        const bodyB = this._entityB.rigidbody.body;
        bodyB.activate();

        const entityBWtm = this._entityB.getWorldTransform();

        const invEntityBWtm = entityBWtm.clone().invert();
        mat.mul2(invEntityBWtm, jointWtm);
        const frameB = new Ammo.btTransform();

        this._convertTransform(mat, frameB);

        this._constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA, bodyB, frameA, frameB, !this._enableCollision);
        Ammo.destroy(frameB);
      } else {
        this._constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA, frameA, !this._enableCollision);
      }

      Ammo.destroy(frameA);
      const axis = ['X', 'Y', 'Z', 'X', 'Y', 'Z'];

      for (let i = 0; i < 6; i++) {
        const type = i < 3 ? '_linear' : '_angular';

        this._constraint.enableSpring(i, this[type + 'Spring' + axis[i]]);

        this._constraint.setDamping(i, this[type + 'Damping' + axis[i]]);

        this._constraint.setEquilibriumPoint(i, this[type + 'Equilibrium' + axis[i]]);

        this._constraint.setStiffness(i, this[type + 'Stiffness' + axis[i]]);
      }

      this._constraint.setBreakingImpulseThreshold(this._breakForce);

      this._updateLinearLimits();

      this._updateAngularLimits();

      const app = this.system.app;
      const dynamicsWorld = app.systems.rigidbody.dynamicsWorld;
      dynamicsWorld.addConstraint(this._constraint, !this._enableCollision);
    }
  }

  _destroyConstraint() {
    if (this._constraint) {
      const app = this.system.app;
      const dynamicsWorld = app.systems.rigidbody.dynamicsWorld;
      dynamicsWorld.removeConstraint(this._constraint);
      Ammo.destroy(this._constraint);
      this._constraint = null;
    }
  }

  initFromData(data) {
    for (const prop of properties$1) {
      if (data.hasOwnProperty(prop)) {
        if (data[prop] instanceof Vec2) {
          this['_' + prop].copy(data[prop]);
        } else {
          this['_' + prop] = data[prop];
        }
      }
    }

    this._createConstraint();
  }

  onEnable() {
    this._createConstraint();
  }

  onDisable() {
    this._destroyConstraint();
  }

  _onSetEnabled(prop, old, value) {}

  _onBeforeRemove() {
    this.fire('remove');
  }

}

const functionMap = {
  Damping: 'setDamping',
  Equilibrium: 'setEquilibriumPoint',
  Spring: 'enableSpring',
  Stiffness: 'setStiffness'
};
['linear', 'angular'].forEach(type => {
  ['Damping', 'Equilibrium', 'Spring', 'Stiffness'].forEach(name => {
    ['X', 'Y', 'Z'].forEach(axis => {
      const prop = type + name + axis;
      const propInternal = '_' + prop;
      let index = type === 'linear' ? 0 : 3;
      if (axis === 'Y') index += 1;
      if (axis === 'Z') index += 2;
      Object.defineProperty(JointComponent.prototype, prop, {
        get: function () {
          return this[propInternal];
        },
        set: function (value) {
          if (this[propInternal] !== value) {
            this[propInternal] = value;

            this._constraint[functionMap[name]](index, value);
          }
        }
      });
    });
  });
});

class JointComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$e = ['enabled'];

class JointComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'joint';
    this.app = app;
    this.ComponentType = JointComponent;
    this.DataType = JointComponentData;
    this.schema = _schema$e;
  }

  initializeComponentData(component, data, properties) {
    component.initFromData(data);
  }

}

Component._buildAccessors(JointComponent.prototype, _schema$e);

class LayoutChildComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._minWidth = 0;
    this._minHeight = 0;
    this._maxWidth = null;
    this._maxHeight = null;
    this._fitWidthProportion = 0;
    this._fitHeightProportion = 0;
    this._excludeFromLayout = false;
  }

  set minWidth(value) {
    if (value !== this._minWidth) {
      this._minWidth = value;
      this.fire('resize');
    }
  }

  get minWidth() {
    return this._minWidth;
  }

  set minHeight(value) {
    if (value !== this._minHeight) {
      this._minHeight = value;
      this.fire('resize');
    }
  }

  get minHeight() {
    return this._minHeight;
  }

  set maxWidth(value) {
    if (value !== this._maxWidth) {
      this._maxWidth = value;
      this.fire('resize');
    }
  }

  get maxWidth() {
    return this._maxWidth;
  }

  set maxHeight(value) {
    if (value !== this._maxHeight) {
      this._maxHeight = value;
      this.fire('resize');
    }
  }

  get maxHeight() {
    return this._maxHeight;
  }

  set fitWidthProportion(value) {
    if (value !== this._fitWidthProportion) {
      this._fitWidthProportion = value;
      this.fire('resize');
    }
  }

  get fitWidthProportion() {
    return this._fitWidthProportion;
  }

  set fitHeightProportion(value) {
    if (value !== this._fitHeightProportion) {
      this._fitHeightProportion = value;
      this.fire('resize');
    }
  }

  get fitHeightProportion() {
    return this._fitHeightProportion;
  }

  set excludeFromLayout(value) {
    if (value !== this._excludeFromLayout) {
      this._excludeFromLayout = value;
      this.fire('resize');
    }
  }

  get excludeFromLayout() {
    return this._excludeFromLayout;
  }

}

class LayoutChildComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$d = ['enabled'];

class LayoutChildComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'layoutchild';
    this.ComponentType = LayoutChildComponent;
    this.DataType = LayoutChildComponentData;
    this.schema = _schema$d;
  }

  initializeComponentData(component, data, properties) {
    if (data.enabled !== undefined) component.enabled = data.enabled;
    if (data.minWidth !== undefined) component.minWidth = data.minWidth;
    if (data.minHeight !== undefined) component.minHeight = data.minHeight;
    if (data.maxWidth !== undefined) component.maxWidth = data.maxWidth;
    if (data.maxHeight !== undefined) component.maxHeight = data.maxHeight;
    if (data.fitWidthProportion !== undefined) component.fitWidthProportion = data.fitWidthProportion;
    if (data.fitHeightProportion !== undefined) component.fitHeightProportion = data.fitHeightProportion;
    if (data.excludeFromLayout !== undefined) component.excludeFromLayout = data.excludeFromLayout;
    super.initializeComponentData(component, data, properties);
  }

  cloneComponent(entity, clone) {
    const layoutChild = entity.layoutchild;
    return this.addComponent(clone, {
      enabled: layoutChild.enabled,
      minWidth: layoutChild.minWidth,
      minHeight: layoutChild.minHeight,
      maxWidth: layoutChild.maxWidth,
      maxHeight: layoutChild.maxHeight,
      fitWidthProportion: layoutChild.fitWidthProportion,
      fitHeightProportion: layoutChild.fitHeightProportion,
      excludeFromLayout: layoutChild.excludeFromLayout
    });
  }

}

Component._buildAccessors(LayoutChildComponent.prototype, _schema$d);

const FITTING_NONE = 0;
const FITTING_STRETCH = 1;
const FITTING_SHRINK = 2;
const FITTING_BOTH = 3;

const AXIS_MAPPINGS = {};
AXIS_MAPPINGS[ORIENTATION_HORIZONTAL] = {
  axis: 'x',
  size: 'width',
  calculatedSize: 'calculatedWidth',
  minSize: 'minWidth',
  maxSize: 'maxWidth',
  fitting: 'widthFitting',
  fittingProportion: 'fitWidthProportion'
};
AXIS_MAPPINGS[ORIENTATION_VERTICAL] = {
  axis: 'y',
  size: 'height',
  calculatedSize: 'calculatedHeight',
  minSize: 'minHeight',
  maxSize: 'maxHeight',
  fitting: 'heightFitting',
  fittingProportion: 'fitHeightProportion'
};
const OPPOSITE_ORIENTATION = {};
OPPOSITE_ORIENTATION[ORIENTATION_HORIZONTAL] = ORIENTATION_VERTICAL;
OPPOSITE_ORIENTATION[ORIENTATION_VERTICAL] = ORIENTATION_HORIZONTAL;
const PROPERTY_DEFAULTS = {
  minWidth: 0,
  minHeight: 0,
  maxWidth: Number.POSITIVE_INFINITY,
  maxHeight: Number.POSITIVE_INFINITY,
  width: null,
  height: null,
  fitWidthProportion: 0,
  fitHeightProportion: 0
};
const FITTING_ACTION = {
  NONE: 'NONE',
  APPLY_STRETCHING: 'APPLY_STRETCHING',
  APPLY_SHRINKING: 'APPLY_SHRINKING'
};
const availableSpace = new Vec2();

function createCalculator(orientation) {
  let options;
  const a = AXIS_MAPPINGS[orientation];
  const b = AXIS_MAPPINGS[OPPOSITE_ORIENTATION[orientation]];

  function minExtentA(element, size) {
    return -size[a.size] * element.pivot[a.axis];
  }

  function minExtentB(element, size) {
    return -size[b.size] * element.pivot[b.axis];
  }

  function maxExtentA(element, size) {
    return size[a.size] * (1 - element.pivot[a.axis]);
  }

  function calculateAll(allElements, layoutOptions) {
    allElements = allElements.filter(shouldIncludeInLayout);
    options = layoutOptions;
    availableSpace.x = options.containerSize.x - options.padding.x - options.padding.z;
    availableSpace.y = options.containerSize.y - options.padding.y - options.padding.w;
    resetAnchors(allElements);
    const lines = reverseLinesIfRequired(splitLines(allElements));
    const sizes = calculateSizesOnAxisB(lines, calculateSizesOnAxisA(lines));
    const positions = calculateBasePositions(lines, sizes);
    applyAlignmentAndPadding(lines, sizes, positions);
    applySizesAndPositions(lines, sizes, positions);
    return createLayoutInfo(lines);
  }

  function shouldIncludeInLayout(element) {
    const layoutChildComponent = element.entity.layoutchild;
    return !layoutChildComponent || !layoutChildComponent.enabled || !layoutChildComponent.excludeFromLayout;
  }

  function resetAnchors(allElements) {
    for (let i = 0; i < allElements.length; ++i) {
      const element = allElements[i];
      const anchor = element.anchor;

      if (anchor.x !== 0 || anchor.y !== 0 || anchor.z !== 0 || anchor.w !== 0) {
        element.anchor = Vec4.ZERO;
      }
    }
  }

  function splitLines(allElements) {
    if (!options.wrap) {
      return [allElements];
    }

    const lines = [[]];
    const sizes = getElementSizeProperties(allElements);
    let runningSize = 0;
    const allowOverrun = options[a.fitting] === FITTING_SHRINK;

    for (let i = 0; i < allElements.length; ++i) {
      if (lines[lines.length - 1].length > 0) {
        runningSize += options.spacing[a.axis];
      }

      const idealElementSize = sizes[i][a.size];
      runningSize += idealElementSize;

      if (!allowOverrun && runningSize > availableSpace[a.axis] && lines[lines.length - 1].length !== 0) {
        runningSize = idealElementSize;
        lines.push([]);
      }

      lines[lines.length - 1].push(allElements[i]);

      if (allowOverrun && runningSize > availableSpace[a.axis] && i !== allElements.length - 1) {
        runningSize = 0;
        lines.push([]);
      }
    }

    return lines;
  }

  function reverseLinesIfRequired(lines) {
    const reverseAxisA = options.orientation === ORIENTATION_HORIZONTAL && options.reverseX || options.orientation === ORIENTATION_VERTICAL && options.reverseY;
    const reverseAxisB = options.orientation === ORIENTATION_HORIZONTAL && options.reverseY || options.orientation === ORIENTATION_VERTICAL && options.reverseX;

    if (reverseAxisA) {
      for (let lineIndex = 0; lineIndex < lines.length; ++lineIndex) {
        if (reverseAxisA) {
          lines[lineIndex].reverse();
        }
      }
    }

    if (reverseAxisB) {
      lines.reverse();
    }

    return lines;
  }

  function calculateSizesOnAxisA(lines) {
    const sizesAllLines = [];

    for (let lineIndex = 0; lineIndex < lines.length; ++lineIndex) {
      const line = lines[lineIndex];
      const sizesThisLine = getElementSizeProperties(line);
      const idealRequiredSpace = calculateTotalSpace(sizesThisLine, a);
      const fittingAction = determineFittingAction(options[a.fitting], idealRequiredSpace, availableSpace[a.axis]);

      if (fittingAction === FITTING_ACTION.APPLY_STRETCHING) {
        stretchSizesToFitContainer(sizesThisLine, idealRequiredSpace, a);
      } else if (fittingAction === FITTING_ACTION.APPLY_SHRINKING) {
        shrinkSizesToFitContainer(sizesThisLine, idealRequiredSpace, a);
      }

      sizesAllLines.push(sizesThisLine);
    }

    return sizesAllLines;
  }

  function calculateSizesOnAxisB(lines, sizesAllLines) {
    const largestElementsForEachLine = [];
    const largestSizesForEachLine = [];

    for (let lineIndex = 0; lineIndex < lines.length; ++lineIndex) {
      const line = lines[lineIndex];
      line.largestElement = null;
      line.largestSize = {
        width: Number.NEGATIVE_INFINITY,
        height: Number.NEGATIVE_INFINITY
      };

      for (let elementIndex = 0; elementIndex < line.length; ++elementIndex) {
        const sizesThisElement = sizesAllLines[lineIndex][elementIndex];

        if (sizesThisElement[b.size] > line.largestSize[b.size]) {
          line.largestElement = line[elementIndex];
          line.largestSize = sizesThisElement;
        }
      }

      largestElementsForEachLine.push(line.largestElement);
      largestSizesForEachLine.push(line.largestSize);
    }

    const idealRequiredSpace = calculateTotalSpace(largestSizesForEachLine, b);
    const fittingAction = determineFittingAction(options[b.fitting], idealRequiredSpace, availableSpace[b.axis]);

    if (fittingAction === FITTING_ACTION.APPLY_STRETCHING) {
      stretchSizesToFitContainer(largestSizesForEachLine, idealRequiredSpace, b);
    } else if (fittingAction === FITTING_ACTION.APPLY_SHRINKING) {
      shrinkSizesToFitContainer(largestSizesForEachLine, idealRequiredSpace, b);
    }

    for (let lineIndex = 0; lineIndex < lines.length; ++lineIndex) {
      const line = lines[lineIndex];

      for (let elementIndex = 0; elementIndex < line.length; ++elementIndex) {
        const sizesForThisElement = sizesAllLines[lineIndex][elementIndex];
        const currentSize = sizesForThisElement[b.size];
        const availableSize = lines.length === 1 ? availableSpace[b.axis] : line.largestSize[b.size];
        const elementFittingAction = determineFittingAction(options[b.fitting], currentSize, availableSize);

        if (elementFittingAction === FITTING_ACTION.APPLY_STRETCHING) {
          sizesForThisElement[b.size] = Math.min(availableSize, sizesForThisElement[b.maxSize]);
        } else if (elementFittingAction === FITTING_ACTION.APPLY_SHRINKING) {
          sizesForThisElement[b.size] = Math.max(availableSize, sizesForThisElement[b.minSize]);
        }
      }
    }

    return sizesAllLines;
  }

  function determineFittingAction(fittingMode, currentSize, availableSize) {
    switch (fittingMode) {
      case FITTING_NONE:
        return FITTING_ACTION.NONE;

      case FITTING_STRETCH:
        if (currentSize < availableSize) {
          return FITTING_ACTION.APPLY_STRETCHING;
        }

        return FITTING_ACTION.NONE;

      case FITTING_SHRINK:
        if (currentSize >= availableSize) {
          return FITTING_ACTION.APPLY_SHRINKING;
        }

        return FITTING_ACTION.NONE;

      case FITTING_BOTH:
        if (currentSize < availableSize) {
          return FITTING_ACTION.APPLY_STRETCHING;
        }

        return FITTING_ACTION.APPLY_SHRINKING;

      default:
        throw new Error(`Unrecognized fitting mode: ${fittingMode}`);
    }
  }

  function calculateTotalSpace(sizes, axis) {
    const totalSizes = sumValues(sizes, axis.size);
    const totalSpacing = (sizes.length - 1) * options.spacing[axis.axis];
    return totalSizes + totalSpacing;
  }

  function stretchSizesToFitContainer(sizesThisLine, idealRequiredSpace, axis) {
    const ascendingMaxSizeOrder = getTraversalOrder(sizesThisLine, axis.maxSize);
    const fittingProportions = getNormalizedValues(sizesThisLine, axis.fittingProportion);
    const fittingProportionSums = createSumArray(fittingProportions, ascendingMaxSizeOrder);
    let remainingUndershoot = availableSpace[axis.axis] - idealRequiredSpace;

    for (let i = 0; i < sizesThisLine.length; ++i) {
      const index = ascendingMaxSizeOrder[i];
      const targetIncrease = calculateAdjustment(index, remainingUndershoot, fittingProportions, fittingProportionSums);
      const targetSize = sizesThisLine[index][axis.size] + targetIncrease;
      const maxSize = sizesThisLine[index][axis.maxSize];
      const actualSize = Math.min(targetSize, maxSize);
      sizesThisLine[index][axis.size] = actualSize;
      const actualIncrease = Math.max(targetSize - actualSize, 0);
      const appliedIncrease = targetIncrease - actualIncrease;
      remainingUndershoot -= appliedIncrease;
    }
  }

  function shrinkSizesToFitContainer(sizesThisLine, idealRequiredSpace, axis) {
    const descendingMinSizeOrder = getTraversalOrder(sizesThisLine, axis.minSize, true);
    const fittingProportions = getNormalizedValues(sizesThisLine, axis.fittingProportion);
    const inverseFittingProportions = invertNormalizedValues(fittingProportions);
    const inverseFittingProportionSums = createSumArray(inverseFittingProportions, descendingMinSizeOrder);
    let remainingOvershoot = idealRequiredSpace - availableSpace[axis.axis];

    for (let i = 0; i < sizesThisLine.length; ++i) {
      const index = descendingMinSizeOrder[i];
      const targetReduction = calculateAdjustment(index, remainingOvershoot, inverseFittingProportions, inverseFittingProportionSums);
      const targetSize = sizesThisLine[index][axis.size] - targetReduction;
      const minSize = sizesThisLine[index][axis.minSize];
      const actualSize = Math.max(targetSize, minSize);
      sizesThisLine[index][axis.size] = actualSize;
      const actualReduction = Math.max(actualSize - targetSize, 0);
      const appliedReduction = targetReduction - actualReduction;
      remainingOvershoot -= appliedReduction;
    }
  }

  function calculateAdjustment(index, remainingAdjustment, fittingProportions, fittingProportionSums) {
    const proportion = fittingProportions[index];
    const sumOfRemainingProportions = fittingProportionSums[index];

    if (Math.abs(proportion) < 1e-5 && Math.abs(sumOfRemainingProportions) < 1e-5) {
      return remainingAdjustment;
    }

    return remainingAdjustment * proportion / sumOfRemainingProportions;
  }

  function calculateBasePositions(lines, sizes) {
    const cursor = {};
    cursor[a.axis] = 0;
    cursor[b.axis] = 0;
    lines[a.size] = Number.NEGATIVE_INFINITY;
    const positionsAllLines = [];

    for (let lineIndex = 0; lineIndex < lines.length; ++lineIndex) {
      const line = lines[lineIndex];

      if (line.length === 0) {
        positionsAllLines.push([]);
        continue;
      }

      const positionsThisLine = [];
      const sizesThisLine = sizes[lineIndex];

      for (let elementIndex = 0; elementIndex < line.length; ++elementIndex) {
        const element = line[elementIndex];
        const sizesThisElement = sizesThisLine[elementIndex];
        cursor[b.axis] -= minExtentB(element, sizesThisElement);
        cursor[a.axis] -= minExtentA(element, sizesThisElement);
        positionsThisLine[elementIndex] = {};
        positionsThisLine[elementIndex][a.axis] = cursor[a.axis];
        positionsThisLine[elementIndex][b.axis] = cursor[b.axis];
        cursor[b.axis] += minExtentB(element, sizesThisElement);
        cursor[a.axis] += maxExtentA(element, sizesThisElement) + options.spacing[a.axis];
      }

      line[a.size] = cursor[a.axis] - options.spacing[a.axis];
      line[b.size] = line.largestSize[b.size];
      lines[a.size] = Math.max(lines[a.size], line[a.size]);
      cursor[a.axis] = 0;
      cursor[b.axis] += line[b.size] + options.spacing[b.axis];
      positionsAllLines.push(positionsThisLine);
    }

    lines[b.size] = cursor[b.axis] - options.spacing[b.axis];
    return positionsAllLines;
  }

  function applyAlignmentAndPadding(lines, sizes, positions) {
    const alignmentA = options.alignment[a.axis];
    const alignmentB = options.alignment[b.axis];
    const paddingA = options.padding[a.axis];
    const paddingB = options.padding[b.axis];

    for (let lineIndex = 0; lineIndex < lines.length; ++lineIndex) {
      const line = lines[lineIndex];
      const sizesThisLine = sizes[lineIndex];
      const positionsThisLine = positions[lineIndex];
      const axisAOffset = (availableSpace[a.axis] - line[a.size]) * alignmentA + paddingA;
      const axisBOffset = (availableSpace[b.axis] - lines[b.size]) * alignmentB + paddingB;

      for (let elementIndex = 0; elementIndex < line.length; ++elementIndex) {
        const withinLineAxisBOffset = (line[b.size] - sizesThisLine[elementIndex][b.size]) * options.alignment[b.axis];
        positionsThisLine[elementIndex][a.axis] += axisAOffset;
        positionsThisLine[elementIndex][b.axis] += axisBOffset + withinLineAxisBOffset;
      }
    }
  }

  function applySizesAndPositions(lines, sizes, positions) {
    for (let lineIndex = 0; lineIndex < lines.length; ++lineIndex) {
      const line = lines[lineIndex];
      const sizesThisLine = sizes[lineIndex];
      const positionsThisLine = positions[lineIndex];

      for (let elementIndex = 0; elementIndex < line.length; ++elementIndex) {
        const element = line[elementIndex];
        element[a.calculatedSize] = sizesThisLine[elementIndex][a.size];
        element[b.calculatedSize] = sizesThisLine[elementIndex][b.size];

        if (options.orientation === ORIENTATION_HORIZONTAL) {
          element.entity.setLocalPosition(positionsThisLine[elementIndex][a.axis], positionsThisLine[elementIndex][b.axis], element.entity.getLocalPosition().z);
        } else {
          element.entity.setLocalPosition(positionsThisLine[elementIndex][b.axis], positionsThisLine[elementIndex][a.axis], element.entity.getLocalPosition().z);
        }
      }
    }
  }

  function createLayoutInfo(lines) {
    const layoutWidth = lines.width;
    const layoutHeight = lines.height;
    const xOffset = (availableSpace.x - layoutWidth) * options.alignment.x + options.padding.x;
    const yOffset = (availableSpace.y - layoutHeight) * options.alignment.y + options.padding.y;
    return {
      bounds: new Vec4(xOffset, yOffset, layoutWidth, layoutHeight)
    };
  }

  function getElementSizeProperties(elements) {
    const sizeProperties = [];

    for (let i = 0; i < elements.length; ++i) {
      const element = elements[i];
      const minWidth = Math.max(getProperty(element, 'minWidth'), 0);
      const minHeight = Math.max(getProperty(element, 'minHeight'), 0);
      const maxWidth = Math.max(getProperty(element, 'maxWidth'), minWidth);
      const maxHeight = Math.max(getProperty(element, 'maxHeight'), minHeight);
      const width = clamp(getProperty(element, 'width'), minWidth, maxWidth);
      const height = clamp(getProperty(element, 'height'), minHeight, maxHeight);
      const fitWidthProportion = getProperty(element, 'fitWidthProportion');
      const fitHeightProportion = getProperty(element, 'fitHeightProportion');
      sizeProperties.push({
        minWidth: minWidth,
        minHeight: minHeight,
        maxWidth: maxWidth,
        maxHeight: maxHeight,
        width: width,
        height: height,
        fitWidthProportion: fitWidthProportion,
        fitHeightProportion: fitHeightProportion
      });
    }

    return sizeProperties;
  }

  function getProperty(element, propertyName) {
    const layoutChildComponent = element.entity.layoutchild;

    if (layoutChildComponent && layoutChildComponent.enabled && layoutChildComponent[propertyName] !== undefined && layoutChildComponent[propertyName] !== null) {
      return layoutChildComponent[propertyName];
    } else if (element[propertyName] !== undefined) {
      return element[propertyName];
    }

    return PROPERTY_DEFAULTS[propertyName];
  }

  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }

  function sumValues(items, propertyName) {
    return items.reduce(function (accumulator, current) {
      return accumulator + current[propertyName];
    }, 0);
  }

  function getNormalizedValues(items, propertyName) {
    const sum = sumValues(items, propertyName);
    const normalizedValues = [];
    const numItems = items.length;

    if (sum === 0) {
      for (let i = 0; i < numItems; ++i) {
        normalizedValues.push(1 / numItems);
      }
    } else {
      for (let i = 0; i < numItems; ++i) {
        normalizedValues.push(items[i][propertyName] / sum);
      }
    }

    return normalizedValues;
  }

  function invertNormalizedValues(values) {
    if (values.length === 1) {
      return [1];
    }

    const invertedValues = [];
    const numValues = values.length;

    for (let i = 0; i < numValues; ++i) {
      invertedValues.push((1 - values[i]) / (numValues - 1));
    }

    return invertedValues;
  }

  function getTraversalOrder(items, orderBy, descending) {
    items.forEach(assignIndex);
    return items.slice().sort(function (itemA, itemB) {
      return descending ? itemB[orderBy] - itemA[orderBy] : itemA[orderBy] - itemB[orderBy];
    }).map(getIndex);
  }

  function assignIndex(item, index) {
    item.index = index;
  }

  function getIndex(item) {
    return item.index;
  }

  function createSumArray(values, order) {
    const sumArray = [];
    sumArray[order[values.length - 1]] = values[order[values.length - 1]];

    for (let i = values.length - 2; i >= 0; --i) {
      sumArray[order[i]] = sumArray[order[i + 1]] + values[order[i]];
    }

    return sumArray;
  }

  return calculateAll;
}

const CALCULATE_FNS = {};
CALCULATE_FNS[ORIENTATION_HORIZONTAL] = createCalculator(ORIENTATION_HORIZONTAL);
CALCULATE_FNS[ORIENTATION_VERTICAL] = createCalculator(ORIENTATION_VERTICAL);

class LayoutCalculator {
  calculateLayout(elements, options) {
    const calculateFn = CALCULATE_FNS[options.orientation];

    if (!calculateFn) {
      throw new Error('Unrecognized orientation value: ' + options.orientation);
    } else {
      return calculateFn(elements, options);
    }
  }

}

function getElement(entity) {
  return entity.element;
}

function isEnabledAndHasEnabledElement(entity) {
  return entity.enabled && entity.element && entity.element.enabled;
}

class LayoutGroupComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._orientation = ORIENTATION_HORIZONTAL;
    this._reverseX = false;
    this._reverseY = true;
    this._alignment = new Vec2(0, 1);
    this._padding = new Vec4();
    this._spacing = new Vec2();
    this._widthFitting = FITTING_NONE;
    this._heightFitting = FITTING_NONE;
    this._wrap = false;
    this._layoutCalculator = new LayoutCalculator();

    this._listenForReflowEvents(this.entity, 'on');

    this.entity.children.forEach(child => {
      this._listenForReflowEvents(child, 'on');
    });
    this.entity.on('childinsert', this._onChildInsert, this);
    this.entity.on('childremove', this._onChildRemove, this);
    system.app.systems.element.on('add', this._onElementOrLayoutComponentAdd, this);
    system.app.systems.element.on('beforeremove', this._onElementOrLayoutComponentRemove, this);
    system.app.systems.layoutchild.on('add', this._onElementOrLayoutComponentAdd, this);
    system.app.systems.layoutchild.on('beforeremove', this._onElementOrLayoutComponentRemove, this);
  }

  set orientation(value) {
    if (value !== this._orientation) {
      this._orientation = value;

      this._scheduleReflow();
    }
  }

  get orientation() {
    return this._orientation;
  }

  set reverseX(value) {
    if (value !== this._reverseX) {
      this._reverseX = value;

      this._scheduleReflow();
    }
  }

  get reverseX() {
    return this._reverseX;
  }

  set reverseY(value) {
    if (value !== this._reverseY) {
      this._reverseY = value;

      this._scheduleReflow();
    }
  }

  get reverseY() {
    return this._reverseY;
  }

  set alignment(value) {
    if (!value.equals(this._alignment)) {
      this._alignment.copy(value);

      this._scheduleReflow();
    }
  }

  get alignment() {
    return this._alignment;
  }

  set padding(value) {
    if (!value.equals(this._padding)) {
      this._padding.copy(value);

      this._scheduleReflow();
    }
  }

  get padding() {
    return this._padding;
  }

  set spacing(value) {
    if (!value.equals(this._spacing)) {
      this._spacing.copy(value);

      this._scheduleReflow();
    }
  }

  get spacing() {
    return this._spacing;
  }

  set widthFitting(value) {
    if (value !== this._widthFitting) {
      this._widthFitting = value;

      this._scheduleReflow();
    }
  }

  get widthFitting() {
    return this._widthFitting;
  }

  set heightFitting(value) {
    if (value !== this._heightFitting) {
      this._heightFitting = value;

      this._scheduleReflow();
    }
  }

  get heightFitting() {
    return this._heightFitting;
  }

  set wrap(value) {
    if (value !== this._wrap) {
      this._wrap = value;

      this._scheduleReflow();
    }
  }

  get wrap() {
    return this._wrap;
  }

  _isSelfOrChild(entity) {
    return entity === this.entity || this.entity.children.indexOf(entity) !== -1;
  }

  _listenForReflowEvents(target, onOff) {
    if (target.element) {
      target.element[onOff]('enableelement', this._scheduleReflow, this);
      target.element[onOff]('disableelement', this._scheduleReflow, this);
      target.element[onOff]('resize', this._scheduleReflow, this);
      target.element[onOff]('set:pivot', this._scheduleReflow, this);
    }

    if (target.layoutchild) {
      target.layoutchild[onOff]('set_enabled', this._scheduleReflow, this);
      target.layoutchild[onOff]('resize', this._scheduleReflow, this);
    }
  }

  _onElementOrLayoutComponentAdd(entity) {
    if (this._isSelfOrChild(entity)) {
      this._listenForReflowEvents(entity, 'on');

      this._scheduleReflow();
    }
  }

  _onElementOrLayoutComponentRemove(entity) {
    if (this._isSelfOrChild(entity)) {
      this._listenForReflowEvents(entity, 'off');

      this._scheduleReflow();
    }
  }

  _onChildInsert(child) {
    this._listenForReflowEvents(child, 'on');

    this._scheduleReflow();
  }

  _onChildRemove(child) {
    this._listenForReflowEvents(child, 'off');

    this._scheduleReflow();
  }

  _scheduleReflow() {
    if (this.enabled && this.entity && this.entity.enabled && !this._isPerformingReflow) {
      this.system.scheduleReflow(this);
    }
  }

  reflow() {
    const container = getElement(this.entity);
    const elements = this.entity.children.filter(isEnabledAndHasEnabledElement).map(getElement);

    if (!container || elements.length === 0) {
      return;
    }

    const containerWidth = Math.max(container.calculatedWidth, 0);
    const containerHeight = Math.max(container.calculatedHeight, 0);
    const options = {
      orientation: this._orientation,
      reverseX: this._reverseX,
      reverseY: this._reverseY,
      alignment: this._alignment,
      padding: this._padding,
      spacing: this._spacing,
      widthFitting: this._widthFitting,
      heightFitting: this._heightFitting,
      wrap: this._wrap,
      containerSize: new Vec2(containerWidth, containerHeight)
    };
    this._isPerformingReflow = true;

    const layoutInfo = this._layoutCalculator.calculateLayout(elements, options);

    this._isPerformingReflow = false;
    this.fire('reflow', layoutInfo);
  }

  onEnable() {
    this._scheduleReflow();
  }

  onRemove() {
    this.entity.off('childinsert', this._onChildInsert, this);
    this.entity.off('childremove', this._onChildRemove, this);

    this._listenForReflowEvents(this.entity, 'off');

    this.entity.children.forEach(child => {
      this._listenForReflowEvents(child, 'off');
    });
    this.system.app.systems.element.off('add', this._onElementOrLayoutComponentAdd, this);
    this.system.app.systems.element.off('beforeremove', this._onElementOrLayoutComponentRemove, this);
    this.system.app.systems.layoutchild.off('add', this._onElementOrLayoutComponentAdd, this);
    this.system.app.systems.layoutchild.off('beforeremove', this._onElementOrLayoutComponentRemove, this);
  }

}

class LayoutGroupComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$c = ['enabled'];
const MAX_ITERATIONS = 100;

class LayoutGroupComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'layoutgroup';
    this.ComponentType = LayoutGroupComponent;
    this.DataType = LayoutGroupComponentData;
    this.schema = _schema$c;
    this._reflowQueue = [];
    this.on('beforeremove', this._onRemoveComponent, this);
    this.app.systems.on('postUpdate', this._onPostUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    if (data.enabled !== undefined) component.enabled = data.enabled;
    if (data.orientation !== undefined) component.orientation = data.orientation;
    if (data.reverseX !== undefined) component.reverseX = data.reverseX;
    if (data.reverseY !== undefined) component.reverseY = data.reverseY;

    if (data.alignment !== undefined) {
      component.alignment = Array.isArray(data.alignment) ? new Vec2(data.alignment) : data.alignment;
    }

    if (data.padding !== undefined) {
      component.padding = Array.isArray(data.padding) ? new Vec4(data.padding) : data.padding;
    }

    if (data.spacing !== undefined) {
      component.spacing = Array.isArray(data.spacing) ? new Vec2(data.spacing) : data.spacing;
    }

    if (data.widthFitting !== undefined) component.widthFitting = data.widthFitting;
    if (data.heightFitting !== undefined) component.heightFitting = data.heightFitting;
    if (data.wrap !== undefined) component.wrap = data.wrap;
    super.initializeComponentData(component, data, properties);
  }

  cloneComponent(entity, clone) {
    const layoutGroup = entity.layoutgroup;
    return this.addComponent(clone, {
      enabled: layoutGroup.enabled,
      orientation: layoutGroup.orientation,
      reverseX: layoutGroup.reverseX,
      reverseY: layoutGroup.reverseY,
      alignment: layoutGroup.alignment,
      padding: layoutGroup.padding,
      spacing: layoutGroup.spacing,
      widthFitting: layoutGroup.widthFitting,
      heightFitting: layoutGroup.heightFitting,
      wrap: layoutGroup.wrap
    });
  }

  scheduleReflow(component) {
    if (this._reflowQueue.indexOf(component) === -1) {
      this._reflowQueue.push(component);
    }
  }

  _onPostUpdate() {
    this._processReflowQueue();
  }

  _processReflowQueue() {
    if (this._reflowQueue.length === 0) {
      return;
    }

    let iterationCount = 0;

    while (this._reflowQueue.length > 0) {
      const queue = this._reflowQueue.slice();

      this._reflowQueue.length = 0;
      queue.sort(function (componentA, componentB) {
        return componentA.entity.graphDepth - componentB.entity.graphDepth;
      });

      for (let i = 0; i < queue.length; ++i) {
        queue[i].reflow();
      }

      if (++iterationCount >= MAX_ITERATIONS) {
        console.warn('Max reflow iterations limit reached, bailing.');
        break;
      }
    }
  }

  _onRemoveComponent(entity, component) {
    component.onRemove();
  }

  destroy() {
    super.destroy();
    this.app.systems.off('postUpdate', this._onPostUpdate, this);
  }

}

Component._buildAccessors(LayoutGroupComponent.prototype, _schema$c);

class ModelComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._type = 'asset';
    this._asset = null;
    this._model = null;
    this._mapping = {};
    this._castShadows = true;
    this._receiveShadows = true;
    this._materialAsset = null;
    this._material = void 0;
    this._castShadowsLightmap = true;
    this._lightmapped = false;
    this._lightmapSizeMultiplier = 1;
    this._isStatic = false;
    this._layers = [LAYERID_WORLD];
    this._batchGroupId = -1;
    this._customAabb = null;
    this._area = null;
    this._materialEvents = null;
    this._clonedModel = false;
    this._material = system.defaultMaterial;
    entity.on('remove', this.onRemoveChild, this);
    entity.on('removehierarchy', this.onRemoveChild, this);
    entity.on('insert', this.onInsertChild, this);
    entity.on('inserthierarchy', this.onInsertChild, this);
  }

  set meshInstances(value) {
    if (!this._model) return;
    this._model.meshInstances = value;
  }

  get meshInstances() {
    if (!this._model) return null;
    return this._model.meshInstances;
  }

  set customAabb(value) {
    this._customAabb = value;

    if (this._model) {
      const mi = this._model.meshInstances;

      if (mi) {
        for (let i = 0; i < mi.length; i++) {
          mi[i].setCustomAabb(this._customAabb);
        }
      }
    }
  }

  get customAabb() {
    return this._customAabb;
  }

  set type(value) {
    if (this._type === value) return;
    this._area = null;
    this._type = value;

    if (value === 'asset') {
      if (this._asset !== null) {
        this._bindModelAsset(this._asset);
      } else {
        this.model = null;
      }
    } else {
      const primData = getShapePrimitive(this.system.app.graphicsDevice, value);
      this._area = primData.area;
      const mesh = primData.mesh;
      const node = new GraphNode();
      const model = new Model();
      model.graph = node;
      model.meshInstances = [new MeshInstance(mesh, this._material, node)];
      this.model = model;
      this._asset = null;
    }
  }

  get type() {
    return this._type;
  }

  set asset(value) {
    const assets = this.system.app.assets;
    let _id = value;

    if (value instanceof Asset) {
      _id = value.id;
    }

    if (this._asset !== _id) {
      if (this._asset) {
        assets.off('add:' + this._asset, this._onModelAssetAdded, this);

        const _prev = assets.get(this._asset);

        if (_prev) {
          this._unbindModelAsset(_prev);
        }
      }

      this._asset = _id;

      if (this._asset) {
        const asset = assets.get(this._asset);

        if (!asset) {
          this.model = null;
          assets.on('add:' + this._asset, this._onModelAssetAdded, this);
        } else {
          this._bindModelAsset(asset);
        }
      } else {
        this.model = null;
      }
    }
  }

  get asset() {
    return this._asset;
  }

  set model(value) {
    if (this._model === value) return;

    if (value && value._immutable) {
      return;
    }

    if (this._model) {
      this._model._immutable = false;
      this.removeModelFromLayers();
      this.entity.removeChild(this._model.getGraph());
      delete this._model._entity;

      if (this._clonedModel) {
        this._model.destroy();

        this._clonedModel = false;
      }
    }

    this._model = value;

    if (this._model) {
      this._model._immutable = true;
      const meshInstances = this._model.meshInstances;

      for (let i = 0; i < meshInstances.length; i++) {
        meshInstances[i].castShadow = this._castShadows;
        meshInstances[i].receiveShadow = this._receiveShadows;
        meshInstances[i].isStatic = this._isStatic;
        meshInstances[i].setCustomAabb(this._customAabb);
      }

      this.lightmapped = this._lightmapped;
      this.entity.addChild(this._model.graph);

      if (this.enabled && this.entity.enabled) {
        this.addModelToLayers();
      }

      this._model._entity = this.entity;
      if (this.entity.animation) this.entity.animation.setModel(this._model);

      if (this.entity.anim) {
        this.entity.anim.rebind();
      }

      if (this.type === 'asset') {
        this.mapping = this._mapping;
      } else {
        this._unsetMaterialEvents();
      }
    }
  }

  get model() {
    return this._model;
  }

  set lightmapped(value) {
    if (value !== this._lightmapped) {
      this._lightmapped = value;

      if (this._model) {
        const mi = this._model.meshInstances;

        for (let i = 0; i < mi.length; i++) {
          mi[i].setLightmapped(value);
        }
      }
    }
  }

  get lightmapped() {
    return this._lightmapped;
  }

  set castShadows(value) {
    if (this._castShadows === value) return;
    const model = this._model;

    if (model) {
      const layers = this.layers;
      const scene = this.system.app.scene;

      if (this._castShadows && !value) {
        for (let i = 0; i < layers.length; i++) {
          const layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
          if (!layer) continue;
          layer.removeShadowCasters(model.meshInstances);
        }
      }

      const meshInstances = model.meshInstances;

      for (let i = 0; i < meshInstances.length; i++) {
        meshInstances[i].castShadow = value;
      }

      if (!this._castShadows && value) {
        for (let i = 0; i < layers.length; i++) {
          const layer = scene.layers.getLayerById(layers[i]);
          if (!layer) continue;
          layer.addShadowCasters(model.meshInstances);
        }
      }
    }

    this._castShadows = value;
  }

  get castShadows() {
    return this._castShadows;
  }

  set receiveShadows(value) {
    if (this._receiveShadows === value) return;
    this._receiveShadows = value;

    if (this._model) {
      const meshInstances = this._model.meshInstances;

      for (let i = 0, len = meshInstances.length; i < len; i++) {
        meshInstances[i].receiveShadow = value;
      }
    }
  }

  get receiveShadows() {
    return this._receiveShadows;
  }

  set castShadowsLightmap(value) {
    this._castShadowsLightmap = value;
  }

  get castShadowsLightmap() {
    return this._castShadowsLightmap;
  }

  set lightmapSizeMultiplier(value) {
    this._lightmapSizeMultiplier = value;
  }

  get lightmapSizeMultiplier() {
    return this._lightmapSizeMultiplier;
  }

  set isStatic(value) {
    if (this._isStatic === value) return;
    this._isStatic = value;

    if (this._model) {
      const rcv = this._model.meshInstances;

      for (let i = 0; i < rcv.length; i++) {
        const m = rcv[i];
        m.isStatic = value;
      }
    }
  }

  get isStatic() {
    return this._isStatic;
  }

  set layers(value) {
    const layers = this.system.app.scene.layers;

    if (this.meshInstances) {
      for (let i = 0; i < this._layers.length; i++) {
        const layer = layers.getLayerById(this._layers[i]);
        if (!layer) continue;
        layer.removeMeshInstances(this.meshInstances);
      }
    }

    this._layers.length = 0;

    for (let i = 0; i < value.length; i++) {
      this._layers[i] = value[i];
    }

    if (!this.enabled || !this.entity.enabled || !this.meshInstances) return;

    for (let i = 0; i < this._layers.length; i++) {
      const layer = layers.getLayerById(this._layers[i]);
      if (!layer) continue;
      layer.addMeshInstances(this.meshInstances);
    }
  }

  get layers() {
    return this._layers;
  }

  set batchGroupId(value) {
    if (this._batchGroupId === value) return;

    if (this.entity.enabled && this._batchGroupId >= 0) {
      var _this$system$app$batc;

      (_this$system$app$batc = this.system.app.batcher) == null ? void 0 : _this$system$app$batc.remove(BatchGroup.MODEL, this.batchGroupId, this.entity);
    }

    if (this.entity.enabled && value >= 0) {
      var _this$system$app$batc2;

      (_this$system$app$batc2 = this.system.app.batcher) == null ? void 0 : _this$system$app$batc2.insert(BatchGroup.MODEL, value, this.entity);
    }

    if (value < 0 && this._batchGroupId >= 0 && this.enabled && this.entity.enabled) {
      this.addModelToLayers();
    }

    this._batchGroupId = value;
  }

  get batchGroupId() {
    return this._batchGroupId;
  }

  set materialAsset(value) {
    let _id = value;

    if (value instanceof Asset) {
      _id = value.id;
    }

    const assets = this.system.app.assets;

    if (_id !== this._materialAsset) {
      if (this._materialAsset) {
        assets.off('add:' + this._materialAsset, this._onMaterialAssetAdd, this);

        const _prev = assets.get(this._materialAsset);

        if (_prev) {
          this._unbindMaterialAsset(_prev);
        }
      }

      this._materialAsset = _id;

      if (this._materialAsset) {
        const asset = assets.get(this._materialAsset);

        if (!asset) {
          this._setMaterial(this.system.defaultMaterial);

          assets.on('add:' + this._materialAsset, this._onMaterialAssetAdd, this);
        } else {
          this._bindMaterialAsset(asset);
        }
      } else {
        this._setMaterial(this.system.defaultMaterial);
      }
    }
  }

  get materialAsset() {
    return this._materialAsset;
  }

  set material(value) {
    if (this._material === value) return;
    this.materialAsset = null;

    this._setMaterial(value);
  }

  get material() {
    return this._material;
  }

  set mapping(value) {
    if (this._type !== 'asset') return;

    this._unsetMaterialEvents();

    if (!value) value = {};
    this._mapping = value;
    if (!this._model) return;
    const meshInstances = this._model.meshInstances;
    const modelAsset = this.asset ? this.system.app.assets.get(this.asset) : null;
    const assetMapping = modelAsset ? modelAsset.data.mapping : null;
    let asset = null;

    for (let i = 0, len = meshInstances.length; i < len; i++) {
      if (value[i] !== undefined) {
        if (value[i]) {
          asset = this.system.app.assets.get(value[i]);

          this._loadAndSetMeshInstanceMaterial(asset, meshInstances[i], i);
        } else {
          meshInstances[i].material = this.system.defaultMaterial;
        }
      } else if (assetMapping) {
        if (assetMapping[i] && (assetMapping[i].material || assetMapping[i].path)) {
          if (assetMapping[i].material !== undefined) {
            asset = this.system.app.assets.get(assetMapping[i].material);
          } else if (assetMapping[i].path !== undefined) {
            const url = this._getMaterialAssetUrl(assetMapping[i].path);

            if (url) {
              asset = this.system.app.assets.getByUrl(url);
            }
          }

          this._loadAndSetMeshInstanceMaterial(asset, meshInstances[i], i);
        } else {
          meshInstances[i].material = this.system.defaultMaterial;
        }
      }
    }
  }

  get mapping() {
    return this._mapping;
  }

  addModelToLayers() {
    const layers = this.system.app.scene.layers;

    for (let i = 0; i < this._layers.length; i++) {
      const layer = layers.getLayerById(this._layers[i]);

      if (layer) {
        layer.addMeshInstances(this.meshInstances);
      }
    }
  }

  removeModelFromLayers() {
    const layers = this.system.app.scene.layers;

    for (let i = 0; i < this._layers.length; i++) {
      const layer = layers.getLayerById(this._layers[i]);
      if (!layer) continue;
      layer.removeMeshInstances(this.meshInstances);
    }
  }

  onRemoveChild() {
    if (this._model) this.removeModelFromLayers();
  }

  onInsertChild() {
    if (this._model && this.enabled && this.entity.enabled) this.addModelToLayers();
  }

  onRemove() {
    this.asset = null;
    this.model = null;
    this.materialAsset = null;

    this._unsetMaterialEvents();

    this.entity.off('remove', this.onRemoveChild, this);
    this.entity.off('insert', this.onInsertChild, this);
  }

  onLayersChanged(oldComp, newComp) {
    this.addModelToLayers();
    oldComp.off('add', this.onLayerAdded, this);
    oldComp.off('remove', this.onLayerRemoved, this);
    newComp.on('add', this.onLayerAdded, this);
    newComp.on('remove', this.onLayerRemoved, this);
  }

  onLayerAdded(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.addMeshInstances(this.meshInstances);
  }

  onLayerRemoved(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.removeMeshInstances(this.meshInstances);
  }

  _setMaterialEvent(index, event, id, handler) {
    const evt = event + ':' + id;
    this.system.app.assets.on(evt, handler, this);
    if (!this._materialEvents) this._materialEvents = [];
    if (!this._materialEvents[index]) this._materialEvents[index] = {};
    this._materialEvents[index][evt] = {
      id: id,
      handler: handler
    };
  }

  _unsetMaterialEvents() {
    const assets = this.system.app.assets;
    const events = this._materialEvents;
    if (!events) return;

    for (let i = 0, len = events.length; i < len; i++) {
      if (!events[i]) continue;
      const evt = events[i];

      for (const key in evt) {
        assets.off(key, evt[key].handler, this);
      }
    }

    this._materialEvents = null;
  }

  _getAssetByIdOrPath(idOrPath) {
    let asset = null;
    const isPath = isNaN(parseInt(idOrPath, 10));

    if (!isPath) {
      asset = this.system.app.assets.get(idOrPath);
    } else if (this.asset) {
      const url = this._getMaterialAssetUrl(idOrPath);

      if (url) asset = this.system.app.assets.getByUrl(url);
    }

    return asset;
  }

  _getMaterialAssetUrl(path) {
    if (!this.asset) return null;
    const modelAsset = this.system.app.assets.get(this.asset);
    return modelAsset ? modelAsset.getAbsoluteUrl(path) : null;
  }

  _loadAndSetMeshInstanceMaterial(materialAsset, meshInstance, index) {
    const assets = this.system.app.assets;
    if (!materialAsset) return;

    if (materialAsset.resource) {
      meshInstance.material = materialAsset.resource;

      this._setMaterialEvent(index, 'remove', materialAsset.id, function () {
        meshInstance.material = this.system.defaultMaterial;
      });
    } else {
      this._setMaterialEvent(index, 'load', materialAsset.id, function (asset) {
        meshInstance.material = asset.resource;

        this._setMaterialEvent(index, 'remove', materialAsset.id, function () {
          meshInstance.material = this.system.defaultMaterial;
        });
      });

      if (this.enabled && this.entity.enabled) assets.load(materialAsset);
    }
  }

  onEnable() {
    const app = this.system.app;
    const scene = app.scene;
    scene.on('set:layers', this.onLayersChanged, this);

    if (scene.layers) {
      scene.layers.on('add', this.onLayerAdded, this);
      scene.layers.on('remove', this.onLayerRemoved, this);
    }

    const isAsset = this._type === 'asset';
    let asset;

    if (this._model) {
      this.addModelToLayers();
    } else if (isAsset && this._asset) {
      asset = app.assets.get(this._asset);

      if (asset && asset.resource !== this._model) {
        this._bindModelAsset(asset);
      }
    }

    if (this._materialAsset) {
      asset = app.assets.get(this._materialAsset);

      if (asset && asset.resource !== this._material) {
        this._bindMaterialAsset(asset);
      }
    }

    if (isAsset) {
      if (this._mapping) {
        for (const index in this._mapping) {
          if (this._mapping[index]) {
            asset = this._getAssetByIdOrPath(this._mapping[index]);

            if (asset && !asset.resource) {
              app.assets.load(asset);
            }
          }
        }
      }
    }

    if (this._batchGroupId >= 0) {
      var _app$batcher;

      (_app$batcher = app.batcher) == null ? void 0 : _app$batcher.insert(BatchGroup.MODEL, this.batchGroupId, this.entity);
    }
  }

  onDisable() {
    const app = this.system.app;
    const scene = app.scene;
    scene.off('set:layers', this.onLayersChanged, this);

    if (scene.layers) {
      scene.layers.off('add', this.onLayerAdded, this);
      scene.layers.off('remove', this.onLayerRemoved, this);
    }

    if (this._batchGroupId >= 0) {
      var _app$batcher2;

      (_app$batcher2 = app.batcher) == null ? void 0 : _app$batcher2.remove(BatchGroup.MODEL, this.batchGroupId, this.entity);
    }

    if (this._model) {
      this.removeModelFromLayers();
    }
  }

  hide() {
    if (this._model) {
      const instances = this._model.meshInstances;

      for (let i = 0, l = instances.length; i < l; i++) {
        instances[i].visible = false;
      }
    }
  }

  show() {
    if (this._model) {
      const instances = this._model.meshInstances;

      for (let i = 0, l = instances.length; i < l; i++) {
        instances[i].visible = true;
      }
    }
  }

  _bindMaterialAsset(asset) {
    asset.on('load', this._onMaterialAssetLoad, this);
    asset.on('unload', this._onMaterialAssetUnload, this);
    asset.on('remove', this._onMaterialAssetRemove, this);
    asset.on('change', this._onMaterialAssetChange, this);

    if (asset.resource) {
      this._onMaterialAssetLoad(asset);
    } else {
      if (!this.enabled || !this.entity.enabled) return;
      this.system.app.assets.load(asset);
    }
  }

  _unbindMaterialAsset(asset) {
    asset.off('load', this._onMaterialAssetLoad, this);
    asset.off('unload', this._onMaterialAssetUnload, this);
    asset.off('remove', this._onMaterialAssetRemove, this);
    asset.off('change', this._onMaterialAssetChange, this);
  }

  _onMaterialAssetAdd(asset) {
    this.system.app.assets.off('add:' + asset.id, this._onMaterialAssetAdd, this);

    if (this._materialAsset === asset.id) {
      this._bindMaterialAsset(asset);
    }
  }

  _onMaterialAssetLoad(asset) {
    this._setMaterial(asset.resource);
  }

  _onMaterialAssetUnload(asset) {
    this._setMaterial(this.system.defaultMaterial);
  }

  _onMaterialAssetRemove(asset) {
    this._onMaterialAssetUnload(asset);
  }

  _onMaterialAssetChange(asset) {}

  _bindModelAsset(asset) {
    this._unbindModelAsset(asset);

    asset.on('load', this._onModelAssetLoad, this);
    asset.on('unload', this._onModelAssetUnload, this);
    asset.on('change', this._onModelAssetChange, this);
    asset.on('remove', this._onModelAssetRemove, this);

    if (asset.resource) {
      this._onModelAssetLoad(asset);
    } else {
      if (!this.enabled || !this.entity.enabled) return;
      this.system.app.assets.load(asset);
    }
  }

  _unbindModelAsset(asset) {
    asset.off('load', this._onModelAssetLoad, this);
    asset.off('unload', this._onModelAssetUnload, this);
    asset.off('change', this._onModelAssetChange, this);
    asset.off('remove', this._onModelAssetRemove, this);
  }

  _onModelAssetAdded(asset) {
    this.system.app.assets.off('add:' + asset.id, this._onModelAssetAdded, this);

    if (asset.id === this._asset) {
      this._bindModelAsset(asset);
    }
  }

  _onModelAssetLoad(asset) {
    this.model = asset.resource.clone();
    this._clonedModel = true;
  }

  _onModelAssetUnload(asset) {
    this.model = null;
  }

  _onModelAssetChange(asset, attr, _new, _old) {
    if (attr === 'data') {
      this.mapping = this._mapping;
    }
  }

  _onModelAssetRemove(asset) {
    this.model = null;
  }

  _setMaterial(material) {
    if (this._material === material) return;
    this._material = material;
    const model = this._model;

    if (model && this._type !== 'asset') {
      const meshInstances = model.meshInstances;

      for (let i = 0, len = meshInstances.length; i < len; i++) {
        meshInstances[i].material = material;
      }
    }
  }

}

class ModelComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$b = ['enabled'];

class ModelComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'model';
    this.ComponentType = ModelComponent;
    this.DataType = ModelComponentData;
    this.schema = _schema$b;
    this.defaultMaterial = getDefaultMaterial(app.graphicsDevice);
    this.on('beforeremove', this.onRemove, this);
  }

  initializeComponentData(component, _data, properties) {
    properties = ['material', 'materialAsset', 'asset', 'castShadows', 'receiveShadows', 'castShadowsLightmap', 'lightmapped', 'lightmapSizeMultiplier', 'type', 'mapping', 'layers', 'isStatic', 'batchGroupId'];

    if (_data.batchGroupId === null || _data.batchGroupId === undefined) {
      _data.batchGroupId = -1;
    }

    if (_data.layers && _data.layers.length) {
      _data.layers = _data.layers.slice(0);
    }

    for (let i = 0; i < properties.length; i++) {
      if (_data.hasOwnProperty(properties[i])) {
        component[properties[i]] = _data[properties[i]];
      }
    }

    if (_data.aabbCenter && _data.aabbHalfExtents) {
      component.customAabb = new BoundingBox(new Vec3(_data.aabbCenter), new Vec3(_data.aabbHalfExtents));
    }

    super.initializeComponentData(component, _data, ['enabled']);
  }

  cloneComponent(entity, clone) {
    const data = {
      type: entity.model.type,
      asset: entity.model.asset,
      castShadows: entity.model.castShadows,
      receiveShadows: entity.model.receiveShadows,
      castShadowsLightmap: entity.model.castShadowsLightmap,
      lightmapped: entity.model.lightmapped,
      lightmapSizeMultiplier: entity.model.lightmapSizeMultiplier,
      isStatic: entity.model.isStatic,
      enabled: entity.model.enabled,
      layers: entity.model.layers,
      batchGroupId: entity.model.batchGroupId,
      mapping: extend$1({}, entity.model.mapping)
    };
    let materialAsset = entity.model.materialAsset;

    if (!(materialAsset instanceof Asset) && materialAsset != null) {
      materialAsset = this.app.assets.get(materialAsset);
    }

    const material = entity.model.material;

    if (!material || material === this.defaultMaterial || !materialAsset || material === materialAsset.resource) {
      data.materialAsset = materialAsset;
    }

    const component = this.addComponent(clone, data);

    if (entity.model.model && entity.model.type === 'asset' && !entity.model.asset) {
      component.model = entity.model.model.clone();
      component._clonedModel = true;
    }

    if (!data.materialAsset) component.material = material;

    if (entity.model.model) {
      const meshInstances = entity.model.model.meshInstances;
      const meshInstancesClone = component.model.meshInstances;

      for (let i = 0; i < meshInstances.length; i++) {
        meshInstancesClone[i].mask = meshInstances[i].mask;
        meshInstancesClone[i].material = meshInstances[i].material;
        meshInstancesClone[i].layer = meshInstances[i].layer;
        meshInstancesClone[i].receiveShadow = meshInstances[i].receiveShadow;
      }
    }

    if (entity.model.customAabb) {
      component.customAabb = entity.model.customAabb.clone();
    }

    return component;
  }

  onRemove(entity, component) {
    component.onRemove();
  }

}

Component._buildAccessors(ModelComponent.prototype, _schema$b);

const SIMPLE_PROPERTIES = ['emitterExtents', 'emitterRadius', 'emitterExtentsInner', 'emitterRadiusInner', 'loop', 'initialVelocity', 'animSpeed', 'normalMap', 'particleNormal'];
const COMPLEX_PROPERTIES = ['numParticles', 'lifetime', 'rate', 'rate2', 'startAngle', 'startAngle2', 'lighting', 'halfLambert', 'intensity', 'wrap', 'wrapBounds', 'depthWrite', 'noFog', 'sort', 'stretch', 'alignToMotion', 'preWarm', 'emitterShape', 'animTilesX', 'animTilesY', 'animStartFrame', 'animNumFrames', 'animNumAnimations', 'animIndex', 'randomizeAnimIndex', 'animLoop', 'colorMap', 'localSpace', 'screenSpace', 'orientation'];
const GRAPH_PROPERTIES = ['scaleGraph', 'scaleGraph2', 'colorGraph', 'colorGraph2', 'alphaGraph', 'alphaGraph2', 'velocityGraph', 'velocityGraph2', 'localVelocityGraph', 'localVelocityGraph2', 'rotationSpeedGraph', 'rotationSpeedGraph2', 'radialSpeedGraph', 'radialSpeedGraph2'];
const ASSET_PROPERTIES = ['colorMapAsset', 'normalMapAsset', 'meshAsset', 'renderAsset'];
let depthLayer;

class ParticleSystemComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._requestedDepth = false;
    this._drawOrder = 0;
    this.on('set_colorMapAsset', this.onSetColorMapAsset, this);
    this.on('set_normalMapAsset', this.onSetNormalMapAsset, this);
    this.on('set_meshAsset', this.onSetMeshAsset, this);
    this.on('set_mesh', this.onSetMesh, this);
    this.on('set_renderAsset', this.onSetRenderAsset, this);
    this.on('set_loop', this.onSetLoop, this);
    this.on('set_blendType', this.onSetBlendType, this);
    this.on('set_depthSoftening', this.onSetDepthSoftening, this);
    this.on('set_layers', this.onSetLayers, this);
    SIMPLE_PROPERTIES.forEach(prop => {
      this.on(`set_${prop}`, this.onSetSimpleProperty, this);
    });
    COMPLEX_PROPERTIES.forEach(prop => {
      this.on(`set_${prop}`, this.onSetComplexProperty, this);
    });
    GRAPH_PROPERTIES.forEach(prop => {
      this.on(`set_${prop}`, this.onSetGraphProperty, this);
    });
  }

  set drawOrder(drawOrder) {
    this._drawOrder = drawOrder;

    if (this.emitter) {
      this.emitter.drawOrder = drawOrder;
    }
  }

  get drawOrder() {
    return this._drawOrder;
  }

  addMeshInstanceToLayers() {
    if (!this.emitter) return;

    for (let i = 0; i < this.layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) continue;
      layer.addMeshInstances([this.emitter.meshInstance]);
      this.emitter._layer = layer;
    }
  }

  removeMeshInstanceFromLayers() {
    if (!this.emitter) return;

    for (let i = 0; i < this.layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) continue;
      layer.removeMeshInstances([this.emitter.meshInstance]);
    }
  }

  onSetLayers(name, oldValue, newValue) {
    if (!this.emitter) return;

    for (let i = 0; i < oldValue.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(oldValue[i]);
      if (!layer) continue;
      layer.removeMeshInstances([this.emitter.meshInstance]);
    }

    if (!this.enabled || !this.entity.enabled) return;

    for (let i = 0; i < newValue.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(newValue[i]);
      if (!layer) continue;
      layer.addMeshInstances([this.emitter.meshInstance]);
    }
  }

  onLayersChanged(oldComp, newComp) {
    this.addMeshInstanceToLayers();
    oldComp.off('add', this.onLayerAdded, this);
    oldComp.off('remove', this.onLayerRemoved, this);
    newComp.on('add', this.onLayerAdded, this);
    newComp.on('remove', this.onLayerRemoved, this);
  }

  onLayerAdded(layer) {
    if (!this.emitter) return;
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.addMeshInstances([this.emitter.meshInstance]);
  }

  onLayerRemoved(layer) {
    if (!this.emitter) return;
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.removeMeshInstances([this.emitter.meshInstance]);
  }

  _bindColorMapAsset(asset) {
    asset.on('load', this._onColorMapAssetLoad, this);
    asset.on('unload', this._onColorMapAssetUnload, this);
    asset.on('remove', this._onColorMapAssetRemove, this);
    asset.on('change', this._onColorMapAssetChange, this);

    if (asset.resource) {
      this._onColorMapAssetLoad(asset);
    } else {
      if (!this.enabled || !this.entity.enabled) return;
      this.system.app.assets.load(asset);
    }
  }

  _unbindColorMapAsset(asset) {
    asset.off('load', this._onColorMapAssetLoad, this);
    asset.off('unload', this._onColorMapAssetUnload, this);
    asset.off('remove', this._onColorMapAssetRemove, this);
    asset.off('change', this._onColorMapAssetChange, this);
  }

  _onColorMapAssetLoad(asset) {
    this.colorMap = asset.resource;
  }

  _onColorMapAssetUnload(asset) {
    this.colorMap = null;
  }

  _onColorMapAssetRemove(asset) {
    this._onColorMapAssetUnload(asset);
  }

  _onColorMapAssetChange(asset) {}

  onSetColorMapAsset(name, oldValue, newValue) {
    const assets = this.system.app.assets;

    if (oldValue) {
      const asset = assets.get(oldValue);

      if (asset) {
        this._unbindColorMapAsset(asset);
      }
    }

    if (newValue) {
      if (newValue instanceof Asset) {
        this.data.colorMapAsset = newValue.id;
        newValue = newValue.id;
      }

      const asset = assets.get(newValue);

      if (asset) {
        this._bindColorMapAsset(asset);
      } else {
        assets.once('add:' + newValue, asset => {
          this._bindColorMapAsset(asset);
        });
      }
    } else {
      this.colorMap = null;
    }
  }

  _bindNormalMapAsset(asset) {
    asset.on('load', this._onNormalMapAssetLoad, this);
    asset.on('unload', this._onNormalMapAssetUnload, this);
    asset.on('remove', this._onNormalMapAssetRemove, this);
    asset.on('change', this._onNormalMapAssetChange, this);

    if (asset.resource) {
      this._onNormalMapAssetLoad(asset);
    } else {
      if (!this.enabled || !this.entity.enabled) return;
      this.system.app.assets.load(asset);
    }
  }

  _unbindNormalMapAsset(asset) {
    asset.off('load', this._onNormalMapAssetLoad, this);
    asset.off('unload', this._onNormalMapAssetUnload, this);
    asset.off('remove', this._onNormalMapAssetRemove, this);
    asset.off('change', this._onNormalMapAssetChange, this);
  }

  _onNormalMapAssetLoad(asset) {
    this.normalMap = asset.resource;
  }

  _onNormalMapAssetUnload(asset) {
    this.normalMap = null;
  }

  _onNormalMapAssetRemove(asset) {
    this._onNormalMapAssetUnload(asset);
  }

  _onNormalMapAssetChange(asset) {}

  onSetNormalMapAsset(name, oldValue, newValue) {
    const assets = this.system.app.assets;

    if (oldValue) {
      const asset = assets.get(oldValue);

      if (asset) {
        this._unbindNormalMapAsset(asset);
      }
    }

    if (newValue) {
      if (newValue instanceof Asset) {
        this.data.normalMapAsset = newValue.id;
        newValue = newValue.id;
      }

      const asset = assets.get(newValue);

      if (asset) {
        this._bindNormalMapAsset(asset);
      } else {
        assets.once('add:' + newValue, asset => {
          this._bindNormalMapAsset(asset);
        });
      }
    } else {
      this.normalMap = null;
    }
  }

  _bindMeshAsset(asset) {
    asset.on('load', this._onMeshAssetLoad, this);
    asset.on('unload', this._onMeshAssetUnload, this);
    asset.on('remove', this._onMeshAssetRemove, this);
    asset.on('change', this._onMeshAssetChange, this);

    if (asset.resource) {
      this._onMeshAssetLoad(asset);
    } else {
      if (!this.enabled || !this.entity.enabled) return;
      this.system.app.assets.load(asset);
    }
  }

  _unbindMeshAsset(asset) {
    asset.off('load', this._onMeshAssetLoad, this);
    asset.off('unload', this._onMeshAssetUnload, this);
    asset.off('remove', this._onMeshAssetRemove, this);
    asset.off('change', this._onMeshAssetChange, this);
  }

  _onMeshAssetLoad(asset) {
    this._onMeshChanged(asset.resource);
  }

  _onMeshAssetUnload(asset) {
    this.mesh = null;
  }

  _onMeshAssetRemove(asset) {
    this._onMeshAssetUnload(asset);
  }

  _onMeshAssetChange(asset) {}

  onSetMeshAsset(name, oldValue, newValue) {
    const assets = this.system.app.assets;

    if (oldValue) {
      const asset = assets.get(oldValue);

      if (asset) {
        this._unbindMeshAsset(asset);
      }
    }

    if (newValue) {
      if (newValue instanceof Asset) {
        this.data.meshAsset = newValue.id;
        newValue = newValue.id;
      }

      const asset = assets.get(newValue);

      if (asset) {
        this._bindMeshAsset(asset);
      }
    } else {
      this._onMeshChanged(null);
    }
  }

  onSetMesh(name, oldValue, newValue) {
    if (!newValue || newValue instanceof Asset || typeof newValue === 'number') {
      this.meshAsset = newValue;
    } else {
      this._onMeshChanged(newValue);
    }
  }

  _onMeshChanged(mesh) {
    if (mesh && !(mesh instanceof Mesh)) {
      if (mesh.meshInstances[0]) {
        mesh = mesh.meshInstances[0].mesh;
      } else {
        mesh = null;
      }
    }

    this.data.mesh = mesh;

    if (this.emitter) {
      this.emitter.mesh = mesh;
      this.emitter.resetMaterial();
      this.rebuild();
    }
  }

  onSetRenderAsset(name, oldValue, newValue) {
    const assets = this.system.app.assets;

    if (oldValue) {
      const asset = assets.get(oldValue);

      if (asset) {
        this._unbindRenderAsset(asset);
      }
    }

    if (newValue) {
      if (newValue instanceof Asset) {
        this.data.renderAsset = newValue.id;
        newValue = newValue.id;
      }

      const asset = assets.get(newValue);

      if (asset) {
        this._bindRenderAsset(asset);
      }
    } else {
      this._onRenderChanged(null);
    }
  }

  _bindRenderAsset(asset) {
    asset.on('load', this._onRenderAssetLoad, this);
    asset.on('unload', this._onRenderAssetUnload, this);
    asset.on('remove', this._onRenderAssetRemove, this);

    if (asset.resource) {
      this._onRenderAssetLoad(asset);
    } else {
      if (!this.enabled || !this.entity.enabled) return;
      this.system.app.assets.load(asset);
    }
  }

  _unbindRenderAsset(asset) {
    asset.off('load', this._onRenderAssetLoad, this);
    asset.off('unload', this._onRenderAssetUnload, this);
    asset.off('remove', this._onRenderAssetRemove, this);

    if (asset.resource) {
      asset.resource.off('set:meshes', this._onRenderSetMeshes, this);
    }
  }

  _onRenderAssetLoad(asset) {
    this._onRenderChanged(asset.resource);
  }

  _onRenderAssetUnload(asset) {
    this._onRenderChanged(null);
  }

  _onRenderAssetRemove(asset) {
    this._onRenderAssetUnload(asset);
  }

  _onRenderChanged(render) {
    if (!render) {
      this._onMeshChanged(null);

      return;
    }

    render.off('set:meshes', this._onRenderSetMeshes, this);
    render.on('set:meshes', this._onRenderSetMeshes, this);

    if (render.meshes) {
      this._onRenderSetMeshes(render.meshes);
    }
  }

  _onRenderSetMeshes(meshes) {
    this._onMeshChanged(meshes && meshes[0]);
  }

  onSetLoop(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.resetTime();
    }
  }

  onSetBlendType(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.material.blendType = newValue;
      this.emitter.resetMaterial();
      this.rebuild();
    }
  }

  _requestDepth() {
    if (this._requestedDepth) return;
    if (!depthLayer) depthLayer = this.system.app.scene.layers.getLayerById(LAYERID_DEPTH);

    if (depthLayer) {
      depthLayer.incrementCounter();
      this._requestedDepth = true;
    }
  }

  _releaseDepth() {
    if (!this._requestedDepth) return;

    if (depthLayer) {
      depthLayer.decrementCounter();
      this._requestedDepth = false;
    }
  }

  onSetDepthSoftening(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (newValue) {
        if (this.enabled && this.entity.enabled) this._requestDepth();
        if (this.emitter) this.emitter[name] = newValue;
      } else {
        if (this.enabled && this.entity.enabled) this._releaseDepth();
        if (this.emitter) this.emitter[name] = newValue;
      }

      if (this.emitter) {
        this.reset();
        this.emitter.resetMaterial();
        this.rebuild();
      }
    }
  }

  onSetSimpleProperty(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.resetMaterial();
    }
  }

  onSetComplexProperty(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.resetMaterial();
      this.rebuild();
      this.reset();
    }
  }

  onSetGraphProperty(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.rebuildGraphs();
      this.emitter.resetMaterial();
    }
  }

  onEnable() {
    const data = this.data;

    for (let i = 0, len = ASSET_PROPERTIES.length; i < len; i++) {
      let asset = data[ASSET_PROPERTIES[i]];

      if (asset) {
        if (!(asset instanceof Asset)) {
          const id = parseInt(asset, 10);

          if (id >= 0) {
            asset = this.system.app.assets.get(asset);
          } else {
            continue;
          }
        }

        if (asset && !asset.resource) {
          this.system.app.assets.load(asset);
        }
      }
    }

    if (!this.emitter) {
      let mesh = data.mesh;
      if (!(mesh instanceof Mesh)) mesh = null;
      this.emitter = new ParticleEmitter(this.system.app.graphicsDevice, {
        numParticles: data.numParticles,
        emitterExtents: data.emitterExtents,
        emitterExtentsInner: data.emitterExtentsInner,
        emitterRadius: data.emitterRadius,
        emitterRadiusInner: data.emitterRadiusInner,
        emitterShape: data.emitterShape,
        initialVelocity: data.initialVelocity,
        wrap: data.wrap,
        localSpace: data.localSpace,
        screenSpace: data.screenSpace,
        wrapBounds: data.wrapBounds,
        lifetime: data.lifetime,
        rate: data.rate,
        rate2: data.rate2,
        orientation: data.orientation,
        particleNormal: data.particleNormal,
        animTilesX: data.animTilesX,
        animTilesY: data.animTilesY,
        animStartFrame: data.animStartFrame,
        animNumFrames: data.animNumFrames,
        animNumAnimations: data.animNumAnimations,
        animIndex: data.animIndex,
        randomizeAnimIndex: data.randomizeAnimIndex,
        animSpeed: data.animSpeed,
        animLoop: data.animLoop,
        startAngle: data.startAngle,
        startAngle2: data.startAngle2,
        scaleGraph: data.scaleGraph,
        scaleGraph2: data.scaleGraph2,
        colorGraph: data.colorGraph,
        colorGraph2: data.colorGraph2,
        alphaGraph: data.alphaGraph,
        alphaGraph2: data.alphaGraph2,
        localVelocityGraph: data.localVelocityGraph,
        localVelocityGraph2: data.localVelocityGraph2,
        velocityGraph: data.velocityGraph,
        velocityGraph2: data.velocityGraph2,
        rotationSpeedGraph: data.rotationSpeedGraph,
        rotationSpeedGraph2: data.rotationSpeedGraph2,
        radialSpeedGraph: data.radialSpeedGraph,
        radialSpeedGraph2: data.radialSpeedGraph2,
        colorMap: data.colorMap,
        normalMap: data.normalMap,
        loop: data.loop,
        preWarm: data.preWarm,
        sort: data.sort,
        stretch: data.stretch,
        alignToMotion: data.alignToMotion,
        lighting: data.lighting,
        halfLambert: data.halfLambert,
        intensity: data.intensity,
        depthSoftening: data.depthSoftening,
        scene: this.system.app.scene,
        mesh: mesh,
        depthWrite: data.depthWrite,
        noFog: data.noFog,
        node: this.entity,
        blendType: data.blendType
      });
      this.emitter.meshInstance.node = this.entity;
      this.emitter.drawOrder = this.drawOrder;

      if (!data.autoPlay) {
        this.pause();
        this.emitter.meshInstance.visible = false;
      }
    }

    if (this.emitter.colorMap) {
      this.addMeshInstanceToLayers();
    }

    this.system.app.scene.on('set:layers', this.onLayersChanged, this);

    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on('add', this.onLayerAdded, this);
      this.system.app.scene.layers.on('remove', this.onLayerRemoved, this);
    }

    if (this.enabled && this.entity.enabled && data.depthSoftening) {
      this._requestDepth();
    }
  }

  onDisable() {
    this.system.app.scene.off('set:layers', this.onLayersChanged, this);

    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off('add', this.onLayerAdded, this);
      this.system.app.scene.layers.off('remove', this.onLayerRemoved, this);
    }

    if (this.emitter) {
      this.removeMeshInstanceFromLayers();
      if (this.data.depthSoftening) this._releaseDepth();
      this.emitter.camera = null;
    }
  }

  onBeforeRemove() {
    if (this.enabled) {
      this.enabled = false;
    }

    if (this.emitter) {
      this.emitter.destroy();
      this.emitter = null;
    }

    for (let i = 0; i < ASSET_PROPERTIES.length; i++) {
      const prop = ASSET_PROPERTIES[i];

      if (this.data[prop]) {
        this[prop] = null;
      }
    }

    this.off();
  }

  reset() {
    if (this.emitter) {
      this.emitter.reset();
    }
  }

  stop() {
    if (this.emitter) {
      this.emitter.loop = false;
      this.emitter.resetTime();
      this.emitter.addTime(0, true);
    }
  }

  pause() {
    this.data.paused = true;
  }

  unpause() {
    this.data.paused = false;
  }

  play() {
    this.data.paused = false;

    if (this.emitter) {
      this.emitter.meshInstance.visible = true;
      this.emitter.loop = this.data.loop;
      this.emitter.resetTime();
    }
  }

  isPlaying() {
    if (this.data.paused) {
      return false;
    }

    if (this.emitter && this.emitter.loop) {
      return true;
    }

    return Date.now() <= this.emitter.endTime;
  }

  rebuild() {
    const enabled = this.enabled;
    this.enabled = false;

    if (this.emitter) {
      this.emitter.rebuild();
      this.emitter.meshInstance.node = this.entity;
    }

    this.enabled = enabled;
  }

}

class ParticleSystemComponentData {
  constructor() {
    this.numParticles = 1;
    this.rate = 1;
    this.rate2 = null;
    this.startAngle = 0;
    this.startAngle2 = null;
    this.lifetime = 50;
    this.emitterExtents = new Vec3();
    this.emitterExtentsInner = new Vec3();
    this.emitterRadius = 0;
    this.emitterRadiusInner = 0;
    this.emitterShape = EMITTERSHAPE_BOX;
    this.initialVelocity = 0;
    this.wrapBounds = new Vec3();
    this.localSpace = false;
    this.screenSpace = false;
    this.colorMap = null;
    this.colorMapAsset = null;
    this.normalMap = null;
    this.normalMapAsset = null;
    this.loop = true;
    this.preWarm = false;
    this.sort = 0;
    this.mode = PARTICLEMODE_GPU;
    this.scene = null;
    this.lighting = false;
    this.halfLambert = false;
    this.intensity = 1;
    this.stretch = 0.0;
    this.alignToMotion = false;
    this.depthSoftening = 0;
    this.meshAsset = null;
    this.mesh = null;
    this.depthWrite = false;
    this.noFog = false;
    this.orientation = PARTICLEORIENTATION_SCREEN;
    this.particleNormal = new Vec3(0, 1, 0);
    this.animTilesX = 1;
    this.animTilesY = 1;
    this.animStartFrame = 0;
    this.animNumFrames = 1;
    this.animNumAnimations = 1;
    this.animIndex = 0;
    this.randomizeAnimIndex = false;
    this.animSpeed = 1;
    this.animLoop = true;
    this.scaleGraph = null;
    this.scaleGraph2 = null;
    this.colorGraph = null;
    this.colorGraph2 = null;
    this.alphaGraph = null;
    this.alphaGraph2 = null;
    this.localVelocityGraph = null;
    this.localVelocityGraph2 = null;
    this.velocityGraph = null;
    this.velocityGraph2 = null;
    this.rotationSpeedGraph = null;
    this.rotationSpeedGraph2 = null;
    this.radialSpeedGraph = null;
    this.radialSpeedGraph2 = null;
    this.blendType = BLEND_NORMAL;
    this.enabled = true;
    this.paused = false;
    this.autoPlay = true;
    this.layers = [LAYERID_WORLD];
  }

}

const _schema$a = ['enabled', 'autoPlay', 'numParticles', 'lifetime', 'rate', 'rate2', 'startAngle', 'startAngle2', 'loop', 'preWarm', 'lighting', 'halfLambert', 'intensity', 'depthWrite', 'noFog', 'depthSoftening', 'sort', 'blendType', 'stretch', 'alignToMotion', 'emitterShape', 'emitterExtents', 'emitterExtentsInner', 'emitterRadius', 'emitterRadiusInner', 'initialVelocity', 'wrap', 'wrapBounds', 'localSpace', 'screenSpace', 'colorMapAsset', 'normalMapAsset', 'mesh', 'meshAsset', 'renderAsset', 'orientation', 'particleNormal', 'localVelocityGraph', 'localVelocityGraph2', 'velocityGraph', 'velocityGraph2', 'rotationSpeedGraph', 'rotationSpeedGraph2', 'radialSpeedGraph', 'radialSpeedGraph2', 'scaleGraph', 'scaleGraph2', 'colorGraph', 'colorGraph2', 'alphaGraph', 'alphaGraph2', 'colorMap', 'normalMap', 'animTilesX', 'animTilesY', 'animStartFrame', 'animNumFrames', 'animNumAnimations', 'animIndex', 'randomizeAnimIndex', 'animSpeed', 'animLoop', 'layers'];

class ParticleSystemComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'particlesystem';
    this.ComponentType = ParticleSystemComponent;
    this.DataType = ParticleSystemComponentData;
    this.schema = _schema$a;
    this.propertyTypes = {
      emitterExtents: 'vec3',
      emitterExtentsInner: 'vec3',
      particleNormal: 'vec3',
      wrapBounds: 'vec3',
      localVelocityGraph: 'curveset',
      localVelocityGraph2: 'curveset',
      velocityGraph: 'curveset',
      velocityGraph2: 'curveset',
      colorGraph: 'curveset',
      colorGraph2: 'curveset',
      alphaGraph: 'curve',
      alphaGraph2: 'curve',
      rotationSpeedGraph: 'curve',
      rotationSpeedGraph2: 'curve',
      radialSpeedGraph: 'curve',
      radialSpeedGraph2: 'curve',
      scaleGraph: 'curve',
      scaleGraph2: 'curve'
    };
    this.on('beforeremove', this.onBeforeRemove, this);
    this.app.systems.on('update', this.onUpdate, this);
  }

  initializeComponentData(component, _data, properties) {
    const data = {};
    properties = [];
    const types = this.propertyTypes;

    if (_data.mesh instanceof Asset || typeof _data.mesh === 'number') {
      _data.meshAsset = _data.mesh;
      delete _data.mesh;
    }

    for (const prop in _data) {
      if (_data.hasOwnProperty(prop)) {
        properties.push(prop);
        data[prop] = _data[prop];
      }

      if (types[prop] === 'vec3') {
        if (Array.isArray(data[prop])) {
          data[prop] = new Vec3(data[prop][0], data[prop][1], data[prop][2]);
        }
      } else if (types[prop] === 'curve') {
        if (!(data[prop] instanceof Curve$1)) {
          const t = data[prop].type;
          data[prop] = new Curve$1(data[prop].keys);
          data[prop].type = t;
        }
      } else if (types[prop] === 'curveset') {
        if (!(data[prop] instanceof CurveSet$1)) {
          const t = data[prop].type;
          data[prop] = new CurveSet$1(data[prop].keys);
          data[prop].type = t;
        }
      }

      if (data.layers && Array.isArray(data.layers)) {
        data.layers = data.layers.slice(0);
      }
    }

    super.initializeComponentData(component, data, properties);
  }

  cloneComponent(entity, clone) {
    const source = entity.particlesystem.data;
    const schema = this.schema;
    const data = {};

    for (let i = 0, len = schema.length; i < len; i++) {
      const prop = schema[i];
      let sourceProp = source[prop];

      if (sourceProp instanceof Vec3 || sourceProp instanceof Curve$1 || sourceProp instanceof CurveSet$1) {
        sourceProp = sourceProp.clone();
        data[prop] = sourceProp;
      } else if (prop === 'layers') {
        data.layers = source.layers.slice(0);
      } else {
        if (sourceProp !== null && sourceProp !== undefined) {
          data[prop] = sourceProp;
        }
      }
    }

    return this.addComponent(clone, data);
  }

  onUpdate(dt) {
    const components = this.store;
    let numSteps;
    const stats = this.app.stats.particles;

    for (const id in components) {
      if (components.hasOwnProperty(id)) {
        const component = components[id];
        const entity = component.entity;
        const data = component.data;

        if (data.enabled && entity.enabled) {
          const emitter = entity.particlesystem.emitter;
          if (!emitter.meshInstance.visible) continue;

          if (emitter.lighting) {
            const layers = data.layers;
            let lightCube;

            for (let i = 0; i < layers.length; i++) {
              const layer = this.app.scene.layers.getLayerById(layers[i]);
              if (!layer) continue;

              if (!layer._lightCube) {
                layer._lightCube = new Float32Array(6 * 3);
              }

              lightCube = layer._lightCube;

              for (let j = 0; j < 6; j++) {
                lightCube[j * 3] = this.app.scene.ambientLight.r;
                lightCube[j * 3 + 1] = this.app.scene.ambientLight.g;
                lightCube[j * 3 + 2] = this.app.scene.ambientLight.b;
              }

              const dirs = layer._splitLights[LIGHTTYPE_DIRECTIONAL];

              for (let j = 0; j < dirs.length; j++) {
                for (let c = 0; c < 6; c++) {
                  const weight = Math.max(emitter.lightCubeDir[c].dot(dirs[j]._direction), 0) * dirs[j]._intensity;

                  lightCube[c * 3] += dirs[j]._color.r * weight;
                  lightCube[c * 3 + 1] += dirs[j]._color.g * weight;
                  lightCube[c * 3 + 2] += dirs[j]._color.b * weight;
                }
              }
            }

            emitter.constantLightCube.setValue(lightCube);
          }

          if (!data.paused) {
            emitter.simTime += dt;

            if (emitter.simTime > emitter.fixedTimeStep) {
              numSteps = Math.floor(emitter.simTime / emitter.fixedTimeStep);
              emitter.simTime -= numSteps * emitter.fixedTimeStep;
            }

            if (numSteps) {
              numSteps = Math.min(numSteps, emitter.maxSubSteps);

              for (let i = 0; i < numSteps; i++) {
                emitter.addTime(emitter.fixedTimeStep, false);
              }

              stats._updatesPerFrame += numSteps;
              stats._frameTime += emitter._addTimeTime;
              emitter._addTimeTime = 0;
            }

            emitter.finishFrame();
          }
        }
      }
    }
  }

  onBeforeRemove(entity, component) {
    component.onBeforeRemove();
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(ParticleSystemComponent.prototype, _schema$a);

class RenderComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._type = 'asset';
    this._castShadows = true;
    this._receiveShadows = true;
    this._castShadowsLightmap = true;
    this._lightmapped = false;
    this._lightmapSizeMultiplier = 1;
    this._isStatic = false;
    this._batchGroupId = -1;
    this._layers = [LAYERID_WORLD];
    this._renderStyle = RENDERSTYLE_SOLID;
    this._meshInstances = [];
    this._customAabb = null;
    this._area = null;
    this._assetReference = [];
    this._materialReferences = [];
    this._material = void 0;
    this._rootBone = void 0;
    this._rootBone = new EntityReference(this, 'rootBone');

    this._rootBone.on('set:entity', this._onSetRootBone, this);

    this._assetReference = new AssetReference('asset', this, system.app.assets, {
      add: this._onRenderAssetAdded,
      load: this._onRenderAssetLoad,
      remove: this._onRenderAssetRemove,
      unload: this._onRenderAssetUnload
    }, this);
    this._material = system.defaultMaterial;
    entity.on('remove', this.onRemoveChild, this);
    entity.on('removehierarchy', this.onRemoveChild, this);
    entity.on('insert', this.onInsertChild, this);
    entity.on('inserthierarchy', this.onInsertChild, this);
  }

  set renderStyle(renderStyle) {
    if (this._renderStyle !== renderStyle) {
      this._renderStyle = renderStyle;

      MeshInstance._prepareRenderStyleForArray(this._meshInstances, renderStyle);
    }
  }

  get renderStyle() {
    return this._renderStyle;
  }

  set customAabb(value) {
    this._customAabb = value;
    const mi = this._meshInstances;

    if (mi) {
      for (let i = 0; i < mi.length; i++) {
        mi[i].setCustomAabb(this._customAabb);
      }
    }
  }

  get customAabb() {
    return this._customAabb;
  }

  set type(value) {
    if (this._type !== value) {
      this._area = null;
      this._type = value;
      this.destroyMeshInstances();

      if (value !== 'asset') {
        let material = this._material;

        if (!material || material === this.system.defaultMaterial) {
          material = this._materialReferences[0] && this._materialReferences[0].asset && this._materialReferences[0].asset.resource;
        }

        const primData = getShapePrimitive(this.system.app.graphicsDevice, value);
        this._area = primData.area;
        this.meshInstances = [new MeshInstance(primData.mesh, material || this.system.defaultMaterial, this.entity)];
      }
    }
  }

  get type() {
    return this._type;
  }

  set meshInstances(value) {
    this.destroyMeshInstances();
    this._meshInstances = value;

    if (this._meshInstances) {
      const mi = this._meshInstances;

      for (let i = 0; i < mi.length; i++) {
        if (!mi[i].node) {
          mi[i].node = this.entity;
        }

        mi[i].castShadow = this._castShadows;
        mi[i].receiveShadow = this._receiveShadows;
        mi[i].isStatic = this._isStatic;
        mi[i].renderStyle = this._renderStyle;
        mi[i].setLightmapped(this._lightmapped);
        mi[i].setCustomAabb(this._customAabb);
      }

      if (this.enabled && this.entity.enabled) {
        this.addToLayers();
      }
    }
  }

  get meshInstances() {
    return this._meshInstances;
  }

  set lightmapped(value) {
    if (value !== this._lightmapped) {
      this._lightmapped = value;
      const mi = this._meshInstances;

      if (mi) {
        for (let i = 0; i < mi.length; i++) {
          mi[i].setLightmapped(value);
        }
      }
    }
  }

  get lightmapped() {
    return this._lightmapped;
  }

  set castShadows(value) {
    if (this._castShadows !== value) {
      const mi = this._meshInstances;

      if (mi) {
        const layers = this.layers;
        const scene = this.system.app.scene;

        if (this._castShadows && !value) {
          for (let i = 0; i < layers.length; i++) {
            const layer = scene.layers.getLayerById(this.layers[i]);

            if (layer) {
              layer.removeShadowCasters(mi);
            }
          }
        }

        for (let i = 0; i < mi.length; i++) {
          mi[i].castShadow = value;
        }

        if (!this._castShadows && value) {
          for (let i = 0; i < layers.length; i++) {
            const layer = scene.layers.getLayerById(layers[i]);

            if (layer) {
              layer.addShadowCasters(mi);
            }
          }
        }
      }

      this._castShadows = value;
    }
  }

  get castShadows() {
    return this._castShadows;
  }

  set receiveShadows(value) {
    if (this._receiveShadows !== value) {
      this._receiveShadows = value;
      const mi = this._meshInstances;

      if (mi) {
        for (let i = 0; i < mi.length; i++) {
          mi[i].receiveShadow = value;
        }
      }
    }
  }

  get receiveShadows() {
    return this._receiveShadows;
  }

  set castShadowsLightmap(value) {
    this._castShadowsLightmap = value;
  }

  get castShadowsLightmap() {
    return this._castShadowsLightmap;
  }

  set lightmapSizeMultiplier(value) {
    this._lightmapSizeMultiplier = value;
  }

  get lightmapSizeMultiplier() {
    return this._lightmapSizeMultiplier;
  }

  set isStatic(value) {
    if (this._isStatic !== value) {
      this._isStatic = value;
      const mi = this._meshInstances;

      if (mi) {
        for (let i = 0; i < mi.length; i++) {
          mi[i].isStatic = value;
        }
      }
    }
  }

  get isStatic() {
    return this._isStatic;
  }

  set layers(value) {
    const layers = this.system.app.scene.layers;
    let layer;

    if (this._meshInstances) {
      for (let i = 0; i < this._layers.length; i++) {
        layer = layers.getLayerById(this._layers[i]);

        if (layer) {
          layer.removeMeshInstances(this._meshInstances);
        }
      }
    }

    this._layers.length = 0;

    for (let i = 0; i < value.length; i++) {
      this._layers[i] = value[i];
    }

    if (!this.enabled || !this.entity.enabled || !this._meshInstances) return;

    for (let i = 0; i < this._layers.length; i++) {
      layer = layers.getLayerById(this._layers[i]);

      if (layer) {
        layer.addMeshInstances(this._meshInstances);
      }
    }
  }

  get layers() {
    return this._layers;
  }

  set batchGroupId(value) {
    if (this._batchGroupId !== value) {
      if (this.entity.enabled && this._batchGroupId >= 0) {
        var _this$system$app$batc;

        (_this$system$app$batc = this.system.app.batcher) == null ? void 0 : _this$system$app$batc.remove(BatchGroup.RENDER, this.batchGroupId, this.entity);
      }

      if (this.entity.enabled && value >= 0) {
        var _this$system$app$batc2;

        (_this$system$app$batc2 = this.system.app.batcher) == null ? void 0 : _this$system$app$batc2.insert(BatchGroup.RENDER, value, this.entity);
      }

      if (value < 0 && this._batchGroupId >= 0 && this.enabled && this.entity.enabled) {
        this.addToLayers();
      }

      this._batchGroupId = value;
    }
  }

  get batchGroupId() {
    return this._batchGroupId;
  }

  set material(value) {
    if (this._material !== value) {
      this._material = value;

      if (this._meshInstances && this._type !== 'asset') {
        for (let i = 0; i < this._meshInstances.length; i++) {
          this._meshInstances[i].material = value;
        }
      }
    }
  }

  get material() {
    return this._material;
  }

  set materialAssets(value = []) {
    if (this._materialReferences.length > value.length) {
      for (let i = value.length; i < this._materialReferences.length; i++) {
        this._materialReferences[i].id = null;
      }

      this._materialReferences.length = value.length;
    }

    for (let i = 0; i < value.length; i++) {
      if (!this._materialReferences[i]) {
        this._materialReferences.push(new AssetReference(i, this, this.system.app.assets, {
          add: this._onMaterialAdded,
          load: this._onMaterialLoad,
          remove: this._onMaterialRemove,
          unload: this._onMaterialUnload
        }, this));
      }

      if (value[i]) {
        const id = value[i] instanceof Asset ? value[i].id : value[i];

        if (this._materialReferences[i].id !== id) {
          this._materialReferences[i].id = id;
        }

        if (this._materialReferences[i].asset) {
          this._onMaterialAdded(i, this, this._materialReferences[i].asset);
        }
      } else {
        this._materialReferences[i].id = null;

        if (this._meshInstances[i]) {
          this._meshInstances[i].material = this.system.defaultMaterial;
        }
      }
    }
  }

  get materialAssets() {
    return this._materialReferences.map(function (ref) {
      return ref.id;
    });
  }

  set asset(value) {
    const id = value instanceof Asset ? value.id : value;
    if (this._assetReference.id === id) return;

    if (this._assetReference.asset && this._assetReference.asset.resource) {
      this._onRenderAssetRemove();
    }

    this._assetReference.id = id;

    if (this._assetReference.asset) {
      this._onRenderAssetAdded();
    }
  }

  get asset() {
    return this._assetReference.id;
  }

  assignAsset(asset) {
    const id = asset instanceof Asset ? asset.id : asset;
    this._assetReference.id = id;
  }

  _onSetRootBone(entity) {
    if (entity) {
      this._onRootBoneChanged();
    }
  }

  _onRootBoneChanged() {
    this._clearSkinInstances();

    if (this.enabled && this.entity.enabled) {
      this._cloneSkinInstances();
    }
  }

  destroyMeshInstances() {
    const meshInstances = this._meshInstances;

    if (meshInstances) {
      this.removeFromLayers();

      this._clearSkinInstances();

      for (let i = 0; i < meshInstances.length; i++) {
        meshInstances[i].destroy();
      }

      this._meshInstances.length = 0;
    }
  }

  addToLayers() {
    const layers = this.system.app.scene.layers;

    for (let i = 0; i < this._layers.length; i++) {
      const layer = layers.getLayerById(this._layers[i]);

      if (layer) {
        layer.addMeshInstances(this._meshInstances);
      }
    }
  }

  removeFromLayers() {
    if (this._meshInstances && this._meshInstances.length) {
      const layers = this.system.app.scene.layers;

      for (let i = 0; i < this._layers.length; i++) {
        const layer = layers.getLayerById(this._layers[i]);

        if (layer) {
          layer.removeMeshInstances(this._meshInstances);
        }
      }
    }
  }

  onRemoveChild() {
    this.removeFromLayers();
  }

  onInsertChild() {
    if (this._meshInstances && this.enabled && this.entity.enabled) {
      this.addToLayers();
    }
  }

  onRemove() {
    this.destroyMeshInstances();
    this.asset = null;
    this.materialAsset = null;
    this._assetReference.id = null;

    for (let i = 0; i < this._materialReferences.length; i++) {
      this._materialReferences[i].id = null;
    }

    this.entity.off('remove', this.onRemoveChild, this);
    this.entity.off('insert', this.onInsertChild, this);
  }

  onLayersChanged(oldComp, newComp) {
    this.addToLayers();
    oldComp.off('add', this.onLayerAdded, this);
    oldComp.off('remove', this.onLayerRemoved, this);
    newComp.on('add', this.onLayerAdded, this);
    newComp.on('remove', this.onLayerRemoved, this);
  }

  onLayerAdded(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.addMeshInstances(this._meshInstances);
  }

  onLayerRemoved(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.removeMeshInstances(this._meshInstances);
  }

  onEnable() {
    const app = this.system.app;
    const scene = app.scene;

    this._rootBone.onParentComponentEnable();

    this._cloneSkinInstances();

    scene.on('set:layers', this.onLayersChanged, this);

    if (scene.layers) {
      scene.layers.on('add', this.onLayerAdded, this);
      scene.layers.on('remove', this.onLayerRemoved, this);
    }

    const isAsset = this._type === 'asset';

    if (this._meshInstances && this._meshInstances.length) {
      this.addToLayers();
    } else if (isAsset && this.asset) {
      this._onRenderAssetAdded();
    }

    for (let i = 0; i < this._materialReferences.length; i++) {
      if (this._materialReferences[i].asset) {
        this.system.app.assets.load(this._materialReferences[i].asset);
      }
    }

    if (this._batchGroupId >= 0) {
      var _app$batcher;

      (_app$batcher = app.batcher) == null ? void 0 : _app$batcher.insert(BatchGroup.RENDER, this.batchGroupId, this.entity);
    }
  }

  onDisable() {
    const app = this.system.app;
    const scene = app.scene;
    scene.off('set:layers', this.onLayersChanged, this);

    if (scene.layers) {
      scene.layers.off('add', this.onLayerAdded, this);
      scene.layers.off('remove', this.onLayerRemoved, this);
    }

    if (this._batchGroupId >= 0) {
      var _app$batcher2;

      (_app$batcher2 = app.batcher) == null ? void 0 : _app$batcher2.remove(BatchGroup.RENDER, this.batchGroupId, this.entity);
    }

    this.removeFromLayers();
  }

  hide() {
    if (this._meshInstances) {
      for (let i = 0; i < this._meshInstances.length; i++) {
        this._meshInstances[i].visible = false;
      }
    }
  }

  show() {
    if (this._meshInstances) {
      for (let i = 0; i < this._meshInstances.length; i++) {
        this._meshInstances[i].visible = true;
      }
    }
  }

  _onRenderAssetAdded() {
    if (!this._assetReference.asset) return;

    if (this._assetReference.asset.resource) {
      this._onRenderAssetLoad();
    } else if (this.enabled && this.entity.enabled) {
      this.system.app.assets.load(this._assetReference.asset);
    }
  }

  _onRenderAssetLoad() {
    this.destroyMeshInstances();

    if (this._assetReference.asset) {
      const render = this._assetReference.asset.resource;
      render.off('set:meshes', this._onSetMeshes, this);
      render.on('set:meshes', this._onSetMeshes, this);

      if (render.meshes) {
        this._onSetMeshes(render.meshes);
      }
    }
  }

  _onSetMeshes(meshes) {
    this._cloneMeshes(meshes);
  }

  _clearSkinInstances() {
    for (let i = 0; i < this._meshInstances.length; i++) {
      const meshInstance = this._meshInstances[i];
      SkinInstanceCache.removeCachedSkinInstance(meshInstance.skinInstance);
      meshInstance.skinInstance = null;
    }
  }

  _cloneSkinInstances() {
    if (this._meshInstances.length && this._rootBone.entity instanceof GraphNode) {
      for (let i = 0; i < this._meshInstances.length; i++) {
        const meshInstance = this._meshInstances[i];
        const mesh = meshInstance.mesh;

        if (mesh.skin && !meshInstance.skinInstance) {
          meshInstance.skinInstance = SkinInstanceCache.createCachedSkinInstance(mesh.skin, this._rootBone.entity, this.entity);
        }
      }
    }
  }

  _cloneMeshes(meshes) {
    if (meshes && meshes.length) {
      const meshInstances = [];

      for (let i = 0; i < meshes.length; i++) {
        const mesh = meshes[i];
        const material = this._materialReferences[i] && this._materialReferences[i].asset && this._materialReferences[i].asset.resource;
        const meshInst = new MeshInstance(mesh, material || this.system.defaultMaterial, this.entity);
        meshInstances.push(meshInst);

        if (mesh.morph) {
          meshInst.morphInstance = new MorphInstance(mesh.morph);
        }
      }

      this.meshInstances = meshInstances;

      this._cloneSkinInstances();
    }
  }

  _onRenderAssetUnload() {
    if (this._type === 'asset') {
      this.destroyMeshInstances();
    }
  }

  _onRenderAssetRemove() {
    if (this._assetReference.asset && this._assetReference.asset.resource) {
      this._assetReference.asset.resource.off('set:meshes', this._onSetMeshes, this);
    }

    this._onRenderAssetUnload();
  }

  _onMaterialAdded(index, component, asset) {
    if (asset.resource) {
      this._onMaterialLoad(index, component, asset);
    } else {
      if (this.enabled && this.entity.enabled) {
        this.system.app.assets.load(asset);
      }
    }
  }

  _updateMainMaterial(index, material) {
    if (index === 0) {
      this.material = material;
    }
  }

  _onMaterialLoad(index, component, asset) {
    if (this._meshInstances[index]) {
      this._meshInstances[index].material = asset.resource;
    }

    this._updateMainMaterial(index, asset.resource);
  }

  _onMaterialRemove(index, component, asset) {
    if (this._meshInstances[index]) {
      this._meshInstances[index].material = this.system.defaultMaterial;
    }

    this._updateMainMaterial(index, this.system.defaultMaterial);
  }

  _onMaterialUnload(index, component, asset) {
    if (this._meshInstances[index]) {
      this._meshInstances[index].material = this.system.defaultMaterial;
    }

    this._updateMainMaterial(index, this.system.defaultMaterial);
  }

  resolveDuplicatedEntityReferenceProperties(oldRender, duplicatedIdsMap) {
    if (oldRender.rootBone && duplicatedIdsMap[oldRender.rootBone]) {
      this.rootBone = duplicatedIdsMap[oldRender.rootBone];
    }

    this._clearSkinInstances();
  }

}

class RenderComponentData {
  constructor() {
    this.enabled = true;
    this.rootBone = null;
  }

}

const _schema$9 = [{
  name: 'rootBone',
  type: 'entity'
}, 'enabled'];
const _properties = ['material', 'meshInstances', 'asset', 'materialAssets', 'castShadows', 'receiveShadows', 'castShadowsLightmap', 'lightmapped', 'lightmapSizeMultiplier', 'renderStyle', 'type', 'layers', 'isStatic', 'batchGroupId'];

class RenderComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'render';
    this.ComponentType = RenderComponent;
    this.DataType = RenderComponentData;
    this.schema = _schema$9;
    this.defaultMaterial = getDefaultMaterial(app.graphicsDevice);
    this.on('beforeremove', this.onRemove, this);
  }

  initializeComponentData(component, _data, properties) {
    if (_data.batchGroupId === null || _data.batchGroupId === undefined) {
      _data.batchGroupId = -1;
    }

    if (_data.layers && _data.layers.length) {
      _data.layers = _data.layers.slice(0);
    }

    for (let i = 0; i < _properties.length; i++) {
      if (_data.hasOwnProperty(_properties[i])) {
        component[_properties[i]] = _data[_properties[i]];
      }
    }

    if (_data.aabbCenter && _data.aabbHalfExtents) {
      component.customAabb = new BoundingBox(new Vec3(_data.aabbCenter), new Vec3(_data.aabbHalfExtents));
    }

    super.initializeComponentData(component, _data, _schema$9);
  }

  cloneComponent(entity, clone) {
    const data = {};

    for (let i = 0; i < _properties.length; i++) {
      data[_properties[i]] = entity.render[_properties[i]];
    }

    data.enabled = entity.render.enabled;
    delete data.meshInstances;
    const component = this.addComponent(clone, data);
    const srcMeshInstances = entity.render.meshInstances;
    const meshes = srcMeshInstances.map(mi => mi.mesh);

    component._onSetMeshes(meshes);

    for (let m = 0; m < srcMeshInstances.length; m++) {
      component.meshInstances[m].material = srcMeshInstances[m].material;
    }

    if (entity.render.customAabb) {
      component.customAabb = entity.render.customAabb.clone();
    }

    return component;
  }

  onRemove(entity, component) {
    component.onRemove();
  }

}

Component._buildAccessors(RenderComponent.prototype, _schema$9);

class ObjectPool {
  constructor(constructorFunc, size) {
    this._constructor = constructorFunc;
    this._pool = [];
    this._count = 0;

    this._resize(size);
  }

  _resize(size) {
    if (size > this._pool.length) {
      for (let i = this._pool.length; i < size; i++) {
        this._pool[i] = new this._constructor();
      }
    }
  }

  allocate() {
    if (this._count >= this._pool.length) {
      this._resize(this._pool.length * 2);
    }

    return this._pool[this._count++];
  }

  freeAll() {
    this._count = 0;
  }

}

let ammoTransform;
let ammoVec1, ammoVec2, ammoQuat, ammoOrigin;

class RigidBodyComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._angularDamping = 0;
    this._angularFactor = new Vec3(1, 1, 1);
    this._angularVelocity = new Vec3();
    this._body = null;
    this._friction = 0.5;
    this._group = BODYGROUP_STATIC;
    this._linearDamping = 0;
    this._linearFactor = new Vec3(1, 1, 1);
    this._linearVelocity = new Vec3();
    this._mask = BODYMASK_NOT_STATIC;
    this._mass = 1;
    this._restitution = 0;
    this._rollingFriction = 0;
    this._simulationEnabled = false;
    this._type = BODYTYPE_STATIC;
  }

  static onLibraryLoaded() {
    if (typeof Ammo !== 'undefined') {
      ammoTransform = new Ammo.btTransform();
      ammoVec1 = new Ammo.btVector3();
      ammoVec2 = new Ammo.btVector3();
      ammoQuat = new Ammo.btQuaternion();
      ammoOrigin = new Ammo.btVector3(0, 0, 0);
    }
  }

  set angularDamping(damping) {
    if (this._angularDamping !== damping) {
      this._angularDamping = damping;

      if (this._body) {
        this._body.setDamping(this._linearDamping, damping);
      }
    }
  }

  get angularDamping() {
    return this._angularDamping;
  }

  set angularFactor(factor) {
    if (!this._angularFactor.equals(factor)) {
      this._angularFactor.copy(factor);

      if (this._body && this._type === BODYTYPE_DYNAMIC) {
        ammoVec1.setValue(factor.x, factor.y, factor.z);

        this._body.setAngularFactor(ammoVec1);
      }
    }
  }

  get angularFactor() {
    return this._angularFactor;
  }

  set angularVelocity(velocity) {
    if (this._body && this._type === BODYTYPE_DYNAMIC) {
      this._body.activate();

      ammoVec1.setValue(velocity.x, velocity.y, velocity.z);

      this._body.setAngularVelocity(ammoVec1);

      this._angularVelocity.copy(velocity);
    }
  }

  get angularVelocity() {
    if (this._body && this._type === BODYTYPE_DYNAMIC) {
      const velocity = this._body.getAngularVelocity();

      this._angularVelocity.set(velocity.x(), velocity.y(), velocity.z());
    }

    return this._angularVelocity;
  }

  set body(body) {
    if (this._body !== body) {
      this._body = body;

      if (body && this._simulationEnabled) {
        body.activate();
      }
    }
  }

  get body() {
    return this._body;
  }

  set friction(friction) {
    if (this._friction !== friction) {
      this._friction = friction;

      if (this._body) {
        this._body.setFriction(friction);
      }
    }
  }

  get friction() {
    return this._friction;
  }

  set group(group) {
    if (this._group !== group) {
      this._group = group;

      if (this.enabled && this.entity.enabled) {
        this.disableSimulation();
        this.enableSimulation();
      }
    }
  }

  get group() {
    return this._group;
  }

  set linearDamping(damping) {
    if (this._linearDamping !== damping) {
      this._linearDamping = damping;

      if (this._body) {
        this._body.setDamping(damping, this._angularDamping);
      }
    }
  }

  get linearDamping() {
    return this._linearDamping;
  }

  set linearFactor(factor) {
    if (!this._linearFactor.equals(factor)) {
      this._linearFactor.copy(factor);

      if (this._body && this._type === BODYTYPE_DYNAMIC) {
        ammoVec1.setValue(factor.x, factor.y, factor.z);

        this._body.setLinearFactor(ammoVec1);
      }
    }
  }

  get linearFactor() {
    return this._linearFactor;
  }

  set linearVelocity(velocity) {
    if (this._body && this._type === BODYTYPE_DYNAMIC) {
      this._body.activate();

      ammoVec1.setValue(velocity.x, velocity.y, velocity.z);

      this._body.setLinearVelocity(ammoVec1);

      this._linearVelocity.copy(velocity);
    }
  }

  get linearVelocity() {
    if (this._body && this._type === BODYTYPE_DYNAMIC) {
      const velocity = this._body.getLinearVelocity();

      this._linearVelocity.set(velocity.x(), velocity.y(), velocity.z());
    }

    return this._linearVelocity;
  }

  set mask(mask) {
    if (this._mask !== mask) {
      this._mask = mask;

      if (this.enabled && this.entity.enabled) {
        this.disableSimulation();
        this.enableSimulation();
      }
    }
  }

  get mask() {
    return this._mask;
  }

  set mass(mass) {
    if (this._mass !== mass) {
      this._mass = mass;

      if (this._body && this._type === BODYTYPE_DYNAMIC) {
        const enabled = this.enabled && this.entity.enabled;

        if (enabled) {
          this.disableSimulation();
        }

        this._body.getCollisionShape().calculateLocalInertia(mass, ammoVec1);

        this._body.setMassProps(mass, ammoVec1);

        this._body.updateInertiaTensor();

        if (enabled) {
          this.enableSimulation();
        }
      }
    }
  }

  get mass() {
    return this._mass;
  }

  set restitution(restitution) {
    if (this._restitution !== restitution) {
      this._restitution = restitution;

      if (this._body) {
        this._body.setRestitution(restitution);
      }
    }
  }

  get restitution() {
    return this._restitution;
  }

  set rollingFriction(friction) {
    if (this._rollingFriction !== friction) {
      this._rollingFriction = friction;

      if (this._body) {
        this._body.setRollingFriction(friction);
      }
    }
  }

  get rollingFriction() {
    return this._rollingFriction;
  }

  set type(type) {
    if (this._type !== type) {
      this._type = type;
      this.disableSimulation();

      switch (type) {
        case BODYTYPE_DYNAMIC:
          this._group = BODYGROUP_DYNAMIC;
          this._mask = BODYMASK_ALL;
          break;

        case BODYTYPE_KINEMATIC:
          this._group = BODYGROUP_KINEMATIC;
          this._mask = BODYMASK_ALL;
          break;

        case BODYTYPE_STATIC:
        default:
          this._group = BODYGROUP_STATIC;
          this._mask = BODYMASK_NOT_STATIC;
          break;
      }

      this.createBody();
    }
  }

  get type() {
    return this._type;
  }

  createBody() {
    const entity = this.entity;
    let shape;

    if (entity.collision) {
      shape = entity.collision.shape;

      if (entity.trigger) {
        entity.trigger.destroy();
        delete entity.trigger;
      }
    }

    if (shape) {
      if (this._body) this.system.onRemove(entity, this);
      const mass = this._type === BODYTYPE_DYNAMIC ? this._mass : 0;

      this._getEntityTransform(ammoTransform);

      const body = this.system.createBody(mass, shape, ammoTransform);
      body.setRestitution(this._restitution);
      body.setFriction(this._friction);
      body.setRollingFriction(this._rollingFriction);
      body.setDamping(this._linearDamping, this._angularDamping);

      if (this._type === BODYTYPE_DYNAMIC) {
        const linearFactor = this._linearFactor;
        ammoVec1.setValue(linearFactor.x, linearFactor.y, linearFactor.z);
        body.setLinearFactor(ammoVec1);
        const angularFactor = this._angularFactor;
        ammoVec1.setValue(angularFactor.x, angularFactor.y, angularFactor.z);
        body.setAngularFactor(ammoVec1);
      } else if (this._type === BODYTYPE_KINEMATIC) {
        body.setCollisionFlags(body.getCollisionFlags() | BODYFLAG_KINEMATIC_OBJECT);
        body.setActivationState(BODYSTATE_DISABLE_DEACTIVATION);
      }

      body.entity = entity;
      this.body = body;

      if (this.enabled && entity.enabled) {
        this.enableSimulation();
      }
    }
  }

  isActive() {
    return this._body ? this._body.isActive() : false;
  }

  activate() {
    if (this._body) {
      this._body.activate();
    }
  }

  enableSimulation() {
    const entity = this.entity;

    if (entity.collision && entity.collision.enabled && !this._simulationEnabled) {
      const body = this._body;

      if (body) {
        this.system.addBody(body, this._group, this._mask);

        switch (this._type) {
          case BODYTYPE_DYNAMIC:
            this.system._dynamic.push(this);

            body.forceActivationState(BODYSTATE_ACTIVE_TAG);
            this.syncEntityToBody();
            break;

          case BODYTYPE_KINEMATIC:
            this.system._kinematic.push(this);

            body.forceActivationState(BODYSTATE_DISABLE_DEACTIVATION);
            break;

          case BODYTYPE_STATIC:
            body.forceActivationState(BODYSTATE_ACTIVE_TAG);
            this.syncEntityToBody();
            break;
        }

        if (entity.collision.type === 'compound') {
          this.system._compounds.push(entity.collision);
        }

        body.activate();
        this._simulationEnabled = true;
      }
    }
  }

  disableSimulation() {
    const body = this._body;

    if (body && this._simulationEnabled) {
      const system = this.system;

      let idx = system._compounds.indexOf(this.entity.collision);

      if (idx > -1) {
        system._compounds.splice(idx, 1);
      }

      idx = system._dynamic.indexOf(this);

      if (idx > -1) {
        system._dynamic.splice(idx, 1);
      }

      idx = system._kinematic.indexOf(this);

      if (idx > -1) {
        system._kinematic.splice(idx, 1);
      }

      system.removeBody(body);
      body.forceActivationState(BODYSTATE_DISABLE_SIMULATION);
      this._simulationEnabled = false;
    }
  }

  applyForce() {
    let x, y, z;
    let px, py, pz;

    switch (arguments.length) {
      case 1:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        break;

      case 2:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        px = arguments[1].x;
        py = arguments[1].y;
        pz = arguments[1].z;
        break;

      case 3:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        break;

      case 6:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        px = arguments[3];
        py = arguments[4];
        pz = arguments[5];
        break;
    }

    const body = this._body;

    if (body) {
      body.activate();
      ammoVec1.setValue(x, y, z);

      if (px !== undefined) {
        ammoVec2.setValue(px, py, pz);
        body.applyForce(ammoVec1, ammoVec2);
      } else {
        body.applyForce(ammoVec1, ammoOrigin);
      }
    }
  }

  applyTorque() {
    let x, y, z;

    switch (arguments.length) {
      case 1:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        break;

      case 3:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        break;

      default:
        return;
    }

    const body = this._body;

    if (body) {
      body.activate();
      ammoVec1.setValue(x, y, z);
      body.applyTorque(ammoVec1);
    }
  }

  applyImpulse() {
    let x, y, z;
    let px, py, pz;

    switch (arguments.length) {
      case 1:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        break;

      case 2:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        px = arguments[1].x;
        py = arguments[1].y;
        pz = arguments[1].z;
        break;

      case 3:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        break;

      case 6:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        px = arguments[3];
        py = arguments[4];
        pz = arguments[5];
        break;

      default:
        return;
    }

    const body = this._body;

    if (body) {
      body.activate();
      ammoVec1.setValue(x, y, z);

      if (px !== undefined) {
        ammoVec2.setValue(px, py, pz);
        body.applyImpulse(ammoVec1, ammoVec2);
      } else {
        body.applyImpulse(ammoVec1, ammoOrigin);
      }
    }
  }

  applyTorqueImpulse() {
    let x, y, z;

    switch (arguments.length) {
      case 1:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        break;

      case 3:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        break;

      default:
        return;
    }

    const body = this._body;

    if (body) {
      body.activate();
      ammoVec1.setValue(x, y, z);
      body.applyTorqueImpulse(ammoVec1);
    }
  }

  isStatic() {
    return this._type === BODYTYPE_STATIC;
  }

  isStaticOrKinematic() {
    return this._type === BODYTYPE_STATIC || this._type === BODYTYPE_KINEMATIC;
  }

  isKinematic() {
    return this._type === BODYTYPE_KINEMATIC;
  }

  _getEntityTransform(transform) {
    const entity = this.entity;
    const pos = entity.getPosition();
    const rot = entity.getRotation();
    ammoVec1.setValue(pos.x, pos.y, pos.z);
    ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);
    transform.setOrigin(ammoVec1);
    transform.setRotation(ammoQuat);
  }

  syncEntityToBody() {
    const body = this._body;

    if (body) {
      this._getEntityTransform(ammoTransform);

      body.setWorldTransform(ammoTransform);

      if (this._type === BODYTYPE_KINEMATIC) {
        const motionState = body.getMotionState();

        if (motionState) {
          motionState.setWorldTransform(ammoTransform);
        }
      }

      body.activate();
    }
  }

  _updateDynamic() {
    const body = this._body;

    if (body.isActive()) {
      const motionState = body.getMotionState();

      if (motionState) {
        motionState.getWorldTransform(ammoTransform);
        const p = ammoTransform.getOrigin();
        const q = ammoTransform.getRotation();
        this.entity.setPosition(p.x(), p.y(), p.z());
        this.entity.setRotation(q.x(), q.y(), q.z(), q.w());
      }
    }
  }

  _updateKinematic() {
    const motionState = this._body.getMotionState();

    if (motionState) {
      this._getEntityTransform(ammoTransform);

      motionState.setWorldTransform(ammoTransform);
    }
  }

  teleport() {
    if (arguments.length < 3) {
      if (arguments[0]) {
        this.entity.setPosition(arguments[0]);
      }

      if (arguments[1]) {
        if (arguments[1] instanceof Quat) {
          this.entity.setRotation(arguments[1]);
        } else {
          this.entity.setEulerAngles(arguments[1]);
        }
      }
    } else {
      if (arguments.length === 6) {
        this.entity.setEulerAngles(arguments[3], arguments[4], arguments[5]);
      }

      this.entity.setPosition(arguments[0], arguments[1], arguments[2]);
    }

    this.syncEntityToBody();
  }

  onEnable() {
    if (!this._body) {
      this.createBody();
    }

    this.enableSimulation();
  }

  onDisable() {
    this.disableSimulation();
  }

}

class RigidBodyComponentData {
  constructor() {
    this.enabled = true;
  }

}

let ammoRayStart, ammoRayEnd;

class RaycastResult {
  constructor(entity, point, normal) {
    this.entity = entity;
    this.point = point;
    this.normal = normal;
  }

}

class SingleContactResult {
  constructor(a, b, contactPoint) {
    if (arguments.length === 0) {
      this.a = null;
      this.b = null;
      this.impulse = 0;
      this.localPointA = new Vec3();
      this.localPointB = new Vec3();
      this.pointA = new Vec3();
      this.pointB = new Vec3();
      this.normal = new Vec3();
    } else {
      this.a = a;
      this.b = b;
      this.impulse = contactPoint.impulse;
      this.localPointA = contactPoint.localPoint;
      this.localPointB = contactPoint.localPointOther;
      this.pointA = contactPoint.point;
      this.pointB = contactPoint.pointOther;
      this.normal = contactPoint.normal;
    }
  }

}

class ContactPoint {
  constructor(localPoint = new Vec3(), localPointOther = new Vec3(), point = new Vec3(), pointOther = new Vec3(), normal = new Vec3(), impulse = 0) {
    this.localPoint = localPoint;
    this.localPointOther = localPointOther;
    this.point = point;
    this.pointOther = pointOther;
    this.normal = normal;
    this.impulse = impulse;
  }

}

class ContactResult {
  constructor(other, contacts) {
    this.other = other;
    this.contacts = contacts;
  }

}

const _schema$8 = ['enabled'];

class RigidBodyComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.maxSubSteps = 10;
    this.fixedTimeStep = 1 / 60;
    this.gravity = new Vec3(0, -9.81, 0);
    this._dynamic = [];
    this._kinematic = [];
    this._triggers = [];
    this._compounds = [];
    this.id = 'rigidbody';
    this._stats = app.stats.frame;
    this.ComponentType = RigidBodyComponent;
    this.DataType = RigidBodyComponentData;
    this.contactPointPool = null;
    this.contactResultPool = null;
    this.singleContactResultPool = null;
    this.schema = _schema$8;
    this.collisions = {};
    this.frameCollisions = {};
    this.on('beforeremove', this.onBeforeRemove, this);
    this.on('remove', this.onRemove, this);
  }

  onLibraryLoaded() {
    if (typeof Ammo !== 'undefined') {
      this.collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
      this.dispatcher = new Ammo.btCollisionDispatcher(this.collisionConfiguration);
      this.overlappingPairCache = new Ammo.btDbvtBroadphase();
      this.solver = new Ammo.btSequentialImpulseConstraintSolver();
      this.dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(this.dispatcher, this.overlappingPairCache, this.solver, this.collisionConfiguration);

      if (this.dynamicsWorld.setInternalTickCallback) {
        const checkForCollisionsPointer = Ammo.addFunction(this._checkForCollisions.bind(this), 'vif');
        this.dynamicsWorld.setInternalTickCallback(checkForCollisionsPointer);
      }

      ammoRayStart = new Ammo.btVector3();
      ammoRayEnd = new Ammo.btVector3();
      RigidBodyComponent.onLibraryLoaded();
      this.contactPointPool = new ObjectPool(ContactPoint, 1);
      this.contactResultPool = new ObjectPool(ContactResult, 1);
      this.singleContactResultPool = new ObjectPool(SingleContactResult, 1);
      this.app.systems.on('update', this.onUpdate, this);
    } else {
      this.app.systems.off('update', this.onUpdate, this);
    }
  }

  initializeComponentData(component, data, properties) {
    const props = ['mass', 'linearDamping', 'angularDamping', 'linearFactor', 'angularFactor', 'friction', 'rollingFriction', 'restitution', 'type', 'group', 'mask'];

    for (const property of props) {
      if (data.hasOwnProperty(property)) {
        const value = data[property];

        if (Array.isArray(value)) {
          component[property] = new Vec3(value[0], value[1], value[2]);
        } else {
          component[property] = value;
        }
      }
    }

    super.initializeComponentData(component, data, ['enabled']);
  }

  cloneComponent(entity, clone) {
    const rigidbody = entity.rigidbody;
    const data = {
      enabled: rigidbody.enabled,
      mass: rigidbody.mass,
      linearDamping: rigidbody.linearDamping,
      angularDamping: rigidbody.angularDamping,
      linearFactor: [rigidbody.linearFactor.x, rigidbody.linearFactor.y, rigidbody.linearFactor.z],
      angularFactor: [rigidbody.angularFactor.x, rigidbody.angularFactor.y, rigidbody.angularFactor.z],
      friction: rigidbody.friction,
      rollingFriction: rigidbody.rollingFriction,
      restitution: rigidbody.restitution,
      type: rigidbody.type,
      group: rigidbody.group,
      mask: rigidbody.mask
    };
    return this.addComponent(clone, data);
  }

  onBeforeRemove(entity, component) {
    if (component.enabled) {
      component.enabled = false;
    }
  }

  onRemove(entity, component) {
    const body = component.body;

    if (body) {
      this.removeBody(body);
      this.destroyBody(body);
      component.body = null;
    }
  }

  addBody(body, group, mask) {
    if (group !== undefined && mask !== undefined) {
      this.dynamicsWorld.addRigidBody(body, group, mask);
    } else {
      this.dynamicsWorld.addRigidBody(body);
    }
  }

  removeBody(body) {
    this.dynamicsWorld.removeRigidBody(body);
  }

  createBody(mass, shape, transform) {
    const localInertia = new Ammo.btVector3(0, 0, 0);

    if (mass !== 0) {
      shape.calculateLocalInertia(mass, localInertia);
    }

    const motionState = new Ammo.btDefaultMotionState(transform);
    const bodyInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);
    const body = new Ammo.btRigidBody(bodyInfo);
    Ammo.destroy(bodyInfo);
    Ammo.destroy(localInertia);
    return body;
  }

  destroyBody(body) {
    const motionState = body.getMotionState();

    if (motionState) {
      Ammo.destroy(motionState);
    }

    Ammo.destroy(body);
  }

  raycastFirst(start, end) {
    let result = null;
    ammoRayStart.setValue(start.x, start.y, start.z);
    ammoRayEnd.setValue(end.x, end.y, end.z);
    const rayCallback = new Ammo.ClosestRayResultCallback(ammoRayStart, ammoRayEnd);
    this.dynamicsWorld.rayTest(ammoRayStart, ammoRayEnd, rayCallback);

    if (rayCallback.hasHit()) {
      const collisionObj = rayCallback.get_m_collisionObject();
      const body = Ammo.castObject(collisionObj, Ammo.btRigidBody);

      if (body) {
        const point = rayCallback.get_m_hitPointWorld();
        const normal = rayCallback.get_m_hitNormalWorld();
        result = new RaycastResult(body.entity, new Vec3(point.x(), point.y(), point.z()), new Vec3(normal.x(), normal.y(), normal.z()));

        if (arguments.length > 2) {
          const callback = arguments[2];
          callback(result);
        }
      }
    }

    Ammo.destroy(rayCallback);
    return result;
  }

  raycastAll(start, end) {
    const results = [];
    ammoRayStart.setValue(start.x, start.y, start.z);
    ammoRayEnd.setValue(end.x, end.y, end.z);
    const rayCallback = new Ammo.AllHitsRayResultCallback(ammoRayStart, ammoRayEnd);
    this.dynamicsWorld.rayTest(ammoRayStart, ammoRayEnd, rayCallback);

    if (rayCallback.hasHit()) {
      const collisionObjs = rayCallback.get_m_collisionObjects();
      const points = rayCallback.get_m_hitPointWorld();
      const normals = rayCallback.get_m_hitNormalWorld();
      const numHits = collisionObjs.size();

      for (let i = 0; i < numHits; i++) {
        const body = Ammo.castObject(collisionObjs.at(i), Ammo.btRigidBody);

        if (body) {
          const point = points.at(i);
          const normal = normals.at(i);
          const result = new RaycastResult(body.entity, new Vec3(point.x(), point.y(), point.z()), new Vec3(normal.x(), normal.y(), normal.z()));
          results.push(result);
        }
      }
    }

    Ammo.destroy(rayCallback);
    return results;
  }

  _storeCollision(entity, other) {
    let isNewCollision = false;
    const guid = entity.getGuid();
    this.collisions[guid] = this.collisions[guid] || {
      others: [],
      entity: entity
    };

    if (this.collisions[guid].others.indexOf(other) < 0) {
      this.collisions[guid].others.push(other);
      isNewCollision = true;
    }

    this.frameCollisions[guid] = this.frameCollisions[guid] || {
      others: [],
      entity: entity
    };
    this.frameCollisions[guid].others.push(other);
    return isNewCollision;
  }

  _createContactPointFromAmmo(contactPoint) {
    const localPointA = contactPoint.get_m_localPointA();
    const localPointB = contactPoint.get_m_localPointB();
    const positionWorldOnA = contactPoint.getPositionWorldOnA();
    const positionWorldOnB = contactPoint.getPositionWorldOnB();
    const normalWorldOnB = contactPoint.get_m_normalWorldOnB();
    const contact = this.contactPointPool.allocate();
    contact.localPoint.set(localPointA.x(), localPointA.y(), localPointA.z());
    contact.localPointOther.set(localPointB.x(), localPointB.y(), localPointB.z());
    contact.point.set(positionWorldOnA.x(), positionWorldOnA.y(), positionWorldOnA.z());
    contact.pointOther.set(positionWorldOnB.x(), positionWorldOnB.y(), positionWorldOnB.z());
    contact.normal.set(normalWorldOnB.x(), normalWorldOnB.y(), normalWorldOnB.z());
    contact.impulse = contactPoint.getAppliedImpulse();
    return contact;
  }

  _createReverseContactPointFromAmmo(contactPoint) {
    const localPointA = contactPoint.get_m_localPointA();
    const localPointB = contactPoint.get_m_localPointB();
    const positionWorldOnA = contactPoint.getPositionWorldOnA();
    const positionWorldOnB = contactPoint.getPositionWorldOnB();
    const normalWorldOnB = contactPoint.get_m_normalWorldOnB();
    const contact = this.contactPointPool.allocate();
    contact.localPointOther.set(localPointA.x(), localPointA.y(), localPointA.z());
    contact.localPoint.set(localPointB.x(), localPointB.y(), localPointB.z());
    contact.pointOther.set(positionWorldOnA.x(), positionWorldOnA.y(), positionWorldOnA.z());
    contact.point.set(positionWorldOnB.x(), positionWorldOnB.y(), positionWorldOnB.z());
    contact.normal.set(normalWorldOnB.x(), normalWorldOnB.y(), normalWorldOnB.z());
    contact.impulse = contactPoint.getAppliedImpulse();
    return contact;
  }

  _createSingleContactResult(a, b, contactPoint) {
    const result = this.singleContactResultPool.allocate();
    result.a = a;
    result.b = b;
    result.localPointA = contactPoint.localPoint;
    result.localPointB = contactPoint.localPointOther;
    result.pointA = contactPoint.point;
    result.pointB = contactPoint.pointOther;
    result.normal = contactPoint.normal;
    result.impulse = contactPoint.impulse;
    return result;
  }

  _createContactResult(other, contacts) {
    const result = this.contactResultPool.allocate();
    result.other = other;
    result.contacts = contacts;
    return result;
  }

  _cleanOldCollisions() {
    for (const guid in this.collisions) {
      if (this.collisions.hasOwnProperty(guid)) {
        const frameCollision = this.frameCollisions[guid];
        const collision = this.collisions[guid];
        const entity = collision.entity;
        const entityCollision = entity.collision;
        const entityRigidbody = entity.rigidbody;
        const others = collision.others;
        const length = others.length;
        let i = length;

        while (i--) {
          const other = others[i];

          if (!frameCollision || frameCollision.others.indexOf(other) < 0) {
            others.splice(i, 1);

            if (entity.trigger) {
              if (entityCollision) {
                entityCollision.fire('triggerleave', other);
              }

              if (other.rigidbody) {
                other.rigidbody.fire('triggerleave', entity);
              }
            } else if (!other.trigger) {
              if (entityRigidbody) {
                entityRigidbody.fire('collisionend', other);
              }

              if (entityCollision) {
                entityCollision.fire('collisionend', other);
              }
            }
          }
        }

        if (others.length === 0) {
          delete this.collisions[guid];
        }
      }
    }
  }

  _hasContactEvent(entity) {
    const c = entity.collision;

    if (c && (c.hasEvent('collisionstart') || c.hasEvent('collisionend') || c.hasEvent('contact'))) {
      return true;
    }

    const r = entity.rigidbody;
    return r && (r.hasEvent('collisionstart') || r.hasEvent('collisionend') || r.hasEvent('contact'));
  }

  _checkForCollisions(world, timeStep) {
    const dynamicsWorld = Ammo.wrapPointer(world, Ammo.btDynamicsWorld);
    const dispatcher = dynamicsWorld.getDispatcher();
    const numManifolds = dispatcher.getNumManifolds();
    this.frameCollisions = {};

    for (let i = 0; i < numManifolds; i++) {
      const manifold = dispatcher.getManifoldByIndexInternal(i);
      const body0 = manifold.getBody0();
      const body1 = manifold.getBody1();
      const wb0 = Ammo.castObject(body0, Ammo.btRigidBody);
      const wb1 = Ammo.castObject(body1, Ammo.btRigidBody);
      const e0 = wb0.entity;
      const e1 = wb1.entity;

      if (!e0 || !e1) {
        continue;
      }

      const flags0 = wb0.getCollisionFlags();
      const flags1 = wb1.getCollisionFlags();
      const numContacts = manifold.getNumContacts();
      const forwardContacts = [];
      const reverseContacts = [];
      let newCollision;

      if (numContacts > 0) {
        if (flags0 & BODYFLAG_NORESPONSE_OBJECT || flags1 & BODYFLAG_NORESPONSE_OBJECT) {
          const e0Events = e0.collision && (e0.collision.hasEvent('triggerenter') || e0.collision.hasEvent('triggerleave'));
          const e1Events = e1.collision && (e1.collision.hasEvent('triggerenter') || e1.collision.hasEvent('triggerleave'));
          const e0BodyEvents = e0.rigidbody && (e0.rigidbody.hasEvent('triggerenter') || e0.rigidbody.hasEvent('triggerleave'));
          const e1BodyEvents = e1.rigidbody && (e1.rigidbody.hasEvent('triggerenter') || e1.rigidbody.hasEvent('triggerleave'));

          if (e0Events) {
            newCollision = this._storeCollision(e0, e1);

            if (newCollision && !(flags1 & BODYFLAG_NORESPONSE_OBJECT)) {
              e0.collision.fire('triggerenter', e1);
            }
          }

          if (e1Events) {
            newCollision = this._storeCollision(e1, e0);

            if (newCollision && !(flags0 & BODYFLAG_NORESPONSE_OBJECT)) {
              e1.collision.fire('triggerenter', e0);
            }
          }

          if (e0BodyEvents) {
            if (!newCollision) {
              newCollision = this._storeCollision(e1, e0);
            }

            if (newCollision) {
              e0.rigidbody.fire('triggerenter', e1);
            }
          }

          if (e1BodyEvents) {
            if (!newCollision) {
              newCollision = this._storeCollision(e0, e1);
            }

            if (newCollision) {
              e1.rigidbody.fire('triggerenter', e0);
            }
          }
        } else {
          const e0Events = this._hasContactEvent(e0);

          const e1Events = this._hasContactEvent(e1);

          const globalEvents = this.hasEvent('contact');

          if (globalEvents || e0Events || e1Events) {
            for (let j = 0; j < numContacts; j++) {
              const btContactPoint = manifold.getContactPoint(j);

              const contactPoint = this._createContactPointFromAmmo(btContactPoint);

              if (e0Events || e1Events) {
                forwardContacts.push(contactPoint);

                const reverseContactPoint = this._createReverseContactPointFromAmmo(btContactPoint);

                reverseContacts.push(reverseContactPoint);
              }

              if (globalEvents) {
                const result = this._createSingleContactResult(e0, e1, contactPoint);

                this.fire('contact', result);
              }
            }

            if (e0Events) {
              const forwardResult = this._createContactResult(e1, forwardContacts);

              newCollision = this._storeCollision(e0, e1);

              if (e0.collision) {
                e0.collision.fire('contact', forwardResult);

                if (newCollision) {
                  e0.collision.fire('collisionstart', forwardResult);
                }
              }

              if (e0.rigidbody) {
                e0.rigidbody.fire('contact', forwardResult);

                if (newCollision) {
                  e0.rigidbody.fire('collisionstart', forwardResult);
                }
              }
            }

            if (e1Events) {
              const reverseResult = this._createContactResult(e0, reverseContacts);

              newCollision = this._storeCollision(e1, e0);

              if (e1.collision) {
                e1.collision.fire('contact', reverseResult);

                if (newCollision) {
                  e1.collision.fire('collisionstart', reverseResult);
                }
              }

              if (e1.rigidbody) {
                e1.rigidbody.fire('contact', reverseResult);

                if (newCollision) {
                  e1.rigidbody.fire('collisionstart', reverseResult);
                }
              }
            }
          }
        }
      }
    }

    this._cleanOldCollisions();

    this.contactPointPool.freeAll();
    this.contactResultPool.freeAll();
    this.singleContactResultPool.freeAll();
  }

  onUpdate(dt) {
    let i, len;
    const gravity = this.dynamicsWorld.getGravity();

    if (gravity.x() !== this.gravity.x || gravity.y() !== this.gravity.y || gravity.z() !== this.gravity.z) {
      gravity.setValue(this.gravity.x, this.gravity.y, this.gravity.z);
      this.dynamicsWorld.setGravity(gravity);
    }

    const triggers = this._triggers;

    for (i = 0, len = triggers.length; i < len; i++) {
      triggers[i].updateTransform();
    }

    const compounds = this._compounds;

    for (i = 0, len = compounds.length; i < len; i++) {
      compounds[i]._updateCompound();
    }

    const kinematic = this._kinematic;

    for (i = 0, len = kinematic.length; i < len; i++) {
      kinematic[i]._updateKinematic();
    }

    this.dynamicsWorld.stepSimulation(dt, this.maxSubSteps, this.fixedTimeStep);
    const dynamic = this._dynamic;

    for (i = 0, len = dynamic.length; i < len; i++) {
      dynamic[i]._updateDynamic();
    }

    if (!this.dynamicsWorld.setInternalTickCallback) this._checkForCollisions(Ammo.getPointer(this.dynamicsWorld), dt);
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);

    if (typeof Ammo !== 'undefined') {
      Ammo.destroy(this.dynamicsWorld);
      Ammo.destroy(this.solver);
      Ammo.destroy(this.overlappingPairCache);
      Ammo.destroy(this.dispatcher);
      Ammo.destroy(this.collisionConfiguration);
      this.dynamicsWorld = null;
      this.solver = null;
      this.overlappingPairCache = null;
      this.dispatcher = null;
      this.collisionConfiguration = null;
    }
  }

}

Component._buildAccessors(RigidBodyComponent.prototype, _schema$8);

const SCALEMODE_NONE = 'none';
const SCALEMODE_BLEND = 'blend';

const _transform = new Mat4();

class ScreenComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._resolution = new Vec2(640, 320);
    this._referenceResolution = new Vec2(640, 320);
    this._scaleMode = SCALEMODE_NONE;
    this.scale = 1;
    this._scaleBlend = 0.5;
    this._priority = 0;
    this._screenSpace = false;
    this.cull = this._screenSpace;
    this._screenMatrix = new Mat4();
    this._elements = new Set();
    system.app.graphicsDevice.on('resizecanvas', this._onResize, this);
  }

  syncDrawOrder() {
    this.system.queueDrawOrderSync(this.entity.getGuid(), this._processDrawOrderSync, this);
  }

  _recurseDrawOrderSync(e, i) {
    if (!(e instanceof Entity)) {
      return i;
    }

    if (e.element) {
      const prevDrawOrder = e.element.drawOrder;
      e.element.drawOrder = i++;

      if (e.element._batchGroupId >= 0 && prevDrawOrder !== e.element.drawOrder) {
        var _this$system$app$batc;

        (_this$system$app$batc = this.system.app.batcher) == null ? void 0 : _this$system$app$batc.markGroupDirty(e.element._batchGroupId);
      }
    }

    if (e.particlesystem) {
      e.particlesystem.drawOrder = i++;
    }

    const children = e.children;

    for (let j = 0; j < children.length; j++) {
      i = this._recurseDrawOrderSync(children[j], i);
    }

    return i;
  }

  _processDrawOrderSync() {
    const i = 1;

    this._recurseDrawOrderSync(this.entity, i);

    this.fire('syncdraworder');
  }

  _calcProjectionMatrix() {
    const w = this._resolution.x / this.scale;
    const h = this._resolution.y / this.scale;
    const left = 0;
    const right = w;
    const bottom = -h;
    const top = 0;
    const near = 1;
    const far = -1;

    this._screenMatrix.setOrtho(left, right, bottom, top, near, far);

    if (!this._screenSpace) {
      _transform.setScale(0.5 * w, 0.5 * h, 1);

      this._screenMatrix.mul2(_transform, this._screenMatrix);
    }
  }

  _updateScale() {
    this.scale = this._calcScale(this._resolution, this.referenceResolution);
  }

  _calcScale(resolution, referenceResolution) {
    const lx = Math.log2(resolution.x / referenceResolution.x);
    const ly = Math.log2(resolution.y / referenceResolution.y);
    return Math.pow(2, lx * (1 - this._scaleBlend) + ly * this._scaleBlend);
  }

  _onResize(width, height) {
    if (this._screenSpace) {
      this._resolution.set(width, height);

      this.resolution = this._resolution;
    }
  }

  _bindElement(element) {
    this._elements.add(element);
  }

  _unbindElement(element) {
    this._elements.delete(element);
  }

  onRemove() {
    this.system.app.graphicsDevice.off('resizecanvas', this._onResize, this);
    this.fire('remove');

    this._elements.forEach(element => element._onScreenRemove());

    this._elements.clear();

    this.off();
  }

  set resolution(value) {
    if (!this._screenSpace) {
      this._resolution.set(value.x, value.y);
    } else {
      this._resolution.set(this.system.app.graphicsDevice.width, this.system.app.graphicsDevice.height);
    }

    this._updateScale();

    this._calcProjectionMatrix();

    if (!this.entity._dirtyLocal) this.entity._dirtifyLocal();
    this.fire('set:resolution', this._resolution);

    this._elements.forEach(element => element._onScreenResize(this._resolution));
  }

  get resolution() {
    return this._resolution;
  }

  set referenceResolution(value) {
    this._referenceResolution.set(value.x, value.y);

    this._updateScale();

    this._calcProjectionMatrix();

    if (!this.entity._dirtyLocal) this.entity._dirtifyLocal();
    this.fire('set:referenceresolution', this._resolution);

    this._elements.forEach(element => element._onScreenResize(this._resolution));
  }

  get referenceResolution() {
    if (this._scaleMode === SCALEMODE_NONE) {
      return this._resolution;
    }

    return this._referenceResolution;
  }

  set screenSpace(value) {
    this._screenSpace = value;

    if (this._screenSpace) {
      this._resolution.set(this.system.app.graphicsDevice.width, this.system.app.graphicsDevice.height);
    }

    this.resolution = this._resolution;
    if (!this.entity._dirtyLocal) this.entity._dirtifyLocal();
    this.fire('set:screenspace', this._screenSpace);

    this._elements.forEach(element => element._onScreenSpaceChange());
  }

  get screenSpace() {
    return this._screenSpace;
  }

  set scaleMode(value) {
    if (value !== SCALEMODE_NONE && value !== SCALEMODE_BLEND) {
      value = SCALEMODE_NONE;
    }

    if (!this._screenSpace && value !== SCALEMODE_NONE) {
      value = SCALEMODE_NONE;
    }

    this._scaleMode = value;
    this.resolution = this._resolution;
    this.fire('set:scalemode', this._scaleMode);
  }

  get scaleMode() {
    return this._scaleMode;
  }

  set scaleBlend(value) {
    this._scaleBlend = value;

    this._updateScale();

    this._calcProjectionMatrix();

    if (!this.entity._dirtyLocal) this.entity._dirtifyLocal();
    this.fire('set:scaleblend', this._scaleBlend);

    this._elements.forEach(element => element._onScreenResize(this._resolution));
  }

  get scaleBlend() {
    return this._scaleBlend;
  }

  set priority(value) {
    if (value > 0xFF) {
      value = 0xFF;
    }

    if (this._priority === value) {
      return;
    }

    this._priority = value;
    this.syncDrawOrder();
  }

  get priority() {
    return this._priority;
  }

}

class ScreenComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$7 = ['enabled'];

class ScreenComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'screen';
    this.ComponentType = ScreenComponent;
    this.DataType = ScreenComponentData;
    this.schema = _schema$7;
    this.windowResolution = new Vec2();
    this._drawOrderSyncQueue = new IndexedList();
    this.app.graphicsDevice.on('resizecanvas', this._onResize, this);
    this.app.systems.on('update', this._onUpdate, this);
    this.on('beforeremove', this.onRemoveComponent, this);
  }

  initializeComponentData(component, data, properties) {
    if (data.priority !== undefined) component.priority = data.priority;
    if (data.screenSpace !== undefined) component.screenSpace = data.screenSpace;
    component.cull = component.screenSpace;
    if (data.scaleMode !== undefined) component.scaleMode = data.scaleMode;
    if (data.scaleBlend !== undefined) component.scaleBlend = data.scaleBlend;

    if (data.resolution !== undefined) {
      if (data.resolution instanceof Vec2) {
        component._resolution.copy(data.resolution);
      } else {
        component._resolution.set(data.resolution[0], data.resolution[1]);
      }

      component.resolution = component._resolution;
    }

    if (data.referenceResolution !== undefined) {
      if (data.referenceResolution instanceof Vec2) {
        component._referenceResolution.copy(data.referenceResolution);
      } else {
        component._referenceResolution.set(data.referenceResolution[0], data.referenceResolution[1]);
      }

      component.referenceResolution = component._referenceResolution;
    }

    component.syncDrawOrder();
    super.initializeComponentData(component, data, properties);
  }

  destroy() {
    super.destroy();
    this.app.graphicsDevice.off('resizecanvas', this._onResize, this);
    this.app.systems.off('update', this._onUpdate, this);
  }

  _onUpdate(dt) {
    const components = this.store;

    for (const id in components) {
      if (components[id].entity.screen.update) components[id].entity.screen.update(dt);
    }
  }

  _onResize(width, height) {
    this.windowResolution.x = width;
    this.windowResolution.y = height;
  }

  cloneComponent(entity, clone) {
    const screen = entity.screen;
    return this.addComponent(clone, {
      enabled: screen.enabled,
      screenSpace: screen.screenSpace,
      scaleMode: screen.scaleMode,
      resolution: screen.resolution.clone(),
      referenceResolution: screen.referenceResolution.clone()
    });
  }

  onRemoveComponent(entity, component) {
    component.onRemove();
  }

  processDrawOrderSyncQueue() {
    const list = this._drawOrderSyncQueue.list();

    for (let i = 0; i < list.length; i++) {
      const item = list[i];
      item.callback.call(item.scope);
    }

    this._drawOrderSyncQueue.clear();
  }

  queueDrawOrderSync(id, fn, scope) {
    if (!this._drawOrderSyncQueue.list().length) {
      this.app.once('prerender', this.processDrawOrderSyncQueue, this);
    }

    if (!this._drawOrderSyncQueue.has(id)) {
      this._drawOrderSyncQueue.push(id, {
        callback: fn,
        scope: scope
      });
    }
  }

}

Component._buildAccessors(ScreenComponent.prototype, _schema$7);

class ScriptLegacyComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this.on('set_scripts', this.onSetScripts, this);
  }

  send(name, functionName) {
    const args = Array.prototype.slice.call(arguments, 2);
    const instances = this.entity.script.instances;
    let fn;

    if (instances && instances[name]) {
      fn = instances[name].instance[functionName];

      if (fn) {
        return fn.apply(instances[name].instance, args);
      }
    }

    return undefined;
  }

  onEnable() {
    if (this.data.areScriptsLoaded && !this.system.preloading) {
      if (!this.data.initialized) {
        this.system._initializeScriptComponent(this);
      } else {
        this.system._enableScriptComponent(this);
      }

      if (!this.data.postInitialized) {
        this.system._postInitializeScriptComponent(this);
      }
    }
  }

  onDisable() {
    this.system._disableScriptComponent(this);
  }

  onSetScripts(name, oldValue, newValue) {
    if (!this.system._inTools || this.runInTools) {
      if (this._updateScriptAttributes(oldValue, newValue)) {
        return;
      }

      if (this.enabled) {
        this.system._disableScriptComponent(this);
      }

      this.system._destroyScriptComponent(this);

      this.data.areScriptsLoaded = false;
      const scripts = newValue;
      const urls = scripts.map(function (s) {
        return s.url;
      });

      if (this._loadFromCache(urls)) {
        return;
      }

      this._loadScripts(urls);
    }
  }

  _updateScriptAttributes(oldValue, newValue) {
    let onlyUpdateAttributes = true;

    if (oldValue.length !== newValue.length) {
      onlyUpdateAttributes = false;
    } else {
      for (let i = 0, len = newValue.length; i < len; i++) {
        if (oldValue[i].url !== newValue[i].url) {
          onlyUpdateAttributes = false;
          break;
        }
      }
    }

    if (onlyUpdateAttributes) {
      for (const key in this.instances) {
        if (this.instances.hasOwnProperty(key)) {
          this.system._updateAccessors(this.entity, this.instances[key]);
        }
      }
    }

    return onlyUpdateAttributes;
  }

  _loadFromCache(urls) {
    const cached = [];
    const prefix = this.system.app._scriptPrefix || '';
    const regex = /^http(s)?:\/\//i;

    for (let i = 0, len = urls.length; i < len; i++) {
      let url = urls[i];

      if (!regex.test(url)) {
        url = path.join(prefix, url);
      }

      const type = this.system.app.loader.getFromCache(url, 'script');

      if (!type) {
        return false;
      }

      cached.push(type);
    }

    for (let i = 0, len = cached.length; i < len; i++) {
      const ScriptType = cached[i];

      if (ScriptType === true) {
        continue;
      }

      if (ScriptType && this.entity.script) {
        if (!this.entity.script.instances[ScriptType._pcScriptName]) {
          const instance = new ScriptType(this.entity);

          this.system._preRegisterInstance(this.entity, urls[i], ScriptType._pcScriptName, instance);
        }
      }
    }

    if (this.data) {
      this.data.areScriptsLoaded = true;
    }

    if (!this.system.preloading) {
      this.system.onInitialize(this.entity);
      this.system.onPostInitialize(this.entity);
    }

    return true;
  }

  _loadScripts(urls) {
    let count = urls.length;
    const prefix = this.system.app._scriptPrefix || '';
    urls.forEach(url => {
      let _url = null;
      let _unprefixed = null;

      if (url.toLowerCase().startsWith('http://') || url.toLowerCase().startsWith('https://')) {
        _unprefixed = url;
        _url = url;
      } else {
        _unprefixed = url;
        _url = path.join(prefix, url);
      }

      this.system.app.loader.load(_url, 'script', (err, ScriptType) => {
        count--;

        if (!err) {
          if (ScriptType && this.entity.script) {
            if (!this.entity.script.instances[ScriptType._pcScriptName]) {
              const instance = new ScriptType(this.entity);

              this.system._preRegisterInstance(this.entity, _unprefixed, ScriptType._pcScriptName, instance);
            }
          }
        } else {
          console.error(err);
        }

        if (count === 0) {
          this.data.areScriptsLoaded = true;

          if (!this.system.preloading) {
            this.system.onInitialize(this.entity);
            this.system.onPostInitialize(this.entity);
          }
        }
      });
    });
  }

}

class ScriptLegacyComponentData {
  constructor() {
    this.scripts = [];
    this.enabled = true;
    this.instances = {};
    this._instances = {};
    this.runInTools = false;
    this.attributes = {};
    this.initialized = false;
    this.postInitialized = false;
    this.areScriptsLoaded = false;
  }

}

const _schema$6 = ['enabled', 'scripts', 'instances', 'runInTools'];
const INITIALIZE = 'initialize';
const POST_INITIALIZE = 'postInitialize';
const UPDATE = 'update';
const POST_UPDATE = 'postUpdate';
const FIXED_UPDATE = 'fixedUpdate';
const TOOLS_UPDATE = 'toolsUpdate';
const ON_ENABLE = 'onEnable';
const ON_DISABLE = 'onDisable';

class ScriptLegacyComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'script';
    this.ComponentType = ScriptLegacyComponent;
    this.DataType = ScriptLegacyComponentData;
    this.schema = _schema$6;
    this.preloading = false;
    this.instancesWithUpdate = [];
    this.instancesWithFixedUpdate = [];
    this.instancesWithPostUpdate = [];
    this.instancesWithToolsUpdate = [];
    this.on('beforeremove', this.onBeforeRemove, this);
    this.app.systems.on(INITIALIZE, this.onInitialize, this);
    this.app.systems.on(POST_INITIALIZE, this.onPostInitialize, this);
    this.app.systems.on(UPDATE, this.onUpdate, this);
    this.app.systems.on(FIXED_UPDATE, this.onFixedUpdate, this);
    this.app.systems.on(POST_UPDATE, this.onPostUpdate, this);
    this.app.systems.on(TOOLS_UPDATE, this.onToolsUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    properties = ['runInTools', 'enabled', 'scripts'];

    if (data.scripts && data.scripts.length) {
      data.scripts.forEach(function (script) {
        if (script.attributes && Array.isArray(script.attributes)) {
          const dict = {};

          for (let i = 0; i < script.attributes.length; i++) {
            dict[script.attributes[i].name] = script.attributes[i];
          }

          script.attributes = dict;
        }
      });
    }

    super.initializeComponentData(component, data, properties);
  }

  cloneComponent(entity, clone) {
    const src = this.store[entity.getGuid()];
    const data = {
      runInTools: src.data.runInTools,
      scripts: [],
      enabled: src.data.enabled
    };
    const scripts = src.data.scripts;

    for (let i = 0, len = scripts.length; i < len; i++) {
      const attributes = scripts[i].attributes;

      if (attributes) {
        delete scripts[i].attributes;
      }

      data.scripts.push(extend$1({}, scripts[i]));

      if (attributes) {
        data.scripts[i].attributes = this._cloneAttributes(attributes);
        scripts[i].attributes = attributes;
      }
    }

    return this.addComponent(clone, data);
  }

  onBeforeRemove(entity, component) {
    if (component.enabled) {
      this._disableScriptComponent(component);
    }

    this._destroyScriptComponent(component);
  }

  onInitialize(root) {
    this._registerInstances(root);

    if (root.enabled) {
      if (root.script && root.script.enabled) {
        this._initializeScriptComponent(root.script);
      }

      const children = root._children;

      for (let i = 0, len = children.length; i < len; i++) {
        if (children[i] instanceof Entity) {
          this.onInitialize(children[i]);
        }
      }
    }
  }

  onPostInitialize(root) {
    if (root.enabled) {
      if (root.script && root.script.enabled) {
        this._postInitializeScriptComponent(root.script);
      }

      const children = root._children;

      for (let i = 0, len = children.length; i < len; i++) {
        if (children[i] instanceof Entity) {
          this.onPostInitialize(children[i]);
        }
      }
    }
  }

  _callInstancesMethod(script, method) {
    const instances = script.data.instances;

    for (const name in instances) {
      if (instances.hasOwnProperty(name)) {
        const instance = instances[name].instance;

        if (instance[method]) {
          instance[method]();
        }
      }
    }
  }

  _initializeScriptComponent(script) {
    this._callInstancesMethod(script, INITIALIZE);

    script.data.initialized = true;

    if (script.enabled && script.entity.enabled) {
      this._enableScriptComponent(script);
    }
  }

  _enableScriptComponent(script) {
    this._callInstancesMethod(script, ON_ENABLE);
  }

  _disableScriptComponent(script) {
    this._callInstancesMethod(script, ON_DISABLE);
  }

  _destroyScriptComponent(script) {
    const instances = script.data.instances;

    for (const name in instances) {
      if (instances.hasOwnProperty(name)) {
        const instance = instances[name].instance;

        if (instance.destroy) {
          instance.destroy();
        }

        if (instance.update) {
          const index = this.instancesWithUpdate.indexOf(instance);

          if (index >= 0) {
            this.instancesWithUpdate.splice(index, 1);
          }
        }

        if (instance.fixedUpdate) {
          const index = this.instancesWithFixedUpdate.indexOf(instance);

          if (index >= 0) {
            this.instancesWithFixedUpdate.splice(index, 1);
          }
        }

        if (instance.postUpdate) {
          const index = this.instancesWithPostUpdate.indexOf(instance);

          if (index >= 0) {
            this.instancesWithPostUpdate.splice(index, 1);
          }
        }

        if (instance.toolsUpdate) {
          const index = this.instancesWithToolsUpdate.indexOf(instance);

          if (index >= 0) {
            this.instancesWithToolsUpdate.splice(index, 1);
          }
        }

        if (script.instances[name].instance === script[name]) {
          delete script[name];
        }

        delete script.instances[name];
      }
    }
  }

  _postInitializeScriptComponent(script) {
    this._callInstancesMethod(script, POST_INITIALIZE);

    script.data.postInitialized = true;
  }

  _updateInstances(method, updateList, dt) {
    for (let i = 0, len = updateList.length; i < len; i++) {
      const item = updateList[i];

      if (item && item.entity && item.entity.enabled && item.entity.script.enabled) {
        item[method](dt);
      }
    }
  }

  onUpdate(dt) {
    this._updateInstances(UPDATE, this.instancesWithUpdate, dt);
  }

  onFixedUpdate(dt) {
    this._updateInstances(FIXED_UPDATE, this.instancesWithFixedUpdate, dt);
  }

  onPostUpdate(dt) {
    this._updateInstances(POST_UPDATE, this.instancesWithPostUpdate, dt);
  }

  onToolsUpdate(dt) {
    this._updateInstances(TOOLS_UPDATE, this.instancesWithToolsUpdate, dt);
  }

  broadcast(name, functionName) {
    const args = Array.prototype.slice.call(arguments, 2);
    const dataStore = this.store;

    for (const id in dataStore) {
      if (dataStore.hasOwnProperty(id)) {
        const data = dataStore[id].data;

        if (data.instances[name]) {
          const fn = data.instances[name].instance[functionName];

          if (fn) {
            fn.apply(data.instances[name].instance, args);
          }
        }
      }
    }
  }

  _preRegisterInstance(entity, url, name, instance) {
    if (entity.script) {
      entity.script.data._instances = entity.script.data._instances || {};

      if (entity.script.data._instances[name]) {
        throw Error(`Script name collision '${name}'. Scripts from '${url}' and '${entity.script.data._instances[name].url}' {${entity.getGuid()}}`);
      }

      entity.script.data._instances[name] = {
        url: url,
        name: name,
        instance: instance
      };
    }
  }

  _registerInstances(entity) {
    if (entity.script) {
      if (entity.script.data._instances) {
        entity.script.instances = entity.script.data._instances;

        for (const instanceName in entity.script.instances) {
          const preRegistered = entity.script.instances[instanceName];
          const instance = preRegistered.instance;
          events.attach(instance);

          if (instance.update) {
            this.instancesWithUpdate.push(instance);
          }

          if (instance.fixedUpdate) {
            this.instancesWithFixedUpdate.push(instance);
          }

          if (instance.postUpdate) {
            this.instancesWithPostUpdate.push(instance);
          }

          if (instance.toolsUpdate) {
            this.instancesWithToolsUpdate.push(instance);
          }

          if (entity.script.scripts) {
            this._createAccessors(entity, preRegistered);
          }

          if (entity.script[instanceName]) {
            throw Error(`Script with name '${instanceName}' is already attached to Script Component`);
          } else {
            entity.script[instanceName] = instance;
          }
        }

        delete entity.script.data._instances;
      }
    }

    const children = entity._children;

    for (let i = 0, len = children.length; i < len; i++) {
      if (children[i] instanceof Entity) {
        this._registerInstances(children[i]);
      }
    }
  }

  _cloneAttributes(attributes) {
    const result = {};

    for (const key in attributes) {
      if (!attributes.hasOwnProperty(key)) continue;

      if (attributes[key].type !== 'entity') {
        result[key] = extend$1({}, attributes[key]);
      } else {
        const val = attributes[key].value;
        delete attributes[key].value;
        result[key] = extend$1({}, attributes[key]);
        result[key].value = val;
        attributes[key].value = val;
      }
    }

    return result;
  }

  _createAccessors(entity, instance) {
    const len = entity.script.scripts.length;
    const url = instance.url;

    for (let i = 0; i < len; i++) {
      const script = entity.script.scripts[i];

      if (script.url === url) {
        const attributes = script.attributes;

        if (script.name && attributes) {
          for (const key in attributes) {
            if (attributes.hasOwnProperty(key)) {
              this._createAccessor(attributes[key], instance);
            }
          }

          entity.script.data.attributes[script.name] = this._cloneAttributes(attributes);
        }

        break;
      }
    }
  }

  _createAccessor(attribute, instance) {
    const self = this;
    attribute = {
      name: attribute.name,
      value: attribute.value,
      type: attribute.type
    };

    this._convertAttributeValue(attribute);

    Object.defineProperty(instance.instance, attribute.name, {
      get: function () {
        return attribute.value;
      },
      set: function (value) {
        const oldValue = attribute.value;
        attribute.value = value;

        self._convertAttributeValue(attribute);

        instance.instance.fire('set', attribute.name, oldValue, attribute.value);
      },
      configurable: true
    });
  }

  _updateAccessors(entity, instance) {
    const len = entity.script.scripts.length;
    const url = instance.url;

    for (let i = 0; i < len; i++) {
      const scriptComponent = entity.script;
      const script = scriptComponent.scripts[i];

      if (script.url === url) {
        const name = script.name;
        const attributes = script.attributes;

        if (name) {
          if (attributes) {
            for (const key in attributes) {
              if (attributes.hasOwnProperty(key)) {
                this._createAccessor(attributes[key], instance);
              }
            }
          }

          const previousAttributes = scriptComponent.data.attributes[name];

          if (previousAttributes) {
            for (const key in previousAttributes) {
              const oldAttribute = previousAttributes[key];

              if (!(key in attributes)) {
                delete instance.instance[oldAttribute.name];
              } else {
                if (attributes[key].value !== oldAttribute.value) {
                  if (instance.instance.onAttributeChanged) {
                    instance.instance.onAttributeChanged(oldAttribute.name, oldAttribute.value, attributes[key].value);
                  }
                }
              }
            }
          }

          if (attributes) {
            scriptComponent.data.attributes[name] = this._cloneAttributes(attributes);
          } else {
            delete scriptComponent.data.attributes[name];
          }
        }

        break;
      }
    }
  }

  _convertAttributeValue(attribute) {
    if (attribute.type === 'rgb' || attribute.type === 'rgba') {
      if (Array.isArray(attribute.value)) {
        attribute.value = attribute.value.length === 3 ? new Color(attribute.value[0], attribute.value[1], attribute.value[2]) : new Color(attribute.value[0], attribute.value[1], attribute.value[2], attribute.value[3]);
      }
    } else if (attribute.type === 'vec2') {
      if (Array.isArray(attribute.value)) attribute.value = new Vec2(attribute.value[0], attribute.value[1]);
    } else if (attribute.type === 'vec3' || attribute.type === 'vector') {
      if (Array.isArray(attribute.value)) attribute.value = new Vec3(attribute.value[0], attribute.value[1], attribute.value[2]);
    } else if (attribute.type === 'vec4') {
      if (Array.isArray(attribute.value)) attribute.value = new Vec4(attribute.value[0], attribute.value[1], attribute.value[2], attribute.value[3]);
    } else if (attribute.type === 'entity') {
      if (attribute.value !== null && typeof attribute.value === 'string') attribute.value = this.app.root.findByGuid(attribute.value);
    } else if (attribute.type === 'curve' || attribute.type === 'colorcurve') {
      const curveType = attribute.value.keys[0] instanceof Array ? CurveSet$1 : Curve$1;
      attribute.value = new curveType(attribute.value.keys);
      attribute.value.type = attribute.value.type;
    }
  }

  destroy() {
    super.destroy();
    this.app.systems.off(INITIALIZE, this.onInitialize, this);
    this.app.systems.off(POST_INITIALIZE, this.onPostInitialize, this);
    this.app.systems.off(UPDATE, this.onUpdate, this);
    this.app.systems.off(FIXED_UPDATE, this.onFixedUpdate, this);
    this.app.systems.off(POST_UPDATE, this.onPostUpdate, this);
    this.app.systems.off(TOOLS_UPDATE, this.onToolsUpdate, this);
  }

}

Component._buildAccessors(ScriptLegacyComponent.prototype, _schema$6);

const _inputScreenPosition = new Vec2();

const _inputWorldPosition = new Vec3();

const _ray = new Ray();

const _plane = new Plane();

const _entityRotation = new Quat();

const OPPOSITE_AXIS = {
  x: 'y',
  y: 'x'
};

class ElementDragHelper extends EventHandler {
  constructor(element, axis) {
    super();

    if (!element || !(element instanceof ElementComponent$2)) {
      throw new Error('Element was null or not an ElementComponent');
    }

    if (axis && axis !== 'x' && axis !== 'y') {
      throw new Error('Unrecognized axis: ' + axis);
    }

    this._element = element;
    this._app = element.system.app;
    this._axis = axis || null;
    this._enabled = true;
    this._dragScale = new Vec3();
    this._dragStartMousePosition = new Vec3();
    this._dragStartHandlePosition = new Vec3();
    this._deltaMousePosition = new Vec3();
    this._deltaHandlePosition = new Vec3();
    this._isDragging = false;

    this._toggleLifecycleListeners('on');
  }

  _toggleLifecycleListeners(onOrOff) {
    this._element[onOrOff]('mousedown', this._onMouseDownOrTouchStart, this);

    this._element[onOrOff]('touchstart', this._onMouseDownOrTouchStart, this);
  }

  _toggleDragListeners(onOrOff) {
    const isOn = onOrOff === 'on';

    if (this._hasDragListeners && isOn) {
      return;
    }

    if (!this._handleMouseUpOrTouchEnd) {
      this._handleMouseUpOrTouchEnd = this._onMouseUpOrTouchEnd.bind(this);
    }

    if (this._app.mouse) {
      this._element[onOrOff]('mousemove', this._onMove, this);

      this._element[onOrOff]('mouseup', this._handleMouseUpOrTouchEnd, false);
    }

    if (platform.touch) {
      this._element[onOrOff]('touchmove', this._onMove, this);

      this._element[onOrOff]('touchend', this._handleMouseUpOrTouchEnd, this);

      this._element[onOrOff]('touchcancel', this._handleMouseUpOrTouchEnd, this);
    }

    this._hasDragListeners = isOn;
  }

  _onMouseDownOrTouchStart(event) {
    if (this._element && !this._isDragging && this.enabled) {
      this._dragCamera = event.camera;

      this._calculateDragScale();

      const currentMousePosition = this._screenToLocal(event);

      if (currentMousePosition) {
        this._toggleDragListeners('on');

        this._isDragging = true;

        this._dragStartMousePosition.copy(currentMousePosition);

        this._dragStartHandlePosition.copy(this._element.entity.getLocalPosition());

        this.fire('drag:start');
      }
    }
  }

  _onMouseUpOrTouchEnd() {
    if (this._isDragging) {
      this._isDragging = false;

      this._toggleDragListeners('off');

      this.fire('drag:end');
    }
  }

  _screenToLocal(event) {
    this._determineInputPosition(event);

    this._chooseRayOriginAndDirection();

    _plane.point.copy(this._element.entity.getLocalPosition());

    _plane.normal.copy(this._element.entity.forward).mulScalar(-1);

    const denominator = _plane.normal.dot(_ray.direction);

    if (Math.abs(denominator) > 0) {
      const rayOriginToPlaneOrigin = _plane.point.sub(_ray.origin);

      const collisionDistance = rayOriginToPlaneOrigin.dot(_plane.normal) / denominator;

      const position = _ray.origin.add(_ray.direction.mulScalar(collisionDistance));

      _entityRotation.copy(this._element.entity.getRotation()).invert().transformVector(position, position);

      position.mul(this._dragScale);
      return position;
    }

    return null;
  }

  _determineInputPosition(event) {
    const devicePixelRatio = this._app.graphicsDevice.maxPixelRatio;

    if (typeof event.x !== 'undefined' && typeof event.y !== 'undefined') {
      _inputScreenPosition.x = event.x * devicePixelRatio;
      _inputScreenPosition.y = event.y * devicePixelRatio;
    } else if (event.changedTouches) {
      _inputScreenPosition.x = event.changedTouches[0].x * devicePixelRatio;
      _inputScreenPosition.y = event.changedTouches[0].y * devicePixelRatio;
    } else {
      console.warn('Could not determine position from input event');
    }
  }

  _chooseRayOriginAndDirection() {
    if (this._element.screen && this._element.screen.screen.screenSpace) {
      _ray.origin.set(_inputScreenPosition.x, -_inputScreenPosition.y, 0);

      _ray.direction.copy(Vec3.FORWARD);
    } else {
      _inputWorldPosition.copy(this._dragCamera.screenToWorld(_inputScreenPosition.x, _inputScreenPosition.y, 1));

      _ray.origin.copy(this._dragCamera.entity.getPosition());

      _ray.direction.copy(_inputWorldPosition).sub(_ray.origin).normalize();
    }
  }

  _calculateDragScale() {
    let current = this._element.entity.parent;
    const screen = this._element.screen && this._element.screen.screen;
    const isWithin2DScreen = screen && screen.screenSpace;
    const screenScale = isWithin2DScreen ? screen.scale : 1;
    const dragScale = this._dragScale;
    dragScale.set(screenScale, screenScale, screenScale);

    while (current) {
      dragScale.mul(current.getLocalScale());
      current = current.parent;

      if (isWithin2DScreen && current.screen) {
        break;
      }
    }

    dragScale.x = 1 / dragScale.x;
    dragScale.y = 1 / dragScale.y;
    dragScale.z = 1 / dragScale.z;
  }

  _onMove(event) {
    const {
      _element: element,
      _deltaMousePosition: deltaMousePosition,
      _deltaHandlePosition: deltaHandlePosition,
      _axis: axis
    } = this;

    if (element && this._isDragging && this.enabled && element.enabled && element.entity.enabled) {
      const currentMousePosition = this._screenToLocal(event);

      if (currentMousePosition) {
        deltaMousePosition.sub2(currentMousePosition, this._dragStartMousePosition);
        deltaHandlePosition.add2(this._dragStartHandlePosition, deltaMousePosition);

        if (axis) {
          const currentPosition = element.entity.getLocalPosition();
          const constrainedAxis = OPPOSITE_AXIS[axis];
          deltaHandlePosition[constrainedAxis] = currentPosition[constrainedAxis];
        }

        element.entity.setLocalPosition(deltaHandlePosition);
        this.fire('drag:move', deltaHandlePosition);
      }
    }
  }

  destroy() {
    this._toggleLifecycleListeners('off');

    this._toggleDragListeners('off');
  }

  set enabled(value) {
    this._enabled = value;
  }

  get enabled() {
    return this._enabled;
  }

  get isDragging() {
    return this._isDragging;
  }

}

const SCROLL_MODE_CLAMP = 0;
const SCROLL_MODE_BOUNCE = 1;
const SCROLL_MODE_INFINITE = 2;
const SCROLLBAR_VISIBILITY_SHOW_ALWAYS = 0;
const SCROLLBAR_VISIBILITY_SHOW_WHEN_REQUIRED = 1;

const _tempScrollValue = new Vec2();

class ScrollViewComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._viewportReference = new EntityReference(this, 'viewportEntity', {
      'element#gain': this._onViewportElementGain,
      'element#resize': this._onSetContentOrViewportSize
    });
    this._contentReference = new EntityReference(this, 'contentEntity', {
      'element#gain': this._onContentElementGain,
      'element#lose': this._onContentElementLose,
      'element#resize': this._onSetContentOrViewportSize
    });
    this._scrollbarUpdateFlags = {};
    this._scrollbarReferences = {};
    this._scrollbarReferences[ORIENTATION_HORIZONTAL] = new EntityReference(this, 'horizontalScrollbarEntity', {
      'scrollbar#set:value': this._onSetHorizontalScrollbarValue,
      'scrollbar#gain': this._onHorizontalScrollbarGain
    });
    this._scrollbarReferences[ORIENTATION_VERTICAL] = new EntityReference(this, 'verticalScrollbarEntity', {
      'scrollbar#set:value': this._onSetVerticalScrollbarValue,
      'scrollbar#gain': this._onVerticalScrollbarGain
    });
    this._prevContentSizes = {};
    this._prevContentSizes[ORIENTATION_HORIZONTAL] = null;
    this._prevContentSizes[ORIENTATION_VERTICAL] = null;
    this._scroll = new Vec2();
    this._velocity = new Vec3();
    this._dragStartPosition = new Vec3();
    this._disabledContentInput = false;
    this._disabledContentInputEntities = [];

    this._toggleLifecycleListeners('on', system);

    this._toggleElementListeners('on');
  }

  _toggleLifecycleListeners(onOrOff, system) {
    this[onOrOff]('set_horizontal', this._onSetHorizontalScrollingEnabled, this);
    this[onOrOff]('set_vertical', this._onSetVerticalScrollingEnabled, this);
    system.app.systems.element[onOrOff]('add', this._onElementComponentAdd, this);
    system.app.systems.element[onOrOff]('beforeremove', this._onElementComponentRemove, this);
  }

  _toggleElementListeners(onOrOff) {
    if (this.entity.element) {
      if (onOrOff === 'on' && this._hasElementListeners) {
        return;
      }

      this.entity.element[onOrOff]('resize', this._onSetContentOrViewportSize, this);
      this.entity.element[onOrOff](EVENT_MOUSEWHEEL, this._onMouseWheel, this);
      this._hasElementListeners = onOrOff === 'on';
    }
  }

  _onElementComponentAdd(entity) {
    if (this.entity === entity) {
      this._toggleElementListeners('on');
    }
  }

  _onElementComponentRemove(entity) {
    if (this.entity === entity) {
      this._toggleElementListeners('off');
    }
  }

  _onViewportElementGain() {
    this._syncAll();
  }

  _onContentElementGain() {
    this._destroyDragHelper();

    this._contentDragHelper = new ElementDragHelper(this._contentReference.entity.element);

    this._contentDragHelper.on('drag:start', this._onContentDragStart, this);

    this._contentDragHelper.on('drag:end', this._onContentDragEnd, this);

    this._contentDragHelper.on('drag:move', this._onContentDragMove, this);

    this._prevContentSizes[ORIENTATION_HORIZONTAL] = null;
    this._prevContentSizes[ORIENTATION_VERTICAL] = null;

    this._syncAll();
  }

  _onContentElementLose() {
    this._destroyDragHelper();
  }

  _onContentDragStart() {
    if (this._contentReference.entity && this.enabled && this.entity.enabled) {
      this._dragStartPosition.copy(this._contentReference.entity.getLocalPosition());
    }
  }

  _onContentDragEnd() {
    this._prevContentDragPosition = null;

    this._enableContentInput();
  }

  _onContentDragMove(position) {
    if (this._contentReference.entity && this.enabled && this.entity.enabled) {
      this._wasDragged = true;

      this._setScrollFromContentPosition(position);

      this._setVelocityFromContentPositionDelta(position);

      if (!this._disabledContentInput) {
        const dx = position.x - this._dragStartPosition.x;
        const dy = position.y - this._dragStartPosition.y;

        if (Math.abs(dx) > this.dragThreshold || Math.abs(dy) > this.dragThreshold) {
          this._disableContentInput();
        }
      }
    }
  }

  _onSetContentOrViewportSize() {
    this._syncAll();
  }

  _onSetHorizontalScrollbarValue(scrollValueX) {
    if (!this._scrollbarUpdateFlags[ORIENTATION_HORIZONTAL] && this.enabled && this.entity.enabled) {
      this._onSetScroll(scrollValueX, null);
    }
  }

  _onSetVerticalScrollbarValue(scrollValueY) {
    if (!this._scrollbarUpdateFlags[ORIENTATION_VERTICAL] && this.enabled && this.entity.enabled) {
      this._onSetScroll(null, scrollValueY);
    }
  }

  _onSetHorizontalScrollingEnabled() {
    this._syncScrollbarEnabledState(ORIENTATION_HORIZONTAL);
  }

  _onSetVerticalScrollingEnabled() {
    this._syncScrollbarEnabledState(ORIENTATION_VERTICAL);
  }

  _onHorizontalScrollbarGain() {
    this._syncScrollbarEnabledState(ORIENTATION_HORIZONTAL);

    this._syncScrollbarPosition(ORIENTATION_HORIZONTAL);
  }

  _onVerticalScrollbarGain() {
    this._syncScrollbarEnabledState(ORIENTATION_VERTICAL);

    this._syncScrollbarPosition(ORIENTATION_VERTICAL);
  }

  _onSetScroll(x, y, resetVelocity) {
    if (resetVelocity !== false) {
      this._velocity.set(0, 0, 0);
    }

    const xChanged = this._updateAxis(x, 'x', ORIENTATION_HORIZONTAL);

    const yChanged = this._updateAxis(y, 'y', ORIENTATION_VERTICAL);

    if (xChanged || yChanged) {
      this.fire('set:scroll', this._scroll);
    }
  }

  _updateAxis(scrollValue, axis, orientation) {
    const hasChanged = scrollValue !== null && Math.abs(scrollValue - this._scroll[axis]) > 1e-5;

    if (hasChanged || this._isDragging() || scrollValue === 0) {
      this._scroll[axis] = this._determineNewScrollValue(scrollValue, axis, orientation);

      this._syncContentPosition(orientation);

      this._syncScrollbarPosition(orientation);
    }

    return hasChanged;
  }

  _determineNewScrollValue(scrollValue, axis, orientation) {
    if (!this._getScrollingEnabled(orientation)) {
      return this._scroll[axis];
    }

    switch (this.scrollMode) {
      case SCROLL_MODE_CLAMP:
        return math$1.clamp(scrollValue, 0, this._getMaxScrollValue(orientation));

      case SCROLL_MODE_BOUNCE:
        this._setVelocityFromOvershoot(scrollValue, axis, orientation);

        return scrollValue;

      case SCROLL_MODE_INFINITE:
        return scrollValue;

      default:
        console.warn('Unhandled scroll mode:' + this.scrollMode);
        return scrollValue;
    }
  }

  _syncAll() {
    this._syncContentPosition(ORIENTATION_HORIZONTAL);

    this._syncContentPosition(ORIENTATION_VERTICAL);

    this._syncScrollbarPosition(ORIENTATION_HORIZONTAL);

    this._syncScrollbarPosition(ORIENTATION_VERTICAL);

    this._syncScrollbarEnabledState(ORIENTATION_HORIZONTAL);

    this._syncScrollbarEnabledState(ORIENTATION_VERTICAL);
  }

  _syncContentPosition(orientation) {
    const axis = this._getAxis(orientation);

    const sign = this._getSign(orientation);

    const contentEntity = this._contentReference.entity;

    if (contentEntity) {
      const prevContentSize = this._prevContentSizes[orientation];

      const currContentSize = this._getContentSize(orientation);

      if (prevContentSize !== null && Math.abs(prevContentSize - currContentSize) > 1e-4) {
        const prevMaxOffset = this._getMaxOffset(orientation, prevContentSize);

        const currMaxOffset = this._getMaxOffset(orientation, currContentSize);

        if (currMaxOffset === 0) {
          this._scroll[axis] = 1;
        } else {
          this._scroll[axis] = math$1.clamp(this._scroll[axis] * prevMaxOffset / currMaxOffset, 0, 1);
        }
      }

      const offset = this._scroll[axis] * this._getMaxOffset(orientation);

      const contentPosition = contentEntity.getLocalPosition();
      contentPosition[axis] = offset * sign;
      contentEntity.setLocalPosition(contentPosition);
      this._prevContentSizes[orientation] = currContentSize;
    }
  }

  _syncScrollbarPosition(orientation) {
    const axis = this._getAxis(orientation);

    const scrollbarEntity = this._scrollbarReferences[orientation].entity;

    if (scrollbarEntity && scrollbarEntity.scrollbar) {
      this._scrollbarUpdateFlags[orientation] = true;
      scrollbarEntity.scrollbar.value = this._scroll[axis];
      scrollbarEntity.scrollbar.handleSize = this._getScrollbarHandleSize(axis, orientation);
      this._scrollbarUpdateFlags[orientation] = false;
    }
  }

  _syncScrollbarEnabledState(orientation) {
    const entity = this._scrollbarReferences[orientation].entity;

    if (entity) {
      const isScrollingEnabled = this._getScrollingEnabled(orientation);

      const requestedVisibility = this._getScrollbarVisibility(orientation);

      switch (requestedVisibility) {
        case SCROLLBAR_VISIBILITY_SHOW_ALWAYS:
          entity.enabled = isScrollingEnabled;
          return;

        case SCROLLBAR_VISIBILITY_SHOW_WHEN_REQUIRED:
          entity.enabled = isScrollingEnabled && this._contentIsLargerThanViewport(orientation);
          return;

        default:
          console.warn('Unhandled scrollbar visibility:' + requestedVisibility);
          entity.enabled = isScrollingEnabled;
      }
    }
  }

  _contentIsLargerThanViewport(orientation) {
    return this._getContentSize(orientation) > this._getViewportSize(orientation);
  }

  _contentPositionToScrollValue(contentPosition) {
    const maxOffsetH = this._getMaxOffset(ORIENTATION_HORIZONTAL);

    const maxOffsetV = this._getMaxOffset(ORIENTATION_VERTICAL);

    if (maxOffsetH === 0) {
      _tempScrollValue.x = 0;
    } else {
      _tempScrollValue.x = contentPosition.x / maxOffsetH;
    }

    if (maxOffsetV === 0) {
      _tempScrollValue.y = 0;
    } else {
      _tempScrollValue.y = contentPosition.y / -maxOffsetV;
    }

    return _tempScrollValue;
  }

  _getMaxOffset(orientation, contentSize) {
    contentSize = contentSize === undefined ? this._getContentSize(orientation) : contentSize;

    const viewportSize = this._getViewportSize(orientation);

    if (contentSize < viewportSize) {
      return -this._getViewportSize(orientation);
    }

    return viewportSize - contentSize;
  }

  _getMaxScrollValue(orientation) {
    return this._contentIsLargerThanViewport(orientation) ? 1 : 0;
  }

  _getScrollbarHandleSize(axis, orientation) {
    const viewportSize = this._getViewportSize(orientation);

    const contentSize = this._getContentSize(orientation);

    if (Math.abs(contentSize) < 0.001) {
      return 1;
    }

    const handleSize = Math.min(viewportSize / contentSize, 1);

    const overshoot = this._toOvershoot(this._scroll[axis], orientation);

    if (overshoot === 0) {
      return handleSize;
    }

    return handleSize / (1 + Math.abs(overshoot));
  }

  _getViewportSize(orientation) {
    return this._getSize(orientation, this._viewportReference);
  }

  _getContentSize(orientation) {
    return this._getSize(orientation, this._contentReference);
  }

  _getSize(orientation, entityReference) {
    if (entityReference.entity && entityReference.entity.element) {
      return entityReference.entity.element[this._getCalculatedDimension(orientation)];
    }

    return 0;
  }

  _getScrollingEnabled(orientation) {
    if (orientation === ORIENTATION_HORIZONTAL) {
      return this.horizontal;
    } else if (orientation === ORIENTATION_VERTICAL) {
      return this.vertical;
    }

    return undefined;
  }

  _getScrollbarVisibility(orientation) {
    if (orientation === ORIENTATION_HORIZONTAL) {
      return this.horizontalScrollbarVisibility;
    } else if (orientation === ORIENTATION_VERTICAL) {
      return this.verticalScrollbarVisibility;
    }

    return undefined;
  }

  _getSign(orientation) {
    return orientation === ORIENTATION_HORIZONTAL ? 1 : -1;
  }

  _getAxis(orientation) {
    return orientation === ORIENTATION_HORIZONTAL ? 'x' : 'y';
  }

  _getCalculatedDimension(orientation) {
    return orientation === ORIENTATION_HORIZONTAL ? 'calculatedWidth' : 'calculatedHeight';
  }

  _destroyDragHelper() {
    if (this._contentDragHelper) {
      this._contentDragHelper.destroy();
    }
  }

  onUpdate() {
    if (this._contentReference.entity) {
      this._updateVelocity();

      this._syncScrollbarEnabledState(ORIENTATION_HORIZONTAL);

      this._syncScrollbarEnabledState(ORIENTATION_VERTICAL);
    }
  }

  _updateVelocity() {
    if (!this._isDragging()) {
      if (this.scrollMode === SCROLL_MODE_BOUNCE) {
        if (this._hasOvershoot('x', ORIENTATION_HORIZONTAL)) {
          this._setVelocityFromOvershoot(this.scroll.x, 'x', ORIENTATION_HORIZONTAL);
        }

        if (this._hasOvershoot('y', ORIENTATION_VERTICAL)) {
          this._setVelocityFromOvershoot(this.scroll.y, 'y', ORIENTATION_VERTICAL);
        }
      }

      if (Math.abs(this._velocity.x) > 1e-4 || Math.abs(this._velocity.y) > 1e-4) {
        const position = this._contentReference.entity.getLocalPosition();

        position.x += this._velocity.x;
        position.y += this._velocity.y;

        this._contentReference.entity.setLocalPosition(position);

        this._setScrollFromContentPosition(position);
      }

      this._velocity.x *= 1 - this.friction;
      this._velocity.y *= 1 - this.friction;
    }
  }

  _hasOvershoot(axis, orientation) {
    return Math.abs(this._toOvershoot(this.scroll[axis], orientation)) > 0.001;
  }

  _toOvershoot(scrollValue, orientation) {
    const maxScrollValue = this._getMaxScrollValue(orientation);

    if (scrollValue < 0) {
      return scrollValue;
    } else if (scrollValue > maxScrollValue) {
      return scrollValue - maxScrollValue;
    }

    return 0;
  }

  _setVelocityFromOvershoot(scrollValue, axis, orientation) {
    const overshootValue = this._toOvershoot(scrollValue, orientation);

    const overshootPixels = overshootValue * this._getMaxOffset(orientation) * this._getSign(orientation);

    if (Math.abs(overshootPixels) > 0) {
      this._velocity[axis] = -overshootPixels / (this.bounceAmount * 50 + 1);
    }
  }

  _setVelocityFromContentPositionDelta(position) {
    if (this._prevContentDragPosition) {
      this._velocity.sub2(position, this._prevContentDragPosition);

      this._prevContentDragPosition.copy(position);
    } else {
      this._velocity.set(0, 0, 0);

      this._prevContentDragPosition = position.clone();
    }
  }

  _setScrollFromContentPosition(position) {
    let scrollValue = this._contentPositionToScrollValue(position);

    if (this._isDragging()) {
      scrollValue = this._applyScrollValueTension(scrollValue);
    }

    this._onSetScroll(scrollValue.x, scrollValue.y, false);
  }

  _applyScrollValueTension(scrollValue) {
    const factor = 1;

    let max = this._getMaxScrollValue(ORIENTATION_HORIZONTAL);

    let overshoot = this._toOvershoot(scrollValue.x, ORIENTATION_HORIZONTAL);

    if (overshoot > 0) {
      scrollValue.x = max + factor * Math.log10(1 + overshoot);
    } else if (overshoot < 0) {
      scrollValue.x = -factor * Math.log10(1 - overshoot);
    }

    max = this._getMaxScrollValue(ORIENTATION_VERTICAL);
    overshoot = this._toOvershoot(scrollValue.y, ORIENTATION_VERTICAL);

    if (overshoot > 0) {
      scrollValue.y = max + factor * Math.log10(1 + overshoot);
    } else if (overshoot < 0) {
      scrollValue.y = -factor * Math.log10(1 - overshoot);
    }

    return scrollValue;
  }

  _isDragging() {
    return this._contentDragHelper && this._contentDragHelper.isDragging;
  }

  _setScrollbarComponentsEnabled(enabled) {
    if (this._scrollbarReferences[ORIENTATION_HORIZONTAL].hasComponent('scrollbar')) {
      this._scrollbarReferences[ORIENTATION_HORIZONTAL].entity.scrollbar.enabled = enabled;
    }

    if (this._scrollbarReferences[ORIENTATION_VERTICAL].hasComponent('scrollbar')) {
      this._scrollbarReferences[ORIENTATION_VERTICAL].entity.scrollbar.enabled = enabled;
    }
  }

  _setContentDraggingEnabled(enabled) {
    if (this._contentDragHelper) {
      this._contentDragHelper.enabled = enabled;
    }
  }

  _onMouseWheel(event) {
    if (this.useMouseWheel) {
      const wheelEvent = event.event;
      const normalizedDeltaX = wheelEvent.deltaX / this._contentReference.entity.element.calculatedWidth * this.mouseWheelSensitivity.x;
      const normalizedDeltaY = wheelEvent.deltaY / this._contentReference.entity.element.calculatedHeight * this.mouseWheelSensitivity.y;
      const scrollX = math$1.clamp(this._scroll.x + normalizedDeltaX, 0, this._getMaxScrollValue(ORIENTATION_HORIZONTAL));
      const scrollY = math$1.clamp(this._scroll.y + normalizedDeltaY, 0, this._getMaxScrollValue(ORIENTATION_VERTICAL));
      this.scroll = new Vec2(scrollX, scrollY);
    }
  }

  _enableContentInput() {
    while (this._disabledContentInputEntities.length) {
      const e = this._disabledContentInputEntities.pop();

      if (e.element) {
        e.element.useInput = true;
      }
    }

    this._disabledContentInput = false;
  }

  _disableContentInput() {
    const _disableInput = e => {
      if (e.element && e.element.useInput) {
        this._disabledContentInputEntities.push(e);

        e.element.useInput = false;
      }

      const children = e.children;

      for (let i = 0, l = children.length; i < l; i++) {
        _disableInput(children[i]);
      }
    };

    const contentEntity = this._contentReference.entity;

    if (contentEntity) {
      const children = contentEntity.children;

      for (let i = 0, l = children.length; i < l; i++) {
        _disableInput(children[i]);
      }
    }

    this._disabledContentInput = true;
  }

  onEnable() {
    this._viewportReference.onParentComponentEnable();

    this._contentReference.onParentComponentEnable();

    this._scrollbarReferences[ORIENTATION_HORIZONTAL].onParentComponentEnable();

    this._scrollbarReferences[ORIENTATION_VERTICAL].onParentComponentEnable();

    this._setScrollbarComponentsEnabled(true);

    this._setContentDraggingEnabled(true);

    this._syncAll();
  }

  onDisable() {
    this._setScrollbarComponentsEnabled(false);

    this._setContentDraggingEnabled(false);
  }

  onRemove() {
    this._toggleLifecycleListeners('off', this.system);

    this._toggleElementListeners('off');

    this._destroyDragHelper();
  }

  set scroll(value) {
    this._onSetScroll(value.x, value.y);
  }

  get scroll() {
    return this._scroll;
  }

}

class ScrollViewComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$5 = [{
  name: 'enabled',
  type: 'boolean'
}, {
  name: 'horizontal',
  type: 'boolean'
}, {
  name: 'vertical',
  type: 'boolean'
}, {
  name: 'scrollMode',
  type: 'number'
}, {
  name: 'bounceAmount',
  type: 'number'
}, {
  name: 'friction',
  type: 'number'
}, {
  name: 'dragThreshold',
  type: 'number'
}, {
  name: 'useMouseWheel',
  type: 'boolean'
}, {
  name: 'mouseWheelSensitivity',
  type: 'vec2'
}, {
  name: 'horizontalScrollbarVisibility',
  type: 'number'
}, {
  name: 'verticalScrollbarVisibility',
  type: 'number'
}, {
  name: 'viewportEntity',
  type: 'entity'
}, {
  name: 'contentEntity',
  type: 'entity'
}, {
  name: 'horizontalScrollbarEntity',
  type: 'entity'
}, {
  name: 'verticalScrollbarEntity',
  type: 'entity'
}];
const DEFAULT_DRAG_THRESHOLD = 10;

class ScrollViewComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'scrollview';
    this.ComponentType = ScrollViewComponent;
    this.DataType = ScrollViewComponentData;
    this.schema = _schema$5;
    this.on('beforeremove', this._onRemoveComponent, this);
    this.app.systems.on('update', this.onUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    if (data.dragThreshold === undefined) {
      data.dragThreshold = DEFAULT_DRAG_THRESHOLD;
    }

    if (data.useMouseWheel === undefined) {
      data.useMouseWheel = true;
    }

    if (data.mouseWheelSensitivity === undefined) {
      data.mouseWheelSensitivity = new Vec2(1, 1);
    }

    super.initializeComponentData(component, data, _schema$5);
  }

  onUpdate(dt) {
    const components = this.store;

    for (const id in components) {
      const entity = components[id].entity;
      const component = entity.scrollview;

      if (component.enabled && entity.enabled) {
        component.onUpdate();
      }
    }
  }

  _onRemoveComponent(entity, component) {
    component.onRemove();
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(ScrollViewComponent.prototype, _schema$5);

class ScrollbarComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._handleReference = new EntityReference(this, 'handleEntity', {
      'element#gain': this._onHandleElementGain,
      'element#lose': this._onHandleElementLose,
      'element#set:anchor': this._onSetHandleAlignment,
      'element#set:margin': this._onSetHandleAlignment,
      'element#set:pivot': this._onSetHandleAlignment
    });

    this._toggleLifecycleListeners('on');
  }

  _toggleLifecycleListeners(onOrOff) {
    this[onOrOff]('set_value', this._onSetValue, this);
    this[onOrOff]('set_handleSize', this._onSetHandleSize, this);
    this[onOrOff]('set_orientation', this._onSetOrientation, this);
  }

  _onHandleElementGain() {
    this._destroyDragHelper();

    this._handleDragHelper = new ElementDragHelper(this._handleReference.entity.element, this._getAxis());

    this._handleDragHelper.on('drag:move', this._onHandleDrag, this);

    this._updateHandlePositionAndSize();
  }

  _onHandleElementLose() {
    this._destroyDragHelper();
  }

  _onHandleDrag(position) {
    if (this._handleReference.entity && this.enabled && this.entity.enabled) {
      this.value = this._handlePositionToScrollValue(position[this._getAxis()]);
    }
  }

  _onSetValue(name, oldValue, newValue) {
    if (Math.abs(newValue - oldValue) > 1e-5) {
      this.data.value = math$1.clamp(newValue, 0, 1);

      this._updateHandlePositionAndSize();

      this.fire('set:value', this.data.value);
    }
  }

  _onSetHandleSize(name, oldValue, newValue) {
    if (Math.abs(newValue - oldValue) > 1e-5) {
      this.data.handleSize = math$1.clamp(newValue, 0, 1);

      this._updateHandlePositionAndSize();
    }
  }

  _onSetHandleAlignment() {
    this._updateHandlePositionAndSize();
  }

  _onSetOrientation(name, oldValue, newValue) {
    if (newValue !== oldValue && this._handleReference.hasComponent('element')) {
      this._handleReference.entity.element[this._getOppositeDimension()] = 0;
    }
  }

  _updateHandlePositionAndSize() {
    const handleEntity = this._handleReference.entity;
    const handleElement = handleEntity && handleEntity.element;

    if (handleEntity) {
      const position = handleEntity.getLocalPosition();
      position[this._getAxis()] = this._getHandlePosition();

      this._handleReference.entity.setLocalPosition(position);
    }

    if (handleElement) {
      handleElement[this._getDimension()] = this._getHandleLength();
    }
  }

  _handlePositionToScrollValue(handlePosition) {
    return handlePosition * this._getSign() / this._getUsableTrackLength();
  }

  _scrollValueToHandlePosition(value) {
    return value * this._getSign() * this._getUsableTrackLength();
  }

  _getUsableTrackLength() {
    return Math.max(this._getTrackLength() - this._getHandleLength(), 0.001);
  }

  _getTrackLength() {
    if (this.entity.element) {
      return this.orientation === ORIENTATION_HORIZONTAL ? this.entity.element.calculatedWidth : this.entity.element.calculatedHeight;
    }

    return 0;
  }

  _getHandleLength() {
    return this._getTrackLength() * this.handleSize;
  }

  _getHandlePosition() {
    return this._scrollValueToHandlePosition(this.value);
  }

  _getSign() {
    return this.orientation === ORIENTATION_HORIZONTAL ? 1 : -1;
  }

  _getAxis() {
    return this.orientation === ORIENTATION_HORIZONTAL ? 'x' : 'y';
  }

  _getDimension() {
    return this.orientation === ORIENTATION_HORIZONTAL ? 'width' : 'height';
  }

  _getOppositeDimension() {
    return this.orientation === ORIENTATION_HORIZONTAL ? 'height' : 'width';
  }

  _destroyDragHelper() {
    if (this._handleDragHelper) {
      this._handleDragHelper.destroy();
    }
  }

  _setHandleDraggingEnabled(enabled) {
    if (this._handleDragHelper) {
      this._handleDragHelper.enabled = enabled;
    }
  }

  onEnable() {
    this._handleReference.onParentComponentEnable();

    this._setHandleDraggingEnabled(true);
  }

  onDisable() {
    this._setHandleDraggingEnabled(false);
  }

  onRemove() {
    this._destroyDragHelper();

    this._toggleLifecycleListeners('off');
  }

}

class ScrollbarComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$4 = [{
  name: 'enabled',
  type: 'boolean'
}, {
  name: 'orientation',
  type: 'number'
}, {
  name: 'value',
  type: 'number'
}, {
  name: 'handleSize',
  type: 'number'
}, {
  name: 'handleEntity',
  type: 'entity'
}];

class ScrollbarComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'scrollbar';
    this.ComponentType = ScrollbarComponent;
    this.DataType = ScrollbarComponentData;
    this.schema = _schema$4;
    this.on('beforeremove', this._onRemoveComponent, this);
  }

  initializeComponentData(component, data, properties) {
    super.initializeComponentData(component, data, _schema$4);
  }

  _onRemoveComponent(entity, component) {
    component.onRemove();
  }

}

Component._buildAccessors(ScrollbarComponent.prototype, _schema$4);

const instanceOptions = {
  volume: 0,
  pitch: 0,
  loop: false,
  startTime: 0,
  duration: 0,
  position: new Vec3(),
  maxDistance: 0,
  refDistance: 0,
  rollOffFactor: 0,
  distanceModel: 0,
  onPlay: null,
  onPause: null,
  onResume: null,
  onStop: null,
  onEnd: null
};

class SoundSlot extends EventHandler {
  constructor(component, name = 'Untitled', options = {}) {
    super();
    this.name = void 0;
    this.instances = [];
    this._component = component;
    this._assets = component.system.app.assets;
    this._manager = component.system.manager;
    this.name = name;
    this._volume = options.volume !== undefined ? math$1.clamp(Number(options.volume) || 0, 0, 1) : 1;
    this._pitch = options.pitch !== undefined ? Math.max(0.01, Number(options.pitch) || 0) : 1;
    this._loop = !!(options.loop !== undefined ? options.loop : false);
    this._duration = options.duration > 0 ? options.duration : null;
    this._startTime = Math.max(0, Number(options.startTime) || 0);
    this._overlap = !!options.overlap;
    this._autoPlay = !!options.autoPlay;
    this._firstNode = null;
    this._lastNode = null;
    this._asset = options.asset;

    if (this._asset instanceof Asset) {
      this._asset = this._asset.id;
    }

    this._onInstancePlayHandler = this._onInstancePlay.bind(this);
    this._onInstancePauseHandler = this._onInstancePause.bind(this);
    this._onInstanceResumeHandler = this._onInstanceResume.bind(this);
    this._onInstanceStopHandler = this._onInstanceStop.bind(this);
    this._onInstanceEndHandler = this._onInstanceEnd.bind(this);
  }

  play() {
    if (!this.overlap) {
      this.stop();
    }

    if (!this.isLoaded && !this._hasAsset()) {
      return undefined;
    }

    const instance = this._createInstance();

    this.instances.push(instance);

    if (!this.isLoaded) {
      const onLoad = function onLoad(sound) {
        const playWhenLoaded = instance._playWhenLoaded;
        instance.sound = sound;

        if (playWhenLoaded) {
          instance.play();
        }
      };

      this.off('load', onLoad);
      this.once('load', onLoad);
      this.load();
    } else {
      instance.play();
    }

    return instance;
  }

  pause() {
    let paused = false;
    const instances = this.instances;

    for (let i = 0, len = instances.length; i < len; i++) {
      if (instances[i].pause()) {
        paused = true;
      }
    }

    return paused;
  }

  resume() {
    let resumed = false;
    const instances = this.instances;

    for (let i = 0, len = instances.length; i < len; i++) {
      if (instances[i].resume()) resumed = true;
    }

    return resumed;
  }

  stop() {
    let stopped = false;
    const instances = this.instances;
    let i = instances.length;

    while (i--) {
      instances[i].stop();
      stopped = true;
    }

    instances.length = 0;
    return stopped;
  }

  load() {
    if (!this._hasAsset()) return;

    const asset = this._assets.get(this._asset);

    if (!asset) {
      this._assets.off('add:' + this._asset, this._onAssetAdd, this);

      this._assets.once('add:' + this._asset, this._onAssetAdd, this);

      return;
    }

    asset.off('remove', this._onAssetRemoved, this);
    asset.on('remove', this._onAssetRemoved, this);

    if (!asset.resource) {
      asset.off('load', this._onAssetLoad, this);
      asset.once('load', this._onAssetLoad, this);

      this._assets.load(asset);

      return;
    }

    this.fire('load', asset.resource);
  }

  setExternalNodes(firstNode, lastNode) {
    if (!firstNode) {
      console.error('The firstNode must have a valid AudioNode');
      return;
    }

    if (!lastNode) {
      lastNode = firstNode;
    }

    this._firstNode = firstNode;
    this._lastNode = lastNode;

    if (!this._overlap) {
      const instances = this.instances;

      for (let i = 0, len = instances.length; i < len; i++) {
        instances[i].setExternalNodes(firstNode, lastNode);
      }
    }
  }

  clearExternalNodes() {
    this._firstNode = null;
    this._lastNode = null;

    if (!this._overlap) {
      const instances = this.instances;

      for (let i = 0, len = instances.length; i < len; i++) {
        instances[i].clearExternalNodes();
      }
    }
  }

  getExternalNodes() {
    return [this._firstNode, this._lastNode];
  }

  _hasAsset() {
    return this._asset != null;
  }

  _createInstance() {
    let instance = null;
    const component = this._component;
    let sound = null;

    if (this._hasAsset()) {
      const asset = this._assets.get(this._asset);

      if (asset) {
        sound = asset.resource;
      }
    }

    const data = instanceOptions;
    data.volume = this._volume * component.volume;
    data.pitch = this._pitch * component.pitch;
    data.loop = this._loop;
    data.startTime = this._startTime;
    data.duration = this._duration;
    data.onPlay = this._onInstancePlayHandler;
    data.onPause = this._onInstancePauseHandler;
    data.onResume = this._onInstanceResumeHandler;
    data.onStop = this._onInstanceStopHandler;
    data.onEnd = this._onInstanceEndHandler;

    if (component.positional) {
      data.position.copy(component.entity.getPosition());
      data.maxDistance = component.maxDistance;
      data.refDistance = component.refDistance;
      data.rollOffFactor = component.rollOffFactor;
      data.distanceModel = component.distanceModel;
      instance = new SoundInstance3d(this._manager, sound, data);
    } else {
      instance = new SoundInstance(this._manager, sound, data);
    }

    if (this._firstNode) {
      instance.setExternalNodes(this._firstNode, this._lastNode);
    }

    return instance;
  }

  _onInstancePlay(instance) {
    this.fire('play', instance);

    this._component.fire('play', this, instance);
  }

  _onInstancePause(instance) {
    this.fire('pause', instance);

    this._component.fire('pause', this, instance);
  }

  _onInstanceResume(instance) {
    this.fire('resume', instance);

    this._component.fire('resume', this, instance);
  }

  _onInstanceStop(instance) {
    const idx = this.instances.indexOf(instance);

    if (idx !== -1) {
      this.instances.splice(idx, 1);
    }

    this.fire('stop', instance);

    this._component.fire('stop', this, instance);
  }

  _onInstanceEnd(instance) {
    const idx = this.instances.indexOf(instance);

    if (idx !== -1) {
      this.instances.splice(idx, 1);
    }

    this.fire('end', instance);

    this._component.fire('end', this, instance);
  }

  _onAssetAdd(asset) {
    this.load();
  }

  _onAssetLoad(asset) {
    this.load();
  }

  _onAssetRemoved(asset) {
    asset.off('remove', this._onAssetRemoved, this);

    this._assets.off('add:' + asset.id, this._onAssetAdd, this);

    this.stop();
  }

  updatePosition(position) {
    const instances = this.instances;

    for (let i = 0, len = instances.length; i < len; i++) {
      instances[i].position = position;
    }
  }

  set asset(value) {
    const old = this._asset;

    if (old) {
      this._assets.off('add:' + old, this._onAssetAdd, this);

      const oldAsset = this._assets.get(old);

      if (oldAsset) {
        oldAsset.off('remove', this._onAssetRemoved, this);
      }
    }

    this._asset = value;

    if (this._asset instanceof Asset) {
      this._asset = this._asset.id;
    }

    if (this._hasAsset() && this._component.enabled && this._component.entity.enabled) {
      this.load();
    }
  }

  get asset() {
    return this._asset;
  }

  set autoPlay(value) {
    this._autoPlay = !!value;
  }

  get autoPlay() {
    return this._autoPlay;
  }

  set duration(value) {
    this._duration = Math.max(0, Number(value) || 0) || null;

    if (!this._overlap) {
      const instances = this.instances;

      for (let i = 0, len = instances.length; i < len; i++) {
        instances[i].duration = this._duration;
      }
    }
  }

  get duration() {
    let assetDuration = 0;

    if (this._hasAsset()) {
      const asset = this._assets.get(this._asset);

      assetDuration = asset != null && asset.resource ? asset.resource.duration : 0;
    }

    if (this._duration != null) {
      return this._duration % (assetDuration || 1);
    }

    return assetDuration;
  }

  get isLoaded() {
    if (this._hasAsset()) {
      const asset = this._assets.get(this._asset);

      if (asset) {
        return !!asset.resource;
      }
    }

    return false;
  }

  get isPaused() {
    const instances = this.instances;
    const len = instances.length;
    if (len === 0) return false;

    for (let i = 0; i < len; i++) {
      if (!instances[i].isPaused) return false;
    }

    return true;
  }

  get isPlaying() {
    const instances = this.instances;

    for (let i = 0, len = instances.length; i < len; i++) {
      if (instances[i].isPlaying) return true;
    }

    return false;
  }

  get isStopped() {
    const instances = this.instances;

    for (let i = 0, len = instances.length; i < len; i++) {
      if (!instances[i].isStopped) return false;
    }

    return true;
  }

  set loop(value) {
    this._loop = !!value;
    const instances = this.instances;

    for (let i = 0, len = instances.length; i < len; i++) {
      instances[i].loop = this._loop;
    }
  }

  get loop() {
    return this._loop;
  }

  set overlap(value) {
    this._overlap = !!value;
  }

  get overlap() {
    return this._overlap;
  }

  set pitch(value) {
    this._pitch = Math.max(Number(value) || 0, 0.01);

    if (!this._overlap) {
      const instances = this.instances;

      for (let i = 0, len = instances.length; i < len; i++) {
        instances[i].pitch = this.pitch * this._component.pitch;
      }
    }
  }

  get pitch() {
    return this._pitch;
  }

  set startTime(value) {
    this._startTime = Math.max(0, Number(value) || 0);

    if (!this._overlap) {
      const instances = this.instances;

      for (let i = 0, len = instances.length; i < len; i++) {
        instances[i].startTime = this._startTime;
      }
    }
  }

  get startTime() {
    return this._startTime;
  }

  set volume(value) {
    this._volume = math$1.clamp(Number(value) || 0, 0, 1);

    if (!this._overlap) {
      const instances = this.instances;

      for (let i = 0, len = instances.length; i < len; i++) {
        instances[i].volume = this._volume * this._component.volume;
      }
    }
  }

  get volume() {
    return this._volume;
  }

}

class SoundComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._volume = 1;
    this._pitch = 1;
    this._positional = true;
    this._refDistance = 1;
    this._maxDistance = 10000;
    this._rollOffFactor = 1;
    this._distanceModel = DISTANCE_LINEAR;
    this._slots = {};
    this._playingBeforeDisable = {};
  }

  _updateSoundInstances(property, value, isFactor) {
    const slots = this._slots;

    for (const key in slots) {
      const slot = slots[key];

      if (!slot.overlap) {
        const instances = slot.instances;

        for (let i = 0, len = instances.length; i < len; i++) {
          instances[i][property] = isFactor ? slot[property] * value : value;
        }
      }
    }
  }

  set distanceModel(value) {
    this._distanceModel = value;

    this._updateSoundInstances('distanceModel', value, false);
  }

  get distanceModel() {
    return this._distanceModel;
  }

  set maxDistance(value) {
    this._maxDistance = value;

    this._updateSoundInstances('maxDistance', value, false);
  }

  get maxDistance() {
    return this._maxDistance;
  }

  set refDistance(value) {
    this._refDistance = value;

    this._updateSoundInstances('refDistance', value, false);
  }

  get refDistance() {
    return this._refDistance;
  }

  set rollOffFactor(value) {
    this._rollOffFactor = value;

    this._updateSoundInstances('rollOffFactor', value, false);
  }

  get rollOffFactor() {
    return this._rollOffFactor;
  }

  set pitch(value) {
    this._pitch = value;

    this._updateSoundInstances('pitch', value, true);
  }

  get pitch() {
    return this._pitch;
  }

  set volume(value) {
    this._volume = value;

    this._updateSoundInstances('volume', value, true);
  }

  get volume() {
    return this._volume;
  }

  set positional(newValue) {
    this._positional = newValue;
    const slots = this._slots;

    for (const key in slots) {
      const slot = slots[key];

      if (!slot.overlap) {
        const instances = slot.instances;
        const oldLength = instances.length;

        for (let i = oldLength - 1; i >= 0; i--) {
          const isPlaying = instances[i].isPlaying || instances[i].isSuspended;
          const currentTime = instances[i].currentTime;
          if (isPlaying) instances[i].stop();

          const instance = slot._createInstance();

          if (isPlaying) {
            instance.play();
            instance.currentTime = currentTime;
          }

          instances.push(instance);
        }
      }
    }
  }

  get positional() {
    return this._positional;
  }

  set slots(newValue) {
    const oldValue = this._slots;

    if (oldValue) {
      for (const key in oldValue) {
        oldValue[key].stop();
      }
    }

    const slots = {};

    for (const key in newValue) {
      if (!(newValue[key] instanceof SoundSlot)) {
        if (newValue[key].name) {
          slots[newValue[key].name] = new SoundSlot(this, newValue[key].name, newValue[key]);
        }
      } else {
        slots[newValue[key].name] = newValue[key];
      }
    }

    this._slots = slots;
    if (this.enabled && this.entity.enabled) this.onEnable();
  }

  get slots() {
    return this._slots;
  }

  onEnable() {
    if (this.system._inTools) {
      return;
    }

    const slots = this._slots;
    const playingBeforeDisable = this._playingBeforeDisable;

    for (const key in slots) {
      const slot = slots[key];

      if (slot.autoPlay && slot.isStopped) {
        slot.play();
      } else if (playingBeforeDisable[key]) {
        slot.resume();
      } else if (!slot.isLoaded) {
        slot.load();
      }
    }
  }

  onDisable() {
    const slots = this._slots;
    const playingBeforeDisable = {};

    for (const key in slots) {
      if (!slots[key].overlap) {
        if (slots[key].isPlaying) {
          slots[key].pause();
          playingBeforeDisable[key] = true;
        }
      }
    }

    this._playingBeforeDisable = playingBeforeDisable;
  }

  onRemove() {
    this.off();
  }

  addSlot(name, options) {
    const slots = this._slots;

    if (slots[name]) {
      return null;
    }

    const slot = new SoundSlot(this, name, options);
    slots[name] = slot;

    if (slot.autoPlay && this.enabled && this.entity.enabled) {
      slot.play();
    }

    return slot;
  }

  removeSlot(name) {
    const slots = this._slots;

    if (slots[name]) {
      slots[name].stop();
      delete slots[name];
    }
  }

  slot(name) {
    return this._slots[name];
  }

  play(name) {
    if (!this.enabled || !this.entity.enabled) {
      return null;
    }

    const slot = this._slots[name];

    if (!slot) {
      return null;
    }

    return slot.play();
  }

  pause(name) {
    const slots = this._slots;

    if (name) {
      const slot = slots[name];

      if (!slot) {
        return;
      }

      slot.pause();
    } else {
      for (const key in slots) {
        slots[key].pause();
      }
    }
  }

  resume(name) {
    const slots = this._slots;

    if (name) {
      const slot = slots[name];

      if (!slot) {
        return;
      }

      if (slot.isPaused) {
        slot.resume();
      }
    } else {
      for (const key in slots) {
        slots[key].resume();
      }
    }
  }

  stop(name) {
    const slots = this._slots;

    if (name) {
      const slot = slots[name];

      if (!slot) {
        return;
      }

      slot.stop();
    } else {
      for (const key in slots) {
        slots[key].stop();
      }
    }
  }

}

class SoundComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$3 = ['enabled'];

class SoundComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'sound';
    this.ComponentType = SoundComponent;
    this.DataType = SoundComponentData;
    this.schema = _schema$3;
    this.manager = app.soundManager;
    this.app.systems.on('update', this.onUpdate, this);
    this.on('beforeremove', this.onBeforeRemove, this);
  }

  set volume(volume) {
    this.manager.volume = volume;
  }

  get volume() {
    return this.manager.volume;
  }

  get context() {
    if (!hasAudioContext()) {
      return null;
    }

    return this.manager.context;
  }

  initializeComponentData(component, data, properties) {
    properties = ['volume', 'pitch', 'positional', 'refDistance', 'maxDistance', 'rollOffFactor', 'distanceModel', 'slots'];

    for (let i = 0; i < properties.length; i++) {
      if (data.hasOwnProperty(properties[i])) {
        component[properties[i]] = data[properties[i]];
      }
    }

    super.initializeComponentData(component, data, ['enabled']);
  }

  cloneComponent(entity, clone) {
    const srcComponent = entity.sound;
    const srcSlots = srcComponent.slots;
    const slots = {};

    for (const key in srcSlots) {
      const srcSlot = srcSlots[key];
      slots[key] = {
        name: srcSlot.name,
        volume: srcSlot.volume,
        pitch: srcSlot.pitch,
        loop: srcSlot.loop,
        duration: srcSlot.duration,
        startTime: srcSlot.startTime,
        overlap: srcSlot.overlap,
        autoPlay: srcSlot.autoPlay,
        asset: srcSlot.asset
      };
    }

    const cloneData = {
      distanceModel: srcComponent.distanceModel,
      enabled: srcComponent.enabled,
      maxDistance: srcComponent.maxDistance,
      pitch: srcComponent.pitch,
      positional: srcComponent.positional,
      refDistance: srcComponent.refDistance,
      rollOffFactor: srcComponent.rollOffFactor,
      slots: slots,
      volume: srcComponent.volume
    };
    return this.addComponent(clone, cloneData);
  }

  onUpdate(dt) {
    const store = this.store;

    for (const id in store) {
      if (store.hasOwnProperty(id)) {
        const item = store[id];
        const entity = item.entity;

        if (entity.enabled) {
          const component = entity.sound;

          if (component.enabled && component.positional) {
            const position = entity.getPosition();
            const slots = component.slots;

            for (const key in slots) {
              slots[key].updatePosition(position);
            }
          }
        }
      }
    }
  }

  onBeforeRemove(entity, component) {
    const slots = component.slots;

    for (const key in slots) {
      if (!slots[key].overlap) {
        slots[key].stop();
      }
    }

    component.onRemove();
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(SoundComponent.prototype, _schema$3);

const SPRITETYPE_SIMPLE = 'simple';
const SPRITETYPE_ANIMATED = 'animated';

class SpriteAnimationClip extends EventHandler {
  constructor(component, data) {
    super();
    this._component = component;
    this._frame = 0;
    this._sprite = null;
    this._spriteAsset = null;
    this.spriteAsset = data.spriteAsset;
    this.name = data.name;
    this.fps = data.fps || 0;
    this.loop = data.loop || false;
    this._playing = false;
    this._paused = false;
    this._time = 0;
  }

  get duration() {
    if (this._sprite) {
      const fps = this.fps || Number.MIN_VALUE;
      return this._sprite.frameKeys.length / Math.abs(fps);
    }

    return 0;
  }

  set frame(value) {
    this._setFrame(value);

    const fps = this.fps || Number.MIN_VALUE;

    this._setTime(this._frame / fps);
  }

  get frame() {
    return this._frame;
  }

  get isPaused() {
    return this._paused;
  }

  get isPlaying() {
    return this._playing;
  }

  set sprite(value) {
    if (this._sprite) {
      this._sprite.off('set:meshes', this._onSpriteMeshesChange, this);

      this._sprite.off('set:pixelsPerUnit', this._onSpritePpuChanged, this);

      this._sprite.off('set:atlas', this._onSpriteMeshesChange, this);

      if (this._sprite.atlas) {
        this._sprite.atlas.off('set:texture', this._onSpriteMeshesChange, this);
      }
    }

    this._sprite = value;

    if (this._sprite) {
      this._sprite.on('set:meshes', this._onSpriteMeshesChange, this);

      this._sprite.on('set:pixelsPerUnit', this._onSpritePpuChanged, this);

      this._sprite.on('set:atlas', this._onSpriteMeshesChange, this);

      if (this._sprite.atlas) {
        this._sprite.atlas.on('set:texture', this._onSpriteMeshesChange, this);
      }
    }

    if (this._component.currentClip === this) {
      let mi;

      if (!value || !value.atlas) {
        mi = this._component._meshInstance;

        if (mi) {
          mi.deleteParameter('texture_emissiveMap');
          mi.deleteParameter('texture_opacityMap');
        }

        this._component._hideModel();
      } else {
        if (value.atlas.texture) {
          mi = this._component._meshInstance;

          if (mi) {
            mi.setParameter('texture_emissiveMap', value.atlas.texture);
            mi.setParameter('texture_opacityMap', value.atlas.texture);
          }

          if (this._component.enabled && this._component.entity.enabled) {
            this._component._showModel();
          }
        }

        if (this.time && this.fps) {
          this.time = this.time;
        } else {
          this.frame = this.frame;
        }
      }
    }
  }

  get sprite() {
    return this._sprite;
  }

  set spriteAsset(value) {
    const assets = this._component.system.app.assets;
    let id = value;

    if (value instanceof Asset) {
      id = value.id;
    }

    if (this._spriteAsset !== id) {
      if (this._spriteAsset) {
        const prev = assets.get(this._spriteAsset);

        if (prev) {
          this._unbindSpriteAsset(prev);
        }
      }

      this._spriteAsset = id;

      if (this._spriteAsset) {
        const asset = assets.get(this._spriteAsset);

        if (!asset) {
          this.sprite = null;
          assets.on('add:' + this._spriteAsset, this._onSpriteAssetAdded, this);
        } else {
          this._bindSpriteAsset(asset);
        }
      } else {
        this.sprite = null;
      }
    }
  }

  get spriteAsset() {
    return this._spriteAsset;
  }

  set time(value) {
    this._setTime(value);

    if (this._sprite) {
      this.frame = Math.min(this._sprite.frameKeys.length - 1, Math.floor(this._time * Math.abs(this.fps)));
    } else {
      this.frame = 0;
    }
  }

  get time() {
    return this._time;
  }

  _onSpriteAssetAdded(asset) {
    this._component.system.app.assets.off('add:' + asset.id, this._onSpriteAssetAdded, this);

    if (this._spriteAsset === asset.id) {
      this._bindSpriteAsset(asset);
    }
  }

  _bindSpriteAsset(asset) {
    asset.on('load', this._onSpriteAssetLoad, this);
    asset.on('remove', this._onSpriteAssetRemove, this);

    if (asset.resource) {
      this._onSpriteAssetLoad(asset);
    } else {
      this._component.system.app.assets.load(asset);
    }
  }

  _unbindSpriteAsset(asset) {
    asset.off('load', this._onSpriteAssetLoad, this);
    asset.off('remove', this._onSpriteAssetRemove, this);

    if (asset.resource && asset.resource.atlas) {
      this._component.system.app.assets.off('load:' + asset.data.textureAtlasAsset, this._onTextureAtlasLoad, this);
    }
  }

  _onSpriteAssetLoad(asset) {
    if (!asset.resource) {
      this.sprite = null;
    } else {
      if (!asset.resource.atlas) {
        const atlasAssetId = asset.data.textureAtlasAsset;
        const assets = this._component.system.app.assets;
        assets.off('load:' + atlasAssetId, this._onTextureAtlasLoad, this);
        assets.once('load:' + atlasAssetId, this._onTextureAtlasLoad, this);
      } else {
        this.sprite = asset.resource;
      }
    }
  }

  _onTextureAtlasLoad(atlasAsset) {
    const spriteAsset = this._spriteAsset;

    if (spriteAsset instanceof Asset) {
      this._onSpriteAssetLoad(spriteAsset);
    } else {
      this._onSpriteAssetLoad(this._component.system.app.assets.get(spriteAsset));
    }
  }

  _onSpriteAssetRemove(asset) {
    this.sprite = null;
  }

  _onSpriteMeshesChange() {
    if (this._component.currentClip === this) {
      this._component._showFrame(this.frame);
    }
  }

  _onSpritePpuChanged() {
    if (this._component.currentClip === this) {
      if (this.sprite.renderMode !== SPRITE_RENDERMODE_SIMPLE) {
        this._component._showFrame(this.frame);
      }
    }
  }

  _update(dt) {
    if (this.fps === 0) return;
    if (!this._playing || this._paused || !this._sprite) return;
    const dir = this.fps < 0 ? -1 : 1;
    const time = this._time + dt * this._component.speed * dir;
    const duration = this.duration;
    const end = time > duration || time < 0;

    this._setTime(time);

    let frame = this.frame;

    if (this._sprite) {
      frame = Math.floor(this._sprite.frameKeys.length * this._time / duration);
    } else {
      frame = 0;
    }

    if (frame !== this._frame) {
      this._setFrame(frame);
    }

    if (end) {
      if (this.loop) {
        this.fire('loop');

        this._component.fire('loop', this);
      } else {
        this._playing = false;
        this._paused = false;
        this.fire('end');

        this._component.fire('end', this);
      }
    }
  }

  _setTime(value) {
    this._time = value;
    const duration = this.duration;

    if (this._time < 0) {
      if (this.loop) {
        this._time = this._time % duration + duration;
      } else {
        this._time = 0;
      }
    } else if (this._time > duration) {
      if (this.loop) {
        this._time %= duration;
      } else {
        this._time = duration;
      }
    }
  }

  _setFrame(value) {
    if (this._sprite) {
      this._frame = math$1.clamp(value, 0, this._sprite.frameKeys.length - 1);
    } else {
      this._frame = value;
    }

    if (this._component.currentClip === this) {
      this._component._showFrame(this._frame);
    }
  }

  _destroy() {
    if (this._sprite) {
      this.sprite = null;
    }

    if (this._spriteAsset) {
      this.spriteAsset = null;
    }
  }

  play() {
    if (this._playing) return;
    this._playing = true;
    this._paused = false;
    this.frame = 0;
    this.fire('play');

    this._component.fire('play', this);
  }

  pause() {
    if (!this._playing || this._paused) return;
    this._paused = true;
    this.fire('pause');

    this._component.fire('pause', this);
  }

  resume() {
    if (!this._paused) return;
    this._paused = false;
    this.fire('resume');

    this._component.fire('resume', this);
  }

  stop() {
    if (!this._playing) return;
    this._playing = false;
    this._paused = false;
    this._time = 0;
    this.frame = 0;
    this.fire('stop');

    this._component.fire('stop', this);
  }

}

const PARAM_EMISSIVE_MAP = 'texture_emissiveMap';
const PARAM_OPACITY_MAP = 'texture_opacityMap';
const PARAM_EMISSIVE = 'material_emissive';
const PARAM_OPACITY = 'material_opacity';
const PARAM_INNER_OFFSET = 'innerOffset';
const PARAM_OUTER_SCALE = 'outerScale';
const PARAM_ATLAS_RECT = 'atlasRect';

class SpriteComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._type = SPRITETYPE_SIMPLE;
    this._material = system.defaultMaterial;
    this._color = new Color(1, 1, 1, 1);
    this._colorUniform = new Float32Array(3);
    this._speed = 1;
    this._flipX = false;
    this._flipY = false;
    this._width = 1;
    this._height = 1;
    this._drawOrder = 0;
    this._layers = [LAYERID_WORLD];
    this._outerScale = new Vec2(1, 1);
    this._outerScaleUniform = new Float32Array(2);
    this._innerOffset = new Vec4();
    this._innerOffsetUniform = new Float32Array(4);
    this._atlasRect = new Vec4();
    this._atlasRectUniform = new Float32Array(4);
    this._batchGroupId = -1;
    this._batchGroup = null;
    this._node = new GraphNode();
    this._model = new Model();
    this._model.graph = this._node;
    this._meshInstance = null;
    entity.addChild(this._model.graph);
    this._model._entity = entity;
    this._updateAabbFunc = this._updateAabb.bind(this);
    this._addedModel = false;
    this._autoPlayClip = null;
    this._clips = {};
    this._defaultClip = new SpriteAnimationClip(this, {
      name: this.entity.name,
      fps: 0,
      loop: false,
      spriteAsset: null
    });
    this._currentClip = this._defaultClip;
  }

  set type(value) {
    if (this._type === value) return;
    this._type = value;

    if (this._type === SPRITETYPE_SIMPLE) {
      this.stop();
      this._currentClip = this._defaultClip;

      if (this.enabled && this.entity.enabled) {
        this._currentClip.frame = this.frame;

        if (this._currentClip.sprite) {
          this._showModel();
        } else {
          this._hideModel();
        }
      }
    } else if (this._type === SPRITETYPE_ANIMATED) {
      this.stop();

      if (this._autoPlayClip) {
        this._tryAutoPlay();
      }

      if (this._currentClip && this._currentClip.isPlaying && this.enabled && this.entity.enabled) {
        this._showModel();
      } else {
        this._hideModel();
      }
    }
  }

  get type() {
    return this._type;
  }

  set frame(value) {
    this._currentClip.frame = value;
  }

  get frame() {
    return this._currentClip.frame;
  }

  set spriteAsset(value) {
    this._defaultClip.spriteAsset = value;
  }

  get spriteAsset() {
    return this._defaultClip._spriteAsset;
  }

  set sprite(value) {
    this._currentClip.sprite = value;
  }

  get sprite() {
    return this._currentClip.sprite;
  }

  set material(value) {
    this._material = value;

    if (this._meshInstance) {
      this._meshInstance.material = value;
    }
  }

  get material() {
    return this._material;
  }

  set color(value) {
    this._color.r = value.r;
    this._color.g = value.g;
    this._color.b = value.b;

    if (this._meshInstance) {
      this._colorUniform[0] = this._color.r;
      this._colorUniform[1] = this._color.g;
      this._colorUniform[2] = this._color.b;

      this._meshInstance.setParameter(PARAM_EMISSIVE, this._colorUniform);
    }
  }

  get color() {
    return this._color;
  }

  set opacity(value) {
    this._color.a = value;

    if (this._meshInstance) {
      this._meshInstance.setParameter(PARAM_OPACITY, value);
    }
  }

  get opacity() {
    return this._color.a;
  }

  set clips(value) {
    if (!value) {
      for (const name in this._clips) {
        this.removeClip(name);
      }

      return;
    }

    for (const name in this._clips) {
      let found = false;

      for (const key in value) {
        if (value[key].name === name) {
          found = true;
          this._clips[name].fps = value[key].fps;
          this._clips[name].loop = value[key].loop;

          if (value[key].hasOwnProperty('sprite')) {
            this._clips[name].sprite = value[key].sprite;
          } else if (value[key].hasOwnProperty('spriteAsset')) {
            this._clips[name].spriteAsset = value[key].spriteAsset;
          }

          break;
        }
      }

      if (!found) {
        this.removeClip(name);
      }
    }

    for (const key in value) {
      if (this._clips[value[key].name]) continue;
      this.addClip(value[key]);
    }

    if (this._autoPlayClip) {
      this._tryAutoPlay();
    }

    if (!this._currentClip || !this._currentClip.sprite) {
      this._hideModel();
    }
  }

  get clips() {
    return this._clips;
  }

  get currentClip() {
    return this._currentClip;
  }

  set speed(value) {
    this._speed = value;
  }

  get speed() {
    return this._speed;
  }

  set flipX(value) {
    if (this._flipX === value) return;
    this._flipX = value;

    this._updateTransform();
  }

  get flipX() {
    return this._flipX;
  }

  set flipY(value) {
    if (this._flipY === value) return;
    this._flipY = value;

    this._updateTransform();
  }

  get flipY() {
    return this._flipY;
  }

  set width(value) {
    if (value === this._width) return;
    this._width = value;
    this._outerScale.x = this._width;

    if (this.sprite && (this.sprite.renderMode === SPRITE_RENDERMODE_TILED || this.sprite.renderMode === SPRITE_RENDERMODE_SLICED)) {
      this._updateTransform();
    }
  }

  get width() {
    return this._width;
  }

  set height(value) {
    if (value === this._height) return;
    this._height = value;
    this._outerScale.y = this.height;

    if (this.sprite && (this.sprite.renderMode === SPRITE_RENDERMODE_TILED || this.sprite.renderMode === SPRITE_RENDERMODE_SLICED)) {
      this._updateTransform();
    }
  }

  get height() {
    return this._height;
  }

  set batchGroupId(value) {
    if (this._batchGroupId === value) return;
    const prev = this._batchGroupId;
    this._batchGroupId = value;

    if (this.entity.enabled && prev >= 0) {
      var _this$system$app$batc;

      (_this$system$app$batc = this.system.app.batcher) == null ? void 0 : _this$system$app$batc.remove(BatchGroup.SPRITE, prev, this.entity);
    }

    if (this.entity.enabled && value >= 0) {
      var _this$system$app$batc2;

      (_this$system$app$batc2 = this.system.app.batcher) == null ? void 0 : _this$system$app$batc2.insert(BatchGroup.SPRITE, value, this.entity);
    } else {
      if (prev >= 0) {
        if (this._currentClip && this._currentClip.sprite && this.enabled && this.entity.enabled) {
          this._showModel();
        }
      }
    }
  }

  get batchGroupId() {
    return this._batchGroupId;
  }

  set autoPlayClip(value) {
    this._autoPlayClip = value instanceof SpriteAnimationClip ? value.name : value;

    this._tryAutoPlay();
  }

  get autoPlayClip() {
    return this._autoPlayClip;
  }

  set drawOrder(value) {
    this._drawOrder = value;

    if (this._meshInstance) {
      this._meshInstance.drawOrder = value;
    }
  }

  get drawOrder() {
    return this._drawOrder;
  }

  set layers(value) {
    if (this._addedModel) {
      this._hideModel();
    }

    this._layers = value;

    if (!this._meshInstance) {
      return;
    }

    if (this.enabled && this.entity.enabled) {
      this._showModel();
    }
  }

  get layers() {
    return this._layers;
  }

  get aabb() {
    if (this._meshInstance) {
      return this._meshInstance.aabb;
    }

    return null;
  }

  onEnable() {
    const app = this.system.app;
    const scene = app.scene;
    scene.on('set:layers', this._onLayersChanged, this);

    if (scene.layers) {
      scene.layers.on('add', this._onLayerAdded, this);
      scene.layers.on('remove', this._onLayerRemoved, this);
    }

    this._showModel();

    if (this._autoPlayClip) this._tryAutoPlay();

    if (this._batchGroupId >= 0) {
      var _app$batcher;

      (_app$batcher = app.batcher) == null ? void 0 : _app$batcher.insert(BatchGroup.SPRITE, this._batchGroupId, this.entity);
    }
  }

  onDisable() {
    const app = this.system.app;
    const scene = app.scene;
    scene.off('set:layers', this._onLayersChanged, this);

    if (scene.layers) {
      scene.layers.off('add', this._onLayerAdded, this);
      scene.layers.off('remove', this._onLayerRemoved, this);
    }

    this.stop();

    this._hideModel();

    if (this._batchGroupId >= 0) {
      var _app$batcher2;

      (_app$batcher2 = app.batcher) == null ? void 0 : _app$batcher2.remove(BatchGroup.SPRITE, this._batchGroupId, this.entity);
    }
  }

  onDestroy() {
    this._currentClip = null;

    if (this._defaultClip) {
      this._defaultClip._destroy();

      this._defaultClip = null;
    }

    for (const key in this._clips) {
      this._clips[key]._destroy();
    }

    this._clips = null;

    this._hideModel();

    this._model = null;

    if (this._node) {
      if (this._node.parent) this._node.parent.removeChild(this._node);
      this._node = null;
    }

    if (this._meshInstance) {
      this._meshInstance.material = null;
      this._meshInstance.mesh = null;
      this._meshInstance = null;
    }
  }

  _showModel() {
    if (this._addedModel) return;
    if (!this._meshInstance) return;
    const meshInstances = [this._meshInstance];

    for (let i = 0, len = this._layers.length; i < len; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this._layers[i]);

      if (layer) {
        layer.addMeshInstances(meshInstances);
      }
    }

    this._addedModel = true;
  }

  _hideModel() {
    if (!this._addedModel || !this._meshInstance) return;
    const meshInstances = [this._meshInstance];

    for (let i = 0, len = this._layers.length; i < len; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this._layers[i]);

      if (layer) {
        layer.removeMeshInstances(meshInstances);
      }
    }

    this._addedModel = false;
  }

  _showFrame(frame) {
    if (!this.sprite) return;
    const mesh = this.sprite.meshes[frame];

    if (!mesh) {
      if (this._meshInstance) {
        this._meshInstance.mesh = null;
        this._meshInstance.visible = false;
      }

      return;
    }

    let material;

    if (this.sprite.renderMode === SPRITE_RENDERMODE_SLICED) {
      material = this.system.default9SlicedMaterialSlicedMode;
    } else if (this.sprite.renderMode === SPRITE_RENDERMODE_TILED) {
      material = this.system.default9SlicedMaterialTiledMode;
    } else {
      material = this.system.defaultMaterial;
    }

    if (!this._meshInstance) {
      this._meshInstance = new MeshInstance(mesh, this._material, this._node);
      this._meshInstance.castShadow = false;
      this._meshInstance.receiveShadow = false;
      this._meshInstance.drawOrder = this._drawOrder;

      this._model.meshInstances.push(this._meshInstance);

      this._colorUniform[0] = this._color.r;
      this._colorUniform[1] = this._color.g;
      this._colorUniform[2] = this._color.b;

      this._meshInstance.setParameter(PARAM_EMISSIVE, this._colorUniform);

      this._meshInstance.setParameter(PARAM_OPACITY, this._color.a);

      if (this.enabled && this.entity.enabled) {
        this._showModel();
      }
    }

    if (this._meshInstance.material !== material) {
      this._meshInstance.material = material;
    }

    if (this._meshInstance.mesh !== mesh) {
      this._meshInstance.mesh = mesh;
      this._meshInstance.visible = true;
      this._meshInstance._aabbVer = -1;
    }

    if (this.sprite.atlas && this.sprite.atlas.texture) {
      this._meshInstance.setParameter(PARAM_EMISSIVE_MAP, this.sprite.atlas.texture);

      this._meshInstance.setParameter(PARAM_OPACITY_MAP, this.sprite.atlas.texture);
    } else {
      this._meshInstance.deleteParameter(PARAM_EMISSIVE_MAP);

      this._meshInstance.deleteParameter(PARAM_OPACITY_MAP);
    }

    if (this.sprite.atlas && (this.sprite.renderMode === SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === SPRITE_RENDERMODE_TILED)) {
      this._meshInstance._updateAabbFunc = this._updateAabbFunc;
      const frameData = this.sprite.atlas.frames[this.sprite.frameKeys[frame]];

      if (frameData) {
        const borderWidthScale = 2 / frameData.rect.z;
        const borderHeightScale = 2 / frameData.rect.w;

        this._innerOffset.set(frameData.border.x * borderWidthScale, frameData.border.y * borderHeightScale, frameData.border.z * borderWidthScale, frameData.border.w * borderHeightScale);

        const tex = this.sprite.atlas.texture;

        this._atlasRect.set(frameData.rect.x / tex.width, frameData.rect.y / tex.height, frameData.rect.z / tex.width, frameData.rect.w / tex.height);
      } else {
        this._innerOffset.set(0, 0, 0, 0);
      }

      this._innerOffsetUniform[0] = this._innerOffset.x;
      this._innerOffsetUniform[1] = this._innerOffset.y;
      this._innerOffsetUniform[2] = this._innerOffset.z;
      this._innerOffsetUniform[3] = this._innerOffset.w;

      this._meshInstance.setParameter(PARAM_INNER_OFFSET, this._innerOffsetUniform);

      this._atlasRectUniform[0] = this._atlasRect.x;
      this._atlasRectUniform[1] = this._atlasRect.y;
      this._atlasRectUniform[2] = this._atlasRect.z;
      this._atlasRectUniform[3] = this._atlasRect.w;

      this._meshInstance.setParameter(PARAM_ATLAS_RECT, this._atlasRectUniform);
    } else {
      this._meshInstance._updateAabbFunc = null;
    }

    this._updateTransform();
  }

  _updateTransform() {
    let scaleX = this.flipX ? -1 : 1;
    let scaleY = this.flipY ? -1 : 1;
    let posX = 0;
    let posY = 0;

    if (this.sprite && (this.sprite.renderMode === SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === SPRITE_RENDERMODE_TILED)) {
      let w = 1;
      let h = 1;

      if (this.sprite.atlas) {
        const frameData = this.sprite.atlas.frames[this.sprite.frameKeys[this.frame]];

        if (frameData) {
          w = frameData.rect.z;
          h = frameData.rect.w;
          posX = (0.5 - frameData.pivot.x) * this._width;
          posY = (0.5 - frameData.pivot.y) * this._height;
        }
      }

      const scaleMulX = w / this.sprite.pixelsPerUnit;
      const scaleMulY = h / this.sprite.pixelsPerUnit;

      this._outerScale.set(Math.max(this._width, this._innerOffset.x * scaleMulX), Math.max(this._height, this._innerOffset.y * scaleMulY));

      scaleX *= scaleMulX;
      scaleY *= scaleMulY;
      this._outerScale.x /= scaleMulX;
      this._outerScale.y /= scaleMulY;
      scaleX *= math$1.clamp(this._width / (this._innerOffset.x * scaleMulX), 0.0001, 1);
      scaleY *= math$1.clamp(this._height / (this._innerOffset.y * scaleMulY), 0.0001, 1);

      if (this._meshInstance) {
        this._outerScaleUniform[0] = this._outerScale.x;
        this._outerScaleUniform[1] = this._outerScale.y;

        this._meshInstance.setParameter(PARAM_OUTER_SCALE, this._outerScaleUniform);
      }
    }

    this._node.setLocalScale(scaleX, scaleY, 1);

    this._node.setLocalPosition(posX, posY, 0);
  }

  _updateAabb(aabb) {
    aabb.center.set(0, 0, 0);
    aabb.halfExtents.set(this._outerScale.x * 0.5, this._outerScale.y * 0.5, 0.001);
    aabb.setFromTransformedAabb(aabb, this._node.getWorldTransform());
    return aabb;
  }

  _tryAutoPlay() {
    if (!this._autoPlayClip) return;
    if (this.type !== SPRITETYPE_ANIMATED) return;
    const clip = this._clips[this._autoPlayClip];

    if (clip && !clip.isPlaying && (!this._currentClip || !this._currentClip.isPlaying)) {
      if (this.enabled && this.entity.enabled) {
        this.play(clip.name);
      }
    }
  }

  _onLayersChanged(oldComp, newComp) {
    oldComp.off('add', this.onLayerAdded, this);
    oldComp.off('remove', this.onLayerRemoved, this);
    newComp.on('add', this.onLayerAdded, this);
    newComp.on('remove', this.onLayerRemoved, this);

    if (this.enabled && this.entity.enabled) {
      this._showModel();
    }
  }

  _onLayerAdded(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;

    if (this._addedModel && this.enabled && this.entity.enabled && this._meshInstance) {
      layer.addMeshInstances([this._meshInstance]);
    }
  }

  _onLayerRemoved(layer) {
    if (!this._meshInstance) return;
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.removeMeshInstances([this._meshInstance]);
  }

  removeModelFromLayers() {
    for (let i = 0; i < this.layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) continue;
      layer.removeMeshInstances([this._meshInstance]);
    }
  }

  addClip(data) {
    const clip = new SpriteAnimationClip(this, {
      name: data.name,
      fps: data.fps,
      loop: data.loop,
      spriteAsset: data.spriteAsset
    });
    this._clips[data.name] = clip;
    if (clip.name && clip.name === this._autoPlayClip) this._tryAutoPlay();
    return clip;
  }

  removeClip(name) {
    delete this._clips[name];
  }

  clip(name) {
    return this._clips[name];
  }

  play(name) {
    const clip = this._clips[name];
    const current = this._currentClip;

    if (current && current !== clip) {
      current._playing = false;
    }

    this._currentClip = clip;

    if (this._currentClip) {
      this._currentClip = clip;

      this._currentClip.play();
    }

    return clip;
  }

  pause() {
    if (this._currentClip === this._defaultClip) return;

    if (this._currentClip.isPlaying) {
      this._currentClip.pause();
    }
  }

  resume() {
    if (this._currentClip === this._defaultClip) return;

    if (this._currentClip.isPaused) {
      this._currentClip.resume();
    }
  }

  stop() {
    if (this._currentClip === this._defaultClip) return;

    this._currentClip.stop();
  }

}

class SpriteComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$2 = ['enabled'];

class SpriteComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'sprite';
    this.ComponentType = SpriteComponent;
    this.DataType = SpriteComponentData;
    this.schema = _schema$2;
    this._defaultTexture = null;
    this._defaultMaterial = null;
    this._default9SlicedMaterialSlicedMode = null;
    this._default9SlicedMaterialTiledMode = null;
    this.app.systems.on('update', this.onUpdate, this);
    this.on('beforeremove', this.onBeforeRemove, this);
  }

  set defaultMaterial(material) {
    this._defaultMaterial = material;
  }

  get defaultMaterial() {
    if (!this._defaultMaterial) {
      const texture = new Texture(this.app.graphicsDevice, {
        width: 1,
        height: 1,
        format: PIXELFORMAT_R8_G8_B8_A8,
        name: 'sprite'
      });
      const pixels = new Uint8Array(texture.lock());
      pixels[0] = pixels[1] = pixels[2] = pixels[3] = 255;
      texture.unlock();
      const material = new StandardMaterial();
      material.diffuse.set(0, 0, 0);
      material.emissive.set(0.5, 0.5, 0.5);
      material.emissiveMap = texture;
      material.emissiveTint = true;
      material.opacityMap = texture;
      material.opacityMapChannel = 'a';
      material.opacityTint = true;
      material.opacity = 0;
      material.useLighting = false;
      material.useGammaTonemap = false;
      material.useFog = false;
      material.useSkybox = false;
      material.blendType = BLEND_PREMULTIPLIED;
      material.depthWrite = false;
      material.pixelSnap = false;
      material.cull = CULLFACE_NONE;
      material.update();
      this._defaultTexture = texture;
      this._defaultMaterial = material;
    }

    return this._defaultMaterial;
  }

  set default9SlicedMaterialSlicedMode(material) {
    this._default9SlicedMaterialSlicedMode = material;
  }

  get default9SlicedMaterialSlicedMode() {
    if (!this._default9SlicedMaterialSlicedMode) {
      const material = this.defaultMaterial.clone();
      material.nineSlicedMode = SPRITE_RENDERMODE_SLICED;
      material.update();
      this._default9SlicedMaterialSlicedMode = material;
    }

    return this._default9SlicedMaterialSlicedMode;
  }

  set default9SlicedMaterialTiledMode(material) {
    this._default9SlicedMaterialTiledMode = material;
  }

  get default9SlicedMaterialTiledMode() {
    if (!this._default9SlicedMaterialTiledMode) {
      const material = this.defaultMaterial.clone();
      material.nineSlicedMode = SPRITE_RENDERMODE_TILED;
      material.update();
      this._default9SlicedMaterialTiledMode = material;
    }

    return this._default9SlicedMaterialTiledMode;
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);

    if (this._defaultTexture) {
      this._defaultTexture.destroy();

      this._defaultTexture = null;
    }
  }

  initializeComponentData(component, data, properties) {
    if (data.enabled !== undefined) {
      component.enabled = data.enabled;
    }

    component.type = data.type;

    if (data.layers && Array.isArray(data.layers)) {
      component.layers = data.layers.slice(0);
    }

    if (data.drawOrder !== undefined) {
      component.drawOrder = data.drawOrder;
    }

    if (data.color !== undefined) {
      if (data.color instanceof Color) {
        component.color.set(data.color.r, data.color.g, data.color.b, data.opacity !== undefined ? data.opacity : 1);
      } else {
        component.color.set(data.color[0], data.color[1], data.color[2], data.opacity !== undefined ? data.opacity : 1);
      }

      component.color = component.color;
    }

    if (data.opacity !== undefined) {
      component.opacity = data.opacity;
    }

    if (data.flipX !== undefined) {
      component.flipX = data.flipX;
    }

    if (data.flipY !== undefined) {
      component.flipY = data.flipY;
    }

    if (data.width !== undefined) {
      component.width = data.width;
    }

    if (data.height !== undefined) {
      component.height = data.height;
    }

    if (data.spriteAsset !== undefined) {
      component.spriteAsset = data.spriteAsset;
    }

    if (data.sprite) {
      component.sprite = data.sprite;
    }

    if (data.frame !== undefined) {
      component.frame = data.frame;
    }

    if (data.clips) {
      for (const name in data.clips) {
        component.addClip(data.clips[name]);
      }
    }

    if (data.speed !== undefined) {
      component.speed = data.speed;
    }

    if (data.autoPlayClip) {
      component.autoPlayClip = data.autoPlayClip;
    }

    component.batchGroupId = data.batchGroupId === undefined || data.batchGroupId === null ? -1 : data.batchGroupId;
    super.initializeComponentData(component, data, properties);
  }

  cloneComponent(entity, clone) {
    const source = entity.sprite;
    return this.addComponent(clone, {
      enabled: source.enabled,
      type: source.type,
      spriteAsset: source.spriteAsset,
      sprite: source.sprite,
      frame: source.frame,
      color: source.color.clone(),
      opacity: source.opacity,
      flipX: source.flipX,
      flipY: source.flipY,
      speed: source.speed,
      clips: source.clips,
      autoPlayClip: source.autoPlayClip,
      batchGroupId: source.batchGroupId,
      drawOrder: source.drawOrder,
      layers: source.layers.slice(0)
    });
  }

  onUpdate(dt) {
    const components = this.store;

    for (const id in components) {
      if (components.hasOwnProperty(id)) {
        const component = components[id];

        if (component.data.enabled && component.entity.enabled) {
          const sprite = component.entity.sprite;

          if (sprite._currentClip) {
            sprite._currentClip._update(dt);
          }
        }
      }
    }
  }

  onBeforeRemove(entity, component) {
    component.onDestroy();
  }

}

Component._buildAccessors(SpriteComponent.prototype, _schema$2);

class ZoneComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._oldState = true;
    this._size = new Vec3();
    this.on('set_enabled', this._onSetEnabled, this);
  }

  set size(data) {
    if (data instanceof Vec3) {
      this._size.copy(data);
    } else if (data instanceof Array && data.length >= 3) {
      this.size.set(data[0], data[1], data[2]);
    }
  }

  get size() {
    return this._size;
  }

  onEnable() {
    this._checkState();
  }

  onDisable() {
    this._checkState();
  }

  _onSetEnabled(prop, old, value) {
    this._checkState();
  }

  _checkState() {
    const state = this.enabled && this.entity.enabled;
    if (state === this._oldState) return;
    this._oldState = state;
    this.fire('enable');
    this.fire('state', this.enabled);
  }

  _onBeforeRemove() {
    this.fire('remove');
  }

}

class ZoneComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema$1 = ['enabled'];

class ZoneComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'zone';
    this.ComponentType = ZoneComponent;
    this.DataType = ZoneComponentData;
    this.schema = _schema$1;
    this.on('beforeremove', this._onBeforeRemove, this);
  }

  initializeComponentData(component, data, properties) {
    component.enabled = data.hasOwnProperty('enabled') ? !!data.enabled : true;

    if (data.size) {
      if (data.size instanceof Vec3) {
        component.size.copy(data.size);
      } else if (data.size instanceof Array && data.size.length >= 3) {
        component.size.set(data.size[0], data.size[1], data.size[2]);
      }
    }
  }

  cloneComponent(entity, clone) {
    const data = {
      size: entity.zone.size
    };
    return this.addComponent(clone, data);
  }

  _onBeforeRemove(entity, component) {
    component._onBeforeRemove();
  }

}

Component._buildAccessors(ZoneComponent.prototype, _schema$1);

class PostEffect {
  constructor(effect, inputTarget) {
    this.effect = effect;
    this.inputTarget = inputTarget;
    this.outputTarget = null;
    this.name = effect.constructor.name;
  }

}

class PostEffectQueue {
  constructor(app, camera) {
    this.app = app;
    this.camera = camera;
    this.destinationRenderTarget = null;
    this.effects = [];
    this.enabled = false;
    this.depthTarget = null;
    camera.on('set:rect', this.onCameraRectChanged, this);
  }

  _allocateColorBuffer(format, name) {
    const rect = this.camera.rect;
    const width = Math.floor(rect.z * this.app.graphicsDevice.width);
    const height = Math.floor(rect.w * this.app.graphicsDevice.height);
    const colorBuffer = new Texture(this.app.graphicsDevice, {
      name: name,
      format: format,
      width: width,
      height: height,
      mipmaps: false,
      minFilter: FILTER_NEAREST,
      magFilter: FILTER_NEAREST,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE
    });
    return colorBuffer;
  }

  _createOffscreenTarget(useDepth, hdr) {
    const device = this.app.graphicsDevice;
    const format = hdr ? device.getHdrFormat() : PIXELFORMAT_R8_G8_B8_A8;
    const name = this.camera.entity.name + '-posteffect-' + this.effects.length;

    const colorBuffer = this._allocateColorBuffer(format, name);

    return new RenderTarget({
      colorBuffer: colorBuffer,
      depth: useDepth,
      stencil: useDepth && this.app.graphicsDevice.supportsStencil,
      samples: useDepth ? device.samples : 1
    });
  }

  _resizeOffscreenTarget(rt) {
    const format = rt.colorBuffer.format;
    const name = rt.colorBuffer.name;
    rt.destroyFrameBuffers();
    rt.destroyTextureBuffers();
    rt._colorBuffer = this._allocateColorBuffer(format, name);
  }

  _destroyOffscreenTarget(rt) {
    rt.destroyTextureBuffers();
    rt.destroy();
  }

  addEffect(effect) {
    const effects = this.effects;
    const isFirstEffect = effects.length === 0;

    const inputTarget = this._createOffscreenTarget(isFirstEffect, effect.hdr);

    const newEntry = new PostEffect(effect, inputTarget);
    effects.push(newEntry);
    this._sourceTarget = newEntry.inputTarget;

    if (effects.length > 1) {
      effects[effects.length - 2].outputTarget = newEntry.inputTarget;
    }

    this._newPostEffect = effect;

    if (effect.needsDepthBuffer) {
      this._requestDepthMap();
    }

    this.enable();
    this._newPostEffect = undefined;
  }

  removeEffect(effect) {
    let index = -1;

    for (let i = 0, len = this.effects.length; i < len; i++) {
      if (this.effects[i].effect === effect) {
        index = i;
        break;
      }
    }

    if (index >= 0) {
      if (index > 0) {
        this.effects[index - 1].outputTarget = index + 1 < this.effects.length ? this.effects[index + 1].inputTarget : null;
      } else {
        if (this.effects.length > 1) {
          if (!this.effects[1].inputTarget._depth) {
            this._destroyOffscreenTarget(this.effects[1].inputTarget);

            this.effects[1].inputTarget = this._createOffscreenTarget(true, this.effects[1].hdr);
            this._sourceTarget = this.effects[1].inputTarget;
          }

          this.camera.renderTarget = this.effects[1].inputTarget;
        }
      }

      this._destroyOffscreenTarget(this.effects[index].inputTarget);

      this.effects.splice(index, 1);
    }

    if (this.enabled) {
      if (effect.needsDepthBuffer) {
        this._releaseDepthMap();
      }
    }

    if (this.effects.length === 0) {
      this.disable();
    }
  }

  _requestDepthMaps() {
    for (let i = 0, len = this.effects.length; i < len; i++) {
      const effect = this.effects[i].effect;
      if (this._newPostEffect === effect) continue;

      if (effect.needsDepthBuffer) {
        this._requestDepthMap();
      }
    }
  }

  _releaseDepthMaps() {
    for (let i = 0, len = this.effects.length; i < len; i++) {
      const effect = this.effects[i].effect;

      if (effect.needsDepthBuffer) {
        this._releaseDepthMap();
      }
    }
  }

  _requestDepthMap() {
    const depthLayer = this.app.scene.layers.getLayerById(LAYERID_DEPTH);

    if (depthLayer) {
      depthLayer.incrementCounter();
      this.camera.requestSceneDepthMap(true);
    }
  }

  _releaseDepthMap() {
    const depthLayer = this.app.scene.layers.getLayerById(LAYERID_DEPTH);

    if (depthLayer) {
      depthLayer.decrementCounter();
      this.camera.requestSceneDepthMap(false);
    }
  }

  destroy() {
    for (let i = 0, len = this.effects.length; i < len; i++) {
      this.effects[i].inputTarget.destroy();
    }

    this.effects.length = 0;
    this.disable();
  }

  enable() {
    if (!this.enabled && this.effects.length) {
      this.enabled = true;

      this._requestDepthMaps();

      this.app.graphicsDevice.on('resizecanvas', this._onCanvasResized, this);
      this.destinationRenderTarget = this.camera.renderTarget;
      this.camera.renderTarget = this.effects[0].inputTarget;

      this.camera.onPostprocessing = () => {
        if (this.enabled) {
          let rect = null;
          const len = this.effects.length;

          if (len) {
            for (let i = 0; i < len; i++) {
              const fx = this.effects[i];
              let destTarget = fx.outputTarget;

              if (i === len - 1) {
                rect = this.camera.rect;

                if (this.destinationRenderTarget) {
                  destTarget = this.destinationRenderTarget;
                }
              }

              fx.effect.render(fx.inputTarget, destTarget, rect);
            }
          }
        }
      };
    }
  }

  disable() {
    if (this.enabled) {
      this.enabled = false;
      this.app.graphicsDevice.off('resizecanvas', this._onCanvasResized, this);

      this._releaseDepthMaps();

      this._destroyOffscreenTarget(this._sourceTarget);

      this.camera.renderTarget = null;
      this.camera.onPostprocessing = null;
    }
  }

  _onCanvasResized(width, height) {
    const rect = this.camera.rect;
    const device = this.app.graphicsDevice;
    this.camera.camera.aspectRatio = device.width * rect.z / (device.height * rect.w);
    this.resizeRenderTargets();
  }

  resizeRenderTargets() {
    const rect = this.camera.rect;
    const desiredWidth = Math.floor(rect.z * this.app.graphicsDevice.width);
    const desiredHeight = Math.floor(rect.w * this.app.graphicsDevice.height);
    const effects = this.effects;

    for (let i = 0, len = effects.length; i < len; i++) {
      const fx = effects[i];

      if (fx.inputTarget.width !== desiredWidth || fx.inputTarget.height !== desiredHeight) {
        this._resizeOffscreenTarget(fx.inputTarget);
      }
    }
  }

  onCameraRectChanged(name, oldValue, newValue) {
    if (this.enabled) {
      this.resizeRenderTargets();
    }
  }

}

const properties = [{
  name: 'aspectRatio',
  readonly: false
}, {
  name: 'aspectRatioMode',
  readonly: false
}, {
  name: 'calculateProjection',
  readonly: false
}, {
  name: 'calculateTransform',
  readonly: false
}, {
  name: 'clearColor',
  readonly: false
}, {
  name: 'cullFaces',
  readonly: false
}, {
  name: 'farClip',
  readonly: false
}, {
  name: 'flipFaces',
  readonly: false
}, {
  name: 'fov',
  readonly: false
}, {
  name: 'frustumCulling',
  readonly: false
}, {
  name: 'horizontalFov',
  readonly: false
}, {
  name: 'nearClip',
  readonly: false
}, {
  name: 'orthoHeight',
  readonly: false
}, {
  name: 'projection',
  readonly: false
}, {
  name: 'scissorRect',
  readonly: false
}, {
  name: 'aperture',
  readonly: false
}, {
  name: 'shutter',
  readonly: false
}, {
  name: 'sensitivity',
  readonly: false
}];

class CameraComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this.onPostprocessing = null;
    this.onPreRender = null;
    this.onPostRender = null;
    this._renderSceneDepthMap = 0;
    this._renderSceneColorMap = 0;
    this._camera = new Camera();
    this._camera.node = entity;
    this._priority = 0;
    this._disablePostEffectsLayer = LAYERID_UI;
    this._postEffects = new PostEffectQueue(system.app, this);
  }

  get camera() {
    return this._camera;
  }

  set clearColorBuffer(value) {
    this._camera.clearColorBuffer = value;
    this.dirtyLayerCompositionCameras();
  }

  get clearColorBuffer() {
    return this._camera.clearColorBuffer;
  }

  set clearDepthBuffer(value) {
    this._camera.clearDepthBuffer = value;
    this.dirtyLayerCompositionCameras();
  }

  get clearDepthBuffer() {
    return this._camera.clearDepthBuffer;
  }

  set clearStencilBuffer(value) {
    this._camera.clearStencilBuffer = value;
    this.dirtyLayerCompositionCameras();
  }

  get clearStencilBuffer() {
    return this._camera.clearStencilBuffer;
  }

  set disablePostEffectsLayer(layer) {
    this._disablePostEffectsLayer = layer;
    this.dirtyLayerCompositionCameras();
  }

  get disablePostEffectsLayer() {
    return this._disablePostEffectsLayer;
  }

  _enableDepthLayer(value) {
    const hasDepthLayer = this.layers.find(layerId => layerId === LAYERID_DEPTH);

    if (hasDepthLayer) {
      const depthLayer = this.system.app.scene.layers.getLayerById(LAYERID_DEPTH);

      if (value) {
        depthLayer == null ? void 0 : depthLayer.incrementCounter();
      } else {
        depthLayer == null ? void 0 : depthLayer.decrementCounter();
      }
    } else if (value) {
      return false;
    }

    return true;
  }

  requestSceneColorMap(enabled) {
    this._renderSceneColorMap += enabled ? 1 : -1;

    this._enableDepthLayer(enabled);
  }

  get renderSceneColorMap() {
    return this._renderSceneColorMap > 0;
  }

  requestSceneDepthMap(enabled) {
    this._renderSceneDepthMap += enabled ? 1 : -1;

    this._enableDepthLayer(enabled);
  }

  get renderSceneDepthMap() {
    return this._renderSceneDepthMap > 0;
  }

  get frustum() {
    return this._camera.frustum;
  }

  set layers(newValue) {
    const layers = this._camera.layers;

    for (let i = 0; i < layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(layers[i]);
      if (!layer) continue;
      layer.removeCamera(this);
    }

    this._camera.layers = newValue;
    if (!this.enabled || !this.entity.enabled) return;

    for (let i = 0; i < newValue.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(newValue[i]);
      if (!layer) continue;
      layer.addCamera(this);
    }
  }

  get layers() {
    return this._camera.layers;
  }

  get layersSet() {
    return this._camera.layersSet;
  }

  get postEffectsEnabled() {
    return this._postEffects.enabled;
  }

  get postEffects() {
    return this._postEffects;
  }

  set priority(newValue) {
    this._priority = newValue;
    this.dirtyLayerCompositionCameras();
  }

  get priority() {
    return this._priority;
  }

  get projectionMatrix() {
    return this._camera.projectionMatrix;
  }

  set aperture(newValue) {
    this._camera.aperture = newValue;
  }

  get aperture() {
    return this._camera.aperture;
  }

  set sensitivity(newValue) {
    this._camera.sensitivity = newValue;
  }

  get sensitivity() {
    return this._camera.sensitivity;
  }

  set shutter(newValue) {
    this._camera.shutter = newValue;
  }

  get shutter() {
    return this._camera.shutter;
  }

  set rect(value) {
    this._camera.rect = value;
    this.fire('set:rect', this._camera.rect);
  }

  get rect() {
    return this._camera.rect;
  }

  set renderTarget(value) {
    this._camera.renderTarget = value;
    this.dirtyLayerCompositionCameras();
  }

  get renderTarget() {
    return this._camera.renderTarget;
  }

  get viewMatrix() {
    return this._camera.viewMatrix;
  }

  dirtyLayerCompositionCameras() {
    const layerComp = this.system.app.scene.layers;
    layerComp._dirtyCameras = true;
  }

  screenToWorld(screenx, screeny, cameraz, worldCoord) {
    const device = this.system.app.graphicsDevice;
    const w = device.clientRect.width;
    const h = device.clientRect.height;
    return this._camera.screenToWorld(screenx, screeny, cameraz, w, h, worldCoord);
  }

  worldToScreen(worldCoord, screenCoord) {
    const device = this.system.app.graphicsDevice;
    const w = device.clientRect.width;
    const h = device.clientRect.height;
    return this._camera.worldToScreen(worldCoord, w, h, screenCoord);
  }

  onAppPrerender() {
    this._camera._viewMatDirty = true;
    this._camera._viewProjMatDirty = true;
  }

  addCameraToLayers() {
    const layers = this.layers;

    for (let i = 0; i < layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(layers[i]);

      if (layer) {
        layer.addCamera(this);
      }
    }
  }

  removeCameraFromLayers() {
    const layers = this.layers;

    for (let i = 0; i < layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(layers[i]);

      if (layer) {
        layer.removeCamera(this);
      }
    }
  }

  onLayersChanged(oldComp, newComp) {
    this.addCameraToLayers();
    oldComp.off('add', this.onLayerAdded, this);
    oldComp.off('remove', this.onLayerRemoved, this);
    newComp.on('add', this.onLayerAdded, this);
    newComp.on('remove', this.onLayerRemoved, this);
  }

  onLayerAdded(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.addCamera(this);
  }

  onLayerRemoved(layer) {
    const index = this.layers.indexOf(layer.id);
    if (index < 0) return;
    layer.removeCamera(this);
  }

  onEnable() {
    const system = this.system;
    const scene = system.app.scene;
    const layers = scene.layers;
    system.addCamera(this);
    scene.on('set:layers', this.onLayersChanged, this);

    if (layers) {
      layers.on('add', this.onLayerAdded, this);
      layers.on('remove', this.onLayerRemoved, this);
    }

    if (this.enabled && this.entity.enabled) {
      this.addCameraToLayers();
    }

    this.postEffects.enable();
  }

  onDisable() {
    const system = this.system;
    const scene = system.app.scene;
    const layers = scene.layers;
    this.postEffects.disable();
    this.removeCameraFromLayers();
    scene.off('set:layers', this.onLayersChanged, this);

    if (layers) {
      layers.off('add', this.onLayerAdded, this);
      layers.off('remove', this.onLayerRemoved, this);
    }

    system.removeCamera(this);
  }

  onRemove() {
    this.onDisable();
    this.off();
  }

  calculateAspectRatio(rt) {
    const device = this.system.app.graphicsDevice;
    const width = rt ? rt.width : device.width;
    const height = rt ? rt.height : device.height;
    return width * this.rect.z / (height * this.rect.w);
  }

  frameUpdate(rt) {
    if (this.aspectRatioMode === ASPECT_AUTO) {
      this.aspectRatio = this.calculateAspectRatio(rt);
    }
  }

  startXr(type, spaceType, options) {
    this.system.app.xr.start(this, type, spaceType, options);
  }

  endXr(callback) {
    if (!this._camera.xr) {
      if (callback) callback(new Error('Camera is not in XR'));
      return;
    }

    this._camera.xr.end(callback);
  }

  copy(source) {
    properties.forEach(property => {
      if (!property.readonly) {
        const name = property.name;
        this[name] = source[name];
      }
    });
    this.clearColorBuffer = source.clearColorBuffer;
    this.clearDepthBuffer = source.clearDepthBuffer;
    this.clearStencilBuffer = source.clearStencilBuffer;
    this.disablePostEffectsLayer = source.disablePostEffectsLayer;
    this.layers = source.layers;
    this.priority = source.priority;
    this.renderTarget = source.renderTarget;
    this.rect = source.rect;
    this.aperture = source.aperture;
    this.sensitivity = source.sensitivity;
    this.shutter = source.shutter;
  }

}

properties.forEach(function (property) {
  const name = property.name;
  const options = {};

  options.get = function () {
    return this._camera[name];
  };

  if (!property.readonly) {
    options.set = function (newValue) {
      this._camera[name] = newValue;
    };
  }

  Object.defineProperty(CameraComponent.prototype, name, options);
});

class CameraComponentData {
  constructor() {
    this.enabled = true;
  }

}

const _schema = ['enabled'];

class CameraComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.cameras = [];
    this.id = 'camera';
    this.ComponentType = CameraComponent;
    this.DataType = CameraComponentData;
    this.schema = _schema;
    this.on('beforeremove', this.onBeforeRemove, this);
    this.app.on('prerender', this.onAppPrerender, this);
    this.app.systems.on('update', this.onUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    properties = ['aspectRatio', 'aspectRatioMode', 'calculateProjection', 'calculateTransform', 'clearColor', 'clearColorBuffer', 'clearDepthBuffer', 'clearStencilBuffer', 'cullFaces', 'farClip', 'flipFaces', 'fov', 'frustumCulling', 'horizontalFov', 'layers', 'renderTarget', 'nearClip', 'orthoHeight', 'projection', 'priority', 'rect', 'scissorRect', 'aperture', 'shutter', 'sensitivity'];

    for (let i = 0; i < properties.length; i++) {
      const property = properties[i];

      if (data.hasOwnProperty(property)) {
        const value = data[property];

        switch (property) {
          case 'rect':
          case 'scissorRect':
            if (Array.isArray(value)) {
              component[property] = new Vec4(value[0], value[1], value[2], value[3]);
            } else {
              component[property] = value;
            }

            break;

          case 'clearColor':
            if (Array.isArray(value)) {
              component[property] = new Color(value[0], value[1], value[2], value[3]);
            } else {
              component[property] = value;
            }

            break;

          default:
            component[property] = value;
            break;
        }
      }
    }

    super.initializeComponentData(component, data, ['enabled']);
  }

  cloneComponent(entity, clone) {
    const c = entity.camera;
    return this.addComponent(clone, {
      aspectRatio: c.aspectRatio,
      aspectRatioMode: c.aspectRatioMode,
      calculateProjection: c.calculateProjection,
      calculateTransform: c.calculateTransform,
      clearColor: c.clearColor,
      clearColorBuffer: c.clearColorBuffer,
      clearDepthBuffer: c.clearDepthBuffer,
      clearStencilBuffer: c.clearStencilBuffer,
      cullFaces: c.cullFaces,
      enabled: c.enabled,
      farClip: c.farClip,
      flipFaces: c.flipFaces,
      fov: c.fov,
      frustumCulling: c.frustumCulling,
      horizontalFov: c.horizontalFov,
      layers: c.layers,
      renderTarget: c.renderTarget,
      nearClip: c.nearClip,
      orthoHeight: c.orthoHeight,
      projection: c.projection,
      priority: c.priority,
      rect: c.rect,
      scissorRect: c.scissorRect,
      aperture: c.aperture,
      sensitivity: c.sensitivity,
      shutter: c.shutter
    });
  }

  onBeforeRemove(entity, component) {
    this.removeCamera(component);
  }

  onUpdate(dt) {}

  onAppPrerender() {
    for (let i = 0, len = this.cameras.length; i < len; i++) {
      this.cameras[i].onAppPrerender();
    }
  }

  addCamera(camera) {
    this.cameras.push(camera);
    sortPriority(this.cameras);
  }

  removeCamera(camera) {
    const index = this.cameras.indexOf(camera);

    if (index >= 0) {
      this.cameras.splice(index, 1);
      sortPriority(this.cameras);
    }
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(CameraComponent.prototype, _schema);

const _lightProps = [];
const _lightPropsDefault = [];

class LightComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this._cookieAsset = null;
    this._cookieAssetId = null;
    this._cookieAssetAdd = false;
    this._cookieMatrix = null;
  }

  addLightToLayers() {
    for (let i = 0; i < this.layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this.layers[i]);

      if (layer) {
        layer.addLight(this);
      }
    }
  }

  removeLightFromLayers() {
    for (let i = 0; i < this.layers.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(this.layers[i]);

      if (layer) {
        layer.removeLight(this);
      }
    }
  }

  onLayersChanged(oldComp, newComp) {
    if (this.enabled && this.entity.enabled) {
      this.addLightToLayers();
    }

    oldComp.off('add', this.onLayerAdded, this);
    oldComp.off('remove', this.onLayerRemoved, this);
    newComp.on('add', this.onLayerAdded, this);
    newComp.on('remove', this.onLayerRemoved, this);
  }

  onLayerAdded(layer) {
    const index = this.layers.indexOf(layer.id);

    if (index >= 0 && this.enabled && this.entity.enabled) {
      layer.addLight(this);
    }
  }

  onLayerRemoved(layer) {
    const index = this.layers.indexOf(layer.id);

    if (index >= 0) {
      layer.removeLight(this);
    }
  }

  refreshProperties() {
    for (let i = 0; i < _lightProps.length; i++) {
      const name = _lightProps[i];
      this[name] = this[name];
    }

    if (this.enabled && this.entity.enabled) this.onEnable();
  }

  updateShadow() {
    this.light.updateShadow();
  }

  onCookieAssetSet() {
    let forceLoad = false;

    if (this._cookieAsset.type === 'cubemap' && !this._cookieAsset.loadFaces) {
      this._cookieAsset.loadFaces = true;
      forceLoad = true;
    }

    if (!this._cookieAsset.resource || forceLoad) this.system.app.assets.load(this._cookieAsset);
    if (this._cookieAsset.resource) this.onCookieAssetLoad();
  }

  onCookieAssetAdd(asset) {
    if (this._cookieAssetId !== asset.id) return;
    this._cookieAsset = asset;
    if (this.light.enabled) this.onCookieAssetSet();

    this._cookieAsset.on('load', this.onCookieAssetLoad, this);

    this._cookieAsset.on('remove', this.onCookieAssetRemove, this);
  }

  onCookieAssetLoad() {
    if (!this._cookieAsset || !this._cookieAsset.resource) return;
    this.cookie = this._cookieAsset.resource;
  }

  onCookieAssetRemove() {
    if (!this._cookieAssetId) return;

    if (this._cookieAssetAdd) {
      this.system.app.assets.off('add:' + this._cookieAssetId, this.onCookieAssetAdd, this);
      this._cookieAssetAdd = false;
    }

    if (this._cookieAsset) {
      this._cookieAsset.off('load', this.onCookieAssetLoad, this);

      this._cookieAsset.off('remove', this.onCookieAssetRemove, this);

      this._cookieAsset = null;
    }

    this.cookie = null;
  }

  onEnable() {
    this.light.enabled = true;
    this.system.app.scene.on('set:layers', this.onLayersChanged, this);

    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on('add', this.onLayerAdded, this);
      this.system.app.scene.layers.on('remove', this.onLayerRemoved, this);
    }

    if (this.enabled && this.entity.enabled) {
      this.addLightToLayers();
    }

    if (this._cookieAsset && !this.cookie) this.onCookieAssetSet();
  }

  onDisable() {
    this.light.enabled = false;
    this.system.app.scene.off('set:layers', this.onLayersChanged, this);

    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off('add', this.onLayerAdded, this);
      this.system.app.scene.layers.off('remove', this.onLayerRemoved, this);
    }

    this.removeLightFromLayers();
  }

  onRemove() {
    this.onDisable();
    this.light.destroy();
    this.cookieAsset = null;
  }

}

function _defineProperty(name, defaultValue, setFunc, skipEqualsCheck) {
  const c = LightComponent.prototype;

  _lightProps.push(name);

  _lightPropsDefault.push(defaultValue);

  Object.defineProperty(c, name, {
    get: function () {
      return this.data[name];
    },
    set: function (value) {
      const data = this.data;
      const oldValue = data[name];
      if (!skipEqualsCheck && oldValue === value) return;
      data[name] = value;
      if (setFunc) setFunc.call(this, value, oldValue);
    },
    configurable: true
  });
}

function _defineProps() {
  _defineProperty('enabled', true, function (newValue, oldValue) {
    this.onSetEnabled(null, oldValue, newValue);
  });

  _defineProperty('light', null);

  _defineProperty('type', 'directional', function (newValue, oldValue) {
    this.system.changeType(this, oldValue, newValue);
    this.refreshProperties();
  });

  _defineProperty('color', new Color(1, 1, 1), function (newValue, oldValue) {
    this.light.setColor(newValue);
  }, true);

  _defineProperty('intensity', 1, function (newValue, oldValue) {
    this.light.intensity = newValue;
  });

  _defineProperty('luminance', 0, function (newValue, oldValue) {
    this.light.luminance = newValue;
  });

  _defineProperty('shape', LIGHTSHAPE_PUNCTUAL, function (newValue, oldValue) {
    this.light.shape = newValue;
  });

  _defineProperty('castShadows', false, function (newValue, oldValue) {
    this.light.castShadows = newValue;
  });

  _defineProperty('shadowDistance', 40, function (newValue, oldValue) {
    this.light.shadowDistance = newValue;
  });

  _defineProperty('shadowIntensity', 1, function (newValue, oldValue) {
    this.light.shadowIntensity = newValue;
  });

  _defineProperty('shadowResolution', 1024, function (newValue, oldValue) {
    this.light.shadowResolution = newValue;
  });

  _defineProperty('shadowBias', 0.05, function (newValue, oldValue) {
    this.light.shadowBias = -0.01 * math$1.clamp(newValue, 0, 1);
  });

  _defineProperty('numCascades', 1, function (newValue, oldValue) {
    this.light.numCascades = math$1.clamp(Math.floor(newValue), 1, 4);
  });

  _defineProperty('bakeNumSamples', 1, function (newValue, oldValue) {
    this.light.bakeNumSamples = math$1.clamp(Math.floor(newValue), 1, 255);
  });

  _defineProperty('bakeArea', 0, function (newValue, oldValue) {
    this.light.bakeArea = math$1.clamp(newValue, 0, 180);
  });

  _defineProperty('cascadeDistribution', 0.5, function (newValue, oldValue) {
    this.light.cascadeDistribution = math$1.clamp(newValue, 0, 1);
  });

  _defineProperty('normalOffsetBias', 0, function (newValue, oldValue) {
    this.light.normalOffsetBias = math$1.clamp(newValue, 0, 1);
  });

  _defineProperty('range', 10, function (newValue, oldValue) {
    this.light.attenuationEnd = newValue;
  });

  _defineProperty('innerConeAngle', 40, function (newValue, oldValue) {
    this.light.innerConeAngle = newValue;
  });

  _defineProperty('outerConeAngle', 45, function (newValue, oldValue) {
    this.light.outerConeAngle = newValue;
  });

  _defineProperty('falloffMode', LIGHTFALLOFF_LINEAR, function (newValue, oldValue) {
    this.light.falloffMode = newValue;
  });

  _defineProperty('shadowType', SHADOW_PCF3, function (newValue, oldValue) {
    this.light.shadowType = newValue;
  });

  _defineProperty('vsmBlurSize', 11, function (newValue, oldValue) {
    this.light.vsmBlurSize = newValue;
  });

  _defineProperty('vsmBlurMode', BLUR_GAUSSIAN, function (newValue, oldValue) {
    this.light.vsmBlurMode = newValue;
  });

  _defineProperty('vsmBias', 0.01 * 0.25, function (newValue, oldValue) {
    this.light.vsmBias = math$1.clamp(newValue, 0, 1);
  });

  _defineProperty('cookieAsset', null, function (newValue, oldValue) {
    if (this._cookieAssetId && (newValue instanceof Asset && newValue.id === this._cookieAssetId || newValue === this._cookieAssetId)) return;
    this.onCookieAssetRemove();
    this._cookieAssetId = null;

    if (newValue instanceof Asset) {
      this.data.cookieAsset = newValue.id;
      this._cookieAssetId = newValue.id;
      this.onCookieAssetAdd(newValue);
    } else if (typeof newValue === 'number') {
      this._cookieAssetId = newValue;
      const asset = this.system.app.assets.get(newValue);

      if (asset) {
        this.onCookieAssetAdd(asset);
      } else {
        this._cookieAssetAdd = true;
        this.system.app.assets.on('add:' + this._cookieAssetId, this.onCookieAssetAdd, this);
      }
    }
  });

  _defineProperty('cookie', null, function (newValue, oldValue) {
    this.light.cookie = newValue;
  });

  _defineProperty('cookieIntensity', 1, function (newValue, oldValue) {
    this.light.cookieIntensity = math$1.clamp(newValue, 0, 1);
  });

  _defineProperty('cookieFalloff', true, function (newValue, oldValue) {
    this.light.cookieFalloff = newValue;
  });

  _defineProperty('cookieChannel', 'rgb', function (newValue, oldValue) {
    this.light.cookieChannel = newValue;
  });

  _defineProperty('cookieAngle', 0, function (newValue, oldValue) {
    if (newValue !== 0 || this.cookieScale !== null) {
      if (!this._cookieMatrix) this._cookieMatrix = new Vec4();
      let scx = 1;
      let scy = 1;

      if (this.cookieScale) {
        scx = this.cookieScale.x;
        scy = this.cookieScale.y;
      }

      const c = Math.cos(newValue * math$1.DEG_TO_RAD);
      const s = Math.sin(newValue * math$1.DEG_TO_RAD);

      this._cookieMatrix.set(c / scx, -s / scx, s / scy, c / scy);

      this.light.cookieTransform = this._cookieMatrix;
    } else {
      this.light.cookieTransform = null;
    }
  });

  _defineProperty('cookieScale', null, function (newValue, oldValue) {
    if (newValue !== null || this.cookieAngle !== 0) {
      if (!this._cookieMatrix) this._cookieMatrix = new Vec4();
      const scx = newValue.x;
      const scy = newValue.y;
      const c = Math.cos(this.cookieAngle * math$1.DEG_TO_RAD);
      const s = Math.sin(this.cookieAngle * math$1.DEG_TO_RAD);

      this._cookieMatrix.set(c / scx, -s / scx, s / scy, c / scy);

      this.light.cookieTransform = this._cookieMatrix;
    } else {
      this.light.cookieTransform = null;
    }
  }, true);

  _defineProperty('cookieOffset', null, function (newValue, oldValue) {
    this.light.cookieOffset = newValue;
  }, true);

  _defineProperty('shadowUpdateMode', SHADOWUPDATE_REALTIME, function (newValue, oldValue) {
    this.light.shadowUpdateMode = newValue;
  }, true);

  _defineProperty('mask', 1, function (newValue, oldValue) {
    this.light.mask = newValue;
  });

  _defineProperty('affectDynamic', true, function (newValue, oldValue) {
    if (newValue) {
      this.light.mask |= MASK_AFFECT_DYNAMIC;
    } else {
      this.light.mask &= ~MASK_AFFECT_DYNAMIC;
    }

    this.light.layersDirty();
  });

  _defineProperty('affectLightmapped', false, function (newValue, oldValue) {
    if (newValue) {
      this.light.mask |= MASK_AFFECT_LIGHTMAPPED;
      if (this.bake) this.light.mask &= ~MASK_BAKE;
    } else {
      this.light.mask &= ~MASK_AFFECT_LIGHTMAPPED;
      if (this.bake) this.light.mask |= MASK_BAKE;
    }
  });

  _defineProperty('bake', false, function (newValue, oldValue) {
    if (newValue) {
      this.light.mask |= MASK_BAKE;
      if (this.affectLightmapped) this.light.mask &= ~MASK_AFFECT_LIGHTMAPPED;
    } else {
      this.light.mask &= ~MASK_BAKE;
      if (this.affectLightmapped) this.light.mask |= MASK_AFFECT_LIGHTMAPPED;
    }

    this.light.layersDirty();
  });

  _defineProperty('bakeDir', true, function (newValue, oldValue) {
    this.light.bakeDir = newValue;
  });

  _defineProperty('isStatic', false, function (newValue, oldValue) {
    this.light.isStatic = newValue;
  });

  _defineProperty('layers', [LAYERID_WORLD], function (newValue, oldValue) {
    for (let i = 0; i < oldValue.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(oldValue[i]);
      if (!layer) continue;
      layer.removeLight(this);
    }

    for (let i = 0; i < newValue.length; i++) {
      const layer = this.system.app.scene.layers.getLayerById(newValue[i]);
      if (!layer) continue;

      if (this.enabled && this.entity.enabled) {
        layer.addLight(this);
      }
    }
  });
}

_defineProps();

class LightComponentData {
  constructor() {
    const _props = _lightProps;
    const _propsDefault = _lightPropsDefault;

    for (let i = 0; i < _props.length; i++) {
      const value = _propsDefault[i];

      if (value && value.clone) {
        this[_props[i]] = value.clone();
      } else {
        this[_props[i]] = value;
      }
    }
  }

}

class LightComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'light';
    this.ComponentType = LightComponent;
    this.DataType = LightComponentData;
    this.on('beforeremove', this._onRemoveComponent, this);
  }

  initializeComponentData(component, _data) {
    const properties = _lightProps;
    const data = {};

    for (let i = 0, len = properties.length; i < len; i++) {
      const property = properties[i];
      data[property] = _data[property];
    }

    if (!data.type) data.type = component.data.type;
    component.data.type = data.type;

    if (data.layers && Array.isArray(data.layers)) {
      data.layers = data.layers.slice(0);
    }

    if (data.color && Array.isArray(data.color)) data.color = new Color(data.color[0], data.color[1], data.color[2]);
    if (data.cookieOffset && data.cookieOffset instanceof Array) data.cookieOffset = new Vec2(data.cookieOffset[0], data.cookieOffset[1]);
    if (data.cookieScale && data.cookieScale instanceof Array) data.cookieScale = new Vec2(data.cookieScale[0], data.cookieScale[1]);

    if (data.enable) {
      console.warn('WARNING: enable: Property is deprecated. Set enabled property instead.');
      data.enabled = data.enable;
    }

    if (!data.shape) {
      data.shape = LIGHTSHAPE_PUNCTUAL;
    }

    const light = new Light(this.app.graphicsDevice);
    light.type = lightTypes[data.type];
    light._node = component.entity;
    light._scene = this.app.scene;
    component.data.light = light;
    super.initializeComponentData(component, data, properties);
  }

  _onRemoveComponent(entity, component) {
    component.onRemove();
  }

  cloneComponent(entity, clone) {
    const light = entity.light;
    const data = [];
    let name;
    const _props = _lightProps;

    for (let i = 0; i < _props.length; i++) {
      name = _props[i];
      if (name === 'light') continue;

      if (light[name] && light[name].clone) {
        data[name] = light[name].clone();
      } else {
        data[name] = light[name];
      }
    }

    return this.addComponent(clone, data);
  }

  changeType(component, oldValue, newValue) {
    if (oldValue !== newValue) {
      component.light.type = lightTypes[newValue];
    }
  }

}

class ScriptComponentData {
  constructor() {
    this.enabled = true;
  }

}

const METHOD_INITIALIZE_ATTRIBUTES = '_onInitializeAttributes';
const METHOD_INITIALIZE = '_onInitialize';
const METHOD_POST_INITIALIZE = '_onPostInitialize';
const METHOD_UPDATE = '_onUpdate';
const METHOD_POST_UPDATE = '_onPostUpdate';
let executionOrderCounter = 0;

class ScriptComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'script';
    this.ComponentType = ScriptComponent;
    this.DataType = ScriptComponentData;
    this._components = new SortedLoopArray({
      sortBy: '_executionOrder'
    });
    this._enabledComponents = new SortedLoopArray({
      sortBy: '_executionOrder'
    });
    this.preloading = true;
    this.on('beforeremove', this._onBeforeRemove, this);
    this.app.systems.on('initialize', this._onInitialize, this);
    this.app.systems.on('postInitialize', this._onPostInitialize, this);
    this.app.systems.on('update', this._onUpdate, this);
    this.app.systems.on('postUpdate', this._onPostUpdate, this);
  }

  initializeComponentData(component, data) {
    component._executionOrder = executionOrderCounter++;

    this._components.append(component);

    if (executionOrderCounter > Number.MAX_SAFE_INTEGER) {
      this._resetExecutionOrder();
    }

    component.enabled = data.hasOwnProperty('enabled') ? !!data.enabled : true;

    if (component.enabled && component.entity.enabled) {
      this._enabledComponents.append(component);
    }

    if (data.hasOwnProperty('order') && data.hasOwnProperty('scripts')) {
      component._scriptsData = data.scripts;

      for (let i = 0; i < data.order.length; i++) {
        component.create(data.order[i], {
          enabled: data.scripts[data.order[i]].enabled,
          attributes: data.scripts[data.order[i]].attributes,
          preloading: this.preloading
        });
      }
    }
  }

  cloneComponent(entity, clone) {
    const order = [];
    const scripts = {};

    for (let i = 0; i < entity.script._scripts.length; i++) {
      const scriptInstance = entity.script._scripts[i];
      const scriptName = scriptInstance.__scriptType.__name;
      order.push(scriptName);
      const attributes = {};

      for (const key in scriptInstance.__attributes) attributes[key] = scriptInstance.__attributes[key];

      scripts[scriptName] = {
        enabled: scriptInstance._enabled,
        attributes: attributes
      };
    }

    for (const key in entity.script._scriptsIndex) {
      if (key.awaiting) {
        order.splice(key.ind, 0, key);
      }
    }

    const data = {
      enabled: entity.script.enabled,
      order: order,
      scripts: scripts
    };
    return this.addComponent(clone, data);
  }

  _resetExecutionOrder() {
    executionOrderCounter = 0;

    for (let i = 0, len = this._components.length; i < len; i++) {
      this._components.items[i]._executionOrder = executionOrderCounter++;
    }
  }

  _callComponentMethod(components, name, dt) {
    for (components.loopIndex = 0; components.loopIndex < components.length; components.loopIndex++) {
      components.items[components.loopIndex][name](dt);
    }
  }

  _onInitialize() {
    this.preloading = false;

    this._callComponentMethod(this._components, METHOD_INITIALIZE_ATTRIBUTES);

    this._callComponentMethod(this._enabledComponents, METHOD_INITIALIZE);
  }

  _onPostInitialize() {
    this._callComponentMethod(this._enabledComponents, METHOD_POST_INITIALIZE);
  }

  _onUpdate(dt) {
    this._callComponentMethod(this._enabledComponents, METHOD_UPDATE, dt);
  }

  _onPostUpdate(dt) {
    this._callComponentMethod(this._enabledComponents, METHOD_POST_UPDATE, dt);
  }

  _addComponentToEnabled(component) {
    this._enabledComponents.insert(component);
  }

  _removeComponentFromEnabled(component) {
    this._enabledComponents.remove(component);
  }

  _onBeforeRemove(entity, component) {
    const ind = this._components.items.indexOf(component);

    if (ind >= 0) {
      component._onBeforeRemove();
    }

    this._removeComponentFromEnabled(component);

    this._components.remove(component);
  }

  destroy() {
    super.destroy();
    this.app.systems.off('initialize', this._onInitialize, this);
    this.app.systems.off('postInitialize', this._onPostInitialize, this);
    this.app.systems.off('update', this._onUpdate, this);
    this.app.systems.off('postUpdate', this._onPostUpdate, this);
  }

}

const XRTYPE_INLINE = 'inline';
const XRTYPE_VR = 'immersive-vr';
const XRTYPE_AR = 'immersive-ar';
const XRSPACE_VIEWER = 'viewer';
const XRSPACE_LOCAL = 'local';
const XRSPACE_LOCALFLOOR = 'local-floor';
const XRSPACE_BOUNDEDFLOOR = 'bounded-floor';
const XRSPACE_UNBOUNDED = 'unbounded';
const XRTARGETRAY_GAZE = 'gaze';
const XRTARGETRAY_SCREEN = 'screen';
const XRTARGETRAY_POINTER = 'tracked-pointer';
const XRHAND_NONE = 'none';
const XRHAND_LEFT = 'left';
const XRHAND_RIGHT = 'right';
const XRTRACKABLE_POINT = 'point';
const XRTRACKABLE_PLANE = 'plane';
const XRTRACKABLE_MESH = 'mesh';
const XRDEPTHSENSINGUSAGE_CPU = 'cpu-optimized';
const XRDEPTHSENSINGUSAGE_GPU = 'gpu-optimized';
const XRDEPTHSENSINGFORMAT_L8A8 = 'luminance-alpha';
const XRDEPTHSENSINGFORMAT_F32 = 'float32';

const poolVec3 = [];
const poolQuat = [];

class XrHitTestSource extends EventHandler {
  constructor(manager, xrHitTestSource, transient) {
    super();
    this.manager = void 0;
    this._xrHitTestSource = void 0;
    this._transient = void 0;
    this.manager = manager;
    this._xrHitTestSource = xrHitTestSource;
    this._transient = transient;
  }

  remove() {
    if (!this._xrHitTestSource) return;
    const sources = this.manager.hitTest.sources;
    const ind = sources.indexOf(this);
    if (ind !== -1) sources.splice(ind, 1);
    this.onStop();
  }

  onStop() {
    this._xrHitTestSource.cancel();

    this._xrHitTestSource = null;
    this.fire('remove');
    this.manager.hitTest.fire('remove', this);
  }

  update(frame) {
    if (this._transient) {
      const transientResults = frame.getHitTestResultsForTransientInput(this._xrHitTestSource);

      for (let i = 0; i < transientResults.length; i++) {
        const transientResult = transientResults[i];
        let inputSource;
        if (transientResult.inputSource) inputSource = this.manager.input._getByInputSource(transientResult.inputSource);
        this.updateHitResults(transientResult.results, inputSource);
      }
    } else {
      this.updateHitResults(frame.getHitTestResults(this._xrHitTestSource));
    }
  }

  updateHitResults(results, inputSource) {
    for (let i = 0; i < results.length; i++) {
      const pose = results[i].getPose(this.manager._referenceSpace);
      let position = poolVec3.pop();
      if (!position) position = new Vec3();
      position.copy(pose.transform.position);
      let rotation = poolQuat.pop();
      if (!rotation) rotation = new Quat();
      rotation.copy(pose.transform.orientation);
      this.fire('result', position, rotation, inputSource);
      this.manager.hitTest.fire('result', this, position, rotation, inputSource);
      poolVec3.push(position);
      poolQuat.push(rotation);
    }
  }

}

class XrHitTest extends EventHandler {
  constructor(manager) {
    super();
    this.manager = void 0;
    this._supported = platform.browser && !!(window.XRSession && window.XRSession.prototype.requestHitTestSource);
    this._session = null;
    this.sources = [];
    this.manager = manager;

    if (this._supported) {
      this.manager.on('start', this._onSessionStart, this);
      this.manager.on('end', this._onSessionEnd, this);
    }
  }

  _onSessionStart() {
    if (this.manager.type !== XRTYPE_AR) return;
    this._session = this.manager.session;
  }

  _onSessionEnd() {
    if (!this._session) return;
    this._session = null;

    for (let i = 0; i < this.sources.length; i++) {
      this.sources[i].onStop();
    }

    this.sources = [];
  }

  isAvailable(callback, fireError) {
    let err;
    if (!this._supported) err = new Error('XR HitTest is not supported');
    if (!this._session) err = new Error('XR Session is not started (1)');
    if (this.manager.type !== XRTYPE_AR) err = new Error('XR HitTest is available only for AR');

    if (err) {
      if (callback) callback(err);
      if (fireError) fireError.fire('error', err);
      return false;
    }

    return true;
  }

  start(options = {}) {
    if (!this.isAvailable(options.callback, this)) return;
    if (!options.profile && !options.spaceType) options.spaceType = XRSPACE_VIEWER;
    let xrRay;
    const offsetRay = options.offsetRay;

    if (offsetRay) {
      const origin = new DOMPoint(offsetRay.origin.x, offsetRay.origin.y, offsetRay.origin.z, 1.0);
      const direction = new DOMPoint(offsetRay.direction.x, offsetRay.direction.y, offsetRay.direction.z, 0.0);
      xrRay = new XRRay(origin, direction);
    }

    const callback = options.callback;

    if (options.spaceType) {
      this._session.requestReferenceSpace(options.spaceType).then(referenceSpace => {
        if (!this._session) {
          const err = new Error('XR Session is not started (2)');
          if (callback) callback(err);
          this.fire('error', err);
          return;
        }

        this._session.requestHitTestSource({
          space: referenceSpace,
          entityTypes: options.entityTypes || undefined,
          offsetRay: xrRay
        }).then(xrHitTestSource => {
          this._onHitTestSource(xrHitTestSource, false, callback);
        }).catch(ex => {
          if (callback) callback(ex);
          this.fire('error', ex);
        });
      }).catch(ex => {
        if (callback) callback(ex);
        this.fire('error', ex);
      });
    } else {
      this._session.requestHitTestSourceForTransientInput({
        profile: options.profile,
        entityTypes: options.entityTypes || undefined,
        offsetRay: xrRay
      }).then(xrHitTestSource => {
        this._onHitTestSource(xrHitTestSource, true, callback);
      }).catch(ex => {
        if (callback) callback(ex);
        this.fire('error', ex);
      });
    }
  }

  _onHitTestSource(xrHitTestSource, transient, callback) {
    if (!this._session) {
      xrHitTestSource.cancel();
      const err = new Error('XR Session is not started (3)');
      if (callback) callback(err);
      this.fire('error', err);
      return;
    }

    const hitTestSource = new XrHitTestSource(this.manager, xrHitTestSource, transient);
    this.sources.push(hitTestSource);
    if (callback) callback(null, hitTestSource);
    this.fire('add', hitTestSource);
  }

  update(frame) {
    for (let i = 0; i < this.sources.length; i++) {
      this.sources[i].update(frame);
    }
  }

  get supported() {
    return this._supported;
  }

}

class XrFinger {
  constructor(index, hand) {
    this._index = void 0;
    this._hand = void 0;
    this._joints = [];
    this._tip = null;
    this._index = index;
    this._hand = hand;

    this._hand._fingers.push(this);
  }

  get index() {
    return this._index;
  }

  get hand() {
    return this._hand;
  }

  get joints() {
    return this._joints;
  }

  get tip() {
    return this._tip;
  }

}

const tipJointIds = platform.browser && window.XRHand ? ['thumb-tip', 'index-finger-tip', 'middle-finger-tip', 'ring-finger-tip', 'pinky-finger-tip'] : [];
const tipJointIdsIndex = {};

for (let i = 0; i < tipJointIds.length; i++) {
  tipJointIdsIndex[tipJointIds[i]] = true;
}

class XrJoint {
  constructor(index, id, hand, finger = null) {
    this._index = void 0;
    this._id = void 0;
    this._hand = void 0;
    this._finger = void 0;
    this._wrist = void 0;
    this._tip = void 0;
    this._radius = null;
    this._localTransform = new Mat4();
    this._worldTransform = new Mat4();
    this._localPosition = new Vec3();
    this._localRotation = new Quat();
    this._position = new Vec3();
    this._rotation = new Quat();
    this._dirtyLocal = true;
    this._index = index;
    this._id = id;
    this._hand = hand;
    this._finger = finger;
    this._wrist = id === 'wrist';
    this._tip = this._finger && !!tipJointIdsIndex[id];
  }

  update(pose) {
    this._dirtyLocal = true;
    this._radius = pose.radius;

    this._localPosition.copy(pose.transform.position);

    this._localRotation.copy(pose.transform.orientation);
  }

  _updateTransforms() {
    if (this._dirtyLocal) {
      this._dirtyLocal = false;

      this._localTransform.setTRS(this._localPosition, this._localRotation, Vec3.ONE);
    }

    const manager = this._hand._manager;
    const parent = manager.camera.parent;

    if (parent) {
      this._worldTransform.mul2(parent.getWorldTransform(), this._localTransform);
    } else {
      this._worldTransform.copy(this._localTransform);
    }
  }

  getPosition() {
    this._updateTransforms();

    this._worldTransform.getTranslation(this._position);

    return this._position;
  }

  getRotation() {
    this._updateTransforms();

    this._rotation.setFromMat4(this._worldTransform);

    return this._rotation;
  }

  get index() {
    return this._index;
  }

  get hand() {
    return this._hand;
  }

  get finger() {
    return this._finger;
  }

  get wrist() {
    return this._wrist;
  }

  get tip() {
    return this._tip;
  }

  get radius() {
    return this._radius || 0.005;
  }

}

let fingerJointIds = [];
const vecA = new Vec3();
const vecB = new Vec3();
const vecC = new Vec3();

if (platform.browser && window.XRHand) {
  fingerJointIds = [['thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip'], ['index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip'], ['middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip'], ['ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip'], ['pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip']];
}

class XrHand extends EventHandler {
  constructor(inputSource) {
    super();
    this._manager = void 0;
    this._inputSource = void 0;
    this._tracking = false;
    this._fingers = [];
    this._joints = [];
    this._jointsById = {};
    this._tips = [];
    this._wrist = null;
    const xrHand = inputSource._xrInputSource.hand;
    this._manager = inputSource._manager;
    this._inputSource = inputSource;

    if (xrHand.get('wrist')) {
      const joint = new XrJoint(0, 'wrist', this, null);
      this._wrist = joint;

      this._joints.push(joint);

      this._jointsById.wrist = joint;
    }

    for (let f = 0; f < fingerJointIds.length; f++) {
      const finger = new XrFinger(f, this);

      for (let j = 0; j < fingerJointIds[f].length; j++) {
        const jointId = fingerJointIds[f][j];
        if (!xrHand.get(jointId)) continue;
        const joint = new XrJoint(j, jointId, this, finger);

        this._joints.push(joint);

        this._jointsById[jointId] = joint;

        if (joint.tip) {
          this._tips.push(joint);

          finger._tip = joint;
        }

        finger._joints.push(joint);
      }
    }
  }

  update(frame) {
    const xrInputSource = this._inputSource._xrInputSource;

    for (let j = 0; j < this._joints.length; j++) {
      const joint = this._joints[j];
      const jointSpace = xrInputSource.hand.get(joint._id);

      if (jointSpace) {
        let pose;
        if (frame.session.visibilityState !== 'hidden') pose = frame.getJointPose(jointSpace, this._manager._referenceSpace);

        if (pose) {
          joint.update(pose);

          if (joint.wrist && !this._tracking) {
            this._tracking = true;
            this.fire('tracking');
          }
        } else if (joint.wrist) {
          if (this._tracking) {
            this._tracking = false;
            this.fire('trackinglost');
          }

          break;
        }
      }
    }

    const j1 = this._jointsById['thumb-metacarpal'];
    const j4 = this._jointsById['thumb-tip'];
    const j6 = this._jointsById['index-finger-phalanx-proximal'];
    const j9 = this._jointsById['index-finger-tip'];
    const j16 = this._jointsById['ring-finger-phalanx-proximal'];
    const j21 = this._jointsById['pinky-finger-phalanx-proximal'];

    if (j1 && j4 && j6 && j9 && j16 && j21) {
      this._inputSource._dirtyRay = true;

      this._inputSource._rayLocal.origin.lerp(j4._localPosition, j9._localPosition, 0.5);

      let jointL = j1;
      let jointR = j21;

      if (this._inputSource.handedness === XRHAND_LEFT) {
        const t = jointL;
        jointL = jointR;
        jointR = t;
      }

      vecA.sub2(jointL._localPosition, this._wrist._localPosition);
      vecB.sub2(jointR._localPosition, this._wrist._localPosition);
      vecC.cross(vecA, vecB).normalize();
      vecA.lerp(j6._localPosition, j16._localPosition, 0.5);
      vecA.sub(this._wrist._localPosition).normalize();

      this._inputSource._rayLocal.direction.lerp(vecC, vecA, 0.5).normalize();
    }

    const squeezing = this._fingerIsClosed(1) && this._fingerIsClosed(2) && this._fingerIsClosed(3) && this._fingerIsClosed(4);

    if (squeezing) {
      if (!this._inputSource._squeezing) {
        this._inputSource._squeezing = true;

        this._inputSource.fire('squeezestart');

        this._manager.input.fire('squeezestart', this._inputSource);
      }
    } else {
      if (this._inputSource._squeezing) {
        this._inputSource._squeezing = false;

        this._inputSource.fire('squeeze');

        this._manager.input.fire('squeeze', this._inputSource);

        this._inputSource.fire('squeezeend');

        this._manager.input.fire('squeezeend', this._inputSource);
      }
    }
  }

  _fingerIsClosed(index) {
    const finger = this._fingers[index];
    vecA.sub2(finger.joints[0]._localPosition, finger.joints[1]._localPosition).normalize();
    vecB.sub2(finger.joints[2]._localPosition, finger.joints[3]._localPosition).normalize();
    return vecA.dot(vecB) < -0.8;
  }

  getJointById(id) {
    return this._jointsById[id] || null;
  }

  get fingers() {
    return this._fingers;
  }

  get joints() {
    return this._joints;
  }

  get tips() {
    return this._tips;
  }

  get wrist() {
    return this._wrist;
  }

  get tracking() {
    return this._tracking;
  }

}

const quat = new Quat();
let ids$1 = 0;

class XrInputSource extends EventHandler {
  constructor(manager, xrInputSource) {
    super();
    this._id = void 0;
    this._manager = void 0;
    this._xrInputSource = void 0;
    this._ray = new Ray();
    this._rayLocal = new Ray();
    this._grip = false;
    this._hand = null;
    this._localTransform = null;
    this._worldTransform = null;
    this._position = new Vec3();
    this._rotation = new Quat();
    this._localPosition = null;
    this._localRotation = null;
    this._dirtyLocal = true;
    this._dirtyRay = false;
    this._selecting = false;
    this._squeezing = false;
    this._elementInput = true;
    this._elementEntity = null;
    this._hitTestSources = [];
    this._id = ++ids$1;
    this._manager = manager;
    this._xrInputSource = xrInputSource;
    if (xrInputSource.hand) this._hand = new XrHand(this);
  }

  get id() {
    return this._id;
  }

  get inputSource() {
    return this._xrInputSource;
  }

  get targetRayMode() {
    return this._xrInputSource.targetRayMode;
  }

  get handedness() {
    return this._xrInputSource.handedness;
  }

  get profiles() {
    return this._xrInputSource.profiles;
  }

  get grip() {
    return this._grip;
  }

  get hand() {
    return this._hand;
  }

  get gamepad() {
    return this._xrInputSource.gamepad || null;
  }

  get selecting() {
    return this._selecting;
  }

  get squeezing() {
    return this._squeezing;
  }

  set elementInput(value) {
    if (this._elementInput === value) return;
    this._elementInput = value;
    if (!this._elementInput) this._elementEntity = null;
  }

  get elementInput() {
    return this._elementInput;
  }

  get elementEntity() {
    return this._elementEntity;
  }

  get hitTestSources() {
    return this._hitTestSources;
  }

  update(frame) {
    if (this._hand) {
      this._hand.update(frame);
    } else {
      if (this._xrInputSource.gripSpace) {
        const gripPose = frame.getPose(this._xrInputSource.gripSpace, this._manager._referenceSpace);

        if (gripPose) {
          if (!this._grip) {
            this._grip = true;
            this._localTransform = new Mat4();
            this._worldTransform = new Mat4();
            this._localPosition = new Vec3();
            this._localRotation = new Quat();
          }

          this._dirtyLocal = true;

          this._localPosition.copy(gripPose.transform.position);

          this._localRotation.copy(gripPose.transform.orientation);
        }
      }

      const targetRayPose = frame.getPose(this._xrInputSource.targetRaySpace, this._manager._referenceSpace);

      if (targetRayPose) {
        this._dirtyRay = true;

        this._rayLocal.origin.copy(targetRayPose.transform.position);

        this._rayLocal.direction.set(0, 0, -1);

        quat.copy(targetRayPose.transform.orientation);
        quat.transformVector(this._rayLocal.direction, this._rayLocal.direction);
      }
    }
  }

  _updateTransforms() {
    if (this._dirtyLocal) {
      this._dirtyLocal = false;

      this._localTransform.setTRS(this._localPosition, this._localRotation, Vec3.ONE);
    }

    const parent = this._manager.camera.parent;

    if (parent) {
      this._worldTransform.mul2(parent.getWorldTransform(), this._localTransform);
    } else {
      this._worldTransform.copy(this._localTransform);
    }
  }

  _updateRayTransforms() {
    const dirty = this._dirtyRay;
    this._dirtyRay = false;
    const parent = this._manager.camera.parent;

    if (parent) {
      const parentTransform = this._manager.camera.parent.getWorldTransform();

      parentTransform.getTranslation(this._position);

      this._rotation.setFromMat4(parentTransform);

      this._rotation.transformVector(this._rayLocal.origin, this._ray.origin);

      this._ray.origin.add(this._position);

      this._rotation.transformVector(this._rayLocal.direction, this._ray.direction);
    } else if (dirty) {
      this._ray.origin.copy(this._rayLocal.origin);

      this._ray.direction.copy(this._rayLocal.direction);
    }
  }

  getPosition() {
    if (!this._position) return null;

    this._updateTransforms();

    this._worldTransform.getTranslation(this._position);

    return this._position;
  }

  getLocalPosition() {
    return this._localPosition;
  }

  getRotation() {
    if (!this._rotation) return null;

    this._updateTransforms();

    this._rotation.setFromMat4(this._worldTransform);

    return this._rotation;
  }

  getLocalRotation() {
    return this._localRotation;
  }

  getOrigin() {
    this._updateRayTransforms();

    return this._ray.origin;
  }

  getDirection() {
    this._updateRayTransforms();

    return this._ray.direction;
  }

  hitTestStart(options = {}) {
    options.profile = this._xrInputSource.profiles[0];
    const callback = options.callback;

    options.callback = (err, hitTestSource) => {
      if (hitTestSource) this.onHitTestSourceAdd(hitTestSource);
      if (callback) callback(err, hitTestSource);
    };

    this._manager.hitTest.start(options);
  }

  onHitTestSourceAdd(hitTestSource) {
    this._hitTestSources.push(hitTestSource);

    this.fire('hittest:add', hitTestSource);
    hitTestSource.on('result', function (position, rotation, inputSource) {
      if (inputSource !== this) return;
      this.fire('hittest:result', hitTestSource, position, rotation);
    }, this);
    hitTestSource.once('remove', function () {
      this.onHitTestSourceRemove(hitTestSource);
      this.fire('hittest:remove', hitTestSource);
    }, this);
  }

  onHitTestSourceRemove(hitTestSource) {
    const ind = this._hitTestSources.indexOf(hitTestSource);

    if (ind !== -1) this._hitTestSources.splice(ind, 1);
  }

}

class XrInput extends EventHandler {
  constructor(manager) {
    super();
    this.manager = void 0;
    this._inputSources = [];
    this._onInputSourcesChangeEvt = void 0;
    this.manager = manager;

    this._onInputSourcesChangeEvt = evt => {
      this._onInputSourcesChange(evt);
    };

    this.manager.on('start', this._onSessionStart, this);
    this.manager.on('end', this._onSessionEnd, this);
  }

  _onSessionStart() {
    const session = this.manager.session;
    session.addEventListener('inputsourceschange', this._onInputSourcesChangeEvt);
    session.addEventListener('select', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);

      inputSource.update(evt.frame);
      inputSource.fire('select', evt);
      this.fire('select', inputSource, evt);
    });
    session.addEventListener('selectstart', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);

      inputSource.update(evt.frame);
      inputSource._selecting = true;
      inputSource.fire('selectstart', evt);
      this.fire('selectstart', inputSource, evt);
    });
    session.addEventListener('selectend', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);

      inputSource.update(evt.frame);
      inputSource._selecting = false;
      inputSource.fire('selectend', evt);
      this.fire('selectend', inputSource, evt);
    });
    session.addEventListener('squeeze', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);

      inputSource.update(evt.frame);
      inputSource.fire('squeeze', evt);
      this.fire('squeeze', inputSource, evt);
    });
    session.addEventListener('squeezestart', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);

      inputSource.update(evt.frame);
      inputSource._squeezing = true;
      inputSource.fire('squeezestart', evt);
      this.fire('squeezestart', inputSource, evt);
    });
    session.addEventListener('squeezeend', evt => {
      const inputSource = this._getByInputSource(evt.inputSource);

      inputSource.update(evt.frame);
      inputSource._squeezing = false;
      inputSource.fire('squeezeend', evt);
      this.fire('squeezeend', inputSource, evt);
    });
    const inputSources = session.inputSources;

    for (let i = 0; i < inputSources.length; i++) {
      this._addInputSource(inputSources[i]);
    }
  }

  _onSessionEnd() {
    let i = this._inputSources.length;

    while (i--) {
      const inputSource = this._inputSources[i];

      this._inputSources.splice(i, 1);

      inputSource.fire('remove');
      this.fire('remove', inputSource);
    }

    const session = this.manager.session;
    session.removeEventListener('inputsourceschange', this._onInputSourcesChangeEvt);
  }

  _onInputSourcesChange(evt) {
    for (let i = 0; i < evt.removed.length; i++) {
      this._removeInputSource(evt.removed[i]);
    }

    for (let i = 0; i < evt.added.length; i++) {
      this._addInputSource(evt.added[i]);
    }
  }

  _getByInputSource(xrInputSource) {
    for (let i = 0; i < this._inputSources.length; i++) {
      if (this._inputSources[i].inputSource === xrInputSource) {
        return this._inputSources[i];
      }
    }

    return null;
  }

  _addInputSource(xrInputSource) {
    if (this._getByInputSource(xrInputSource)) return;
    const inputSource = new XrInputSource(this.manager, xrInputSource);

    this._inputSources.push(inputSource);

    this.fire('add', inputSource);
  }

  _removeInputSource(xrInputSource) {
    for (let i = 0; i < this._inputSources.length; i++) {
      if (this._inputSources[i].inputSource !== xrInputSource) continue;
      const inputSource = this._inputSources[i];

      this._inputSources.splice(i, 1);

      let h = inputSource.hitTestSources.length;

      while (h--) {
        inputSource.hitTestSources[h].remove();
      }

      inputSource.fire('remove');
      this.fire('remove', inputSource);
      return;
    }
  }

  update(frame) {
    for (let i = 0; i < this._inputSources.length; i++) {
      this._inputSources[i].update(frame);
    }
  }

  get inputSources() {
    return this._inputSources;
  }

}

const vec3A = new Vec3();
const vec3B = new Vec3();
const mat4A = new Mat4();
const mat4B = new Mat4();

class XrLightEstimation extends EventHandler {
  constructor(manager) {
    super();
    this._manager = void 0;
    this._supported = false;
    this._available = false;
    this._lightProbeRequested = false;
    this._lightProbe = null;
    this._intensity = 0;
    this._rotation = new Quat();
    this._color = new Color();
    this._sphericalHarmonics = new Float32Array(27);
    this._manager = manager;

    this._manager.on('start', this._onSessionStart, this);

    this._manager.on('end', this._onSessionEnd, this);
  }

  _onSessionStart() {
    const supported = !!this._manager.session.requestLightProbe;
    if (!supported) return;
    this._supported = true;
  }

  _onSessionEnd() {
    this._supported = false;
    this._available = false;
    this._lightProbeRequested = false;
    this._lightProbe = null;
  }

  start() {
    let err;
    if (!this._manager.session) err = new Error('XR session is not running');
    if (!err && this._manager.type !== XRTYPE_AR) err = new Error('XR session type is not AR');
    if (!err && !this._supported) err = new Error('light-estimation is not supported');
    if (!err && this._lightProbe || this._lightProbeRequested) err = new Error('light estimation is already requested');

    if (err) {
      this.fire('error', err);
      return;
    }

    this._lightProbeRequested = true;

    this._manager.session.requestLightProbe().then(lightProbe => {
      const wasRequested = this._lightProbeRequested;
      this._lightProbeRequested = false;

      if (this._manager.active) {
        if (wasRequested) {
          this._lightProbe = lightProbe;
        }
      } else {
        this.fire('error', new Error('XR session is not active'));
      }
    }).catch(ex => {
      this._lightProbeRequested = false;
      this.fire('error', ex);
    });
  }

  end() {
    this._lightProbeRequested = false;
    this._lightProbe = null;
    this._available = false;
  }

  update(frame) {
    if (!this._lightProbe) return;
    const lightEstimate = frame.getLightEstimate(this._lightProbe);
    if (!lightEstimate) return;

    if (!this._available) {
      this._available = true;
      this.fire('available');
    }

    const pli = lightEstimate.primaryLightIntensity;
    this._intensity = Math.max(1.0, Math.max(pli.x, Math.max(pli.y, pli.z)));
    vec3A.copy(pli).mulScalar(1 / this._intensity);

    this._color.set(vec3A.x, vec3A.y, vec3A.z);

    vec3A.set(0, 0, 0);
    vec3B.copy(lightEstimate.primaryLightDirection);
    mat4A.setLookAt(vec3B, vec3A, Vec3.UP);
    mat4B.setFromAxisAngle(Vec3.RIGHT, 90);
    mat4A.mul(mat4B);

    this._rotation.setFromMat4(mat4A);

    this._sphericalHarmonics.set(lightEstimate.sphericalHarmonicsCoefficients);
  }

  get supported() {
    return this._supported;
  }

  get available() {
    return this._available;
  }

  get intensity() {
    return this._available ? this._intensity : null;
  }

  get color() {
    return this._available ? this._color : null;
  }

  get rotation() {
    return this._available ? this._rotation : null;
  }

  get sphericalHarmonics() {
    return this._available ? this._sphericalHarmonics : null;
  }

}

class XrTrackedImage extends EventHandler {
  constructor(image, width) {
    super();
    this._image = void 0;
    this._width = void 0;
    this._bitmap = null;
    this._measuredWidth = 0;
    this._trackable = false;
    this._tracking = false;
    this._emulated = false;
    this._pose = null;
    this._position = new Vec3();
    this._rotation = new Quat();
    this._image = image;
    this._width = width;
  }

  get image() {
    return this._image;
  }

  set width(value) {
    this._width = value;
  }

  get width() {
    return this._width;
  }

  get trackable() {
    return this._trackable;
  }

  get tracking() {
    return this._tracking;
  }

  get emulated() {
    return this._emulated;
  }

  prepare() {
    if (this._bitmap) {
      return {
        image: this._bitmap,
        widthInMeters: this._width
      };
    }

    return createImageBitmap(this._image).then(bitmap => {
      this._bitmap = bitmap;
      return {
        image: this._bitmap,
        widthInMeters: this._width
      };
    });
  }

  destroy() {
    this._image = null;
    this._pose = null;

    if (this._bitmap) {
      this._bitmap.close();

      this._bitmap = null;
    }
  }

  getPosition() {
    if (this._pose) this._position.copy(this._pose.transform.position);
    return this._position;
  }

  getRotation() {
    if (this._pose) this._rotation.copy(this._pose.transform.orientation);
    return this._rotation;
  }

}

class XrImageTracking extends EventHandler {
  constructor(manager) {
    super();
    this._manager = void 0;
    this._supported = platform.browser && !!window.XRImageTrackingResult;
    this._available = false;
    this._images = [];
    this._manager = manager;

    if (this._supported) {
      this._manager.on('start', this._onSessionStart, this);

      this._manager.on('end', this._onSessionEnd, this);
    }
  }

  add(image, width) {
    if (!this._supported || this._manager.active) return null;
    const trackedImage = new XrTrackedImage(image, width);

    this._images.push(trackedImage);

    return trackedImage;
  }

  remove(trackedImage) {
    if (this._manager.active) return;

    const ind = this._images.indexOf(trackedImage);

    if (ind !== -1) {
      trackedImage.destroy();

      this._images.splice(ind, 1);
    }
  }

  _onSessionStart() {
    this._manager.session.getTrackedImageScores().then(images => {
      this._available = true;

      for (let i = 0; i < images.length; i++) {
        this._images[i]._trackable = images[i] === 'trackable';
      }
    }).catch(err => {
      this._available = false;
      this.fire('error', err);
    });
  }

  _onSessionEnd() {
    this._available = false;

    for (let i = 0; i < this._images.length; i++) {
      const image = this._images[i];
      image._pose = null;
      image._measuredWidth = 0;

      if (image._tracking) {
        image._tracking = false;
        image.fire('untracked');
      }
    }
  }

  prepareImages(callback) {
    if (this._images.length) {
      Promise.all(this._images.map(function (trackedImage) {
        return trackedImage.prepare();
      })).then(function (bitmaps) {
        callback(null, bitmaps);
      }).catch(function (err) {
        callback(err, null);
      });
    } else {
      callback(null, null);
    }
  }

  update(frame) {
    if (!this._available) return;
    const results = frame.getImageTrackingResults();
    const index = {};

    for (let i = 0; i < results.length; i++) {
      index[results[i].index] = results[i];
      const trackedImage = this._images[results[i].index];
      trackedImage._emulated = results[i].trackingState === 'emulated';
      trackedImage._measuredWidth = results[i].measuredWidthInMeters;
      trackedImage._pose = frame.getPose(results[i].imageSpace, this._manager._referenceSpace);
    }

    for (let i = 0; i < this._images.length; i++) {
      if (this._images[i]._tracking && !index[i]) {
        this._images[i]._tracking = false;

        this._images[i].fire('untracked');
      } else if (!this._images[i]._tracking && index[i]) {
        this._images[i]._tracking = true;

        this._images[i].fire('tracked');
      }
    }
  }

  get supported() {
    return this._supported;
  }

  get available() {
    return this._available;
  }

  get images() {
    return this._images;
  }

}

class XrDomOverlay {
  constructor(manager) {
    this._manager = void 0;
    this._supported = platform.browser && !!window.XRDOMOverlayState;
    this._root = null;
    this._manager = manager;
  }

  get supported() {
    return this._supported;
  }

  get available() {
    return this._supported && this._manager.active && this._manager._session.domOverlayState !== null;
  }

  get state() {
    if (!this._supported || !this._manager.active || !this._manager._session.domOverlayState) return null;
    return this._manager._session.domOverlayState.type;
  }

  set root(value) {
    if (!this._supported || this._manager.active) return;
    this._root = value;
  }

  get root() {
    return this._root;
  }

}

class XrDepthSensing extends EventHandler {
  constructor(manager) {
    super();
    this._manager = void 0;
    this._available = false;
    this._depthInfoCpu = null;
    this._depthInfoGpu = null;
    this._usage = null;
    this._dataFormat = null;
    this._matrixDirty = false;
    this._matrix = new Mat4();
    this._emptyBuffer = new Uint8Array(32);
    this._depthBuffer = null;
    this._texture = void 0;
    this._manager = manager;
    this._texture = new Texture(this._manager.app.graphicsDevice, {
      format: PIXELFORMAT_L8_A8,
      mipmaps: false,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      minFilter: FILTER_LINEAR,
      magFilter: FILTER_LINEAR,
      name: 'XRDepthSensing'
    });

    if (this.supported) {
      this._manager.on('start', this._onSessionStart, this);

      this._manager.on('end', this._onSessionEnd, this);
    }
  }

  destroy() {
    this._texture.destroy();

    this._texture = null;
  }

  _onSessionStart() {
    const session = this._manager.session;

    try {
      this._usage = session.depthUsage;
      this._dataFormat = session.depthDataFormat;
    } catch (ex) {
      this._usage = null;
      this._dataFormat = null;
      this._available = false;
      this.fire('error', ex);
    }
  }

  _onSessionEnd() {
    this._depthInfoCpu = null;
    this._depthInfoGpu = null;
    this._usage = null;
    this._dataFormat = null;

    if (this._available) {
      this._available = false;
      this.fire('unavailable');
    }

    this._depthBuffer = null;
    this._texture._width = 4;
    this._texture._height = 4;
    this._texture._levels[0] = this._emptyBuffer;

    this._texture.upload();
  }

  _updateTexture() {
    const depthInfo = this._depthInfoCpu || this._depthInfoGpu;

    if (depthInfo) {
      let resized = false;

      if (depthInfo.width !== this._texture.width || depthInfo.height !== this._texture.height) {
        this._texture._width = depthInfo.width;
        this._texture._height = depthInfo.height;
        this._matrixDirty = true;
        resized = true;
      }

      if (this._depthInfoCpu) {
        const dataBuffer = this._depthInfoCpu.data;
        this._depthBuffer = new Uint8Array(dataBuffer);
        this._texture._levels[0] = this._depthBuffer;

        this._texture.upload();
      } else if (this._depthInfoGpu) {
        this._texture._levels[0] = this._depthInfoGpu.texture;

        this._texture.upload();
      }

      if (resized) this.fire('resize', depthInfo.width, depthInfo.height);
    } else if (this._depthBuffer) {
      this._depthBuffer = null;
      this._texture._width = 4;
      this._texture._height = 4;
      this._texture._levels[0] = this._emptyBuffer;

      this._texture.upload();
    }
  }

  update(frame, view) {
    if (!this._usage) return;
    let depthInfoCpu = null;
    let depthInfoGpu = null;

    if (this._usage === XRDEPTHSENSINGUSAGE_CPU && view) {
      depthInfoCpu = frame.getDepthInformation(view);
    } else if (this._usage === XRDEPTHSENSINGUSAGE_GPU && view) {
      depthInfoGpu = frame.getDepthInformation(view);
    }

    if (this._depthInfoCpu && !depthInfoCpu || !this._depthInfoCpu && depthInfoCpu || this.depthInfoGpu && !depthInfoGpu || !this._depthInfoGpu && depthInfoGpu) {
      this._matrixDirty = true;
    }

    this._depthInfoCpu = depthInfoCpu;
    this._depthInfoGpu = depthInfoGpu;

    this._updateTexture();

    if (this._matrixDirty) {
      this._matrixDirty = false;
      const depthInfo = this._depthInfoCpu || this._depthInfoGpu;

      if (depthInfo) {
        this._matrix.data.set(depthInfo.normDepthBufferFromNormView.matrix);
      } else {
        this._matrix.setIdentity();
      }
    }

    if ((this._depthInfoCpu || this._depthInfoGpu) && !this._available) {
      this._available = true;
      this.fire('available');
    } else if (!this._depthInfoCpu && !this._depthInfoGpu && this._available) {
      this._available = false;
      this.fire('unavailable');
    }
  }

  getDepth(u, v) {
    if (!this._depthInfoCpu) return null;
    return this._depthInfoCpu.getDepthInMeters(u, v);
  }

  get supported() {
    return platform.browser && !!window.XRDepthInformation;
  }

  get available() {
    return this._available;
  }

  get usage() {
    return this._usage;
  }

  get dataFormat() {
    return this._dataFormat;
  }

  get width() {
    const depthInfo = this._depthInfoCpu || this._depthInfoGpu;
    return depthInfo && depthInfo.width || 0;
  }

  get height() {
    const depthInfo = this._depthInfoCpu || this._depthInfoGpu;
    return depthInfo && depthInfo.height || 0;
  }

  get texture() {
    return this._texture;
  }

  get uvMatrix() {
    return this._matrix;
  }

  get rawValueToMeters() {
    const depthInfo = this._depthInfoCpu || this._depthInfoGpu;
    return depthInfo && depthInfo.rawValueToMeters || 0;
  }

}

let ids = 0;

class XrPlane extends EventHandler {
  constructor(planeDetection, xrPlane) {
    super();
    this._id = void 0;
    this._planeDetection = void 0;
    this._xrPlane = void 0;
    this._lastChangedTime = void 0;
    this._orientation = void 0;
    this._position = new Vec3();
    this._rotation = new Quat();
    this._id = ++ids;
    this._planeDetection = planeDetection;
    this._xrPlane = xrPlane;
    this._lastChangedTime = xrPlane.lastChangedTime;
    this._orientation = xrPlane.orientation;
  }

  destroy() {
    this.fire('remove');
  }

  update(frame) {
    const manager = this._planeDetection._manager;
    const pose = frame.getPose(this._xrPlane.planeSpace, manager._referenceSpace);

    if (pose) {
      this._position.copy(pose.transform.position);

      this._rotation.copy(pose.transform.orientation);
    }

    if (this._lastChangedTime !== this._xrPlane.lastChangedTime) {
      this._lastChangedTime = this._xrPlane.lastChangedTime;
      this.fire('change');
    }
  }

  getPosition() {
    return this._position;
  }

  getRotation() {
    return this._rotation;
  }

  get id() {
    return this._id;
  }

  get orientation() {
    return this._orientation;
  }

  get points() {
    return this._xrPlane.polygon;
  }

}

class XrPlaneDetection extends EventHandler {
  constructor(manager) {
    super();
    this._manager = void 0;
    this._supported = platform.browser && !!window.XRPlane;
    this._available = false;
    this._planesIndex = new Map();
    this._planes = null;
    this._manager = manager;

    if (this._supported) {
      this._manager.on('end', this._onSessionEnd, this);
    }
  }

  _onSessionEnd() {
    if (this._planes) {
      for (let i = 0; i < this._planes.length; i++) {
        this._planes[i].destroy();
      }
    }

    this._planesIndex.clear();

    this._planes = null;

    if (this._available) {
      this._available = false;
      this.fire('unavailable');
    }
  }

  update(frame) {
    let detectedPlanes;

    if (!this._available) {
      try {
        detectedPlanes = frame.detectedPlanes;
        this._planes = [];
        this._available = true;
        this.fire('available');
      } catch (ex) {
        return;
      }
    } else {
      detectedPlanes = frame.detectedPlanes;
    }

    for (const [xrPlane, plane] of this._planesIndex) {
      if (detectedPlanes.has(xrPlane)) continue;

      this._planesIndex.delete(xrPlane);

      this._planes.splice(this._planes.indexOf(plane), 1);

      plane.destroy();
      this.fire('remove', plane);
    }

    for (const xrPlane of detectedPlanes) {
      let plane = this._planesIndex.get(xrPlane);

      if (!plane) {
        plane = new XrPlane(this, xrPlane);

        this._planesIndex.set(xrPlane, plane);

        this._planes.push(plane);

        plane.update(frame);
        this.fire('add', plane);
      } else {
        plane.update(frame);
      }
    }
  }

  get supported() {
    return this._supported;
  }

  get available() {
    return this._available;
  }

  get planes() {
    return this._planes;
  }

}

class XrManager extends EventHandler {
  constructor(app) {
    super();
    this.app = void 0;
    this._supported = platform.browser && !!navigator.xr;
    this._available = {};
    this._type = null;
    this._spaceType = null;
    this._session = null;
    this._baseLayer = null;
    this._referenceSpace = null;
    this.depthSensing = void 0;
    this.domOverlay = void 0;
    this.hitTest = void 0;
    this.imageTracking = void 0;
    this.planeDetection = void 0;
    this.input = void 0;
    this.lightEstimation = void 0;
    this._camera = null;
    this.views = [];
    this.viewsPool = [];
    this._localPosition = new Vec3();
    this._localRotation = new Quat();
    this._depthNear = 0.1;
    this._depthFar = 1000;
    this._width = 0;
    this._height = 0;
    this.app = app;
    this._available[XRTYPE_INLINE] = false;
    this._available[XRTYPE_VR] = false;
    this._available[XRTYPE_AR] = false;
    this.depthSensing = new XrDepthSensing(this);
    this.domOverlay = new XrDomOverlay(this);
    this.hitTest = new XrHitTest(this);
    this.imageTracking = new XrImageTracking(this);
    this.planeDetection = new XrPlaneDetection(this);
    this.input = new XrInput(this);
    this.lightEstimation = new XrLightEstimation(this);

    if (this._supported) {
      navigator.xr.addEventListener('devicechange', () => {
        this._deviceAvailabilityCheck();
      });

      this._deviceAvailabilityCheck();
    }
  }

  destroy() {
    this.depthSensing.destroy();
    this.depthSensing = null;
  }

  start(camera, type, spaceType, options) {
    let callback = options;
    if (typeof options === 'object') callback = options.callback;

    if (!this._available[type]) {
      if (callback) callback(new Error('XR is not available'));
      return;
    }

    if (this._session) {
      if (callback) callback(new Error('XR session is already started'));
      return;
    }

    this._camera = camera;
    this._camera.camera.xr = this;
    this._type = type;
    this._spaceType = spaceType;

    this._setClipPlanes(camera.nearClip, camera.farClip);

    const opts = {
      requiredFeatures: [spaceType],
      optionalFeatures: []
    };

    if (type === XRTYPE_AR) {
      opts.optionalFeatures.push('light-estimation');
      opts.optionalFeatures.push('hit-test');

      if (options) {
        if (options.imageTracking && this.imageTracking.supported) opts.optionalFeatures.push('image-tracking');
        if (options.planeDetection) opts.optionalFeatures.push('plane-detection');
      }

      if (this.domOverlay.supported && this.domOverlay.root) {
        opts.optionalFeatures.push('dom-overlay');
        opts.domOverlay = {
          root: this.domOverlay.root
        };
      }

      if (options && options.depthSensing && this.depthSensing.supported) {
        opts.optionalFeatures.push('depth-sensing');
        const usagePreference = [XRDEPTHSENSINGUSAGE_CPU];
        const dataFormatPreference = [XRDEPTHSENSINGFORMAT_L8A8];

        if (options.depthSensing.usagePreference) {
          const ind = usagePreference.indexOf(options.depthSensing.usagePreference);
          if (ind !== -1) usagePreference.splice(ind, 1);
          usagePreference.unshift(options.depthSensing.usagePreference);
        }

        if (options.depthSensing.dataFormatPreference) {
          const ind = dataFormatPreference.indexOf(options.depthSensing.dataFormatPreference);
          if (ind !== -1) dataFormatPreference.splice(ind, 1);
          dataFormatPreference.unshift(options.depthSensing.dataFormatPreference);
        }

        opts.depthSensing = {
          usagePreference: usagePreference,
          dataFormatPreference: dataFormatPreference
        };
      }
    } else if (type === XRTYPE_VR) {
      opts.optionalFeatures.push('hand-tracking');
    }

    if (options && options.optionalFeatures) opts.optionalFeatures = opts.optionalFeatures.concat(options.optionalFeatures);

    if (this.imageTracking.supported && this.imageTracking.images.length) {
      this.imageTracking.prepareImages((err, trackedImages) => {
        if (err) {
          if (callback) callback(err);
          this.fire('error', err);
          return;
        }

        if (trackedImages !== null) opts.trackedImages = trackedImages;

        this._onStartOptionsReady(type, spaceType, opts, callback);
      });
    } else {
      this._onStartOptionsReady(type, spaceType, opts, callback);
    }
  }

  _onStartOptionsReady(type, spaceType, options, callback) {
    navigator.xr.requestSession(type, options).then(session => {
      this._onSessionStart(session, spaceType, callback);
    }).catch(ex => {
      this._camera.camera.xr = null;
      this._camera = null;
      this._type = null;
      this._spaceType = null;
      if (callback) callback(ex);
      this.fire('error', ex);
    });
  }

  end(callback) {
    if (!this._session) {
      if (callback) callback(new Error('XR Session is not initialized'));
      return;
    }

    if (callback) this.once('end', callback);

    this._session.end();
  }

  isAvailable(type) {
    return this._available[type];
  }

  _deviceAvailabilityCheck() {
    for (const key in this._available) {
      this._sessionSupportCheck(key);
    }
  }

  _sessionSupportCheck(type) {
    navigator.xr.isSessionSupported(type).then(available => {
      if (this._available[type] === available) return;
      this._available[type] = available;
      this.fire('available', type, available);
      this.fire('available:' + type, available);
    }).catch(ex => {
      this.fire('error', ex);
    });
  }

  _onSessionStart(session, spaceType, callback) {
    let failed = false;
    this._session = session;

    const onVisibilityChange = () => {
      this.fire('visibility:change', session.visibilityState);
    };

    const onClipPlanesChange = () => {
      this._setClipPlanes(this._camera.nearClip, this._camera.farClip);
    };

    const onEnd = () => {
      if (this._camera) {
        this._camera.off('set_nearClip', onClipPlanesChange);

        this._camera.off('set_farClip', onClipPlanesChange);

        this._camera.camera.xr = null;
        this._camera = null;
      }

      session.removeEventListener('end', onEnd);
      session.removeEventListener('visibilitychange', onVisibilityChange);
      if (!failed) this.fire('end');
      this._session = null;
      this._referenceSpace = null;
      this.views = [];
      this._width = 0;
      this._height = 0;
      this._type = null;
      this._spaceType = null;
      this.app.tick();
    };

    session.addEventListener('end', onEnd);
    session.addEventListener('visibilitychange', onVisibilityChange);

    this._camera.on('set_nearClip', onClipPlanesChange);

    this._camera.on('set_farClip', onClipPlanesChange);

    this._baseLayer = new XRWebGLLayer(session, this.app.graphicsDevice.gl, {
      alpha: true,
      depth: true,
      stencil: true
    });
    session.updateRenderState({
      baseLayer: this._baseLayer,
      depthNear: this._depthNear,
      depthFar: this._depthFar
    });
    session.requestReferenceSpace(spaceType).then(referenceSpace => {
      this._referenceSpace = referenceSpace;
      this.app.tick();
      if (callback) callback(null);
      this.fire('start');
    }).catch(ex => {
      failed = true;
      session.end();
      if (callback) callback(ex);
      this.fire('error', ex);
    });
  }

  _setClipPlanes(near, far) {
    if (this._depthNear === near && this._depthFar === far) return;
    this._depthNear = near;
    this._depthFar = far;
    if (!this._session) return;

    this._session.updateRenderState({
      depthNear: this._depthNear,
      depthFar: this._depthFar
    });
  }

  update(frame) {
    if (!this._session) return false;
    const width = frame.session.renderState.baseLayer.framebufferWidth;
    const height = frame.session.renderState.baseLayer.framebufferHeight;

    if (this._width !== width || this._height !== height) {
      this._width = width;
      this._height = height;
      this.app.graphicsDevice.setResolution(width, height);
    }

    const pose = frame.getViewerPose(this._referenceSpace);
    if (!pose) return false;
    const lengthNew = pose.views.length;

    if (lengthNew > this.views.length) {
      for (let i = 0; i <= lengthNew - this.views.length; i++) {
        let view = this.viewsPool.pop();

        if (!view) {
          view = {
            viewport: new Vec4(),
            projMat: new Mat4(),
            viewMat: new Mat4(),
            viewOffMat: new Mat4(),
            viewInvMat: new Mat4(),
            viewInvOffMat: new Mat4(),
            projViewOffMat: new Mat4(),
            viewMat3: new Mat3(),
            position: new Float32Array(3),
            rotation: new Quat()
          };
        }

        this.views.push(view);
      }
    } else if (lengthNew <= this.views.length) {
      for (let i = 0; i < this.views.length - lengthNew; i++) {
        this.viewsPool.push(this.views.pop());
      }
    }

    const posePosition = pose.transform.position;
    const poseOrientation = pose.transform.orientation;

    this._localPosition.set(posePosition.x, posePosition.y, posePosition.z);

    this._localRotation.set(poseOrientation.x, poseOrientation.y, poseOrientation.z, poseOrientation.w);

    const layer = frame.session.renderState.baseLayer;

    for (let i = 0; i < pose.views.length; i++) {
      const viewRaw = pose.views[i];
      const view = this.views[i];
      const viewport = layer.getViewport(viewRaw);
      view.viewport.x = viewport.x;
      view.viewport.y = viewport.y;
      view.viewport.z = viewport.width;
      view.viewport.w = viewport.height;
      view.projMat.set(viewRaw.projectionMatrix);
      view.viewMat.set(viewRaw.transform.inverse.matrix);
      view.viewInvMat.set(viewRaw.transform.matrix);
    }

    this._camera.camera._node.setLocalPosition(this._localPosition);

    this._camera.camera._node.setLocalRotation(this._localRotation);

    this.input.update(frame);

    if (this._type === XRTYPE_AR) {
      if (this.hitTest.supported) this.hitTest.update(frame);
      if (this.lightEstimation.supported) this.lightEstimation.update(frame);
      if (this.depthSensing.supported) this.depthSensing.update(frame, pose && pose.views[0]);
      if (this.imageTracking.supported) this.imageTracking.update(frame);
      if (this.planeDetection.supported) this.planeDetection.update(frame);
    }

    this.fire('update', frame);
    return true;
  }

  get supported() {
    return this._supported;
  }

  get active() {
    return !!this._session;
  }

  get type() {
    return this._type;
  }

  get spaceType() {
    return this._spaceType;
  }

  get session() {
    return this._session;
  }

  get camera() {
    return this._camera ? this._camera.entity : null;
  }

  get visibilityState() {
    if (!this._session) return null;
    return this._session.visibilityState;
  }

}

class Application extends AppBase {
  constructor(canvas, options = {}) {
    super(canvas);
    const appOptions = new AppOptions();
    appOptions.graphicsDevice = this.createDevice(canvas, options);
    this.addComponentSystems(appOptions);
    this.addResourceHandles(appOptions);
    appOptions.elementInput = options.elementInput;
    appOptions.keyboard = options.keyboard;
    appOptions.mouse = options.mouse;
    appOptions.touch = options.touch;
    appOptions.gamepads = options.gamepads;
    appOptions.scriptPrefix = options.scriptPrefix;
    appOptions.assetPrefix = options.assetPrefix;
    appOptions.scriptsOrder = options.scriptsOrder;
    appOptions.soundManager = new SoundManager(options);
    appOptions.lightmapper = Lightmapper;
    appOptions.batchManager = BatchManager;
    appOptions.xr = XrManager;
    this.init(appOptions);
  }

  createDevice(canvas, options) {
    if (!options.graphicsDeviceOptions) {
      options.graphicsDeviceOptions = {};
    }

    if (platform.browser && !!navigator.xr) {
      options.graphicsDeviceOptions.xrCompatible = true;
    }

    options.graphicsDeviceOptions.alpha = options.graphicsDeviceOptions.alpha || false;
    return new WebglGraphicsDevice(canvas, options.graphicsDeviceOptions);
  }

  addComponentSystems(appOptions) {
    appOptions.componentSystems = [RigidBodyComponentSystem, CollisionComponentSystem, JointComponentSystem, AnimationComponentSystem, AnimComponentSystem, ModelComponentSystem, RenderComponentSystem, CameraComponentSystem, LightComponentSystem, script.legacy ? ScriptLegacyComponentSystem : ScriptComponentSystem, AudioSourceComponentSystem, SoundComponentSystem, AudioListenerComponentSystem, ParticleSystemComponentSystem, ScreenComponentSystem, ElementComponentSystem, ButtonComponentSystem, ScrollViewComponentSystem, ScrollbarComponentSystem, SpriteComponentSystem, LayoutGroupComponentSystem, LayoutChildComponentSystem, ZoneComponentSystem];
  }

  addResourceHandles(appOptions) {
    appOptions.resourceHandlers = [RenderHandler, AnimationHandler, AnimClipHandler, AnimStateGraphHandler, ModelHandler, MaterialHandler, TextureHandler, TextHandler, JsonHandler, AudioHandler, ScriptHandler, SceneHandler, CubemapHandler, HtmlHandler, CssHandler, ShaderHandler, HierarchyHandler, FolderHandler, FontHandler, BinaryHandler, TextureAtlasHandler, SpriteHandler, TemplateHandler, ContainerHandler];
  }

}

const log = {
  write: function (text) {
    console.log(text);
  },
  open: function () {
    log.write('Powered by PlayCanvas ' + version + ' ' + revision);
  },
  info: function (text) {
    console.info('INFO:    ' + text);
  },
  debug: function (text) {
    console.debug('DEBUG:   ' + text);
  },
  error: function (text) {
    console.error('ERROR:   ' + text);
  },
  warning: function (text) {
    console.warn('WARNING: ' + text);
  },
  alert: function (text) {
    log.write('ALERT:   ' + text);
    alert(text);
  },
  assert: function (condition, text) {
    if (condition === false) {
      log.write('ASSERT:  ' + text);
    }
  }
};

string.endsWith = function (s, subs) {
  return s.endsWith(subs);
};

string.startsWith = function (s, subs) {
  return s.startsWith(subs);
};

const time = {
  now: now,
  Timer: Timer
};
Object.defineProperty(Color.prototype, 'data', {
  get: function () {
    if (!this._data) {
      this._data = new Float32Array(4);
    }

    this._data[0] = this.r;
    this._data[1] = this.g;
    this._data[2] = this.b;
    this._data[3] = this.a;
    return this._data;
  }
});
Object.defineProperty(Color.prototype, 'data3', {
  get: function () {
    if (!this._data3) {
      this._data3 = new Float32Array(3);
    }

    this._data3[0] = this.r;
    this._data3[1] = this.g;
    this._data3[2] = this.b;
    return this._data3;
  }
});
function inherits(Self, Super) {
  const Temp = function Temp() {};

  const Func = function Func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    Super.call(this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    Self.call(this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
  };

  Func._super = Super.prototype;
  Temp.prototype = Super.prototype;
  Func.prototype = new Temp();
  return Func;
}
function makeArray(arr) {
  return Array.prototype.slice.call(arr);
}
math$1.INV_LOG2 = Math.LOG2E;
math$1.intToBytes = math$1.intToBytes32;
math$1.bytesToInt = math$1.bytesToInt32;
Object.defineProperty(Vec2.prototype, 'data', {
  get: function () {
    if (!this._data) {
      this._data = new Float32Array(2);
    }

    this._data[0] = this.x;
    this._data[1] = this.y;
    return this._data;
  }
});
Vec2.prototype.scale = Vec2.prototype.mulScalar;
Object.defineProperty(Vec3.prototype, 'data', {
  get: function () {
    if (!this._data) {
      this._data = new Float32Array(3);
    }

    this._data[0] = this.x;
    this._data[1] = this.y;
    this._data[2] = this.z;
    return this._data;
  }
});
Vec3.prototype.scale = Vec3.prototype.mulScalar;
Object.defineProperty(Vec4.prototype, 'data', {
  get: function () {
    if (!this._data) {
      this._data = new Float32Array(4);
    }

    this._data[0] = this.x;
    this._data[1] = this.y;
    this._data[2] = this.z;
    this._data[3] = this.w;
    return this._data;
  }
});
Vec4.prototype.scale = Vec4.prototype.mulScalar;
const shape = {
  Aabb: BoundingBox,
  Sphere: BoundingSphere,
  Plane: Plane
};
BoundingSphere.prototype.intersectRay = BoundingSphere.prototype.intersectsRay;

Frustum.prototype.update = function (projectionMatrix, viewMatrix) {
  const viewProj = new Mat4();
  viewProj.mul2(projectionMatrix, viewMatrix);
  this.setFromMat4(viewProj);
};

const ELEMENTTYPE_INT8 = TYPE_INT8;
const ELEMENTTYPE_UINT8 = TYPE_UINT8;
const ELEMENTTYPE_INT16 = TYPE_INT16;
const ELEMENTTYPE_UINT16 = TYPE_UINT16;
const ELEMENTTYPE_INT32 = TYPE_INT32;
const ELEMENTTYPE_UINT32 = TYPE_UINT32;
const ELEMENTTYPE_FLOAT32 = TYPE_FLOAT32;
function UnsupportedBrowserError(message) {
  this.name = 'UnsupportedBrowserError';
  this.message = message || '';
}
UnsupportedBrowserError.prototype = Error.prototype;
function ContextCreationError(message) {
  this.name = 'ContextCreationError';
  this.message = message || '';
}
ContextCreationError.prototype = Error.prototype;
const programlib = {
  begin: begin,
  dummyFragmentCode: dummyFragmentCode,
  end: end,
  fogCode: fogCode,
  gammaCode: gammaCode,
  precisionCode: precisionCode,
  skinCode: skinCode,
  tonemapCode: tonemapCode,
  versionCode: versionCode
};
const gfx = {
  ADDRESS_CLAMP_TO_EDGE: ADDRESS_CLAMP_TO_EDGE,
  ADDRESS_MIRRORED_REPEAT: ADDRESS_MIRRORED_REPEAT,
  ADDRESS_REPEAT: ADDRESS_REPEAT,
  BLENDMODE_ZERO: BLENDMODE_ZERO,
  BLENDMODE_ONE: BLENDMODE_ONE,
  BLENDMODE_SRC_COLOR: BLENDMODE_SRC_COLOR,
  BLENDMODE_ONE_MINUS_SRC_COLOR: BLENDMODE_ONE_MINUS_SRC_COLOR,
  BLENDMODE_DST_COLOR: BLENDMODE_DST_COLOR,
  BLENDMODE_ONE_MINUS_DST_COLOR: BLENDMODE_ONE_MINUS_DST_COLOR,
  BLENDMODE_SRC_ALPHA: BLENDMODE_SRC_ALPHA,
  BLENDMODE_SRC_ALPHA_SATURATE: BLENDMODE_SRC_ALPHA_SATURATE,
  BLENDMODE_ONE_MINUS_SRC_ALPHA: BLENDMODE_ONE_MINUS_SRC_ALPHA,
  BLENDMODE_DST_ALPHA: BLENDMODE_DST_ALPHA,
  BLENDMODE_ONE_MINUS_DST_ALPHA: BLENDMODE_ONE_MINUS_DST_ALPHA,
  BUFFER_STATIC: BUFFER_STATIC,
  BUFFER_DYNAMIC: BUFFER_DYNAMIC,
  BUFFER_STREAM: BUFFER_STREAM,
  CULLFACE_NONE: CULLFACE_NONE,
  CULLFACE_BACK: CULLFACE_BACK,
  CULLFACE_FRONT: CULLFACE_FRONT,
  CULLFACE_FRONTANDBACK: CULLFACE_FRONTANDBACK,
  ELEMENTTYPE_INT8: TYPE_INT8,
  ELEMENTTYPE_UINT8: TYPE_UINT8,
  ELEMENTTYPE_INT16: TYPE_INT16,
  ELEMENTTYPE_UINT16: TYPE_UINT16,
  ELEMENTTYPE_INT32: TYPE_INT32,
  ELEMENTTYPE_UINT32: TYPE_UINT32,
  ELEMENTTYPE_FLOAT32: TYPE_FLOAT32,
  FILTER_NEAREST: FILTER_NEAREST,
  FILTER_LINEAR: FILTER_LINEAR,
  FILTER_NEAREST_MIPMAP_NEAREST: FILTER_NEAREST_MIPMAP_NEAREST,
  FILTER_NEAREST_MIPMAP_LINEAR: FILTER_NEAREST_MIPMAP_LINEAR,
  FILTER_LINEAR_MIPMAP_NEAREST: FILTER_LINEAR_MIPMAP_NEAREST,
  FILTER_LINEAR_MIPMAP_LINEAR: FILTER_LINEAR_MIPMAP_LINEAR,
  INDEXFORMAT_UINT8: INDEXFORMAT_UINT8,
  INDEXFORMAT_UINT16: INDEXFORMAT_UINT16,
  INDEXFORMAT_UINT32: INDEXFORMAT_UINT32,
  PIXELFORMAT_R5_G6_B5: PIXELFORMAT_R5_G6_B5,
  PIXELFORMAT_R8_G8_B8: PIXELFORMAT_R8_G8_B8,
  PIXELFORMAT_R8_G8_B8_A8: PIXELFORMAT_R8_G8_B8_A8,
  PRIMITIVE_POINTS: PRIMITIVE_POINTS,
  PRIMITIVE_LINES: PRIMITIVE_LINES,
  PRIMITIVE_LINELOOP: PRIMITIVE_LINELOOP,
  PRIMITIVE_LINESTRIP: PRIMITIVE_LINESTRIP,
  PRIMITIVE_TRIANGLES: PRIMITIVE_TRIANGLES,
  PRIMITIVE_TRISTRIP: PRIMITIVE_TRISTRIP,
  PRIMITIVE_TRIFAN: PRIMITIVE_TRIFAN,
  SEMANTIC_POSITION: SEMANTIC_POSITION,
  SEMANTIC_NORMAL: SEMANTIC_NORMAL,
  SEMANTIC_COLOR: SEMANTIC_COLOR,
  SEMANTIC_TEXCOORD: SEMANTIC_TEXCOORD,
  SEMANTIC_TEXCOORD0: SEMANTIC_TEXCOORD0,
  SEMANTIC_TEXCOORD1: SEMANTIC_TEXCOORD1,
  SEMANTIC_ATTR0: SEMANTIC_ATTR0,
  SEMANTIC_ATTR1: SEMANTIC_ATTR1,
  SEMANTIC_ATTR2: SEMANTIC_ATTR2,
  SEMANTIC_ATTR3: SEMANTIC_ATTR3,
  TEXTURELOCK_READ: TEXTURELOCK_READ,
  TEXTURELOCK_WRITE: TEXTURELOCK_WRITE,
  drawQuadWithShader: drawQuadWithShader,
  programlib: programlib,
  shaderChunks: shaderChunks,
  ContextCreationError: ContextCreationError,
  Device: GraphicsDevice,
  IndexBuffer: IndexBuffer,
  ProgramLibrary: ProgramLibrary,
  RenderTarget: RenderTarget,
  ScopeId: ScopeId,
  Shader: Shader,
  ShaderInput: ShaderInput,
  Texture: Texture,
  UnsupportedBrowserError: UnsupportedBrowserError,
  VertexBuffer: VertexBuffer,
  VertexFormat: VertexFormat,
  VertexIterator: VertexIterator
};
const posteffect = {
  createFullscreenQuad: createFullscreenQuad,
  drawFullscreenQuad: drawFullscreenQuad,
  PostEffect: PostEffect$1,
  PostEffectQueue: PostEffectQueue
};
Object.defineProperty(shaderChunks, 'transformSkinnedVS', {
  get: function () {
    return '#define SKIN\n' + shaderChunks.transformVS;
  }
});
const deprecatedChunks = {
  'ambientPrefilteredCube.frag': 'ambientEnv.frag',
  'ambientPrefilteredCubeLod.frag': 'ambientEnv.frag',
  'dpAtlasQuad.frag': null,
  'genParaboloid.frag': null,
  'prefilterCubemap.frag': null,
  'reflectionDpAtlas.frag': 'reflectionEnv.frag',
  'reflectionPrefilteredCube.frag': 'reflectionEnv.frag',
  'reflectionPrefilteredCubeLod.frag': 'reflectionEnv.frag'
};
Object.keys(deprecatedChunks).forEach(chunkName => {
  deprecatedChunks[chunkName];
  Object.defineProperty(shaderChunks, chunkName, {
    get: function () {
      return null;
    },
    set: function () {}
  });
});
Object.defineProperties(RenderTarget.prototype, {
  _glFrameBuffer: {
    get: function () {
      return this.impl._glFrameBuffer;
    },
    set: function (rgbm) {}
  }
});

VertexFormat.prototype.update = function () {};

Object.defineProperties(Texture.prototype, {
  rgbm: {
    get: function () {
      return this.type === TEXTURETYPE_RGBM;
    },
    set: function (rgbm) {
      this.type = rgbm ? TEXTURETYPE_RGBM : TEXTURETYPE_DEFAULT;
    }
  },
  swizzleGGGR: {
    get: function () {
      return this.type === TEXTURETYPE_SWIZZLEGGGR;
    },
    set: function (swizzleGGGR) {
      this.type = swizzleGGGR ? TEXTURETYPE_SWIZZLEGGGR : TEXTURETYPE_DEFAULT;
    }
  },
  _glTexture: {
    get: function () {
      return this.impl._glTexture;
    }
  }
});
const PhongMaterial = StandardMaterial;
const scene = {
  partitionSkin: partitionSkin,
  procedural: {
    calculateTangents: calculateTangents,
    createMesh: createMesh$1,
    createTorus: createTorus,
    createCylinder: createCylinder,
    createCapsule: createCapsule,
    createCone: createCone,
    createSphere: createSphere,
    createPlane: createPlane,
    createBox: createBox
  },
  BasicMaterial: BasicMaterial,
  Command: Command,
  ForwardRenderer: ForwardRenderer,
  GraphNode: GraphNode,
  Material: Material,
  Mesh: Mesh,
  MeshInstance: MeshInstance,
  Model: Model,
  ParticleEmitter: ParticleEmitter,
  PhongMaterial: StandardMaterial,
  Picker: Picker,
  Projection: {
    ORTHOGRAPHIC: PROJECTION_ORTHOGRAPHIC,
    PERSPECTIVE: PROJECTION_PERSPECTIVE
  },
  Scene: Scene,
  Skin: Skin,
  SkinInstance: SkinInstance
};
Object.defineProperty(Scene.prototype, 'defaultMaterial', {
  get: function () {
    return getDefaultMaterial(getApplication().graphicsDevice);
  }
});
['128', '64', '32', '16', '8', '4'].forEach((size, index) => {
  Object.defineProperty(Scene.prototype, `skyboxPrefiltered${size}`, {
    get: function () {
      return this._prefilteredCubemaps[index];
    },
    set: function (value) {
      this._prefilteredCubemaps[index] = value;
      this.updateShaders = true;
    }
  });
});
Object.defineProperty(Scene.prototype, 'models', {
  get: function () {
    if (!this._models) {
      this._models = [];
    }

    return this._models;
  }
});

Scene.prototype._updateSkybox = function (device) {
  this._updateSky(device);
};

Scene.prototype.addModel = function (model) {
  if (this.containsModel(model)) return;
  const layer = this.layers.getLayerById(LAYERID_WORLD);
  if (!layer) return;
  layer.addMeshInstances(model.meshInstances);
  this.models.push(model);
};

Scene.prototype.addShadowCaster = function (model) {
  const layer = this.layers.getLayerById(LAYERID_WORLD);
  if (!layer) return;
  layer.addShadowCasters(model.meshInstances);
};

Scene.prototype.removeModel = function (model) {
  const index = this.models.indexOf(model);

  if (index !== -1) {
    const layer = this.layers.getLayerById(LAYERID_WORLD);
    if (!layer) return;
    layer.removeMeshInstances(model.meshInstances);
    this.models.splice(index, 1);
  }
};

Scene.prototype.removeShadowCasters = function (model) {
  const layer = this.layers.getLayerById(LAYERID_WORLD);
  if (!layer) return;
  layer.removeShadowCasters(model.meshInstances);
};

Scene.prototype.containsModel = function (model) {
  return this.models.indexOf(model) >= 0;
};

Scene.prototype.getModels = function (model) {
  return this.models;
};

Object.defineProperty(Batch.prototype, 'model', {
  get: function () {
    return null;
  }
});

ForwardRenderer.prototype.renderComposition = function (comp) {
  getApplication().renderComposition(comp);
};

ForwardRenderer.prototype.updateShader = function (meshInstance, objDefs, staticLightList, pass, sortedLights) {
  const scene = meshInstance.material._scene || getApplication().scene;
  return meshInstance.updatePassShader(scene, pass, staticLightList, sortedLights);
};

MeshInstance.prototype.syncAabb = function () {};

Morph.prototype.getTarget = function (index) {
  return this.targets[index];
};

GraphNode.prototype._dirtify = function (local) {
  if (local) this._dirtifyLocal();else this._dirtifyWorld();
};

GraphNode.prototype.addLabel = function (label) {
  this._labels[label] = true;
};

GraphNode.prototype.getLabels = function () {
  return Object.keys(this._labels);
};

GraphNode.prototype.hasLabel = function (label) {
  return !!this._labels[label];
};

GraphNode.prototype.removeLabel = function (label) {
  delete this._labels[label];
};

GraphNode.prototype.findByLabel = function (label, results = []) {
  if (this.hasLabel(label)) {
    results.push(this);
  }

  for (let i = 0; i < this._children.length; ++i) {
    results = this._children[i].findByLabel(label, results);
  }

  return results;
};

GraphNode.prototype.getChildren = function () {
  return this.children;
};

GraphNode.prototype.getName = function () {
  return this.name;
};

GraphNode.prototype.getPath = function () {
  return this.path;
};

GraphNode.prototype.getRoot = function () {
  return this.root;
};

GraphNode.prototype.getParent = function () {
  return this.parent;
};

GraphNode.prototype.setName = function (name) {
  this.name = name;
};

Material.prototype.getName = function () {
  return this.name;
};

Material.prototype.setName = function (name) {
  this.name = name;
};

Material.prototype.getShader = function () {
  return this.shader;
};

Material.prototype.setShader = function (shader) {
  this.shader = shader;
};

function _defineAlias(newName, oldName) {
  Object.defineProperty(StandardMaterial.prototype, oldName, {
    get: function () {
      return this[newName];
    },
    set: function (value) {
      this[newName] = value;
    }
  });
}

_defineAlias('diffuseTint', 'diffuseMapTint');

_defineAlias('specularTint', 'specularMapTint');

_defineAlias('emissiveTint', 'emissiveMapTint');

_defineAlias('aoVertexColor', 'aoMapVertexColor');

_defineAlias('diffuseVertexColor', 'diffuseMapVertexColor');

_defineAlias('specularVertexColor', 'specularMapVertexColor');

_defineAlias('emissiveVertexColor', 'emissiveMapVertexColor');

_defineAlias('metalnessVertexColor', 'metalnessMapVertexColor');

_defineAlias('glossVertexColor', 'glossMapVertexColor');

_defineAlias('opacityVertexColor', 'opacityMapVertexColor');

_defineAlias('lightVertexColor', 'lightMapVertexColor');

const anim = {
  Animation: Animation,
  Key: Key,
  Node: Node$1,
  Skeleton: Skeleton
};

Animation.prototype.getDuration = function () {
  return this.duration;
};

Animation.prototype.getName = function () {
  return this.name;
};

Animation.prototype.getNodes = function () {
  return this.nodes;
};

Animation.prototype.setDuration = function (duration) {
  this.duration = duration;
};

Animation.prototype.setName = function (name) {
  this.name = name;
};

Skeleton.prototype.getAnimation = function () {
  return this.animation;
};

Skeleton.prototype.getCurrentTime = function () {
  return this.currentTime;
};

Skeleton.prototype.getLooping = function () {
  return this.looping;
};

Skeleton.prototype.getNumNodes = function () {
  return this.numNodes;
};

Skeleton.prototype.setAnimation = function (animation) {
  this.animation = animation;
};

Skeleton.prototype.setCurrentTime = function (time) {
  this.currentTime = time;
};

Skeleton.prototype.setLooping = function (looping) {
  this.looping = looping;
};

const audio = {
  AudioManager: SoundManager,
  Channel: Channel,
  Channel3d: Channel3d,
  Listener: Listener,
  Sound: Sound
};

SoundManager.prototype.getListener = function () {
  return this.listener;
};

SoundManager.prototype.getVolume = function () {
  return this.volume;
};

SoundManager.prototype.setVolume = function (volume) {
  this.volume = volume;
};

const asset = {
  ASSET_ANIMATION: 'animation',
  ASSET_AUDIO: 'audio',
  ASSET_IMAGE: 'image',
  ASSET_JSON: 'json',
  ASSET_MODEL: 'model',
  ASSET_MATERIAL: 'material',
  ASSET_TEXT: 'text',
  ASSET_TEXTURE: 'texture',
  ASSET_CUBEMAP: 'cubemap',
  ASSET_SCRIPT: 'script'
};

AssetRegistry.prototype.getAssetById = function (id) {
  return this.get(id);
};

Object.defineProperty(XrInputSource.prototype, 'ray', {
  get: function () {
    return this._rayLocal;
  }
});
Object.defineProperty(XrInputSource.prototype, 'position', {
  get: function () {
    return this._localPosition;
  }
});
Object.defineProperty(XrInputSource.prototype, 'rotation', {
  get: function () {
    return this._localRotation;
  }
});
const input = {
  getTouchTargetCoords: getTouchTargetCoords,
  Controller: Controller,
  GamePads: GamePads,
  Keyboard: Keyboard,
  KeyboardEvent: KeyboardEvent,
  Mouse: Mouse,
  MouseEvent: MouseEvent$1,
  Touch: Touch,
  TouchDevice: TouchDevice,
  TouchEvent: TouchEvent
};
Object.defineProperty(ElementInput.prototype, 'wheel', {
  get: function () {
    return this.wheelDelta * -2;
  }
});
Object.defineProperty(MouseEvent$1.prototype, 'wheel', {
  get: function () {
    return this.wheelDelta * -2;
  }
});
const RIGIDBODY_TYPE_STATIC = BODYTYPE_STATIC;
const RIGIDBODY_TYPE_DYNAMIC = BODYTYPE_DYNAMIC;
const RIGIDBODY_TYPE_KINEMATIC = BODYTYPE_KINEMATIC;
const RIGIDBODY_CF_STATIC_OBJECT = BODYFLAG_STATIC_OBJECT;
const RIGIDBODY_CF_KINEMATIC_OBJECT = BODYFLAG_KINEMATIC_OBJECT;
const RIGIDBODY_CF_NORESPONSE_OBJECT = BODYFLAG_NORESPONSE_OBJECT;
const RIGIDBODY_ACTIVE_TAG = BODYSTATE_ACTIVE_TAG;
const RIGIDBODY_ISLAND_SLEEPING = BODYSTATE_ISLAND_SLEEPING;
const RIGIDBODY_WANTS_DEACTIVATION = BODYSTATE_WANTS_DEACTIVATION;
const RIGIDBODY_DISABLE_DEACTIVATION = BODYSTATE_DISABLE_DEACTIVATION;
const RIGIDBODY_DISABLE_SIMULATION = BODYSTATE_DISABLE_SIMULATION;
const fw = {
  Application: Application,
  Component: Component,
  ComponentSystem: ComponentSystem,
  Entity: Entity,
  FillMode: {
    NONE: FILLMODE_NONE,
    FILL_WINDOW: FILLMODE_FILL_WINDOW,
    KEEP_ASPECT: FILLMODE_KEEP_ASPECT
  },
  ResolutionMode: {
    AUTO: RESOLUTION_AUTO,
    FIXED: RESOLUTION_FIXED
  }
};

Application.prototype.isFullscreen = function () {
  return !!document.fullscreenElement;
};

Application.prototype.enableFullscreen = function (element, success, error) {
  element = element || this.graphicsDevice.canvas;

  const s = function s() {
    success();
    document.removeEventListener('fullscreenchange', s);
  };

  const e = function e() {
    error();
    document.removeEventListener('fullscreenerror', e);
  };

  if (success) {
    document.addEventListener('fullscreenchange', s, false);
  }

  if (error) {
    document.addEventListener('fullscreenerror', e, false);
  }

  if (element.requestFullscreen) {
    element.requestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
  } else {
    error();
  }
};

Application.prototype.disableFullscreen = function (success) {
  const s = function s() {
    success();
    document.removeEventListener('fullscreenchange', s);
  };

  if (success) {
    document.addEventListener('fullscreenchange', s, false);
  }

  document.exitFullscreen();
};

Application.prototype.getSceneUrl = function (name) {
  const entry = this.scenes.find(name);

  if (entry) {
    return entry.url;
  }

  return null;
};

Application.prototype.loadScene = function (url, callback) {
  this.scenes.loadScene(url, callback);
};

Application.prototype.loadSceneHierarchy = function (url, callback) {
  this.scenes.loadSceneHierarchy(url, callback);
};

Application.prototype.loadSceneSettings = function (url, callback) {
  this.scenes.loadSceneSettings(url, callback);
};

Application.prototype.renderMeshInstance = function (meshInstance, options) {
  const layer = options != null && options.layer ? options.layer : this.scene.defaultDrawLayer;
  this.scene.immediate.drawMesh(null, null, null, meshInstance, layer);
};

Application.prototype.renderMesh = function (mesh, material, matrix, options) {
  const layer = options != null && options.layer ? options.layer : this.scene.defaultDrawLayer;
  this.scene.immediate.drawMesh(material, matrix, mesh, null, layer);
};

Application.prototype._addLines = function (positions, colors, options) {
  const layer = options && options.layer ? options.layer : this.scene.layers.getLayerById(LAYERID_IMMEDIATE);
  const depthTest = options && options.depthTest !== undefined ? options.depthTest : true;
  const batch = this.scene.immediate.getBatch(layer, depthTest);
  batch.addLines(positions, colors);
};

Application.prototype.renderLine = function (start, end, color) {
  let endColor = color;
  let options;
  const arg3 = arguments[3];
  const arg4 = arguments[4];

  if (arg3 instanceof Color) {
    endColor = arg3;

    if (typeof arg4 === 'number') {
      if (arg4 === LINEBATCH_OVERLAY) {
        options = {
          layer: this.scene.layers.getLayerById(LAYERID_IMMEDIATE),
          depthTest: false
        };
      } else {
        options = {
          layer: this.scene.layers.getLayerById(LAYERID_IMMEDIATE),
          depthTest: true
        };
      }
    } else {
      options = arg4;
    }
  } else if (typeof arg3 === 'number') {
    endColor = color;

    if (arg3 === LINEBATCH_OVERLAY) {
      options = {
        layer: this.scene.layers.getLayerById(LAYERID_IMMEDIATE),
        depthTest: false
      };
    } else {
      options = {
        layer: this.scene.layers.getLayerById(LAYERID_IMMEDIATE),
        depthTest: true
      };
    }
  } else if (arg3) {
    options = arg3;
  }

  this._addLines([start, end], [color, endColor], options);
};

Application.prototype.renderLines = function (position, color, options) {
  if (!options) {
    options = {
      layer: this.scene.layers.getLayerById(LAYERID_IMMEDIATE),
      depthTest: true
    };
  } else if (typeof options === 'number') {
    if (options === LINEBATCH_OVERLAY) {
      options = {
        layer: this.scene.layers.getLayerById(LAYERID_IMMEDIATE),
        depthTest: false
      };
    } else {
      options = {
        layer: this.scene.layers.getLayerById(LAYERID_IMMEDIATE),
        depthTest: true
      };
    }
  }

  const multiColor = !!color.length;

  if (multiColor) {
    if (position.length !== color.length) {
      console.error('renderLines: position/color arrays have different lengths');
      return;
    }
  }

  if (position.length % 2 !== 0) {
    console.error('renderLines: array length is not divisible by 2');
    return;
  }

  this._addLines(position, color, options);
};

Application.prototype.enableVr = function () {};

Object.defineProperty(CameraComponent.prototype, 'node', {
  get: function () {
    return this.entity;
  }
});
Object.defineProperty(LightComponent.prototype, 'enable', {
  get: function () {
    return this.enabled;
  },
  set: function (value) {
    this.enabled = value;
  }
});

ModelComponent.prototype.setVisible = function (visible) {
  this.enabled = visible;
};

Object.defineProperty(ModelComponent.prototype, 'aabb', {
  get: function () {
    return null;
  },
  set: function (type) {}
});
Object.defineProperty(RenderComponent.prototype, 'aabb', {
  get: function () {
    return null;
  },
  set: function (type) {}
});
Object.defineProperty(RigidBodyComponent.prototype, 'bodyType', {
  get: function () {
    return this.type;
  },
  set: function (type) {
    this.type = type;
  }
});

RigidBodyComponent.prototype.syncBodyToEntity = function () {
  this._updateDynamic();
};

RigidBodyComponentSystem.prototype.setGravity = function () {
  if (arguments.length === 1) {
    this.gravity.copy(arguments[0]);
  } else {
    this.gravity.set(arguments[0], arguments[1], arguments[2]);
  }
};

function basisSetDownloadConfig(glueUrl, wasmUrl, fallbackUrl) {
  basisInitialize({
    glueUrl: glueUrl,
    wasmUrl: wasmUrl,
    fallbackUrl: fallbackUrl,
    lazyInit: true
  });
}
function prefilterCubemap(options) {}

var pc$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  TRACEID_RENDER_ACTION: TRACEID_RENDER_ACTION,
  TRACEID_RENDER_FRAME: TRACEID_RENDER_FRAME,
  TRACEID_RENDER_PASS: TRACEID_RENDER_PASS,
  TRACEID_RENDER_PASS_DETAIL: TRACEID_RENDER_PASS_DETAIL,
  TRACEID_RENDER_TARGET_ALLOC: TRACEID_RENDER_TARGET_ALLOC,
  TRACEID_SHADER_ALLOC: TRACEID_SHADER_ALLOC,
  TRACEID_TEXTURE_ALLOC: TRACEID_TEXTURE_ALLOC,
  TRACEID_VRAM_IB: TRACEID_VRAM_IB,
  TRACEID_VRAM_TEXTURE: TRACEID_VRAM_TEXTURE,
  TRACEID_VRAM_VB: TRACEID_VRAM_VB,
  apps: apps,
  common: common,
  config: config,
  data: data,
  extend: extend$1,
  isDefined: isDefined,
  revision: revision,
  type: type$1,
  version: version,
  events: events,
  guid: guid,
  path: path,
  platform: platform,
  string: string,
  EventHandler: EventHandler,
  IndexedList: IndexedList,
  WasmModule: WasmModule,
  ReadStream: ReadStream,
  SortedLoopArray: SortedLoopArray,
  Tags: Tags,
  Timer: Timer,
  now: now,
  URI: URI,
  createURI: createURI,
  Tracing: Tracing,
  Http: Http,
  http: http,
  CURVE_CARDINAL: CURVE_CARDINAL$1,
  CURVE_CATMULL: CURVE_CATMULL$1,
  CURVE_LINEAR: CURVE_LINEAR$2,
  CURVE_SMOOTHSTEP: CURVE_SMOOTHSTEP$1,
  CURVE_SPLINE: CURVE_SPLINE$2,
  CURVE_STEP: CURVE_STEP$2,
  math: math$1,
  Color: Color,
  Curve: Curve$1,
  CurveSet: CurveSet$1,
  Mat3: Mat3,
  Mat4: Mat4,
  Quat: Quat,
  Vec2: Vec2,
  Vec3: Vec3,
  Vec4: Vec4,
  BoundingBox: BoundingBox,
  BoundingSphere: BoundingSphere,
  Frustum: Frustum,
  OrientedBox: OrientedBox,
  Plane: Plane,
  Ray: Ray,
  ADDRESS_CLAMP_TO_EDGE: ADDRESS_CLAMP_TO_EDGE,
  ADDRESS_MIRRORED_REPEAT: ADDRESS_MIRRORED_REPEAT,
  ADDRESS_REPEAT: ADDRESS_REPEAT,
  BINDGROUP_MESH: BINDGROUP_MESH,
  BINDGROUP_VIEW: BINDGROUP_VIEW,
  BLENDEQUATION_ADD: BLENDEQUATION_ADD,
  BLENDEQUATION_MAX: BLENDEQUATION_MAX,
  BLENDEQUATION_MIN: BLENDEQUATION_MIN,
  BLENDEQUATION_REVERSE_SUBTRACT: BLENDEQUATION_REVERSE_SUBTRACT,
  BLENDEQUATION_SUBTRACT: BLENDEQUATION_SUBTRACT,
  BLENDMODE_CONSTANT_ALPHA: BLENDMODE_CONSTANT_ALPHA,
  BLENDMODE_CONSTANT_COLOR: BLENDMODE_CONSTANT_COLOR,
  BLENDMODE_DST_ALPHA: BLENDMODE_DST_ALPHA,
  BLENDMODE_DST_COLOR: BLENDMODE_DST_COLOR,
  BLENDMODE_ONE: BLENDMODE_ONE,
  BLENDMODE_ONE_MINUS_CONSTANT_ALPHA: BLENDMODE_ONE_MINUS_CONSTANT_ALPHA,
  BLENDMODE_ONE_MINUS_CONSTANT_COLOR: BLENDMODE_ONE_MINUS_CONSTANT_COLOR,
  BLENDMODE_ONE_MINUS_DST_ALPHA: BLENDMODE_ONE_MINUS_DST_ALPHA,
  BLENDMODE_ONE_MINUS_DST_COLOR: BLENDMODE_ONE_MINUS_DST_COLOR,
  BLENDMODE_ONE_MINUS_SRC_ALPHA: BLENDMODE_ONE_MINUS_SRC_ALPHA,
  BLENDMODE_ONE_MINUS_SRC_COLOR: BLENDMODE_ONE_MINUS_SRC_COLOR,
  BLENDMODE_SRC_ALPHA: BLENDMODE_SRC_ALPHA,
  BLENDMODE_SRC_ALPHA_SATURATE: BLENDMODE_SRC_ALPHA_SATURATE,
  BLENDMODE_SRC_COLOR: BLENDMODE_SRC_COLOR,
  BLENDMODE_ZERO: BLENDMODE_ZERO,
  BUFFER_DYNAMIC: BUFFER_DYNAMIC,
  BUFFER_GPUDYNAMIC: BUFFER_GPUDYNAMIC,
  BUFFER_STATIC: BUFFER_STATIC,
  BUFFER_STREAM: BUFFER_STREAM,
  CHUNKAPI_1_51: CHUNKAPI_1_51,
  CHUNKAPI_1_55: CHUNKAPI_1_55,
  CHUNKAPI_1_56: CHUNKAPI_1_56,
  CHUNKAPI_1_57: CHUNKAPI_1_57,
  CLEARFLAG_COLOR: CLEARFLAG_COLOR,
  CLEARFLAG_DEPTH: CLEARFLAG_DEPTH,
  CLEARFLAG_STENCIL: CLEARFLAG_STENCIL,
  CUBEFACE_NEGX: CUBEFACE_NEGX,
  CUBEFACE_NEGY: CUBEFACE_NEGY,
  CUBEFACE_NEGZ: CUBEFACE_NEGZ,
  CUBEFACE_POSX: CUBEFACE_POSX,
  CUBEFACE_POSY: CUBEFACE_POSY,
  CUBEFACE_POSZ: CUBEFACE_POSZ,
  CULLFACE_BACK: CULLFACE_BACK,
  CULLFACE_FRONT: CULLFACE_FRONT,
  CULLFACE_FRONTANDBACK: CULLFACE_FRONTANDBACK,
  CULLFACE_NONE: CULLFACE_NONE,
  DEVICETYPE_WEBGL: DEVICETYPE_WEBGL,
  DEVICETYPE_WEBGPU: DEVICETYPE_WEBGPU,
  FILTER_LINEAR: FILTER_LINEAR,
  FILTER_LINEAR_MIPMAP_LINEAR: FILTER_LINEAR_MIPMAP_LINEAR,
  FILTER_LINEAR_MIPMAP_NEAREST: FILTER_LINEAR_MIPMAP_NEAREST,
  FILTER_NEAREST: FILTER_NEAREST,
  FILTER_NEAREST_MIPMAP_LINEAR: FILTER_NEAREST_MIPMAP_LINEAR,
  FILTER_NEAREST_MIPMAP_NEAREST: FILTER_NEAREST_MIPMAP_NEAREST,
  FUNC_ALWAYS: FUNC_ALWAYS,
  FUNC_EQUAL: FUNC_EQUAL,
  FUNC_GREATER: FUNC_GREATER,
  FUNC_GREATEREQUAL: FUNC_GREATEREQUAL,
  FUNC_LESS: FUNC_LESS,
  FUNC_LESSEQUAL: FUNC_LESSEQUAL,
  FUNC_NEVER: FUNC_NEVER,
  FUNC_NOTEQUAL: FUNC_NOTEQUAL,
  INDEXFORMAT_UINT16: INDEXFORMAT_UINT16,
  INDEXFORMAT_UINT32: INDEXFORMAT_UINT32,
  INDEXFORMAT_UINT8: INDEXFORMAT_UINT8,
  PIXELFORMAT_111110F: PIXELFORMAT_111110F,
  PIXELFORMAT_A8: PIXELFORMAT_A8,
  PIXELFORMAT_ASTC_4x4: PIXELFORMAT_ASTC_4x4,
  PIXELFORMAT_ATC_RGB: PIXELFORMAT_ATC_RGB,
  PIXELFORMAT_ATC_RGBA: PIXELFORMAT_ATC_RGBA,
  PIXELFORMAT_DEPTH: PIXELFORMAT_DEPTH,
  PIXELFORMAT_DEPTHSTENCIL: PIXELFORMAT_DEPTHSTENCIL,
  PIXELFORMAT_DXT1: PIXELFORMAT_DXT1,
  PIXELFORMAT_DXT3: PIXELFORMAT_DXT3,
  PIXELFORMAT_DXT5: PIXELFORMAT_DXT5,
  PIXELFORMAT_ETC1: PIXELFORMAT_ETC1,
  PIXELFORMAT_ETC2_RGB: PIXELFORMAT_ETC2_RGB,
  PIXELFORMAT_ETC2_RGBA: PIXELFORMAT_ETC2_RGBA,
  PIXELFORMAT_L8: PIXELFORMAT_L8,
  PIXELFORMAT_L8_A8: PIXELFORMAT_L8_A8,
  PIXELFORMAT_PVRTC_2BPP_RGBA_1: PIXELFORMAT_PVRTC_2BPP_RGBA_1,
  PIXELFORMAT_PVRTC_2BPP_RGB_1: PIXELFORMAT_PVRTC_2BPP_RGB_1,
  PIXELFORMAT_PVRTC_4BPP_RGBA_1: PIXELFORMAT_PVRTC_4BPP_RGBA_1,
  PIXELFORMAT_PVRTC_4BPP_RGB_1: PIXELFORMAT_PVRTC_4BPP_RGB_1,
  PIXELFORMAT_R32F: PIXELFORMAT_R32F,
  PIXELFORMAT_R4_G4_B4_A4: PIXELFORMAT_R4_G4_B4_A4,
  PIXELFORMAT_R5_G5_B5_A1: PIXELFORMAT_R5_G5_B5_A1,
  PIXELFORMAT_R5_G6_B5: PIXELFORMAT_R5_G6_B5,
  PIXELFORMAT_R8_G8_B8: PIXELFORMAT_R8_G8_B8,
  PIXELFORMAT_R8_G8_B8_A8: PIXELFORMAT_R8_G8_B8_A8,
  PIXELFORMAT_RGB16F: PIXELFORMAT_RGB16F,
  PIXELFORMAT_RGB32F: PIXELFORMAT_RGB32F,
  PIXELFORMAT_RGBA16F: PIXELFORMAT_RGBA16F,
  PIXELFORMAT_RGBA32F: PIXELFORMAT_RGBA32F,
  PIXELFORMAT_SRGB: PIXELFORMAT_SRGB,
  PIXELFORMAT_SRGBA: PIXELFORMAT_SRGBA,
  PRIMITIVE_LINELOOP: PRIMITIVE_LINELOOP,
  PRIMITIVE_LINES: PRIMITIVE_LINES,
  PRIMITIVE_LINESTRIP: PRIMITIVE_LINESTRIP,
  PRIMITIVE_POINTS: PRIMITIVE_POINTS,
  PRIMITIVE_TRIANGLES: PRIMITIVE_TRIANGLES,
  PRIMITIVE_TRIFAN: PRIMITIVE_TRIFAN,
  PRIMITIVE_TRISTRIP: PRIMITIVE_TRISTRIP,
  SAMPLETYPE_DEPTH: SAMPLETYPE_DEPTH,
  SAMPLETYPE_FLOAT: SAMPLETYPE_FLOAT,
  SAMPLETYPE_UNFILTERABLE_FLOAT: SAMPLETYPE_UNFILTERABLE_FLOAT,
  SEMANTIC_ATTR: SEMANTIC_ATTR,
  SEMANTIC_ATTR0: SEMANTIC_ATTR0,
  SEMANTIC_ATTR1: SEMANTIC_ATTR1,
  SEMANTIC_ATTR10: SEMANTIC_ATTR10,
  SEMANTIC_ATTR11: SEMANTIC_ATTR11,
  SEMANTIC_ATTR12: SEMANTIC_ATTR12,
  SEMANTIC_ATTR13: SEMANTIC_ATTR13,
  SEMANTIC_ATTR14: SEMANTIC_ATTR14,
  SEMANTIC_ATTR15: SEMANTIC_ATTR15,
  SEMANTIC_ATTR2: SEMANTIC_ATTR2,
  SEMANTIC_ATTR3: SEMANTIC_ATTR3,
  SEMANTIC_ATTR4: SEMANTIC_ATTR4,
  SEMANTIC_ATTR5: SEMANTIC_ATTR5,
  SEMANTIC_ATTR6: SEMANTIC_ATTR6,
  SEMANTIC_ATTR7: SEMANTIC_ATTR7,
  SEMANTIC_ATTR8: SEMANTIC_ATTR8,
  SEMANTIC_ATTR9: SEMANTIC_ATTR9,
  SEMANTIC_BLENDINDICES: SEMANTIC_BLENDINDICES,
  SEMANTIC_BLENDWEIGHT: SEMANTIC_BLENDWEIGHT,
  SEMANTIC_COLOR: SEMANTIC_COLOR,
  SEMANTIC_NORMAL: SEMANTIC_NORMAL,
  SEMANTIC_POSITION: SEMANTIC_POSITION,
  SEMANTIC_TANGENT: SEMANTIC_TANGENT,
  SEMANTIC_TEXCOORD: SEMANTIC_TEXCOORD,
  SEMANTIC_TEXCOORD0: SEMANTIC_TEXCOORD0,
  SEMANTIC_TEXCOORD1: SEMANTIC_TEXCOORD1,
  SEMANTIC_TEXCOORD2: SEMANTIC_TEXCOORD2,
  SEMANTIC_TEXCOORD3: SEMANTIC_TEXCOORD3,
  SEMANTIC_TEXCOORD4: SEMANTIC_TEXCOORD4,
  SEMANTIC_TEXCOORD5: SEMANTIC_TEXCOORD5,
  SEMANTIC_TEXCOORD6: SEMANTIC_TEXCOORD6,
  SEMANTIC_TEXCOORD7: SEMANTIC_TEXCOORD7,
  SHADERSTAGE_COMPUTE: SHADERSTAGE_COMPUTE,
  SHADERSTAGE_FRAGMENT: SHADERSTAGE_FRAGMENT,
  SHADERSTAGE_VERTEX: SHADERSTAGE_VERTEX,
  SHADERTAG_MATERIAL: SHADERTAG_MATERIAL,
  STENCILOP_DECREMENT: STENCILOP_DECREMENT,
  STENCILOP_DECREMENTWRAP: STENCILOP_DECREMENTWRAP,
  STENCILOP_INCREMENT: STENCILOP_INCREMENT,
  STENCILOP_INCREMENTWRAP: STENCILOP_INCREMENTWRAP,
  STENCILOP_INVERT: STENCILOP_INVERT,
  STENCILOP_KEEP: STENCILOP_KEEP,
  STENCILOP_REPLACE: STENCILOP_REPLACE,
  STENCILOP_ZERO: STENCILOP_ZERO,
  TEXHINT_ASSET: TEXHINT_ASSET,
  TEXHINT_LIGHTMAP: TEXHINT_LIGHTMAP,
  TEXHINT_NONE: TEXHINT_NONE,
  TEXHINT_SHADOWMAP: TEXHINT_SHADOWMAP,
  TEXTUREDIMENSION_1D: TEXTUREDIMENSION_1D,
  TEXTUREDIMENSION_2D: TEXTUREDIMENSION_2D,
  TEXTUREDIMENSION_2D_ARRAY: TEXTUREDIMENSION_2D_ARRAY,
  TEXTUREDIMENSION_3D: TEXTUREDIMENSION_3D,
  TEXTUREDIMENSION_CUBE: TEXTUREDIMENSION_CUBE,
  TEXTUREDIMENSION_CUBE_ARRAY: TEXTUREDIMENSION_CUBE_ARRAY,
  TEXTURELOCK_READ: TEXTURELOCK_READ,
  TEXTURELOCK_WRITE: TEXTURELOCK_WRITE,
  TEXTUREPROJECTION_CUBE: TEXTUREPROJECTION_CUBE,
  TEXTUREPROJECTION_EQUIRECT: TEXTUREPROJECTION_EQUIRECT,
  TEXTUREPROJECTION_NONE: TEXTUREPROJECTION_NONE,
  TEXTUREPROJECTION_OCTAHEDRAL: TEXTUREPROJECTION_OCTAHEDRAL,
  TEXTURETYPE_DEFAULT: TEXTURETYPE_DEFAULT,
  TEXTURETYPE_RGBE: TEXTURETYPE_RGBE,
  TEXTURETYPE_RGBM: TEXTURETYPE_RGBM,
  TEXTURETYPE_RGBP: TEXTURETYPE_RGBP,
  TEXTURETYPE_SWIZZLEGGGR: TEXTURETYPE_SWIZZLEGGGR,
  TYPE_FLOAT32: TYPE_FLOAT32,
  TYPE_INT16: TYPE_INT16,
  TYPE_INT32: TYPE_INT32,
  TYPE_INT8: TYPE_INT8,
  TYPE_UINT16: TYPE_UINT16,
  TYPE_UINT32: TYPE_UINT32,
  TYPE_UINT8: TYPE_UINT8,
  UNIFORMTYPE_BOOL: UNIFORMTYPE_BOOL,
  UNIFORMTYPE_BVEC2: UNIFORMTYPE_BVEC2,
  UNIFORMTYPE_BVEC3: UNIFORMTYPE_BVEC3,
  UNIFORMTYPE_BVEC4: UNIFORMTYPE_BVEC4,
  UNIFORMTYPE_FLOAT: UNIFORMTYPE_FLOAT,
  UNIFORMTYPE_FLOATARRAY: UNIFORMTYPE_FLOATARRAY,
  UNIFORMTYPE_INT: UNIFORMTYPE_INT,
  UNIFORMTYPE_IVEC2: UNIFORMTYPE_IVEC2,
  UNIFORMTYPE_IVEC3: UNIFORMTYPE_IVEC3,
  UNIFORMTYPE_IVEC4: UNIFORMTYPE_IVEC4,
  UNIFORMTYPE_MAT2: UNIFORMTYPE_MAT2,
  UNIFORMTYPE_MAT3: UNIFORMTYPE_MAT3,
  UNIFORMTYPE_MAT4: UNIFORMTYPE_MAT4,
  UNIFORMTYPE_TEXTURE2D: UNIFORMTYPE_TEXTURE2D,
  UNIFORMTYPE_TEXTURE2D_SHADOW: UNIFORMTYPE_TEXTURE2D_SHADOW,
  UNIFORMTYPE_TEXTURE3D: UNIFORMTYPE_TEXTURE3D,
  UNIFORMTYPE_TEXTURECUBE: UNIFORMTYPE_TEXTURECUBE,
  UNIFORMTYPE_TEXTURECUBE_SHADOW: UNIFORMTYPE_TEXTURECUBE_SHADOW,
  UNIFORMTYPE_VEC2: UNIFORMTYPE_VEC2,
  UNIFORMTYPE_VEC2ARRAY: UNIFORMTYPE_VEC2ARRAY,
  UNIFORMTYPE_VEC3: UNIFORMTYPE_VEC3,
  UNIFORMTYPE_VEC3ARRAY: UNIFORMTYPE_VEC3ARRAY,
  UNIFORMTYPE_VEC4: UNIFORMTYPE_VEC4,
  UNIFORMTYPE_VEC4ARRAY: UNIFORMTYPE_VEC4ARRAY,
  UNIFORM_BUFFER_DEFAULT_SLOT_NAME: UNIFORM_BUFFER_DEFAULT_SLOT_NAME,
  bindGroupNames: bindGroupNames,
  semanticToLocation: semanticToLocation,
  typedArrayIndexFormats: typedArrayIndexFormats,
  typedArrayIndexFormatsByteSize: typedArrayIndexFormatsByteSize,
  typedArrayToType: typedArrayToType,
  typedArrayTypes: typedArrayTypes,
  typedArrayTypesByteSize: typedArrayTypesByteSize,
  uniformTypeToName: uniformTypeToName,
  drawQuadWithShader: drawQuadWithShader,
  drawTexture: drawTexture,
  shFromCubemap: shFromCubemap,
  reprojectTexture: reprojectTexture,
  createShader: createShader,
  createShaderFromCode: createShaderFromCode,
  shaderChunks: shaderChunks,
  shaderChunksLightmapper: shaderChunksLightmapper,
  GraphicsDevice: GraphicsDevice,
  EnvLighting: EnvLighting,
  IndexBuffer: IndexBuffer,
  PostEffect: PostEffect$1,
  drawFullscreenQuad: drawFullscreenQuad,
  ProgramLibrary: ProgramLibrary,
  RenderTarget: RenderTarget,
  ScopeId: ScopeId,
  ScopeSpace: ScopeSpace,
  Shader: Shader,
  Texture: Texture,
  TransformFeedback: TransformFeedback,
  VertexBuffer: VertexBuffer,
  VertexFormat: VertexFormat,
  VertexIterator: VertexIterator,
  WebglGraphicsDevice: WebglGraphicsDevice,
  ASPECT_AUTO: ASPECT_AUTO,
  ASPECT_MANUAL: ASPECT_MANUAL,
  BAKE_COLOR: BAKE_COLOR,
  BAKE_COLORDIR: BAKE_COLORDIR,
  BLEND_ADDITIVE: BLEND_ADDITIVE,
  BLEND_ADDITIVEALPHA: BLEND_ADDITIVEALPHA,
  BLEND_MAX: BLEND_MAX,
  BLEND_MIN: BLEND_MIN,
  BLEND_MULTIPLICATIVE: BLEND_MULTIPLICATIVE,
  BLEND_MULTIPLICATIVE2X: BLEND_MULTIPLICATIVE2X,
  BLEND_NONE: BLEND_NONE,
  BLEND_NORMAL: BLEND_NORMAL,
  BLEND_PREMULTIPLIED: BLEND_PREMULTIPLIED,
  BLEND_SCREEN: BLEND_SCREEN,
  BLEND_SUBTRACTIVE: BLEND_SUBTRACTIVE,
  BLUR_BOX: BLUR_BOX,
  BLUR_GAUSSIAN: BLUR_GAUSSIAN,
  COMPUPDATED_BLEND: COMPUPDATED_BLEND,
  COMPUPDATED_CAMERAS: COMPUPDATED_CAMERAS,
  COMPUPDATED_INSTANCES: COMPUPDATED_INSTANCES,
  COMPUPDATED_LIGHTS: COMPUPDATED_LIGHTS,
  CUBEPROJ_BOX: CUBEPROJ_BOX,
  CUBEPROJ_NONE: CUBEPROJ_NONE,
  DETAILMODE_ADD: DETAILMODE_ADD,
  DETAILMODE_MAX: DETAILMODE_MAX,
  DETAILMODE_MIN: DETAILMODE_MIN,
  DETAILMODE_MUL: DETAILMODE_MUL,
  DETAILMODE_OVERLAY: DETAILMODE_OVERLAY,
  DETAILMODE_SCREEN: DETAILMODE_SCREEN,
  EMITTERSHAPE_BOX: EMITTERSHAPE_BOX,
  EMITTERSHAPE_SPHERE: EMITTERSHAPE_SPHERE,
  FOG_EXP: FOG_EXP,
  FOG_EXP2: FOG_EXP2,
  FOG_LINEAR: FOG_LINEAR,
  FOG_NONE: FOG_NONE,
  FRESNEL_NONE: FRESNEL_NONE,
  FRESNEL_SCHLICK: FRESNEL_SCHLICK,
  GAMMA_NONE: GAMMA_NONE,
  GAMMA_SRGB: GAMMA_SRGB,
  GAMMA_SRGBFAST: GAMMA_SRGBFAST,
  GAMMA_SRGBHDR: GAMMA_SRGBHDR,
  LAYERID_DEPTH: LAYERID_DEPTH,
  LAYERID_IMMEDIATE: LAYERID_IMMEDIATE,
  LAYERID_SKYBOX: LAYERID_SKYBOX,
  LAYERID_UI: LAYERID_UI,
  LAYERID_WORLD: LAYERID_WORLD,
  LAYER_FX: LAYER_FX,
  LAYER_GIZMO: LAYER_GIZMO,
  LAYER_HUD: LAYER_HUD,
  LAYER_WORLD: LAYER_WORLD,
  LIGHTFALLOFF_INVERSESQUARED: LIGHTFALLOFF_INVERSESQUARED,
  LIGHTFALLOFF_LINEAR: LIGHTFALLOFF_LINEAR,
  LIGHTSHAPE_DISK: LIGHTSHAPE_DISK,
  LIGHTSHAPE_PUNCTUAL: LIGHTSHAPE_PUNCTUAL,
  LIGHTSHAPE_RECT: LIGHTSHAPE_RECT,
  LIGHTSHAPE_SPHERE: LIGHTSHAPE_SPHERE,
  LIGHTTYPE_COUNT: LIGHTTYPE_COUNT,
  LIGHTTYPE_DIRECTIONAL: LIGHTTYPE_DIRECTIONAL,
  LIGHTTYPE_OMNI: LIGHTTYPE_OMNI,
  LIGHTTYPE_POINT: LIGHTTYPE_POINT,
  LIGHTTYPE_SPOT: LIGHTTYPE_SPOT,
  LINEBATCH_GIZMO: LINEBATCH_GIZMO,
  LINEBATCH_OVERLAY: LINEBATCH_OVERLAY,
  LINEBATCH_WORLD: LINEBATCH_WORLD,
  MASK_AFFECT_DYNAMIC: MASK_AFFECT_DYNAMIC,
  MASK_AFFECT_LIGHTMAPPED: MASK_AFFECT_LIGHTMAPPED,
  MASK_BAKE: MASK_BAKE,
  ORIENTATION_HORIZONTAL: ORIENTATION_HORIZONTAL,
  ORIENTATION_VERTICAL: ORIENTATION_VERTICAL,
  PARTICLEMODE_CPU: PARTICLEMODE_CPU,
  PARTICLEMODE_GPU: PARTICLEMODE_GPU,
  PARTICLEORIENTATION_EMITTER: PARTICLEORIENTATION_EMITTER,
  PARTICLEORIENTATION_SCREEN: PARTICLEORIENTATION_SCREEN,
  PARTICLEORIENTATION_WORLD: PARTICLEORIENTATION_WORLD,
  PARTICLESORT_DISTANCE: PARTICLESORT_DISTANCE,
  PARTICLESORT_NEWER_FIRST: PARTICLESORT_NEWER_FIRST,
  PARTICLESORT_NONE: PARTICLESORT_NONE,
  PARTICLESORT_OLDER_FIRST: PARTICLESORT_OLDER_FIRST,
  PROJECTION_ORTHOGRAPHIC: PROJECTION_ORTHOGRAPHIC,
  PROJECTION_PERSPECTIVE: PROJECTION_PERSPECTIVE,
  RENDERSTYLE_POINTS: RENDERSTYLE_POINTS,
  RENDERSTYLE_SOLID: RENDERSTYLE_SOLID,
  RENDERSTYLE_WIREFRAME: RENDERSTYLE_WIREFRAME,
  SHADERDEF_DIRLM: SHADERDEF_DIRLM,
  SHADERDEF_INSTANCING: SHADERDEF_INSTANCING,
  SHADERDEF_LM: SHADERDEF_LM,
  SHADERDEF_LMAMBIENT: SHADERDEF_LMAMBIENT,
  SHADERDEF_MORPH_NORMAL: SHADERDEF_MORPH_NORMAL,
  SHADERDEF_MORPH_POSITION: SHADERDEF_MORPH_POSITION,
  SHADERDEF_MORPH_TEXTURE_BASED: SHADERDEF_MORPH_TEXTURE_BASED,
  SHADERDEF_NOSHADOW: SHADERDEF_NOSHADOW,
  SHADERDEF_SCREENSPACE: SHADERDEF_SCREENSPACE,
  SHADERDEF_SKIN: SHADERDEF_SKIN,
  SHADERDEF_TANGENTS: SHADERDEF_TANGENTS,
  SHADERDEF_UV0: SHADERDEF_UV0,
  SHADERDEF_UV1: SHADERDEF_UV1,
  SHADERDEF_VCOLOR: SHADERDEF_VCOLOR,
  SHADERTYPE_DEPTH: SHADERTYPE_DEPTH,
  SHADERTYPE_FORWARD: SHADERTYPE_FORWARD,
  SHADERTYPE_PICK: SHADERTYPE_PICK,
  SHADERTYPE_SHADOW: SHADERTYPE_SHADOW,
  SHADER_DEPTH: SHADER_DEPTH,
  SHADER_FORWARD: SHADER_FORWARD,
  SHADER_FORWARDHDR: SHADER_FORWARDHDR,
  SHADER_PICK: SHADER_PICK,
  SHADER_SHADOW: SHADER_SHADOW,
  SHADOWUPDATE_NONE: SHADOWUPDATE_NONE,
  SHADOWUPDATE_REALTIME: SHADOWUPDATE_REALTIME,
  SHADOWUPDATE_THISFRAME: SHADOWUPDATE_THISFRAME,
  SHADOW_COUNT: SHADOW_COUNT,
  SHADOW_DEPTH: SHADOW_DEPTH,
  SHADOW_PCF1: SHADOW_PCF1,
  SHADOW_PCF3: SHADOW_PCF3,
  SHADOW_PCF5: SHADOW_PCF5,
  SHADOW_VSM16: SHADOW_VSM16,
  SHADOW_VSM32: SHADOW_VSM32,
  SHADOW_VSM8: SHADOW_VSM8,
  SORTKEY_DEPTH: SORTKEY_DEPTH,
  SORTKEY_FORWARD: SORTKEY_FORWARD,
  SORTMODE_BACK2FRONT: SORTMODE_BACK2FRONT,
  SORTMODE_CUSTOM: SORTMODE_CUSTOM,
  SORTMODE_FRONT2BACK: SORTMODE_FRONT2BACK,
  SORTMODE_MANUAL: SORTMODE_MANUAL,
  SORTMODE_MATERIALMESH: SORTMODE_MATERIALMESH,
  SORTMODE_NONE: SORTMODE_NONE,
  SPECOCC_AO: SPECOCC_AO,
  SPECOCC_GLOSSDEPENDENT: SPECOCC_GLOSSDEPENDENT,
  SPECOCC_NONE: SPECOCC_NONE,
  SPECULAR_BLINN: SPECULAR_BLINN,
  SPECULAR_PHONG: SPECULAR_PHONG,
  SPRITE_RENDERMODE_SIMPLE: SPRITE_RENDERMODE_SIMPLE,
  SPRITE_RENDERMODE_SLICED: SPRITE_RENDERMODE_SLICED,
  SPRITE_RENDERMODE_TILED: SPRITE_RENDERMODE_TILED,
  TONEMAP_ACES: TONEMAP_ACES,
  TONEMAP_ACES2: TONEMAP_ACES2,
  TONEMAP_FILMIC: TONEMAP_FILMIC,
  TONEMAP_HEJL: TONEMAP_HEJL,
  TONEMAP_LINEAR: TONEMAP_LINEAR,
  VIEW_CENTER: VIEW_CENTER,
  VIEW_LEFT: VIEW_LEFT,
  VIEW_RIGHT: VIEW_RIGHT,
  shadowTypeToString: shadowTypeToString,
  calculateNormals: calculateNormals,
  calculateTangents: calculateTangents,
  createBox: createBox,
  createCapsule: createCapsule,
  createCone: createCone,
  createCylinder: createCylinder,
  createMesh: createMesh$1,
  createPlane: createPlane,
  createSphere: createSphere,
  createTorus: createTorus,
  BasicMaterial: BasicMaterial,
  Batch: Batch,
  BatchGroup: BatchGroup,
  SkinBatchInstance: SkinBatchInstance,
  BatchManager: BatchManager,
  Camera: Camera,
  WorldClusters: WorldClusters,
  ForwardRenderer: ForwardRenderer,
  GraphNode: GraphNode,
  Layer: Layer,
  LayerComposition: LayerComposition,
  Light: Light,
  LightingParams: LightingParams,
  Lightmapper: Lightmapper,
  Material: Material,
  Mesh: Mesh,
  Command: Command,
  MeshInstance: MeshInstance,
  Model: Model,
  Morph: Morph,
  MorphInstance: MorphInstance,
  MorphTarget: MorphTarget,
  ParticleEmitter: ParticleEmitter,
  Picker: Picker,
  Scene: Scene,
  Skin: Skin,
  SkinInstance: SkinInstance,
  Sprite: Sprite,
  StandardMaterial: StandardMaterial,
  StencilParameters: StencilParameters,
  TextureAtlas: TextureAtlas,
  Animation: Animation,
  Key: Key,
  Node: Node$1,
  Skeleton: Skeleton,
  INTERPOLATION_CUBIC: INTERPOLATION_CUBIC,
  INTERPOLATION_LINEAR: INTERPOLATION_LINEAR,
  INTERPOLATION_STEP: INTERPOLATION_STEP,
  AnimBinder: AnimBinder,
  AnimClip: AnimClip,
  AnimCurve: AnimCurve,
  AnimData: AnimData,
  AnimEvaluator: AnimEvaluator,
  AnimSnapshot: AnimSnapshot,
  AnimTarget: AnimTarget,
  AnimEvents: AnimEvents,
  AnimTrack: AnimTrack,
  DefaultAnimBinder: DefaultAnimBinder,
  ANIM_BLEND_1D: ANIM_BLEND_1D,
  ANIM_BLEND_2D_CARTESIAN: ANIM_BLEND_2D_CARTESIAN,
  ANIM_BLEND_2D_DIRECTIONAL: ANIM_BLEND_2D_DIRECTIONAL,
  ANIM_BLEND_DIRECT: ANIM_BLEND_DIRECT,
  ANIM_CONTROL_STATES: ANIM_CONTROL_STATES,
  ANIM_EQUAL_TO: ANIM_EQUAL_TO,
  ANIM_GREATER_THAN: ANIM_GREATER_THAN,
  ANIM_GREATER_THAN_EQUAL_TO: ANIM_GREATER_THAN_EQUAL_TO,
  ANIM_INTERRUPTION_NEXT: ANIM_INTERRUPTION_NEXT,
  ANIM_INTERRUPTION_NEXT_PREV: ANIM_INTERRUPTION_NEXT_PREV,
  ANIM_INTERRUPTION_NONE: ANIM_INTERRUPTION_NONE,
  ANIM_INTERRUPTION_PREV: ANIM_INTERRUPTION_PREV,
  ANIM_INTERRUPTION_PREV_NEXT: ANIM_INTERRUPTION_PREV_NEXT,
  ANIM_LAYER_ADDITIVE: ANIM_LAYER_ADDITIVE,
  ANIM_LAYER_OVERWRITE: ANIM_LAYER_OVERWRITE,
  ANIM_LESS_THAN: ANIM_LESS_THAN,
  ANIM_LESS_THAN_EQUAL_TO: ANIM_LESS_THAN_EQUAL_TO,
  ANIM_NOT_EQUAL_TO: ANIM_NOT_EQUAL_TO,
  ANIM_PARAMETER_BOOLEAN: ANIM_PARAMETER_BOOLEAN,
  ANIM_PARAMETER_FLOAT: ANIM_PARAMETER_FLOAT,
  ANIM_PARAMETER_INTEGER: ANIM_PARAMETER_INTEGER,
  ANIM_PARAMETER_TRIGGER: ANIM_PARAMETER_TRIGGER,
  ANIM_STATE_ANY: ANIM_STATE_ANY,
  ANIM_STATE_END: ANIM_STATE_END,
  ANIM_STATE_START: ANIM_STATE_START,
  AnimController: AnimController,
  AnimStateGraph: AnimStateGraph,
  FONT_BITMAP: FONT_BITMAP,
  FONT_MSDF: FONT_MSDF,
  Font: Font,
  CanvasFont: CanvasFont,
  DISTANCE_EXPONENTIAL: DISTANCE_EXPONENTIAL,
  DISTANCE_INVERSE: DISTANCE_INVERSE,
  DISTANCE_LINEAR: DISTANCE_LINEAR,
  SoundManager: SoundManager,
  Sound: Sound,
  SoundInstance: SoundInstance,
  SoundInstance3d: SoundInstance3d,
  Bundle: Bundle,
  BundleRegistry: BundleRegistry,
  basisInitialize: basisInitialize,
  basisTranscode: basisTranscode,
  AnimClipHandler: AnimClipHandler,
  AnimStateGraphHandler: AnimStateGraphHandler,
  AnimationHandler: AnimationHandler,
  AudioHandler: AudioHandler,
  BinaryHandler: BinaryHandler,
  BundleHandler: BundleHandler,
  ContainerHandler: ContainerHandler,
  ContainerResource: ContainerResource,
  CssHandler: CssHandler,
  createStyle: createStyle,
  CubemapHandler: CubemapHandler,
  FolderHandler: FolderHandler,
  FontHandler: FontHandler,
  HierarchyHandler: HierarchyHandler,
  HtmlHandler: HtmlHandler,
  JsonHandler: JsonHandler,
  JsonStandardMaterialParser: JsonStandardMaterialParser,
  MaterialHandler: MaterialHandler,
  ModelHandler: ModelHandler,
  RenderHandler: RenderHandler,
  ResourceHandler: ResourceHandler,
  ResourceLoader: ResourceLoader,
  ScriptHandler: ScriptHandler,
  SceneHandler: SceneHandler,
  SceneSettingsHandler: SceneSettingsHandler,
  ShaderHandler: ShaderHandler,
  SpriteHandler: SpriteHandler,
  TemplateHandler: TemplateHandler,
  TextHandler: TextHandler,
  TextureHandler: TextureHandler,
  TextureParser: TextureParser,
  TextureAtlasHandler: TextureAtlasHandler,
  ABSOLUTE_URL: ABSOLUTE_URL,
  ASSET_ANIMATION: ASSET_ANIMATION,
  ASSET_AUDIO: ASSET_AUDIO,
  ASSET_CONTAINER: ASSET_CONTAINER,
  ASSET_CSS: ASSET_CSS,
  ASSET_CUBEMAP: ASSET_CUBEMAP,
  ASSET_HTML: ASSET_HTML,
  ASSET_IMAGE: ASSET_IMAGE,
  ASSET_JSON: ASSET_JSON,
  ASSET_MATERIAL: ASSET_MATERIAL,
  ASSET_MODEL: ASSET_MODEL,
  ASSET_SCRIPT: ASSET_SCRIPT,
  ASSET_SHADER: ASSET_SHADER,
  ASSET_TEXT: ASSET_TEXT,
  ASSET_TEXTURE: ASSET_TEXTURE,
  Asset: Asset,
  AssetListLoader: AssetListLoader,
  AssetReference: AssetReference,
  AssetRegistry: AssetRegistry,
  LocalizedAsset: LocalizedAsset,
  createScript: createScript,
  registerScript: registerScript,
  ScriptAttributes: ScriptAttributes,
  ScriptRegistry: ScriptRegistry,
  ScriptType: ScriptType,
  I18n: I18n,
  ACTION_GAMEPAD: ACTION_GAMEPAD,
  ACTION_KEYBOARD: ACTION_KEYBOARD,
  ACTION_MOUSE: ACTION_MOUSE,
  AXIS_KEY: AXIS_KEY,
  AXIS_MOUSE_X: AXIS_MOUSE_X,
  AXIS_MOUSE_Y: AXIS_MOUSE_Y,
  AXIS_PAD_L_X: AXIS_PAD_L_X,
  AXIS_PAD_L_Y: AXIS_PAD_L_Y,
  AXIS_PAD_R_X: AXIS_PAD_R_X,
  AXIS_PAD_R_Y: AXIS_PAD_R_Y,
  EVENT_KEYDOWN: EVENT_KEYDOWN,
  EVENT_KEYUP: EVENT_KEYUP,
  EVENT_MOUSEDOWN: EVENT_MOUSEDOWN,
  EVENT_MOUSEMOVE: EVENT_MOUSEMOVE,
  EVENT_MOUSEUP: EVENT_MOUSEUP,
  EVENT_MOUSEWHEEL: EVENT_MOUSEWHEEL,
  EVENT_SELECT: EVENT_SELECT,
  EVENT_SELECTEND: EVENT_SELECTEND,
  EVENT_SELECTSTART: EVENT_SELECTSTART,
  EVENT_TOUCHCANCEL: EVENT_TOUCHCANCEL,
  EVENT_TOUCHEND: EVENT_TOUCHEND,
  EVENT_TOUCHMOVE: EVENT_TOUCHMOVE,
  EVENT_TOUCHSTART: EVENT_TOUCHSTART,
  KEY_0: KEY_0,
  KEY_1: KEY_1,
  KEY_2: KEY_2,
  KEY_3: KEY_3,
  KEY_4: KEY_4,
  KEY_5: KEY_5,
  KEY_6: KEY_6,
  KEY_7: KEY_7,
  KEY_8: KEY_8,
  KEY_9: KEY_9,
  KEY_A: KEY_A,
  KEY_ADD: KEY_ADD,
  KEY_ALT: KEY_ALT,
  KEY_B: KEY_B,
  KEY_BACKSPACE: KEY_BACKSPACE,
  KEY_BACK_SLASH: KEY_BACK_SLASH,
  KEY_C: KEY_C,
  KEY_CAPS_LOCK: KEY_CAPS_LOCK,
  KEY_CLOSE_BRACKET: KEY_CLOSE_BRACKET,
  KEY_COMMA: KEY_COMMA,
  KEY_CONTEXT_MENU: KEY_CONTEXT_MENU,
  KEY_CONTROL: KEY_CONTROL,
  KEY_D: KEY_D,
  KEY_DECIMAL: KEY_DECIMAL,
  KEY_DELETE: KEY_DELETE,
  KEY_DIVIDE: KEY_DIVIDE,
  KEY_DOWN: KEY_DOWN,
  KEY_E: KEY_E,
  KEY_END: KEY_END,
  KEY_ENTER: KEY_ENTER,
  KEY_EQUAL: KEY_EQUAL,
  KEY_ESCAPE: KEY_ESCAPE,
  KEY_F: KEY_F,
  KEY_F1: KEY_F1,
  KEY_F10: KEY_F10,
  KEY_F11: KEY_F11,
  KEY_F12: KEY_F12,
  KEY_F2: KEY_F2,
  KEY_F3: KEY_F3,
  KEY_F4: KEY_F4,
  KEY_F5: KEY_F5,
  KEY_F6: KEY_F6,
  KEY_F7: KEY_F7,
  KEY_F8: KEY_F8,
  KEY_F9: KEY_F9,
  KEY_G: KEY_G,
  KEY_H: KEY_H,
  KEY_HOME: KEY_HOME,
  KEY_I: KEY_I,
  KEY_INSERT: KEY_INSERT,
  KEY_J: KEY_J,
  KEY_K: KEY_K,
  KEY_L: KEY_L,
  KEY_LEFT: KEY_LEFT,
  KEY_M: KEY_M,
  KEY_META: KEY_META,
  KEY_MULTIPLY: KEY_MULTIPLY,
  KEY_N: KEY_N,
  KEY_NUMPAD_0: KEY_NUMPAD_0,
  KEY_NUMPAD_1: KEY_NUMPAD_1,
  KEY_NUMPAD_2: KEY_NUMPAD_2,
  KEY_NUMPAD_3: KEY_NUMPAD_3,
  KEY_NUMPAD_4: KEY_NUMPAD_4,
  KEY_NUMPAD_5: KEY_NUMPAD_5,
  KEY_NUMPAD_6: KEY_NUMPAD_6,
  KEY_NUMPAD_7: KEY_NUMPAD_7,
  KEY_NUMPAD_8: KEY_NUMPAD_8,
  KEY_NUMPAD_9: KEY_NUMPAD_9,
  KEY_O: KEY_O,
  KEY_OPEN_BRACKET: KEY_OPEN_BRACKET,
  KEY_P: KEY_P,
  KEY_PAGE_DOWN: KEY_PAGE_DOWN,
  KEY_PAGE_UP: KEY_PAGE_UP,
  KEY_PAUSE: KEY_PAUSE,
  KEY_PERIOD: KEY_PERIOD,
  KEY_PRINT_SCREEN: KEY_PRINT_SCREEN,
  KEY_Q: KEY_Q,
  KEY_R: KEY_R,
  KEY_RETURN: KEY_RETURN,
  KEY_RIGHT: KEY_RIGHT,
  KEY_S: KEY_S,
  KEY_SEMICOLON: KEY_SEMICOLON,
  KEY_SEPARATOR: KEY_SEPARATOR,
  KEY_SHIFT: KEY_SHIFT,
  KEY_SLASH: KEY_SLASH,
  KEY_SPACE: KEY_SPACE,
  KEY_SUBTRACT: KEY_SUBTRACT,
  KEY_T: KEY_T,
  KEY_TAB: KEY_TAB,
  KEY_U: KEY_U,
  KEY_UP: KEY_UP,
  KEY_V: KEY_V,
  KEY_W: KEY_W,
  KEY_WINDOWS: KEY_WINDOWS,
  KEY_X: KEY_X,
  KEY_Y: KEY_Y,
  KEY_Z: KEY_Z,
  MOUSEBUTTON_LEFT: MOUSEBUTTON_LEFT,
  MOUSEBUTTON_MIDDLE: MOUSEBUTTON_MIDDLE,
  MOUSEBUTTON_NONE: MOUSEBUTTON_NONE,
  MOUSEBUTTON_RIGHT: MOUSEBUTTON_RIGHT,
  PAD_1: PAD_1,
  PAD_2: PAD_2,
  PAD_3: PAD_3,
  PAD_4: PAD_4,
  PAD_DOWN: PAD_DOWN,
  PAD_FACE_1: PAD_FACE_1,
  PAD_FACE_2: PAD_FACE_2,
  PAD_FACE_3: PAD_FACE_3,
  PAD_FACE_4: PAD_FACE_4,
  PAD_LEFT: PAD_LEFT,
  PAD_L_SHOULDER_1: PAD_L_SHOULDER_1,
  PAD_L_SHOULDER_2: PAD_L_SHOULDER_2,
  PAD_L_STICK_BUTTON: PAD_L_STICK_BUTTON,
  PAD_L_STICK_X: PAD_L_STICK_X,
  PAD_L_STICK_Y: PAD_L_STICK_Y,
  PAD_RIGHT: PAD_RIGHT,
  PAD_R_SHOULDER_1: PAD_R_SHOULDER_1,
  PAD_R_SHOULDER_2: PAD_R_SHOULDER_2,
  PAD_R_STICK_BUTTON: PAD_R_STICK_BUTTON,
  PAD_R_STICK_X: PAD_R_STICK_X,
  PAD_R_STICK_Y: PAD_R_STICK_Y,
  PAD_SELECT: PAD_SELECT,
  PAD_START: PAD_START,
  PAD_UP: PAD_UP,
  PAD_VENDOR: PAD_VENDOR,
  Controller: Controller,
  ElementInput: ElementInput,
  ElementInputEvent: ElementInputEvent,
  ElementMouseEvent: ElementMouseEvent,
  ElementSelectEvent: ElementSelectEvent,
  ElementTouchEvent: ElementTouchEvent,
  GamePads: GamePads,
  Keyboard: Keyboard,
  KeyboardEvent: KeyboardEvent,
  Mouse: Mouse,
  MouseEvent: MouseEvent$1,
  TouchDevice: TouchDevice,
  Touch: Touch,
  TouchEvent: TouchEvent,
  getTouchTargetCoords: getTouchTargetCoords,
  FILLMODE_FILL_WINDOW: FILLMODE_FILL_WINDOW,
  FILLMODE_KEEP_ASPECT: FILLMODE_KEEP_ASPECT,
  FILLMODE_NONE: FILLMODE_NONE,
  RESOLUTION_AUTO: RESOLUTION_AUTO,
  RESOLUTION_FIXED: RESOLUTION_FIXED,
  script: script,
  AppBase: AppBase,
  get app () { return app; },
  AppOptions: AppOptions,
  Application: Application,
  AnimationComponent: AnimationComponent,
  AnimationComponentSystem: AnimationComponentSystem,
  AnimComponent: AnimComponent,
  AnimComponentLayer: AnimComponentLayer,
  AnimComponentSystem: AnimComponentSystem,
  AudioListenerComponent: AudioListenerComponent,
  AudioListenerComponentSystem: AudioListenerComponentSystem,
  AudioSourceComponent: AudioSourceComponent,
  AudioSourceComponentSystem: AudioSourceComponentSystem,
  BUTTON_TRANSITION_MODE_SPRITE_CHANGE: BUTTON_TRANSITION_MODE_SPRITE_CHANGE,
  BUTTON_TRANSITION_MODE_TINT: BUTTON_TRANSITION_MODE_TINT,
  ButtonComponent: ButtonComponent,
  ButtonComponentSystem: ButtonComponentSystem,
  CameraComponent: CameraComponent,
  CameraComponentSystem: CameraComponentSystem,
  CollisionComponent: CollisionComponent,
  CollisionComponentSystem: CollisionComponentSystem,
  Component: Component,
  ComponentSystem: ComponentSystem,
  ComponentSystemRegistry: ComponentSystemRegistry,
  ELEMENTTYPE_GROUP: ELEMENTTYPE_GROUP,
  ELEMENTTYPE_IMAGE: ELEMENTTYPE_IMAGE,
  ELEMENTTYPE_TEXT: ELEMENTTYPE_TEXT,
  FITMODE_CONTAIN: FITMODE_CONTAIN,
  FITMODE_COVER: FITMODE_COVER,
  FITMODE_STRETCH: FITMODE_STRETCH,
  ElementComponent: ElementComponent$2,
  ElementComponentSystem: ElementComponentSystem,
  ElementDragHelper: ElementDragHelper,
  Entity: Entity,
  EntityReference: EntityReference,
  ImageElement: ImageElement,
  MOTION_FREE: MOTION_FREE,
  MOTION_LIMITED: MOTION_LIMITED,
  MOTION_LOCKED: MOTION_LOCKED,
  JointComponent: JointComponent,
  JointComponentSystem: JointComponentSystem,
  LayoutCalculator: LayoutCalculator,
  LayoutChildComponent: LayoutChildComponent,
  LayoutChildComponentSystem: LayoutChildComponentSystem,
  FITTING_BOTH: FITTING_BOTH,
  FITTING_NONE: FITTING_NONE,
  FITTING_SHRINK: FITTING_SHRINK,
  FITTING_STRETCH: FITTING_STRETCH,
  LayoutGroupComponent: LayoutGroupComponent,
  LayoutGroupComponentSystem: LayoutGroupComponentSystem,
  LightComponent: LightComponent,
  LightComponentSystem: LightComponentSystem,
  ModelComponent: ModelComponent,
  ModelComponentSystem: ModelComponentSystem,
  ParticleSystemComponent: ParticleSystemComponent,
  ParticleSystemComponentSystem: ParticleSystemComponentSystem,
  PostEffectQueue: PostEffectQueue,
  RenderComponent: RenderComponent,
  RenderComponentSystem: RenderComponentSystem,
  BODYFLAG_KINEMATIC_OBJECT: BODYFLAG_KINEMATIC_OBJECT,
  BODYFLAG_NORESPONSE_OBJECT: BODYFLAG_NORESPONSE_OBJECT,
  BODYFLAG_STATIC_OBJECT: BODYFLAG_STATIC_OBJECT,
  BODYGROUP_DEFAULT: BODYGROUP_DEFAULT,
  BODYGROUP_DYNAMIC: BODYGROUP_DYNAMIC,
  BODYGROUP_ENGINE_1: BODYGROUP_ENGINE_1,
  BODYGROUP_ENGINE_2: BODYGROUP_ENGINE_2,
  BODYGROUP_ENGINE_3: BODYGROUP_ENGINE_3,
  BODYGROUP_KINEMATIC: BODYGROUP_KINEMATIC,
  BODYGROUP_NONE: BODYGROUP_NONE,
  BODYGROUP_STATIC: BODYGROUP_STATIC,
  BODYGROUP_TRIGGER: BODYGROUP_TRIGGER,
  BODYGROUP_USER_1: BODYGROUP_USER_1,
  BODYGROUP_USER_2: BODYGROUP_USER_2,
  BODYGROUP_USER_3: BODYGROUP_USER_3,
  BODYGROUP_USER_4: BODYGROUP_USER_4,
  BODYGROUP_USER_5: BODYGROUP_USER_5,
  BODYGROUP_USER_6: BODYGROUP_USER_6,
  BODYGROUP_USER_7: BODYGROUP_USER_7,
  BODYGROUP_USER_8: BODYGROUP_USER_8,
  BODYMASK_ALL: BODYMASK_ALL,
  BODYMASK_NONE: BODYMASK_NONE,
  BODYMASK_NOT_STATIC: BODYMASK_NOT_STATIC,
  BODYMASK_NOT_STATIC_KINEMATIC: BODYMASK_NOT_STATIC_KINEMATIC,
  BODYMASK_STATIC: BODYMASK_STATIC,
  BODYSTATE_ACTIVE_TAG: BODYSTATE_ACTIVE_TAG,
  BODYSTATE_DISABLE_DEACTIVATION: BODYSTATE_DISABLE_DEACTIVATION,
  BODYSTATE_DISABLE_SIMULATION: BODYSTATE_DISABLE_SIMULATION,
  BODYSTATE_ISLAND_SLEEPING: BODYSTATE_ISLAND_SLEEPING,
  BODYSTATE_WANTS_DEACTIVATION: BODYSTATE_WANTS_DEACTIVATION,
  BODYTYPE_DYNAMIC: BODYTYPE_DYNAMIC,
  BODYTYPE_KINEMATIC: BODYTYPE_KINEMATIC,
  BODYTYPE_STATIC: BODYTYPE_STATIC,
  RigidBodyComponent: RigidBodyComponent,
  ContactPoint: ContactPoint,
  ContactResult: ContactResult,
  RaycastResult: RaycastResult,
  RigidBodyComponentSystem: RigidBodyComponentSystem,
  SingleContactResult: SingleContactResult,
  SceneRegistry: SceneRegistry,
  SceneRegistryItem: SceneRegistryItem,
  SCALEMODE_BLEND: SCALEMODE_BLEND,
  SCALEMODE_NONE: SCALEMODE_NONE,
  ScreenComponent: ScreenComponent,
  ScreenComponentSystem: ScreenComponentSystem,
  ScriptComponent: ScriptComponent,
  ScriptComponentSystem: ScriptComponentSystem,
  ScriptLegacyComponent: ScriptLegacyComponent,
  ScriptLegacyComponentSystem: ScriptLegacyComponentSystem,
  ScrollbarComponent: ScrollbarComponent,
  ScrollbarComponentSystem: ScrollbarComponentSystem,
  SCROLLBAR_VISIBILITY_SHOW_ALWAYS: SCROLLBAR_VISIBILITY_SHOW_ALWAYS,
  SCROLLBAR_VISIBILITY_SHOW_WHEN_REQUIRED: SCROLLBAR_VISIBILITY_SHOW_WHEN_REQUIRED,
  SCROLL_MODE_BOUNCE: SCROLL_MODE_BOUNCE,
  SCROLL_MODE_CLAMP: SCROLL_MODE_CLAMP,
  SCROLL_MODE_INFINITE: SCROLL_MODE_INFINITE,
  ScrollViewComponent: ScrollViewComponent,
  ScrollViewComponentSystem: ScrollViewComponentSystem,
  SoundSlot: SoundSlot,
  SoundComponent: SoundComponent,
  SoundComponentSystem: SoundComponentSystem,
  SPRITETYPE_ANIMATED: SPRITETYPE_ANIMATED,
  SPRITETYPE_SIMPLE: SPRITETYPE_SIMPLE,
  SpriteAnimationClip: SpriteAnimationClip,
  SpriteComponent: SpriteComponent,
  SpriteComponentSystem: SpriteComponentSystem,
  TextElement: TextElement,
  ZoneComponent: ZoneComponent,
  ZoneComponentSystem: ZoneComponentSystem,
  Template: Template,
  XRDEPTHSENSINGFORMAT_F32: XRDEPTHSENSINGFORMAT_F32,
  XRDEPTHSENSINGFORMAT_L8A8: XRDEPTHSENSINGFORMAT_L8A8,
  XRDEPTHSENSINGUSAGE_CPU: XRDEPTHSENSINGUSAGE_CPU,
  XRDEPTHSENSINGUSAGE_GPU: XRDEPTHSENSINGUSAGE_GPU,
  XRHAND_LEFT: XRHAND_LEFT,
  XRHAND_NONE: XRHAND_NONE,
  XRHAND_RIGHT: XRHAND_RIGHT,
  XRSPACE_BOUNDEDFLOOR: XRSPACE_BOUNDEDFLOOR,
  XRSPACE_LOCAL: XRSPACE_LOCAL,
  XRSPACE_LOCALFLOOR: XRSPACE_LOCALFLOOR,
  XRSPACE_UNBOUNDED: XRSPACE_UNBOUNDED,
  XRSPACE_VIEWER: XRSPACE_VIEWER,
  XRTARGETRAY_GAZE: XRTARGETRAY_GAZE,
  XRTARGETRAY_POINTER: XRTARGETRAY_POINTER,
  XRTARGETRAY_SCREEN: XRTARGETRAY_SCREEN,
  XRTRACKABLE_MESH: XRTRACKABLE_MESH,
  XRTRACKABLE_PLANE: XRTRACKABLE_PLANE,
  XRTRACKABLE_POINT: XRTRACKABLE_POINT,
  XRTYPE_AR: XRTYPE_AR,
  XRTYPE_INLINE: XRTYPE_INLINE,
  XRTYPE_VR: XRTYPE_VR,
  XrInput: XrInput,
  XrInputSource: XrInputSource,
  XrLightEstimation: XrLightEstimation,
  XrDepthSensing: XrDepthSensing,
  XrManager: XrManager,
  XrHitTest: XrHitTest,
  XrHitTestSource: XrHitTestSource,
  XrImageTracking: XrImageTracking,
  XrTrackedImage: XrTrackedImage,
  XrDomOverlay: XrDomOverlay,
  XrPlaneDetection: XrPlaneDetection,
  XrPlane: XrPlane,
  ContextCreationError: ContextCreationError,
  ELEMENTTYPE_FLOAT32: ELEMENTTYPE_FLOAT32,
  ELEMENTTYPE_INT16: ELEMENTTYPE_INT16,
  ELEMENTTYPE_INT32: ELEMENTTYPE_INT32,
  ELEMENTTYPE_INT8: ELEMENTTYPE_INT8,
  ELEMENTTYPE_UINT16: ELEMENTTYPE_UINT16,
  ELEMENTTYPE_UINT32: ELEMENTTYPE_UINT32,
  ELEMENTTYPE_UINT8: ELEMENTTYPE_UINT8,
  PhongMaterial: PhongMaterial,
  RIGIDBODY_ACTIVE_TAG: RIGIDBODY_ACTIVE_TAG,
  RIGIDBODY_CF_KINEMATIC_OBJECT: RIGIDBODY_CF_KINEMATIC_OBJECT,
  RIGIDBODY_CF_NORESPONSE_OBJECT: RIGIDBODY_CF_NORESPONSE_OBJECT,
  RIGIDBODY_CF_STATIC_OBJECT: RIGIDBODY_CF_STATIC_OBJECT,
  RIGIDBODY_DISABLE_DEACTIVATION: RIGIDBODY_DISABLE_DEACTIVATION,
  RIGIDBODY_DISABLE_SIMULATION: RIGIDBODY_DISABLE_SIMULATION,
  RIGIDBODY_ISLAND_SLEEPING: RIGIDBODY_ISLAND_SLEEPING,
  RIGIDBODY_TYPE_DYNAMIC: RIGIDBODY_TYPE_DYNAMIC,
  RIGIDBODY_TYPE_KINEMATIC: RIGIDBODY_TYPE_KINEMATIC,
  RIGIDBODY_TYPE_STATIC: RIGIDBODY_TYPE_STATIC,
  RIGIDBODY_WANTS_DEACTIVATION: RIGIDBODY_WANTS_DEACTIVATION,
  UnsupportedBrowserError: UnsupportedBrowserError,
  anim: anim,
  asset: asset,
  audio: audio,
  basisSetDownloadConfig: basisSetDownloadConfig,
  fw: fw,
  gfx: gfx,
  inherits: inherits,
  input: input,
  log: log,
  makeArray: makeArray,
  posteffect: posteffect,
  prefilterCubemap: prefilterCubemap,
  programlib: programlib,
  scene: scene,
  shape: shape,
  time: time
});

class EventHandle {
  constructor(owner, name, fn) {
    this.owner = owner;
    this.name = name;
    this.fn = fn;
  }

  unbind() {
    if (!this.owner) return;
    this.owner.unbind(this.name, this.fn);
    this.owner = null;
    this.name = null;
    this.fn = null;
  }

  call() {
    if (!this.fn) return;
    this.fn.call(this.owner, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
  }

  on(name, fn) {
    return this.owner.on(name, fn);
  }

}

class Events {
  constructor() {
    Object.defineProperty(this, '_events', {
      enumerable: false,
      configurable: false,
      writable: true,
      value: {}
    });
    this._suspendEvents = false;
    this._additionalEmitters = [];
  }

  set suspendEvents(value) {
    this._suspendEvents = !!value;
  }

  get suspendEvents() {
    return this._suspendEvents;
  }

  on(name, fn) {
    const events = this._events[name];

    if (events === undefined) {
      this._events[name] = [fn];
    } else {
      if (events.indexOf(fn) === -1) events.push(fn);
    }

    return new EventHandle(this, name, fn);
  }

  once(name, fn) {
    const evt = this.on(name, (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) => {
      fn.call(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      evt.unbind();
    });
    return evt;
  }

  emit(name, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    if (this._suspendEvents) return;
    let events = this._events[name];

    if (events && events.length) {
      events = events.slice(0);

      for (let i = 0; i < events.length; i++) {
        if (!events[i]) continue;

        try {
          events[i].call(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        } catch (ex) {
          console.info('%c%s %c(event error)', 'color: #06f', name, 'color: #f00');
          console.log(ex.stack);
        }
      }
    }

    if (this._additionalEmitters.length) {
      const emitters = this._additionalEmitters.slice();

      emitters.forEach(emitter => {
        emitter.emit(name, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      });
    }

    return this;
  }

  unbind(name, fn) {
    if (name) {
      const events = this._events[name];
      if (!events) return this;

      if (fn) {
        const i = events.indexOf(fn);

        if (i !== -1) {
          if (events.length === 1) {
            delete this._events[name];
          } else {
            events.splice(i, 1);
          }
        }
      } else {
        delete this._events[name];
      }
    } else {
      this._events = {};
    }

    return this;
  }

  addEmitter(emitter) {
    if (!this._additionalEmitters.includes(emitter)) {
      this._additionalEmitters.push(emitter);
    }
  }

  removeEmitter(emitter) {
    const idx = this._additionalEmitters.indexOf(emitter);

    if (idx !== -1) {
      this._additionalEmitters.splice(idx, 1);
    }
  }

}

class Observer extends Events {
  constructor(data, options = {}) {
    super();
    this._destroyed = false;
    this._path = '';
    this._keys = [];
    this._data = {};
    this._pathsWithDuplicates = null;

    if (options.pathsWithDuplicates) {
      this._pathsWithDuplicates = {};

      for (let i = 0; i < options.pathsWithDuplicates.length; i++) {
        this._pathsWithDuplicates[options.pathsWithDuplicates[i]] = true;
      }
    }

    this.patch(data);
    this._parent = options.parent || null;
    this._parentPath = options.parentPath || '';
    this._parentField = options.parentField || null;
    this._parentKey = options.parentKey || null;
    this._latestFn = options.latestFn || null;
    this._silent = false;

    const propagate = function propagate(evt) {
      return function (path, arg1, arg2, arg3) {
        if (!this._parent) return;
        let key = this._parentKey;

        if (!key && this._parentField instanceof Array) {
          key = this._parentField.indexOf(this);
          if (key === -1) return;
        }

        path = this._parentPath + '.' + key + '.' + path;
        let state;
        if (this._silent) state = this._parent.silence();

        this._parent.emit(path + ':' + evt, arg1, arg2, arg3);

        this._parent.emit('*:' + evt, path, arg1, arg2, arg3);

        if (this._silent) this._parent.silenceRestore(state);
      };
    };

    this.on('*:set', propagate('set'));
    this.on('*:unset', propagate('unset'));
    this.on('*:insert', propagate('insert'));
    this.on('*:remove', propagate('remove'));
    this.on('*:move', propagate('move'));
  }

  static _splitPath(path) {
    const cache = Observer._splitPathsCache;
    let result = cache[path];

    if (!result) {
      result = path.split('.');
      cache[path] = result;
    } else {
      result = result.slice();
    }

    return result;
  }

  silence() {
    this._silent = true;
    const historyState = this.history && this.history.enabled;
    if (historyState) this.history.enabled = false;
    const syncState = this.sync && this.sync.enabled;
    if (syncState) this.sync.enabled = false;
    return [historyState, syncState];
  }

  silenceRestore(state) {
    this._silent = false;
    if (state[0]) this.history.enabled = true;
    if (state[1]) this.sync.enabled = true;
  }

  _prepare(target, key, value, silent, remote) {
    let i;
    let state;
    const path = (target._path ? target._path + '.' : '') + key;
    const type = typeof value;

    target._keys.push(key);

    if (type === 'object' && value instanceof Array) {
      target._data[key] = value.slice(0);

      for (i = 0; i < target._data[key].length; i++) {
        if (typeof target._data[key][i] === 'object' && target._data[key][i] !== null) {
          if (target._data[key][i] instanceof Array) {
            target._data[key][i].slice(0);
          } else {
            target._data[key][i] = new Observer(target._data[key][i], {
              parent: this,
              parentPath: path,
              parentField: target._data[key],
              parentKey: null
            });
          }
        } else {
          state = this.silence();
          this.emit(path + '.' + i + ':set', target._data[key][i], null, remote);
          this.emit('*:set', path + '.' + i, target._data[key][i], null, remote);
          this.silenceRestore(state);
        }
      }

      if (silent) state = this.silence();
      this.emit(path + ':set', target._data[key], null, remote);
      this.emit('*:set', path, target._data[key], null, remote);
      if (silent) this.silenceRestore(state);
    } else if (type === 'object' && value instanceof Object) {
      if (typeof target._data[key] !== 'object') {
        target._data[key] = {
          _path: path,
          _keys: [],
          _data: {}
        };
      }

      for (i in value) {
        if (typeof value[i] === 'object') {
          this._prepare(target._data[key], i, value[i], true, remote);
        } else {
          state = this.silence();
          target._data[key]._data[i] = value[i];

          target._data[key]._keys.push(i);

          this.emit(path + '.' + i + ':set', value[i], null, remote);
          this.emit('*:set', path + '.' + i, value[i], null, remote);
          this.silenceRestore(state);
        }
      }

      if (silent) state = this.silence();
      this.emit(path + ':set', value, undefined, remote);
      this.emit('*:set', path, value, undefined, remote);
      if (silent) this.silenceRestore(state);
    } else {
      if (silent) state = this.silence();
      target._data[key] = value;
      this.emit(path + ':set', value, undefined, remote);
      this.emit('*:set', path, value, undefined, remote);
      if (silent) this.silenceRestore(state);
    }

    return true;
  }

  set(path, value, silent, remote, force) {
    let i;
    let valueOld;

    let keys = Observer._splitPath(path);

    const length = keys.length;
    const key = keys[length - 1];
    let node = this;
    let nodePath = '';
    let obj = this;
    let state;

    for (i = 0; i < length - 1; i++) {
      if (node instanceof Array) {
        node = node[keys[i]];

        if (node instanceof Observer) {
          path = keys.slice(i + 1).join('.');
          obj = node;
        }
      } else {
        if (i < length && typeof node._data[keys[i]] !== 'object') {
          if (node._data[keys[i]]) obj.unset((node.__path ? node.__path + '.' : '') + keys[i]);
          node._data[keys[i]] = {
            _path: path,
            _keys: [],
            _data: {}
          };

          node._keys.push(keys[i]);
        }

        if (i === length - 1 && node.__path) nodePath = node.__path + '.' + keys[i];
        node = node._data[keys[i]];
      }
    }

    if (node instanceof Array) {
      const ind = parseInt(key, 10);
      if (node[ind] === value && !force) return;
      valueOld = node[ind];

      if (valueOld instanceof Observer) {
        valueOld = valueOld.json();
      } else {
        valueOld = obj.json(valueOld);
      }

      node[ind] = value;

      if (value instanceof Observer) {
        value._parent = obj;
        value._parentPath = nodePath;
        value._parentField = node;
        value._parentKey = null;
      }

      if (silent) state = obj.silence();
      obj.emit(path + ':set', value, valueOld, remote);
      obj.emit('*:set', path, value, valueOld, remote);
      if (silent) obj.silenceRestore(state);
      return true;
    } else if (node._data && !node._data.hasOwnProperty(key)) {
      if (typeof value === 'object') {
        return obj._prepare(node, key, value, false, remote);
      }

      node._data[key] = value;

      node._keys.push(key);

      if (silent) state = obj.silence();
      obj.emit(path + ':set', value, null, remote);
      obj.emit('*:set', path, value, null, remote);
      if (silent) obj.silenceRestore(state);
      return true;
    }

    if (typeof value === 'object' && value instanceof Array) {
      if (value.equals(node._data[key]) && !force) return false;
      valueOld = node._data[key];
      if (!(valueOld instanceof Observer)) valueOld = obj.json(valueOld);

      if (node._data[key] && node._data[key].length === value.length) {
        state = obj.silence();

        if (value.length === 0) {
          node._data[key] = value;
        }

        for (i = 0; i < node._data[key].length; i++) {
          if (node._data[key][i] instanceof Observer) {
            node._data[key][i].patch(value[i], true);
          } else if (node._data[key][i] !== value[i]) {
            node._data[key][i] = value[i];
            obj.emit(path + '.' + i + ':set', node._data[key][i], valueOld && valueOld[i] || null, remote);
            obj.emit('*:set', path + '.' + i, node._data[key][i], valueOld && valueOld[i] || null, remote);
          }
        }

        obj.silenceRestore(state);
      } else {
        node._data[key] = [];
        value.forEach(val => {
          this._doInsert(node, key, val, undefined, true);
        });
        state = obj.silence();

        for (i = 0; i < node._data[key].length; i++) {
          obj.emit(path + '.' + i + ':set', node._data[key][i], valueOld && valueOld[i] || null, remote);
          obj.emit('*:set', path + '.' + i, node._data[key][i], valueOld && valueOld[i] || null, remote);
        }

        obj.silenceRestore(state);
      }

      if (silent) state = obj.silence();
      obj.emit(path + ':set', value, valueOld, remote);
      obj.emit('*:set', path, value, valueOld, remote);
      if (silent) obj.silenceRestore(state);
      return true;
    } else if (typeof value === 'object' && value instanceof Object) {
      let changed = false;
      valueOld = node._data[key];
      if (!(valueOld instanceof Observer)) valueOld = obj.json(valueOld);
      keys = Object.keys(value);

      if (!node._data[key] || !node._data[key]._data) {
        if (node._data[key]) {
          obj.unset((node.__path ? node.__path + '.' : '') + key);
        } else {
          changed = true;
        }

        node._data[key] = {
          _path: path,
          _keys: [],
          _data: {}
        };
      }

      let c;

      for (const n in node._data[key]._data) {
        if (!value.hasOwnProperty(n)) {
          c = obj.unset(path + '.' + n, true);
          if (c) changed = true;
        } else if (node._data[key]._data.hasOwnProperty(n)) {
          if (!obj._equals(node._data[key]._data[n], value[n])) {
            c = obj.set(path + '.' + n, value[n], true);
            if (c) changed = true;
          }
        } else {
          c = obj._prepare(node._data[key], n, value[n], true, remote);
          if (c) changed = true;
        }
      }

      for (i = 0; i < keys.length; i++) {
        if (value[keys[i]] === undefined && node._data[key]._data.hasOwnProperty(keys[i])) {
          c = obj.unset(path + '.' + keys[i], true);
          if (c) changed = true;
        } else if (typeof value[keys[i]] === 'object') {
          if (node._data[key]._data.hasOwnProperty(keys[i])) {
            c = obj.set(path + '.' + keys[i], value[keys[i]], true);
            if (c) changed = true;
          } else {
            c = obj._prepare(node._data[key], keys[i], value[keys[i]], true, remote);
            if (c) changed = true;
          }
        } else if (!obj._equals(node._data[key]._data[keys[i]], value[keys[i]])) {
          if (typeof value[keys[i]] === 'object') {
            c = obj.set(node._data[key]._path + '.' + keys[i], value[keys[i]], true);
            if (c) changed = true;
          } else if (node._data[key]._data[keys[i]] !== value[keys[i]]) {
            changed = true;
            if (node._data[key]._keys.indexOf(keys[i]) === -1) node._data[key]._keys.push(keys[i]);
            node._data[key]._data[keys[i]] = value[keys[i]];
            state = obj.silence();
            obj.emit(node._data[key]._path + '.' + keys[i] + ':set', node._data[key]._data[keys[i]], null, remote);
            obj.emit('*:set', node._data[key]._path + '.' + keys[i], node._data[key]._data[keys[i]], null, remote);
            obj.silenceRestore(state);
          }
        }
      }

      if (changed) {
        if (silent) state = obj.silence();
        const val = obj.json(node._data[key]);
        obj.emit(node._data[key]._path + ':set', val, valueOld, remote);
        obj.emit('*:set', node._data[key]._path, val, valueOld, remote);
        if (silent) obj.silenceRestore(state);
        return true;
      }

      return false;
    }

    let data;

    if (!node.hasOwnProperty('_data') && node.hasOwnProperty(key)) {
      data = node;
    } else {
      data = node._data;
    }

    if (data[key] === value && !force) return false;
    if (silent) state = obj.silence();
    valueOld = data[key];
    if (!(valueOld instanceof Observer)) valueOld = obj.json(valueOld);
    data[key] = value;
    obj.emit(path + ':set', value, valueOld, remote);
    obj.emit('*:set', path, value, valueOld, remote);
    if (silent) obj.silenceRestore(state);
    return true;
  }

  has(path) {
    const keys = Observer._splitPath(path);

    let node = this;

    for (let i = 0, len = keys.length; i < len; i++) {
      if (node == undefined) return undefined;

      if (node._data) {
        node = node._data[keys[i]];
      } else {
        node = node[keys[i]];
      }
    }

    return node !== undefined;
  }

  get(path, raw) {
    const keys = Observer._splitPath(path);

    let node = this;

    for (let i = 0; i < keys.length; i++) {
      if (node == undefined) return undefined;

      if (node._data) {
        node = node._data[keys[i]];
      } else {
        node = node[keys[i]];
      }
    }

    if (raw) return node;

    if (node == null) {
      return null;
    }

    return this.json(node);
  }

  getRaw(path) {
    return this.get(path, true);
  }

  _equals(a, b) {
    if (a === b) {
      return true;
    } else if (a instanceof Array && b instanceof Array && a.equals(b)) {
      return true;
    }

    return false;
  }

  unset(path, silent, remote) {
    let i;

    const keys = Observer._splitPath(path);

    const key = keys[keys.length - 1];
    let node = this;
    let obj = this;

    for (i = 0; i < keys.length - 1; i++) {
      if (node instanceof Array) {
        node = node[keys[i]];

        if (node instanceof Observer) {
          path = keys.slice(i + 1).join('.');
          obj = node;
        }
      } else {
        node = node._data[keys[i]];
      }
    }

    if (!node._data || !node._data.hasOwnProperty(key)) return false;
    let valueOld = node._data[key];
    if (!(valueOld instanceof Observer)) valueOld = obj.json(valueOld);

    if (node._data[key] && node._data[key]._data) {
      for (i = node._data[key]._keys.length - 1; i >= 0; i--) {
        obj.unset(path + '.' + node._data[key]._keys[i], true);
      }
    }

    node._keys.splice(node._keys.indexOf(key), 1);

    delete node._data[key];
    let state;
    if (silent) state = obj.silence();
    obj.emit(path + ':unset', valueOld, remote);
    obj.emit('*:unset', path, valueOld, remote);
    if (silent) obj.silenceRestore(state);
    return true;
  }

  remove(path, ind, silent, remote) {
    const keys = Observer._splitPath(path);

    const key = keys[keys.length - 1];
    let node = this;
    let obj = this;

    for (let i = 0; i < keys.length - 1; i++) {
      if (node instanceof Array) {
        node = node[parseInt(keys[i], 10)];

        if (node instanceof Observer) {
          path = keys.slice(i + 1).join('.');
          obj = node;
        }
      } else if (node._data && node._data.hasOwnProperty(keys[i])) {
        node = node._data[keys[i]];
      } else {
        return;
      }
    }

    if (!node._data || !node._data.hasOwnProperty(key) || !(node._data[key] instanceof Array)) return;
    const arr = node._data[key];
    if (arr.length < ind) return;
    let value = arr[ind];

    if (value instanceof Observer) {
      value._parent = null;
    } else {
      value = obj.json(value);
    }

    arr.splice(ind, 1);
    let state;
    if (silent) state = obj.silence();
    obj.emit(path + ':remove', value, ind, remote);
    obj.emit('*:remove', path, value, ind, remote);
    if (silent) obj.silenceRestore(state);
    return true;
  }

  removeValue(path, value, silent, remote) {
    const keys = Observer._splitPath(path);

    const key = keys[keys.length - 1];
    let node = this;
    let obj = this;

    for (let i = 0; i < keys.length - 1; i++) {
      if (node instanceof Array) {
        node = node[parseInt(keys[i], 10)];

        if (node instanceof Observer) {
          path = keys.slice(i + 1).join('.');
          obj = node;
        }
      } else if (node._data && node._data.hasOwnProperty(keys[i])) {
        node = node._data[keys[i]];
      } else {
        return;
      }
    }

    if (!node._data || !node._data.hasOwnProperty(key) || !(node._data[key] instanceof Array)) return;
    const arr = node._data[key];
    const ind = arr.indexOf(value);

    if (ind === -1) {
      return;
    }

    if (arr.length < ind) return;
    value = arr[ind];

    if (value instanceof Observer) {
      value._parent = null;
    } else {
      value = obj.json(value);
    }

    arr.splice(ind, 1);
    let state;
    if (silent) state = obj.silence();
    obj.emit(path + ':remove', value, ind, remote);
    obj.emit('*:remove', path, value, ind, remote);
    if (silent) obj.silenceRestore(state);
    return true;
  }

  insert(path, value, ind, silent, remote) {
    const keys = Observer._splitPath(path);

    const key = keys[keys.length - 1];
    let node = this;
    let obj = this;

    for (let i = 0; i < keys.length - 1; i++) {
      if (node instanceof Array) {
        node = node[parseInt(keys[i], 10)];

        if (node instanceof Observer) {
          path = keys.slice(i + 1).join('.');
          obj = node;
        }
      } else if (node._data && node._data.hasOwnProperty(keys[i])) {
        node = node._data[keys[i]];
      } else {
        return;
      }
    }

    if (!node._data || !node._data.hasOwnProperty(key) || !(node._data[key] instanceof Array)) return;
    const arr = node._data[key];
    value = obj._doInsert(node, key, value, ind);

    if (ind === undefined) {
      ind = arr.length - 1;
    }

    let state;
    if (silent) state = obj.silence();
    obj.emit(path + ':insert', value, ind, remote);
    obj.emit('*:insert', path, value, ind, remote);
    if (silent) obj.silenceRestore(state);
    return true;
  }

  _doInsert(node, key, value, ind, allowDuplicates) {
    const arr = node._data[key];

    if (typeof value === 'object' && !(value instanceof Observer) && value !== null) {
      if (value instanceof Array) {
        value = value.slice(0);
      } else {
        value = new Observer(value);
      }
    }

    const path = node._path ? `${node._path}.${key}` : key;

    if (value !== null && !allowDuplicates && (!this._pathsWithDuplicates || !this._pathsWithDuplicates[path])) {
      if (arr.indexOf(value) !== -1) {
        return;
      }
    }

    if (ind === undefined) {
      arr.push(value);
    } else {
      arr.splice(ind, 0, value);
    }

    if (value instanceof Observer) {
      value._parent = this;
      value._parentPath = path;
      value._parentField = arr;
      value._parentKey = null;
    } else {
      value = this.json(value);
    }

    return value;
  }

  move(path, indOld, indNew, silent, remote) {
    const keys = Observer._splitPath(path);

    const key = keys[keys.length - 1];
    let node = this;
    let obj = this;

    for (let i = 0; i < keys.length - 1; i++) {
      if (node instanceof Array) {
        node = node[parseInt(keys[i], 10)];

        if (node instanceof Observer) {
          path = keys.slice(i + 1).join('.');
          obj = node;
        }
      } else if (node._data && node._data.hasOwnProperty(keys[i])) {
        node = node._data[keys[i]];
      } else {
        return;
      }
    }

    if (!node._data || !node._data.hasOwnProperty(key) || !(node._data[key] instanceof Array)) return;
    const arr = node._data[key];
    if (arr.length < indOld || arr.length < indNew || indOld === indNew) return;
    let value = arr[indOld];
    arr.splice(indOld, 1);
    if (indNew === -1) indNew = arr.length;
    arr.splice(indNew, 0, value);
    if (!(value instanceof Observer)) value = obj.json(value);
    let state;
    if (silent) state = obj.silence();
    obj.emit(path + ':move', value, indNew, indOld, remote);
    obj.emit('*:move', path, value, indNew, indOld, remote);
    if (silent) obj.silenceRestore(state);
    return true;
  }

  patch(data, removeMissingKeys) {
    if (typeof data !== 'object') return;

    for (const key in data) {
      if (typeof data[key] === 'object' && !this._data.hasOwnProperty(key)) {
        this._prepare(this, key, data[key]);
      } else if (this._data[key] !== data[key]) {
        this.set(key, data[key]);
      }
    }

    if (removeMissingKeys) {
      for (const key in this._data) {
        if (!data.hasOwnProperty(key)) {
          this.unset(key);
        }
      }
    }
  }

  json(target) {
    let key, n;
    let obj = {};
    const node = target === undefined ? this : target;
    let len, nlen;

    if (node instanceof Object && node._keys) {
      len = node._keys.length;

      for (let i = 0; i < len; i++) {
        key = node._keys[i];
        const value = node._data[key];
        const type = typeof value;

        if (type === 'object' && value instanceof Array) {
          obj[key] = value.slice(0);
          nlen = obj[key].length;

          for (n = 0; n < nlen; n++) {
            if (typeof obj[key][n] === 'object') obj[key][n] = this.json(obj[key][n]);
          }
        } else if (type === 'object' && value instanceof Object) {
          obj[key] = this.json(value);
        } else {
          obj[key] = value;
        }
      }
    } else {
      if (node === null) {
        return null;
      } else if (typeof node === 'object' && node instanceof Array) {
        obj = node.slice(0);
        len = obj.length;

        for (n = 0; n < len; n++) {
          obj[n] = this.json(obj[n]);
        }
      } else if (typeof node === 'object') {
        for (key in node) {
          if (node.hasOwnProperty(key)) obj[key] = node[key];
        }
      } else {
        obj = node;
      }
    }

    return obj;
  }

  forEach(fn, target, path = '') {
    const node = target || this;

    for (let i = 0; i < node._keys.length; i++) {
      const key = node._keys[i];
      const value = node._data[key];
      const type = this.schema && this.schema.has(path + key) && this.schema.get(path + key).type.name.toLowerCase() || typeof value;

      if (type === 'object' && value instanceof Array) {
        fn(path + key, 'array', value, key);
      } else if (type === 'object' && value instanceof Object) {
        fn(path + key, 'object', value, key);
        this.forEach(fn, value, path + key + '.');
      } else {
        fn(path + key, type, value, key);
      }
    }
  }

  latest() {
    return this._latestFn ? this._latestFn() : this;
  }

  destroy() {
    if (this._destroyed) return;
    this._destroyed = true;
    this.emit('destroy');
    this.unbind();
  }

  set latestFn(value) {
    this._latestFn = value;
  }

  get latestFn() {
    return this._latestFn;
  }

}

Observer._splitPathsCache = {};

function getAssetPath(assetPath) {
    // @ts-ignore: path variable injected at build time
    return ("https://sehyun-zigbang.github.io/zigbang-zed-viewer-public" + '/static/' ) +
        assetPath;
}

var setBlendTypeOrig;
function setBlendType(type) {
    // set engine function
    setBlendTypeOrig.call(this, type);
    // tweak alpha blending
    switch (type) {
        case BLEND_NONE:
            break;
        default:
            this.separateAlphaBlend = true;
            this.blendSrcAlpha = BLENDMODE_ONE;
            this.blendDstAlpha = BLENDMODE_ONE_MINUS_SRC_ALPHA;
            break;
    }
}
// here we patch the material set blendType function to blend
// alpha correctly
var initMaterials = function () {
    var blendTypeDescriptor = Object.getOwnPropertyDescriptor(Material.prototype, 'blendType');
    // store the original setter
    setBlendTypeOrig = blendTypeDescriptor.set;
    // update the setter function
    Object.defineProperty(Material.prototype, 'blendType', {
        set: function (type) {
            setBlendType.call(this, type);
        },
        get: function () {
            return blendTypeDescriptor.get.call(this);
        }
    });
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var react = {exports: {}};

var react_development = {exports: {}};

/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (module, exports) {

	{
	  (function() {

	/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	}
	          var ReactVersion = '18.2.0';

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	/**
	 * Keeps track of the current dispatcher.
	 */
	var ReactCurrentDispatcher = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	/**
	 * Keeps track of the current batch's configuration such as how long an update
	 * should suspend for if it needs to.
	 */
	var ReactCurrentBatchConfig = {
	  transition: null
	};

	var ReactCurrentActQueue = {
	  current: null,
	  // Used to reproduce behavior of `batchedUpdates` in legacy mode.
	  isBatchingLegacy: false,
	  didScheduleLegacyUpdate: false
	};

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	var ReactDebugCurrentFrame = {};
	var currentExtraStackFrame = null;
	function setExtraStackFrame(stack) {
	  {
	    currentExtraStackFrame = stack;
	  }
	}

	{
	  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
	    {
	      currentExtraStackFrame = stack;
	    }
	  }; // Stack implementation injected by the current renderer.


	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = ''; // Add an extra top frame while an element is being validated

	    if (currentExtraStackFrame) {
	      stack += currentExtraStackFrame;
	    } // Delegate to the injected renderer-specific implementation


	    var impl = ReactDebugCurrentFrame.getCurrentStack;

	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var ReactSharedInternals = {
	  ReactCurrentDispatcher: ReactCurrentDispatcher,
	  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
	  ReactCurrentOwner: ReactCurrentOwner
	};

	{
	  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
	  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
	}

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    {
	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      printWarning('warn', format, args);
	    }
	  }
	}
	function error(format) {
	  {
	    {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + "." + callerName;

	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }

	    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}
	/**
	 * This is the abstract API for an update queue.
	 */


	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var assign = Object.assign;

	var emptyObject = {};

	{
	  Object.freeze(emptyObject);
	}
	/**
	 * Base class helpers for the updating state of a component.
	 */


	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
	  // renderer.

	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */

	Component.prototype.setState = function (partialState, callback) {
	  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
	    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
	  }

	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */


	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */


	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };

	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

	        return undefined;
	      }
	    });
	  };

	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}

	ComponentDummy.prototype = Component.prototype;
	/**
	 * Convenience component with default shallow equality check for sCU.
	 */

	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

	assign(pureComponentPrototype, Component.prototype);
	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };

	  {
	    Object.seal(refObject);
	  }

	  return refObject;
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	function warnIfStringRefCannotBeAutoConverted(config) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
	      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */

	function createElement(type, config, children) {
	  var propName; // Reserved names are extracted

	  var props = {};
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;

	      {
	        warnIfStringRefCannotBeAutoConverted(config);
	      }
	    }

	    if (hasValidKey(config)) {
	      {
	        checkKeyStringCoercion(config.key);
	      }

	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }

	    props.children = childArray;
	  } // Resolve default props


	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;

	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}
	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	  return newElement;
	}
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */

	function cloneElement(element, config, children) {
	  if (element === null || element === undefined) {
	    throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
	  }

	  var propName; // Original props are copied

	  var props = assign({}, element.props); // Reserved names are extracted

	  var key = element.key;
	  var ref = element.ref; // Self is preserved since the owner is preserved.

	  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.

	  var source = element._source; // Owner will be preserved, unless ref is overridden

	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }

	    if (hasValidKey(config)) {
	      {
	        checkKeyStringCoercion(config.key);
	      }

	      key = '' + config.key;
	    } // Remaining properties override existing props


	    var defaultProps;

	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */

	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = key.replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	  return '$' + escapedString;
	}
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */


	var didWarnAboutMaps = false;
	var userProvidedKeyEscapeRegex = /\/+/g;

	function escapeUserProvidedKey(text) {
	  return text.replace(userProvidedKeyEscapeRegex, '$&/');
	}
	/**
	 * Generate a key string that identifies a element within a set.
	 *
	 * @param {*} element A element that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */


	function getElementKey(element, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof element === 'object' && element !== null && element.key != null) {
	    // Explicit key
	    {
	      checkKeyStringCoercion(element.key);
	    }

	    return escape('' + element.key);
	  } // Implicit key determined by the index in the set


	  return index.toString(36);
	}

	function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;

	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }

	    }
	  }

	  if (invokeCallback) {
	    var _child = children;
	    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows:

	    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

	    if (isArray(mappedChild)) {
	      var escapedChildKey = '';

	      if (childKey != null) {
	        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
	      }

	      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
	        return c;
	      });
	    } else if (mappedChild != null) {
	      if (isValidElement(mappedChild)) {
	        {
	          // The `if` statement here prevents auto-disabling of the safe
	          // coercion ESLint rule, so we must manually disable it below.
	          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
	          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
	            checkKeyStringCoercion(mappedChild.key);
	          }
	        }

	        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
	        // traverseAllChildren used to do for objects as children
	        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
	        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
	        // eslint-disable-next-line react-internal/safe-string-coercion
	        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
	      }

	      array.push(mappedChild);
	    }

	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getElementKey(child, i);
	      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);

	    if (typeof iteratorFn === 'function') {
	      var iterableChildren = children;

	      {
	        // Warn about using Maps as children
	        if (iteratorFn === iterableChildren.entries) {
	          if (!didWarnAboutMaps) {
	            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
	          }

	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(iterableChildren);
	      var step;
	      var ii = 0;

	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getElementKey(child, ii++);
	        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
	      }
	    } else if (type === 'object') {
	      // eslint-disable-next-line react-internal/safe-string-coercion
	      var childrenString = String(children);
	      throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var result = [];
	  var count = 0;
	  mapIntoArray(children, result, '', '', function (child) {
	    return func.call(context, child, count++);
	  });
	  return result;
	}
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */


	function countChildren(children) {
	  var n = 0;
	  mapChildren(children, function () {
	    n++; // Don't return anything
	  });
	  return n;
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  mapChildren(children, function () {
	    forEachFunc.apply(this, arguments); // Don't return anything.
	  }, forEachContext);
	}
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */


	function toArray(children) {
	  return mapChildren(children, function (child) {
	    return child;
	  }) || [];
	}
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */


	function onlyChild(children) {
	  if (!isValidElement(children)) {
	    throw new Error('React.Children.only expected to receive a single React element child.');
	  }

	  return children;
	}

	function createContext(defaultValue) {
	  // TODO: Second argument used to be an optional `calculateChangedBits`
	  // function. Warn to reserve for future use?
	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null,
	    // Add these to use same hidden class in VM as ServerContext
	    _defaultValue: null,
	    _globalName: null
	  };
	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };
	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;
	  var hasWarnedAboutDisplayNameOnConsumer = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context
	    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;

	            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }

	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;

	            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }

	          return context.Consumer;
	        }
	      },
	      displayName: {
	        get: function () {
	          return context.displayName;
	        },
	        set: function (displayName) {
	          if (!hasWarnedAboutDisplayNameOnConsumer) {
	            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

	            hasWarnedAboutDisplayNameOnConsumer = true;
	          }
	        }
	      }
	    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	var Uninitialized = -1;
	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;

	function lazyInitializer(payload) {
	  if (payload._status === Uninitialized) {
	    var ctor = payload._result;
	    var thenable = ctor(); // Transition to the next state.
	    // This might throw either because it's missing or throws. If so, we treat it
	    // as still uninitialized and try again next time. Which is the same as what
	    // happens if the ctor or any wrappers processing the ctor throws. This might
	    // end up fixing it if the resolution was a concurrency bug.

	    thenable.then(function (moduleObject) {
	      if (payload._status === Pending || payload._status === Uninitialized) {
	        // Transition to the next state.
	        var resolved = payload;
	        resolved._status = Resolved;
	        resolved._result = moduleObject;
	      }
	    }, function (error) {
	      if (payload._status === Pending || payload._status === Uninitialized) {
	        // Transition to the next state.
	        var rejected = payload;
	        rejected._status = Rejected;
	        rejected._result = error;
	      }
	    });

	    if (payload._status === Uninitialized) {
	      // In case, we're still uninitialized, then we're waiting for the thenable
	      // to resolve. Set it as pending in the meantime.
	      var pending = payload;
	      pending._status = Pending;
	      pending._result = thenable;
	    }
	  }

	  if (payload._status === Resolved) {
	    var moduleObject = payload._result;

	    {
	      if (moduleObject === undefined) {
	        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
	        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
	      }
	    }

	    {
	      if (!('default' in moduleObject)) {
	        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
	        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
	      }
	    }

	    return moduleObject.default;
	  } else {
	    throw payload._result;
	  }
	}

	function lazy(ctor) {
	  var payload = {
	    // We use these fields to store the result.
	    _status: Uninitialized,
	    _result: ctor
	  };
	  var lazyType = {
	    $$typeof: REACT_LAZY_TYPE,
	    _payload: payload,
	    _init: lazyInitializer
	  };

	  {
	    // In production, this would just set it on the object.
	    var defaultProps;
	    var propTypes; // $FlowFixMe

	    Object.defineProperties(lazyType, {
	      defaultProps: {
	        configurable: true,
	        get: function () {
	          return defaultProps;
	        },
	        set: function (newDefaultProps) {
	          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          defaultProps = newDefaultProps; // Match production behavior more closely:
	          // $FlowFixMe

	          Object.defineProperty(lazyType, 'defaultProps', {
	            enumerable: true
	          });
	        }
	      },
	      propTypes: {
	        configurable: true,
	        get: function () {
	          return propTypes;
	        },
	        set: function (newPropTypes) {
	          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          propTypes = newPropTypes; // Match production behavior more closely:
	          // $FlowFixMe

	          Object.defineProperty(lazyType, 'propTypes', {
	            enumerable: true
	          });
	        }
	      }
	    });
	  }

	  return lazyType;
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      if (render.length !== 0 && render.length !== 2) {
	        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
	      }
	    }

	    if (render != null) {
	      if (render.defaultProps != null || render.propTypes != null) {
	        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
	      }
	    }
	  }

	  var elementType = {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };

	  {
	    var ownName;
	    Object.defineProperty(elementType, 'displayName', {
	      enumerable: false,
	      configurable: true,
	      get: function () {
	        return ownName;
	      },
	      set: function (name) {
	        ownName = name; // The inner component shouldn't inherit this display name in most cases,
	        // because the component may be used elsewhere.
	        // But it's nice for anonymous functions to inherit the name,
	        // so that our component-stack generation logic will display their frames.
	        // An anonymous function generally suggests a pattern like:
	        //   React.forwardRef((props, ref) => {...});
	        // This kind of inner function is not used elsewhere so the side effect is okay.

	        if (!render.name && !render.displayName) {
	          render.displayName = name;
	        }
	      }
	    });
	  }

	  return elementType;
	}

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }

	  var elementType = {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };

	  {
	    var ownName;
	    Object.defineProperty(elementType, 'displayName', {
	      enumerable: false,
	      configurable: true,
	      get: function () {
	        return ownName;
	      },
	      set: function (name) {
	        ownName = name; // The inner component shouldn't inherit this display name in most cases,
	        // because the component may be used elsewhere.
	        // But it's nice for anonymous functions to inherit the name,
	        // so that our component-stack generation logic will display their frames.
	        // An anonymous function generally suggests a pattern like:
	        //   React.memo((props) => {...});
	        // This kind of inner function is not used elsewhere so the side effect is okay.

	        if (!type.name && !type.displayName) {
	          type.displayName = name;
	        }
	      }
	    });
	  }

	  return elementType;
	}

	function resolveDispatcher() {
	  var dispatcher = ReactCurrentDispatcher.current;

	  {
	    if (dispatcher === null) {
	      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
	    }
	  } // Will result in a null access error if accessed outside render phase. We
	  // intentionally don't throw our own error because this is in a hot path.
	  // Also helps ensure this is inlined.


	  return dispatcher;
	}
	function useContext(Context) {
	  var dispatcher = resolveDispatcher();

	  {
	    // TODO: add a more generic warning for invalid values.
	    if (Context._context !== undefined) {
	      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
	      // and nobody should be using this in existing code.

	      if (realContext.Consumer === Context) {
	        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	      } else if (realContext.Provider === Context) {
	        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	      }
	    }
	  }

	  return dispatcher.useContext(Context);
	}
	function useState(initialState) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useState(initialState);
	}
	function useReducer(reducer, initialArg, init) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useReducer(reducer, initialArg, init);
	}
	function useRef(initialValue) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useRef(initialValue);
	}
	function useEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useEffect(create, deps);
	}
	function useInsertionEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useInsertionEffect(create, deps);
	}
	function useLayoutEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useLayoutEffect(create, deps);
	}
	function useCallback(callback, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useCallback(callback, deps);
	}
	function useMemo(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMemo(create, deps);
	}
	function useImperativeHandle(ref, create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useImperativeHandle(ref, create, deps);
	}
	function useDebugValue(value, formatterFn) {
	  {
	    var dispatcher = resolveDispatcher();
	    return dispatcher.useDebugValue(value, formatterFn);
	  }
	}
	function useTransition() {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useTransition();
	}
	function useDeferredValue(value) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useDeferredValue(value);
	}
	function useId() {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useId();
	}
	function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	}

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher$1.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher$1.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	function setCurrentlyValidatingElement$1(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      setExtraStackFrame(stack);
	    } else {
	      setExtraStackFrame(null);
	    }
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentNameFromType(ReactCurrentOwner.current.type);

	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }

	  return '';
	}

	function getSourceInfoErrorAddendum(source) {
	  if (source !== undefined) {
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }

	  return '';
	}

	function getSourceInfoErrorAddendumForProps(elementProps) {
	  if (elementProps !== null && elementProps !== undefined) {
	    return getSourceInfoErrorAddendum(elementProps.__source);
	  }

	  return '';
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	    if (parentName) {
	      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	    }
	  }

	  return info;
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }

	  element._store.validated = true;
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }

	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.

	  var childOwner = '';

	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	  }

	  {
	    setCurrentlyValidatingElement$1(element);

	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

	    setCurrentlyValidatingElement$1(null);
	  }
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }

	  if (isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];

	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);

	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;

	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      // Intentionally inside to avoid triggering lazy initializers:
	      var name = getComponentNameFromType(type);
	      checkPropTypes(propTypes, element.props, 'prop', name, element);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	      var _name = getComponentNameFromType(type);

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        setCurrentlyValidatingElement$1(fragment);

	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        setCurrentlyValidatingElement$1(null);
	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      setCurrentlyValidatingElement$1(fragment);

	      error('Invalid attribute `ref` supplied to `React.Fragment`.');

	      setCurrentlyValidatingElement$1(null);
	    }
	  }
	}
	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.

	  if (!validType) {
	    var info = '';

	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString;

	    if (type === null) {
	      typeString = 'null';
	    } else if (isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    {
	      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }
	  }

	  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.

	  if (element == null) {
	    return element;
	  } // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)


	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}
	var didWarnAboutDeprecatedCreateFactory = false;
	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type;

	  {
	    if (!didWarnAboutDeprecatedCreateFactory) {
	      didWarnAboutDeprecatedCreateFactory = true;

	      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
	    } // Legacy hook: remove it


	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}
	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);

	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }

	  validatePropTypes(newElement);
	  return newElement;
	}

	function startTransition(scope, options) {
	  var prevTransition = ReactCurrentBatchConfig.transition;
	  ReactCurrentBatchConfig.transition = {};
	  var currentTransition = ReactCurrentBatchConfig.transition;

	  {
	    ReactCurrentBatchConfig.transition._updatedFibers = new Set();
	  }

	  try {
	    scope();
	  } finally {
	    ReactCurrentBatchConfig.transition = prevTransition;

	    {
	      if (prevTransition === null && currentTransition._updatedFibers) {
	        var updatedFibersCount = currentTransition._updatedFibers.size;

	        if (updatedFibersCount > 10) {
	          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
	        }

	        currentTransition._updatedFibers.clear();
	      }
	    }
	  }
	}

	var didWarnAboutMessageChannel = false;
	var enqueueTaskImpl = null;
	function enqueueTask(task) {
	  if (enqueueTaskImpl === null) {
	    try {
	      // read require off the module object to get around the bundlers.
	      // we don't want them to detect a require and bundle a Node polyfill.
	      var requireString = ('require' + Math.random()).slice(0, 7);
	      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
	      // version of setImmediate, bypassing fake timers if any.

	      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
	    } catch (_err) {
	      // we're in a browser
	      // we can't use regular timers because they may still be faked
	      // so we try MessageChannel+postMessage instead
	      enqueueTaskImpl = function (callback) {
	        {
	          if (didWarnAboutMessageChannel === false) {
	            didWarnAboutMessageChannel = true;

	            if (typeof MessageChannel === 'undefined') {
	              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
	            }
	          }
	        }

	        var channel = new MessageChannel();
	        channel.port1.onmessage = callback;
	        channel.port2.postMessage(undefined);
	      };
	    }
	  }

	  return enqueueTaskImpl(task);
	}

	var actScopeDepth = 0;
	var didWarnNoAwaitAct = false;
	function act(callback) {
	  {
	    // `act` calls can be nested, so we track the depth. This represents the
	    // number of `act` scopes on the stack.
	    var prevActScopeDepth = actScopeDepth;
	    actScopeDepth++;

	    if (ReactCurrentActQueue.current === null) {
	      // This is the outermost `act` scope. Initialize the queue. The reconciler
	      // will detect the queue and use it instead of Scheduler.
	      ReactCurrentActQueue.current = [];
	    }

	    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
	    var result;

	    try {
	      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
	      // set to `true` while the given callback is executed, not for updates
	      // triggered during an async event, because this is how the legacy
	      // implementation of `act` behaved.
	      ReactCurrentActQueue.isBatchingLegacy = true;
	      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
	      // which flushed updates immediately after the scope function exits, even
	      // if it's an async function.

	      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
	        var queue = ReactCurrentActQueue.current;

	        if (queue !== null) {
	          ReactCurrentActQueue.didScheduleLegacyUpdate = false;
	          flushActQueue(queue);
	        }
	      }
	    } catch (error) {
	      popActScope(prevActScopeDepth);
	      throw error;
	    } finally {
	      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
	    }

	    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
	      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
	      // for it to resolve before exiting the current scope.

	      var wasAwaited = false;
	      var thenable = {
	        then: function (resolve, reject) {
	          wasAwaited = true;
	          thenableResult.then(function (returnValue) {
	            popActScope(prevActScopeDepth);

	            if (actScopeDepth === 0) {
	              // We've exited the outermost act scope. Recursively flush the
	              // queue until there's no remaining work.
	              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
	            } else {
	              resolve(returnValue);
	            }
	          }, function (error) {
	            // The callback threw an error.
	            popActScope(prevActScopeDepth);
	            reject(error);
	          });
	        }
	      };

	      {
	        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
	          // eslint-disable-next-line no-undef
	          Promise.resolve().then(function () {}).then(function () {
	            if (!wasAwaited) {
	              didWarnNoAwaitAct = true;

	              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
	            }
	          });
	        }
	      }

	      return thenable;
	    } else {
	      var returnValue = result; // The callback is not an async function. Exit the current scope
	      // immediately, without awaiting.

	      popActScope(prevActScopeDepth);

	      if (actScopeDepth === 0) {
	        // Exiting the outermost act scope. Flush the queue.
	        var _queue = ReactCurrentActQueue.current;

	        if (_queue !== null) {
	          flushActQueue(_queue);
	          ReactCurrentActQueue.current = null;
	        } // Return a thenable. If the user awaits it, we'll flush again in
	        // case additional work was scheduled by a microtask.


	        var _thenable = {
	          then: function (resolve, reject) {
	            // Confirm we haven't re-entered another `act` scope, in case
	            // the user does something weird like await the thenable
	            // multiple times.
	            if (ReactCurrentActQueue.current === null) {
	              // Recursively flush the queue until there's no remaining work.
	              ReactCurrentActQueue.current = [];
	              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
	            } else {
	              resolve(returnValue);
	            }
	          }
	        };
	        return _thenable;
	      } else {
	        // Since we're inside a nested `act` scope, the returned thenable
	        // immediately resolves. The outer scope will flush the queue.
	        var _thenable2 = {
	          then: function (resolve, reject) {
	            resolve(returnValue);
	          }
	        };
	        return _thenable2;
	      }
	    }
	  }
	}

	function popActScope(prevActScopeDepth) {
	  {
	    if (prevActScopeDepth !== actScopeDepth - 1) {
	      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
	    }

	    actScopeDepth = prevActScopeDepth;
	  }
	}

	function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
	  {
	    var queue = ReactCurrentActQueue.current;

	    if (queue !== null) {
	      try {
	        flushActQueue(queue);
	        enqueueTask(function () {
	          if (queue.length === 0) {
	            // No additional work was scheduled. Finish.
	            ReactCurrentActQueue.current = null;
	            resolve(returnValue);
	          } else {
	            // Keep flushing work until there's none left.
	            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
	          }
	        });
	      } catch (error) {
	        reject(error);
	      }
	    } else {
	      resolve(returnValue);
	    }
	  }
	}

	var isFlushing = false;

	function flushActQueue(queue) {
	  {
	    if (!isFlushing) {
	      // Prevent re-entrance.
	      isFlushing = true;
	      var i = 0;

	      try {
	        for (; i < queue.length; i++) {
	          var callback = queue[i];

	          do {
	            callback = callback(true);
	          } while (callback !== null);
	        }

	        queue.length = 0;
	      } catch (error) {
	        // If something throws, leave the remaining callbacks on the queue.
	        queue = queue.slice(i + 1);
	        throw error;
	      } finally {
	        isFlushing = false;
	      }
	    }
	  }
	}

	var createElement$1 =  createElementWithValidation ;
	var cloneElement$1 =  cloneElementWithValidation ;
	var createFactory =  createFactoryWithValidation ;
	var Children = {
	  map: mapChildren,
	  forEach: forEachChildren,
	  count: countChildren,
	  toArray: toArray,
	  only: onlyChild
	};

	exports.Children = Children;
	exports.Component = Component;
	exports.Fragment = REACT_FRAGMENT_TYPE;
	exports.Profiler = REACT_PROFILER_TYPE;
	exports.PureComponent = PureComponent;
	exports.StrictMode = REACT_STRICT_MODE_TYPE;
	exports.Suspense = REACT_SUSPENSE_TYPE;
	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
	exports.cloneElement = cloneElement$1;
	exports.createContext = createContext;
	exports.createElement = createElement$1;
	exports.createFactory = createFactory;
	exports.createRef = createRef;
	exports.forwardRef = forwardRef;
	exports.isValidElement = isValidElement;
	exports.lazy = lazy;
	exports.memo = memo;
	exports.startTransition = startTransition;
	exports.unstable_act = act;
	exports.useCallback = useCallback;
	exports.useContext = useContext;
	exports.useDebugValue = useDebugValue;
	exports.useDeferredValue = useDeferredValue;
	exports.useEffect = useEffect;
	exports.useId = useId;
	exports.useImperativeHandle = useImperativeHandle;
	exports.useInsertionEffect = useInsertionEffect;
	exports.useLayoutEffect = useLayoutEffect;
	exports.useMemo = useMemo;
	exports.useReducer = useReducer;
	exports.useRef = useRef;
	exports.useState = useState;
	exports.useSyncExternalStore = useSyncExternalStore;
	exports.useTransition = useTransition;
	exports.version = ReactVersion;
	          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	}
	        
	  })();
	}
} (react_development, react_development.exports));

(function (module) {

	{
	  module.exports = react_development.exports;
	}
} (react));

var React = /*@__PURE__*/getDefaultExportFromCjs(react.exports);

var reactDom = {exports: {}};

var reactDom_development = {};

var scheduler = {exports: {}};

var scheduler_development = {};

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (exports) {

	{
	  (function() {

	/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	}
	          var enableSchedulerDebugging = false;
	var enableProfiling = false;
	var frameYieldMs = 5;

	function push(heap, node) {
	  var index = heap.length;
	  heap.push(node);
	  siftUp(heap, node, index);
	}
	function peek(heap) {
	  return heap.length === 0 ? null : heap[0];
	}
	function pop(heap) {
	  if (heap.length === 0) {
	    return null;
	  }

	  var first = heap[0];
	  var last = heap.pop();

	  if (last !== first) {
	    heap[0] = last;
	    siftDown(heap, last, 0);
	  }

	  return first;
	}

	function siftUp(heap, node, i) {
	  var index = i;

	  while (index > 0) {
	    var parentIndex = index - 1 >>> 1;
	    var parent = heap[parentIndex];

	    if (compare(parent, node) > 0) {
	      // The parent is larger. Swap positions.
	      heap[parentIndex] = node;
	      heap[index] = parent;
	      index = parentIndex;
	    } else {
	      // The parent is smaller. Exit.
	      return;
	    }
	  }
	}

	function siftDown(heap, node, i) {
	  var index = i;
	  var length = heap.length;
	  var halfLength = length >>> 1;

	  while (index < halfLength) {
	    var leftIndex = (index + 1) * 2 - 1;
	    var left = heap[leftIndex];
	    var rightIndex = leftIndex + 1;
	    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

	    if (compare(left, node) < 0) {
	      if (rightIndex < length && compare(right, left) < 0) {
	        heap[index] = right;
	        heap[rightIndex] = node;
	        index = rightIndex;
	      } else {
	        heap[index] = left;
	        heap[leftIndex] = node;
	        index = leftIndex;
	      }
	    } else if (rightIndex < length && compare(right, node) < 0) {
	      heap[index] = right;
	      heap[rightIndex] = node;
	      index = rightIndex;
	    } else {
	      // Neither child is smaller. Exit.
	      return;
	    }
	  }
	}

	function compare(a, b) {
	  // Compare sort index first, then task id.
	  var diff = a.sortIndex - b.sortIndex;
	  return diff !== 0 ? diff : a.id - b.id;
	}

	// TODO: Use symbols?
	var ImmediatePriority = 1;
	var UserBlockingPriority = 2;
	var NormalPriority = 3;
	var LowPriority = 4;
	var IdlePriority = 5;

	function markTaskErrored(task, ms) {
	}

	/* eslint-disable no-var */

	var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

	if (hasPerformanceNow) {
	  var localPerformance = performance;

	  exports.unstable_now = function () {
	    return localPerformance.now();
	  };
	} else {
	  var localDate = Date;
	  var initialTime = localDate.now();

	  exports.unstable_now = function () {
	    return localDate.now() - initialTime;
	  };
	} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111


	var maxSigned31BitInt = 1073741823; // Times out immediately

	var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

	var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
	var NORMAL_PRIORITY_TIMEOUT = 5000;
	var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

	var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

	var taskQueue = [];
	var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

	var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
	var currentTask = null;
	var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

	var isPerformingWork = false;
	var isHostCallbackScheduled = false;
	var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

	var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
	var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
	var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

	typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

	function advanceTimers(currentTime) {
	  // Check for tasks that are no longer delayed and add them to the queue.
	  var timer = peek(timerQueue);

	  while (timer !== null) {
	    if (timer.callback === null) {
	      // Timer was cancelled.
	      pop(timerQueue);
	    } else if (timer.startTime <= currentTime) {
	      // Timer fired. Transfer to the task queue.
	      pop(timerQueue);
	      timer.sortIndex = timer.expirationTime;
	      push(taskQueue, timer);
	    } else {
	      // Remaining timers are pending.
	      return;
	    }

	    timer = peek(timerQueue);
	  }
	}

	function handleTimeout(currentTime) {
	  isHostTimeoutScheduled = false;
	  advanceTimers(currentTime);

	  if (!isHostCallbackScheduled) {
	    if (peek(taskQueue) !== null) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    } else {
	      var firstTimer = peek(timerQueue);

	      if (firstTimer !== null) {
	        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	      }
	    }
	  }
	}

	function flushWork(hasTimeRemaining, initialTime) {


	  isHostCallbackScheduled = false;

	  if (isHostTimeoutScheduled) {
	    // We scheduled a timeout but it's no longer needed. Cancel it.
	    isHostTimeoutScheduled = false;
	    cancelHostTimeout();
	  }

	  isPerformingWork = true;
	  var previousPriorityLevel = currentPriorityLevel;

	  try {
	    var currentTime; if (enableProfiling) ; else {
	      // No catch in prod code path.
	      return workLoop(hasTimeRemaining, initialTime);
	    }
	  } finally {
	    currentTask = null;
	    currentPriorityLevel = previousPriorityLevel;
	    isPerformingWork = false;
	  }
	}

	function workLoop(hasTimeRemaining, initialTime) {
	  var currentTime = initialTime;
	  advanceTimers(currentTime);
	  currentTask = peek(taskQueue);

	  while (currentTask !== null && !(enableSchedulerDebugging )) {
	    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
	      // This currentTask hasn't expired, and we've reached the deadline.
	      break;
	    }

	    var callback = currentTask.callback;

	    if (typeof callback === 'function') {
	      currentTask.callback = null;
	      currentPriorityLevel = currentTask.priorityLevel;
	      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

	      var continuationCallback = callback(didUserCallbackTimeout);
	      currentTime = exports.unstable_now();

	      if (typeof continuationCallback === 'function') {
	        currentTask.callback = continuationCallback;
	      } else {

	        if (currentTask === peek(taskQueue)) {
	          pop(taskQueue);
	        }
	      }

	      advanceTimers(currentTime);
	    } else {
	      pop(taskQueue);
	    }

	    currentTask = peek(taskQueue);
	  } // Return whether there's additional work


	  if (currentTask !== null) {
	    return true;
	  } else {
	    var firstTimer = peek(timerQueue);

	    if (firstTimer !== null) {
	      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	    }

	    return false;
	  }
	}

	function unstable_runWithPriority(priorityLevel, eventHandler) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	    case LowPriority:
	    case IdlePriority:
	      break;

	    default:
	      priorityLevel = NormalPriority;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_next(eventHandler) {
	  var priorityLevel;

	  switch (currentPriorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	      // Shift down to normal priority
	      priorityLevel = NormalPriority;
	      break;

	    default:
	      // Anything lower than normal priority should remain at the current level.
	      priorityLevel = currentPriorityLevel;
	      break;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_wrapCallback(callback) {
	  var parentPriorityLevel = currentPriorityLevel;
	  return function () {
	    // This is a fork of runWithPriority, inlined for performance.
	    var previousPriorityLevel = currentPriorityLevel;
	    currentPriorityLevel = parentPriorityLevel;

	    try {
	      return callback.apply(this, arguments);
	    } finally {
	      currentPriorityLevel = previousPriorityLevel;
	    }
	  };
	}

	function unstable_scheduleCallback(priorityLevel, callback, options) {
	  var currentTime = exports.unstable_now();
	  var startTime;

	  if (typeof options === 'object' && options !== null) {
	    var delay = options.delay;

	    if (typeof delay === 'number' && delay > 0) {
	      startTime = currentTime + delay;
	    } else {
	      startTime = currentTime;
	    }
	  } else {
	    startTime = currentTime;
	  }

	  var timeout;

	  switch (priorityLevel) {
	    case ImmediatePriority:
	      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
	      break;

	    case UserBlockingPriority:
	      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
	      break;

	    case IdlePriority:
	      timeout = IDLE_PRIORITY_TIMEOUT;
	      break;

	    case LowPriority:
	      timeout = LOW_PRIORITY_TIMEOUT;
	      break;

	    case NormalPriority:
	    default:
	      timeout = NORMAL_PRIORITY_TIMEOUT;
	      break;
	  }

	  var expirationTime = startTime + timeout;
	  var newTask = {
	    id: taskIdCounter++,
	    callback: callback,
	    priorityLevel: priorityLevel,
	    startTime: startTime,
	    expirationTime: expirationTime,
	    sortIndex: -1
	  };

	  if (startTime > currentTime) {
	    // This is a delayed task.
	    newTask.sortIndex = startTime;
	    push(timerQueue, newTask);

	    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
	      // All tasks are delayed, and this is the task with the earliest delay.
	      if (isHostTimeoutScheduled) {
	        // Cancel an existing timeout.
	        cancelHostTimeout();
	      } else {
	        isHostTimeoutScheduled = true;
	      } // Schedule a timeout.


	      requestHostTimeout(handleTimeout, startTime - currentTime);
	    }
	  } else {
	    newTask.sortIndex = expirationTime;
	    push(taskQueue, newTask);
	    // wait until the next time we yield.


	    if (!isHostCallbackScheduled && !isPerformingWork) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    }
	  }

	  return newTask;
	}

	function unstable_pauseExecution() {
	}

	function unstable_continueExecution() {

	  if (!isHostCallbackScheduled && !isPerformingWork) {
	    isHostCallbackScheduled = true;
	    requestHostCallback(flushWork);
	  }
	}

	function unstable_getFirstCallbackNode() {
	  return peek(taskQueue);
	}

	function unstable_cancelCallback(task) {
	  // remove from the queue because you can't remove arbitrary nodes from an
	  // array based heap, only the first one.)


	  task.callback = null;
	}

	function unstable_getCurrentPriorityLevel() {
	  return currentPriorityLevel;
	}

	var isMessageLoopRunning = false;
	var scheduledHostCallback = null;
	var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
	// thread, like user events. By default, it yields multiple times per frame.
	// It does not attempt to align with frame boundaries, since most tasks don't
	// need to be frame aligned; for those that do, use requestAnimationFrame.

	var frameInterval = frameYieldMs;
	var startTime = -1;

	function shouldYieldToHost() {
	  var timeElapsed = exports.unstable_now() - startTime;

	  if (timeElapsed < frameInterval) {
	    // The main thread has only been blocked for a really short amount of time;
	    // smaller than a single frame. Don't yield yet.
	    return false;
	  } // The main thread has been blocked for a non-negligible amount of time. We


	  return true;
	}

	function requestPaint() {

	}

	function forceFrameRate(fps) {
	  if (fps < 0 || fps > 125) {
	    // Using console['error'] to evade Babel and ESLint
	    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
	    return;
	  }

	  if (fps > 0) {
	    frameInterval = Math.floor(1000 / fps);
	  } else {
	    // reset the framerate
	    frameInterval = frameYieldMs;
	  }
	}

	var performWorkUntilDeadline = function () {
	  if (scheduledHostCallback !== null) {
	    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
	    // has been blocked.

	    startTime = currentTime;
	    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
	    // error can be observed.
	    //
	    // Intentionally not using a try-catch, since that makes some debugging
	    // techniques harder. Instead, if `scheduledHostCallback` errors, then
	    // `hasMoreWork` will remain true, and we'll continue the work loop.

	    var hasMoreWork = true;

	    try {
	      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
	    } finally {
	      if (hasMoreWork) {
	        // If there's more work, schedule the next message event at the end
	        // of the preceding one.
	        schedulePerformWorkUntilDeadline();
	      } else {
	        isMessageLoopRunning = false;
	        scheduledHostCallback = null;
	      }
	    }
	  } else {
	    isMessageLoopRunning = false;
	  } // Yielding to the browser will give it a chance to paint, so we can
	};

	var schedulePerformWorkUntilDeadline;

	if (typeof localSetImmediate === 'function') {
	  // Node.js and old IE.
	  // There's a few reasons for why we prefer setImmediate.
	  //
	  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
	  // (Even though this is a DOM fork of the Scheduler, you could get here
	  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
	  // https://github.com/facebook/react/issues/20756
	  //
	  // But also, it runs earlier which is the semantic we want.
	  // If other browsers ever implement it, it's better to use it.
	  // Although both of these would be inferior to native scheduling.
	  schedulePerformWorkUntilDeadline = function () {
	    localSetImmediate(performWorkUntilDeadline);
	  };
	} else if (typeof MessageChannel !== 'undefined') {
	  // DOM and Worker environments.
	  // We prefer MessageChannel because of the 4ms setTimeout clamping.
	  var channel = new MessageChannel();
	  var port = channel.port2;
	  channel.port1.onmessage = performWorkUntilDeadline;

	  schedulePerformWorkUntilDeadline = function () {
	    port.postMessage(null);
	  };
	} else {
	  // We should only fallback here in non-browser environments.
	  schedulePerformWorkUntilDeadline = function () {
	    localSetTimeout(performWorkUntilDeadline, 0);
	  };
	}

	function requestHostCallback(callback) {
	  scheduledHostCallback = callback;

	  if (!isMessageLoopRunning) {
	    isMessageLoopRunning = true;
	    schedulePerformWorkUntilDeadline();
	  }
	}

	function requestHostTimeout(callback, ms) {
	  taskTimeoutID = localSetTimeout(function () {
	    callback(exports.unstable_now());
	  }, ms);
	}

	function cancelHostTimeout() {
	  localClearTimeout(taskTimeoutID);
	  taskTimeoutID = -1;
	}

	var unstable_requestPaint = requestPaint;
	var unstable_Profiling =  null;

	exports.unstable_IdlePriority = IdlePriority;
	exports.unstable_ImmediatePriority = ImmediatePriority;
	exports.unstable_LowPriority = LowPriority;
	exports.unstable_NormalPriority = NormalPriority;
	exports.unstable_Profiling = unstable_Profiling;
	exports.unstable_UserBlockingPriority = UserBlockingPriority;
	exports.unstable_cancelCallback = unstable_cancelCallback;
	exports.unstable_continueExecution = unstable_continueExecution;
	exports.unstable_forceFrameRate = forceFrameRate;
	exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
	exports.unstable_next = unstable_next;
	exports.unstable_pauseExecution = unstable_pauseExecution;
	exports.unstable_requestPaint = unstable_requestPaint;
	exports.unstable_runWithPriority = unstable_runWithPriority;
	exports.unstable_scheduleCallback = unstable_scheduleCallback;
	exports.unstable_shouldYield = shouldYieldToHost;
	exports.unstable_wrapCallback = unstable_wrapCallback;
	          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	}
	        
	  })();
	}
} (scheduler_development));

(function (module) {

	{
	  module.exports = scheduler_development;
	}
} (scheduler));

/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  (function() {

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var React = react.exports;
var Scheduler = scheduler.exports;

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var suppressWarning = false;
function setSuppressWarning(newSuppressWarning) {
  {
    suppressWarning = newSuppressWarning;
  }
} // In DEV, calls to console.warn and console.error get replaced
// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    if (!suppressWarning) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      printWarning('warn', format, args);
    }
  }
}
function error(format) {
  {
    if (!suppressWarning) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var ScopeComponent = 21;
var OffscreenComponent = 22;
var LegacyHiddenComponent = 23;
var CacheComponent = 24;
var TracingMarkerComponent = 25;

// -----------------------------------------------------------------------------

var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
// the react-reconciler package.

var enableNewReconciler = false; // Support legacy Primer support on internal FB www

var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.

var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber

var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
// React DOM Chopping Block
//
// Similar to main Chopping Block but only flags related to React DOM. These are
// grouped because we will likely batch all of them into a single major release.
// -----------------------------------------------------------------------------
// Disable support for comment nodes as React DOM containers. Already disabled
// in open source, but www codebase still relies on it. Need to remove.

var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
// and client rendering, mostly to allow JSX attributes to apply to the custom
// element's object properties instead of only HTML attributes.
// https://github.com/facebook/react/issues/11347

var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
// Debugging and DevTools
// -----------------------------------------------------------------------------
// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
// for an experimental timeline tool.

var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState

var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".

var allNativeEvents = new Set();
/**
 * Mapping from registration name to event name
 */


var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

function registerTwoPhaseEvent(registrationName, dependencies) {
  registerDirectEvent(registrationName, dependencies);
  registerDirectEvent(registrationName + 'Capture', dependencies);
}
function registerDirectEvent(registrationName, dependencies) {
  {
    if (registrationNameDependencies[registrationName]) {
      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
    }
  }

  registrationNameDependencies[registrationName] = dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }

  for (var i = 0; i < dependencies.length; i++) {
    allNativeEvents.add(dependencies[i]);
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

var hasOwnProperty = Object.prototype.hasOwnProperty;

/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */
// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value) {
  {
    // toStringTag is needed for namespaced types like Temporal.Instant
    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
    return type;
  }
} // $FlowFixMe only called in DEV, so void return is not possible.


function willCoercionThrow(value) {
  {
    try {
      testStringCoercion(value);
      return false;
    } catch (e) {
      return true;
    }
  }
}

function testStringCoercion(value) {
  // If you ended up here by following an exception call stack, here's what's
  // happened: you supplied an object or symbol value to React (as a prop, key,
  // DOM attribute, CSS property, string ref, etc.) and when React tried to
  // coerce it to a string using `'' + value`, an exception was thrown.
  //
  // The most common types that will cause this exception are `Symbol` instances
  // and Temporal objects like `Temporal.Instant`. But any object that has a
  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
  // exception. (Library authors do this to prevent users from using built-in
  // numeric operators like `+` or comparison operators like `>=` because custom
  // methods are needed to perform accurate arithmetic or comparison.)
  //
  // To fix the problem, coerce this object or symbol value to a string before
  // passing it to React. The most reliable way is usually `String(value)`.
  //
  // To find which value is throwing, check the browser or debugger console.
  // Before this exception was thrown, there should be `console.error` output
  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
  // problem and how that type was used: key, atrribute, input value prop, etc.
  // In most cases, this console output also shows the component and its
  // ancestor components where the exception happened.
  //
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}

function checkAttributeStringCoercion(value, attributeName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkKeyStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkPropStringCoercion(value, propName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkCSSPropertyStringCoercion(value, propName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkHtmlStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkFormFieldValueStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the filter are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {

    return false;
  }

  if (propertyInfo !== null) {

    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
  this.removeEmptyString = removeEmptyString;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML attribute filter.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
  false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
  false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
false);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true, // sanitizeURL
  true);
});

// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */

var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      // This check protects multiple uses of `expected`, which is why the
      // react-internal/safe-string-coercion rule is disabled in several spots
      // below.
      {
        checkAttributeStringCoercion(expected, name);
      }

      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        // eslint-disable-next-line react-internal/safe-string-coercion
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          } // eslint-disable-next-line react-internal/safe-string-coercion


          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected, isCustomComponentTag) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    {
      checkAttributeStringCoercion(expected, name);
    }

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  }


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        {
          checkAttributeStringCoercion(value, name);
        }

        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        {
          checkAttributeStringCoercion(value, attributeName);
        }

        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE = Symbol.for('react.element');
var REACT_PORTAL_TYPE = Symbol.for('react.portal');
var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
var REACT_CONTEXT_TYPE = Symbol.for('react.context');
var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
var REACT_MEMO_TYPE = Symbol.for('react.memo');
var REACT_LAZY_TYPE = Symbol.for('react.lazy');
var REACT_SCOPE_TYPE = Symbol.for('react.scope');
var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
var REACT_CACHE_TYPE = Symbol.for('react.cache');
var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var assign = Object.assign;

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: assign({}, props, {
          value: prevLog
        }),
        info: assign({}, props, {
          value: prevInfo
        }),
        warn: assign({}, props, {
          value: prevWarn
        }),
        error: assign({}, props, {
          value: prevError
        }),
        group: assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if ( !fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                // but we have a user-provided "displayName"
                // splice it in to make the stack more readable.


                if (fn.displayName && _frame.includes('<anonymous>')) {
                  _frame = _frame.replace('<anonymous>', fn.displayName);
                }

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}

function describeClassComponentFrame(ctor, source, ownerFn) {
  {
    return describeNativeComponentFrame(ctor, true);
  }
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

function describeFiber(fiber) {
  fiber._debugOwner ? fiber._debugOwner.type : null ;
  fiber._debugSource ;

  switch (fiber.tag) {
    case HostComponent:
      return describeBuiltInComponentFrame(fiber.type);

    case LazyComponent:
      return describeBuiltInComponentFrame('Lazy');

    case SuspenseComponent:
      return describeBuiltInComponentFrame('Suspense');

    case SuspenseListComponent:
      return describeBuiltInComponentFrame('SuspenseList');

    case FunctionComponent:
    case IndeterminateComponent:
    case SimpleMemoComponent:
      return describeFunctionComponentFrame(fiber.type);

    case ForwardRef:
      return describeFunctionComponentFrame(fiber.type.render);

    case ClassComponent:
      return describeClassComponentFrame(fiber.type);

    default:
      return '';
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  try {
    var info = '';
    var node = workInProgress;

    do {
      info += describeFiber(node);
      node = node.return;
    } while (node);

    return info;
  } catch (x) {
    return '\nError generating stack: ' + x.message + '\n' + x.stack;
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var displayName = outerType.displayName;

  if (displayName) {
    return displayName;
  }

  var functionName = innerType.displayName || innerType.name || '';
  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
} // Keep in sync with react-reconciler/getComponentNameFromFiber


function getContextName(type) {
  return type.displayName || 'Context';
} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


function getComponentNameFromType(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';

  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        var outerName = type.displayName || null;

        if (outerName !== null) {
          return outerName;
        }

        return getComponentNameFromType(type.type) || 'Memo';

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentNameFromType(init(payload));
          } catch (x) {
            return null;
          }
        }

      // eslint-disable-next-line no-fallthrough
    }
  }

  return null;
}

function getWrappedName$1(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
} // Keep in sync with shared/getComponentNameFromType


function getContextName$1(type) {
  return type.displayName || 'Context';
}

function getComponentNameFromFiber(fiber) {
  var tag = fiber.tag,
      type = fiber.type;

  switch (tag) {
    case CacheComponent:
      return 'Cache';

    case ContextConsumer:
      var context = type;
      return getContextName$1(context) + '.Consumer';

    case ContextProvider:
      var provider = type;
      return getContextName$1(provider._context) + '.Provider';

    case DehydratedFragment:
      return 'DehydratedFragment';

    case ForwardRef:
      return getWrappedName$1(type, type.render, 'ForwardRef');

    case Fragment:
      return 'Fragment';

    case HostComponent:
      // Host component type is the display name (e.g. "div", "View")
      return type;

    case HostPortal:
      return 'Portal';

    case HostRoot:
      return 'Root';

    case HostText:
      return 'Text';

    case LazyComponent:
      // Name comes from the type in this case; we don't have a tag.
      return getComponentNameFromType(type);

    case Mode:
      if (type === REACT_STRICT_MODE_TYPE) {
        // Don't be less specific than shared/getComponentNameFromType
        return 'StrictMode';
      }

      return 'Mode';

    case OffscreenComponent:
      return 'Offscreen';

    case Profiler:
      return 'Profiler';

    case ScopeComponent:
      return 'Scope';

    case SuspenseComponent:
      return 'Suspense';

    case SuspenseListComponent:
      return 'SuspenseList';

    case TracingMarkerComponent:
      return 'TracingMarker';
    // The display name for this tags come from the user-provided type:

    case ClassComponent:
    case FunctionComponent:
    case IncompleteClassComponent:
    case IndeterminateComponent:
    case MemoComponent:
    case SimpleMemoComponent:
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      break;

  }

  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentNameFromFiber(owner);
    }
  }

  return null;
}

function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}

function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function getCurrentFiber() {
  {
    return current;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  // The coercion safety check is performed in getToStringValue().
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'string':
    case 'undefined':
      return value;

    case 'object':
      {
        checkFormFieldValueStringCoercion(value);
      }

      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};
function checkControlledValueProps(tagName, props) {
  {
    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }

    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  }
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  {
    checkFormFieldValueStringCoercion(node[valueField]);
  }

  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      {
        checkFormFieldValueStringCoercion(value);
      }

      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      {
        checkFormFieldValueStringCoercion(value);
      }

      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;
  var hostProps = assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });
  return hostProps;
}
function initWrapperState(element, props) {
  {
    checkControlledValueProps('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    {
      checkAttributeStringCoercion(name, 'name');
    }

    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode(otherNode);

      if (!otherProps) {
        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;
var didWarnInvalidInnerHTML = false;
/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  {
    // If a value is not provided, then the children must be simple.
    if (props.value == null) {
      if (typeof props.children === 'object' && props.children !== null) {
        React.Children.forEach(props.children, function (child) {
          if (child == null) {
            return;
          }

          if (typeof child === 'string' || typeof child === 'number') {
            return;
          }

          if (!didWarnInvalidChild) {
            didWarnInvalidChild = true;

            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');
          }
        });
      } else if (props.dangerouslySetInnerHTML != null) {
        if (!didWarnInvalidInnerHTML) {
          didWarnInvalidInnerHTML = true;

          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');
        }
      }
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}

var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

function isArray(a) {
  return isArrayImpl(a);
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    checkControlledValueProps('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var propNameIsArray = isArray(props[propName]);

      if (props.multiple && !propNameIsArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && propNameIsArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$1(element, props) {
  return assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$2(element, props) {
  var node = element;

  if (props.dangerouslySetInnerHTML != null) {
    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    checkControlledValueProps('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (defaultValue != null) {
          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
        }

        if (isArray(children)) {
          if (children.length > 1) {
            throw new Error('<textarea> can only have at most one child.');
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === SVG_NAMESPACE) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  {
    checkCSSPropertyStringCoercion(value, name);
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {
    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a list for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (props.children != null || props.dangerouslySetInnerHTML != null) {
      throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (props.children != null) {
      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
    }

    if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {
      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (props.style != null && typeof props.style !== 'object') {
    throw new Error('The `style` prop expects a mapping from style properties to values, ' + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + 'using JSX.');
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this list too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG allowed attribute list, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  disableremoteplayback: 'disableRemotePlayback',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  enterkeyhint: 'enterKeyHint',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  imagesizes: 'imageSizes',
  imagesrcset: 'imageSrcSet',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-description': 0,
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, eventRegistry) {
    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (eventRegistry != null) {
      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

      if (registrationNameDependencies.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, eventRegistry) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, eventRegistry) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, eventRegistry);
}

var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
var IS_NON_DELEGATED = 1 << 1;
var IS_CAPTURE_PHASE = 1 << 2;
// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
// we call willDeferLaterForLegacyFBSupport, thus not bailing out
// will result in endless cycles like an infinite loop.
// We also don't want to defer during event replaying.

var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

// This exists to avoid circular dependency between ReactDOMEventReplaying
// and DOMPluginEventSystem.
var currentReplayingEvent = null;
function setReplayingEvent(event) {
  {
    if (currentReplayingEvent !== null) {
      error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
    }
  }

  currentReplayingEvent = event;
}
function resetReplayingEvent() {
  {
    if (currentReplayingEvent === null) {
      error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
    }
  }

  currentReplayingEvent = null;
}
function isReplayingEvent(event) {
  return event === currentReplayingEvent;
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (typeof restoreImpl !== 'function') {
    throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var flushSyncImpl = function () {};

var isInsideEventHandler = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    // TODO: Restore state in the microtask, after the discrete updates flush,
    // instead of early flushing them here.
    flushSyncImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, a, b) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, a, b);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
} // TODO: Replace with flushSync
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  flushSyncImpl = _flushSyncImpl;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var stateNode = inst.stateNode;

  if (stateNode === null) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (props === null) {
    // Work in progress.
    return null;
  }

  var listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (listener && typeof listener !== 'function') {
    throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
  }

  return listener;
}

var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

if (canUseDOM) {
  try {
    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

    Object.defineProperty(options, 'passive', {
      get: function () {
        passiveBrowserEventsSupported = true;
      }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
  } catch (e) {
    passiveBrowserEventsSupported = false;
  }
}

function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
}

var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebook/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (typeof document === 'undefined' || document === null) {
        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');
      }

      var evt = document.createEvent('Event');
      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

      function restoreAfterDispatch() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }
      } // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.


      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        didCall = true;
        restoreAfterDispatch();
        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didCall && didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          // eslint-disable-next-line react-internal/prod-error-codes
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          // eslint-disable-next-line react-internal/prod-error-codes
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);

      if (!didCall) {
        // Something went really wrong, and our event was not dispatched.
        // https://github.com/facebook/react/issues/16734
        // https://github.com/facebook/react/issues/16585
        // Fall back to the production implementation.
        restoreAfterDispatch();
        return invokeGuardedCallbackProd.apply(this, arguments);
      }
    };
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');
  }
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternals;
}
function has(key) {
  return key._reactInternals !== undefined;
}
function set(key, value) {
  key._reactInternals = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoFlags =
/*                      */
0;
var PerformedWork =
/*                */
1; // You can change the rest (and add more).

var Placement =
/*                    */
2;
var Update =
/*                       */
4;
var ChildDeletion =
/*                */
16;
var ContentReset =
/*                 */
32;
var Callback =
/*                     */
64;
var DidCapture =
/*                   */
128;
var ForceClientRender =
/*            */
256;
var Ref =
/*                          */
512;
var Snapshot =
/*                     */
1024;
var Passive =
/*                      */
2048;
var Hydrating =
/*                    */
4096;
var Visibility =
/*                   */
8192;
var StoreConsistency =
/*             */
16384;
var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)

var HostEffectMask =
/*               */
32767; // These are not really side effects, but we still reuse this field.

var Incomplete =
/*                   */
32768;
var ShouldCapture =
/*                */
65536;
var ForceUpdateForLegacySuspense =
/* */
131072;
var Forked =
/*                       */
1048576; // Static tags describe aspects of a fiber that are not specific to a render,
// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
// This enables us to defer more work in the unmount case,
// since we can defer traversing the tree during layout to look for Passive effects,
// and instead rely on the static flag as a signal that there may be cleanup work.

var RefStatic =
/*                    */
2097152;
var LayoutStatic =
/*                 */
4194304;
var PassiveStatic =
/*                */
8388608; // These flags allow us to traverse to fibers that have effects on mount
// without traversing the entire tree after every commit for
// double invoking

var MountLayoutDev =
/*               */
16777216;
var MountPassiveDev =
/*              */
33554432; // Groups of flags that are used in the commit phase to skip over trees that
// don't contain effects, by checking subtreeFlags.

var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
// flag logic (see #20043)
Update | Snapshot | ( 0);
var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask

var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
// This allows certain concepts to persist without recalculating them,
// e.g. whether a subtree contains passive effects or portals.

var StaticMask = LayoutStatic | PassiveStatic | RefStatic;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (getNearestMountedFiber(fiber) !== fiber) {
    throw new Error('Unable to find node on an unmounted component.');
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (nearestMounted === null) {
      throw new Error('Unable to find node on an unmounted component.');
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      throw new Error('Unable to find node on an unmounted component.');
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
        }
      }
    }

    if (a.alternate !== b) {
      throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (a.tag !== HostRoot) {
    throw new Error('Unable to find node on an unmounted component.');
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
}

function findCurrentHostFiberImpl(node) {
  // Next we'll drill down this component to find the first HostComponent/Text.
  if (node.tag === HostComponent || node.tag === HostText) {
    return node;
  }

  var child = node.child;

  while (child !== null) {
    var match = findCurrentHostFiberImpl(child);

    if (match !== null) {
      return match;
    }

    child = child.sibling;
  }

  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
}

function findCurrentHostFiberWithNoPortalsImpl(node) {
  // Next we'll drill down this component to find the first HostComponent/Text.
  if (node.tag === HostComponent || node.tag === HostText) {
    return node;
  }

  var child = node.child;

  while (child !== null) {
    if (child.tag !== HostPortal) {
      var match = findCurrentHostFiberWithNoPortalsImpl(child);

      if (match !== null) {
        return match;
      }
    }

    child = child.sibling;
  }

  return null;
}

// This module only exists as an ESM wrapper around the external CommonJS
var scheduleCallback = Scheduler.unstable_scheduleCallback;
var cancelCallback = Scheduler.unstable_cancelCallback;
var shouldYield = Scheduler.unstable_shouldYield;
var requestPaint = Scheduler.unstable_requestPaint;
var now = Scheduler.unstable_now;
var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
var NormalPriority = Scheduler.unstable_NormalPriority;
var LowPriority = Scheduler.unstable_LowPriority;
var IdlePriority = Scheduler.unstable_IdlePriority;
// this doesn't actually exist on the scheduler, but it *does*
// on scheduler/unstable_mock, which we'll need for internal testing
var unstable_yieldValue = Scheduler.unstable_yieldValue;
var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;

var rendererID = null;
var injectedHook = null;
var injectedProfilingHooks = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    if (enableSchedulingProfiler) {
      // Conditionally inject these hooks only if Timeline profiler is supported by this build.
      // This gives DevTools a way to feature detect that isn't tied to version number
      // (since profiling and timeline are controlled by different feature flags).
      internals = assign({}, internals, {
        getLaneLabelMap: getLaneLabelMap,
        injectProfilingHooks: injectProfilingHooks
      });
    }

    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    injectedHook = hook;
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  }

  if (hook.checkDCE) {
    // This is the real DevTools.
    return true;
  } else {
    // This is likely a hook installed by Fast Refresh runtime.
    return false;
  }
}
function onScheduleRoot(root, children) {
  {
    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
      try {
        injectedHook.onScheduleFiberRoot(rendererID, root, children);
      } catch (err) {
        if ( !hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitRoot(root, eventPriority) {
  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
    try {
      var didError = (root.current.flags & DidCapture) === DidCapture;

      if (enableProfilerTimer) {
        var schedulerPriority;

        switch (eventPriority) {
          case DiscreteEventPriority:
            schedulerPriority = ImmediatePriority;
            break;

          case ContinuousEventPriority:
            schedulerPriority = UserBlockingPriority;
            break;

          case DefaultEventPriority:
            schedulerPriority = NormalPriority;
            break;

          case IdleEventPriority:
            schedulerPriority = IdlePriority;
            break;

          default:
            schedulerPriority = NormalPriority;
            break;
        }

        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
      }
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onPostCommitRoot(root) {
  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {
    try {
      injectedHook.onPostCommitFiberRoot(rendererID, root);
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitUnmount(fiber) {
  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
    try {
      injectedHook.onCommitFiberUnmount(rendererID, fiber);
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function setIsStrictModeForDevtools(newIsStrictMode) {
  {
    if (typeof unstable_yieldValue === 'function') {
      // We're in a test because Scheduler.unstable_yieldValue only exists
      // in SchedulerMock. To reduce the noise in strict mode tests,
      // suppress warnings and disable scheduler yielding during the double render
      unstable_setDisableYieldValue(newIsStrictMode);
      setSuppressWarning(newIsStrictMode);
    }

    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {
      try {
        injectedHook.setStrictMode(rendererID, newIsStrictMode);
      } catch (err) {
        {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    }
  }
} // Profiler API hooks

function injectProfilingHooks(profilingHooks) {
  injectedProfilingHooks = profilingHooks;
}

function getLaneLabelMap() {
  {
    var map = new Map();
    var lane = 1;

    for (var index = 0; index < TotalLanes; index++) {
      var label = getLabelForLane(lane);
      map.set(lane, label);
      lane *= 2;
    }

    return map;
  }
}

function markCommitStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {
      injectedProfilingHooks.markCommitStarted(lanes);
    }
  }
}
function markCommitStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {
      injectedProfilingHooks.markCommitStopped();
    }
  }
}
function markComponentRenderStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {
      injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
  }
}
function markComponentRenderStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {
      injectedProfilingHooks.markComponentRenderStopped();
    }
  }
}
function markComponentPassiveEffectMountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
  }
}
function markComponentPassiveEffectMountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
  }
}
function markComponentPassiveEffectUnmountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
  }
}
function markComponentPassiveEffectUnmountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
  }
}
function markComponentLayoutEffectMountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
  }
}
function markComponentLayoutEffectMountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
  }
}
function markComponentLayoutEffectUnmountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
  }
}
function markComponentLayoutEffectUnmountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
  }
}
function markComponentErrored(fiber, thrownValue, lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {
      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
  }
}
function markComponentSuspended(fiber, wakeable, lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {
      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
  }
}
function markLayoutEffectsStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {
      injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
  }
}
function markLayoutEffectsStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {
      injectedProfilingHooks.markLayoutEffectsStopped();
    }
  }
}
function markPassiveEffectsStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {
      injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
  }
}
function markPassiveEffectsStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {
      injectedProfilingHooks.markPassiveEffectsStopped();
    }
  }
}
function markRenderStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {
      injectedProfilingHooks.markRenderStarted(lanes);
    }
  }
}
function markRenderYielded() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {
      injectedProfilingHooks.markRenderYielded();
    }
  }
}
function markRenderStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {
      injectedProfilingHooks.markRenderStopped();
    }
  }
}
function markRenderScheduled(lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {
      injectedProfilingHooks.markRenderScheduled(lane);
    }
  }
}
function markForceUpdateScheduled(fiber, lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {
      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
  }
}
function markStateUpdateScheduled(fiber, lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {
      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
  }
}

var NoMode =
/*                         */
0; // TODO: Remove ConcurrentMode by reading from the root tag instead

var ConcurrentMode =
/*                 */
1;
var ProfileMode =
/*                    */
2;
var StrictLegacyMode =
/*               */
8;
var StrictEffectsMode =
/*              */
16;

// TODO: This is pretty well supported by browsers. Maybe we can drop it.
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
// Based on:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

var log = Math.log;
var LN2 = Math.LN2;

function clz32Fallback(x) {
  var asUint = x >>> 0;

  if (asUint === 0) {
    return 32;
  }

  return 31 - (log(asUint) / LN2 | 0) | 0;
}

// If those values are changed that package should be rebuilt and redeployed.

var TotalLanes = 31;
var NoLanes =
/*                        */
0;
var NoLane =
/*                          */
0;
var SyncLane =
/*                        */
1;
var InputContinuousHydrationLane =
/*    */
2;
var InputContinuousLane =
/*             */
4;
var DefaultHydrationLane =
/*            */
8;
var DefaultLane =
/*                     */
16;
var TransitionHydrationLane =
/*                */
32;
var TransitionLanes =
/*                       */
4194240;
var TransitionLane1 =
/*                        */
64;
var TransitionLane2 =
/*                        */
128;
var TransitionLane3 =
/*                        */
256;
var TransitionLane4 =
/*                        */
512;
var TransitionLane5 =
/*                        */
1024;
var TransitionLane6 =
/*                        */
2048;
var TransitionLane7 =
/*                        */
4096;
var TransitionLane8 =
/*                        */
8192;
var TransitionLane9 =
/*                        */
16384;
var TransitionLane10 =
/*                       */
32768;
var TransitionLane11 =
/*                       */
65536;
var TransitionLane12 =
/*                       */
131072;
var TransitionLane13 =
/*                       */
262144;
var TransitionLane14 =
/*                       */
524288;
var TransitionLane15 =
/*                       */
1048576;
var TransitionLane16 =
/*                       */
2097152;
var RetryLanes =
/*                            */
130023424;
var RetryLane1 =
/*                             */
4194304;
var RetryLane2 =
/*                             */
8388608;
var RetryLane3 =
/*                             */
16777216;
var RetryLane4 =
/*                             */
33554432;
var RetryLane5 =
/*                             */
67108864;
var SomeRetryLane = RetryLane1;
var SelectiveHydrationLane =
/*          */
134217728;
var NonIdleLanes =
/*                          */
268435455;
var IdleHydrationLane =
/*               */
268435456;
var IdleLane =
/*                        */
536870912;
var OffscreenLane =
/*                   */
1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
// It should be kept in sync with the Lanes values above.

function getLabelForLane(lane) {
  {
    if (lane & SyncLane) {
      return 'Sync';
    }

    if (lane & InputContinuousHydrationLane) {
      return 'InputContinuousHydration';
    }

    if (lane & InputContinuousLane) {
      return 'InputContinuous';
    }

    if (lane & DefaultHydrationLane) {
      return 'DefaultHydration';
    }

    if (lane & DefaultLane) {
      return 'Default';
    }

    if (lane & TransitionHydrationLane) {
      return 'TransitionHydration';
    }

    if (lane & TransitionLanes) {
      return 'Transition';
    }

    if (lane & RetryLanes) {
      return 'Retry';
    }

    if (lane & SelectiveHydrationLane) {
      return 'SelectiveHydration';
    }

    if (lane & IdleHydrationLane) {
      return 'IdleHydration';
    }

    if (lane & IdleLane) {
      return 'Idle';
    }

    if (lane & OffscreenLane) {
      return 'Offscreen';
    }
  }
}
var NoTimestamp = -1;
var nextTransitionLane = TransitionLane1;
var nextRetryLane = RetryLane1;

function getHighestPriorityLanes(lanes) {
  switch (getHighestPriorityLane(lanes)) {
    case SyncLane:
      return SyncLane;

    case InputContinuousHydrationLane:
      return InputContinuousHydrationLane;

    case InputContinuousLane:
      return InputContinuousLane;

    case DefaultHydrationLane:
      return DefaultHydrationLane;

    case DefaultLane:
      return DefaultLane;

    case TransitionHydrationLane:
      return TransitionHydrationLane;

    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
      return lanes & TransitionLanes;

    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      return lanes & RetryLanes;

    case SelectiveHydrationLane:
      return SelectiveHydrationLane;

    case IdleHydrationLane:
      return IdleHydrationLane;

    case IdleLane:
      return IdleLane;

    case OffscreenLane:
      return OffscreenLane;

    default:
      {
        error('Should have found matching lanes. This is a bug in React.');
      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


      return lanes;
  }
}

function getNextLanes(root, wipLanes) {
  // Early bailout if there's no pending work left.
  var pendingLanes = root.pendingLanes;

  if (pendingLanes === NoLanes) {
    return NoLanes;
  }

  var nextLanes = NoLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
  // even if the work is suspended.

  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

  if (nonIdlePendingLanes !== NoLanes) {
    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

    if (nonIdleUnblockedLanes !== NoLanes) {
      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
    } else {
      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

      if (nonIdlePingedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
      }
    }
  } else {
    // The only remaining work is Idle.
    var unblockedLanes = pendingLanes & ~suspendedLanes;

    if (unblockedLanes !== NoLanes) {
      nextLanes = getHighestPriorityLanes(unblockedLanes);
    } else {
      if (pingedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(pingedLanes);
      }
    }
  }

  if (nextLanes === NoLanes) {
    // This should only be reachable if we're suspended
    // TODO: Consider warning in this path if a fallback timer is not scheduled.
    return NoLanes;
  } // If we're already in the middle of a render, switching lanes will interrupt
  // it and we'll lose our progress. We should only do this if the new lanes are
  // higher priority.


  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
  // bother waiting until the root is complete.
  (wipLanes & suspendedLanes) === NoLanes) {
    var nextLane = getHighestPriorityLane(nextLanes);
    var wipLane = getHighestPriorityLane(wipLanes);

    if ( // Tests whether the next lane is equal or lower priority than the wip
    // one. This works because the bits decrease in priority as you go left.
    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
    // only difference between default updates and transition updates is that
    // default updates do not support refresh transitions.
    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
      // Keep working on the existing in-progress tree. Do not interrupt.
      return wipLanes;
    }
  }

  if ((nextLanes & InputContinuousLane) !== NoLanes) {
    // When updates are sync by default, we entangle continuous priority updates
    // and default updates, so they render in the same batch. The only reason
    // they use separate lanes is because continuous updates should interrupt
    // transitions, but default updates should not.
    nextLanes |= pendingLanes & DefaultLane;
  } // Check for entangled lanes and add them to the batch.
  //
  // A lane is said to be entangled with another when it's not allowed to render
  // in a batch that does not also include the other lane. Typically we do this
  // when multiple updates have the same source, and we only want to respond to
  // the most recent event from that source.
  //
  // Note that we apply entanglements *after* checking for partial work above.
  // This means that if a lane is entangled during an interleaved event while
  // it's already rendering, we won't interrupt it. This is intentional, since
  // entanglement is usually "best effort": we'll try our best to render the
  // lanes in the same batch, but it's not worth throwing out partially
  // completed work in order to do it.
  // TODO: Reconsider this. The counter-argument is that the partial work
  // represents an intermediate state, which we don't want to show to the user.
  // And by spending extra time finishing it, we're increasing the amount of
  // time it takes to show the final state, which is what they are actually
  // waiting for.
  //
  // For those exceptions where entanglement is semantically important, like
  // useMutableSource, we should ensure that there is no partial work at the
  // time we apply the entanglement.


  var entangledLanes = root.entangledLanes;

  if (entangledLanes !== NoLanes) {
    var entanglements = root.entanglements;
    var lanes = nextLanes & entangledLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      nextLanes |= entanglements[index];
      lanes &= ~lane;
    }
  }

  return nextLanes;
}
function getMostRecentEventTime(root, lanes) {
  var eventTimes = root.eventTimes;
  var mostRecentEventTime = NoTimestamp;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var eventTime = eventTimes[index];

    if (eventTime > mostRecentEventTime) {
      mostRecentEventTime = eventTime;
    }

    lanes &= ~lane;
  }

  return mostRecentEventTime;
}

function computeExpirationTime(lane, currentTime) {
  switch (lane) {
    case SyncLane:
    case InputContinuousHydrationLane:
    case InputContinuousLane:
      // User interactions should expire slightly more quickly.
      //
      // NOTE: This is set to the corresponding constant as in Scheduler.js.
      // When we made it larger, a product metric in www regressed, suggesting
      // there's a user interaction that's being starved by a series of
      // synchronous updates. If that theory is correct, the proper solution is
      // to fix the starvation. However, this scenario supports the idea that
      // expiration times are an important safeguard when starvation
      // does happen.
      return currentTime + 250;

    case DefaultHydrationLane:
    case DefaultLane:
    case TransitionHydrationLane:
    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
      return currentTime + 5000;

    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      // TODO: Retries should be allowed to expire if they are CPU bound for
      // too long, but when I made this change it caused a spike in browser
      // crashes. There must be some other underlying bug; not super urgent but
      // ideally should figure out why and fix it. Unfortunately we don't have
      // a repro for the crashes, only detected via production metrics.
      return NoTimestamp;

    case SelectiveHydrationLane:
    case IdleHydrationLane:
    case IdleLane:
    case OffscreenLane:
      // Anything idle priority or lower should never expire.
      return NoTimestamp;

    default:
      {
        error('Should have found matching lanes. This is a bug in React.');
      }

      return NoTimestamp;
  }
}

function markStarvedLanesAsExpired(root, currentTime) {
  // TODO: This gets called every time we yield. We can optimize by storing
  // the earliest expiration time on the root. Then use that to quickly bail out
  // of this function.
  var pendingLanes = root.pendingLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes;
  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
  // expiration time. If so, we'll assume the update is being starved and mark
  // it as expired to force it to finish.

  var lanes = pendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var expirationTime = expirationTimes[index];

    if (expirationTime === NoTimestamp) {
      // Found a pending lane with no expiration time. If it's not suspended, or
      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
      // using the current time.
      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
        // Assumes timestamps are monotonically increasing.
        expirationTimes[index] = computeExpirationTime(lane, currentTime);
      }
    } else if (expirationTime <= currentTime) {
      // This lane expired
      root.expiredLanes |= lane;
    }

    lanes &= ~lane;
  }
} // This returns the highest priority pending lanes regardless of whether they
// are suspended.

function getHighestPriorityPendingLanes(root) {
  return getHighestPriorityLanes(root.pendingLanes);
}
function getLanesToRetrySynchronouslyOnError(root) {
  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

  if (everythingButOffscreen !== NoLanes) {
    return everythingButOffscreen;
  }

  if (everythingButOffscreen & OffscreenLane) {
    return OffscreenLane;
  }

  return NoLanes;
}
function includesSyncLane(lanes) {
  return (lanes & SyncLane) !== NoLanes;
}
function includesNonIdleWork(lanes) {
  return (lanes & NonIdleLanes) !== NoLanes;
}
function includesOnlyRetries(lanes) {
  return (lanes & RetryLanes) === lanes;
}
function includesOnlyNonUrgentLanes(lanes) {
  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
  return (lanes & UrgentLanes) === NoLanes;
}
function includesOnlyTransitions(lanes) {
  return (lanes & TransitionLanes) === lanes;
}
function includesBlockingLane(root, lanes) {

  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
  return (lanes & SyncDefaultLanes) !== NoLanes;
}
function includesExpiredLane(root, lanes) {
  // This is a separate check from includesBlockingLane because a lane can
  // expire after a render has already started.
  return (lanes & root.expiredLanes) !== NoLanes;
}
function isTransitionLane(lane) {
  return (lane & TransitionLanes) !== NoLanes;
}
function claimNextTransitionLane() {
  // Cycle through the lanes, assigning each new transition to the next lane.
  // In most cases, this means every transition gets its own lane, until we
  // run out of lanes and cycle back to the beginning.
  var lane = nextTransitionLane;
  nextTransitionLane <<= 1;

  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
    nextTransitionLane = TransitionLane1;
  }

  return lane;
}
function claimNextRetryLane() {
  var lane = nextRetryLane;
  nextRetryLane <<= 1;

  if ((nextRetryLane & RetryLanes) === NoLanes) {
    nextRetryLane = RetryLane1;
  }

  return lane;
}
function getHighestPriorityLane(lanes) {
  return lanes & -lanes;
}
function pickArbitraryLane(lanes) {
  // This wrapper function gets inlined. Only exists so to communicate that it
  // doesn't matter which bit is selected; you can pick any bit without
  // affecting the algorithms where its used. Here I'm using
  // getHighestPriorityLane because it requires the fewest operations.
  return getHighestPriorityLane(lanes);
}

function pickArbitraryLaneIndex(lanes) {
  return 31 - clz32(lanes);
}

function laneToIndex(lane) {
  return pickArbitraryLaneIndex(lane);
}

function includesSomeLane(a, b) {
  return (a & b) !== NoLanes;
}
function isSubsetOfLanes(set, subset) {
  return (set & subset) === subset;
}
function mergeLanes(a, b) {
  return a | b;
}
function removeLanes(set, subset) {
  return set & ~subset;
}
function intersectLanes(a, b) {
  return a & b;
} // Seems redundant, but it changes the type from a single lane (used for
// updates) to a group of lanes (used for flushing work).

function laneToLanes(lane) {
  return lane;
}
function higherPriorityLane(a, b) {
  // This works because the bit ranges decrease in priority as you go left.
  return a !== NoLane && a < b ? a : b;
}
function createLaneMap(initial) {
  // Intentionally pushing one by one.
  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
  var laneMap = [];

  for (var i = 0; i < TotalLanes; i++) {
    laneMap.push(initial);
  }

  return laneMap;
}
function markRootUpdated(root, updateLane, eventTime) {
  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
  // could unblock them. Clear the suspended lanes so that we can try rendering
  // them again.
  //
  // TODO: We really only need to unsuspend only lanes that are in the
  // `subtreeLanes` of the updated fiber, or the update lanes of the return
  // path. This would exclude suspended updates in an unrelated sibling tree,
  // since there's no way for this update to unblock it.
  //
  // We don't do this if the incoming update is idle, because we never process
  // idle updates until after all the regular updates have finished; there's no
  // way it could unblock a transition.

  if (updateLane !== IdleLane) {
    root.suspendedLanes = NoLanes;
    root.pingedLanes = NoLanes;
  }

  var eventTimes = root.eventTimes;
  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
  // recent event, and we assume time is monotonically increasing.

  eventTimes[index] = eventTime;
}
function markRootSuspended(root, suspendedLanes) {
  root.suspendedLanes |= suspendedLanes;
  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

  var expirationTimes = root.expirationTimes;
  var lanes = suspendedLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootPinged(root, pingedLanes, eventTime) {
  root.pingedLanes |= root.suspendedLanes & pingedLanes;
}
function markRootFinished(root, remainingLanes) {
  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
  root.pendingLanes = remainingLanes; // Let's try everything again

  root.suspendedLanes = NoLanes;
  root.pingedLanes = NoLanes;
  root.expiredLanes &= remainingLanes;
  root.mutableReadLanes &= remainingLanes;
  root.entangledLanes &= remainingLanes;
  var entanglements = root.entanglements;
  var eventTimes = root.eventTimes;
  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

  var lanes = noLongerPendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    entanglements[index] = NoLanes;
    eventTimes[index] = NoTimestamp;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootEntangled(root, entangledLanes) {
  // In addition to entangling each of the given lanes with each other, we also
  // have to consider _transitive_ entanglements. For each lane that is already
  // entangled with *any* of the given lanes, that lane is now transitively
  // entangled with *all* the given lanes.
  //
  // Translated: If C is entangled with A, then entangling A with B also
  // entangles C with B.
  //
  // If this is hard to grasp, it might help to intentionally break this
  // function and look at the tests that fail in ReactTransition-test.js. Try
  // commenting out one of the conditions below.
  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
  var entanglements = root.entanglements;
  var lanes = rootEntangledLanes;

  while (lanes) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;

    if ( // Is this one of the newly entangled lanes?
    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
    entanglements[index] & entangledLanes) {
      entanglements[index] |= entangledLanes;
    }

    lanes &= ~lane;
  }
}
function getBumpedLaneForHydration(root, renderLanes) {
  var renderLane = getHighestPriorityLane(renderLanes);
  var lane;

  switch (renderLane) {
    case InputContinuousLane:
      lane = InputContinuousHydrationLane;
      break;

    case DefaultLane:
      lane = DefaultHydrationLane;
      break;

    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      lane = TransitionHydrationLane;
      break;

    case IdleLane:
      lane = IdleHydrationLane;
      break;

    default:
      // Everything else is already either a hydration lane, or shouldn't
      // be retried at a hydration lane.
      lane = NoLane;
      break;
  } // Check if the lane we chose is suspended. If so, that indicates that we
  // already attempted and failed to hydrate at that level. Also check if we're
  // already rendering that lane, which is rare but could happen.


  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
    // Give up trying to hydrate and fall back to client render.
    return NoLane;
  }

  return lane;
}
function addFiberToLanesMap(root, fiber, lanes) {

  if (!isDevToolsPresent) {
    return;
  }

  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;

  while (lanes > 0) {
    var index = laneToIndex(lanes);
    var lane = 1 << index;
    var updaters = pendingUpdatersLaneMap[index];
    updaters.add(fiber);
    lanes &= ~lane;
  }
}
function movePendingFibersToMemoized(root, lanes) {

  if (!isDevToolsPresent) {
    return;
  }

  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
  var memoizedUpdaters = root.memoizedUpdaters;

  while (lanes > 0) {
    var index = laneToIndex(lanes);
    var lane = 1 << index;
    var updaters = pendingUpdatersLaneMap[index];

    if (updaters.size > 0) {
      updaters.forEach(function (fiber) {
        var alternate = fiber.alternate;

        if (alternate === null || !memoizedUpdaters.has(alternate)) {
          memoizedUpdaters.add(fiber);
        }
      });
      updaters.clear();
    }

    lanes &= ~lane;
  }
}
function getTransitionsForLanes(root, lanes) {
  {
    return null;
  }
}

var DiscreteEventPriority = SyncLane;
var ContinuousEventPriority = InputContinuousLane;
var DefaultEventPriority = DefaultLane;
var IdleEventPriority = IdleLane;
var currentUpdatePriority = NoLane;
function getCurrentUpdatePriority() {
  return currentUpdatePriority;
}
function setCurrentUpdatePriority(newPriority) {
  currentUpdatePriority = newPriority;
}
function runWithPriority(priority, fn) {
  var previousPriority = currentUpdatePriority;

  try {
    currentUpdatePriority = priority;
    return fn();
  } finally {
    currentUpdatePriority = previousPriority;
  }
}
function higherEventPriority(a, b) {
  return a !== 0 && a < b ? a : b;
}
function lowerEventPriority(a, b) {
  return a === 0 || a > b ? a : b;
}
function isHigherEventPriority(a, b) {
  return a !== 0 && a < b;
}
function lanesToEventPriority(lanes) {
  var lane = getHighestPriorityLane(lanes);

  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
    return DiscreteEventPriority;
  }

  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
    return ContinuousEventPriority;
  }

  if (includesNonIdleWork(lane)) {
    return DefaultEventPriority;
  }

  return IdleEventPriority;
}

// This is imported by the event replaying implementation in React DOM. It's
// in a separate file to break a circular dependency between the renderer and
// the reconciler.
function isRootDehydrated(root) {
  var currentState = root.current.memoizedState;
  return currentState.isDehydrated;
}

var _attemptSynchronousHydration;

function setAttemptSynchronousHydration(fn) {
  _attemptSynchronousHydration = fn;
}
function attemptSynchronousHydration(fiber) {
  _attemptSynchronousHydration(fiber);
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
}
var getCurrentUpdatePriority$1;
function setGetCurrentUpdatePriority(fn) {
  getCurrentUpdatePriority$1 = fn;
}
var attemptHydrationAtPriority;
function setAttemptHydrationAtPriority(fn) {
  attemptHydrationAtPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
// has this definition built-in.

var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
function isDiscreteEventThatRequiresHydration(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  return {
    blockedOn: blockedOn,
    domEventName: domEventName,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetContainers: [targetContainer]
  };
}

function clearIfContinuousEvent(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'focusin':
    case 'focusout':
      queuedFocus = null;
      break;

    case 'dragenter':
    case 'dragleave':
      queuedDrag = null;
      break;

    case 'mouseover':
    case 'mouseout':
      queuedMouse = null;
      break;

    case 'pointerover':
    case 'pointerout':
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case 'gotpointercapture':
    case 'lostpointercapture':
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags, and the targetContainers, and
  // store a single event to be replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  var targetContainers = existingQueuedEvent.targetContainers;

  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
    targetContainers.push(targetContainer);
  }

  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (domEventName) {
    case 'focusin':
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
        return true;
      }

    case 'dragenter':
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
        return true;
      }

    case 'mouseover':
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
        return true;
      }

    case 'pointerover':
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
        return true;
      }

    case 'gotpointercapture':
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          attemptHydrationAtPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (isRootDehydrated(root)) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function queueExplicitHydrationTarget(target) {
  // TODO: This will read the priority if it's dispatched by the React
  // event system but not native events. Should read window.event.type, like
  // we do for updates (getCurrentEventPriority).
  var updatePriority = getCurrentUpdatePriority$1();
  var queuedTarget = {
    blockedOn: null,
    target: target,
    priority: updatePriority
  };
  var i = 0;

  for (; i < queuedExplicitHydrationTargets.length; i++) {
    // Stop once we hit the first target with lower priority than
    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
      break;
    }
  }

  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

  if (i === 0) {
    attemptExplicitHydrationTarget(queuedTarget);
  }
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var targetContainers = queuedEvent.targetContainers;

  while (targetContainers.length > 0) {
    var targetContainer = targetContainers[0];
    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

    if (nextBlockedOn === null) {
      {
        var nativeEvent = queuedEvent.nativeEvent;
        var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        setReplayingEvent(nativeEventClone);
        nativeEvent.target.dispatchEvent(nativeEventClone);
        resetReplayingEvent();
      }
    } else {
      // We're still blocked. Try again later.
      var _fiber3 = getInstanceFromNode(nextBlockedOn);

      if (_fiber3 !== null) {
        attemptContinuousHydration(_fiber3);
      }

      queuedEvent.blockedOn = nextBlockedOn;
      return false;
    } // This target container was successfully dispatched. Try the next.


    targetContainers.shift();
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false;


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?

var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
// We'd like to remove this but it's not clear if this is safe.

function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
  var eventPriority = getEventPriority(domEventName);
  var listenerWrapper;

  switch (eventPriority) {
    case DiscreteEventPriority:
      listenerWrapper = dispatchDiscreteEvent;
      break;

    case ContinuousEventPriority:
      listenerWrapper = dispatchContinuousEvent;
      break;

    case DefaultEventPriority:
    default:
      listenerWrapper = dispatchEvent;
      break;
  }

  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
}

function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = null;

  try {
    setCurrentUpdatePriority(DiscreteEventPriority);
    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig.transition = prevTransition;
  }
}

function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = null;

  try {
    setCurrentUpdatePriority(ContinuousEventPriority);
    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig.transition = prevTransition;
  }
}

function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (!_enabled) {
    return;
  }

  {
    dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
  }
}

function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

  if (blockedOn === null) {
    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
    clearIfContinuousEvent(domEventName, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
    nativeEvent.stopPropagation();
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accumulative.


  clearIfContinuousEvent(domEventName, nativeEvent);

  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
    while (blockedOn !== null) {
      var fiber = getInstanceFromNode(blockedOn);

      if (fiber !== null) {
        attemptSynchronousHydration(fiber);
      }

      var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

      if (nextBlockedOn === null) {
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
      }

      if (nextBlockedOn === blockedOn) {
        break;
      }

      blockedOn = nextBlockedOn;
    }

    if (blockedOn !== null) {
      nativeEvent.stopPropagation();
    }

    return;
  } // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.


  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
}

var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
// The return_targetInst field above is conceptually part of the return value.

function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // TODO: Warn if _enabled is false.
  return_targetInst = null;
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (isRootDehydrated(root)) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  return_targetInst = targetInst; // We're not blocked on anything.

  return null;
}
function getEventPriority(domEventName) {
  switch (domEventName) {
    // Used by SimpleEventPlugin:
    case 'cancel':
    case 'click':
    case 'close':
    case 'contextmenu':
    case 'copy':
    case 'cut':
    case 'auxclick':
    case 'dblclick':
    case 'dragend':
    case 'dragstart':
    case 'drop':
    case 'focusin':
    case 'focusout':
    case 'input':
    case 'invalid':
    case 'keydown':
    case 'keypress':
    case 'keyup':
    case 'mousedown':
    case 'mouseup':
    case 'paste':
    case 'pause':
    case 'play':
    case 'pointercancel':
    case 'pointerdown':
    case 'pointerup':
    case 'ratechange':
    case 'reset':
    case 'resize':
    case 'seeked':
    case 'submit':
    case 'touchcancel':
    case 'touchend':
    case 'touchstart':
    case 'volumechange': // Used by polyfills:
    // eslint-disable-next-line no-fallthrough

    case 'change':
    case 'selectionchange':
    case 'textInput':
    case 'compositionstart':
    case 'compositionend':
    case 'compositionupdate': // Only enableCreateEventHandleAPI:
    // eslint-disable-next-line no-fallthrough

    case 'beforeblur':
    case 'afterblur': // Not used by React but could be by user code:
    // eslint-disable-next-line no-fallthrough

    case 'beforeinput':
    case 'blur':
    case 'fullscreenchange':
    case 'focus':
    case 'hashchange':
    case 'popstate':
    case 'select':
    case 'selectstart':
      return DiscreteEventPriority;

    case 'drag':
    case 'dragenter':
    case 'dragexit':
    case 'dragleave':
    case 'dragover':
    case 'mousemove':
    case 'mouseout':
    case 'mouseover':
    case 'pointermove':
    case 'pointerout':
    case 'pointerover':
    case 'scroll':
    case 'toggle':
    case 'touchmove':
    case 'wheel': // Not used by React but could be by user code:
    // eslint-disable-next-line no-fallthrough

    case 'mouseenter':
    case 'mouseleave':
    case 'pointerenter':
    case 'pointerleave':
      return ContinuousEventPriority;

    case 'message':
      {
        // We might be in the Scheduler callback.
        // Eventually this mechanism will be replaced by a check
        // of the current priority on the native scheduler.
        var schedulerPriority = getCurrentPriorityLevel();

        switch (schedulerPriority) {
          case ImmediatePriority:
            return DiscreteEventPriority;

          case UserBlockingPriority:
            return ContinuousEventPriority;

          case NormalPriority:
          case LowPriority:
            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
            return DefaultEventPriority;

          case IdlePriority:
            return IdleEventPriority;

          default:
            return DefaultEventPriority;
        }
      }

    default:
      return DefaultEventPriority;
  }
}

function addEventBubbleListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, false);
  return listener;
}
function addEventCaptureListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, true);
  return listener;
}
function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    capture: true,
    passive: passive
  });
  return listener;
}
function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    passive: passive
  });
  return listener;
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
} // This is intentionally a factory so that we have different returned constructors.
// If we had a single constructor, it would be megamorphic and engines would deopt.


function createSyntheticEvent(Interface) {
  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */
  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
    this._reactName = reactName;
    this._targetInst = targetInst;
    this.type = reactEventType;
    this.nativeEvent = nativeEvent;
    this.target = nativeEventTarget;
    this.currentTarget = null;

    for (var _propName in Interface) {
      if (!Interface.hasOwnProperty(_propName)) {
        continue;
      }

      var normalize = Interface[_propName];

      if (normalize) {
        this[_propName] = normalize(nativeEvent);
      } else {
        this[_propName] = nativeEvent[_propName];
      }
    }

    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

    if (defaultPrevented) {
      this.isDefaultPrevented = functionThatReturnsTrue;
    } else {
      this.isDefaultPrevented = functionThatReturnsFalse;
    }

    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  assign(SyntheticBaseEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.preventDefault) {
        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.returnValue !== 'unknown') {
        event.returnValue = false;
      }

      this.isDefaultPrevented = functionThatReturnsTrue;
    },
    stopPropagation: function () {
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.stopPropagation) {
        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.cancelBubble !== 'unknown') {
        // The ChangeEventPlugin registers a "propertychange" event for
        // IE. This event does not support bubbling or cancelling, and
        // any references to cancelBubble throw "Member not found".  A
        // typeof check of "unknown" circumvents this issue (and is also
        // IE specific).
        event.cancelBubble = true;
      }

      this.isPropagationStopped = functionThatReturnsTrue;
    },

    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {// Modern event system doesn't use pooling.
    },

    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: functionThatReturnsTrue
  });
  return SyntheticBaseEvent;
}
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var EventInterface = {
  eventPhase: 0,
  bubbles: 0,
  cancelable: 0,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: 0,
  isTrusted: 0
};
var SyntheticEvent = createSyntheticEvent(EventInterface);

var UIEventInterface = assign({}, EventInterface, {
  view: 0,
  detail: 0
});

var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
var lastMovementX;
var lastMovementY;
var lastMouseEvent;

function updateMouseMovementPolyfillState(event) {
  if (event !== lastMouseEvent) {
    if (lastMouseEvent && event.type === 'mousemove') {
      lastMovementX = event.screenX - lastMouseEvent.screenX;
      lastMovementY = event.screenY - lastMouseEvent.screenY;
    } else {
      lastMovementX = 0;
      lastMovementY = 0;
    }

    lastMouseEvent = event;
  }
}
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var MouseEventInterface = assign({}, UIEventInterface, {
  screenX: 0,
  screenY: 0,
  clientX: 0,
  clientY: 0,
  pageX: 0,
  pageY: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  getModifierState: getEventModifierState,
  button: 0,
  buttons: 0,
  relatedTarget: function (event) {
    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
    return event.relatedTarget;
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    updateMouseMovementPolyfillState(event);
    return lastMovementX;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    } // Don't need to call updateMouseMovementPolyfillState() here
    // because it's guaranteed to have already run when movementX
    // was copied.


    return lastMovementY;
  }
});

var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var DragEventInterface = assign({}, MouseEventInterface, {
  dataTransfer: 0
});

var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var FocusEventInterface = assign({}, UIEventInterface, {
  relatedTarget: 0
});

var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var AnimationEventInterface = assign({}, EventInterface, {
  animationName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var ClipboardEventInterface = assign({}, EventInterface, {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var CompositionEventInterface = assign({}, EventInterface, {
  data: 0
});

var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
// Happens to share the same list for now.

var SyntheticInputEvent = SyntheticCompositionEvent;
/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */


var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}
/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var KeyboardEventInterface = assign({}, UIEventInterface, {
  key: getEventKey,
  code: 0,
  location: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  repeat: 0,
  locale: 0,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var PointerEventInterface = assign({}, MouseEventInterface, {
  pointerId: 0,
  width: 0,
  height: 0,
  pressure: 0,
  tangentialPressure: 0,
  tiltX: 0,
  tiltY: 0,
  twist: 0,
  pointerType: 0,
  isPrimary: 0
});

var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var TouchEventInterface = assign({}, UIEventInterface, {
  touches: 0,
  targetTouches: 0,
  changedTouches: 0,
  altKey: 0,
  metaKey: 0,
  ctrlKey: 0,
  shiftKey: 0,
  getModifierState: getEventModifierState
});

var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var TransitionEventInterface = assign({}, EventInterface, {
  propertyName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var WheelEventInterface = assign({}, MouseEventInterface, {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: 0,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: 0
});

var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

function registerEvents() {
  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
} // Track whether we've ever handled a keypress on the space key.


var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 */


function getCompositionEventType(domEventName) {
  switch (domEventName) {
    case 'compositionstart':
      return 'onCompositionStart';

    case 'compositionend':
      return 'onCompositionEnd';

    case 'compositionupdate':
      return 'onCompositionUpdate';
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */


function isFallbackCompositionStart(domEventName, nativeEvent) {
  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 */


function isFallbackCompositionEnd(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'keyup':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case 'keydown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case 'keypress':
    case 'mousedown':
    case 'focusout':
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(domEventName);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
      eventType = 'onCompositionStart';
    }
  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
    eventType = 'onCompositionEnd';
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === 'onCompositionStart') {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === 'onCompositionEnd') {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

  if (listeners.length > 0) {
    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });

    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);

      if (customData !== null) {
        event.data = customData;
      }
    }
  }
}

function getNativeBeforeInputChars(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'compositionend':
      return getDataFromCustomEvent(nativeEvent);

    case 'keypress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'textInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */


function getFallbackBeforeInputChars(domEventName, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (domEventName) {
    case 'paste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case 'keypress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case 'compositionend':
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

  if (listeners.length > 0) {
    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
    event.data = chars;
  }
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
}

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function registerEvents$1() {
  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
}

function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

  if (listeners.length > 0) {
    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var dispatchQueue = [];
  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, dispatchQueue);
}

function runEventInBatch(dispatchQueue) {
  processDispatchQueue(dispatchQueue, 0);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(domEventName, targetInst) {
  if (domEventName === 'change') {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
  if (domEventName === 'focusin') {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (domEventName === 'focusout') {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(domEventName, targetInst) {
  if (domEventName === 'click') {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
  if (domEventName === 'input' || domEventName === 'change') {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
  var getTargetInstFunc, handleEventFunc;

  if (shouldUseChangeEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForChangeEvent;
  } else if (isTextInputElement(targetNode)) {
    if (isInputEventSupported) {
      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
    } else {
      getTargetInstFunc = getTargetInstForInputEventPolyfill;
      handleEventFunc = handleEventsForInputEventPolyfill;
    }
  } else if (shouldUseClickEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForClickEvent;
  }

  if (getTargetInstFunc) {
    var inst = getTargetInstFunc(domEventName, targetInst);

    if (inst) {
      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
      return;
    }
  }

  if (handleEventFunc) {
    handleEventFunc(domEventName, targetNode, targetInst);
  } // When blurring, set the value attribute for number inputs


  if (domEventName === 'focusout') {
    handleControlledInputBlur(targetNode);
  }
}

function registerEvents$2() {
  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
}
/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */


function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

  if (isOverEvent && !isReplayingEvent(nativeEvent)) {
    // If this is an over event with a target, we might have already dispatched
    // the event in the out event of the other target. If this is replayed,
    // then it's because we couldn't dispatch against this target previously
    // so we have to do it now instead.
    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

    if (related) {
      // If the related node is managed by React, we can assume that we have
      // already dispatched the corresponding events during its mouseout.
      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
        return;
      }
    }
  }

  if (!isOutEvent && !isOverEvent) {
    // Must not be a mouse or pointer in or out - ignoring.
    return;
  }

  var win; // TODO: why is this nullable in the types but we read from it?

  if (nativeEventTarget.window === nativeEventTarget) {
    // `nativeEventTarget` is probably a window object.
    win = nativeEventTarget;
  } else {
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    var doc = nativeEventTarget.ownerDocument;

    if (doc) {
      win = doc.defaultView || doc.parentWindow;
    } else {
      win = window;
    }
  }

  var from;
  var to;

  if (isOutEvent) {
    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

    from = targetInst;
    to = _related ? getClosestInstanceFromNode(_related) : null;

    if (to !== null) {
      var nearestMounted = getNearestMountedFiber(to);

      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
        to = null;
      }
    }
  } else {
    // Moving to a node from outside the window.
    from = null;
    to = targetInst;
  }

  if (from === to) {
    // Nothing pertains to our managed components.
    return;
  }

  var SyntheticEventCtor = SyntheticMouseEvent;
  var leaveEventType = 'onMouseLeave';
  var enterEventType = 'onMouseEnter';
  var eventTypePrefix = 'mouse';

  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
    SyntheticEventCtor = SyntheticPointerEvent;
    leaveEventType = 'onPointerLeave';
    enterEventType = 'onPointerEnter';
    eventTypePrefix = 'pointer';
  }

  var fromNode = from == null ? win : getNodeFromInstance(from);
  var toNode = to == null ? win : getNodeFromInstance(to);
  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
  leave.target = fromNode;
  leave.relatedTarget = toNode;
  var enter = null; // We should only process this nativeEvent if we are processing
  // the first ancestor. Next time, we will ignore the event.

  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (nativeTargetInst === targetInst) {
    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
    enterEvent.target = toNode;
    enterEvent.relatedTarget = fromNode;
    enter = enterEvent;
  }

  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
}

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    var currentKey = keysA[i];

    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
      return false;
    }
  }

  return true;
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start;
  var end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

function registerEvents$3() {
  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
}

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

    if (listeners.length > 0) {
      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });
      event.target = activeElement$1;
    }
  }
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

  switch (domEventName) {
    // Track the input node that has focus.
    case 'focusin':
      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
        activeElement$1 = targetNode;
        activeElementInst$1 = targetInst;
        lastSelection = null;
      }

      break;

    case 'focusout':
      activeElement$1 = null;
      activeElementInst$1 = null;
      lastSelection = null;
      break;
    // Don't fire the event while the user is dragging. This matches the
    // semantics of the native select event.

    case 'mousedown':
      mouseDown = true;
      break;

    case 'contextmenu':
    case 'mouseup':
    case 'dragend':
      mouseDown = false;
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      break;
    // Chrome and IE fire non-standard event when selection is changed (and
    // sometimes when it hasn't). IE's event fires out of order with respect
    // to key and input events on deletion, so we discard it.
    //
    // Firefox doesn't support selectionchange, so check selection status
    // after each key entry. The selection changes after keydown and before
    // keyup, but we check on keydown as well in the case of holding down a
    // key, when multiple keydown events are fired but only one keyup is.
    // This is also our approach for IE handling, for the reason above.

    case 'selectionchange':
      if (skipSelectionChangeEvent) {
        break;
      }

    // falls through

    case 'keydown':
    case 'keyup':
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
  }
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

var ANIMATION_END = getVendorPrefixedEventName('animationend');
var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
var ANIMATION_START = getVendorPrefixedEventName('animationstart');
var TRANSITION_END = getVendorPrefixedEventName('transitionend');

var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
//
// E.g. it needs "pointerDown", not "pointerdown".
// This is because we derive both React name ("onPointerDown")
// and DOM name ("pointerdown") from the same list.
//
// Exceptions that don't match this convention are listed separately.
//
// prettier-ignore

var simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];

function registerSimpleEvent(domEventName, reactName) {
  topLevelEventsToReactNames.set(domEventName, reactName);
  registerTwoPhaseEvent(reactName, [domEventName]);
}

function registerSimpleEvents() {
  for (var i = 0; i < simpleEventPluginEvents.length; i++) {
    var eventName = simpleEventPluginEvents[i];
    var domEventName = eventName.toLowerCase();
    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
  } // Special cases where event names don't match.


  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
  registerSimpleEvent('dblclick', 'onDoubleClick');
  registerSimpleEvent('focusin', 'onFocus');
  registerSimpleEvent('focusout', 'onBlur');
  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
}

function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var reactName = topLevelEventsToReactNames.get(domEventName);

  if (reactName === undefined) {
    return;
  }

  var SyntheticEventCtor = SyntheticEvent;
  var reactEventType = domEventName;

  switch (domEventName) {
    case 'keypress':
      // Firefox creates a keypress event for function keys too. This removes
      // the unwanted keypress events. Enter is however both printable and
      // non-printable. One would expect Tab to be as well (but it isn't).
      if (getEventCharCode(nativeEvent) === 0) {
        return;
      }

    /* falls through */

    case 'keydown':
    case 'keyup':
      SyntheticEventCtor = SyntheticKeyboardEvent;
      break;

    case 'focusin':
      reactEventType = 'focus';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'focusout':
      reactEventType = 'blur';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'beforeblur':
    case 'afterblur':
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'click':
      // Firefox creates a click event on right mouse clicks. This removes the
      // unwanted click events.
      if (nativeEvent.button === 2) {
        return;
      }

    /* falls through */

    case 'auxclick':
    case 'dblclick':
    case 'mousedown':
    case 'mousemove':
    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

    /* falls through */

    case 'mouseout':
    case 'mouseover':
    case 'contextmenu':
      SyntheticEventCtor = SyntheticMouseEvent;
      break;

    case 'drag':
    case 'dragend':
    case 'dragenter':
    case 'dragexit':
    case 'dragleave':
    case 'dragover':
    case 'dragstart':
    case 'drop':
      SyntheticEventCtor = SyntheticDragEvent;
      break;

    case 'touchcancel':
    case 'touchend':
    case 'touchmove':
    case 'touchstart':
      SyntheticEventCtor = SyntheticTouchEvent;
      break;

    case ANIMATION_END:
    case ANIMATION_ITERATION:
    case ANIMATION_START:
      SyntheticEventCtor = SyntheticAnimationEvent;
      break;

    case TRANSITION_END:
      SyntheticEventCtor = SyntheticTransitionEvent;
      break;

    case 'scroll':
      SyntheticEventCtor = SyntheticUIEvent;
      break;

    case 'wheel':
      SyntheticEventCtor = SyntheticWheelEvent;
      break;

    case 'copy':
    case 'cut':
    case 'paste':
      SyntheticEventCtor = SyntheticClipboardEvent;
      break;

    case 'gotpointercapture':
    case 'lostpointercapture':
    case 'pointercancel':
    case 'pointerdown':
    case 'pointermove':
    case 'pointerout':
    case 'pointerover':
    case 'pointerup':
      SyntheticEventCtor = SyntheticPointerEvent;
      break;
  }

  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  {
    // Some events don't bubble in the browser.
    // In the past, React has always bubbled them, but this can be surprising.
    // We're going to try aligning closer to the browser behavior by not bubbling
    // them in React either. We'll start by not bubbling onScroll, and then expand.
    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
    // nonDelegatedEvents list in DOMPluginEventSystem.
    // Then we can remove this special list.
    // This is a breaking change that can wait until React 18.
    domEventName === 'scroll';

    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

    if (_listeners.length > 0) {
      // Intentionally create event lazily.
      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

      dispatchQueue.push({
        event: _event,
        listeners: _listeners
      });
    }
  }
}

// TODO: remove top-level side effect.
registerSimpleEvents();
registerEvents$2();
registerEvents$1();
registerEvents$3();
registerEvents();

function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  // TODO: we should remove the concept of a "SimpleEventPlugin".
  // This is the basic functionality of the event system. All
  // the other plugins are essentially polyfills. So the plugin
  // should probably be inlined somewhere and have its logic
  // be core the to event system. This would potentially allow
  // us to ship builds of React without the polyfilled plugins below.
  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
  // event's native "bubble" phase, which means that we're
  // not in the capture phase. That's because we emulate
  // the capture phase here still. This is a trade-off,
  // because in an ideal world we would not emulate and use
  // the phases properly, like we do with the SimpleEvent
  // plugin. However, the plugins below either expect
  // emulation (EnterLeave) or use state localized to that
  // plugin (BeforeInput, Change, Select). The state in
  // these modules complicates things, as you'll essentially
  // get the case where the capture phase event might change
  // state, only for the following bubble event to come in
  // later and not trigger anything as the state now
  // invalidates the heuristics of the event plugin. We
  // could alter all these plugins to work in such ways, but
  // that might cause other unknown side-effects that we
  // can't foresee right now.

  if (shouldProcessPolyfillPlugins) {
    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  }
} // List of events that need to be individually attached to media elements.


var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
// set them on the actual target element itself. This is primarily
// because these events do not consistently bubble in the DOM.

var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

function executeDispatch(event, listener, currentTarget) {
  var type = event.type || 'unknown-event';
  event.currentTarget = currentTarget;
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
  var previousInstance;

  if (inCapturePhase) {
    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
      var _dispatchListeners$i = dispatchListeners[i],
          instance = _dispatchListeners$i.instance,
          currentTarget = _dispatchListeners$i.currentTarget,
          listener = _dispatchListeners$i.listener;

      if (instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, listener, currentTarget);
      previousInstance = instance;
    }
  } else {
    for (var _i = 0; _i < dispatchListeners.length; _i++) {
      var _dispatchListeners$_i = dispatchListeners[_i],
          _instance = _dispatchListeners$_i.instance,
          _currentTarget = _dispatchListeners$_i.currentTarget,
          _listener = _dispatchListeners$_i.listener;

      if (_instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, _listener, _currentTarget);
      previousInstance = _instance;
    }
  }
}

function processDispatchQueue(dispatchQueue, eventSystemFlags) {
  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  for (var i = 0; i < dispatchQueue.length; i++) {
    var _dispatchQueue$i = dispatchQueue[i],
        event = _dispatchQueue$i.event,
        listeners = _dispatchQueue$i.listeners;
    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var nativeEventTarget = getEventTarget(nativeEvent);
  var dispatchQueue = [];
  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  processDispatchQueue(dispatchQueue, eventSystemFlags);
}

function listenToNonDelegatedEvent(domEventName, targetElement) {
  {
    if (!nonDelegatedEvents.has(domEventName)) {
      error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + 'This is a bug in React. Please file an issue.', domEventName);
    }
  }

  var isCapturePhaseListener = false;
  var listenerSet = getEventListenerSet(targetElement);
  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

  if (!listenerSet.has(listenerSetKey)) {
    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
    listenerSet.add(listenerSetKey);
  }
}
function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
  {
    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
      error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);
    }
  }

  var eventSystemFlags = 0;

  if (isCapturePhaseListener) {
    eventSystemFlags |= IS_CAPTURE_PHASE;
  }

  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
} // This is only used by createEventHandle when the
var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
function listenToAllSupportedEvents(rootContainerElement) {
  if (!rootContainerElement[listeningMarker]) {
    rootContainerElement[listeningMarker] = true;
    allNativeEvents.forEach(function (domEventName) {
      // We handle selectionchange separately because it
      // doesn't bubble and needs to be on the document.
      if (domEventName !== 'selectionchange') {
        if (!nonDelegatedEvents.has(domEventName)) {
          listenToNativeEvent(domEventName, false, rootContainerElement);
        }

        listenToNativeEvent(domEventName, true, rootContainerElement);
      }
    });
    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;

    if (ownerDocument !== null) {
      // The selectionchange event also needs deduplication
      // but it is attached to the document.
      if (!ownerDocument[listeningMarker]) {
        ownerDocument[listeningMarker] = true;
        listenToNativeEvent('selectionchange', false, ownerDocument);
      }
    }
  }
}

function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
  // active and not passive.

  var isPassiveListener = undefined;

  if (passiveBrowserEventsSupported) {
    // Browsers introduced an intervention, making these events
    // passive by default on document. React doesn't bind them
    // to document anymore, but changing this now would undo
    // the performance wins from the change. So we emulate
    // the existing behavior manually on the roots now.
    // https://github.com/facebook/react/issues/19651
    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
      isPassiveListener = true;
    }
  }

  targetContainer =  targetContainer;


  if (isCapturePhaseListener) {
    if (isPassiveListener !== undefined) {
      addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      addEventCaptureListener(targetContainer, domEventName, listener);
    }
  } else {
    if (isPassiveListener !== undefined) {
      addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      addEventBubbleListener(targetContainer, domEventName, listener);
    }
  }
}

function isMatchingRootContainer(grandContainer, targetContainer) {
  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
}

function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var ancestorInst = targetInst;

  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

    if (targetInst !== null) {
      // The below logic attempts to work out if we need to change
      // the target fiber to a different ancestor. We had similar logic
      // in the legacy event system, except the big difference between
      // systems is that the modern event system now has an event listener
      // attached to each React Root and React Portal Root. Together,
      // the DOM nodes representing these roots are the "rootContainer".
      // To figure out which ancestor instance we should use, we traverse
      // up the fiber tree from the target instance and attempt to find
      // root boundaries that match that of our current "rootContainer".
      // If we find that "rootContainer", we find the parent fiber
      // sub-tree for that root and make that our ancestor instance.
      var node = targetInst;

      mainLoop: while (true) {
        if (node === null) {
          return;
        }

        var nodeTag = node.tag;

        if (nodeTag === HostRoot || nodeTag === HostPortal) {
          var container = node.stateNode.containerInfo;

          if (isMatchingRootContainer(container, targetContainerNode)) {
            break;
          }

          if (nodeTag === HostPortal) {
            // The target is a portal, but it's not the rootContainer we're looking for.
            // Normally portals handle their own events all the way down to the root.
            // So we should be able to stop now. However, we don't know if this portal
            // was part of *our* root.
            var grandNode = node.return;

            while (grandNode !== null) {
              var grandTag = grandNode.tag;

              if (grandTag === HostRoot || grandTag === HostPortal) {
                var grandContainer = grandNode.stateNode.containerInfo;

                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                  // This is the rootContainer we're looking for and we found it as
                  // a parent of the Portal. That means we can ignore it because the
                  // Portal will bubble through to us.
                  return;
                }
              }

              grandNode = grandNode.return;
            }
          } // Now we need to find it's corresponding host fiber in the other
          // tree. To do this we can use getClosestInstanceFromNode, but we
          // need to validate that the fiber is a host instance, otherwise
          // we need to traverse up through the DOM till we find the correct
          // node that is from the other tree.


          while (container !== null) {
            var parentNode = getClosestInstanceFromNode(container);

            if (parentNode === null) {
              return;
            }

            var parentTag = parentNode.tag;

            if (parentTag === HostComponent || parentTag === HostText) {
              node = ancestorInst = parentNode;
              continue mainLoop;
            }

            container = container.parentNode;
          }
        }

        node = node.return;
      }
    }
  }

  batchedUpdates(function () {
    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
  });
}

function createDispatchListener(instance, listener, currentTarget) {
  return {
    instance: instance,
    listener: listener,
    currentTarget: currentTarget
  };
}

function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
  var captureName = reactName !== null ? reactName + 'Capture' : null;
  var reactEventName = inCapturePhase ? captureName : reactName;
  var listeners = [];
  var instance = targetFiber;
  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance2 = instance,
        stateNode = _instance2.stateNode,
        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      lastHostComponent = stateNode; // createEventHandle listeners


      if (reactEventName !== null) {
        var listener = getListener(instance, reactEventName);

        if (listener != null) {
          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
        }
      }
    } // If we are only accumulating events for the target, then we don't
    // continue to propagate through the React fiber tree to find other
    // listeners.


    if (accumulateTargetOnly) {
      break;
    } // If we are processing the onBeforeBlur event, then we need to take

    instance = instance.return;
  }

  return listeners;
} // We should only use this function for:
// - BeforeInputEventPlugin
// - ChangeEventPlugin
// - SelectEventPlugin
// This is because we only process these plugins
// in the bubble phase, so we need to accumulate two
// phase event listeners (via emulation).

function accumulateTwoPhaseListeners(targetFiber, reactName) {
  var captureName = reactName + 'Capture';
  var listeners = [];
  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance3 = instance,
        stateNode = _instance3.stateNode,
        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;
      var captureListener = getListener(instance, captureName);

      if (captureListener != null) {
        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
      }

      var bubbleListener = getListener(instance, reactName);

      if (bubbleListener != null) {
        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
      }
    }

    instance = instance.return;
  }

  return listeners;
}

function getParent(inst) {
  if (inst === null) {
    return null;
  }

  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var nodeA = instA;
  var nodeB = instB;
  var depthA = 0;

  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    nodeA = getParent(nodeA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    nodeB = getParent(nodeB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
      return nodeA;
    }

    nodeA = getParent(nodeA);
    nodeB = getParent(nodeB);
  }

  return null;
}

function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
  var registrationName = event._reactName;
  var listeners = [];
  var instance = target;

  while (instance !== null) {
    if (instance === common) {
      break;
    }

    var _instance4 = instance,
        alternate = _instance4.alternate,
        stateNode = _instance4.stateNode,
        tag = _instance4.tag;

    if (alternate !== null && alternate === common) {
      break;
    }

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;

      if (inCapturePhase) {
        var captureListener = getListener(instance, registrationName);

        if (captureListener != null) {
          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
        }
      } else if (!inCapturePhase) {
        var bubbleListener = getListener(instance, registrationName);

        if (bubbleListener != null) {
          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
        }
      }
    }

    instance = instance.return;
  }

  if (listeners.length !== 0) {
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
} // We should only use this function for:
// - EnterLeaveEventPlugin
// This is because we only process this plugin
// in the bubble phase, so we need to accumulate two
// phase event listeners.


function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;

  if (from !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
  }

  if (to !== null && enterEvent !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
  }
}
function getListenerSetKey(domEventName, capture) {
  return domEventName + "__" + (capture ? 'capture' : 'bubble');
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var warnedUnknownTags;
var validatePropertiesInDevelopment;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeHTML;

{
  warnedUnknownTags = {
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, {
      registrationNameDependencies: registrationNameDependencies,
      possibleRegistrationNames: possibleRegistrationNames
    });
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
} // HTML parsing normalizes CR and CRLF to LF.
// It also can turn \u0000 into \uFFFD inside attributes.
// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
// If we have a mismatch, it might be caused by that.
// We will still patch up in this case but not fire the warning.


var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

function normalizeMarkupForTextOrAttribute(markup) {
  {
    checkHtmlStringCoercion(markup);
  }

  var markupString = typeof markup === 'string' ? markup : '' + markup;
  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
}

function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

  if (normalizedServerText === normalizedClientText) {
    return;
  }

  if (shouldWarnDev) {
    {
      if (!didWarnInvalidHydration) {
        didWarnInvalidHydration = true;

        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      }
    }
  }

  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
    // In concurrent roots, we throw when there's a text mismatch and revert to
    // client rendering, up to the nearest Suspense boundary.
    throw new Error('Text content does not match server-rendered HTML.');
  }
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      props = rawProps;
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = rawProps;
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the allowed property list in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the allowed property list during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);

      if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

        if (nextHtml != null) {
          var expectedHTML = normalizeHTML(domElement, nextHtml);

          if (expectedHTML !== serverHTML) {
            warnForPropDifference(propKey, serverHTML, expectedHTML);
          }
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        var dontWarnCustomElement = enableCustomElementPropertySupport  ;

        if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    if (shouldWarnDev) {
      if ( // $FlowFixMe - Should be inferred as not undefined.
      extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
      }
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text, isConcurrentMode) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  var activeInstance = null;

  setEnabled(false);
  return activeInstance;
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;
  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);

  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;

    case 'img':
      return true;

    default:
      return false;
  }
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
function getCurrentEventPriority() {
  var currentEvent = window.event;

  if (currentEvent === undefined) {
    return DefaultEventPriority;
  }

  return getEventPriority(currentEvent.type);
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1;
var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {
  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
} : scheduleTimeout; // TODO: Determine the best fallback here.

function handleErrorInNextTick(error) {
  setTimeout(function () {
    throw error;
  });
} // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      if (newProps.autoFocus) {
        domElement.focus();
      }

      return;

    case 'img':
      {
        if (newProps.src) {
          domElement.src = newProps.src;
        }

        return;
      }
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Apply the diff to the DOM node.
  updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
  // with current event handlers.

  updateFiberProps(domElement, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}
function clearSuspenseBoundary(parentInstance, suspenseInstance) {
  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  do {
    var nextNode = node.nextSibling;
    parentInstance.removeChild(node);

    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
      var data = nextNode.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

          retryIfBlockedOn(suspenseInstance);
          return;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
        depth++;
      }
    }

    node = nextNode;
  } while (node); // TODO: Warn, we didn't find the end comment boundary.
  // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(suspenseInstance);
}
function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
  if (container.nodeType === COMMENT_NODE) {
    clearSuspenseBoundary(container.parentNode, suspenseInstance);
  } else if (container.nodeType === ELEMENT_NODE) {
    clearSuspenseBoundary(container, suspenseInstance);
  } // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(container);
}
function hideInstance(instance) {
  // TODO: Does this work for all element types? What about MathML? Should we
  // pass host context to this method?
  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
}
function clearContainer(container) {
  if (container.nodeType === ELEMENT_NODE) {
    container.textContent = '';
  } else if (container.nodeType === DOCUMENT_NODE) {
    if (container.documentElement) {
      container.removeChild(container.documentElement);
    }
  }
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function canHydrateSuspenseInstance(instance) {
  if (instance.nodeType !== COMMENT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a suspense node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}
function getSuspenseInstanceFallbackErrorDetails(instance) {
  var dataset = instance.nextSibling && instance.nextSibling.dataset;
  var digest, message, stack;

  if (dataset) {
    digest = dataset.dgst;

    {
      message = dataset.msg;
      stack = dataset.stck;
    }
  }

  {
    return {
      message: message,
      digest: digest,
      stack: stack
    };
  } // let value = {message: undefined, hash: undefined};
  // const nextSibling = instance.nextSibling;
  // if (nextSibling) {
  //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
  //   value.message = dataset.msg;
  //   value.hash = dataset.hash;
  //   if (true) {
  //     value.stack = dataset.stack;
  //   }
  // }
  // return value;

}
function registerSuspenseInstanceRetry(instance, callback) {
  instance._reactRetry = callback;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }

    if (nodeType === COMMENT_NODE) {
      var nodeData = node.data;

      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
        break;
      }

      if (nodeData === SUSPENSE_END_DATA) {
        return null;
      }
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function getFirstHydratableChildWithinContainer(parentContainer) {
  return getNextHydratable(parentContainer.firstChild);
}
function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
  return getNextHydratable(parentInstance.nextSibling);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  } // TODO: Temporary hack to check if we're in a concurrent root. We can delete
  // when the legacy root API is removed.


  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
  // when the legacy root API is removed.

  (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
  return diffHydratedText(textInstance, text);
}
function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, suspenseInstance);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function shouldDeleteUnhydratedTailInstances(parentType) {
  return parentType !== 'head' && parentType !== 'body';
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
  var shouldWarnDev = true;
  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    var shouldWarnDev = true;
    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
  }
}
function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;

    if (parentNode !== null) {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentNode, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentNode, instance);
      }
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentInstance, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentInstance, instance);
      }
    }
  }
}
function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;
    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
  }
}
function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;
    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedElement(parentInstance, type);
    }
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedText(parentInstance, text);
    }
  }
}
function errorHydratingContainer(parentContainer) {
  {
    // TODO: This gets logged by onRecoverableError, too, so we should be
    // able to remove it.
    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
  }
}
function preparePortalMount(portalInstance) {
  listenToAllSupportedEvents(portalInstance);
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactFiber$' + randomKey;
var internalPropsKey = '__reactProps$' + randomKey;
var internalContainerInstanceKey = '__reactContainer$' + randomKey;
var internalEventHandlersKey = '__reactEvents$' + randomKey;
var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
function detachDeletedInstance(node) {
  // TODO: This function is only called on host components. I don't think all of
  // these fields are relevant.
  delete node[internalInstanceKey];
  delete node[internalPropsKey];
  delete node[internalEventHandlersKey];
  delete node[internalEventHandlerListenersKey];
  delete node[internalEventHandlesSetKey];
}
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  throw new Error('getNodeFromInstance: Invalid argument.');
}
function getFiberCurrentPropsFromNode(node) {
  return node[internalPropsKey] || null;
}
function updateFiberProps(node, props) {
  node[internalPropsKey] = props;
}
function getEventListenerSet(node) {
  var elementListenerSet = node[internalEventHandlersKey];

  if (elementListenerSet === undefined) {
    elementListenerSet = node[internalEventHandlersKey] = new Set();
  }

  return elementListenerSet;
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            // eslint-disable-next-line react-internal/prod-error-codes
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (contextStackCursor.current !== emptyContextObject) {
      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext = instance.getChildContext();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
      }
    }

    {
      var name = getComponentNameFromFiber(fiber) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name);
    }

    return assign({}, parentContext, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }
}

var LegacyRoot = 0;
var ConcurrentRoot = 1;

var syncQueue = null;
var includesLegacySyncCallbacks = false;
var isFlushingSyncQueue = false;
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback];
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }
}
function scheduleLegacySyncCallback(callback) {
  includesLegacySyncCallbacks = true;
  scheduleSyncCallback(callback);
}
function flushSyncCallbacksOnlyInLegacyMode() {
  // Only flushes the queue if there's a legacy sync callback scheduled.
  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
  // it might make more sense for the queue to be a list of roots instead of a
  // list of generic callbacks. Then we can have two: one for legacy roots, one
  // for concurrent roots. And this method would only flush the legacy ones.
  if (includesLegacySyncCallbacks) {
    flushSyncCallbacks();
  }
}
function flushSyncCallbacks() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrance.
    isFlushingSyncQueue = true;
    var i = 0;
    var previousUpdatePriority = getCurrentUpdatePriority();

    try {
      var isSync = true;
      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
      // queue is in the render or commit phases.

      setCurrentUpdatePriority(DiscreteEventPriority);

      for (; i < queue.length; i++) {
        var callback = queue[i];

        do {
          callback = callback(isSync);
        } while (callback !== null);
      }

      syncQueue = null;
      includesLegacySyncCallbacks = false;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      scheduleCallback(ImmediatePriority, flushSyncCallbacks);
      throw error;
    } finally {
      setCurrentUpdatePriority(previousUpdatePriority);
      isFlushingSyncQueue = false;
    }
  }

  return null;
}

// TODO: Use the unified fiber stack module instead of this local one?
// Intentionally not using it yet to derisk the initial implementation, because
// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
// rather the ids be wrong than crash the whole reconciler.
var forkStack = [];
var forkStackIndex = 0;
var treeForkProvider = null;
var treeForkCount = 0;
var idStack = [];
var idStackIndex = 0;
var treeContextProvider = null;
var treeContextId = 1;
var treeContextOverflow = '';
function isForkedChild(workInProgress) {
  warnIfNotHydrating();
  return (workInProgress.flags & Forked) !== NoFlags;
}
function getForksAtLevel(workInProgress) {
  warnIfNotHydrating();
  return treeForkCount;
}
function getTreeId() {
  var overflow = treeContextOverflow;
  var idWithLeadingBit = treeContextId;
  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
  return id.toString(32) + overflow;
}
function pushTreeFork(workInProgress, totalChildren) {
  // This is called right after we reconcile an array (or iterator) of child
  // fibers, because that's the only place where we know how many children in
  // the whole set without doing extra work later, or storing addtional
  // information on the fiber.
  //
  // That's why this function is separate from pushTreeId — it's called during
  // the render phase of the fork parent, not the child, which is where we push
  // the other context values.
  //
  // In the Fizz implementation this is much simpler because the child is
  // rendered in the same callstack as the parent.
  //
  // It might be better to just add a `forks` field to the Fiber type. It would
  // make this module simpler.
  warnIfNotHydrating();
  forkStack[forkStackIndex++] = treeForkCount;
  forkStack[forkStackIndex++] = treeForkProvider;
  treeForkProvider = workInProgress;
  treeForkCount = totalChildren;
}
function pushTreeId(workInProgress, totalChildren, index) {
  warnIfNotHydrating();
  idStack[idStackIndex++] = treeContextId;
  idStack[idStackIndex++] = treeContextOverflow;
  idStack[idStackIndex++] = treeContextProvider;
  treeContextProvider = workInProgress;
  var baseIdWithLeadingBit = treeContextId;
  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
  // of the id; we use it to account for leading 0s.

  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
  var slot = index + 1;
  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
  // consideration the leading 1 we use to mark the end of the sequence.

  if (length > 30) {
    // We overflowed the bitwise-safe range. Fall back to slower algorithm.
    // This branch assumes the length of the base id is greater than 5; it won't
    // work for smaller ids, because you need 5 bits per character.
    //
    // We encode the id in multiple steps: first the base id, then the
    // remaining digits.
    //
    // Each 5 bit sequence corresponds to a single base 32 character. So for
    // example, if the current id is 23 bits long, we can convert 20 of those
    // bits into a string of 4 characters, with 3 bits left over.
    //
    // First calculate how many bits in the base id represent a complete
    // sequence of characters.
    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.

    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.

    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.

    var restOfBaseId = baseId >> numberOfOverflowBits;
    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
    // we made more room, this time it won't overflow.

    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
    var restOfNewBits = slot << restOfBaseLength;
    var id = restOfNewBits | restOfBaseId;
    var overflow = newOverflow + baseOverflow;
    treeContextId = 1 << restOfLength | id;
    treeContextOverflow = overflow;
  } else {
    // Normal path
    var newBits = slot << baseLength;

    var _id = newBits | baseId;

    var _overflow = baseOverflow;
    treeContextId = 1 << length | _id;
    treeContextOverflow = _overflow;
  }
}
function pushMaterializedTreeId(workInProgress) {
  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
  // in its children.

  var returnFiber = workInProgress.return;

  if (returnFiber !== null) {
    var numberOfForks = 1;
    var slotIndex = 0;
    pushTreeFork(workInProgress, numberOfForks);
    pushTreeId(workInProgress, numberOfForks, slotIndex);
  }
}

function getBitLength(number) {
  return 32 - clz32(number);
}

function getLeadingBit(id) {
  return 1 << getBitLength(id) - 1;
}

function popTreeContext(workInProgress) {
  // Restore the previous values.
  // This is a bit more complicated than other context-like modules in Fiber
  // because the same Fiber may appear on the stack multiple times and for
  // different reasons. We have to keep popping until the work-in-progress is
  // no longer at the top of the stack.
  while (workInProgress === treeForkProvider) {
    treeForkProvider = forkStack[--forkStackIndex];
    forkStack[forkStackIndex] = null;
    treeForkCount = forkStack[--forkStackIndex];
    forkStack[forkStackIndex] = null;
  }

  while (workInProgress === treeContextProvider) {
    treeContextProvider = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
    treeContextOverflow = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
    treeContextId = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
  }
}
function getSuspendedTreeContext() {
  warnIfNotHydrating();

  if (treeContextProvider !== null) {
    return {
      id: treeContextId,
      overflow: treeContextOverflow
    };
  } else {
    return null;
  }
}
function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
  warnIfNotHydrating();
  idStack[idStackIndex++] = treeContextId;
  idStack[idStackIndex++] = treeContextOverflow;
  idStack[idStackIndex++] = treeContextProvider;
  treeContextId = suspendedContext.id;
  treeContextOverflow = suspendedContext.overflow;
  treeContextProvider = workInProgress;
}

function warnIfNotHydrating() {
  {
    if (!getIsHydrating()) {
      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');
    }
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
// due to earlier mismatches or a suspended fiber.

var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary

var hydrationErrors = null;

function warnIfHydrating() {
  {
    if (isHydrating) {
      error('We should not be hydrating here. This is a bug in React. Please file a bug.');
    }
  }
}

function markDidThrowWhileHydratingDEV() {
  {
    didSuspendOrErrorDEV = true;
  }
}
function didSuspendOrErrorWhileHydratingDEV() {
  {
    return didSuspendOrErrorDEV;
  }
}

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  hydrationErrors = null;
  didSuspendOrErrorDEV = false;
  return true;
}

function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {

  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  hydrationErrors = null;
  didSuspendOrErrorDEV = false;

  if (treeContext !== null) {
    restoreSuspendedTreeContext(fiber, treeContext);
  }

  return true;
}

function warnUnhydratedInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
          break;
        }

      case HostComponent:
        {
          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
          isConcurrentMode);
          break;
        }

      case SuspenseComponent:
        {
          var suspenseState = returnFiber.memoizedState;
          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
          break;
        }
    }
  }
}

function deleteHydratableInstance(returnFiber, instance) {
  warnUnhydratedInstance(returnFiber, instance);
  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  var deletions = returnFiber.deletions;

  if (deletions === null) {
    returnFiber.deletions = [childToDelete];
    returnFiber.flags |= ChildDeletion;
  } else {
    deletions.push(childToDelete);
  }
}

function warnNonhydratedInstance(returnFiber, fiber) {
  {
    if (didSuspendOrErrorDEV) {
      // Inside a boundary that already suspended. We're currently rendering the
      // siblings of a suspended node. The mismatch may be due to the missing
      // data, so it's probably a false positive.
      return;
    }

    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              fiber.pendingProps;
              didNotFindHydratableInstanceWithinContainer(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              {
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
                isConcurrentMode);
                break;
              }

            case HostText:
              {
                var _text = fiber.pendingProps;

                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;

                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
                _isConcurrentMode);
                break;
              }
          }

          break;
        }

      case SuspenseComponent:
        {
          var suspenseState = returnFiber.memoizedState;
          var _parentInstance = suspenseState.dehydrated;
          if (_parentInstance !== null) switch (fiber.tag) {
            case HostComponent:
              var _type2 = fiber.type;
              fiber.pendingProps;
              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
              break;

            case HostText:
              var _text2 = fiber.pendingProps;
              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
              break;
          }
          break;
        }

      default:
        return;
    }
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.flags = fiber.flags & ~Hydrating | Placement;
  warnNonhydratedInstance(returnFiber, fiber);
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(instance);
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.

          nextHydratableInstance = null;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {
        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

        if (suspenseInstance !== null) {
          var suspenseState = {
            dehydrated: suspenseInstance,
            treeContext: getSuspendedTreeContext(),
            retryLane: OffscreenLane
          };
          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
          // This simplifies the code for getHostSibling and deleting nodes,
          // since it doesn't have to consider all Suspense boundaries and
          // check if they're dehydrated ones or not.

          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
          dehydratedFragment.return = fiber;
          fiber.child = dehydratedFragment;
          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
          // it during the first pass. Instead, we'll reenter it later.

          nextHydratableInstance = null;
          return true;
        }

        return false;
      }

    default:
      return false;
  }
}

function shouldClientRenderOnMismatch(fiber) {
  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
}

function throwOnHydrationMismatch(fiber) {
  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    if (shouldClientRenderOnMismatch(fiber)) {
      warnNonhydratedInstance(hydrationParentFiber, fiber);
      throwOnHydrationMismatch();
    } // Nothing to hydrate. Make it an insertion.


    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    if (shouldClientRenderOnMismatch(fiber)) {
      warnNonhydratedInstance(hydrationParentFiber, fiber);
      throwOnHydrationMismatch();
    } // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.


    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
    var prevHydrationParentFiber = hydrationParentFiber;

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
  }
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  if (shouldUpdate) {
    // We assume that prepareToHydrateHostTextInstance is called in a context where the
    // hydration parent is the parent host component of this host text.
    var returnFiber = hydrationParentFiber;

    if (returnFiber !== null) {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
            isConcurrentMode);
            break;
          }

        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;

            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;

            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
            _isConcurrentMode2);
            break;
          }
      }
    }
  }

  return shouldUpdate;
}

function prepareToHydrateHostSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }

  hydrateSuspenseInstance(suspenseInstance, fiber);
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  } // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them. We also don't delete anything inside the root container.


  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
    var nextInstance = nextHydratableInstance;

    if (nextInstance) {
      if (shouldClientRenderOnMismatch(fiber)) {
        warnIfUnhydratedTailNodes(fiber);
        throwOnHydrationMismatch();
      } else {
        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function hasUnhydratedTailNodes() {
  return isHydrating && nextHydratableInstance !== null;
}

function warnIfUnhydratedTailNodes(fiber) {
  var nextInstance = nextHydratableInstance;

  while (nextInstance) {
    warnUnhydratedInstance(fiber, nextInstance);
    nextInstance = getNextHydratableSibling(nextInstance);
  }
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
  didSuspendOrErrorDEV = false;
}

function upgradeHydrationErrorsToRecoverable() {
  if (hydrationErrors !== null) {
    // Successfully completed a forced client render. The errors that occurred
    // during the hydration attempt are now recovered. We will log them in
    // commit phase, once the entire tree has finished.
    queueRecoverableErrors(hydrationErrors);
    hydrationErrors = null;
  }
}

function getIsHydrating() {
  return isHydrating;
}

function queueHydrationError(error) {
  if (hydrationErrors === null) {
    hydrationErrors = [error];
  } else {
    hydrationErrors.push(error);
  }
}

var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var NoTransition = null;
function requestCurrentTransition() {
  return ReactCurrentBatchConfig$1.transition;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictLegacyMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedupe strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);

      try {
        setCurrentFiber(firstFiber);

        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
      } finally {
        resetCurrentFiber();
      }
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = assign({}, baseProps);
    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastFullyObservedContext = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastFullyObservedContext = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, context, nextValue) {
  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(context, providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);

  {
    {
      context._currentValue = currentValue;
    }
  }
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
  // Update the child lanes of all the ancestors, including the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
      node.childLanes = mergeLanes(node.childLanes, renderLanes);

      if (alternate !== null) {
        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
      }
    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
    }

    if (node === propagationRoot) {
      break;
    }

    node = node.return;
  }

  {
    if (node !== propagationRoot) {
      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }
  }
}
function propagateContextChange(workInProgress, context, renderLanes) {
  {
    propagateContextChange_eager(workInProgress, context, renderLanes);
  }
}

function propagateContextChange_eager(workInProgress, context, renderLanes) {

  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var lane = pickArbitraryLane(renderLanes);
            var update = createUpdate(NoTimestamp, lane);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.
            // Inlined `enqueueUpdate` to remove interleaved update check

            var updateQueue = fiber.updateQueue;

            if (updateQueue === null) ; else {
              var sharedQueue = updateQueue.shared;
              var pending = sharedQueue.pending;

              if (pending === null) {
                // This is the first update. Create a circular list.
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }

              sharedQueue.pending = update;
            }
          }

          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
          var alternate = fiber.alternate;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
          }

          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.

          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
          // dependency list.

          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else if (fiber.tag === DehydratedFragment) {
      // If a dehydrated suspense boundary is in this subtree, we don't know
      // if it will have any context consumers in it. The best we can do is
      // mark it as having updates.
      var parentSuspense = fiber.return;

      if (parentSuspense === null) {
        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
      }

      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
      var _alternate = parentSuspense.alternate;

      if (_alternate !== null) {
        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
      } // This is intentionally passing this fiber as the parent
      // because we want to schedule this fiber as having work
      // on its children. We'll use the childLanes on
      // this fiber to indicate that a context has changed.


      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
      nextFiber = fiber.sibling;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderLanes) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastFullyObservedContext = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    {
      var firstContext = dependencies.firstContext;

      if (firstContext !== null) {
        if (includesSomeLane(dependencies.lanes, renderLanes)) {
          // Context list has a pending update. Mark that this fiber performed work.
          markWorkInProgressReceivedUpdate();
        } // Reset the work-in-progress list


        dependencies.firstContext = null;
      }
    }
  }
}
function readContext(context) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  var value =  context._currentValue ;

  if (lastFullyObservedContext === context) ; else {
    var contextItem = {
      context: context,
      memoizedValue: value,
      next: null
    };

    if (lastContextDependency === null) {
      if (currentlyRenderingFiber === null) {
        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        lanes: NoLanes,
        firstContext: contextItem
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return value;
}

// render. When this render exits, either because it finishes or because it is
// interrupted, the interleaved updates will be transferred onto the main part
// of the queue.

var concurrentQueues = null;
function pushConcurrentUpdateQueue(queue) {
  if (concurrentQueues === null) {
    concurrentQueues = [queue];
  } else {
    concurrentQueues.push(queue);
  }
}
function finishQueueingConcurrentUpdates() {
  // Transfer the interleaved updates onto the main queue. Each queue has a
  // `pending` field and an `interleaved` field. When they are not null, they
  // point to the last node in a circular linked list. We need to append the
  // interleaved list to the end of the pending list by joining them into a
  // single, circular list.
  if (concurrentQueues !== null) {
    for (var i = 0; i < concurrentQueues.length; i++) {
      var queue = concurrentQueues[i];
      var lastInterleavedUpdate = queue.interleaved;

      if (lastInterleavedUpdate !== null) {
        queue.interleaved = null;
        var firstInterleavedUpdate = lastInterleavedUpdate.next;
        var lastPendingUpdate = queue.pending;

        if (lastPendingUpdate !== null) {
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = firstInterleavedUpdate;
          lastInterleavedUpdate.next = firstPendingUpdate;
        }

        queue.pending = lastInterleavedUpdate;
      }
    }

    concurrentQueues = null;
  }
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
  return markUpdateLaneFromFiberToRoot(fiber, lane);
}
function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
}
function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
  return markUpdateLaneFromFiberToRoot(fiber, lane);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
  return markUpdateLaneFromFiberToRoot(fiber, lane);
} // Calling this function outside this module should only be done for backwards
// compatibility and should always be accompanied by a warning.

var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;

function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
  // Update the source fiber's lanes
  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
  var alternate = sourceFiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, lane);
  }

  {
    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
    }
  } // Walk the parent path to the root and update the child lanes.


  var node = sourceFiber;
  var parent = sourceFiber.return;

  while (parent !== null) {
    parent.childLanes = mergeLanes(parent.childLanes, lane);
    alternate = parent.alternate;

    if (alternate !== null) {
      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
    } else {
      {
        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
    }

    node = parent;
    parent = parent.return;
  }

  if (node.tag === HostRoot) {
    var root = node.stateNode;
    return root;
  } else {
    return null;
  }
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: {
      pending: null,
      interleaved: null,
      lanes: NoLanes
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      firstBaseUpdate: currentQueue.firstBaseUpdate,
      lastBaseUpdate: currentQueue.lastBaseUpdate,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(eventTime, lane) {
  var update = {
    eventTime: eventTime,
    lane: lane,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  return update;
}
function enqueueUpdate(fiber, update, lane) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return null;
  }

  var sharedQueue = updateQueue.shared;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }

  if (isUnsafeClassRenderPhaseUpdate()) {
    // This is an unsafe render phase update. Add directly to the update
    // queue so we can process it immediately during the current render.
    var pending = sharedQueue.pending;

    if (pending === null) {
      // This is the first update. Create a circular list.
      update.next = update;
    } else {
      update.next = pending.next;
      pending.next = update;
    }

    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
    // this fiber. This is for backwards compatibility in the case where you
    // update a different component during render phase than the one that is
    // currently renderings (a pattern that is accompanied by a warning).

    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
  } else {
    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
  }
}
function entangleTransitions(root, fiber, lane) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;

  if (isTransitionLane(lane)) {
    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
    // have finished. We can remove them from the shared queue, which represents
    // a superset of the actually pending lanes. In some cases we may entangle
    // more than we need to, but that's OK. In fact it's worse if we *don't*
    // entangle when we should.

    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

    var newQueueLanes = mergeLanes(queueLanes, lane);
    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
    // the lane finished since the last time we entangled it. So we need to
    // entangle it again, just to be sure.

    markRootEntangled(root, newQueueLanes);
  }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
  // Captured updates are updates that are thrown by a child during the render
  // phase. They should be discarded if the render is aborted. Therefore,
  // we should only put them on the work-in-progress queue, not the current one.
  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

  var current = workInProgress.alternate;

  if (current !== null) {
    var currentQueue = current.updateQueue;

    if (queue === currentQueue) {
      // The work-in-progress queue is the same as current. This happens when
      // we bail out on a parent fiber that then captures an error thrown by
      // a child. Since we want to append the update only to the work-in
      // -progress queue, we need to clone the updates. We usually clone during
      // processUpdateQueue, but that didn't happen in this case because we
      // skipped over the parent when we bailed out.
      var newFirst = null;
      var newLast = null;
      var firstBaseUpdate = queue.firstBaseUpdate;

      if (firstBaseUpdate !== null) {
        // Loop through the updates and clone them.
        var update = firstBaseUpdate;

        do {
          var clone = {
            eventTime: update.eventTime,
            lane: update.lane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newLast === null) {
            newFirst = newLast = clone;
          } else {
            newLast.next = clone;
            newLast = clone;
          }

          update = update.next;
        } while (update !== null); // Append the captured update the end of the cloned list.


        if (newLast === null) {
          newFirst = newLast = capturedUpdate;
        } else {
          newLast.next = capturedUpdate;
          newLast = capturedUpdate;
        }
      } else {
        // There are no base updates.
        newFirst = newLast = capturedUpdate;
      }

      queue = {
        baseState: currentQueue.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: currentQueue.shared,
        effects: currentQueue.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
  } // Append the update to the end of the list.


  var lastBaseUpdate = queue.lastBaseUpdate;

  if (lastBaseUpdate === null) {
    queue.firstBaseUpdate = capturedUpdate;
  } else {
    lastBaseUpdate.next = capturedUpdate;
  }

  queue.lastBaseUpdate = capturedUpdate;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);

              try {
                payload.call(instance, prevState, nextProps);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }

            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);

              try {
                _payload.call(instance, prevState, nextProps);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }

            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderLanes) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  }

  var firstBaseUpdate = queue.firstBaseUpdate;
  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
    // and last so that it's non-circular.

    var lastPendingUpdate = pendingQueue;
    var firstPendingUpdate = lastPendingUpdate.next;
    lastPendingUpdate.next = null; // Append pending updates to base queue

    if (lastBaseUpdate === null) {
      firstBaseUpdate = firstPendingUpdate;
    } else {
      lastBaseUpdate.next = firstPendingUpdate;
    }

    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
    // we need to transfer the updates to that queue, too. Because the base
    // queue is a singly-linked list with no cycles, we can append to both
    // lists and take advantage of structural sharing.
    // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      // This is always non-null on a ClassComponent or HostRoot
      var currentQueue = current.updateQueue;
      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

      if (currentLastBaseUpdate !== lastBaseUpdate) {
        if (currentLastBaseUpdate === null) {
          currentQueue.firstBaseUpdate = firstPendingUpdate;
        } else {
          currentLastBaseUpdate.next = firstPendingUpdate;
        }

        currentQueue.lastBaseUpdate = lastPendingUpdate;
      }
    }
  } // These values may change as we process the queue.


  if (firstBaseUpdate !== null) {
    // Iterate through the list of updates to compute the result.
    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
    // from the original lanes.

    var newLanes = NoLanes;
    var newBaseState = null;
    var newFirstBaseUpdate = null;
    var newLastBaseUpdate = null;
    var update = firstBaseUpdate;

    do {
      var updateLane = update.lane;
      var updateEventTime = update.eventTime;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: update.tag,
          payload: update.payload,
          callback: update.callback,
          next: null
        };

        if (newLastBaseUpdate === null) {
          newFirstBaseUpdate = newLastBaseUpdate = clone;
          newBaseState = newState;
        } else {
          newLastBaseUpdate = newLastBaseUpdate.next = clone;
        } // Update the remaining priority in the queue.


        newLanes = mergeLanes(newLanes, updateLane);
      } else {
        // This update does have sufficient priority.
        if (newLastBaseUpdate !== null) {
          var _clone = {
            eventTime: updateEventTime,
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };
          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
        } // Process this update.


        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
        var callback = update.callback;

        if (callback !== null && // If the update was already committed, we should not queue its
        // callback again.
        update.lane !== NoLane) {
          workInProgress.flags |= Callback;
          var effects = queue.effects;

          if (effects === null) {
            queue.effects = [update];
          } else {
            effects.push(update);
          }
        }
      }

      update = update.next;

      if (update === null) {
        pendingQueue = queue.shared.pending;

        if (pendingQueue === null) {
          break;
        } else {
          // An update was scheduled from inside a reducer. Add the new
          // pending updates to the end of the list and keep processing.
          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
          // unravel them when transferring them to the base queue.

          var _firstPendingUpdate = _lastPendingUpdate.next;
          _lastPendingUpdate.next = null;
          update = _firstPendingUpdate;
          queue.lastBaseUpdate = _lastPendingUpdate;
          queue.shared.pending = null;
        }
      }
    } while (true);

    if (newLastBaseUpdate === null) {
      newBaseState = newState;
    }

    queue.baseState = newBaseState;
    queue.firstBaseUpdate = newFirstBaseUpdate;
    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
    // process them during this render, but we do need to track which lanes
    // are remaining.

    var lastInterleaved = queue.shared.interleaved;

    if (lastInterleaved !== null) {
      var interleaved = lastInterleaved;

      do {
        newLanes = mergeLanes(newLanes, interleaved.lane);
        interleaved = interleaved.next;
      } while (interleaved !== lastInterleaved);
    } else if (firstBaseUpdate === null) {
      // `queue.lanes` is used for entangling transitions. We can set it back to
      // zero once the queue is empty.
      queue.shared.lanes = NoLanes;
    } // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.


    markSkippedUpdateLanes(newLanes);
    workInProgress.lanes = newLanes;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (typeof callback !== 'function') {
    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + '_' + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentNameFromType(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;
  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        // Invoke the function an extra time to help detect side-effects.
        partialState = getDerivedStateFromProps(nextProps, prevState);
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.lanes === NoLanes) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}

var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markStateUpdateScheduled(fiber, lane);
    }
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markStateUpdateScheduled(fiber, lane);
    }
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markForceUpdateScheduled(fiber, lane);
    }
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

    {
      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          // Invoke the function an extra time to help detect side-effects.
          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }

      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentNameFromType(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  }

  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.

  {
    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        instance = new ctor(props, context); // eslint-disable-line no-new
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }
  }

  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentNameFromType(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentNameFromType(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  if (instance.state !== oldState) {
    {
      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentNameFromType(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictLegacyMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    var fiberFlags = Update;

    {
      fiberFlags |= LayoutStatic;
    }

    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
      fiberFlags |= MountLayoutDev;
    }

    workInProgress.flags |= fiberFlags;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      var fiberFlags = Update;

      {
        fiberFlags |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }

      workInProgress.flags |= fiberFlags;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
    }

    if (typeof instance.componentDidMount === 'function') {
      var _fiberFlags = Update;

      {
        _fiberFlags |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        _fiberFlags |= MountLayoutDev;
      }

      workInProgress.flags |= _fiberFlags;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      var _fiberFlags2 = Update;

      {
        _fiberFlags2 |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        _fiberFlags2 |= MountLayoutDev;
      }

      workInProgress.flags |= _fiberFlags2;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var unresolvedOldProps = workInProgress.memoizedProps;
  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
  instance.props = oldProps;
  var unresolvedNewProps = workInProgress.pendingProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
  // both before and after `shouldComponentUpdate` has been called. Not ideal,
  // but I'm loath to refactor this function. This only happens for memoized
  // components so it's not that common.
  enableLazyContextPropagation   ;

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.flags |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.flags |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child, returnFiber) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child, returnFiber) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (typeof child._store !== 'object') {
      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    child._store.validated = true;
    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

    if (ownerHasKeyUseWarning[componentName]) {
      return;
    }

    ownerHasKeyUseWarning[componentName] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
  };
}

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (ownerFiber.tag !== ClassComponent) {
          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
      } // Assigning this to a const so Flow knows it won't change in the closure


      var resolvedInst = inst;

      {
        checkPropStringCoercion(mixedRef, 'ref');
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = resolvedInst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = resolvedInst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (typeof mixedRef !== 'string') {
        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
      }

      if (!element._owner) {
        throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  var childString = Object.prototype.toString.call(newChild);
  throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
}

function warnOnFunctionType(returnFiber) {
  {
    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

    if (ownerHasFunctionTypeWarning[componentName]) {
      return;
    }

    ownerHasFunctionTypeWarning[componentName] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
}

function resolveLazy(lazyType) {
  var payload = lazyType._payload;
  var init = lazyType._init;
  return init(payload);
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }

    var deletions = returnFiber.deletions;

    if (deletions === null) {
      returnFiber.deletions = [childToDelete];
      returnFiber.flags |= ChildDeletion;
    } else {
      deletions.push(childToDelete);
    }
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // During hydration, the useId algorithm needs to know which fibers are
      // part of a list of children (arrays, iterators).
      newFiber.flags |= Forked;
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.flags |= Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.flags |= Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.flags |= Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, lanes) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, lanes) {
    var elementType = element.type;

    if (elementType === REACT_FRAGMENT_TYPE) {
      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
    }

    if (current !== null) {
      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.
      // We need to do this after the Hot Reloading check above,
      // because hot reloading has different semantics than prod because
      // it doesn't resuspend. So we can't let the call below suspend.
      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, lanes);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, lanes) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, lanes, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, lanes) {
    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

            _created2.return = returnFiber;
            return _created2;
          }

        case REACT_LAZY_TYPE:
          {
            var payload = newChild._payload;
            var init = newChild._init;
            return createChild(returnFiber, init(payload), lanes);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              return updateElement(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }

        case REACT_LAZY_TYPE:
          {
            var payload = newChild._payload;
            var init = newChild._init;
            return updateSlot(returnFiber, oldFiber, init(payload), lanes);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
          }

        case REACT_LAZY_TYPE:
          var payload = newChild._payload;
          var init = newChild._init;
          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys, returnFiber) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child, returnFiber);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;

        case REACT_LAZY_TYPE:
          var payload = child._payload;
          var init = child._init;
          warnOnInvalidKey(init(payload), knownKeys, returnFiber);
          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);

      if (getIsHydrating()) {
        var numberOfForks = newIdx;
        pushTreeFork(returnFiber, numberOfForks);
      }

      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      if (getIsHydrating()) {
        var _numberOfForks = newIdx;
        pushTreeFork(returnFiber, _numberOfForks);
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    if (getIsHydrating()) {
      var _numberOfForks2 = newIdx;
      pushTreeFork(returnFiber, _numberOfForks2);
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (typeof iteratorFn !== 'function') {
      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (newChildren == null) {
      throw new Error('An iterable object provided no iterator.');
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);

      if (getIsHydrating()) {
        var numberOfForks = newIdx;
        pushTreeFork(returnFiber, numberOfForks);
      }

      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, lanes);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      if (getIsHydrating()) {
        var _numberOfForks3 = newIdx;
        pushTreeFork(returnFiber, _numberOfForks3);
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    if (getIsHydrating()) {
      var _numberOfForks4 = newIdx;
      pushTreeFork(returnFiber, _numberOfForks4);
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        var elementType = element.type;

        if (elementType === REACT_FRAGMENT_TYPE) {
          if (child.tag === Fragment) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, element.props.children);
            existing.return = returnFiber;

            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }

            return existing;
          }
        } else {
          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
            deleteRemainingChildren(returnFiber, child.sibling);

            var _existing = useFiber(child, element.props);

            _existing.ref = coerceRef(returnFiber, child, element);
            _existing.return = returnFiber;

            {
              _existing._debugSource = element._source;
              _existing._debugOwner = element._owner;
            }

            return _existing;
          }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

        case REACT_LAZY_TYPE:
          var payload = newChild._payload;
          var init = newChild._init; // TODO: This function is supposed to be non-recursive.

          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
      }

      if (isArray(newChild)) {
        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
      }

      if (getIteratorFn(newChild)) {
        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (current !== null && workInProgress.child !== current.child) {
    throw new Error('Resuming work not yet implemented.');
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, lanes) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, lanes);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (c === NO_CONTEXT) {
    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  workInProgress.memoizedProps; // Regular boundaries always capture.

  {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.flags & DidCapture) !== NoFlags;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

var NoFlags$1 =
/*   */
0; // Represents whether effect should fire.

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Insertion =
/*  */
2;
var Layout =
/*    */
4;
var Passive$1 =
/*   */
8;

// and should be reset before starting a new render.
// This tracks which mutable sources need to be reset after a render.

var workInProgressSources = [];
function resetWorkInProgressVersions() {
  for (var i = 0; i < workInProgressSources.length; i++) {
    var mutableSource = workInProgressSources[i];

    {
      mutableSource._workInProgressVersionPrimary = null;
    }
  }

  workInProgressSources.length = 0;
}
// This ensures that the version used for server rendering matches the one
// that is eventually read during hydration.
// If they don't match there's a potential tear and a full deopt render is required.

function registerMutableSourceForHydration(root, mutableSource) {
  var getVersion = mutableSource._getVersion;
  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
  // Retaining it forever may interfere with GC.

  if (root.mutableSourceEagerHydrationData == null) {
    root.mutableSourceEagerHydrationData = [mutableSource, version];
  } else {
    root.mutableSourceEagerHydrationData.push(mutableSource, version);
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;
var didWarnUncachedGetSnapshot;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
// gets reset after each attempt.
// TODO: Maybe there's some way to consolidate this with
// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.

var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
// hydration). This counter is global, so client ids are not stable across
// render attempts.

var globalClientIdCounter = 0;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
  renderLanes = nextRenderLanes;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.lanes = NoLanes; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // localIdCounter = 0;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (didScheduleRenderPhaseUpdateDuringThisPass) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      localIdCounter = 0;

      if (numberOfReRenders >= RE_RENDER_LIMIT) {
        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (didScheduleRenderPhaseUpdateDuringThisPass);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrance.


  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
    // render. If this fires, it suggests that we incorrectly reset the static
    // flags in some other part of the codebase. This has happened before, for
    // example, in the SuspenseList implementation.

    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
    // and creates false positives. To make this work in legacy mode, we'd
    // need to mark fibers that commit in an incomplete state, somehow. For
    // now I'll disable the warning that most of the bugs that would trigger
    // it are either exclusive to concurrent mode or exist in both.
    (current.mode & ConcurrentMode) !== NoMode) {
      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');
    }
  }

  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
  // localIdCounter = 0;

  if (didRenderTooFewHooks) {
    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');
  }

  return children;
}
function checkDidRenderIdHook() {
  // This should be called immediately after every renderWithHooks call.
  // Conceptually, it's part of the return value of renderWithHooks; it's only a
  // separate function to avoid using an array tuple.
  var didRenderIdHook = localIdCounter !== 0;
  localIdCounter = 0;
  return didRenderIdHook;
}
function bailoutHooks(current, workInProgress, lanes) {
  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
  // complete phase (bubbleProperties).

  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
  } else {
    workInProgress.flags &= ~(Passive | Update);
  }

  current.lanes = removeLanes(current.lanes, lanes);
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrance.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }

    didScheduleRenderPhaseUpdate = false;
  }

  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
    isUpdatingOpaqueValueInRenderPhase = false;
  }

  didScheduleRenderPhaseUpdateDuringThisPass = false;
  localIdCounter = 0;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (nextCurrentHook === null) {
      throw new Error('Rendered more hooks than during the previous render.');
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null,
    stores: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = {
    pending: null,
    interleaved: null,
    lanes: NoLanes,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  hook.queue = queue;
  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (queue === null) {
    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    {
      if (current.baseQueue !== baseQueue) {
        // Internal invariant that should never happen, but feasibly could in
        // the future if we implement resuming, or some form of that.
        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
      }
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateLane = update.lane;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          lane: updateLane,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.
        // TODO: Don't need to accumulate this. Instead, we can remove
        // renderLanes from the original lanes.


        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
        markSkippedUpdateLanes(updateLane);
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Process this update.


        if (update.hasEagerState) {
          // If this update is a state update (not a reducer) and was processed eagerly,
          // we can use the eagerly computed state
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  } // Interleaved updates are stored on a separate queue. We aren't going to
  // process them during this render, but we do need to track which lanes
  // are remaining.


  var lastInterleaved = queue.interleaved;

  if (lastInterleaved !== null) {
    var interleaved = lastInterleaved;

    do {
      var interleavedLane = interleaved.lane;
      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
      markSkippedUpdateLanes(interleavedLane);
      interleaved = interleaved.next;
    } while (interleaved !== lastInterleaved);
  } else if (baseQueue === null) {
    // `queue.lanes` is used for entangling transitions. We can set it back to
    // zero once the queue is empty.
    queue.lanes = NoLanes;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (queue === null) {
    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function mountMutableSource(source, getSnapshot, subscribe) {
  {
    return undefined;
  }
}

function updateMutableSource(source, getSnapshot, subscribe) {
  {
    return undefined;
  }
}

function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var fiber = currentlyRenderingFiber$1;
  var hook = mountWorkInProgressHook();
  var nextSnapshot;
  var isHydrating = getIsHydrating();

  if (isHydrating) {
    if (getServerSnapshot === undefined) {
      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');
    }

    nextSnapshot = getServerSnapshot();

    {
      if (!didWarnUncachedGetSnapshot) {
        if (nextSnapshot !== getServerSnapshot()) {
          error('The result of getServerSnapshot should be cached to avoid an infinite loop');

          didWarnUncachedGetSnapshot = true;
        }
      }
    }
  } else {
    nextSnapshot = getSnapshot();

    {
      if (!didWarnUncachedGetSnapshot) {
        var cachedSnapshot = getSnapshot();

        if (!objectIs(nextSnapshot, cachedSnapshot)) {
          error('The result of getSnapshot should be cached to avoid an infinite loop');

          didWarnUncachedGetSnapshot = true;
        }
      }
    } // Unless we're rendering a blocking lane, schedule a consistency check.
    // Right before committing, we will walk the tree and check if any of the
    // stores were mutated.
    //
    // We won't do this if we're hydrating server-rendered content, because if
    // the content is stale, it's already visible anyway. Instead we'll patch
    // it up in a passive effect.


    var root = getWorkInProgressRoot();

    if (root === null) {
      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
    }

    if (!includesBlockingLane(root, renderLanes)) {
      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
  } // Read the current snapshot from the store on every render. This breaks the
  // normal rules of React, and only works because store updates are
  // always synchronous.


  hook.memoizedState = nextSnapshot;
  var inst = {
    value: nextSnapshot,
    getSnapshot: getSnapshot
  };
  hook.queue = inst; // Schedule an effect to subscribe to the store.

  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
  // this whenever subscribe, getSnapshot, or value changes. Because there's no
  // clean-up function, and we track the deps correctly, we can call pushEffect
  // directly, without storing any additional state. For the same reason, we
  // don't need to set a static flag, either.
  // TODO: We can move this to the passive phase once we add a pre-commit
  // consistency check. See the next comment.

  fiber.flags |= Passive;
  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
  return nextSnapshot;
}

function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var fiber = currentlyRenderingFiber$1;
  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
  // normal rules of React, and only works because store updates are
  // always synchronous.

  var nextSnapshot = getSnapshot();

  {
    if (!didWarnUncachedGetSnapshot) {
      var cachedSnapshot = getSnapshot();

      if (!objectIs(nextSnapshot, cachedSnapshot)) {
        error('The result of getSnapshot should be cached to avoid an infinite loop');

        didWarnUncachedGetSnapshot = true;
      }
    }
  }

  var prevSnapshot = hook.memoizedState;
  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);

  if (snapshotChanged) {
    hook.memoizedState = nextSnapshot;
    markWorkInProgressReceivedUpdate();
  }

  var inst = hook.queue;
  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
  // commit phase if there was an interleaved mutation. In concurrent mode
  // this can happen all the time, but even in synchronous mode, an earlier
  // effect may have mutated the store.

  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
  // checking whether we scheduled a subscription effect above.
  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
    fiber.flags |= Passive;
    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
    // Right before committing, we will walk the tree and check if any of the
    // stores were mutated.

    var root = getWorkInProgressRoot();

    if (root === null) {
      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
    }

    if (!includesBlockingLane(root, renderLanes)) {
      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
  }

  return nextSnapshot;
}

function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
  fiber.flags |= StoreConsistency;
  var check = {
    getSnapshot: getSnapshot,
    value: renderedSnapshot
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.stores = [check];
  } else {
    var stores = componentUpdateQueue.stores;

    if (stores === null) {
      componentUpdateQueue.stores = [check];
    } else {
      stores.push(check);
    }
  }
}

function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
  // These are updated in the passive phase
  inst.value = nextSnapshot;
  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
  // have been in an event that fired before the passive effects, or it could
  // have been in a layout effect. In that case, we would have used the old
  // snapsho and getSnapshot values to bail out. We need to check one more time.

  if (checkIfSnapshotChanged(inst)) {
    // Force a re-render.
    forceStoreRerender(fiber);
  }
}

function subscribeToStore(fiber, inst, subscribe) {
  var handleStoreChange = function () {
    // The store changed. Check if the snapshot changed since the last time we
    // read from the store.
    if (checkIfSnapshotChanged(inst)) {
      // Force a re-render.
      forceStoreRerender(fiber);
    }
  }; // Subscribe to the store and return a clean-up function.


  return subscribe(handleStoreChange);
}

function checkIfSnapshotChanged(inst) {
  var latestGetSnapshot = inst.getSnapshot;
  var prevValue = inst.value;

  try {
    var nextValue = latestGetSnapshot();
    return !objectIs(prevValue, nextValue);
  } catch (error) {
    return true;
  }
}

function forceStoreRerender(fiber) {
  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

  if (root !== null) {
    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
  }
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = {
    pending: null,
    interleaved: null,
    lanes: NoLanes,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  hook.queue = queue;
  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();

  {
    var _ref2 = {
      current: initialValue
    };
    hook.memoizedState = _ref2;
    return _ref2;
  }
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
}

function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
  } else {
    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
  }
}

function updateEffect(create, deps) {
  return updateEffectImpl(Passive, Passive$1, create, deps);
}

function mountInsertionEffect(create, deps) {
  return mountEffectImpl(Update, Insertion, create, deps);
}

function updateInsertionEffect(create, deps) {
  return updateEffectImpl(Update, Insertion, create, deps);
}

function mountLayoutEffect(create, deps) {
  var fiberFlags = Update;

  {
    fiberFlags |= LayoutStatic;
  }

  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    fiberFlags |= MountLayoutDev;
  }

  return mountEffectImpl(fiberFlags, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  var fiberFlags = Update;

  {
    fiberFlags |= LayoutStatic;
  }

  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    fiberFlags |= MountLayoutDev;
  }

  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value) {
  var hook = mountWorkInProgressHook();
  hook.memoizedState = value;
  return value;
}

function updateDeferredValue(value) {
  var hook = updateWorkInProgressHook();
  var resolvedCurrentHook = currentHook;
  var prevValue = resolvedCurrentHook.memoizedState;
  return updateDeferredValueImpl(hook, prevValue, value);
}

function rerenderDeferredValue(value) {
  var hook = updateWorkInProgressHook();

  if (currentHook === null) {
    // This is a rerender during a mount.
    hook.memoizedState = value;
    return value;
  } else {
    // This is a rerender during an update.
    var prevValue = currentHook.memoizedState;
    return updateDeferredValueImpl(hook, prevValue, value);
  }
}

function updateDeferredValueImpl(hook, prevValue, value) {
  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);

  if (shouldDeferValue) {
    // This is an urgent update. If the value has changed, keep using the
    // previous value and spawn a deferred render to update it later.
    if (!objectIs(value, prevValue)) {
      // Schedule a deferred render
      var deferredLane = claimNextTransitionLane();
      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
      // from the latest value. The name "baseState" doesn't really match how we
      // use it because we're reusing a state hook field instead of creating a
      // new one.

      hook.baseState = true;
    } // Reuse the previous value


    return prevValue;
  } else {
    // This is not an urgent update, so we can use the latest value regardless
    // of what it is. No need to defer it.
    // However, if we're currently inside a spawned render, then we need to mark
    // this as an update to prevent the fiber from bailing out.
    //
    // `baseState` is true when the current value is different from the rendered
    // value. The name doesn't really match how we use it because we're reusing
    // a state hook field instead of creating a new one.
    if (hook.baseState) {
      // Flip this back to false.
      hook.baseState = false;
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = value;
    return value;
  }
}

function startTransition(setPending, callback, options) {
  var previousPriority = getCurrentUpdatePriority();
  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
  setPending(true);
  var prevTransition = ReactCurrentBatchConfig$2.transition;
  ReactCurrentBatchConfig$2.transition = {};
  var currentTransition = ReactCurrentBatchConfig$2.transition;

  {
    ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
  }

  try {
    setPending(false);
    callback();
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$2.transition = prevTransition;

    {
      if (prevTransition === null && currentTransition._updatedFibers) {
        var updatedFibersCount = currentTransition._updatedFibers.size;

        if (updatedFibersCount > 10) {
          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
        }

        currentTransition._updatedFibers.clear();
      }
    }
  }
}

function mountTransition() {
  var _mountState = mountState(false),
      isPending = _mountState[0],
      setPending = _mountState[1]; // The `start` method never changes.


  var start = startTransition.bind(null, setPending);
  var hook = mountWorkInProgressHook();
  hook.memoizedState = start;
  return [isPending, start];
}

function updateTransition() {
  var _updateState = updateState(),
      isPending = _updateState[0];

  var hook = updateWorkInProgressHook();
  var start = hook.memoizedState;
  return [isPending, start];
}

function rerenderTransition() {
  var _rerenderState = rerenderState(),
      isPending = _rerenderState[0];

  var hook = updateWorkInProgressHook();
  var start = hook.memoizedState;
  return [isPending, start];
}

var isUpdatingOpaqueValueInRenderPhase = false;
function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
  {
    return isUpdatingOpaqueValueInRenderPhase;
  }
}

function mountId() {
  var hook = mountWorkInProgressHook();
  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
  // should do this in Fiber, too? Deferring this decision for now because
  // there's no other place to store the prefix except for an internal field on
  // the public createRoot object, which the fiber tree does not currently have
  // a reference to.

  var identifierPrefix = root.identifierPrefix;
  var id;

  if (getIsHydrating()) {
    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.

    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
    // that represents the position of this useId hook among all the useId
    // hooks for this fiber.

    var localId = localIdCounter++;

    if (localId > 0) {
      id += 'H' + localId.toString(32);
    }

    id += ':';
  } else {
    // Use a lowercase r prefix for client-generated ids.
    var globalClientId = globalClientIdCounter++;
    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
  }

  hook.memoizedState = id;
  return id;
}

function updateId() {
  var hook = updateWorkInProgressHook();
  var id = hook.memoizedState;
  return id;
}

function dispatchReducerAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var lane = requestUpdateLane(fiber);
  var update = {
    lane: lane,
    action: action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };

  if (isRenderPhaseUpdate(fiber)) {
    enqueueRenderPhaseUpdate(queue, update);
  } else {
    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

    if (root !== null) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitionUpdate(root, queue, lane);
    }
  }

  markUpdateInDevTools(fiber, lane);
}

function dispatchSetState(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var lane = requestUpdateLane(fiber);
  var update = {
    lane: lane,
    action: action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };

  if (isRenderPhaseUpdate(fiber)) {
    enqueueRenderPhaseUpdate(queue, update);
  } else {
    var alternate = fiber.alternate;

    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.hasEagerState = true;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            // TODO: Do we still need to entangle transitions in this case?
            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }

    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

    if (root !== null) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitionUpdate(root, queue, lane);
    }
  }

  markUpdateInDevTools(fiber, lane);
}

function isRenderPhaseUpdate(fiber) {
  var alternate = fiber.alternate;
  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
}

function enqueueRenderPhaseUpdate(queue, update) {
  // This is a render phase update. Stash it in a lazily-created map of
  // queue -> linked list of updates. After this render pass, we'll restart
  // and apply the stashed updates on top of the work-in-progress hook.
  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
} // TODO: Move to ReactFiberConcurrentUpdates?


function entangleTransitionUpdate(root, queue, lane) {
  if (isTransitionLane(lane)) {
    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
    // must have finished. We can remove them from the shared queue, which
    // represents a superset of the actually pending lanes. In some cases we
    // may entangle more than we need to, but that's OK. In fact it's worse if
    // we *don't* entangle when we should.

    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

    var newQueueLanes = mergeLanes(queueLanes, lane);
    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
    // the lane finished since the last time we entangled it. So we need to
    // entangle it again, just to be sure.

    markRootEntangled(root, newQueueLanes);
  }
}

function markUpdateInDevTools(fiber, lane, action) {

  {
    markStateUpdateScheduled(fiber, lane);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useInsertionEffect: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError,
  useMutableSource: throwInvalidHookError,
  useSyncExternalStore: throwInvalidHookError,
  useId: throwInvalidHookError,
  unstable_isNewReconciler: enableNewReconciler
};

var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      mountHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      mountHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      mountHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var layoutEffectStartTime = -1;
var profilerStartTime = -1;
var passiveEffectStartTime = -1;
/**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */

var currentUpdateIsNested = false;
var nestedUpdateScheduled = false;

function isCurrentUpdateNested() {
  return currentUpdateIsNested;
}

function markNestedUpdateScheduled() {
  {
    nestedUpdateScheduled = true;
  }
}

function resetNestedUpdateFlag() {
  {
    currentUpdateIsNested = false;
    nestedUpdateScheduled = false;
  }
}

function syncNestedUpdateFlag() {
  {
    currentUpdateIsNested = nestedUpdateScheduled;
    nestedUpdateScheduled = false;
  }
}

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

function recordLayoutEffectDuration(fiber) {

  if (layoutEffectStartTime >= 0) {
    var elapsedTime = now$1() - layoutEffectStartTime;
    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
    // Or the root (for the DevTools Profiler to read)

    var parentFiber = fiber.return;

    while (parentFiber !== null) {
      switch (parentFiber.tag) {
        case HostRoot:
          var root = parentFiber.stateNode;
          root.effectDuration += elapsedTime;
          return;

        case Profiler:
          var parentStateNode = parentFiber.stateNode;
          parentStateNode.effectDuration += elapsedTime;
          return;
      }

      parentFiber = parentFiber.return;
    }
  }
}

function recordPassiveEffectDuration(fiber) {

  if (passiveEffectStartTime >= 0) {
    var elapsedTime = now$1() - passiveEffectStartTime;
    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
    // Or the root (for the DevTools Profiler to read)

    var parentFiber = fiber.return;

    while (parentFiber !== null) {
      switch (parentFiber.tag) {
        case HostRoot:
          var root = parentFiber.stateNode;

          if (root !== null) {
            root.passiveEffectDuration += elapsedTime;
          }

          return;

        case Profiler:
          var parentStateNode = parentFiber.stateNode;

          if (parentStateNode !== null) {
            // Detached fibers have their state node cleared out.
            // In this case, the return pointer is also cleared out,
            // so we won't be able to report the time spent in this Profiler's subtree.
            parentStateNode.passiveEffectDuration += elapsedTime;
          }

          return;
      }

      parentFiber = parentFiber.return;
    }
  }
}

function startLayoutEffectTimer() {

  layoutEffectStartTime = now$1();
}

function startPassiveEffectTimer() {

  passiveEffectStartTime = now$1();
}

function transferActualDuration(fiber) {
  // Transfer time spent rendering these children so we don't lose it
  // after we rerender. This is used as a helper in special cases
  // where we should count the work of multiple passes.
  var child = fiber.child;

  while (child) {
    fiber.actualDuration += child.actualDuration;
    child = child.sibling;
  }
}

function createCapturedValueAtFiber(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source),
    digest: null
  };
}
function createCapturedValue(value, digest, stack) {
  return {
    value: value,
    source: null,
    stack: stack != null ? stack : null,
    digest: digest != null ? digest : null
  };
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(boundary, errorInfo) {
  return true;
}

function logCapturedError(boundary, errorInfo) {
  try {
    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
    // This enables renderers like ReactNative to better manage redbox behavior.

    if (logError === false) {
      return;
    }

    var error = errorInfo.value;

    if (true) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;
      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
      // `preventDefault()` in window `error` handler.
      // We record this information as an expando on the error.

      if (error != null && error._suppressLogging) {
        if (boundary.tag === ClassComponent) {
          // The error is recoverable and was silenced.
          // Ignore it and don't print the stack addendum.
          // This is handy for testing error boundaries without noise.
          return;
        } // The error is fatal. Since the silencing might have
        // been accidental, we'll surface it anyway.
        // However, the browser would have silenced the original error
        // so we'll print it first, and then print the stack addendum.


        console['error'](error); // Don't transform to our wrapper
        // For a more detailed description of this block, see:
        // https://github.com/facebook/react/pull/13384
      }

      var componentName = source ? getComponentNameFromFiber(source) : null;
      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
      var errorBoundaryMessage;

      if (boundary.tag === HostRoot) {
        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
      } else {
        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      }

      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
      // We don't include the original error message and JS stack because the browser
      // has already printed it. Even if the application swallows the error, it is still
      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

      console['error'](combinedMessage); // Don't transform to our wrapper
    }
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logCapturedError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      return getDerivedStateFromError(error$1);
    };

    update.callback = function () {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      logCapturedError(fiber, errorInfo);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      logCapturedError(fiber, errorInfo);

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (!includesSomeLane(fiber.lanes, SyncLane)) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');
          }
        }
      }
    };
  }

  return update;
}

function attachPingListener(root, wakeable, lanes) {
  // Attach a ping listener
  //
  // The data might resolve before we have a chance to commit the fallback. Or,
  // in the case of a refresh, we'll never commit a fallback. So we need to
  // attach a listener now. When it resolves ("pings"), we can decide whether to
  // try rendering the tree again.
  //
  // Only attach a listener if one does not already exist for the lanes
  // we're currently rendering (which acts like a "thread ID" here).
  //
  // We only need to do this in concurrent mode. Legacy Suspense always
  // commits fallbacks synchronously, so there are no pings.
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(wakeable, threadIDs);
  } else {
    threadIDs = pingCache.get(wakeable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    }
  }

  if (!threadIDs.has(lanes)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(lanes);
    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);

    {
      if (isDevToolsPresent) {
        // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, lanes);
      }
    }

    wakeable.then(ping, ping);
  }
}

function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
  // Retry listener
  //
  // If the fallback does commit, we need to attach a different type of
  // listener. This one schedules an update on the Suspense boundary to turn
  // the fallback state off.
  //
  // Stash the wakeable on the boundary fiber so we can access it in the
  // commit phase.
  //
  // When the wakeable resolves, we'll attempt to render the boundary
  // again ("retry").
  var wakeables = suspenseBoundary.updateQueue;

  if (wakeables === null) {
    var updateQueue = new Set();
    updateQueue.add(wakeable);
    suspenseBoundary.updateQueue = updateQueue;
  } else {
    wakeables.add(wakeable);
  }
}

function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
  // A legacy mode Suspense quirk, only relevant to hook components.


  var tag = sourceFiber.tag;

  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
    var currentSource = sourceFiber.alternate;

    if (currentSource) {
      sourceFiber.updateQueue = currentSource.updateQueue;
      sourceFiber.memoizedState = currentSource.memoizedState;
      sourceFiber.lanes = currentSource.lanes;
    } else {
      sourceFiber.updateQueue = null;
      sourceFiber.memoizedState = null;
    }
  }
}

function getNearestSuspenseBoundaryToCapture(returnFiber) {
  var node = returnFiber;

  do {
    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
      return node;
    } // This boundary already captured during this render. Continue to the next
    // boundary.


    node = node.return;
  } while (node !== null);

  return null;
}

function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
  // This marks a Suspense boundary so that when we're unwinding the stack,
  // it captures the suspended "exception" and does a second (fallback) pass.
  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
    // Legacy Mode Suspense
    //
    // If the boundary is in legacy mode, we should *not*
    // suspend the commit. Pretend as if the suspended component rendered
    // null and keep rendering. When the Suspense boundary completes,
    // we'll do a second pass to render the fallback.
    if (suspenseBoundary === returnFiber) {
      // Special case where we suspended while reconciling the children of
      // a Suspense boundary's inner Offscreen wrapper fiber. This happens
      // when a React.lazy component is a direct child of a
      // Suspense boundary.
      //
      // Suspense boundaries are implemented as multiple fibers, but they
      // are a single conceptual unit. The legacy mode behavior where we
      // pretend the suspended fiber committed as `null` won't work,
      // because in this case the "suspended" fiber is the inner
      // Offscreen wrapper.
      //
      // Because the contents of the boundary haven't started rendering
      // yet (i.e. nothing in the tree has partially rendered) we can
      // switch to the regular, concurrent mode behavior: mark the
      // boundary with ShouldCapture and enter the unwind phase.
      suspenseBoundary.flags |= ShouldCapture;
    } else {
      suspenseBoundary.flags |= DidCapture;
      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
      // But we shouldn't call any lifecycle methods or callbacks. Remove
      // all lifecycle effect tags.

      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

      if (sourceFiber.tag === ClassComponent) {
        var currentSourceFiber = sourceFiber.alternate;

        if (currentSourceFiber === null) {
          // This is a new mount. Change the tag so it's not mistaken for a
          // completed class component. For example, we should not call
          // componentWillUnmount if it is deleted.
          sourceFiber.tag = IncompleteClassComponent;
        } else {
          // When we try rendering again, we should not reuse the current fiber,
          // since it's known to be in an inconsistent state. Use a force update to
          // prevent a bail out.
          var update = createUpdate(NoTimestamp, SyncLane);
          update.tag = ForceUpdate;
          enqueueUpdate(sourceFiber, update, SyncLane);
        }
      } // The source fiber did not complete. Mark it with Sync priority to
      // indicate that it still has pending work.


      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
    }

    return suspenseBoundary;
  } // Confirmed that the boundary is in a concurrent mode tree. Continue
  // with the normal suspend path.
  //
  // After this we'll use a set of heuristics to determine whether this
  // render pass will run to completion or restart or "suspend" the commit.
  // The actual logic for this is spread out in different places.
  //
  // This first principle is that if we're going to suspend when we complete
  // a root, then we should also restart if we get an update or ping that
  // might unsuspend it, and vice versa. The only reason to suspend is
  // because you think you might want to restart before committing. However,
  // it doesn't make sense to restart only while in the period we're suspended.
  //
  // Restarting too aggressively is also not good because it starves out any
  // intermediate loading state. So we use heuristics to determine when.
  // Suspense Heuristics
  //
  // If nothing threw a Promise or all the same fallbacks are already showing,
  // then don't suspend/restart.
  //
  // If this is an initial render of a new tree of Suspense boundaries and
  // those trigger a fallback, then don't suspend/restart. We want to ensure
  // that we can show the initial loading state as quickly as possible.
  //
  // If we hit a "Delayed" case, such as when we'd switch from content back into
  // a fallback, then we should always suspend/restart. Transitions apply
  // to this case. If none is defined, JND is used instead.
  //
  // If we're already showing a fallback and it gets "retried", allowing us to show
  // another level, but there's still an inner boundary that would show a fallback,
  // then we suspend/restart for 500ms since the last time we showed a fallback
  // anywhere in the tree. This effectively throttles progressive loading into a
  // consistent train of commits. This also gives us an opportunity to restart to
  // get to the completed state slightly earlier.
  //
  // If there's ambiguity due to batching it's resolved in preference of:
  // 1) "delayed", 2) "initial render", 3) "retry".
  //
  // We want to ensure that a "busy" state doesn't get force committed. We want to
  // ensure that new initial loading states can commit as soon as possible.


  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
  // the begin phase to prevent an early bailout.

  suspenseBoundary.lanes = rootRenderLanes;
  return suspenseBoundary;
}

function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
  // The source fiber did not complete.
  sourceFiber.flags |= Incomplete;

  {
    if (isDevToolsPresent) {
      // If we have pending work still, restore the original updaters
      restorePendingUpdaters(root, rootRenderLanes);
    }
  }

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a wakeable. The component suspended.
    var wakeable = value;
    resetSuspendedComponent(sourceFiber);

    {
      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
        markDidThrowWhileHydratingDEV();
      }
    }


    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);

    if (suspenseBoundary !== null) {
      suspenseBoundary.flags &= ~ForceClientRender;
      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
      // commits fallbacks synchronously, so there are no pings.

      if (suspenseBoundary.mode & ConcurrentMode) {
        attachPingListener(root, wakeable, rootRenderLanes);
      }

      attachRetryListener(suspenseBoundary, root, wakeable);
      return;
    } else {
      // No boundary was found. Unless this is a sync update, this is OK.
      // We can suspend and wait for more data to arrive.
      if (!includesSyncLane(rootRenderLanes)) {
        // This is not a sync update. Suspend. Since we're not activating a
        // Suspense boundary, this will unwind all the way to the root without
        // performing a second pass to render a fallback. (This is arguably how
        // refresh transitions should work, too, since we're not going to commit
        // the fallbacks anyway.)
        //
        // This case also applies to initial hydration.
        attachPingListener(root, wakeable, rootRenderLanes);
        renderDidSuspendDelayIfPossible();
        return;
      } // This is a sync/discrete update. We treat this case like an error
      // because discrete renders are expected to produce a complete tree
      // synchronously to maintain consistency with external state.


      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.
      // The error will be caught by the nearest suspense boundary.

      value = uncaughtSuspenseError;
    }
  } else {
    // This is a regular error, not a Suspense wakeable.
    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
      markDidThrowWhileHydratingDEV();

      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
      // discarding the dehydrated content and switching to a client render.
      // Instead of surfacing the error, find the nearest Suspense boundary
      // and render it again without hydration.


      if (_suspenseBoundary !== null) {
        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
          // Set a flag to indicate that we should try rendering the normal
          // children again, not the fallback.
          _suspenseBoundary.flags |= ForceClientRender;
        }

        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
        // still log it so it can be fixed.

        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
        return;
      }
    }
  }

  value = createCapturedValueAtFiber(value, sourceFiber);
  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.

  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.flags |= ShouldCapture;
          var lane = pickArbitraryLane(rootRenderLanes);
          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
          enqueueCapturedUpdate(workInProgress, update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.flags |= ShouldCapture;

          var _lane = pickArbitraryLane(rootRenderLanes);

          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

function getSuspendedCache() {
  {
    return null;
  } // This function is called when a Suspense boundary suspends. It returns the
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  var hasId;
  prepareToReadContext(workInProgress, renderLanes);

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
    hasId = checkDidRenderIdHook();

    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  if (getIsHydrating() && hasId) {
    pushMaterializedTreeId(workInProgress);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(type));
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentNameFromType(_type));
    }
  }

  var currentChild = current.child; // This is always exactly one child

  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

  if (!hasScheduledUpdateOrContext) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        var lazyComponent = outerMemoType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;

        try {
          outerMemoType = init(payload);
        } catch (x) {
          outerMemoType = null;
        } // Inner propTypes will be validated in the function component path.


        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

        if (outerPropTypes) {
          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
          'prop', getComponentNameFromType(outerMemoType));
        }
      }
    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
      // would during a normal fiber bailout.
      //
      // We don't have strong guarantees that the props object is referentially
      // equal during updates where we can't bail out anyway — like if the props
      // are shallowly equal, but there's a local state or context update in the
      // same batch.
      //
      // However, as a principle, we should aim to make the behavior consistent
      // across different ways of memoizing a component. For example, React.memo
      // has a different internal Fiber layout if you pass a normal function
      // component (SimpleMemoComponent) versus if you pass a different type
      // like forwardRef (MemoComponent). But this is an implementation detail.
      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
      // affect whether the props object is reused during a bailout.

      workInProgress.pendingProps = nextProps = prevProps;

      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
        // The pending lanes were cleared at the beginning of beginWork. We're
        // about to bail out, but there might be other lanes that weren't
        // included in the current render. Usually, the priority level of the
        // remaining updates is accumulated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.lanes = current.lanes;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}

function updateOffscreenComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  var prevState = current !== null ? current.memoizedState : null;

  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {
    // Rendering a hidden tree.
    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
      // In legacy sync mode, don't defer the subtree. Render it now.
      // TODO: Consider how Offscreen should work with transitions in the future
      var nextState = {
        baseLanes: NoLanes,
        cachePool: null,
        transitions: null
      };
      workInProgress.memoizedState = nextState;

      pushRenderLanes(workInProgress, renderLanes);
    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
      // and resume this tree later.

      var nextBaseLanes;

      if (prevState !== null) {
        var prevBaseLanes = prevState.baseLanes;
        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
      } else {
        nextBaseLanes = renderLanes;
      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
      var _nextState = {
        baseLanes: nextBaseLanes,
        cachePool: spawnedCachePool,
        transitions: null
      };
      workInProgress.memoizedState = _nextState;
      workInProgress.updateQueue = null;
      // to avoid a push/pop misalignment.


      pushRenderLanes(workInProgress, nextBaseLanes);

      return null;
    } else {
      // This is the second render. The surrounding visible content has already
      // committed. Now we resume rendering the hidden tree.
      // Rendering at offscreen, so we can clear the base lanes.
      var _nextState2 = {
        baseLanes: NoLanes,
        cachePool: null,
        transitions: null
      };
      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;

      pushRenderLanes(workInProgress, subtreeRenderLanes);
    }
  } else {
    // Rendering a visible tree.
    var _subtreeRenderLanes;

    if (prevState !== null) {
      // We're going from hidden -> visible.
      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);

      workInProgress.memoizedState = null;
    } else {
      // We weren't previously hidden, and we still aren't, so there's nothing
      // special to do. Need to push to the stack regardless, though, to avoid
      // a push/pop misalignment.
      _subtreeRenderLanes = renderLanes;
    }

    pushRenderLanes(workInProgress, _subtreeRenderLanes);
  }

  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
} // Note: These happen to have identical begin phases, for now. We shouldn't hold

function updateFragment(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderLanes) {
  {
    workInProgress.flags |= Update;

    {
      // Reset effect durations for the next eventual effect phase.
      // These are reset during render to allow the DevTools commit hook a chance to read them,
      var stateNode = workInProgress.stateNode;
      stateNode.effectDuration = 0;
      stateNode.passiveEffectDuration = 0;
    }
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.flags |= Ref;

    {
      workInProgress.flags |= RefStatic;
    }
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  var hasId;
  prepareToReadContext(workInProgress, renderLanes);

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
    hasId = checkDidRenderIdHook();

    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  if (getIsHydrating() && hasId) {
    pushMaterializedTreeId(workInProgress);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    // This is used by DevTools to force a boundary to error.
    switch (shouldError(workInProgress)) {
      case false:
        {
          var _instance = workInProgress.stateNode;
          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
          // Is there a better way to do this?

          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
          var state = tempInstance.state;

          _instance.updater.enqueueSetState(_instance, state, null);

          break;
        }

      case true:
        {
          workInProgress.flags |= DidCapture;
          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes

          var error$1 = new Error('Simulated error coming from DevTools');
          var lane = pickArbitraryLane(renderLanes);
          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state

          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
          enqueueCapturedUpdate(workInProgress, update);
          break;
        }
    }

    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.

    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

  {
    var inst = workInProgress.stateNode;

    if (shouldUpdate && inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      markComponentRenderStarted(workInProgress);
    }

    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          instance.render();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }

      setIsRendering(false);
    }

    {
      markComponentRenderStopped();
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderLanes) {
  pushHostRootContext(workInProgress);

  if (current === null) {
    throw new Error('Should have a current fiber. This is a bug in React.');
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState.element;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
  var nextState = workInProgress.memoizedState;
  workInProgress.stateNode;
  // being called "element".


  var nextChildren = nextState.element;

  if ( prevState.isDehydrated) {
    // This is a hydration root whose shell has not yet hydrated. We should
    // attempt to hydrate.
    // Flip isDehydrated to false to indicate that when this render
    // finishes, the root will no longer be dehydrated.
    var overrideState = {
      element: nextChildren,
      isDehydrated: false,
      cache: nextState.cache,
      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
      transitions: nextState.transitions
    };
    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
    // have reducer functions so it doesn't need rebasing.

    updateQueue.baseState = overrideState;
    workInProgress.memoizedState = overrideState;

    if (workInProgress.flags & ForceClientRender) {
      // Something errored during a previous attempt to hydrate the shell, so we
      // forced a client render.
      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);
      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
    } else if (nextChildren !== prevChildren) {
      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);

      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
    } else {
      // The outermost shell has not hydrated yet. Start hydrating.
      enterHydrationState(workInProgress);

      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
      workInProgress.child = child;
      var node = child;

      while (node) {
        // Mark each child as hydrating. This is a fast path to know whether this
        // tree is part of a hydrating tree. This is used to determine if a child
        // node has fully mounted yet, and for scheduling event replaying.
        // Conceptually this is similar to Placement in that a new subtree is
        // inserted into the React tree here. It just happens to not need DOM
        // mutations because it already exists.
        node.flags = node.flags & ~Placement | Hydrating;
        node = node.sibling;
      }
    }
  } else {
    // Root is not dehydrated. Either this is a client-only root, or it
    // already hydrated.
    resetHydrationState();

    if (nextChildren === prevChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }

    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  }

  return workInProgress.child;
}

function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
  // Revert to client rendering.
  resetHydrationState();
  queueHydrationError(recoverableError);
  workInProgress.flags |= ForceClientRender;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderLanes) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.flags |= ContentReset;
  }

  markRef(current, workInProgress);
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
  var props = workInProgress.pendingProps;
  var lazyComponent = elementType;
  var payload = lazyComponent._payload;
  var init = lazyComponent._init;
  var Component = init(payload); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentNameFromType(Component));
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        renderLanes);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.

  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderLanes);
  var value;
  var hasId;

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictLegacyMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
    hasId = checkDidRenderIdHook();
    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  {
    // Support for module components is deprecated and is removed behind a flag.
    // Whether or not it would crash later, we want to show a good message in DEV first.
    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
      var _componentName = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    }
  }

  if ( // Run these checks in production only if the flag is off.
  // Eventually we'll delete this branch altogether.
   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName2]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

        didWarnAboutModulePatternComponent[_componentName2] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderLanes);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
          hasId = checkDidRenderIdHook();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
    }

    if (getIsHydrating() && hasId) {
      pushMaterializedTreeId(workInProgress);
    }

    reconcileChildren(null, workInProgress, value, renderLanes);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
        error('%s: Function components do not support contextType.', _componentName4);

        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  treeContext: null,
  retryLane: NoLane
};

function mountSuspenseOffscreenState(renderLanes) {
  return {
    baseLanes: renderLanes,
    cachePool: getSuspendedCache(),
    transitions: null
  };
}

function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
  var cachePool = null;

  return {
    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
    cachePool: cachePool,
    transitions: prevOffscreenState.transitions
  };
} // TODO: Probably should inline this back


function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
  // If we're already showing a fallback, there are cases where we need to
  // remain on that fallback regardless of whether the content has resolved.
  // For example, SuspenseList coordinates when nested content appears.
  if (current !== null) {
    var suspenseState = current.memoizedState;

    if (suspenseState === null) {
      // Currently showing content. Don't hide it, even if ForceSuspenseFallback
      // is true. More precise name might be "ForceRemainSuspenseFallback".
      // Note: This is a factoring smell. Can't remain on a fallback if there's
      // no fallback to remain on.
      return false;
    }
  } // Not currently showing content. Consult the Suspense context.


  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
}

function getRemainingWorkInPrimaryTree(current, renderLanes) {
  // TODO: Should not remove render lanes that were pinged during this render
  return removeLanes(current.childLanes, renderLanes);
}

function updateSuspenseComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.flags |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var showFallback = false;
  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    showFallback = true;
    workInProgress.flags &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Avoided boundaries are not considered since they cannot handle preferred fallback states.
      {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
  // boundary's children. This involves some custom reconciliation logic. Two
  // main reasons this is so complicated.
  //
  // First, Legacy Mode has different semantics for backwards compatibility. The
  // primary tree will commit in an inconsistent state, so when we do the
  // second pass to render the fallback, we do some exceedingly, uh, clever
  // hacks to make that not totally break. Like transferring effects and
  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
  // because we bailout on the primary tree completely and leave it in its old
  // state, no effects. Same as what we do for Offscreen (except that
  // Offscreen doesn't have the first render pass).
  //
  // Second is hydration. During hydration, the Suspense fiber has a slightly
  // different layout, where the child points to a dehydrated fragment, which
  // contains the DOM rendered by the server.
  //
  // Third, even if you set all that aside, Suspense is like error boundaries in
  // that we first we try to render one tree, and if that fails, we render again
  // and switch to a different tree. Like a try/catch block. So we have to track
  // which branch we're currently rendering. Ideally we would model this using
  // a stack.

  if (current === null) {
    // Initial mount
    // Special path for hydration
    // If we're currently hydrating, try to hydrate this boundary.
    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

    var suspenseState = workInProgress.memoizedState;

    if (suspenseState !== null) {
      var dehydrated = suspenseState.dehydrated;

      if (dehydrated !== null) {
        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
      }
    }

    var nextPrimaryChildren = nextProps.children;
    var nextFallbackChildren = nextProps.fallback;

    if (showFallback) {
      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
      var primaryChildFragment = workInProgress.child;
      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;

      return fallbackFragment;
    } else {
      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
  } else {
    // This is an update.
    // Special path for hydration
    var prevState = current.memoizedState;

    if (prevState !== null) {
      var _dehydrated = prevState.dehydrated;

      if (_dehydrated !== null) {
        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
      }
    }

    if (showFallback) {
      var _nextFallbackChildren = nextProps.fallback;
      var _nextPrimaryChildren = nextProps.children;
      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
      var _primaryChildFragment2 = workInProgress.child;
      var prevOffscreenState = current.child.memoizedState;
      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);

      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return fallbackChildFragment;
    } else {
      var _nextPrimaryChildren2 = nextProps.children;

      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);

      workInProgress.memoizedState = null;
      return _primaryChildFragment3;
    }
  }
}

function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
  var mode = workInProgress.mode;
  var primaryChildProps = {
    mode: 'visible',
    children: primaryChildren
  };
  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
  primaryChildFragment.return = workInProgress;
  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var progressedPrimaryFragment = workInProgress.child;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;
  var fallbackChildFragment;

  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
    // In legacy mode, we commit the primary tree as if it successfully
    // completed, even though it's in an inconsistent state.
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = 0;
      primaryChildFragment.treeBaseDuration = 0;
    }

    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  } else {
    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  }

  primaryChildFragment.return = workInProgress;
  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
  // this wrapper function to constrain it.
  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
}

function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
  // The props argument to `createWorkInProgress` is `any` typed, so we use this
  // wrapper function to constrain it.
  return createWorkInProgress(current, offscreenProps);
}

function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
    mode: 'visible',
    children: primaryChildren
  });

  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    primaryChildFragment.lanes = renderLanes;
  }

  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = null;

  if (currentFallbackChildFragment !== null) {
    // Delete the fallback child fragment
    var deletions = workInProgress.deletions;

    if (deletions === null) {
      workInProgress.deletions = [currentFallbackChildFragment];
      workInProgress.flags |= ChildDeletion;
    } else {
      deletions.push(currentFallbackChildFragment);
    }
  }

  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;

  if ( // In legacy mode, we commit the primary tree as if it successfully
  // completed, even though it's in an inconsistent state.
  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
  // already cloned. In legacy mode, the only case where this isn't true is
  // when DevTools forces us to display a fallback; we skip the first render
  // pass entirely and go straight to rendering the fallback. (In Concurrent
  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
  // only codepath.)
  workInProgress.child !== currentPrimaryChildFragment) {
    var progressedPrimaryFragment = workInProgress.child;
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
    } // The fallback fiber was added as a deletion during the first pass.
    // However, since we're going to remain on the fallback, we no longer want
    // to delete it.


    workInProgress.deletions = null;
  } else {
    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
    // (We don't do this in legacy mode, because in legacy mode we don't re-use
    // the current tree; see previous branch.)

    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
  }

  var fallbackChildFragment;

  if (currentFallbackChildFragment !== null) {
    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
  } else {
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
    // mounted but this is a new fiber.

    fallbackChildFragment.flags |= Placement;
  }

  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
  // Falling back to client rendering. Because this has performance
  // implications, it's considered a recoverable error, even though the user
  // likely won't observe anything wrong with the UI.
  //
  // The error is passed in as an argument to enforce that every caller provide
  // a custom message, or explicitly opt out (currently the only path that opts
  // out is legacy mode; every concurrent path provides an error).
  if (recoverableError !== null) {
    queueHydrationError(recoverableError);
  } // This will add the old fiber to the deletion list


  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.

  var nextProps = workInProgress.pendingProps;
  var primaryChildren = nextProps.children;
  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
  // mounted but this is a new fiber.

  primaryChildFragment.flags |= Placement;
  workInProgress.memoizedState = null;
  return primaryChildFragment;
}

function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var fiberMode = workInProgress.mode;
  var primaryChildProps = {
    mode: 'visible',
    children: primaryChildren
  };
  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
  // boundary) already mounted but this is a new fiber.

  fallbackChildFragment.flags |= Placement;
  primaryChildFragment.return = workInProgress;
  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;

  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
    // We will have dropped the effect list which contains the
    // deletion. We need to reconcile to delete the current child.
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
  }

  return fallbackChildFragment;
}

function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
  // During the first pass, we'll bail out and not drill into the children.
  // Instead, we'll leave the content in place and try to hydrate it later.
  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    {
      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
    }

    workInProgress.lanes = laneToLanes(SyncLane);
  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This is a client-only boundary. Since we won't get any content from the server
    // for this, we need to schedule that at a higher priority based on when it would
    // have timed out. In theory we could render it in this pass but it would have the
    // wrong priority associated with it and will prevent hydration of parent path.
    // Instead, we'll leave work left on it to render it in a separate commit.
    // TODO This time should be the time at which the server rendered response that is
    // a parent to this boundary was displayed. However, since we currently don't have
    // a protocol to transfer that time, we'll just estimate it by using the current
    // time. This will mean that Suspense timeouts are slightly shifted to later than
    // they should be.
    // Schedule a normal pri update to render this content.
    workInProgress.lanes = laneToLanes(DefaultHydrationLane);
  } else {
    // We'll continue hydrating the rest at offscreen priority since we'll already
    // be showing the right content coming from the server, it is no rush.
    workInProgress.lanes = laneToLanes(OffscreenLane);
  }

  return null;
}

function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
  if (!didSuspend) {
    // This is the first render pass. Attempt to hydrate.
    // We should never be hydrating at this point because it is the first pass,
    // but after we've already committed once.
    warnIfHydrating();

    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument
      // required — every concurrent mode path that causes hydration to
      // de-opt to client rendering should have an error message.
      null);
    }

    if (isSuspenseInstanceFallback(suspenseInstance)) {
      // This boundary is in a permanent fallback state. In this case, we'll never
      // get an update and we'll never be able to hydrate the final content. Let's just try the
      // client side render instead.
      var digest, message, stack;

      {
        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);

        digest = _getSuspenseInstanceF.digest;
        message = _getSuspenseInstanceF.message;
        stack = _getSuspenseInstanceF.stack;
      }

      var error;

      if (message) {
        // eslint-disable-next-line react-internal/prod-error-codes
        error = new Error(message);
      } else {
        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');
      }

      var capturedValue = createCapturedValue(error, digest, stack);
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
    }
    // any context has changed, we need to treat is as if the input might have changed.


    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);

    if (didReceiveUpdate || hasContextChanged) {
      // This boundary has changed since the first render. This means that we are now unable to
      // hydrate it. We might still be able to hydrate it using a higher priority lane.
      var root = getWorkInProgressRoot();

      if (root !== null) {
        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);

        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
          // Intentionally mutating since this render will get interrupted. This
          // is one of the very rare times where we mutate the current tree
          // during the render phase.
          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render

          var eventTime = NoTimestamp;
          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
        }
      } // If we have scheduled higher pri work above, this will probably just abort the render
      // since we now have higher priority work, but in case it doesn't, we need to prepare to
      // render something, if we time out. Even if that requires us to delete everything and
      // skip hydration.
      // Delay having to do this as long as the suspense timeout allows us.


      renderDidSuspendDelayIfPossible();

      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));

      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
    } else if (isSuspenseInstancePending(suspenseInstance)) {
      // This component is still pending more data from the server, so we can't hydrate its
      // content. We treat it as if this component suspended itself. It might seem as if
      // we could just try to render it client-side instead. However, this will perform a
      // lot of unnecessary work and is unlikely to complete since it often will suspend
      // on missing data anyway. Additionally, the server might be able to render more
      // than we can on the client yet. In that case we'd end up with more fallback states
      // on the client than if we just leave it alone. If the server times out or errors
      // these should update this boundary to the permanent Fallback state instead.
      // Mark it as having captured (i.e. suspended).
      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.

      var retry = retryDehydratedSuspenseBoundary.bind(null, current);
      registerSuspenseInstanceRetry(suspenseInstance, retry);
      return null;
    } else {
      // This is the first attempt.
      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
      var primaryChildren = nextProps.children;
      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.

      primaryChildFragment.flags |= Hydrating;
      return primaryChildFragment;
    }
  } else {
    // This is the second render pass. We already attempted to hydrated, but
    // something either suspended or errored.
    if (workInProgress.flags & ForceClientRender) {
      // Something errored during hydration. Try again without hydrating.
      workInProgress.flags &= ~ForceClientRender;

      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));

      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
    } else if (workInProgress.memoizedState !== null) {
      // Something suspended and we should still be in dehydrated mode.
      // Leave the existing child in place.
      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
      // but the normal suspense pass doesn't.

      workInProgress.flags |= DidCapture;
      return null;
    } else {
      // Suspended but we should no longer be in dehydrated mode.
      // Therefore we now have to render the fallback.
      var nextPrimaryChildren = nextProps.children;
      var nextFallbackChildren = nextProps.fallback;
      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
      var _primaryChildFragment4 = workInProgress.child;
      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return fallbackChildFragment;
    }
  }
}

function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
  var alternate = fiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
  }

  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isAnArray = isArray(childSlot);
    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';

    if (isAnArray || isIterable) {
      var type = isAnArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailMode = tailMode;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.flags |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    // In legacy mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderLanes) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  }

  return workInProgress.child;
}

var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

function updateContextProvider(current, workInProgress, renderLanes) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    if (!('value' in newProps)) {
      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
      }
    }

    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
    }
  }

  pushProvider(workInProgress, context, newValue);

  {
    if (oldProps !== null) {
      var oldValue = oldProps.value;

      if (objectIs(oldValue, newValue)) {
        // No change. Bailout early if children are the same.
        if (oldProps.children === newProps.children && !hasContextChanged()) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
      } else {
        // The context value changed. Search for matching consumers and schedule
        // them to update.
        propagateContextChange(workInProgress, context, renderLanes);
      }
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderLanes) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderLanes);
  var newValue = readContext(context);

  {
    markComponentRenderStarted(workInProgress);
  }

  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    if (current !== null) {
      // A lazy component only mounts if it suspended inside a non-
      // concurrent tree, in an inconsistent state. We want to treat it like
      // a new mount, even though an empty version of it already committed.
      // Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.flags |= Placement;
    }
  }
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    {
      return null;
    }
  } // This fiber doesn't have work, but its subtree does. Clone the child
  // fibers and continue.


  cloneChildFibers(current, workInProgress);
  return workInProgress.child;
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      // eslint-disable-next-line react-internal/prod-error-codes
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          // eslint-disable-next-line react-internal/prod-error-codes
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var deletions = returnFiber.deletions;

    if (deletions === null) {
      returnFiber.deletions = [current];
      returnFiber.flags |= ChildDeletion;
    } else {
      deletions.push(current);
    }

    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function checkScheduledUpdateOrContext(current, renderLanes) {
  // Before performing an early bailout, we must check if there are pending
  // updates or context.
  var updateLanes = current.lanes;

  if (includesSomeLane(updateLanes, renderLanes)) {
    return true;
  } // No pending update, but because context is propagated lazily, we need

  return false;
}

function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
  // This fiber does not have any pending work. Bailout without entering
  // the begin phase. There's still some bookkeeping we that needs to be done
  // in this optimized path, mostly pushing stuff onto the stack.
  switch (workInProgress.tag) {
    case HostRoot:
      pushHostRootContext(workInProgress);
      workInProgress.stateNode;

      resetHydrationState();
      break;

    case HostComponent:
      pushHostContext(workInProgress);
      break;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          pushContextProvider(workInProgress);
        }

        break;
      }

    case HostPortal:
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      break;

    case ContextProvider:
      {
        var newValue = workInProgress.memoizedProps.value;
        var context = workInProgress.type._context;
        pushProvider(workInProgress, context, newValue);
        break;
      }

    case Profiler:
      {
        // Profiler should only call onRender when one of its descendants actually rendered.
        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

        if (hasChildWork) {
          workInProgress.flags |= Update;
        }

        {
          // Reset effect durations for the next eventual effect phase.
          // These are reset during render to allow the DevTools commit hook a chance to read them,
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
      }

      break;

    case SuspenseComponent:
      {
        var state = workInProgress.memoizedState;

        if (state !== null) {
          if (state.dehydrated !== null) {
            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
            // been unsuspended it has committed as a resolved Suspense component.
            // If it needs to be retried, it should have work scheduled on it.

            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.

            return null;
          } // If this boundary is currently timed out, we need to decide
          // whether to retry the primary children, or to skip over it and
          // go straight to the fallback. Check the priority of the primary
          // child fragment.


          var primaryChildFragment = workInProgress.child;
          var primaryChildLanes = primaryChildFragment.childLanes;

          if (includesSomeLane(renderLanes, primaryChildLanes)) {
            // The primary children have pending work. Use the normal path
            // to attempt to render the primary children again.
            return updateSuspenseComponent(current, workInProgress, renderLanes);
          } else {
            // The primary child fragment does not have pending work marked
            // on it
            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
            // priority. Bailout.

            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

            if (child !== null) {
              // The fallback children have pending work. Skip over the
              // primary children and work on the fallback.
              return child.sibling;
            } else {
              // Note: We can return `null` here because we already checked
              // whether there were nested context consumers, via the call to
              // `bailoutOnAlreadyFinishedWork` above.
              return null;
            }
          }
        } else {
          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
        }

        break;
      }

    case SuspenseListComponent:
      {
        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

        if (didSuspendBefore) {
          if (_hasChildWork) {
            // If something was in fallback state last time, and we have all the
            // same children then we're still in progressive loading state.
            // Something might get unblocked by state updates or retries in the
            // tree which will affect the tail. So we need to use the normal
            // path to compute the correct tail.
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
          } // If none of the children had any work, that means that none of
          // them got retried so they'll still be blocked in the same way
          // as before. We can fast bail out.


          workInProgress.flags |= DidCapture;
        } // If nothing suspended before and we're rendering the same children,
        // then the tail doesn't matter. Anything new that suspends will work
        // in the "together" mode, so we can continue from the state we had.


        var renderState = workInProgress.memoizedState;

        if (renderState !== null) {
          // Reset to the "together" mode in case we've started a different
          // update in the past but didn't complete it.
          renderState.rendering = null;
          renderState.tail = null;
          renderState.lastEffect = null;
        }

        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

        if (_hasChildWork) {
          break;
        } else {
          // If none of the children had any work, that means that none of
          // them got retried so they'll still be blocked in the same way
          // as before. We can fast bail out.
          return null;
        }
      }

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        // Need to check if the tree still needs to be deferred. This is
        // almost identical to the logic used in the normal update path,
        // so we'll just enter that. The only difference is we'll bail out
        // at the next level instead of this one, because the child props
        // have not changed. Which is fine.
        // TODO: Probably should refactor `beginWork` to split the bailout
        // path from the normal path. I'm tempted to do a labeled break here
        // but I won't :)
        workInProgress.lanes = NoLanes;
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      }
  }

  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
}

function beginWork(current, workInProgress, renderLanes) {
  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else {
      // Neither props nor legacy context changes. Check if there's a pending
      // update or context change.
      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
      // may not be work scheduled on `current`, so we check for this flag.
      (workInProgress.flags & DidCapture) === NoFlags) {
        // No pending updates or context. Bail out now.
        didReceiveUpdate = false;
        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
      }

      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      } else {
        // An update was scheduled on this fiber, but there are no new props
        // nor legacy context. Set this to false. If an update queue or context
        // consumer produces a changed value, it will set this to true. Otherwise,
        // the component will assume the children have not changed and bail out.
        didReceiveUpdate = false;
      }
    }
  } else {
    didReceiveUpdate = false;

    if (getIsHydrating() && isForkedChild(workInProgress)) {
      // Check if this child belongs to a list of muliple children in
      // its parent.
      //
      // In a true multi-threaded implementation, we would render children on
      // parallel threads. This would represent the beginning of a new render
      // thread for this subtree.
      //
      // We only use this for id generation during hydration, which is why the
      // logic is located in this special branch.
      var slotIndex = workInProgress.index;
      var numberOfForks = getForksAtLevel();
      pushTreeId(workInProgress, numberOfForks, slotIndex);
    }
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.lanes = NoLanes;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, renderLanes);
      }

    case FunctionComponent:
      {
        var Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
      }

    case ClassComponent:
      {
        var _Component = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderLanes);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderLanes);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderLanes);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderLanes);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderLanes);

    case Mode:
      return updateMode(current, workInProgress, renderLanes);

    case Profiler:
      return updateProfiler(current, workInProgress, renderLanes);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderLanes);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderLanes);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentNameFromType(_type2));
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      }

    case IncompleteClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      }

    case ScopeComponent:
      {

        break;
      }

    case OffscreenComponent:
      {
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      }
  }

  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.flags |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.flags |= Ref;

  {
    workInProgress.flags |= RefStatic;
  }
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (current, workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  if (getIsHydrating()) {
    // If we're hydrating, we should consume as many items as we can
    // so we don't leave any behind.
    return;
  }

  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function bubbleProperties(completedWork) {
  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
  var newChildLanes = NoLanes;
  var subtreeFlags = NoFlags;

  if (!didBailout) {
    // Bubble up the earliest expiration time.
    if ( (completedWork.mode & ProfileMode) !== NoMode) {
      // In profiling mode, resetChildExpirationTime is also used to reset
      // profiler durations.
      var actualDuration = completedWork.actualDuration;
      var treeBaseDuration = completedWork.selfBaseDuration;
      var child = completedWork.child;

      while (child !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
        subtreeFlags |= child.subtreeFlags;
        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration. If
        // the fiber has not been cloned though, (meaning no work was done), then
        // this value will reflect the amount of time spent working on a previous
        // render. In that case it should not bubble. We determine whether it was
        // cloned by comparing the child pointer.

        actualDuration += child.actualDuration;
        treeBaseDuration += child.treeBaseDuration;
        child = child.sibling;
      }

      completedWork.actualDuration = actualDuration;
      completedWork.treeBaseDuration = treeBaseDuration;
    } else {
      var _child = completedWork.child;

      while (_child !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
        subtreeFlags |= _child.subtreeFlags;
        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
        // smell because it assumes the commit phase is never concurrent with
        // the render phase. Will address during refactor to alternate model.

        _child.return = completedWork;
        _child = _child.sibling;
      }
    }

    completedWork.subtreeFlags |= subtreeFlags;
  } else {
    // Bubble up the earliest expiration time.
    if ( (completedWork.mode & ProfileMode) !== NoMode) {
      // In profiling mode, resetChildExpirationTime is also used to reset
      // profiler durations.
      var _treeBaseDuration = completedWork.selfBaseDuration;
      var _child2 = completedWork.child;

      while (_child2 !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
        // so we should bubble those up even during a bailout. All the other
        // flags have a lifetime only of a single render + commit, so we should
        // ignore them.

        subtreeFlags |= _child2.subtreeFlags & StaticMask;
        subtreeFlags |= _child2.flags & StaticMask;
        _treeBaseDuration += _child2.treeBaseDuration;
        _child2 = _child2.sibling;
      }

      completedWork.treeBaseDuration = _treeBaseDuration;
    } else {
      var _child3 = completedWork.child;

      while (_child3 !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
        // so we should bubble those up even during a bailout. All the other
        // flags have a lifetime only of a single render + commit, so we should
        // ignore them.

        subtreeFlags |= _child3.subtreeFlags & StaticMask;
        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
        // smell because it assumes the commit phase is never concurrent with
        // the render phase. Will address during refactor to alternate model.

        _child3.return = completedWork;
        _child3 = _child3.sibling;
      }
    }

    completedWork.subtreeFlags |= subtreeFlags;
  }

  completedWork.childLanes = newChildLanes;
  return didBailout;
}

function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
    warnIfUnhydratedTailNodes(workInProgress);
    resetHydrationState();
    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
    return false;
  }

  var wasHydrated = popHydrationState(workInProgress);

  if (nextState !== null && nextState.dehydrated !== null) {
    // We might be inside a hydration state the first time we're picking up this
    // Suspense boundary, and also after we've reentered it for further hydration.
    if (current === null) {
      if (!wasHydrated) {
        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');
      }

      prepareToHydrateHostSuspenseInstance(workInProgress);
      bubbleProperties(workInProgress);

      {
        if ((workInProgress.mode & ProfileMode) !== NoMode) {
          var isTimedOutSuspense = nextState !== null;

          if (isTimedOutSuspense) {
            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
            var primaryChildFragment = workInProgress.child;

            if (primaryChildFragment !== null) {
              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }
        }
      }

      return false;
    } else {
      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
      // state since we're now exiting out of it. popHydrationState doesn't do that for us.
      resetHydrationState();

      if ((workInProgress.flags & DidCapture) === NoFlags) {
        // This boundary did not suspend so it's now hydrated and unsuspended.
        workInProgress.memoizedState = null;
      } // If nothing suspended, we need to schedule an effect to mark this boundary
      // as having hydrated so events know that they're free to be invoked.
      // It's also a signal to replay events and the suspense callback.
      // If something suspended, schedule an effect to attach retry listeners.
      // So we might as well always mark this.


      workInProgress.flags |= Update;
      bubbleProperties(workInProgress);

      {
        if ((workInProgress.mode & ProfileMode) !== NoMode) {
          var _isTimedOutSuspense = nextState !== null;

          if (_isTimedOutSuspense) {
            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
            var _primaryChildFragment = workInProgress.child;

            if (_primaryChildFragment !== null) {
              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
            }
          }
        }
      }

      return false;
    }
  } else {
    // Successfully completed this tree. If this was a forced client render,
    // there may have been recoverable errors during first hydration
    // attempt. If so, add them to a queue so we can log them in the
    // commit phase.
    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path

    return true;
  }
}

function completeWork(current, workInProgress, renderLanes) {
  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.

  popTreeContext(workInProgress);

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      bubbleProperties(workInProgress);
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case HostRoot:
      {
        var fiberRoot = workInProgress.stateNode;
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          } else {
            if (current !== null) {
              var prevState = current.memoizedState;

              if ( // Check if this is a client root
              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (workInProgress.flags & ForceClientRender) !== NoFlags) {
                // Schedule an effect to clear this container at the start of the
                // next commit. This handles the case of React rendering into a
                // container with previous children. It's also safe to do for
                // updates too, because current.child would only be null if the
                // previous render was null (so the container would already
                // be empty).
                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                // recoverable errors during first hydration attempt. If so, add
                // them to a queue so we can log them in the commit phase.

                upgradeHydrationErrorsToRecoverable();
              }
            }
          }
        }

        updateHostContainer(current, workInProgress);
        bubbleProperties(workInProgress);

        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (workInProgress.stateNode === null) {
              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            } // This can happen when we abort work.


            bubbleProperties(workInProgress);
            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false);
            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.

            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (workInProgress.stateNode === null) {
              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
        // to its own fiber type so that we can add other kinds of hydration
        // boundaries that aren't associated with a Suspense tree. In anticipation
        // of such a refactor, all the hydration logic is contained in
        // this branch.

        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);

          if (!fallthroughToNormalSuspensePath) {
            if (workInProgress.flags & ShouldCapture) {
              // Special case. There were remaining unhydrated nodes. We treat
              // this as a mismatch. Revert to client rendering.
              return workInProgress;
            } else {
              // Did not finish hydrating, either because this is the initial
              // render or because something suspended.
              return null;
            }
          } // Continue with the normal Suspense path.

        }

        if ((workInProgress.flags & DidCapture) !== NoFlags) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.lanes = renderLanes; // Do not reset the effect list.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          } // Don't bubble properties in this case.


          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = current !== null && current.memoizedState !== null;
        // a passive effect, which is when we process the transitions


        if (nextDidTimeout !== prevDidTimeout) {
          // an effect to toggle the subtree's visibility. When we switch from
          // fallback -> primary, the inner Offscreen fiber schedules this effect
          // as part of its normal complete phase. But when we switch from
          // primary -> fallback, the inner Offscreen fiber does not have a complete
          // phase. So we need to schedule its effect here.
          //
          // We also use this flag to connect/disconnect the effects, but the same
          // logic applies: when re-connecting, the Offscreen fiber's complete
          // phase will handle scheduling the effect. It's only when the fallback
          // is active that we have to do anything special.


          if (nextDidTimeout) {
            var _offscreenFiber2 = workInProgress.child;
            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
            // in the concurrent tree already suspended during this render.
            // This is a known bug.

            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
              // TODO: Move this back to throwException because this is too late
              // if this is a large tree which is common for initial loads. We
              // don't know if we should restart a render or not until we get
              // this marker, and this is too late.
              // If this render already had a ping or lower pri updates,
              // and this is the first time we know we're going to suspend we
              // should be able to immediately restart from within throwException.
              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);

              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                // If this was in an invisible tree or a new render, then showing
                // this boundary is ok.
                renderDidSuspend();
              } else {
                // Otherwise, we're going to have to hide content so we should
                // suspend for longer if possible.
                renderDidSuspendDelayIfPossible();
              }
            }
          }
        }

        var wakeables = workInProgress.updateQueue;

        if (wakeables !== null) {
          // Schedule an effect to attach a retry listener to the promise.
          // TODO: Move to passive phase
          workInProgress.flags |= Update;
        }

        bubbleProperties(workInProgress);

        {
          if ((workInProgress.mode & ProfileMode) !== NoMode) {
            if (nextDidTimeout) {
              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
              var primaryChildFragment = workInProgress.child;

              if (primaryChildFragment !== null) {
                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(current, workInProgress);

      if (current === null) {
        preparePortalMount(workInProgress.stateNode.containerInfo);
      }

      bubbleProperties(workInProgress);
      return null;

    case ContextProvider:
      // Pop provider fiber
      var context = workInProgress.type._context;
      popProvider(context, workInProgress);
      bubbleProperties(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          bubbleProperties(workInProgress);
          return null;
        }

        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.flags |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thenables. Instead, we'll transfer its thenables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThenables = suspended.updateQueue;

                  if (newThenables !== null) {
                    workInProgress.updateQueue = newThenables;
                    workInProgress.flags |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect flags before doing the second pass since that's now invalid.
                  // Reset the child fibers to their original state.


                  workInProgress.subtreeFlags = NoFlags;
                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.

                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }

            if (renderState.tail !== null && now() > getRenderTargetTime()) {
              // We have already passed our CPU deadline but we still have rows
              // left in the tail. We'll just give up further attempts to render
              // the main content and only render fallbacks.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThenables = _suspended.updateQueue;

              if (_newThenables !== null) {
                workInProgress.updateQueue = _newThenables;
                workInProgress.flags |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
              ) {
                  // We're done.
                  bubbleProperties(workInProgress);
                  return null;
                }
            } else if ( // The time it took to render last row is greater than the remaining
            // time we have to render. So rendering one more row would likely
            // exceed it.
            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          // Pop a row.
          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
          // Don't bubble properties in this case.

          return next;
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case ScopeComponent:
      {

        break;
      }

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        popRenderLanes(workInProgress);
        var _nextState = workInProgress.memoizedState;
        var nextIsHidden = _nextState !== null;

        if (current !== null) {
          var _prevState = current.memoizedState;
          var prevIsHidden = _prevState !== null;

          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.
          !enableLegacyHidden )) {
            workInProgress.flags |= Visibility;
          }
        }

        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
          bubbleProperties(workInProgress);
        } else {
          // Don't bubble properties for hidden children unless we're rendering
          // at offscreen priority.
          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
            bubbleProperties(workInProgress);

            {
              // Check if there was an insertion or update in the hidden subtree.
              // If so, we need to hide those nodes in the commit phase, so
              // schedule a visibility effect.
              if ( workInProgress.subtreeFlags & (Placement | Update)) {
                workInProgress.flags |= Visibility;
              }
            }
          }
        }
        return null;
      }

    case CacheComponent:
      {

        return null;
      }

    case TracingMarkerComponent:
      {

        return null;
      }
  }

  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
}

function unwindWork(current, workInProgress, renderLanes) {
  // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.
  popTreeContext(workInProgress);

  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var flags = workInProgress.flags;

        if (flags & ShouldCapture) {
          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        workInProgress.stateNode;
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();
        var _flags = workInProgress.flags;

        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
          // There was an error during render that wasn't captured by a suspense
          // boundary. Do a second pass on the root to unmount the children.
          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
          return workInProgress;
        } // We unwound to the root without completing it. Exit.


        return null;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var suspenseState = workInProgress.memoizedState;

        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          if (workInProgress.alternate === null) {
            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');
          }

          resetHydrationState();
        }

        var _flags2 = workInProgress.flags;

        if (_flags2 & ShouldCapture) {
          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      var context = workInProgress.type._context;
      popProvider(context, workInProgress);
      return null;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(workInProgress);
      return null;

    case CacheComponent:

      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(current, interruptedWork, renderLanes) {
  // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.
  popTreeContext(interruptedWork);

  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        interruptedWork.stateNode;
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        resetWorkInProgressVersions();
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      var context = interruptedWork.type._context;
      popProvider(context, interruptedWork);
      break;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(interruptedWork);
      break;
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
} // Used during the commit phase to track the state of the Offscreen component stack.
// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
// Only used when enableSuspenseLayoutEffectSemantics is enabled.


var offscreenSubtreeIsHidden = false;
var offscreenSubtreeWasHidden = false;
var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
var nextEffect = null; // Used for Profiling builds to track updaters.

var inProgressLanes = null;
var inProgressRoot = null;
function reportUncaughtErrorInDEV(error) {
  // Wrapping each small part of the commit phase into a guarded
  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).
  // But we rely on it to surface errors to DEV tools like overlays
  // (https://github.com/facebook/react/issues/21712).
  // As a compromise, rethrow only caught errors in a guard.
  {
    invokeGuardedCallback(null, function () {
      throw error;
    });
    clearCaughtError();
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;

  if ( current.mode & ProfileMode) {
    try {
      startLayoutEffectTimer();
      instance.componentWillUnmount();
    } finally {
      recordLayoutEffectDuration(current);
    }
  } else {
    instance.componentWillUnmount();
  }
}; // Capture errors so they don't interrupt mounting.


function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
  try {
    commitHookEffectListMount(Layout, current);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
  try {
    callComponentWillUnmountWithTimer(current, instance);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt mounting.


function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
  try {
    instance.componentDidMount();
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt mounting.


function safelyAttachRef(current, nearestMountedAncestor) {
  try {
    commitAttachRef(current);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}

function safelyDetachRef(current, nearestMountedAncestor) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      var retVal;

      try {
        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            retVal = ref(null);
          } finally {
            recordLayoutEffectDuration(current);
          }
        } else {
          retVal = ref(null);
        }
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }

      {
        if (typeof retVal === 'function') {
          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
  try {
    destroy();
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}
var shouldFireAfterActiveInstanceBlur = false;
function commitBeforeMutationEffects(root, firstChild) {
  prepareForCommit(root.containerInfo);
  nextEffect = firstChild;
  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber

  var shouldFire = shouldFireAfterActiveInstanceBlur;
  shouldFireAfterActiveInstanceBlur = false;
  return shouldFire;
}

function commitBeforeMutationEffects_begin() {
  while (nextEffect !== null) {
    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.

    var child = fiber.child;

    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitBeforeMutationEffects_complete();
    }
  }
}

function commitBeforeMutationEffects_complete() {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    setCurrentFiber(fiber);

    try {
      commitBeforeMutationEffectsOnFiber(fiber);
    } catch (error) {
      captureCommitPhaseError(fiber, fiber.return, error);
    }

    resetCurrentFiber();
    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitBeforeMutationEffectsOnFiber(finishedWork) {
  var current = finishedWork.alternate;
  var flags = finishedWork.flags;

  if ((flags & Snapshot) !== NoFlags) {
    setCurrentFiber(finishedWork);

    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          break;
        }

      case ClassComponent:
        {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
          }

          break;
        }

      case HostRoot:
        {
          {
            var root = finishedWork.stateNode;
            clearContainer(root.containerInfo);
          }

          break;
        }

      case HostComponent:
      case HostText:
      case HostPortal:
      case IncompleteClassComponent:
        // Nothing to do for these component types
        break;

      default:
        {
          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
        }
    }

    resetCurrentFiber();
  }
}

function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & flags) === flags) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          {
            if ((flags & Passive$1) !== NoFlags$1) {
              markComponentPassiveEffectUnmountStarted(finishedWork);
            } else if ((flags & Layout) !== NoFlags$1) {
              markComponentLayoutEffectUnmountStarted(finishedWork);
            }
          }

          {
            if ((flags & Insertion) !== NoFlags$1) {
              setIsRunningInsertionEffect(true);
            }
          }

          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);

          {
            if ((flags & Insertion) !== NoFlags$1) {
              setIsRunningInsertionEffect(false);
            }
          }

          {
            if ((flags & Passive$1) !== NoFlags$1) {
              markComponentPassiveEffectUnmountStopped();
            } else if ((flags & Layout) !== NoFlags$1) {
              markComponentLayoutEffectUnmountStopped();
            }
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(flags, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & flags) === flags) {
        {
          if ((flags & Passive$1) !== NoFlags$1) {
            markComponentPassiveEffectMountStarted(finishedWork);
          } else if ((flags & Layout) !== NoFlags$1) {
            markComponentLayoutEffectMountStarted(finishedWork);
          }
        } // Mount


        var create = effect.create;

        {
          if ((flags & Insertion) !== NoFlags$1) {
            setIsRunningInsertionEffect(true);
          }
        }

        effect.destroy = create();

        {
          if ((flags & Insertion) !== NoFlags$1) {
            setIsRunningInsertionEffect(false);
          }
        }

        {
          if ((flags & Passive$1) !== NoFlags$1) {
            markComponentPassiveEffectMountStopped();
          } else if ((flags & Layout) !== NoFlags$1) {
            markComponentLayoutEffectMountStopped();
          }
        }

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var hookName = void 0;

            if ((effect.tag & Layout) !== NoFlags) {
              hookName = 'useLayoutEffect';
            } else if ((effect.tag & Insertion) !== NoFlags) {
              hookName = 'useInsertionEffect';
            } else {
              hookName = 'useEffect';
            }

            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveEffectDurations(finishedRoot, finishedWork) {
  {
    // Only Profilers with work in their subtree will have an Update effect scheduled.
    if ((finishedWork.flags & Update) !== NoFlags) {
      switch (finishedWork.tag) {
        case Profiler:
          {
            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
            var _finishedWork$memoize = finishedWork.memoizedProps,
                id = _finishedWork$memoize.id,
                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
            // It does not get reset until the start of the next commit phase.

            var commitTime = getCommitTime();
            var phase = finishedWork.alternate === null ? 'mount' : 'update';

            {
              if (isCurrentUpdateNested()) {
                phase = 'nested-update';
              }
            }

            if (typeof onPostCommit === 'function') {
              onPostCommit(id, phase, passiveEffectDuration, commitTime);
            } // Bubble times to the next nearest ancestor Profiler.
            // After we process that Profiler, we'll bubble further up.


            var parentFiber = finishedWork.return;

            outer: while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root = parentFiber.stateNode;
                  root.passiveEffectDuration += passiveEffectDuration;
                  break outer;

                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.passiveEffectDuration += passiveEffectDuration;
                  break outer;
              }

              parentFiber = parentFiber.return;
            }

            break;
          }
      }
    }
  }
}

function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
  if ((finishedWork.flags & LayoutMask) !== NoFlags) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          if ( !offscreenSubtreeWasHidden) {
            // At this point layout effects have already been destroyed (during mutation phase).
            // This is done to prevent sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            if ( finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
            }
          }

          break;
        }

      case ClassComponent:
        {
          var instance = finishedWork.stateNode;

          if (finishedWork.flags & Update) {
            if (!offscreenSubtreeWasHidden) {
              if (current === null) {
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                  }
                }

                if ( finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    instance.componentDidMount();
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  instance.componentDidMount();
                }
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                var prevState = current.memoizedState; // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                  }
                }

                if ( finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              }
            }
          } // TODO: I think this is now always non-null by the time it reaches the
          // commit phase. Consider removing the type check.


          var updateQueue = finishedWork.updateQueue;

          if (updateQueue !== null) {
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }
              }
            } // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.


            commitUpdateQueue(finishedWork, updateQueue, instance);
          }

          break;
        }

      case HostRoot:
        {
          // TODO: I think this is now always non-null by the time it reaches the
          // commit phase. Consider removing the type check.
          var _updateQueue = finishedWork.updateQueue;

          if (_updateQueue !== null) {
            var _instance = null;

            if (finishedWork.child !== null) {
              switch (finishedWork.child.tag) {
                case HostComponent:
                  _instance = getPublicInstance(finishedWork.child.stateNode);
                  break;

                case ClassComponent:
                  _instance = finishedWork.child.stateNode;
                  break;
              }
            }

            commitUpdateQueue(finishedWork, _updateQueue, _instance);
          }

          break;
        }

      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
          // These effects should only be committed when components are first mounted,
          // aka when there is no current/alternate.

          if (current === null && finishedWork.flags & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props);
          }

          break;
        }

      case HostText:
        {
          // We have no life-cycles associated with text.
          break;
        }

      case HostPortal:
        {
          // We have no life-cycles associated with portals.
          break;
        }

      case Profiler:
        {
          {
            var _finishedWork$memoize2 = finishedWork.memoizedProps,
                onCommit = _finishedWork$memoize2.onCommit,
                onRender = _finishedWork$memoize2.onRender;
            var effectDuration = finishedWork.stateNode.effectDuration;
            var commitTime = getCommitTime();
            var phase = current === null ? 'mount' : 'update';

            {
              if (isCurrentUpdateNested()) {
                phase = 'nested-update';
              }
            }

            if (typeof onRender === 'function') {
              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
            }

            {
              if (typeof onCommit === 'function') {
                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.
              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
              // because the effect is also where times bubble to parent Profilers.


              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
              // Do not reset these values until the next render so DevTools has a chance to read them first.

              var parentFiber = finishedWork.return;

              outer: while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root = parentFiber.stateNode;
                    root.effectDuration += effectDuration;
                    break outer;

                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += effectDuration;
                    break outer;
                }

                parentFiber = parentFiber.return;
              }
            }
          }

          break;
        }

      case SuspenseComponent:
        {
          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          break;
        }

      case SuspenseListComponent:
      case IncompleteClassComponent:
      case ScopeComponent:
      case OffscreenComponent:
      case LegacyHiddenComponent:
      case TracingMarkerComponent:
        {
          break;
        }

      default:
        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
    }
  }

  if ( !offscreenSubtreeWasHidden) {
    {
      if (finishedWork.flags & Ref) {
        commitAttachRef(finishedWork);
      }
    }
  }
}

function reappearLayoutEffectsOnFiber(node) {
  // Turn on layout effects in a tree that previously disappeared.
  // TODO (Offscreen) Check: flags & LayoutStatic
  switch (node.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( node.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            safelyCallCommitHookLayoutEffectListMount(node, node.return);
          } finally {
            recordLayoutEffectDuration(node);
          }
        } else {
          safelyCallCommitHookLayoutEffectListMount(node, node.return);
        }

        break;
      }

    case ClassComponent:
      {
        var instance = node.stateNode;

        if (typeof instance.componentDidMount === 'function') {
          safelyCallComponentDidMount(node, node.return, instance);
        }

        safelyAttachRef(node, node.return);
        break;
      }

    case HostComponent:
      {
        safelyAttachRef(node, node.return);
        break;
      }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  // Only hide or unhide the top-most host nodes.
  var hostSubtreeRoot = null;

  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        if (hostSubtreeRoot === null) {
          hostSubtreeRoot = node;

          try {
            var instance = node.stateNode;

            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      } else if (node.tag === HostText) {
        if (hostSubtreeRoot === null) {
          try {
            var _instance3 = node.stateNode;

            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        if (hostSubtreeRoot === node) {
          hostSubtreeRoot = null;
        }

        node = node.return;
      }

      if (hostSubtreeRoot === node) {
        hostSubtreeRoot = null;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      var retVal;

      if ( finishedWork.mode & ProfileMode) {
        try {
          startLayoutEffectTimer();
          retVal = ref(instanceToUse);
        } finally {
          recordLayoutEffectDuration(finishedWork);
        }
      } else {
        retVal = ref(instanceToUse);
      }

      {
        if (typeof retVal === 'function') {
          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));
        }
      }
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function detachFiberMutation(fiber) {
  // Cut off the return pointer to disconnect it from the tree.
  // This enables us to detect and warn against state updates on an unmounted component.
  // It also prevents events from bubbling from within disconnected components.
  //
  // Ideally, we should also clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child.
  // This child itself will be GC:ed when the parent updates the next time.
  //
  // Note that we can't clear child or sibling pointers yet.
  // They're needed for passive effects and for findDOMNode.
  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
  //
  // Don't reset the alternate yet, either. We need that so we can detach the
  // alternate's fields in the passive phase. Clearing the return pointer is
  // sufficient for findDOMNode semantics.
  var alternate = fiber.alternate;

  if (alternate !== null) {
    alternate.return = null;
  }

  fiber.return = null;
}

function detachFiberAfterEffects(fiber) {
  var alternate = fiber.alternate;

  if (alternate !== null) {
    fiber.alternate = null;
    detachFiberAfterEffects(alternate);
  } // Note: Defensively using negation instead of < in case
  // `deletedTreeCleanUpLevel` is undefined.


  {
    // Clear cyclical Fiber fields. This level alone is designed to roughly
    // approximate the planned Fiber refactor. In that world, `setState` will be
    // bound to a special "instance" object instead of a Fiber. The Instance
    // object will not have any of these fields. It will only be connected to
    // the fiber tree via a single link at the root. So if this level alone is
    // sufficient to fix memory issues, that bodes well for our plans.
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
    // tree, which has its own pointers to children, parents, and siblings.
    // The other host nodes also point back to fibers, so we should detach that
    // one, too.

    if (fiber.tag === HostComponent) {
      var hostInstance = fiber.stateNode;

      if (hostInstance !== null) {
        detachDeletedInstance(hostInstance);
      }
    }

    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
    // already disconnect the `return` pointer at the root of the deleted
    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not
    // cyclical — it's only cyclical when combined with `child`, `sibling`, and
    // `alternate`. But we'll clear it in the next level anyway, just in case.

    {
      fiber._debugOwner = null;
    }

    {
      // Theoretically, nothing in here should be necessary, because we already
      // disconnected the fiber from the tree. So even if something leaks this
      // particular fiber, it won't leak anything else
      //
      // The purpose of this branch is to be super aggressive so we can measure
      // if there's any difference in memory impact. If there is, that could
      // indicate a React leak we don't know about.
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.

      fiber.updateQueue = null;
    }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.flags & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.flags & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  switch (parentFiber.tag) {
    case HostComponent:
      {
        var parent = parentFiber.stateNode;

        if (parentFiber.flags & ContentReset) {
          // Reset the text content of the parent before doing any insertions
          resetTextContent(parent); // Clear ContentReset from the effect tag

          parentFiber.flags &= ~ContentReset;
        }

        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.

        insertOrAppendPlacementNode(finishedWork, before, parent);
        break;
      }

    case HostRoot:
    case HostPortal:
      {
        var _parent = parentFiber.stateNode.containerInfo;

        var _before = getHostSibling(finishedWork);

        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
        break;
      }
    // eslint-disable-next-line-no-fallthrough

    default:
      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost) {
    var stateNode = node.stateNode;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost) {
    var stateNode = node.stateNode;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
} // These are tracked on the stack as we recursively traverse a
// deleted subtree.
// TODO: Update these during the whole mutation phase, not just during
// a deletion.


var hostParent = null;
var hostParentIsContainer = false;

function commitDeletionEffects(root, returnFiber, deletedFiber) {
  {
    // We only have the top Fiber that was deleted but we need to recurse down its
    // children to find all the terminal nodes.
    // Recursively delete all host nodes from the parent, detach refs, clean
    // up mounted layout effects, and call componentWillUnmount.
    // We only need to remove the topmost host child in each branch. But then we
    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
    // could split this into two separate traversals functions, where the second
    // one doesn't include any removeChild logic. This is maybe the same
    // function as "disappearLayoutEffects" (or whatever that turns into after
    // the layout phase is refactored to use recursion).
    // Before starting, find the nearest host parent on the stack so we know
    // which instance/container to remove the children from.
    // TODO: Instead of searching up the fiber return path on every deletion, we
    // can track the nearest host component on the JS stack as we traverse the
    // tree during the commit phase. This would make insertions faster, too.
    var parent = returnFiber;

    findParent: while (parent !== null) {
      switch (parent.tag) {
        case HostComponent:
          {
            hostParent = parent.stateNode;
            hostParentIsContainer = false;
            break findParent;
          }

        case HostRoot:
          {
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = true;
            break findParent;
          }

        case HostPortal:
          {
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = true;
            break findParent;
          }
      }

      parent = parent.return;
    }

    if (hostParent === null) {
      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');
    }

    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
    hostParent = null;
    hostParentIsContainer = false;
  }

  detachFiberMutation(deletedFiber);
}

function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
  // TODO: Use a static flag to skip trees that don't have unmount effects
  var child = parent.child;

  while (child !== null) {
    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
    child = child.sibling;
  }
}

function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
  // into their subtree. There are simpler cases in the inner switch
  // that don't modify the stack.

  switch (deletedFiber.tag) {
    case HostComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
        } // Intentional fallthrough to next branch

      }
    // eslint-disable-next-line-no-fallthrough

    case HostText:
      {
        // We only need to remove the nearest host child. Set the host parent
        // to `null` on the stack to indicate that nested children don't
        // need to be removed.
        {
          var prevHostParent = hostParent;
          var prevHostParentIsContainer = hostParentIsContainer;
          hostParent = null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;

          if (hostParent !== null) {
            // Now that all the child effects have unmounted, we can remove the
            // node from the tree.
            if (hostParentIsContainer) {
              removeChildFromContainer(hostParent, deletedFiber.stateNode);
            } else {
              removeChild(hostParent, deletedFiber.stateNode);
            }
          }
        }

        return;
      }

    case DehydratedFragment:
      {
        // Delete the dehydrated suspense boundary and all of its content.


        {
          if (hostParent !== null) {
            if (hostParentIsContainer) {
              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
            } else {
              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
            }
          }
        }

        return;
      }

    case HostPortal:
      {
        {
          // When we go into a portal, it becomes the parent to remove from.
          var _prevHostParent = hostParent;
          var _prevHostParentIsContainer = hostParentIsContainer;
          hostParent = deletedFiber.stateNode.containerInfo;
          hostParentIsContainer = true;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = _prevHostParent;
          hostParentIsContainer = _prevHostParentIsContainer;
        }

        return;
      }

    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          var updateQueue = deletedFiber.updateQueue;

          if (updateQueue !== null) {
            var lastEffect = updateQueue.lastEffect;

            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;

              do {
                var _effect = effect,
                    destroy = _effect.destroy,
                    tag = _effect.tag;

                if (destroy !== undefined) {
                  if ((tag & Insertion) !== NoFlags$1) {
                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                  } else if ((tag & Layout) !== NoFlags$1) {
                    {
                      markComponentLayoutEffectUnmountStarted(deletedFiber);
                    }

                    if ( deletedFiber.mode & ProfileMode) {
                      startLayoutEffectTimer();
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      recordLayoutEffectDuration(deletedFiber);
                    } else {
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                    }

                    {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }

                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
        }

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case ClassComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
          var instance = deletedFiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
          }
        }

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case ScopeComponent:
      {

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case OffscreenComponent:
      {
        if ( // TODO: Remove this dead flag
         deletedFiber.mode & ConcurrentMode) {
          // If this offscreen component is hidden, we already unmounted it. Before
          // deleting the children, track that it's already unmounted so that we
          // don't attempt to unmount the effects again.
          // TODO: If the tree is hidden, in most cases we should be able to skip
          // over the nested children entirely. An exception is we haven't yet found
          // the topmost host node to delete, which we already track on the stack.
          // But the other case is portals, which need to be detached no matter how
          // deeply they are nested. We should use a subtree flag to track whether a
          // subtree includes a nested portal.
          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        } else {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        }

        break;
      }

    default:
      {
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }
  }
}

function commitSuspenseCallback(finishedWork) {
  // TODO: Move this to passive phase
  finishedWork.memoizedState;
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of wakeables.
  // For each wakeable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var wakeables = finishedWork.updateQueue;

  if (wakeables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    wakeables.forEach(function (wakeable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

      if (!retryCache.has(wakeable)) {
        retryCache.add(wakeable);

        {
          if (isDevToolsPresent) {
            if (inProgressLanes !== null && inProgressRoot !== null) {
              // If we have pending work still, associate the original updaters with it.
              restorePendingUpdaters(inProgressRoot, inProgressLanes);
            } else {
              throw Error('Expected finished root and lanes to be set. This is a bug in React.');
            }
          }
        }

        wakeable.then(retry, retry);
      }
    });
  }
} // This function detects when a Suspense boundary goes from visible to hidden.
function commitMutationEffects(root, finishedWork, committedLanes) {
  inProgressLanes = committedLanes;
  inProgressRoot = root;
  setCurrentFiber(finishedWork);
  commitMutationEffectsOnFiber(finishedWork, root);
  setCurrentFiber(finishedWork);
  inProgressLanes = null;
  inProgressRoot = null;
}

function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
  // Deletions effects can be scheduled on any fiber type. They need to happen
  // before the children effects hae fired.
  var deletions = parentFiber.deletions;

  if (deletions !== null) {
    for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i];

      try {
        commitDeletionEffects(root, parentFiber, childToDelete);
      } catch (error) {
        captureCommitPhaseError(childToDelete, parentFiber, error);
      }
    }
  }

  var prevDebugFiber = getCurrentFiber();

  if (parentFiber.subtreeFlags & MutationMask) {
    var child = parentFiber.child;

    while (child !== null) {
      setCurrentFiber(child);
      commitMutationEffectsOnFiber(child, root);
      child = child.sibling;
    }
  }

  setCurrentFiber(prevDebugFiber);
}

function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
  var current = finishedWork.alternate;
  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
  // because the fiber tag is more specific. An exception is any flag related
  // to reconcilation, because those can be set on all fiber types.

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          try {
            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
            commitHookEffectListMount(Insertion | HasEffect, finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          } // Layout effects are destroyed during the mutation phase so that all
          // destroy functions for all fibers are called before any create functions.
          // This prevents sibling component effects from interfering with each other,
          // e.g. a destroy function in one component should never override a ref set
          // by a create function in another component during the same commit.


          if ( finishedWork.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }

            recordLayoutEffectDuration(finishedWork);
          } else {
            try {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }

        return;
      }

    case ClassComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Ref) {
          if (current !== null) {
            safelyDetachRef(current, current.return);
          }
        }

        return;
      }

    case HostComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Ref) {
          if (current !== null) {
            safelyDetachRef(current, current.return);
          }
        }

        {
          // TODO: ContentReset gets cleared by the children during the commit
          // phase. This is a refactor hazard because it means we must read
          // flags the flags after `commitReconciliationEffects` has already run;
          // the order matters. We should refactor so that ContentReset does not
          // rely on mutating the flag during commit. Like by setting a flag
          // during the render phase instead.
          if (finishedWork.flags & ContentReset) {
            var instance = finishedWork.stateNode;

            try {
              resetTextContent(instance);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }

          if (flags & Update) {
            var _instance4 = finishedWork.stateNode;

            if (_instance4 != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldProps = current !== null ? current.memoizedProps : newProps;
              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;

              if (updatePayload !== null) {
                try {
                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
            }
          }
        }

        return;
      }

    case HostText:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          {
            if (finishedWork.stateNode === null) {
              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            }

            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldText = current !== null ? current.memoizedProps : newText;

            try {
              commitTextUpdate(textInstance, oldText, newText);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }

        return;
      }

    case HostRoot:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          {
            if (current !== null) {
              var prevRootState = current.memoizedState;

              if (prevRootState.isDehydrated) {
                try {
                  commitHydratedContainer(root.containerInfo);
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
            }
          }
        }

        return;
      }

    case HostPortal:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        return;
      }

    case SuspenseComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        var offscreenFiber = finishedWork.child;

        if (offscreenFiber.flags & Visibility) {
          var offscreenInstance = offscreenFiber.stateNode;
          var newState = offscreenFiber.memoizedState;
          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
          // read it during an event

          offscreenInstance.isHidden = isHidden;

          if (isHidden) {
            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;

            if (!wasHidden) {
              // TODO: Move to passive phase
              markCommitTimeOfFallback();
            }
          }
        }

        if (flags & Update) {
          try {
            commitSuspenseCallback(finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }

          attachSuspenseRetryListeners(finishedWork);
        }

        return;
      }

    case OffscreenComponent:
      {
        var _wasHidden = current !== null && current.memoizedState !== null;

        if ( // TODO: Remove this dead flag
         finishedWork.mode & ConcurrentMode) {
          // Before committing the children, track on the stack whether this
          // offscreen subtree was already hidden, so that we don't unmount the
          // effects again.
          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
          recursivelyTraverseMutationEffects(root, finishedWork);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        } else {
          recursivelyTraverseMutationEffects(root, finishedWork);
        }

        commitReconciliationEffects(finishedWork);

        if (flags & Visibility) {
          var _offscreenInstance = finishedWork.stateNode;
          var _newState = finishedWork.memoizedState;

          var _isHidden = _newState !== null;

          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
          // read it during an event

          _offscreenInstance.isHidden = _isHidden;

          {
            if (_isHidden) {
              if (!_wasHidden) {
                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                  nextEffect = offscreenBoundary;
                  var offscreenChild = offscreenBoundary.child;

                  while (offscreenChild !== null) {
                    nextEffect = offscreenChild;
                    disappearLayoutEffects_begin(offscreenChild);
                    offscreenChild = offscreenChild.sibling;
                  }
                }
              }
            }
          }

          {
            // TODO: This needs to run whenever there's an insertion or update
            // inside a hidden Offscreen tree.
            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
          }
        }

        return;
      }

    case SuspenseListComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          attachSuspenseRetryListeners(finishedWork);
        }

        return;
      }

    case ScopeComponent:
      {

        return;
      }

    default:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        return;
      }
  }
}

function commitReconciliationEffects(finishedWork) {
  // Placement effects (insertions, reorders) can be scheduled on any fiber
  // type. They needs to happen after the children effects have fired, but
  // before the effects on this fiber have fired.
  var flags = finishedWork.flags;

  if (flags & Placement) {
    try {
      commitPlacement(finishedWork);
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    } // Clear the "placement" from effect tag so that we know that this is
    // inserted, before any life-cycles like componentDidMount gets called.
    // TODO: findDOMNode doesn't rely on this any more but isMounted does
    // and isMounted is deprecated anyway so we should be able to kill this.


    finishedWork.flags &= ~Placement;
  }

  if (flags & Hydrating) {
    finishedWork.flags &= ~Hydrating;
  }
}

function commitLayoutEffects(finishedWork, root, committedLanes) {
  inProgressLanes = committedLanes;
  inProgressRoot = root;
  nextEffect = finishedWork;
  commitLayoutEffects_begin(finishedWork, root, committedLanes);
  inProgressLanes = null;
  inProgressRoot = null;
}

function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
  // Suspense layout effects semantics don't change for legacy roots.
  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;

  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if ( fiber.tag === OffscreenComponent && isModernRoot) {
      // Keep track of the current Offscreen stack's state.
      var isHidden = fiber.memoizedState !== null;
      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;

      if (newOffscreenSubtreeIsHidden) {
        // The Offscreen tree is hidden. Skip over its layout effects.
        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        continue;
      } else {
        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
        var current = fiber.alternate;
        var wasHidden = current !== null && current.memoizedState !== null;
        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.

        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;

        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
          // This is the root of a reappearing boundary. Turn its layout effects
          // back on.
          nextEffect = fiber;
          reappearLayoutEffects_begin(fiber);
        }

        var child = firstChild;

        while (child !== null) {
          nextEffect = child;
          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
          root, committedLanes);
          child = child.sibling;
        } // Restore Offscreen state and resume in our-progress traversal.


        nextEffect = fiber;
        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        continue;
      }
    }

    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
    }
  }
}

function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & LayoutMask) !== NoFlags) {
      var current = fiber.alternate;
      setCurrentFiber(fiber);

      try {
        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
      } catch (error) {
        captureCommitPhaseError(fiber, fiber.return, error);
      }

      resetCurrentFiber();
    }

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function disappearLayoutEffects_begin(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)

    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ( fiber.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              commitHookEffectListUnmount(Layout, fiber, fiber.return);
            } finally {
              recordLayoutEffectDuration(fiber);
            }
          } else {
            commitHookEffectListUnmount(Layout, fiber, fiber.return);
          }

          break;
        }

      case ClassComponent:
        {
          // TODO (Offscreen) Check: flags & RefStatic
          safelyDetachRef(fiber, fiber.return);
          var instance = fiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
          }

          break;
        }

      case HostComponent:
        {
          safelyDetachRef(fiber, fiber.return);
          break;
        }

      case OffscreenComponent:
        {
          // Check if this is a
          var isHidden = fiber.memoizedState !== null;

          if (isHidden) {
            // Nested Offscreen tree is already hidden. Don't disappear
            // its effects.
            disappearLayoutEffects_complete(subtreeRoot);
            continue;
          }

          break;
        }
    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


    if (firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      disappearLayoutEffects_complete(subtreeRoot);
    }
  }
}

function disappearLayoutEffects_complete(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function reappearLayoutEffects_begin(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if (fiber.tag === OffscreenComponent) {
      var isHidden = fiber.memoizedState !== null;

      if (isHidden) {
        // Nested Offscreen tree is still hidden. Don't re-appear its effects.
        reappearLayoutEffects_complete(subtreeRoot);
        continue;
      }
    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


    if (firstChild !== null) {
      // This node may have been reused from a previous render, so we can't
      // assume its return pointer is correct.
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      reappearLayoutEffects_complete(subtreeRoot);
    }
  }
}

function reappearLayoutEffects_complete(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic

    setCurrentFiber(fiber);

    try {
      reappearLayoutEffectsOnFiber(fiber);
    } catch (error) {
      captureCommitPhaseError(fiber, fiber.return, error);
    }

    resetCurrentFiber();

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      // This node may have been reused from a previous render, so we can't
      // assume its return pointer is correct.
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
  nextEffect = finishedWork;
  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
}

function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
    }
  }
}

function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & Passive) !== NoFlags) {
      setCurrentFiber(fiber);

      try {
        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
      } catch (error) {
        captureCommitPhaseError(fiber, fiber.return, error);
      }

      resetCurrentFiber();
    }

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( finishedWork.mode & ProfileMode) {
          startPassiveEffectTimer();

          try {
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          } finally {
            recordPassiveEffectDuration(finishedWork);
          }
        } else {
          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
        }

        break;
      }
  }
}

function commitPassiveUnmountEffects(firstChild) {
  nextEffect = firstChild;
  commitPassiveUnmountEffects_begin();
}

function commitPassiveUnmountEffects_begin() {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var child = fiber.child;

    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
      var deletions = fiber.deletions;

      if (deletions !== null) {
        for (var i = 0; i < deletions.length; i++) {
          var fiberToDelete = deletions[i];
          nextEffect = fiberToDelete;
          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
        }

        {
          // A fiber was deleted from this parent fiber, but it's still part of
          // the previous (alternate) parent fiber's list of children. Because
          // children are a linked list, an earlier sibling that's still alive
          // will be connected to the deleted fiber via its `alternate`:
          //
          //   live fiber
          //   --alternate--> previous live fiber
          //   --sibling--> deleted fiber
          //
          // We can't disconnect `alternate` on nodes that haven't been deleted
          // yet, but we can disconnect the `sibling` and `child` pointers.
          var previousFiber = fiber.alternate;

          if (previousFiber !== null) {
            var detachedChild = previousFiber.child;

            if (detachedChild !== null) {
              previousFiber.child = null;

              do {
                var detachedSibling = detachedChild.sibling;
                detachedChild.sibling = null;
                detachedChild = detachedSibling;
              } while (detachedChild !== null);
            }
          }
        }

        nextEffect = fiber;
      }
    }

    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitPassiveUnmountEffects_complete();
    }
  }
}

function commitPassiveUnmountEffects_complete() {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & Passive) !== NoFlags) {
      setCurrentFiber(fiber);
      commitPassiveUnmountOnFiber(fiber);
      resetCurrentFiber();
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveUnmountOnFiber(finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( finishedWork.mode & ProfileMode) {
          startPassiveEffectTimer();
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
          recordPassiveEffectDuration(finishedWork);
        } else {
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
        }

        break;
      }
  }
}

function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
  while (nextEffect !== null) {
    var fiber = nextEffect; // Deletion effects fire in parent -> child order
    // TODO: Check if fiber has a PassiveStatic flag

    setCurrentFiber(fiber);
    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
    resetCurrentFiber();
    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)

    if (child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
    }
  }
}

function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var sibling = fiber.sibling;
    var returnFiber = fiber.return;

    {
      // Recursively traverse the entire deleted tree and clean up fiber fields.
      // This is more aggressive than ideal, and the long term goal is to only
      // have to detach the deleted tree at the root.
      detachFiberAfterEffects(fiber);

      if (fiber === deletedSubtreeRoot) {
        nextEffect = null;
        return;
      }
    }

    if (sibling !== null) {
      sibling.return = returnFiber;
      nextEffect = sibling;
      return;
    }

    nextEffect = returnFiber;
  }
}

function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( current.mode & ProfileMode) {
          startPassiveEffectTimer();
          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
          recordPassiveEffectDuration(current);
        } else {
          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
        }

        break;
      }
  }
} // TODO: Reuse reappearLayoutEffects traversal here?


function invokeLayoutEffectMountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListMount(Layout | HasEffect, fiber);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }

      case ClassComponent:
        {
          var instance = fiber.stateNode;

          try {
            instance.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }
    }
  }
}

function invokePassiveEffectMountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }
    }
  }
}

function invokeLayoutEffectUnmountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }

      case ClassComponent:
        {
          var instance = fiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
          }

          break;
        }
    }
  }
}

function invokePassiveEffectUnmountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }
        }
    }
  }
}

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  symbolFor('selector.component');
  symbolFor('selector.has_pseudo_class');
  symbolFor('selector.role');
  symbolFor('selector.test_id');
  symbolFor('selector.text');
}
var commitHooks = [];
function onCommitRoot$1() {
  {
    commitHooks.forEach(function (commitHook) {
      return commitHook();
    });
  }
}

var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
function isLegacyActEnvironment(fiber) {
  {
    // Legacy mode. We preserve the behavior of React 17's act. It assumes an
    // act environment whenever `jest` is defined, but you can still turn off
    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
    // to false.
    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest

    var jestIsDefined = typeof jest !== 'undefined';
    return  jestIsDefined && isReactActEnvironmentGlobal !== false;
  }
}
function isConcurrentActEnvironment() {
  {
    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;

    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
      // TODO: Include link to relevant documentation page.
      error('The current testing environment is not configured to support ' + 'act(...)');
    }

    return isReactActEnvironmentGlobal;
  }
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,
    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
var NoContext =
/*             */
0;
var BatchedContext =
/*               */
1;
var RenderContext =
/*                */
2;
var CommitContext =
/*                */
4;
var RootInProgress = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
var RootDidNotComplete = 6; // Describes where we are in the React execution stack

var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The lanes we're rendering

var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
// This is a superset of the lanes we started working on at the root. The only
// case where it's different from `workInProgressRootRenderLanes` is when we
// enter a subtree that is hidden and needs to be unhidden: Suspense and
// Offscreen component.
//
// Most things in the work loop should deal with workInProgressRootRenderLanes.
// Most things in begin/complete phases should deal with subtreeRenderLanes.

var subtreeRenderLanes = NoLanes;
var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).

var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.

var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
// We will log them once the tree commits.

var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
// more and prefer CPU suspense heuristics instead.

var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
// suspense heuristics and opt out of rendering more content.

var RENDER_TIMEOUT_MS = 500;
var workInProgressTransitions = null;

function resetRenderTimer() {
  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
}

function getRenderTargetTime() {
  return workInProgressRootRenderTargetTime;
}
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsLanes = NoLanes;
var pendingPassiveProfilerEffects = [];
var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var isFlushingPassiveEffects = false;
var didScheduleUpdateDuringPassiveEffects = false;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
// event times as simultaneous, even if the actual clock time has advanced
// between the first and second call.

var currentEventTime = NoTimestamp;
var currentEventTransitionLane = NoLanes;
var isRunningInsertionEffect = false;
function getWorkInProgressRoot() {
  return workInProgressRoot;
}
function requestEventTime() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return now();
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoTimestamp) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = now();
  return currentEventTime;
}
function requestUpdateLane(fiber) {
  // Special cases
  var mode = fiber.mode;

  if ((mode & ConcurrentMode) === NoMode) {
    return SyncLane;
  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
    // This is a render phase update. These are not officially supported. The
    // old behavior is to give this the same "thread" (lanes) as
    // whatever is currently rendering. So if you call `setState` on a component
    // that happens later in the same render, it will flush. Ideally, we want to
    // remove the special case and treat them as if they came from an
    // interleaved event. Regardless, this pattern is not officially supported.
    // This behavior is only a fallback. The flag only exists until we can roll
    // out the setState warning, since existing code might accidentally rely on
    // the current behavior.
    return pickArbitraryLane(workInProgressRootRenderLanes);
  }

  var isTransition = requestCurrentTransition() !== NoTransition;

  if (isTransition) {
    if ( ReactCurrentBatchConfig$3.transition !== null) {
      var transition = ReactCurrentBatchConfig$3.transition;

      if (!transition._updatedFibers) {
        transition._updatedFibers = new Set();
      }

      transition._updatedFibers.add(fiber);
    } // The algorithm for assigning an update to a lane should be stable for all
    // updates at the same priority within the same event. To do this, the
    // inputs to the algorithm must be the same.
    //
    // The trick we use is to cache the first of each of these inputs within an
    // event. Then reset the cached values once we can be sure the event is
    // over. Our heuristic for that is whenever we enter a concurrent work loop.


    if (currentEventTransitionLane === NoLane) {
      // All transitions within the same event are assigned the same lane.
      currentEventTransitionLane = claimNextTransitionLane();
    }

    return currentEventTransitionLane;
  } // Updates originating inside certain React methods, like flushSync, have
  // their priority set by tracking it with a context variable.
  //
  // The opaque type returned by the host config is internally a lane, so we can
  // use that directly.
  // TODO: Move this type conversion to the event priority module.


  var updateLane = getCurrentUpdatePriority();

  if (updateLane !== NoLane) {
    return updateLane;
  } // This update originated outside React. Ask the host environment for an
  // appropriate priority, based on the type of event.
  //
  // The opaque type returned by the host config is internally a lane, so we can
  // use that directly.
  // TODO: Move this type conversion to the event priority module.


  var eventLane = getCurrentEventPriority();
  return eventLane;
}

function requestRetryLane(fiber) {
  // This is a fork of `requestUpdateLane` designed specifically for Suspense
  // "retries" — a special update that attempts to flip a Suspense boundary
  // from its placeholder state to its primary/resolved state.
  // Special cases
  var mode = fiber.mode;

  if ((mode & ConcurrentMode) === NoMode) {
    return SyncLane;
  }

  return claimNextRetryLane();
}

function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
  checkForNestedUpdates();

  {
    if (isRunningInsertionEffect) {
      error('useInsertionEffect must not schedule updates.');
    }
  }

  {
    if (isFlushingPassiveEffects) {
      didScheduleUpdateDuringPassiveEffects = true;
    }
  } // Mark that the root has a pending update.


  markRootUpdated(root, lane, eventTime);

  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
    // This update was dispatched during the render phase. This is a mistake
    // if the update originates from user space (with the exception of local
    // hook updates, which are handled differently and don't reach this
    // function), but there are some internal React features that use this as
    // an implementation detail, like selective hydration.
    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
  } else {
    // This is a normal update, scheduled from outside the render phase. For
    // example, during an input event.
    {
      if (isDevToolsPresent) {
        addFiberToLanesMap(root, fiber, lane);
      }
    }

    warnIfUpdatesNotWrappedWithActDEV(fiber);

    if (root === workInProgressRoot) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that there was an interleaved update work on this root. Unless the
      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
      // phase update. In that case, we don't treat render phase updates as if
      // they were interleaved, for backwards compat reasons.
      if ( (executionContext & RenderContext) === NoContext) {
        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
      }

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: Make sure this doesn't override pings that happen while we've
        // already started rendering.
        markRootSuspended$1(root, workInProgressRootRenderLanes);
      }
    }

    ensureRootIsScheduled(root, eventTime);

    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
      // Flush the synchronous work now, unless we're already working or inside
      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
      // scheduleCallbackForFiber to preserve the ability to schedule a callback
      // without immediately flushing it. We only do this for user-initiated
      // updates, to preserve historical behavior of legacy mode.
      resetRenderTimer();
      flushSyncCallbacksOnlyInLegacyMode();
    }
  }
}
function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
  // This is a special fork of scheduleUpdateOnFiber that is only used to
  // schedule the initial hydration of a root that has just been created. Most
  // of the stuff in scheduleUpdateOnFiber can be skipped.
  //
  // The main reason for this separate path, though, is to distinguish the
  // initial children from subsequent updates. In fully client-rendered roots
  // (createRoot instead of hydrateRoot), all top-level renders are modeled as
  // updates, but hydration roots are special because the initial render must
  // match what was rendered on the server.
  var current = root.current;
  current.lanes = lane;
  markRootUpdated(root, lane, eventTime);
  ensureRootIsScheduled(root, eventTime);
}
function isUnsafeClassRenderPhaseUpdate(fiber) {
  // Check if this is a render phase update. Only called by class components,
  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
    // decided not to enable it.
     (executionContext & RenderContext) !== NoContext
  );
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the priority
// of the existing task is the same as the priority of the next level that the
// root has work on. This function is called on every update, and right before
// exiting a task.

function ensureRootIsScheduled(root, currentTime) {
  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
  // expired so we know to work on those next.

  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

  if (nextLanes === NoLanes) {
    // Special case: There's nothing to work on.
    if (existingCallbackNode !== null) {
      cancelCallback$1(existingCallbackNode);
    }

    root.callbackNode = null;
    root.callbackPriority = NoLane;
    return;
  } // We use the highest priority lane to represent the priority of the callback.


  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.

  var existingCallbackPriority = root.callbackPriority;

  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
  // Scheduler task, rather than an `act` task, cancel it and re-scheduled
  // on the `act` queue.
  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
    {
      // If we're going to re-use an existing task, it needs to exist.
      // Assume that discrete update microtasks are non-cancellable and null.
      // TODO: Temporary until we confirm this warning is not fired.
      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
      }
    } // The priority hasn't changed. We can reuse the existing task. Exit.


    return;
  }

  if (existingCallbackNode != null) {
    // Cancel the existing callback. We'll schedule a new one below.
    cancelCallback$1(existingCallbackNode);
  } // Schedule a new callback.


  var newCallbackNode;

  if (newCallbackPriority === SyncLane) {
    // Special case: Sync React callbacks are scheduled on a special
    // internal queue
    if (root.tag === LegacyRoot) {
      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {
        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
      }

      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
    } else {
      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    }

    {
      // Flush the queue in a microtask.
      if ( ReactCurrentActQueue$1.current !== null) {
        // Inside `act`, use our internal `act` queue so that these get flushed
        // at the end of the current scope even when using the sync version
        // of `act`.
        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
      } else {
        scheduleMicrotask(function () {
          // In Safari, appending an iframe forces microtasks to run.
          // https://github.com/facebook/react/issues/22459
          // We don't support running callbacks in the middle of render
          // or commit so we need to check against that.
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            // Note that this would still prematurely flush the callbacks
            // if this happens outside render or commit phase (e.g. in an event).
            flushSyncCallbacks();
          }
        });
      }
    }

    newCallbackNode = null;
  } else {
    var schedulerPriorityLevel;

    switch (lanesToEventPriority(nextLanes)) {
      case DiscreteEventPriority:
        schedulerPriorityLevel = ImmediatePriority;
        break;

      case ContinuousEventPriority:
        schedulerPriorityLevel = UserBlockingPriority;
        break;

      case DefaultEventPriority:
        schedulerPriorityLevel = NormalPriority;
        break;

      case IdleEventPriority:
        schedulerPriorityLevel = IdlePriority;
        break;

      default:
        schedulerPriorityLevel = NormalPriority;
        break;
    }

    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
  }

  root.callbackPriority = newCallbackPriority;
  root.callbackNode = newCallbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  {
    resetNestedUpdateFlag();
  } // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.


  currentEventTime = NoTimestamp;
  currentEventTransitionLane = NoLanes;

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  } // Flush any pending passive effects before deciding which lanes to work on,
  // in case they schedule additional work.


  var originalCallbackNode = root.callbackNode;
  var didFlushPassiveEffects = flushPassiveEffects();

  if (didFlushPassiveEffects) {
    // Something in the passive effect phase may have canceled the current task.
    // Check if the task node for this root was changed.
    if (root.callbackNode !== originalCallbackNode) {
      // The current task was canceled. Exit. We don't need to call
      // `ensureRootIsScheduled` because the check above implies either that
      // there's a new task, or that there's no remaining work on this root.
      return null;
    }
  } // Determine the next lanes to work on, using the fields stored
  // on the root.


  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

  if (lanes === NoLanes) {
    // Defensive coding. This is never expected to happen.
    return null;
  } // We disable time-slicing in some cases: if the work has been CPU-bound
  // for too long ("expired" work, to prevent starvation), or we're in
  // sync-updates-by-default mode.
  // TODO: We only check `didTimeout` defensively, to account for a Scheduler
  // bug we're still investigating. Once the bug in Scheduler is fixed,
  // we can remove this, since we track expiration ourselves.


  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);
  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);

  if (exitStatus !== RootInProgress) {
    if (exitStatus === RootErrored) {
      // If something threw an error, try rendering one more time. We'll
      // render synchronously to block concurrent data mutations, and we'll
      // includes all pending updates are included. If it still fails after
      // the second attempt, we'll give up and commit the resulting tree.
      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

      if (errorRetryLanes !== NoLanes) {
        lanes = errorRetryLanes;
        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
      }
    }

    if (exitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      prepareFreshStack(root, NoLanes);
      markRootSuspended$1(root, lanes);
      ensureRootIsScheduled(root, now());
      throw fatalError;
    }

    if (exitStatus === RootDidNotComplete) {
      // The render unwound without completing the tree. This happens in special
      // cases where need to exit the current render without producing a
      // consistent tree or committing.
      //
      // This should only happen during a concurrent render, not a discrete or
      // synchronous update. We should have already checked for this when we
      // unwound the stack.
      markRootSuspended$1(root, lanes);
    } else {
      // The render completed.
      // Check if this render may have yielded to a concurrent event, and if so,
      // confirm that any newly rendered stores are consistent.
      // TODO: It's possible that even a concurrent render may never have yielded
      // to the main thread, if it was fast enough, or if it expired. We could
      // skip the consistency check in that case, too.
      var renderWasConcurrent = !includesBlockingLane(root, lanes);
      var finishedWork = root.current.alternate;

      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
        // A store was mutated in an interleaved event. Render again,
        // synchronously, to block further mutations.
        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw

        if (exitStatus === RootErrored) {
          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

          if (_errorRetryLanes !== NoLanes) {
            lanes = _errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
            // concurrent events.
          }
        }

        if (exitStatus === RootFatalErrored) {
          var _fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, NoLanes);
          markRootSuspended$1(root, lanes);
          ensureRootIsScheduled(root, now());
          throw _fatalError;
        }
      } // We now have a consistent tree. The next step is either to commit it,
      // or, if something suspended, wait to commit it after a timeout.


      root.finishedWork = finishedWork;
      root.finishedLanes = lanes;
      finishConcurrentRender(root, exitStatus, lanes);
    }
  }

  ensureRootIsScheduled(root, now());

  if (root.callbackNode === originalCallbackNode) {
    // The task node scheduled for this root is the same one that's
    // currently executed. Need to return a continuation.
    return performConcurrentWorkOnRoot.bind(null, root);
  }

  return null;
}

function recoverFromConcurrentError(root, errorRetryLanes) {
  // If an error occurred during hydration, discard server response and fall
  // back to client side render.
  // Before rendering again, save the errors from the previous attempt.
  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;

  if (isRootDehydrated(root)) {
    // The shell failed to hydrate. Set a flag to force a client rendering
    // during the next attempt. To do this, we call prepareFreshStack now
    // to create the root work-in-progress fiber. This is a bit weird in terms
    // of factoring, because it relies on renderRootSync not calling
    // prepareFreshStack again in the call below, which happens because the
    // root and lanes haven't changed.
    //
    // TODO: I think what we should do is set ForceClientRender inside
    // throwException, like we do for nested Suspense boundaries. The reason
    // it's here instead is so we can switch to the synchronous work loop, too.
    // Something to consider for a future refactor.
    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
    rootWorkInProgress.flags |= ForceClientRender;

    {
      errorHydratingContainer(root.containerInfo);
    }
  }

  var exitStatus = renderRootSync(root, errorRetryLanes);

  if (exitStatus !== RootErrored) {
    // Successfully finished rendering on retry
    // The errors from the failed first attempt have been recovered. Add
    // them to the collection of recoverable errors. We'll log them in the
    // commit phase.
    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
    // from the first attempt, to preserve the causal sequence.

    if (errorsFromSecondAttempt !== null) {
      queueRecoverableErrors(errorsFromSecondAttempt);
    }
  }

  return exitStatus;
}

function queueRecoverableErrors(errors) {
  if (workInProgressRootRecoverableErrors === null) {
    workInProgressRootRecoverableErrors = errors;
  } else {
    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
}

function finishConcurrentRender(root, exitStatus, lanes) {
  switch (exitStatus) {
    case RootInProgress:
    case RootFatalErrored:
      {
        throw new Error('Root did not complete. This is a bug in React.');
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // We should have already attempted to retry this tree. If we reached
        // this point, it errored again. Commit it.
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootSuspended:
      {
        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.

        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
        !shouldForceFlushFallbacksInDEV()) {
          // This render only included retries, no updates. Throttle committing
          // retries so that we don't show too many loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            var nextLanes = getNextLanes(root, NoLanes);

            if (nextLanes !== NoLanes) {
              // There's additional work on this root.
              break;
            }

            var suspendedLanes = root.suspendedLanes;

            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              // FIXME: What if the suspended lanes are Idle? Should not restart.
              requestEventTime();
              markRootPinged(root, suspendedLanes);
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspended$1(root, lanes);

        if (includesOnlyTransitions(lanes)) {
          // This is a transition, so we should exit without committing a
          // placeholder and without scheduling a timeout. Delay indefinitely
          // until we receive more data.
          break;
        }

        if (!shouldForceFlushFallbacksInDEV()) {
          // This is not a transition, but we did trigger an avoided state.
          // Schedule a placeholder to display after a short delay, using the Just
          // Noticeable Difference.
          // TODO: Is the JND optimization worth the added complexity? If this is
          // the only reason we track the event time, then probably not.
          // Consider removing.
          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
          var eventTimeMs = mostRecentEventTime;
          var timeElapsedMs = now() - eventTimeMs;

          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // Instead of committing the fallback immediately, wait for more data
            // to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
            break;
          }
        } // Commit the placeholder.


        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    default:
      {
        throw new Error('Unknown root exit status.');
      }
  }
}

function isRenderConsistentWithExternalStores(finishedWork) {
  // Search the rendered tree for external store reads, and check whether the
  // stores were mutated in a concurrent event. Intentionally using an iterative
  // loop instead of recursion so we can exit early.
  var node = finishedWork;

  while (true) {
    if (node.flags & StoreConsistency) {
      var updateQueue = node.updateQueue;

      if (updateQueue !== null) {
        var checks = updateQueue.stores;

        if (checks !== null) {
          for (var i = 0; i < checks.length; i++) {
            var check = checks[i];
            var getSnapshot = check.getSnapshot;
            var renderedValue = check.value;

            try {
              if (!objectIs(getSnapshot(), renderedValue)) {
                // Found an inconsistent store.
                return false;
              }
            } catch (error) {
              // If `getSnapshot` throws, return `false`. This will schedule
              // a re-render, and the error will be rethrown during render.
              return false;
            }
          }
        }
      }
    }

    var child = node.child;

    if (node.subtreeFlags & StoreConsistency && child !== null) {
      child.return = node;
      node = child;
      continue;
    }

    if (node === finishedWork) {
      return true;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return true;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow doesn't know this is unreachable, but eslint does
  // eslint-disable-next-line no-unreachable


  return true;
}

function markRootSuspended$1(root, suspendedLanes) {
  // When suspending, we should always exclude lanes that were pinged or (more
  // rarely, since we try to avoid it) updated during the render phase.
  // TODO: Lol maybe there's a better way to factor this besides this
  // obnoxiously named function :)
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
  markRootSuspended(root, suspendedLanes);
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  {
    syncNestedUpdateFlag();
  }

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  }

  flushPassiveEffects();
  var lanes = getNextLanes(root, NoLanes);

  if (!includesSomeLane(lanes, SyncLane)) {
    // There's no remaining sync work left.
    ensureRootIsScheduled(root, now());
    return null;
  }

  var exitStatus = renderRootSync(root, lanes);

  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
    // If something threw an error, try rendering one more time. We'll render
    // synchronously to block concurrent data mutations, and we'll includes
    // all pending updates are included. If it still fails after the second
    // attempt, we'll give up and commit the resulting tree.
    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

    if (errorRetryLanes !== NoLanes) {
      lanes = errorRetryLanes;
      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
    }
  }

  if (exitStatus === RootFatalErrored) {
    var fatalError = workInProgressRootFatalError;
    prepareFreshStack(root, NoLanes);
    markRootSuspended$1(root, lanes);
    ensureRootIsScheduled(root, now());
    throw fatalError;
  }

  if (exitStatus === RootDidNotComplete) {
    throw new Error('Root did not complete. This is a bug in React.');
  } // We now have a consistent tree. Because this is a sync render, we
  // will commit it even if something suspended.


  var finishedWork = root.current.alternate;
  root.finishedWork = finishedWork;
  root.finishedLanes = lanes;
  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
  // pending level.

  ensureRootIsScheduled(root, now());
  return null;
}

function flushRoot(root, lanes) {
  if (lanes !== NoLanes) {
    markRootEntangled(root, mergeLanes(lanes, SyncLane));
    ensureRootIsScheduled(root, now());

    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
      resetRenderTimer();
      flushSyncCallbacks();
    }
  }
}
function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
    // most batchedUpdates-like method.

    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
      resetRenderTimer();
      flushSyncCallbacksOnlyInLegacyMode();
    }
  }
}
function discreteUpdates(fn, a, b, c, d) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig$3.transition;

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);
    return fn(a, b, c, d);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;

    if (executionContext === NoContext) {
      resetRenderTimer();
    }
  }
} // Overload the definition to the two valid signatures.
// Warning, this opts-out of checking the function body.

// eslint-disable-next-line no-redeclare
function flushSync(fn) {
  // In legacy mode, we flush pending passive effects at the beginning of the
  // next event, not at the end of the previous one.
  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
    flushPassiveEffects();
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;
  var prevTransition = ReactCurrentBatchConfig$3.transition;
  var previousPriority = getCurrentUpdatePriority();

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);

    if (fn) {
      return fn();
    } else {
      return undefined;
    }
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
      flushSyncCallbacks();
    }
  }
}
function isAlreadyRendering() {
  // Used by the renderer to print a warning if certain APIs are called from
  // the wrong context.
  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;
}
function pushRenderLanes(fiber, lanes) {
  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
}
function popRenderLanes(fiber) {
  subtreeRenderLanes = subtreeRenderLanesCursor.current;
  pop(subtreeRenderLanesCursor, fiber);
}

function prepareFreshStack(root, lanes) {
  root.finishedWork = null;
  root.finishedLanes = NoLanes;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      var current = interruptedWork.alternate;
      unwindInterruptedWork(current, interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  var rootWorkInProgress = createWorkInProgress(root.current, null);
  workInProgress = rootWorkInProgress;
  workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
  workInProgressRootExitStatus = RootInProgress;
  workInProgressRootFatalError = null;
  workInProgressRootSkippedLanes = NoLanes;
  workInProgressRootInterleavedUpdatedLanes = NoLanes;
  workInProgressRootPingedLanes = NoLanes;
  workInProgressRootConcurrentErrors = null;
  workInProgressRootRecoverableErrors = null;
  finishQueueingConcurrentUpdates();

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }

  return rootWorkInProgress;
}

function handleError(root, thrownValue) {
  do {
    var erroredWork = workInProgress;

    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
      // separate issue. Write a regression test using string refs.

      ReactCurrentOwner$2.current = null;

      if (erroredWork === null || erroredWork.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // intentionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return;
      }

      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
      }

      if (enableSchedulingProfiler) {
        markComponentRenderStopped();

        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
          var wakeable = thrownValue;
          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
        } else {
          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
        }
      }

      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
      completeUnitOfWork(erroredWork);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;

      if (workInProgress === erroredWork && erroredWork !== null) {
        // If this boundary has already errored, then we had trouble processing
        // the error. Bubble it to the next boundary.
        erroredWork = erroredWork.return;
        workInProgress = erroredWork;
      } else {
        erroredWork = workInProgress;
      }

      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher() {
  var prevDispatcher = ReactCurrentDispatcher$2.current;
  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$2.current = prevDispatcher;
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markSkippedUpdateLanes(lane) {
  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootInProgress) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there are updates that we skipped tree that might have unblocked
  // this render.


  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
    // Mark the current render as suspended so that we switch to working on
    // the updates that were skipped. Usually we only suspend at the end of
    // the render phase.
    // TODO: We should probably always mark the root as suspended immediately
    // (inside this function), since by suspending at the end of the render
    // phase introduces a potential mistake where we suspend lanes that were
    // pinged or updated while we were rendering.
    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
}
function renderDidError(error) {
  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
    workInProgressRootExitStatus = RootErrored;
  }

  if (workInProgressRootConcurrentErrors === null) {
    workInProgressRootConcurrentErrors = [error];
  } else {
    workInProgressRootConcurrentErrors.push(error);
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootInProgress;
}

function renderRootSync(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    {
      if (isDevToolsPresent) {
        var memoizedUpdaters = root.memoizedUpdaters;

        if (memoizedUpdaters.size > 0) {
          restorePendingUpdaters(root, workInProgressRootRenderLanes);
          memoizedUpdaters.clear();
        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
        // If we bailout on this work, we'll move them back (like above).
        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
        // That way we can keep the current update and future updates separate.


        movePendingFibersToMemoized(root, lanes);
      }
    }

    workInProgressTransitions = getTransitionsForLanes();
    prepareFreshStack(root, lanes);
  }

  {
    markRenderStarted(lanes);
  }

  do {
    try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();
  executionContext = prevExecutionContext;
  popDispatcher(prevDispatcher);

  if (workInProgress !== null) {
    // This is a sync render, so we should have finished the whole tree.
    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');
  }

  {
    markRenderStopped();
  } // Set this to null to indicate there's no in-progress render.


  workInProgressRoot = null;
  workInProgressRootRenderLanes = NoLanes;
  return workInProgressRootExitStatus;
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    performUnitOfWork(workInProgress);
  }
}

function renderRootConcurrent(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    {
      if (isDevToolsPresent) {
        var memoizedUpdaters = root.memoizedUpdaters;

        if (memoizedUpdaters.size > 0) {
          restorePendingUpdaters(root, workInProgressRootRenderLanes);
          memoizedUpdaters.clear();
        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
        // If we bailout on this work, we'll move them back (like above).
        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
        // That way we can keep the current update and future updates separate.


        movePendingFibersToMemoized(root, lanes);
      }
    }

    workInProgressTransitions = getTransitionsForLanes();
    resetRenderTimer();
    prepareFreshStack(root, lanes);
  }

  {
    markRenderStarted(lanes);
  }

  do {
    try {
      workLoopConcurrent();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();
  popDispatcher(prevDispatcher);
  executionContext = prevExecutionContext;


  if (workInProgress !== null) {
    // Still work remaining.
    {
      markRenderYielded();
    }

    return RootInProgress;
  } else {
    // Completed the tree.
    {
      markRenderStopped();
    } // Set this to null to indicate there's no in-progress render.


    workInProgressRoot = null;
    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

    return workInProgressRootExitStatus;
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    completeUnitOfWork(unitOfWork);
  } else {
    workInProgress = next;
  }

  ReactCurrentOwner$2.current = null;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  var completedWork = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = completedWork.alternate;
    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

    if ((completedWork.flags & Incomplete) === NoFlags) {
      setCurrentFiber(completedWork);
      var next = void 0;

      if ( (completedWork.mode & ProfileMode) === NoMode) {
        next = completeWork(current, completedWork, subtreeRenderLanes);
      } else {
        startProfilerTimer(completedWork);
        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
      }

      resetCurrentFiber();

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        workInProgress = next;
        return;
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.


      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        _next.flags &= HostEffectMask;
        workInProgress = _next;
        return;
      }

      if ( (completedWork.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

        var actualDuration = completedWork.actualDuration;
        var child = completedWork.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        completedWork.actualDuration = actualDuration;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its subtree flags.
        returnFiber.flags |= Incomplete;
        returnFiber.subtreeFlags = NoFlags;
        returnFiber.deletions = null;
      } else {
        // We've unwound all the way to the root.
        workInProgressRootExitStatus = RootDidNotComplete;
        workInProgress = null;
        return;
      }
    }

    var siblingFiber = completedWork.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      workInProgress = siblingFiber;
      return;
    } // Otherwise, return to the parent


    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

    workInProgress = completedWork;
  } while (completedWork !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootInProgress) {
    workInProgressRootExitStatus = RootCompleted;
  }
}

function commitRoot(root, recoverableErrors, transitions) {
  // TODO: This no longer makes any sense. We already wrap the mutation and
  // layout phases. Should be able to remove.
  var previousUpdateLanePriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig$3.transition;

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);
    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
  } finally {
    ReactCurrentBatchConfig$3.transition = prevTransition;
    setCurrentUpdatePriority(previousUpdateLanePriority);
  }

  return null;
}

function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  }

  var finishedWork = root.finishedWork;
  var lanes = root.finishedLanes;

  {
    markCommitStarted(lanes);
  }

  if (finishedWork === null) {

    {
      markCommitStopped();
    }

    return null;
  } else {
    {
      if (lanes === NoLanes) {
        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');
      }
    }
  }

  root.finishedWork = null;
  root.finishedLanes = NoLanes;

  if (finishedWork === root.current) {
    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
  markRootFinished(root, remainingLanes);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    workInProgressRootRenderLanes = NoLanes;
  } // If there are pending passive effects, schedule a callback to process them.
  // Do this as early as possible, so it is queued before anything else that
  // might get scheduled in the commit phase. (See #16714.)
  // TODO: Delete all other places that schedule the passive effect callback
  // They're redundant.


  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
    if (!rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = true;
      // to store it in pendingPassiveTransitions until they get processed
      // We need to pass this through as an argument to commitRoot
      // because workInProgressTransitions might have changed between
      // the previous render and commit if we throttle the commit
      // with setTimeout

      pendingPassiveTransitions = transitions;
      scheduleCallback$1(NormalPriority, function () {
        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
        // *after* passive effects fire to avoid freeing a cache pool that may
        // be referenced by a node in the tree (HostRoot, Cache boundary etc)

        return null;
      });
    }
  } // Check if there are any effects in the whole tree.
  // TODO: This is left over from the effect list implementation, where we had
  // to check for the existence of `firstEffect` to satisfy Flow. I think the
  // only other reason this optimization exists is because it affects profiling.
  // Reconsider whether this is necessary.


  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;

  if (subtreeHasEffects || rootHasEffect) {
    var prevTransition = ReactCurrentBatchConfig$3.transition;
    ReactCurrentBatchConfig$3.transition = null;
    var previousPriority = getCurrentUpdatePriority();
    setCurrentUpdatePriority(DiscreteEventPriority);
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext; // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    commitBeforeMutationEffects(root, finishedWork);

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    }


    commitMutationEffects(root, finishedWork, lanes);

    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read

    {
      markLayoutEffectsStarted(lanes);
    }

    commitLayoutEffects(finishedWork, root, lanes);

    {
      markLayoutEffectsStopped();
    }
    // opportunity to paint.


    requestPaint();
    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.

    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    {
      recordCommitTime();
    }
  }

  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsLanes = lanes;
  } else {

    {
      nestedPassiveUpdateCount = 0;
      rootWithPassiveNestedUpdates = null;
    }
  } // Read this again, since an effect might have updated it


  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
  // TODO: This is part of the `componentDidCatch` implementation. Its purpose
  // is to detect whether something might have called setState inside
  // `componentDidCatch`. The mechanism is known to be flawed because `setState`
  // inside `componentDidCatch` is itself flawed — that's why we recommend
  // `getDerivedStateFromError` instead. However, it could be improved by
  // checking if remainingLanes includes Sync work, instead of whether there's
  // any work remaining at all (which would also include stuff like Suspense
  // retries or transitions). It's been like this for a while, though, so fixing
  // it probably isn't that urgent.

  if (remainingLanes === NoLanes) {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      commitDoubleInvokeEffectsInDEV(root.current, false);
    }
  }

  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

  {
    if (isDevToolsPresent) {
      root.memoizedUpdaters.clear();
    }
  }

  {
    onCommitRoot$1();
  } // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.


  ensureRootIsScheduled(root, now());

  if (recoverableErrors !== null) {
    // There were errors during this render, but recovered from them without
    // needing to surface it to the UI. We log them here.
    var onRecoverableError = root.onRecoverableError;

    for (var i = 0; i < recoverableErrors.length; i++) {
      var recoverableError = recoverableErrors[i];
      var componentStack = recoverableError.stack;
      var digest = recoverableError.digest;
      onRecoverableError(recoverableError.value, {
        componentStack: componentStack,
        digest: digest
      });
    }
  }

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var error$1 = firstUncaughtError;
    firstUncaughtError = null;
    throw error$1;
  } // If the passive effects are the result of a discrete render, flush them
  // synchronously at the end of the current task so that the result is
  // immediately observable. Otherwise, we assume that they are not
  // order-dependent and do not need to be observed by external systems, so we
  // can wait until after paint.
  // TODO: We can optimize this by not scheduling the callback earlier. Since we
  // currently schedule the callback in multiple places, will wait until those
  // are consolidated.


  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
    flushPassiveEffects();
  } // Read this again, since a passive effect might have updated it


  remainingLanes = root.pendingLanes;

  if (includesSomeLane(remainingLanes, SyncLane)) {
    {
      markNestedUpdateScheduled();
    } // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.


    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbacks();

  {
    markCommitStopped();
  }

  return null;
}

function flushPassiveEffects() {
  // Returns whether passive effects were flushed.
  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
  // probably just combine the two functions. I believe they were only separate
  // in the first place because we used to wrap it with
  // `Scheduler.runWithPriority`, which accepts a function. But now we track the
  // priority within React itself, so we can mutate the variable directly.
  if (rootWithPendingPassiveEffects !== null) {
    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
    var prevTransition = ReactCurrentBatchConfig$3.transition;
    var previousPriority = getCurrentUpdatePriority();

    try {
      ReactCurrentBatchConfig$3.transition = null;
      setCurrentUpdatePriority(priority);
      return flushPassiveEffectsImpl();
    } finally {
      setCurrentUpdatePriority(previousPriority);
      ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
    }
  }

  return false;
}
function enqueuePendingPassiveProfilerEffect(fiber) {
  {
    pendingPassiveProfilerEffects.push(fiber);

    if (!rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = true;
      scheduleCallback$1(NormalPriority, function () {
        flushPassiveEffects();
        return null;
      });
    }
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  } // Cache and clear the transitions flag


  var transitions = pendingPassiveTransitions;
  pendingPassiveTransitions = null;
  var root = rootWithPendingPassiveEffects;
  var lanes = pendingPassiveEffectsLanes;
  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
  // Figure out why and fix it. It's not causing any known issues (probably
  // because it's only used for profiling), but it's a refactor hazard.

  pendingPassiveEffectsLanes = NoLanes;

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Cannot flush passive effects while already rendering.');
  }

  {
    isFlushingPassiveEffects = true;
    didScheduleUpdateDuringPassiveEffects = false;
  }

  {
    markPassiveEffectsStarted(lanes);
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  commitPassiveUnmountEffects(root.current);
  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects

  {
    var profilerEffects = pendingPassiveProfilerEffects;
    pendingPassiveProfilerEffects = [];

    for (var i = 0; i < profilerEffects.length; i++) {
      var _fiber = profilerEffects[i];
      commitPassiveEffectDurations(root, _fiber);
    }
  }

  {
    markPassiveEffectsStopped();
  }

  {
    commitDoubleInvokeEffectsInDEV(root.current, true);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbacks();

  {
    // If additional passive effects were scheduled, increment a counter. If this
    // exceeds the limit, we'll fire a warning.
    if (didScheduleUpdateDuringPassiveEffects) {
      if (root === rootWithPassiveNestedUpdates) {
        nestedPassiveUpdateCount++;
      } else {
        nestedPassiveUpdateCount = 0;
        rootWithPassiveNestedUpdates = root;
      }
    } else {
      nestedPassiveUpdateCount = 0;
    }

    isFlushingPassiveEffects = false;
    didScheduleUpdateDuringPassiveEffects = false;
  } // TODO: Move to commitPassiveMountEffects


  onPostCommitRoot(root);

  {
    var stateNode = root.current.stateNode;
    stateNode.effectDuration = 0;
    stateNode.passiveEffectDuration = 0;
  }

  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
  var root = enqueueUpdate(rootFiber, update, SyncLane);
  var eventTime = requestEventTime();

  if (root !== null) {
    markRootUpdated(root, SyncLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
  }
}

function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
  {
    reportUncaughtErrorInDEV(error$1);
    setIsRunningInsertionEffect(false);
  }

  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
    return;
  }

  var fiber = null;

  {
    fiber = nearestMountedAncestor;
  }

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
        var root = enqueueUpdate(fiber, update, SyncLane);
        var eventTime = requestEventTime();

        if (root !== null) {
          markRootUpdated(root, SyncLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
        }

        return;
      }
    }

    fiber = fiber.return;
  }

  {
    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
    // will fire for errors that are thrown by destroy functions inside deleted
    // trees. What it should instead do is propagate the error to the parent of
    // the deleted tree. In the meantime, do not add this warning to the
    // allowlist; this is only for our internal use.
    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\n\n' + 'Error message:\n\n%s', error$1);
  }
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(wakeable);
  }

  var eventTime = requestEventTime();
  markRootPinged(root, pingedLanes);
  warnIfSuspenseResolutionNotWrappedWithActDEV(root);

  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, or if it's a retry, we'll always suspend
    // so we can always restart.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root.
      prepareFreshStack(root, NoLanes);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
    }
  }

  ensureRootIsScheduled(root, eventTime);
}

function retryTimedOutBoundary(boundaryFiber, retryLane) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new lanes.
  if (retryLane === NoLane) {
    // TODO: Assign this to `suspenseState.retryLane`? to avoid
    // unnecessary entanglement?
    retryLane = requestRetryLane(boundaryFiber);
  } // TODO: Special case idle priority?


  var eventTime = requestEventTime();
  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);

  if (root !== null) {
    markRootUpdated(root, retryLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
  }
}

function retryDehydratedSuspenseBoundary(boundaryFiber) {
  var suspenseState = boundaryFiber.memoizedState;
  var retryLane = NoLane;

  if (suspenseState !== null) {
    retryLane = suspenseState.retryLane;
  }

  retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
  var retryLane = NoLane; // Default

  var retryCache;

  switch (boundaryFiber.tag) {
    case SuspenseComponent:
      retryCache = boundaryFiber.stateNode;
      var suspenseState = boundaryFiber.memoizedState;

      if (suspenseState !== null) {
        retryLane = suspenseState.retryLane;
      }

      break;

    case SuspenseListComponent:
      retryCache = boundaryFiber.stateNode;
      break;

    default:
      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');
  }

  if (retryCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(wakeable);
  }

  retryTimedOutBoundary(boundaryFiber, retryLane);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;
    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;
      rootWithPassiveNestedUpdates = null;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
  {
    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
    // Maybe not a big deal since this is DEV only behavior.
    setCurrentFiber(fiber);
    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);

    if (hasPassiveEffects) {
      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
    }

    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);

    if (hasPassiveEffects) {
      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
    }

    resetCurrentFiber();
  }
}

function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    var current = firstChild;
    var subtreeRoot = null;

    while (current !== null) {
      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;

      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
        current = current.child;
      } else {
        if ((current.flags & fiberFlags) !== NoFlags) {
          invokeEffectFn(current);
        }

        if (current.sibling !== null) {
          current = current.sibling;
        } else {
          current = subtreeRoot = current.return;
        }
      }
    }
  }
}

var didWarnStateUpdateForNotYetMountedComponent = null;
function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
  {
    if ((executionContext & RenderContext) !== NoContext) {
      // We let the other warning about render phase updates deal with this one.
      return;
    }

    if (!(fiber.mode & ConcurrentMode)) {
      return;
    }

    var tag = fiber.tag;

    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';

    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
    }

    var previousFiber = current;

    try {
      setCurrentFiber(fiber);

      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
    } finally {
      if (previousFiber) {
        setCurrentFiber(fiber);
      } else {
        resetCurrentFiber();
      }
    }
  }
}
var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, lanes) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, lanes);
    } catch (originalError) {
      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises.
        // Don't replay errors if we are hydrating and have already suspended or handled an error
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

      if (hasCaughtError()) {
        var replayError = clearCaughtError();

        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {
          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
          originalError._suppressLogging = true;
        }
      } // We always throw the original error in case the second render pass is not idempotent.
      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.


      throw originalError;
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
}

function restorePendingUpdaters(root, lanes) {
  {
    if (isDevToolsPresent) {
      var memoizedUpdaters = root.memoizedUpdaters;
      memoizedUpdaters.forEach(function (schedulingFiber) {
        addFiberToLanesMap(root, schedulingFiber, lanes);
      }); // This function intentionally does not clear memoized updaters.
      // Those may still be relevant to the current commit
      // and a future one (e.g. Suspense).
    }
  }
}
var fakeActCallbackNode = {};

function scheduleCallback$1(priorityLevel, callback) {
  {
    // If we're currently inside an `act` scope, bypass Scheduler and push to
    // the `act` queue instead.
    var actQueue = ReactCurrentActQueue$1.current;

    if (actQueue !== null) {
      actQueue.push(callback);
      return fakeActCallbackNode;
    } else {
      return scheduleCallback(priorityLevel, callback);
    }
  }
}

function cancelCallback$1(callbackNode) {
  if ( callbackNode === fakeActCallbackNode) {
    return;
  } // In production, always call Scheduler. This function will be stripped out.


  return cancelCallback(callbackNode);
}

function shouldForceFlushFallbacksInDEV() {
  // Never force flush in production. This function should get stripped out.
  return  ReactCurrentActQueue$1.current !== null;
}

function warnIfUpdatesNotWrappedWithActDEV(fiber) {
  {
    if (fiber.mode & ConcurrentMode) {
      if (!isConcurrentActEnvironment()) {
        // Not in an act environment. No need to warn.
        return;
      }
    } else {
      // Legacy mode has additional cases where we suppress a warning.
      if (!isLegacyActEnvironment()) {
        // Not in an act environment. No need to warn.
        return;
      }

      if (executionContext !== NoContext) {
        // Legacy mode doesn't warn if the update is batched, i.e.
        // batchedUpdates or flushSync.
        return;
      }

      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
        // For backwards compatibility with pre-hooks code, legacy mode only
        // warns for updates that originate from a hook.
        return;
      }
    }

    if (ReactCurrentActQueue$1.current === null) {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}

function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
  {
    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\n\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\n\n' + 'act(() => {\n' + '  /* finish loading suspended data */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');
    }
  }
}

function setIsRunningInsertionEffect(isRunning) {
  {
    isRunningInsertionEffect = isRunning;
  }
}

/* eslint-disable react-internal/prod-error-codes */
var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    flushSync(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (_root !== null) {
        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
      }
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    /* eslint-disable no-new */

    new Map([[nonExtensibleObject, null]]);
    new Set([nonExtensibleObject]);
    /* eslint-enable no-new */
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.flags = NoFlags;
  this.subtreeFlags = NoFlags;
  this.deletions = null;
  this.lanes = NoLanes;
  this.childLanes = NoLanes;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  }

  {
    // This isn't directly used but is handy for debugging internals:
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct$1(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.flags = NoFlags; // The effects are no longer valid.

    workInProgress.subtreeFlags = NoFlags;
    workInProgress.deletions = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  } // Reset all effects except static ones.
  // Static effects are not specific to a render.


  workInProgress.flags = current.flags & StaticMask;
  workInProgress.childLanes = current.childLanes;
  workInProgress.lanes = current.lanes;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    lanes: currentDependencies.lanes,
    firstContext: currentDependencies.firstContext
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderLanes) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect flags but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.

  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childLanes = NoLanes;
    workInProgress.lanes = renderLanes;
    workInProgress.child = null;
    workInProgress.subtreeFlags = NoFlags;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;
    workInProgress.stateNode = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.subtreeFlags = NoFlags;
    workInProgress.deletions = null;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      lanes: currentDependencies.lanes,
      firstContext: currentDependencies.firstContext
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode;

    if (isStrictMode === true) {
      mode |= StrictLegacyMode;

      {
        mode |= StrictEffectsMode;
      }
    }
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, lanes) {
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct$1(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictLegacyMode;

        if ( (mode & ConcurrentMode) !== NoMode) {
          // Strict effects should never run on legacy roots
          mode |= StrictEffectsMode;
        }

        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

      case REACT_LEGACY_HIDDEN_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_SCOPE_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_CACHE_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_TRACING_MARKER_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_DEBUG_TRACING_MODE_TYPE:

      // eslint-disable-next-line no-fallthrough

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;
            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentNameFromFiber(owner) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
    }
  }

  var fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.lanes = lanes;

  {
    fiber._debugOwner = owner;
  }

  return fiber;
}
function createFiberFromElement(element, mode, lanes) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, lanes, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.lanes = lanes;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, lanes, key) {
  {
    if (typeof pendingProps.id !== 'string') {
      error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.lanes = lanes;

  {
    fiber.stateNode = {
      effectDuration: 0,
      passiveEffectDuration: 0
    };
  }

  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
  fiber.elementType = REACT_OFFSCREEN_TYPE;
  fiber.lanes = lanes;
  var primaryChildInstance = {
    isHidden: false
  };
  fiber.stateNode = primaryChildInstance;
  return fiber;
}
function createFiberFromText(content, mode, lanes) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode);
  fiber.elementType = 'DELETED';
  return fiber;
}
function createFiberFromDehydratedFragment(dehydratedNode) {
  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
  fiber.stateNode = dehydratedNode;
  return fiber;
}
function createFiberFromPortal(portal, mode, lanes) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.lanes = lanes;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.flags = source.flags;
  target.subtreeFlags = source.subtreeFlags;
  target.deletions = source.deletions;
  target.lanes = source.lanes;
  target.childLanes = source.childLanes;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
  this.tag = tag;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.current = null;
  this.pingCache = null;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.callbackNode = null;
  this.callbackPriority = NoLane;
  this.eventTimes = createLaneMap(NoLanes);
  this.expirationTimes = createLaneMap(NoTimestamp);
  this.pendingLanes = NoLanes;
  this.suspendedLanes = NoLanes;
  this.pingedLanes = NoLanes;
  this.expiredLanes = NoLanes;
  this.mutableReadLanes = NoLanes;
  this.finishedLanes = NoLanes;
  this.entangledLanes = NoLanes;
  this.entanglements = createLaneMap(NoLanes);
  this.identifierPrefix = identifierPrefix;
  this.onRecoverableError = onRecoverableError;

  {
    this.mutableSourceEagerHydrationData = null;
  }

  {
    this.effectDuration = 0;
    this.passiveEffectDuration = 0;
  }

  {
    this.memoizedUpdaters = new Set();
    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];

    for (var _i = 0; _i < TotalLanes; _i++) {
      pendingUpdatersLaneMap.push(new Set());
    }
  }

  {
    switch (tag) {
      case ConcurrentRoot:
        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
        break;

      case LegacyRoot:
        this._debugRootType = hydrate ? 'hydrate()' : 'render()';
        break;
    }
  }
}

function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the
// host config, but because they are passed in at runtime, we have to thread
// them through the root constructor. Perhaps we should put them all into a
// single type, like a DynamicHostConfig that is defined by the renderer.
identifierPrefix, onRecoverableError, transitionCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;

  {
    var _initialState = {
      element: initialChildren,
      isDehydrated: hydrate,
      cache: null,
      // not enabled yet
      transitions: null,
      pendingSuspenseBoundaries: null
    };
    uninitializedFiber.memoizedState = _initialState;
  }

  initializeUpdateQueue(uninitializedFiber);
  return root;
}

var ReactVersion = '18.2.0';

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  {
    checkKeyStringCoercion(key);
  }

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        throw new Error('Unable to find node on an unmounted component.');
      } else {
        var keys = Object.keys(component).join(',');
        throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictLegacyMode) {
      var componentName = getComponentNameFromFiber(fiber) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;
        var previousFiber = current;

        try {
          setCurrentFiber(hostFiber);

          if (fiber.mode & StrictLegacyMode) {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          } else {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          }
        } finally {
          // Ideally this should reset to previous but this shouldn't be called in
          // render and there's another warning for that anyway.
          if (previousFiber) {
            setCurrentFiber(previousFiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
  var hydrate = false;
  var initialChildren = null;
  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
}
function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.
callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
  var hydrate = true;
  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor

  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
  // a regular update because the initial render must match was was rendered
  // on the server.
  // NOTE: This update intentionally doesn't have a payload. We're only using
  // the update to schedule work on the root fiber (and, for legacy roots, to
  // enqueue the callback if one is provided).

  var current = root.current;
  var eventTime = requestEventTime();
  var lane = requestUpdateLane(current);
  var update = createUpdate(eventTime, lane);
  update.callback = callback !== undefined && callback !== null ? callback : null;
  enqueueUpdate(current, update, lane);
  scheduleInitialHydrationOnRoot(root, lane, eventTime);
  return root;
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var eventTime = requestEventTime();
  var lane = requestUpdateLane(current$1);

  {
    markRenderScheduled(lane);
  }

  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');
    }
  }

  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  var root = enqueueUpdate(current$1, update, lane);

  if (root !== null) {
    scheduleUpdateOnFiber(root, current$1, lane, eventTime);
    entangleTransitions(root, current$1, lane);
  }

  return lane;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}
function attemptSynchronousHydration$1(fiber) {
  switch (fiber.tag) {
    case HostRoot:
      {
        var root = fiber.stateNode;

        if (isRootDehydrated(root)) {
          // Flush the first scheduled "update".
          var lanes = getHighestPriorityPendingLanes(root);
          flushRoot(root, lanes);
        }

        break;
      }

    case SuspenseComponent:
      {
        flushSync(function () {
          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

          if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
          }
        }); // If we're still blocked after this, we need to increase
        // the priority of any promises resolving within this
        // boundary so that they next attempt also has higher pri.

        var retryLane = SyncLane;
        markRetryLaneIfNotHydrated(fiber, retryLane);
        break;
      }
  }
}

function markRetryLaneImpl(fiber, retryLane) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
  }
} // Increases the priority of thenables when they resolve within this boundary.


function markRetryLaneIfNotHydrated(fiber, retryLane) {
  markRetryLaneImpl(fiber, retryLane);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryLaneImpl(alternate, retryLane);
  }
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var lane = SelectiveHydrationLane;
  var root = enqueueConcurrentRenderForLane(fiber, lane);

  if (root !== null) {
    var eventTime = requestEventTime();
    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
  }

  markRetryLaneIfNotHydrated(fiber, lane);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var lane = requestUpdateLane(fiber);
  var root = enqueueConcurrentRenderForLane(fiber, lane);

  if (root !== null) {
    var eventTime = requestEventTime();
    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
  }

  markRetryLaneIfNotHydrated(fiber, lane);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

var shouldErrorImpl = function (fiber) {
  return null;
};

function shouldError(fiber) {
  return shouldErrorImpl(fiber);
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideHookStateDeletePath = null;
var overrideHookStateRenamePath = null;
var overrideProps = null;
var overridePropsDeletePath = null;
var overridePropsRenamePath = null;
var scheduleUpdate = null;
var setErrorHandler = null;
var setSuspenseHandler = null;

{
  var copyWithDeleteImpl = function (obj, path, index) {
    var key = path[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

    if (index + 1 === path.length) {
      if (isArray(updated)) {
        updated.splice(key, 1);
      } else {
        delete updated[key];
      }

      return updated;
    } // $FlowFixMe number or string is fine here


    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
    return updated;
  };

  var copyWithDelete = function (obj, path) {
    return copyWithDeleteImpl(obj, path, 0);
  };

  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
    var oldKey = oldPath[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

    if (index + 1 === oldPath.length) {
      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

      updated[newKey] = updated[oldKey];

      if (isArray(updated)) {
        updated.splice(oldKey, 1);
      } else {
        delete updated[oldKey];
      }
    } else {
      // $FlowFixMe number or string is fine here
      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
      obj[oldKey], oldPath, newPath, index + 1);
    }

    return updated;
  };

  var copyWithRename = function (obj, oldPath, newPath) {
    if (oldPath.length !== newPath.length) {
      warn('copyWithRename() expects paths of the same length');

      return;
    } else {
      for (var i = 0; i < newPath.length - 1; i++) {
        if (oldPath[i] !== newPath[i]) {
          warn('copyWithRename() expects paths to be the same except for the deepest key');

          return;
        }
      }
    }

    return copyWithRenameImpl(obj, oldPath, newPath, 0);
  };

  var copyWithSetImpl = function (obj, path, index, value) {
    if (index >= path.length) {
      return value;
    }

    var key = path[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  };

  var findHook = function (fiber, id) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    return currentHook;
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithSet(hook.memoizedState, path, value);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  };

  overrideHookStateDeletePath = function (fiber, id, path) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithDelete(hook.memoizedState, path);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  };

  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  overridePropsDeletePath = function (fiber, path) {
    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  overridePropsRenamePath = function (fiber, oldPath, newPath) {
    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  scheduleUpdate = function (fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  setErrorHandler = function (newShouldErrorImpl) {
    shouldErrorImpl = newShouldErrorImpl;
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function findHostInstanceByFiber(fiber) {
  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function emptyFindFiberByHostInstance(instance) {
  return null;
}

function getCurrentFiberForDevTools() {
  return current;
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals({
    bundleType: devToolsConfig.bundleType,
    version: devToolsConfig.version,
    rendererPackageName: devToolsConfig.rendererPackageName,
    rendererConfig: devToolsConfig.rendererConfig,
    overrideHookState: overrideHookState,
    overrideHookStateDeletePath: overrideHookStateDeletePath,
    overrideHookStateRenamePath: overrideHookStateRenamePath,
    overrideProps: overrideProps,
    overridePropsDeletePath: overridePropsDeletePath,
    overridePropsRenamePath: overridePropsRenamePath,
    setErrorHandler: setErrorHandler,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: findHostInstanceByFiber,
    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  getCurrentFiberForDevTools ,
    // Enables DevTools to detect reconciler version rather than renderer version
    // which may not match for third party renderers.
    reconcilerVersion: ReactVersion
  });
}

/* global reportError */

var defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,
// emulating an uncaught JavaScript error.
reportError : function (error) {
  // In older browsers and test environments, fallback to console.error.
  // eslint-disable-next-line react-internal/no-production-logging
  console['error'](error);
};

function ReactDOMRoot(internalRoot) {
  this._internalRoot = internalRoot;
}

ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  if (root === null) {
    throw new Error('Cannot update an unmounted root.');
  }

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    } else if (isValidContainer(arguments[1])) {
      error('You passed a container to the second argument of root.render(...). ' + "You don't need to pass it again since you already passed it to create the root.");
    } else if (typeof arguments[1] !== 'undefined') {
      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;

  if (root !== null) {
    this._internalRoot = null;
    var container = root.containerInfo;

    {
      if (isAlreadyRendering()) {
        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');
      }
    }

    flushSync(function () {
      updateContainer(null, root, null, null);
    });
    unmarkContainerAsRoot(container);
  }
};

function createRoot(container, options) {
  if (!isValidContainer(container)) {
    throw new Error('createRoot(...): Target container is not a DOM element.');
  }

  warnIfReactDOMContainerInDEV(container);
  var isStrictMode = false;
  var concurrentUpdatesByDefaultOverride = false;
  var identifierPrefix = '';
  var onRecoverableError = defaultOnRecoverableError;

  if (options !== null && options !== undefined) {
    {
      if (options.hydrate) {
        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
      } else {
        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {
          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\n\n' + '  let root = createRoot(domContainer);\n' + '  root.render(<App />);');
        }
      }
    }

    if (options.unstable_strictMode === true) {
      isStrictMode = true;
    }

    if (options.identifierPrefix !== undefined) {
      identifierPrefix = options.identifierPrefix;
    }

    if (options.onRecoverableError !== undefined) {
      onRecoverableError = options.onRecoverableError;
    }

    if (options.transitionCallbacks !== undefined) {
      options.transitionCallbacks;
    }
  }

  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
  markContainerAsRoot(root.current, container);
  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
  listenToAllSupportedEvents(rootContainerElement);
  return new ReactDOMRoot(root);
}

function ReactDOMHydrationRoot(internalRoot) {
  this._internalRoot = internalRoot;
}

function scheduleHydration(target) {
  if (target) {
    queueExplicitHydrationTarget(target);
  }
}

ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
function hydrateRoot(container, initialChildren, options) {
  if (!isValidContainer(container)) {
    throw new Error('hydrateRoot(...): Target container is not a DOM element.');
  }

  warnIfReactDOMContainerInDEV(container);

  {
    if (initialChildren === undefined) {
      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');
    }
  } // For now we reuse the whole bag of options since they contain
  // the hydration callbacks.


  var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option

  var mutableSources = options != null && options.hydratedSources || null;
  var isStrictMode = false;
  var concurrentUpdatesByDefaultOverride = false;
  var identifierPrefix = '';
  var onRecoverableError = defaultOnRecoverableError;

  if (options !== null && options !== undefined) {
    if (options.unstable_strictMode === true) {
      isStrictMode = true;
    }

    if (options.identifierPrefix !== undefined) {
      identifierPrefix = options.identifierPrefix;
    }

    if (options.onRecoverableError !== undefined) {
      onRecoverableError = options.onRecoverableError;
    }
  }

  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.

  listenToAllSupportedEvents(container);

  if (mutableSources) {
    for (var i = 0; i < mutableSources.length; i++) {
      var mutableSource = mutableSources[i];
      registerMutableSourceForHydration(root, mutableSource);
    }
  }

  return new ReactDOMHydrationRoot(root);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));
} // TODO: Remove this function which also includes comment nodes.
// We only use it in places that are currently more relaxed.

function isValidContainerLegacy(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function warnIfReactDOMContainerInDEV(container) {
  {
    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');
    }

    if (isContainerMarkedAsRoot(container)) {
      if (container._reactRootContainer) {
        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');
      } else {
        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');
      }
    }
  }
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the
  // legacy API.
}

function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
  if (isHydrationContainer) {
    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(root);
        originalCallback.call(instance);
      };
    }

    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks
    false, // isStrictMode
    false, // concurrentUpdatesByDefaultOverride,
    '', // identifierPrefix
    noopOnRecoverableError);
    container._reactRootContainer = root;
    markContainerAsRoot(root.current, container);
    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
    listenToAllSupportedEvents(rootContainerElement);
    flushSync();
    return root;
  } else {
    // First clear any existing content.
    var rootSibling;

    while (rootSibling = container.lastChild) {
      container.removeChild(rootSibling);
    }

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(_root);

        _originalCallback.call(instance);
      };
    }

    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks
    false, // isStrictMode
    false, // concurrentUpdatesByDefaultOverride,
    '', // identifierPrefix
    noopOnRecoverableError);

    container._reactRootContainer = _root;
    markContainerAsRoot(_root.current, container);

    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;

    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.

    flushSync(function () {
      updateContainer(initialChildren, _root, parentComponent, callback);
    });
    return _root;
  }
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  }

  var maybeRoot = container._reactRootContainer;
  var root;

  if (!maybeRoot) {
    // Initial mount
    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
  } else {
    root = maybeRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(root);
        originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, root, parentComponent, callback);
  }

  return getPublicRootInstance(root);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  {
    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(container)) {
    throw new Error('Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  {
    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(container)) {
    throw new Error('Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  {
    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + "the createRoot API, your app will behave as if it's running React " + '17. Learn more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(containerNode)) {
    throw new Error('Target container is not a DOM element.');
  }

  if (parentComponent == null || !has(parentComponent)) {
    throw new Error('parentComponent must be a valid React Component');
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainerLegacy(container)) {
    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    flushSync(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

setAttemptSynchronousHydration(attemptSynchronousHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
setGetCurrentUpdatePriority(getCurrentUpdatePriority);
setAttemptHydrationAtPriority(runWithPriority);

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    throw new Error('Target container is not a DOM element.');
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

var Internals = {
  usingClientEntryPoint: false,
  // Keep in sync with ReactTestUtils.js.
  // This is an array for better minification.
  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
};

function createRoot$1(container, options) {
  {
    if (!Internals.usingClientEntryPoint && !false) {
      error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
    }
  }

  return createRoot(container, options);
}

function hydrateRoot$1(container, initialChildren, options) {
  {
    if (!Internals.usingClientEntryPoint && !false) {
      error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
    }
  }

  return hydrateRoot(container, initialChildren, options);
} // Overload the definition to the two valid signatures.
// Warning, this opts-out of checking the function body.


// eslint-disable-next-line no-redeclare
function flushSync$1(fn) {
  {
    if (isAlreadyRendering()) {
      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
    }
  }

  return flushSync(fn);
}
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
reactDom_development.createPortal = createPortal$1;
reactDom_development.createRoot = createRoot$1;
reactDom_development.findDOMNode = findDOMNode;
reactDom_development.flushSync = flushSync$1;
reactDom_development.hydrate = hydrate;
reactDom_development.hydrateRoot = hydrateRoot$1;
reactDom_development.render = render;
reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
reactDom_development.version = ReactVersion;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}

(function (module) {

	{
	  module.exports = reactDom_development;
	}
} (reactDom));

var ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(reactDom.exports);

var utils = { };


// utils.deepCopy
utils.deepCopy = function deepCopy(data) {
    if (data == null || typeof (data) !== 'object')
        return data;

    if (data instanceof Array) {
        var arr = [];
        for (var i = 0; i < data.length; i++) {
            arr[i] = deepCopy(data[i]);
        }
        return arr;
    }

    var obj = { };
    for (var key in data) {
        if (data.hasOwnProperty(key))
            obj[key] = deepCopy(data[key]);
    }
    return obj;

};

utils.isMobile = function () {
    return /Android/i.test(navigator.userAgent) ||
      /iPhone|iPad|iPod/i.test(navigator.userAgent);
};

/**
 * @name utils.implements
 * @description Adds properties and methods from the sourceClass
 * to the targetClass but only if properties with the same name do not
 * already exist in the targetClass.
 * @param {object} targetClass - The target class.
 * @param {object} sourceClass - The source class.
 * @example utils.implements(pcui.Container, pcui.IContainer);
 */
utils.implements = function (targetClass, sourceClass) {
    var properties = Object.getOwnPropertyDescriptors(sourceClass.prototype);
    for (var key in properties) {
        if (targetClass.prototype.hasOwnProperty(key)) {
            delete properties[key];
        }
    }

    Object.defineProperties(targetClass.prototype, properties);
};

/**
 * @name utils.proxy
 * @description Creates new properties on the target class that get / set
 * the properties of the member.
 * @param {object} targetClass - The target class
 * @param {string} memberName - The name of the member of the target class that properties will be proxied to.
 * @param {string[]} properties - A list of properties to be proxied.
 * @example
 * utils.proxy(pcui.SliderInput, '_numericInput', ['max', 'min', 'placeholder']);
 */
utils.proxy = function (targetClass, memberName, properties) {
    properties.forEach((property) => {
        Object.defineProperty(targetClass.prototype, property, {
            get: function () {
                return this[memberName][property];
            },
            set: function (value) {
                this[memberName][property] = value;
            }
        });
    });
};

// String.startsWith
if (!String.prototype.startsWith) {
    // eslint-disable-next-line
    Object.defineProperty(String.prototype, 'startsWith', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: function (str) {
            var that = this;
            var ceil = str.length;
            for (var i = 0; i < ceil; i++)
                if (that[i] !== str[i]) return false;
            return true;
        }
    });
}

// String.endsWith polyfill
if (!String.prototype.endsWith) {
    // eslint-disable-next-line
    Object.defineProperty(String.prototype, 'endsWith', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: function (str) {
            var that = this;
            for (var i = 0, ceil = str.length; i < ceil; i++)
                if (that[i + that.length - ceil] !== str[i])
                    return false;
            return true;
        }
    });
}

// Appends query parameter to string (supposedly the string is a URL)
// automatically figuring out if the separator should be ? or &.
// Example: url.appendQuery('t=123').appendQuery('q=345');
if (!String.prototype.appendQuery) {
    // eslint-disable-next-line
    Object.defineProperty(String.prototype, 'appendQuery', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: function (queryParameter) {
            var separator = this.indexOf('?') !== -1 ? '&' : '?';
            return this + separator + queryParameter;
        }
    });
}

utils.arrayEquals = function (lhs, rhs) {
    if (!lhs)
        return false;

    if (!rhs)
        return false;

    if (lhs.length !== rhs.length)
        return false;

    for (var i = 0, l = lhs.length; i < l; i++) {
        if (this[i] instanceof Array && rhs[i] instanceof Array) {
            if (!this[i].equals(rhs[i]))
                return false;
        } else if (this[i] !== rhs[i]) {
            return false;
        }
    }
    return true;
};

// element.classList.add polyfill
(function () {
    var dummy  = document.createElement('div'),
        dtp    = DOMTokenList.prototype,
        add    = dtp.add,
        rem    = dtp.remove;

    dummy.classList.add('class1', 'class2');

    // Older versions of the HTMLElement.classList spec didn't allow multiple
    // arguments, easy to test for
    if (!dummy.classList.contains('class2')) {
        dtp.add    = function () {
            Array.prototype.forEach.call(arguments, add.bind(this));
        };
        dtp.remove = function () {
            Array.prototype.forEach.call(arguments, rem.bind(this));
        };
    }
})();

var utils$1 = utils;

var FLEX = 'pcui-flex';
var GRID = 'pcui-grid';
var HIDDEN = 'pcui-hidden';
var SCROLLABLE = 'pcui-scrollable';
var RESIZABLE = 'pcui-resizable';
var READONLY = 'pcui-readonly';
var DISABLED = 'pcui-disabled';
var COLLAPSIBLE = 'pcui-collapsible';
var COLLAPSED = 'pcui-collapsed';
var FOCUS = 'pcui-focus';
var MULTIPLE_VALUES = 'pcui-multiple-values';
var ERROR = 'pcui-error';
var FLASH = 'flash';
var NOT_FLEXIBLE = 'pcui-not-flexible';
var DEFAULT_MOUSEDOWN = 'pcui-default-mousedown';
var FONT_REGULAR = 'font-regular';
var FONT_BOLD = 'font-bold';

const CLASS_ELEMENT = 'pcui-element';

// these are properties that are
// available as Element properties and
// can also be set through the Element constructor
const SIMPLE_CSS_PROPERTIES = [
    'flexDirection',
    'flexGrow',
    'flexBasis',
    'flexShrink',
    'flexWrap',
    'alignItems',
    'alignSelf',
    'justifyContent',
    'justifySelf'
];

// Stores Element types by name and default arguments
const ELEMENT_REGISTRY = {};

/**
 * @event
 * @name Element#enable
 * @description Fired when the Element gets enabled
 */

/**
 * @event
 * @name Element#disable
 * @description Fired when the Element gets disabled
 */

/**
 * @event
 * @name Element#hide
 * @description Fired when the Element gets hidden
 */

/**
 * @event
 * @name Element#hideToRoot
 * @description Fired when the Element or any of its parent get hidden
 */

/**
 * @event
 * @name Element#show
 * @description Fired when the Element stops being hidden
 */

/**
 * @event
 * @name Element#showToRoot
 * @description Fired when the Element and all of its parents become visible
 */

/**
 * @event
 * @name Element#readOnly
 * @param {boolean} readOnly - Whether the Element is now read only
 * @description Fired when the readOnly property of an Element changes
 */

/**
 * @event
 * @name Element#parent
 * @description Fired when the Element's parent gets set
 * @param {Element} parent - The new parent
 */

/**
 * @event
 * @name Element#click
 * @description Fired when the mouse is clicked on the Element but only if the Element is enabled.
 * @param {Event} evt - The native mouse event.
 */

/**
 * @event
 * @name Element#hover
 * @description Fired when the mouse starts hovering on the Element
 * @param {Event} evt - The native mouse event.
 */

/**
 * @event
 * @name Element#hoverend
 * @description Fired when the mouse stops hovering on the Element
 * @param {Event} evt - The native mouse event.
 */

/**
 * @event
 * @name Element#destroy
 * @description Fired after the element has been destroyed.
 * @param {HTMLElement} dom - The DOM element
 * @param {Element} element - The element
 */

/**
 * @event
 * @name Element#hoverend
 * @description Fired when the mouse stops hovering on the Element
 * @param {Event} evt - The native mouse event.
 */

/**
 * @name Element
 * @class
 * @classdesc The base class for all UI elements.
 * @augments Events
 * @property {boolean} enabled=true Gets / sets whether the Element or its parent chain is enabled or not. Defaults to true.
 * @property {HTMLElement} dom Gets the root DOM node for this Element.
 * @property {Element} parent Gets the parent Element.
 * @property {boolean} hidden Gets / sets whether the Element is hidden.
 * @property {boolean} hiddenToRoot Gets whether the Element is hidden all the way up to the root. If the Element itself or any of its parents are hidden then this is true.
 * @property {boolean} readOnly Gets / sets whether the Element is read only.
 * @property {boolean} ignoreParent Gets / sets whether the Element will ignore parent events & variable states.
 * @property {number} [width=null] Gets / sets the width of the Element in pixels. Can also be an empty string to remove it.
 * @property {number} [height=null] Gets / sets the height of the Element in pixels. Can also be an empty string to remove it.
 * @property {number} tabIndex Gets / sets the tabIndex of the Element.
 * @property {boolean} error Gets / sets whether the Element is in an error state.
 * @property {BindingBase} binding Gets / sets the Binding object for the element.
 * @property {CSSStyleDeclaration} style Shortcut to pcui.Element.dom.style.
 * @property {DOMTokenList} class Shortcut to pcui.Element.dom.classList.
 */
class Element$m extends Events {
    /**
     * Creates a new Element.
     *
     * @param {HTMLElement} dom - The DOM element that this pcui.Element wraps.
     * @param {object} args - The arguments. All settable properties can also be set through the constructor.
     * @param {string} [args.id] - The desired id for the Element HTML node.
     * @param {string|string[]} [args.class] - The CSS class or classes we want to add to the element.
     * @param {boolean} [args.isRoot] - If true then this is the root element. Set this to true for the topmost Element in your page.
     */
    constructor(dom, args) {
        super();

        if (!args) args = {};

        this._destroyed = false;
        this._parent = null;

        this._domEventClick = this._onClick.bind(this);
        this._domEventMouseOver = this._onMouseOver.bind(this);
        this._domEventMouseOut = this._onMouseOut.bind(this);
        this._eventsParent = [];

        this._dom = dom || args.dom || document.createElement('div');

        if (args.id !== undefined) {
            this._dom.id = args.id;
        }

        // add ui reference
        this._dom.ui = this;

        // add event listeners
        this._dom.addEventListener('click', this._domEventClick);
        this._dom.addEventListener('mouseover', this._domEventMouseOver);
        this._dom.addEventListener('mouseout', this._domEventMouseOut);

        // add element class
        this._dom.classList.add(CLASS_ELEMENT);

        // add font regular class
        this._dom.classList.add(FONT_REGULAR);

        this._class = [];
        // add user classes
        if (args.class) {
            if (Array.isArray(args.class)) {
                for (let i = 0; i < args.class.length; i++) {
                    this._dom.classList.add(args.class[i]);
                    this._class.push(args.class[i]);
                }
            } else {
                this._dom.classList.add(args.class);
                this._class.push(args.class);
            }
        }

        this.enabled = args.enabled !== undefined ? args.enabled : true;
        this._hiddenParents = !args.isRoot;
        this.hidden = args.hidden || false;
        this.readOnly = args.readOnly || false;
        this.ignoreParent = args.ignoreParent || false;

        if (args.width !== undefined) {
            this.width = args.width;
        }
        if (args.height !== undefined) {
            this.height = args.height;
        }
        if (args.tabIndex !== undefined) {
            this.tabIndex = args.tabIndex;
        }

        // copy CSS properties from args
        for (const key in args) {
            if (args[key] === undefined) continue;
            if (SIMPLE_CSS_PROPERTIES.indexOf(key) !== -1) {
                this[key] = args[key];
            }
        }

        // set the binding object
        if (args.binding) {
            this.binding = args.binding;
        }

        this._flashTimeout = null;

        this._suppressChange = false;
    }

    /**
     * @name Element#link
     * @description Links the specified observers and paths to the Element's data binding.
     * @param {Observer|Observer[]} observers - An array of observers or a single observer.
     * @param {string|string[]} paths - A path for the observer(s) or an array of paths that maps to each separate observer.
     */
    link(observers, paths) {
        if (this._binding) {
            this._binding.link(observers, paths);
        }
    }


    /**
     * @name Element#unlink
     * @description Unlinks the Element from its observers
     */
    unlink() {
        if (this._binding) {
            this._binding.unlink();
        }
    }

    /**
     * @name Element#flash
     * @description Triggers a flash animation on the Element.
     */
    flash() {
        if (this._flashTimeout) return;

        this.classAdd(FLASH);
        this._flashTimeout = setTimeout(function () {
            this._flashTimeout = null;
            this.classRemove(FLASH);
        }.bind(this), 200);
    }

    _onClick(evt) {
        if (this.enabled) {
            this.emit('click', evt);
        }
    }

    _onMouseOver(evt) {
        this.emit('hover', evt);
    }

    _onMouseOut(evt) {
        this.emit('hoverend', evt);
    }

    _onHiddenToRootChange(hiddenToRoot) {
        if (hiddenToRoot) {
            this.emit('hideToRoot');
        } else {
            this.emit('showToRoot');
        }
    }

    _onEnabledChange(enabled) {
        if (enabled) {
            this.classRemove(DISABLED);
        } else {
            this.classAdd(DISABLED);
        }

        this.emit(enabled ? 'enable' : 'disable');
    }

    _onParentDestroy() {
        this.destroy();
    }

    _onParentDisable() {
        if (this._ignoreParent) return;
        if (this._enabled) {
            this._onEnabledChange(false);
        }
    }

    _onParentEnable() {
        if (this._ignoreParent) return;
        if (this._enabled) {
            this._onEnabledChange(true);
        }
    }

    _onParentShowToRoot() {
        const oldHiddenToRoot = this.hiddenToRoot;
        this._hiddenParents = false;
        if (oldHiddenToRoot !== this.hiddenToRoot) {
            this._onHiddenToRootChange(this.hiddenToRoot);
        }
    }

    _onParentHideToRoot() {
        const oldHiddenToRoot = this.hiddenToRoot;
        this._hiddenParents = true;
        if (oldHiddenToRoot !== this.hiddenToRoot) {
            this._onHiddenToRootChange(this.hiddenToRoot);
        }
    }

    _onReadOnlyChange(readOnly) {
        if (readOnly) {
            this.classAdd(READONLY);
        } else {
            this.classRemove(READONLY);
        }

        this.emit('readOnly', readOnly);
    }

    _onParentReadOnlyChange(readOnly) {
        if (this._ignoreParent) return;
        if (readOnly) {
            if (!this._readOnly) {
                this._onReadOnlyChange(true);
            }
        } else {
            if (!this._readOnly) {
                this._onReadOnlyChange(false);
            }
        }

    }

    /**
     * @name Element#classAdd
     * @description Adds the specified class to the DOM element but checks if the classList contains it first.
     * @param {string} cls - The class to add
     */
    classAdd(cls) {
        var classList = this._dom.classList;
        if (!classList.contains(cls)) {
            classList.add(cls);
        }
    }

    /**
     * @name Element#classRemove
     * @description Removes the specified class from the DOM element but checks if the classList contains it first.
     * @param {string} cls - The class to remove
     */
    classRemove(cls) {
        var classList = this._dom.classList;
        if (classList.contains(cls)) {
            classList.remove(cls);
        }
    }

    /**
     * @name Element#destroy
     * @description Destroys the Element and its events.
     */
    destroy() {
        if (this._destroyed) return;

        this._destroyed = true;

        if (this.binding) {
            this.binding = null;
        } else {
            this.unlink();
        }

        if (this.parent) {
            const parent = this.parent;

            for (let i = 0; i < this._eventsParent.length; i++) {
                this._eventsParent[i].unbind();
            }
            this._eventsParent.length = 0;


            // remove element from parent
            // check if parent has been destroyed already
            // because we do not want to be emitting events
            // on a destroyed parent after it's been destroyed
            // as it is easy to lead to null exceptions
            if (parent.remove && !parent._destroyed) {
                parent.remove(this);
            }

            // set parent to null and remove from
            // parent dom just in case parent.remove above
            // didn't work because of an override or other condition
            this._parent = null;

            // Do not manually call removeChild for elements whose parent has already been destroyed.
            // For example when we destroy a TreeViewItem that has many child nodes, that will trigger every child Element to call dom.parentElement.removeChild(dom).
            // But we don't need to remove all these DOM elements from their parents since the root DOM element is destroyed anyway.
            // This has a big impact on destroy speed in certain cases.
            if (!parent._destroyed && this._dom && this._dom.parentElement) {
                this._dom.parentElement.removeChild(this._dom);
            }

        }

        const dom = this._dom;
        if (dom) {
            // remove event listeners
            dom.removeEventListener('click', this._domEventClick);
            dom.removeEventListener('mouseover', this._domEventMouseOver);
            dom.removeEventListener('mouseout', this._domEventMouseOut);

            // remove ui reference
            delete dom.ui;

            this._dom = null;
        }

        this._domEventClick = null;
        this._domEventMouseOver = null;
        this._domEventMouseOut = null;

        if (this._flashTimeout) {
            clearTimeout(this._flashTimeout);
        }

        this.emit('destroy', dom, this);

        this.unbind();
    }

    /**
     * @static
     * @param {string} type - The type we want to reference this Element by
     * @param {object} cls - The actual class of the Element
     * @param {object} [defaultArguments] - Default arguments when creating this type
     */
    static register(type, cls, defaultArguments) {
        ELEMENT_REGISTRY[type] = { cls, defaultArguments };
    }

    /**
     * @static
     * @param {string} type - The type we want to unregister
     */
    static unregister(type) {
        delete ELEMENT_REGISTRY[type];
    }

    /**
     * @static
     * @param {string} type - The type of the Element (registered by pcui.Element#register)
     * @param {object} args - Arguments for the Element
     * @returns {Element} A new pcui.Element of the desired type
     */
    static create(type, args) {
        const entry = ELEMENT_REGISTRY[type];
        if (!entry) {
            console.error('Invalid type passed to pcui.Element#create', type);
            return;
        }

        const cls = entry.cls;
        const clsArgs = {};

        if (entry.defaultArguments) {
            Object.assign(clsArgs, entry.defaultArguments);
        }
        if (args) {
            Object.assign(clsArgs, args);
        }

        return new cls(clsArgs);
    }

    set enabled(value) {
        if (this._enabled === value) return;

        // remember if enabled in hierarchy
        const enabled = this.enabled;

        this._enabled = value;

        // only fire event if hierarchy state changed
        if (enabled !== value) {
            this._onEnabledChange(value);
        }
    }

    get enabled() {
        if (this._ignoreParent) return this._enabled;
        return this._enabled && (!this._parent || this._parent.enabled);
    }

    set ignoreParent(value) {
        this._ignoreParent = value;
        this._onEnabledChange(this.enabled);
        this._onReadOnlyChange(this.readOnly);
    }

    get ignoreParent() {
        return this._ignoreParent;
    }

    get dom() {
        return this._dom;
    }

    set parent(value) {
        if (value === this._parent) return;

        const oldEnabled = this.enabled;
        const oldReadonly = this.readOnly;
        const oldHiddenToRoot = this.hiddenToRoot;

        if (this._parent) {
            for (let i = 0; i < this._eventsParent.length; i++) {
                this._eventsParent[i].unbind();
            }
            this._eventsParent.length = 0;
        }

        this._parent = value;

        if (this._parent) {
            this._eventsParent.push(this._parent.once('destroy', this._onParentDestroy.bind(this)));
            this._eventsParent.push(this._parent.on('disable', this._onParentDisable.bind(this)));
            this._eventsParent.push(this._parent.on('enable', this._onParentEnable.bind(this)));
            this._eventsParent.push(this._parent.on('readOnly', this._onParentReadOnlyChange.bind(this)));
            this._eventsParent.push(this._parent.on('showToRoot', this._onParentShowToRoot.bind(this)));
            this._eventsParent.push(this._parent.on('hideToRoot', this._onParentHideToRoot.bind(this)));

            this._hiddenParents = this._parent.hiddenToRoot;
        } else {
            this._hiddenParents = true;
        }

        this.emit('parent', this._parent);

        const newEnabled = this.enabled;
        if (newEnabled !== oldEnabled) {
            this._onEnabledChange(newEnabled);
        }

        const newReadonly = this.readOnly;
        if (newReadonly !== oldReadonly) {
            this._onReadOnlyChange(newReadonly);
        }

        const hiddenToRoot = this.hiddenToRoot;
        if (hiddenToRoot !== oldHiddenToRoot) {
            this._onHiddenToRootChange(hiddenToRoot);
        }
    }

    get parent() {
        return this._parent;
    }

    set hidden(value) {
        if (value === this._hidden) return;

        const oldHiddenToRoot = this.hiddenToRoot;

        this._hidden = value;

        if (value) {
            this.classAdd(HIDDEN);
        } else {
            this.classRemove(HIDDEN);
        }

        this.emit(value ? 'hide' : 'show');

        if (this.hiddenToRoot !== oldHiddenToRoot) {
            this._onHiddenToRootChange(this.hiddenToRoot);
        }
    }

    get hidden() {
        return this._hidden;
    }

    get hiddenToRoot() {
        return this._hidden || this._hiddenParents;
    }

    set readOnly(value) {
        if (this._readOnly === value) return;
        this._readOnly = value;

        this._onReadOnlyChange(value);
    }

    get readOnly() {
        if (this._ignoreParent) return this._readOnly;
        return this._readOnly || !!(this._parent && this._parent.readOnly);
    }

    set error(value) {
        if (this._hasError === value) return;
        this._hasError = value;
        if (value) {
            this.classAdd(ERROR);
        } else {
            this.classRemove(ERROR);
        }
    }

    get error() {
        return this._hasError;
    }

    get style() {
        return this._dom.style;
    }

    set class(value) {
        if (!Array.isArray(value)) {
            value = [value];
        }
        value.forEach((cls) => {
            this.classAdd(cls);
        });
        this._class.forEach((cls) => {
            if (!value.includes(cls)) {
                this.classRemove(cls);
            }
        });
        this._class = value;
    }

    get class() {
        return this._dom.classList;
    }

    set width(value) {
        if (typeof value === 'number') {
            value += 'px';
        }
        this.style.width = value;
    }

    get width() {
        return this._dom.clientWidth;
    }

    set height(value) {
        if (typeof value === 'number') {
            value += 'px';
        }
        this.style.height = value;
    }

    get height() {
        return this._dom.clientHeight;
    }

    set tabIndex(value) {
        this._dom.tabIndex = value;
    }

    get tabIndex() {
        return this._dom.tabIndex;
    }

    set binding(value) {
        if (this._binding === value) return;

        let prevObservers;
        let prevPaths;

        if (this._binding) {
            prevObservers = this._binding.observers;
            prevPaths = this._binding.paths;

            this.unlink();
            this._binding.element = null;
            this._binding = null;
        }

        this._binding = value;

        if (this._binding) {
            this._binding.element = this;
            if (prevObservers && prevPaths) {
                this.link(prevObservers, prevPaths);
            }
        }
    }

    get binding() {
        return this._binding;
    }

    get destroyed() {
        return this._destroyed;
    }

    /*  Backwards Compatibility */
    // we should remove those after we migrate
    set disabled(value) {
        this.enabled = !value;
    }

    get disabled() {
        return !this.enabled;
    }

    set element(value) {
        this.dom = value;
    }

    get element() {
        return this.dom;
    }

    set innerElement(value) {
        this.domContent = value;
    }

    get innerElement() {
        return this.domContent;
    }
}

// utility function to expose a CSS property
// via an Element.prototype property
function exposeCssProperty(name) {
    Object.defineProperty(Element$m.prototype, name, {
        get: function () {
            return this.style[name];
        },
        set: function (value) {
            this.style[name] = value;
        }
    });
}

// expose rest of CSS properties
SIMPLE_CSS_PROPERTIES.forEach(exposeCssProperty);

var Element$1$1 = Element$m;

const RESIZE_HANDLE_SIZE = 4;

const VALID_RESIZABLE_VALUES = [
    null,
    'top',
    'right',
    'bottom',
    'left'
];

const CLASS_RESIZING = RESIZABLE + '-resizing';
const CLASS_RESIZABLE_HANDLE = 'pcui-resizable-handle';
const CLASS_CONTAINER = 'pcui-container';

const CLASS_DRAGGED = CLASS_CONTAINER + '-dragged';
const CLASS_DRAGGED_CHILD = CLASS_DRAGGED + '-child';

/**
 * @event
 * @name Container#append
 * @description Fired when a child Element gets added to the Container
 * @param {Element} element - The element that was added
 */

/**
 * @event
 * @name Container#remove
 * @description Fired when a child Element gets removed from the Container
 * @param {Element} element - The element that was removed
 */

/**
 * @event
 * @name Container#scroll
 * @description Fired when the container is scrolled.
 * @param {Event} evt - The native scroll event.
 */

/**
 * @event
 * @name Container#resize
 * @description Fired when the container gets resized using the resize handle.
 */

/**
 * @name Container
 * @class
 * @classdesc A container is the basic building block for Elements that are grouped together.
 * A container can contain any other element including other containers.
 * @augments Element
 * @mixes IContainer
 * @mixes IFlex
 * @mixes IGrid
 * @mixes IScrollable
 * @mixes IResizable
 */
class Container$2 extends Element$1$1 {
    /**
     * Creates a new Container.
     *
     * @param {object} args - The arguments. Extends the pcui.Element constructor arguments. All settable properties can also be set through the constructor.
     * @param {HTMLElement} [args.dom] - The DOM element to use for the container. If unspecified a new element will be created.
     */
    constructor(args) {
        if (!args) args = {};

        const dom = args.dom || document.createElement('div');

        super(dom, args);

        this.class.add(CLASS_CONTAINER);

        this._domEventScroll = this._onScroll.bind(this);
        this.domContent = this._dom;

        // scroll
        this._scrollable = false;
        if (args.scrollable) {
            this.scrollable = true;
        }

        // flex
        this._flex = false;
        this.flex = !!args.flex;

        // grid
        this._grid = false;
        let grid = !!args.grid;
        if (grid) {
            if (this.flex) {
                console.error('Invalid pcui.Container arguments: "grid" and "flex" cannot both be true.');
                grid = false;
            }
        }
        this.grid = grid;

        // resize related
        this._domResizeHandle = null;
        this._domEventResizeStart = this._onResizeStart.bind(this);
        this._domEventResizeMove = this._onResizeMove.bind(this);
        this._domEventResizeEnd = this._onResizeEnd.bind(this);
        this._domEventResizeTouchStart = this._onResizeTouchStart.bind(this);
        this._domEventResizeTouchMove = this._onResizeTouchMove.bind(this);
        this._domEventResizeTouchEnd = this._onResizeTouchEnd.bind(this);
        this._resizeTouchId = null;
        this._resizeData = null;
        this._resizeHorizontally = true;

        this.resizable = args.resizable || null;
        this._resizeMin = 100;
        this._resizeMax = 300;

        if (args.resizeMin !== undefined) {
            this.resizeMin = args.resizeMin;
        }
        if (args.resizeMax !== undefined) {
            this.resizeMax = args.resizeMax;
        }

        this._draggedStartIndex = -1;
    }

    /**
     * @name Container#append
     * @description Appends an element to the container.
     * @param {Element} element - The element to append.
     * @fires 'append'
     */
    append(element) {
        const dom = this._getDomFromElement(element);
        this._domContent.appendChild(dom);
        this._onAppendChild(element);
    }

    /**
     * @name Container#appendBefore
     * @description Appends an element to the container before the specified reference element.
     * @param {Element} element - The element to append.
     * @param {Element} referenceElement - The element before which the element will be appended.
     * @fires 'append'
     */
    appendBefore(element, referenceElement) {
        const dom = this._getDomFromElement(element);
        this._domContent.appendChild(dom);
        const referenceDom =  referenceElement && this._getDomFromElement(referenceElement);

        this._domContent.insertBefore(dom, referenceDom);

        this._onAppendChild(element);
    }

    /**
     * @name Container#appendAfter
     * @description Appends an element to the container just after the specified reference element.
     * @param {Element} element - The element to append.
     * @param {Element} referenceElement - The element after which the element will be appended.
     * @fires 'append'
     */
    appendAfter(element, referenceElement) {
        const dom = this._getDomFromElement(element);
        const referenceDom = referenceElement && this._getDomFromElement(referenceElement);

        const elementBefore = referenceDom ? referenceDom.nextSibling : null;
        if (elementBefore) {
            this._domContent.insertBefore(dom, elementBefore);
        } else {
            this._domContent.appendChild(dom);
        }

        this._onAppendChild(element);
    }

    /**
     * @name Container#prepend
     * @description Inserts an element in the beginning of the container.
     * @param {Element} element - The element to prepend.
     * @fires 'append'
     */
    prepend(element) {
        const dom = this._getDomFromElement(element);
        const first = this._domContent.firstChild;
        if (first) {
            this._domContent.insertBefore(dom, first);
        } else {
            this._domContent.appendChild(dom);
        }

        this._onAppendChild(element);
    }

    /**
     * @name Container#remove
     * @description Removes the specified child element from the container.
     * @param {Element} element - The element to remove.
     * @fires 'remove'
     */
    remove(element) {
        if (element.parent !== this) return;

        const dom = this._getDomFromElement(element);
        this._domContent.removeChild(dom);

        this._onRemoveChild(element);
    }

    /**
     * @name Container#move
     * @description Moves the specified child at the specified index.
     * @param {Element} element - The element to move.
     * @param {number} index - The index
     */
    move(element, index) {
        let idx = -1;
        for (let i = 0; i < this.dom.childNodes.length; i++) {
            if (this.dom.childNodes[i].ui === element) {
                idx = i;
                break;
            }
        }

        if (idx === -1) {
            this.appendBefore(element, this.dom.childNodes[index]);
        } else if (index !== idx) {
            this.remove(element);
            if (index < idx) {
                this.appendBefore(element, this.dom.childNodes[index]);
            } else {
                this.appendAfter(element, this.dom.childNodes[index - 1]);
            }
        }
    }

    /**
     * @name Container#clear
     * @description Clears all children from the container.
     * @fires 'remove' for each child element.
     */
    clear() {
        let i = this._domContent.childNodes.length;
        while (i--) {
            const node = this._domContent.childNodes[i];
            if (node.ui && node.ui !== this) {
                node.ui.destroy();
            }
        }

        if (this._domResizeHandle) {
            this._domResizeHandle.removeEventListener('mousedown', this._domEventResizeStart);
            this._domResizeHandle.removeEventListener('touchstart', this._domEventResizeTouchStart, { passive: false });
            this._domResizeHandle = null;
        }

        this._domContent.innerHTML = '';

        if (this.resizable) {
            this._createResizeHandle();
            this._dom.appendChild(this._domResizeHandle);
        }
    }

    // Used for backwards compatibility with the legacy ui framework
    _getDomFromElement(element) {
        if (element.dom) {
            return element.dom;
        }

        if (element.element) {
            // console.log('Legacy ui.Element passed to pcui.Container', this.class, element.class);
            return element.element;
        }

        return element;
    }

    _onAppendChild(element) {
        element.parent = this;
        this.emit('append', element);
    }

    _onRemoveChild(element) {
        element.parent = null;
        this.emit('remove', element);
    }

    _onScroll(evt) {
        this.emit('scroll', evt);
    }

    _createResizeHandle() {
        const handle = document.createElement('div');
        handle.classList.add(CLASS_RESIZABLE_HANDLE);
        handle.ui = this;

        handle.addEventListener('mousedown', this._domEventResizeStart);
        handle.addEventListener('touchstart', this._domEventResizeTouchStart, { passive: false });

        this._domResizeHandle = handle;
    }

    _onResizeStart(evt) {
        evt.preventDefault();
        evt.stopPropagation();

        window.addEventListener('mousemove', this._domEventResizeMove);
        window.addEventListener('mouseup', this._domEventResizeEnd);

        this._resizeStart();
    }

    _onResizeMove(evt) {
        evt.preventDefault();
        evt.stopPropagation();

        this._resizeMove(evt.clientX, evt.clientY);
    }

    _onResizeEnd(evt) {
        evt.preventDefault();
        evt.stopPropagation();

        window.removeEventListener('mousemove', this._domEventResizeMove);
        window.removeEventListener('mouseup', this._domEventResizeEnd);

        this._resizeEnd();
    }

    _onResizeTouchStart(evt) {
        evt.preventDefault();
        evt.stopPropagation();

        for (let i = 0; i < evt.changedTouches.length; i++) {
            const touch = evt.changedTouches[i];
            if (touch.target === this._domResizeHandle) {
                this._resizeTouchId = touch.identifier;
            }
        }

        window.addEventListener('touchmove', this._domEventResizeTouchMove);
        window.addEventListener('touchend', this._domEventResizeTouchEnd);

        this._resizeStart();
    }

    _onResizeTouchMove(evt) {
        for (let i = 0; i < evt.changedTouches.length; i++) {
            const touch = evt.changedTouches[i];
            if (touch.identifier !== this._resizeTouchId) {
                continue;
            }

            evt.stopPropagation();
            evt.preventDefault();

            this._resizeMove(touch.clientX, touch.clientY);

            break;
        }
    }

    _onResizeTouchEnd(evt) {
        for (let i = 0; i < evt.changedTouches.length; i++) {
            const touch = evt.changedTouches[i];
            if (touch.identifier === this._resizeTouchId) {
                continue;
            }

            this._resizeTouchId = null;

            evt.preventDefault();
            evt.stopPropagation();

            window.removeEventListener('touchmove', this._domEventResizeTouchMove);
            window.removeEventListener('touchend', this._domEventResizeTouchEnd);

            this._resizeEnd();

            break;
        }
    }

    _resizeStart() {
        this.class.add(CLASS_RESIZING);
    }

    _resizeMove(x, y) {
        // if we haven't initialized resizeData do so now
        if (!this._resizeData) {
            this._resizeData = {
                x: x,
                y: y,
                width: this.dom.clientWidth,
                height: this.dom.clientHeight
            };

            return;
        }

        if (this._resizeHorizontally) {
            // horizontal resizing
            let offsetX = this._resizeData.x - x;

            if (this._resizable === 'right') {
                offsetX = -offsetX;
            }

            this.width = RESIZE_HANDLE_SIZE + Math.max(this._resizeMin, Math.min(this._resizeMax, (this._resizeData.width + offsetX)));
        } else {
            // vertical resizing
            let offsetY = this._resizeData.y - y;

            if (this._resizable === 'bottom') {
                offsetY = -offsetY;
            }

            this.height = Math.max(this._resizeMin, Math.min(this._resizeMax, (this._resizeData.height + offsetY)));
        }

        this.emit('resize');
    }

    _resizeEnd() {
        this._resizeData = null;
        this.class.remove(CLASS_RESIZING);
    }

    /**
     * Resize the container
     *
     * @param {number} x - The amount of pixels to resize the width
     * @param {number} y - The amount of pixels to resize the height
     */
    resize(x, y) {
        x = x || 0;
        y = y || 0;

        this._resizeStart();
        this._resizeMove(0, 0);
        this._resizeMove(-x + RESIZE_HANDLE_SIZE, -y);
        this._resizeEnd();
    }

    _getDraggedChildIndex(draggedChild) {
        for (let i = 0; i < this.dom.childNodes.length; i++) {
            if (this.dom.childNodes[i].ui === draggedChild) {
                return i;
            }
        }

        return -1;
    }

    _onChildDragStart(evt, childPanel) {
        this.class.add(CLASS_DRAGGED_CHILD);

        this._draggedStartIndex = this._getDraggedChildIndex(childPanel);

        childPanel.class.add(CLASS_DRAGGED);

        this._draggedHeight = childPanel.height;

        this.emit('child:dragstart', childPanel, this._draggedStartIndex);
    }

    _onChildDragMove(evt, childPanel) {
        const rect = this.dom.getBoundingClientRect();

        const dragOut = (evt.clientX < rect.left || evt.clientX > rect.right || evt.clientY < rect.top || evt.clientY > rect.bottom);

        const childPanelIndex = this._getDraggedChildIndex(childPanel);

        if (dragOut) {
            childPanel.class.remove(CLASS_DRAGGED);
            if (this._draggedStartIndex !== childPanelIndex) {
                this.remove(childPanel);
                if (this._draggedStartIndex < childPanelIndex) {
                    this.appendBefore(childPanel, this.dom.childNodes[this._draggedStartIndex]);
                } else {
                    this.appendAfter(childPanel, this.dom.childNodes[this._draggedStartIndex - 1]);
                }
            }

            return;
        }

        childPanel.class.add(CLASS_DRAGGED);

        const y = evt.clientY - rect.top;
        let ind = null;

        // hovered script
        for (let i = 0; i < this.dom.childNodes.length; i++) {
            const otherPanel = this.dom.childNodes[i].ui;
            const otherTop = otherPanel.dom.offsetTop;
            if (i < childPanelIndex) {
                if (y <= otherTop + otherPanel.header.height) {
                    ind = i;
                    break;
                }
            } else if (i > childPanelIndex) {
                if (y + childPanel.height >= otherTop + otherPanel.height) {
                    ind = i;
                    break;
                }
            }
        }

        if (ind !== null && childPanelIndex !== ind) {
            this.remove(childPanel);
            if (ind < childPanelIndex) {
                this.appendBefore(childPanel, this.dom.childNodes[ind]);
            } else {
                this.appendAfter(childPanel, this.dom.childNodes[ind - 1]);
            }
        }
    }

    _onChildDragEnd(evt, childPanel) {
        this.class.remove(CLASS_DRAGGED_CHILD);

        childPanel.class.remove(CLASS_DRAGGED);

        const index = this._getDraggedChildIndex(childPanel);

        this.emit('child:dragend', childPanel, index, this._draggedStartIndex);

        this._draggedStartIndex = -1;
    }

    forEachChild(fn) {
        for (let i = 0; i < this.dom.childNodes.length; i++) {
            const node = this.dom.childNodes[i].ui;
            if (node) {
                const result = fn(node, i);
                if (result === false) {
                    // early out
                    break;
                }
            }
        }
    }

    /**
     * If the current node contains a root, recursively append it's children to this node
     * and return it. Otherwise return the current node. Also add each child to the parent
     * under its keyed name.
     *
     * @param {object} node - The current element in the dom structure which must be recursively
     * traversed and appended to it's parent
     *
     * @returns {Element} - The recursively appended element node
     *
     */
    _buildDomNode(node) {
        const keys = Object.keys(node);
        let rootNode;
        if (keys.includes('root')) {
            rootNode = this._buildDomNode(node.root);
            node.children.forEach((childNode) => {
                const childNodeElement = this._buildDomNode(childNode);
                if (childNodeElement !== null) {
                    rootNode.append(childNodeElement);
                }
            });
        } else {
            rootNode = node[keys[0]];
            this[`_${keys[0]}`] = rootNode;
        }
        return rootNode;
    }

    /**
     * Takes an array of pcui elements, each of which can contain their own child elements, and
     * appends them to this container. These child elements are traversed recursively using
     * _buildDomNode.
     *
     * @param {Array} dom - An array of child pcui elements to append to this container.
     *
     * @example
     * buildDom([
     *     {
     *         child1: pcui.Label()
     *     },
     *     {
     *         root: {
     *             container1: pcui.Container()
     *         },
     *         children: [
     *             {
     *                 child2: pcui.Label()
     *             },
     *             {
     *                 child3: pcui.Label()
     *             }
     *         ]
     *     }
     * ]);
     */
    buildDom(dom) {
        dom.forEach((node) => {
            const builtNode = this._buildDomNode(node);
            this.append(builtNode);
        });
    }

    destroy() {
        if (this._destroyed) return;
        this.domContent = null;

        if (this._domResizeHandle) {
            this._domResizeHandle.removeEventListener('mousedown', this._domEventResizeStart);
            window.removeEventListener('mousemove', this._domEventResizeMove);
            window.removeEventListener('mouseup', this._domEventResizeEnd);

            this._domResizeHandle.removeEventListener('touchstart', this._domEventResizeTouchStart);
            window.removeEventListener('touchmove', this._domEventResizeTouchMove);
            window.removeEventListener('touchend', this._domEventResizeTouchEnd);
        }

        this._domResizeHandle = null;
        this._domEventResizeStart = null;
        this._domEventResizeMove = null;
        this._domEventResizeEnd = null;
        this._domEventResizeTouchStart = null;
        this._domEventResizeTouchMove = null;
        this._domEventResizeTouchEnd = null;
        this._domEventScroll = null;

        super.destroy();
    }

    set flex(value) {
        if (value === this._flex) return;

        this._flex = value;

        if (value) {
            this.classAdd(FLEX);
        } else {
            this.classRemove(FLEX);
        }
    }

    get flex() {
        return this._flex;
    }

    set grid(value) {
        if (value === this._grid) return;

        this._grid = value;

        if (value) {
            this.classAdd(GRID);
        } else {
            this.classRemove(GRID);
        }
    }

    get grid() {
        return this._grid;
    }

    set scrollable(value) {
        if (this._scrollable === value) return;

        this._scrollable = value;

        if (value) {
            this.classAdd(SCROLLABLE);
        } else {
            this.classRemove(SCROLLABLE);
        }

    }

    get scrollable() {
        return this._scrollable;
    }

    set resizable(value) {
        if (value === this._resizable) return;

        if (VALID_RESIZABLE_VALUES.indexOf(value) === -1) {
            console.error('Invalid resizable value: must be one of ' + VALID_RESIZABLE_VALUES.join(','));
            return;
        }

        // remove old class
        if (this._resizable) {
            this.classRemove(`${RESIZABLE}-${this._resizable}`);
        }

        this._resizable = value;
        this._resizeHorizontally = (value === 'right' || value === 'left');

        if (value) {
            // add resize class and create / append resize handle
            this.classAdd(RESIZABLE);
            this.classAdd(`${RESIZABLE}-${value}`);

            if (!this._domResizeHandle) {
                this._createResizeHandle();
            }
            this._dom.appendChild(this._domResizeHandle);
        } else {
            // remove resize class and resize handle
            this.classRemove(RESIZABLE);
            if (this._domResizeHandle) {
                this._dom.removeChild(this._domResizeHandle);
            }
        }
    }

    get resizable() {
        return this._resizable;
    }

    set resizeMin(value) {
        this._resizeMin = Math.max(0, Math.min(value, this._resizeMax));
    }

    get resizeMin() {
        return this._resizeMin;
    }

    set resizeMax(value) {
        this._resizeMax = Math.max(this._resizeMin, value);
    }

    get resizeMax() {
        return this._resizeMax;
    }

    // The internal dom element used as a the container of all children.
    // Can be overriden by derived classes
    set domContent(value) {
        if (this._domContent === value) return;

        if (this._domContent) {
            this._domContent.removeEventListener('scroll', this._domEventScroll);
        }

        this._domContent = value;

        if (this._domContent) {
            this._domContent.addEventListener('scroll', this._domEventScroll);
        }
    }

    get domContent() {
        return this._domContent;
    }
}

Element$1$1.register('container', Container$2);

var Container$1$1 = Container$2;

const CLASS_LABEL = 'pcui-label';

/**
 * @name Label
 * @class
 * @classdesc The Label is a simple span element that displays some text.
 * @property {string} placeholder Gets / sets the placeholder label that appears on the right of the label.
 * @property {string} text Gets / sets the text of the Label.
 * @property {boolean} renderChanges If true then the Label will flash when its text changes.
 * @augments Element
 * @mixes IBindable
 */
class Label$2 extends Element$1$1 {
    /**
     * Creates a new Label.
     *
     * @param {object} args - The arguments. Extends the pcui.Element constructor arguments. All settable properties can also be set through the constructor.
     * @param {boolean} [args.unsafe] - If true then the innerHTML property will be used to set the text. Otherwise textContent will be used instead.
     * @param {boolean} [args.nativeTooltip] - If true then use the text of the label as the native HTML tooltip.
     * @param {boolean} [args.allowTextSelection] - If true then the label can be clicked to select text.
     */
    constructor(args) {
        if (!args) args = {};

        super(args.dom ? args.dom : document.createElement('span'), args);

        this.class.add(CLASS_LABEL);

        this._unsafe = args.unsafe || false;
        this.text = args.text || args.value || '';

        if (args.allowTextSelection) {
            this.class.add(DEFAULT_MOUSEDOWN);
        }

        if (args.nativeTooltip) {
            this.dom.title = this.text;
        }
        this.placeholder = args.placeholder || null;

        this.renderChanges = args.renderChanges || false;

        this.on('change', () => {
            if (this.renderChanges) {
                this.flash();
            }
        });
    }

    _updateText(value) {
        this.class.remove(MULTIPLE_VALUES);

        if (this._text === value) return false;

        this._text = value;

        if (this._unsafe) {
            this._dom.innerHTML = value;
        } else {
            this._dom.textContent = value;
        }

        this.emit('change', value);

        return true;
    }

    set text(value) {
        if (value === undefined || value === null) {
            value = '';
        }

        const changed = this._updateText(value);

        if (changed && this._binding) {
            this._binding.setValue(value);
        }
    }

    get text() {
        return this._text;
    }

    set value(value) {
        this.text = value;
    }

    get value() {
        return this.text;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        let different = false;
        const value = values[0];
        for (let i = 1; i < values.length; i++) {
            if (values[i] !== value) {
                different = true;
                break;
            }
        }

        if (different) {
            this._updateText('');
            this.class.add(MULTIPLE_VALUES);
        } else {
            this._updateText(values[0]);
        }
    }

    set placeholder(value) {
        if (value) {
            this.dom.setAttribute('placeholder', value);
        } else {
            this.dom.removeAttribute('placeholder');
        }
    }

    get placeholder() {
        return this.dom.getAttribute('placeholder');
    }
}

Element$1$1.register('label', Label$2);

var Label$1$1 = Label$2;

const CLASS_BUTTON = 'pcui-button';

/**
 * @name Button
 * @class
 * @classdesc Represents a button.
 * @augments Element
 * @property {string} [text=Click Me] Gets / sets the text of the button
 * @property {string} size Gets / sets the 'size' type of the button. Can be null or 'small'.
 * @property {string} [icon=E401] The CSS code for an icon for the button. e.g. E401 (notice we omit the '\' character).
 * @mixes IFocusable
 */
class Button$2 extends Element$1$1 {
    /**
     * Creates a new Button.
     *
     * @param {object} args - The arguments. Extends the pcui.Element constructor arguments. All settable properties can also be set through the constructor.
     * @param {boolean} [args.unsafe] - If true then the innerHTML property will be used to set the text. Otherwise textContent will be used instead.
     */
    constructor(args) {
        if (!args) args = {};

        super(args.dom ? args.dom : document.createElement('button'), args);

        this.class.add(CLASS_BUTTON);

        this._unsafe = args.unsafe || false;

        this.text = args.text || '';
        this.size = args.size || null;
        this.icon = args.icon || '';

        this._domEventKeyDown = this._onKeyDown.bind(this);
        this.dom.addEventListener('keydown', this._onKeyDown.bind(this));
    }

    // click on enter
    // blur on escape
    _onKeyDown(evt) {
        if (evt.keyCode === 27) {
            this.blur();
        } else if (evt.keyCode === 13) {
            this._onClick(evt);
        }
    }

    _onClick(evt) {
        this.blur();
        if (this.readOnly) return;

        super._onClick(evt);
    }

    focus() {
        this.dom.focus();
    }

    blur() {
        this.dom.blur();
    }

    destroy() {
        if (this._destroyed) return;

        this.dom.removeEventListener('keydown', this._domEventKeyDown);
        super.destroy();
    }

    set text(value) {
        if (this._text === value) return;
        this._text = value;
        if (this._unsafe) {
            this.dom.innerHTML = value;
        } else {
            this.dom.textContent = value;
        }
    }

    get text() {
        return this._text;
    }

    set icon(value) {
        if (this._icon === value || !value.match(/^E[0-9]{0,4}$/)) return;
        this._icon = value;
        if (value) {
            // set data-icon attribute but first convert the value to a code point
            this.dom.setAttribute('data-icon', String.fromCodePoint(parseInt(value, 16)));
        } else {
            this.dom.removeAttribute('data-icon');
        }
    }

    get icon() {
        return this._icon;
    }

    set size(value) {
        if (this._size === value) return;
        if (this._size) {
            this.class.remove('pcui-' + this._size);
            this._size = null;
        }

        this._size = value;

        if (this._size) {
            this.class.add('pcui-' + this._size);
        }
    }

    get size() {
        return this._size;
    }
}

Element$1$1.register('button', Button$2);

var Button$1$1 = Button$2;

const CLASS_PANEL = 'pcui-panel';
const CLASS_PANEL_HEADER = CLASS_PANEL + '-header';
const CLASS_PANEL_HEADER_TITLE = CLASS_PANEL_HEADER + '-title';
const CLASS_PANEL_CONTENT = CLASS_PANEL + '-content';
const CLASS_PANEL_HORIZONTAL = CLASS_PANEL + '-horizontal';
const CLASS_PANEL_SORTABLE_ICON = CLASS_PANEL + '-sortable-icon';
const CLASS_PANEL_REMOVE = CLASS_PANEL + '-remove';

// TODO: document panelType

/**
 * @event
 * @name Panel#collapse
 * @description Fired when the panel gets collapsed
 */

/**
 * @event
 * @name Panel#expand
 * @description Fired when the panel gets expanded
 */

/**
 * @name Panel
 * @class
 * @classdesc The Panel is a pcui.Container that itself contains a header container and a content container. The
 * respective pcui.Container functions work using the content container. One can also append elements to the header of the Panel.
 * @property {boolean} flex Gets / sets whether the container supports flex layout. Defaults to false. Cannot co-exist with grid.
 * @property {boolean} grid Gets / sets whether the container supports grid layout. Defaults to false. Cannot co-exist with flex.
 * @property {boolean} sortable Gets / sets whether the panel can be reordered
 * @property {boolean} collapseHorizontally Gets / sets whether the panel collapses horizontally - this would be the case for side panels. Defaults to false.
 * @property {boolean} removable Gets / sets whether the panel can be removed
 * @property {number} headerSize=32 The height of the header in pixels. Defaults to 32.
 * @property {string} headerText The header text of the panel. Defaults to the empty string.
 * @property {Container} header Gets the header container.
 * @property {Container} content Gets the content container.
 * @augments Container
 * @mixes IContainer
 * @mixes IFlex
 * @mixes IGrid
 * @mixes ICollapsible
 * @mixes IScrollable
 * @mixes IResizable
 */
class Panel$2 extends Container$1$1 {
    /**
     * Creates a new Panel.
     *
     * @param {object} args - The arguments. Extends the pcui.Container constructor arguments. All settable properties can also be set through the constructor.
     */
    constructor(args) {
        if (!args) args = {};

        const panelArgs = Object.assign({}, args);
        panelArgs.flex = true;
        delete panelArgs.grid;
        delete panelArgs.flexDirection;
        delete panelArgs.scrollable;

        super(panelArgs);

        this.class.add(CLASS_PANEL);

        if (args.panelType) {
            this.class.add(CLASS_PANEL + '-' + args.panelType);
        }

        // do not call reflow on every update while
        // we are initializing
        this._suspendReflow = true;

        // initialize header container
        this._initializeHeader(args);

        // initialize content container
        this._initializeContent(args);

        // header size
        this.headerSize = args.headerSize !== undefined ? args.headerSize : 32;

        this._domEvtDragStart = this._onDragStart.bind(this);
        this._domEvtDragMove = this._onDragMove.bind(this);
        this._domEvtDragEnd = this._onDragEnd.bind(this);

        // collapse related
        this._reflowTimeout = null;
        this._widthBeforeCollapse = null;
        this._heightBeforeCollapse = null;

        this.collapsible = args.collapsible || false;
        this.collapsed = args.collapsed || false;
        this.collapseHorizontally = args.collapseHorizontally || false;

        this._iconSort = null;
        this.sortable = args.sortable || false;

        this._btnRemove = null;
        this.removable = args.removable || args.onRemove || false;

        // set the contents container to be the content DOM element
        // from now on calling append functions on the panel will append themn
        // elements to the contents container
        this.domContent = this._containerContent.dom;

        // execute reflow now after all fields have been initialized
        this._suspendReflow = false;
        this._reflow();
    }

    _initializeHeader(args) {
        // header container
        this._containerHeader = new Container$1$1({
            flex: true,
            flexDirection: 'row',
            class: [CLASS_PANEL_HEADER, FONT_BOLD]
        });

        // header title
        this._labelTitle = new Label$1$1({
            text: args.headerText,
            class: [CLASS_PANEL_HEADER_TITLE, FONT_BOLD]
        });
        this._containerHeader.append(this._labelTitle);

        // use native click listener because the pcui.Element#click event is only fired
        // if the element is enabled. However we still want to catch header click events in order
        // to collapse them
        this._containerHeader.dom.addEventListener('click', this._onHeaderClick.bind(this));

        this.append(this._containerHeader);
    }

    _onHeaderClick(evt) {
        if (!this._collapsible) return;
        if (evt.target !== this.header.dom && evt.target !== this._labelTitle.dom) return;

        // toggle collapsed
        this.collapsed = !this.collapsed;
    }

    _onClickRemove(evt) {
        evt.preventDefault();
        evt.stopPropagation();

        this.emit('click:remove');
    }

    _initializeContent(args) {
        // containers container
        this._containerContent = new Container$1$1({
            class: CLASS_PANEL_CONTENT,
            grid: args.grid,
            flex: args.flex,
            flexDirection: args.flexDirection,
            scrollable: args.scrollable,
            dom: args.container
        });

        this.append(this._containerContent);
    }

    // Collapses or expands the panel as needed
    _reflow() {
        if (this._suspendReflow) {
            return;
        }

        if (this._reflowTimeout) {
            cancelAnimationFrame(this._reflowTimeout);
            this._reflowTimeout = null;
        }

        if (this.hidden || !this.collapsible) return;

        if (this.collapsed && this.collapseHorizontally) {
            this._containerHeader.style.top = -this.headerSize + 'px';
        } else {
            this._containerHeader.style.top = '';
        }

        // we rely on the content width / height and we have to
        // wait for 1 frame before we can get the final values back
        this._reflowTimeout = requestAnimationFrame(() => {
            this._reflowTimeout = null;

            if (this.collapsed) {
                // remember size before collapse
                if (!this._widthBeforeCollapse) {
                    this._widthBeforeCollapse = this.style.width;
                }
                if (!this._heightBeforeCollapse) {
                    this._heightBeforeCollapse = this.style.height;
                }

                if (this._collapseHorizontally) {
                    this.height = '';
                    this.width = this.headerSize;
                } else {
                    this.height = this.headerSize;
                }

                // add collapsed class after getting the width and height
                // because if we add it before then because of overflow:hidden
                // we might get innacurate width/heights.
                this.class.add(COLLAPSED);
            } else {
                // remove collapsed class first and the restore width and height
                // (opposite order of collapsing)
                this.class.remove(COLLAPSED);

                if (this._collapseHorizontally) {
                    this.height = '';
                    if (this._widthBeforeCollapse !== null) {
                        this.width = this._widthBeforeCollapse;
                    }
                } else {
                    if (this._heightBeforeCollapse !== null) {
                        this.height = this._heightBeforeCollapse;
                    }
                }

                // reset before collapse vars
                this._widthBeforeCollapse = null;
                this._heightBeforeCollapse = null;
            }
        });
    }

    _onDragStart(evt) {
        if (this.disabled || this.readOnly) return;

        evt.stopPropagation();
        evt.preventDefault();

        window.addEventListener('mouseup', this._domEvtDragEnd);
        window.addEventListener('mouseleave', this._domEvtDragEnd);
        window.addEventListener('mousemove', this._domEvtDragMove);

        this.emit('dragstart');
        if (this.parent && this.parent._onChildDragStart) {
            this.parent._onChildDragStart(evt, this);
        }
    }

    _onDragMove(evt) {
        this.emit('dragmove');
        if (this.parent && this.parent._onChildDragStart) {
            this.parent._onChildDragMove(evt, this);
        }
    }

    _onDragEnd(evt) {
        window.removeEventListener('mouseup', this._domEvtDragEnd);
        window.removeEventListener('mouseleave', this._domEvtDragEnd);
        window.removeEventListener('mousemove', this._domEvtDragMove);

        if (this._draggedChild === this) {
            this._draggedChild = null;
        }

        this.emit('dragend');
        if (this.parent && this.parent._onChildDragStart) {
            this.parent._onChildDragEnd(evt, this);
        }
    }


    destroy() {
        if (this._destroyed) return;
        if (this._reflowTimeout) {
            cancelAnimationFrame(this._reflowTimeout);
            this._reflowTimeout = null;
        }

        window.removeEventListener('mouseup', this._domEvtDragEnd);
        window.removeEventListener('mouseleave', this._domEvtDragEnd);
        window.removeEventListener('mousemove', this._domEvtDragMove);

        super.destroy();
    }

    set collapsible(value) {
        if (value === this._collapsible) return;

        this._collapsible = value;

        if (value) {
            this.classAdd(COLLAPSIBLE);
        } else {
            this.classRemove(COLLAPSIBLE);
        }

        this._reflow();

        if (this.collapsed) {
            this.emit(value ? 'collapse' : 'expand');
        }

    }

    get collapsible() {
        return this._collapsible;
    }

    set collapsed(value) {
        if (this._collapsed === value) return;

        this._collapsed = value;

        this._reflow();

        if (this.collapsible) {
            this.emit(value ? 'collapse' : 'expand');
        }
    }

    get collapsed() {
        return this._collapsed;
    }

    set sortable(value) {
        if (this._sortable === value) return;

        this._sortable = value;

        if (value) {
            this._iconSort = new Label$1$1({
                class: CLASS_PANEL_SORTABLE_ICON
            });

            this._iconSort.dom.addEventListener('mousedown', this._domEvtDragStart);

            this.header.prepend(this._iconSort);
        } else if (this._iconSort) {
            this._iconSort.destroy();
            this._iconSort = null;
        }
    }

    get sortable() {
        return this._sortable;
    }

    set removable(value) {
        if (this.removable === value) return;

        if (value) {
            this._btnRemove = new Button$1$1({
                icon: 'E289',
                class: CLASS_PANEL_REMOVE
            });
            this._btnRemove.on('click', this._onClickRemove.bind(this));
            this.header.append(this._btnRemove);
        } else {
            this._btnRemove.destroy();
            this._btnRemove = null;
        }
    }

    get removable() {
        return !!this._btnRemove;
    }

    set collapseHorizontally(value) {
        if (this._collapseHorizontally === value) return;

        this._collapseHorizontally = value;
        if (value) {
            this.classAdd(CLASS_PANEL_HORIZONTAL);
        } else {
            this.classRemove(CLASS_PANEL_HORIZONTAL);
        }

        this._reflow();
    }

    get collapseHorizontally() {
        return this._collapseHorizontally;
    }

    get content() {
        return this._containerContent;
    }

    get header() {
        return this._containerHeader;
    }

    set headerText(value) {
        this._labelTitle.text = value;
    }

    get headerText() {
        return this._labelTitle.text;
    }

    set headerSize(value) {
        this._headerSize = value;
        const style = this._containerHeader.dom.style;
        style.height = Math.max(0, value) + 'px';
        style.lineHeight = style.height;
        this._reflow();
    }

    get headerSize() {
        return this._headerSize;
    }
}

Element$1$1.register('panel', Panel$2);

var Element$l = Panel$2;

const CLASS_TEXT_INPUT = 'pcui-text-input';

/**
 * @name TextInput
 * @class
 * @classdesc The TextInput is an input element of type text.
 * @augments Element
 * @mixes IBindable
 * @mixes IFocusable
 * @property {string} placeholder Gets / sets the placeholder label that appears on the right of the input.
 * @property {HTMLElement} input Gets the HTML input element.
 * @property {boolean} renderChanges If true then the TextInput will flash when its text changes.
 * @property {boolean} blurOnEnter=true Gets / sets whether pressing Enter will blur (unfocus) the field. Defaults to true.
 * @property {boolean} blurOnEscape=true Gets / sets whether pressing Escape will blur (unfocus) the field. Defaults to true.
 * @property {boolean} keyChange Gets / sets whether any key up event will cause a change event to be fired.} args
 * @property {Function} onValidate A function that validates the value that is entered into the input and returns true if it is valid or false otherwise.
 * If false then the input will be set in an error state and the value will not propagate to the binding.
 */
class TextInput$2 extends Element$1$1 {
    /**
     * Creates a new TextInput.
     *
     * @param {object} args - The arguments. Extends the pcui.Element constructor arguments. All settable properties can also be set through the constructor.
     */
    constructor(args) {
        if (!args) args = {};
        super(args.dom ? args.dom : document.createElement('div'), args);

        this.class.add(CLASS_TEXT_INPUT);

        let input = args.input;
        if (!input) {
            input = document.createElement('input');
            input.type = 'text';
        }

        input.ui = this;
        input.tabIndex = 0;
        input.autocomplete = "off";
        this._domInput = input;

        this._domEvtChange = this._onInputChange.bind(this);
        this._domEvtFocus = this._onInputFocus.bind(this);
        this._domEvtBlur = this._onInputBlur.bind(this);
        this._domEvtKeyDown = this._onInputKeyDown.bind(this);
        this._domEvtKeyUp = this._onInputKeyUp.bind(this);
        this._domEvtCtxMenu = this._onInputCtxMenu.bind(this);

        this._domInput.addEventListener('change', this._domEvtChange);
        this._domInput.addEventListener('focus', this._domEvtFocus);
        this._domInput.addEventListener('blur', this._domEvtBlur);
        this._domInput.addEventListener('keydown', this._domEvtKeyDown);
        this._domInput.addEventListener('contextmenu', this._domEvtCtxMenu, false);
        this.dom.appendChild(this._domInput);

        this._suspendInputChangeEvt = false;

        if (args.value !== undefined) {
            this.value = args.value;
        }
        this.placeholder = args.placeholder || null;
        this.renderChanges = args.renderChanges || false;
        this.blurOnEnter = (args.blurOnEnter !== undefined ? args.blurOnEnter : true);
        this.blurOnEscape = (args.blurOnEscape !== undefined ? args.blurOnEscape : true);
        this.keyChange = args.keyChange || false;
        this._prevValue = null;

        if (args.onValidate) {
            this.onValidate = args.onValidate;
        }

        this.on('change', () => {
            if (this.renderChanges) {
                this.flash();
            }
        });

        this.on('disable', this._updateInputReadOnly.bind(this));
        this.on('enable', this._updateInputReadOnly.bind(this));
        this.on('readOnly', this._updateInputReadOnly.bind(this));
        this._updateInputReadOnly();
    }

    _onInputChange(evt) {
        if (this._suspendInputChangeEvt) return;

        if (this._onValidate) {
            const error = !this._onValidate(this.value);
            this.error = error;
            if (error) {
                return;
            }
        } else {
            this.error = false;
        }

        this.emit('change', this.value);

        if (this._binding) {
            this._binding.setValue(this.value);
        }
    }

    _onInputFocus(evt) {
        this.class.add(FOCUS);
        this.emit('focus', evt);
        this._prevValue = this.value;
    }

    _onInputBlur(evt) {
        this.class.remove(FOCUS);
        this.emit('blur', evt);
    }

    _onInputKeyDown(evt) {
        if (evt.keyCode === 13 && this.blurOnEnter) {
            // do not fire input change event on blur
            // if keyChange is true (because a change event)
            // will have already been fired before for the current
            // value
            this._suspendInputChangeEvt = this.keyChange;
            this._domInput.blur();
            this._suspendInputChangeEvt = false;
        } else if (evt.keyCode === 27) {
            this._suspendInputChangeEvt = true;
            const prev = this._domInput.value;
            this._domInput.value = this._prevValue;
            this._suspendInputChangeEvt = false;

            // manually fire change event
            if (this.keyChange && prev !== this._prevValue) {
                this._onInputChange(evt);
            }

            if (this.blurOnEscape) {
                this._domInput.blur();
            }
        }

        this.emit('keydown', evt);
    }

    _onInputKeyUp(evt) {
        if (evt.keyCode !== 27) {
            this._onInputChange(evt);
        }

        this.emit('keyup', evt);
    }

    _onInputCtxMenu(evt) {
        this._domInput.select();
    }

    _updateInputReadOnly() {
        const readOnly = !this.enabled || this.readOnly;
        if (readOnly) {
            this._domInput.setAttribute('readonly', true);
        } else {
            this._domInput.removeAttribute('readonly');
        }
    }

    _updateValue(value) {
        this.class.remove(MULTIPLE_VALUES);

        if (value && typeof (value) === 'object') {
            if (Array.isArray(value)) {
                let isObject = false;
                for (let i = 0; i < value.length; i++) {
                    if (value[i] && typeof value[i] === 'object') {
                        isObject = true;
                        break;
                    }
                }

                value = isObject ? '[Not available]' : value.map((val) => {
                    return val === null ? 'null' : val;
                }).join(',');
            } else {
                value = '[Not available]';
            }
        }

        if (value === this.value) return false;

        this._suspendInputChangeEvt = true;
        this._domInput.value = (value === null || value === undefined) ? '' : value;
        this._suspendInputChangeEvt = false;

        this.emit('change', value);

        return true;
    }

    /**
     * @name TextInput#focus
     * @description Focuses the Element.
     * @param {boolean} select - If true then this will also select the text after focusing.
     */
    focus(select) {
        this._domInput.focus();
        if (select) {
            this._domInput.select();
        }
    }

    /**
     * @name TextInput#blur
     * @description Blurs (unfocuses) the Element.
     */
    blur() {
        this._domInput.blur();
    }

    destroy() {
        if (this._destroyed) return;
        this._domInput.removeEventListener('change', this._domEvtChange);
        this._domInput.removeEventListener('focus', this._domEvtFocus);
        this._domInput.removeEventListener('blur', this._domEvtBlur);
        this._domInput.removeEventListener('keydown', this._domEvtKeyDown);
        this._domInput.removeEventListener('keyup', this._domEvtKeyUp);
        this._domInput.removeEventListener('contextmenu', this._domEvtCtxMenu);
        this._domInput = null;

        super.destroy();
    }

    set value(value) {
        const changed = this._updateValue(value);

        if (changed) {
            // reset error
            this.error = false;
        }

        if (changed && this._binding) {
            this._binding.setValue(value);
        }
    }

    get value() {
        return this._domInput.value;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        let different = false;
        const value = values[0];
        for (let i = 1; i < values.length; i++) {
            if (values[i] !== value) {
                different = true;
                break;
            }
        }

        if (different) {
            this._updateValue(null);
            this.class.add(MULTIPLE_VALUES);
        } else {
            this._updateValue(values[0]);
        }
    }

    set placeholder(value) {
        if (value) {
            this.dom.setAttribute('placeholder', value);
        } else {
            this.dom.removeAttribute('placeholder');
        }
    }

    get placeholder() {
        return this.dom.getAttribute('placeholder');
    }

    set keyChange(value) {
        if (this._keyChange === value) return;

        this._keyChange = value;
        if (value) {
            this._domInput.addEventListener('keyup', this._domEvtKeyUp);
        } else {
            this._domInput.removeEventListener('keyup', this._domEvtKeyUp);
        }
    }

    get keyChange() {
        return this._keyChange;
    }

    get input() {
        return this._domInput;
    }

    set onValidate(value) {
        this._onValidate = value;
    }

    get onValidate() {
        return this._onValidate;
    }
}

Element$1$1.register('string', TextInput$2, { renderChanges: true });

var TextInput$1$1 = TextInput$2;

const CLASS_NUMERIC_INPUT = 'pcui-numeric-input';
const CLASS_NUMERIC_INPUT_SLIDER_CONTROL = CLASS_NUMERIC_INPUT + '-slider-control';
const CLASS_NUMERIC_INPUT_SLIDER_CONTROL_ACTIVE = CLASS_NUMERIC_INPUT_SLIDER_CONTROL + '-active';
const CLASS_NUMERIC_INPUT_SLIDER_CONTROL_HIDDEN = CLASS_NUMERIC_INPUT_SLIDER_CONTROL + '-hidden';

const REGEX_COMMA = /,/g;

/**
 * @name NumericInput
 * @class
 * @classdesc The NumericInput represents an input element that holds numbers.
 * @property {number} [min=0] Gets / sets the minimum value this field can take.
 * @property {number} [max=1] Gets / sets the maximum value this field can take.
 * @property {number} [precision=7] Gets / sets the maximum number of decimals a value can take.
 * @property {number} [step=0.01] Gets / sets the amount that the value will be increased or decreased when using the arrow keys. Holding Shift will use 10x the step.
 * @property {boolean} [hideSlider=true] Hide the input mouse drag slider.
 * @augments TextInput
 */
class NumericInput$1 extends TextInput$1$1 {
    /**
     * Creates a new NumericInput.
     *
     * @param {object} args - The arguments. Extends the pcui.TextInput constructor arguments.
     * @param {boolean} [args.allowNull] - Gets / sets whether the value can be null. If not then it will be 0 instead of null.
     */
    constructor(args) {
        // make copy of args
        args = Object.assign({}, args);
        const value = args.value;
        // delete value because we want to set it after
        // the other arguments
        delete args.value;
        const renderChanges = args.renderChanges || false;
        delete args.renderChanges;

        super(args);

        this.class.add(CLASS_NUMERIC_INPUT);

        this._min = args.min !== undefined ? args.min : null;
        this._max = args.max !== undefined ? args.max : null;
        this._allowNull = args.allowNull || false;
        this._precision = Number.isFinite(args.precision) ? args.precision : 7;

        if (Number.isFinite(args.step)) {
            this._step = args.step;
        } else if (Number.isFinite(args.precision)) {
            this._step = 1 / Math.pow(10, args.precision);
        } else {
            this._step = 1;
        }

        this._oldValue = undefined;
        this.value = value;

        this._historyCombine = false;
        this._historyPostfix = null;
        this._sliderPrevValue = 0;

        this.renderChanges = renderChanges;

        this._domEvtPointerLock = null;
        this._domEvtSliderMouseDown = null;
        this._domEvtSliderMouseUp = null;
        this._domEvtMouseWheel = null;

        if (!args.hideSlider) {
            this._sliderControl = new Element$1$1();
            this._sliderControl.class.add(CLASS_NUMERIC_INPUT_SLIDER_CONTROL);
            this.dom.append(this._sliderControl.dom);

            let sliderUsed = false;
            this._domEvtSliderMouseDown = () => {
                this._sliderControl.dom.requestPointerLock();
                this._sliderMovement = 0.0;
                this._sliderPrevValue = this.value;
                sliderUsed = true;
                if (this.binding) {
                    this._historyCombine = this.binding.historyCombine;
                    this._historyPostfix = this.binding.historyPostfix;

                    this.binding.historyCombine = true;
                    this.binding.historyPostfix = `(${Date.now()})`;
                }
            };

            this._domEvtSliderMouseUp = () => {
                document.exitPointerLock();
                if (!sliderUsed) return;
                sliderUsed = false;
                this.value = this._sliderPrevValue + this._sliderMovement;

                if (this.binding) {
                    this.binding.historyCombine = this._historyCombine;
                    this.binding.historyPostfix = this._historyPostfix;

                    this._historyCombine = false;
                    this._historyPostfix = null;
                }
            };

            this._domEvtPointerLock = this._pointerLockChangeAlert.bind(this);

            this._domEvtMouseWheel = this._updatePosition.bind(this);

            this._sliderControl.dom.addEventListener('mousedown', this._domEvtSliderMouseDown);
            this._sliderControl.dom.addEventListener('mouseup', this._domEvtSliderMouseUp);

            document.addEventListener('pointerlockchange', this._domEvtPointerLock, false);
            document.addEventListener('mozpointerlockchange', this._domEvtPointerLock, false);
        }
    }

    _updatePosition(evt) {
        let movement = 0;
        if (evt.constructor === WheelEvent) {
            movement = evt.deltaY;
        } else if (evt.constructor === MouseEvent) {
            movement = evt.movementX;
        }
        // move one step every 100 pixels
        this._sliderMovement += movement / 100 * this._step;
        this.value = this._sliderPrevValue + this._sliderMovement;
    }

    _onInputChange(evt) {
        // get the content of the input and pass it
        // through our value setter
        this.value = this._domInput.value;
    }

    _onInputKeyDown(evt) {
        if (!this.enabled || this.readOnly) return super._onInputKeyDown(evt);

        // increase / decrease value with arrow keys
        if (evt.keyCode === 38 || evt.keyCode === 40) {
            const inc = (evt.shiftKey ? 10 : 1) * (evt.keyCode === 40 ? -1 : 1);
            this.value += this.step * inc;
            return;
        }

        super._onInputKeyDown(evt);
    }

    _isScrolling() {
        if (!this._sliderControl) return false;
        return (document.pointerLockElement === this._sliderControl.dom ||
            document.mozPointerLockElement === this._sliderControl.dom);
    }

    _pointerLockChangeAlert() {
        if (this._isScrolling()) {
            this._sliderControl.dom.addEventListener("mousemove", this._domEvtMouseWheel, false);
            this._sliderControl.dom.addEventListener("wheel", this._domEvtMouseWheel, false);
            this._sliderControl.class.add(CLASS_NUMERIC_INPUT_SLIDER_CONTROL_ACTIVE);
        } else {
            this._sliderControl.dom.removeEventListener("mousemove", this._domEvtMouseWheel, false);
            this._sliderControl.dom.removeEventListener("wheel", this._domEvtMouseWheel, false);
            this._sliderControl.class.remove(CLASS_NUMERIC_INPUT_SLIDER_CONTROL_ACTIVE);
        }
    }

    _normalizeValue(value) {
        try {
            if (typeof value === 'string') {
                // replace commas with dots (for some international keyboards)
                value = value.replace(REGEX_COMMA, '.');

                // remove spaces
                value = value.replace(/\s/g, '');

                // sanitize input to only allow short mathematical expressions to be evaluated
                value = value.match(/^[*/+\-0-9().]+$/);
                if (value !== null && value[0].length < 20) {
                    var expression = value[0];
                    var operators = ['+', '-', '/', '*'];
                    operators.forEach((operator) => {
                        var expressionArr = expression.split(operator);
                        expressionArr.forEach((_, i) => {
                            expressionArr[i] = expressionArr[i].replace(/^0+/, '');
                        });
                        expression = expressionArr.join(operator);
                    });
                    // eslint-disable-next-line
                    value = Function('"use strict";return (' + expression + ')')();
                }
            }
        } catch (error) {
            value = null;
        }

        if (value === null || isNaN(value)) {
            if (this._allowNull) {
                return null;
            }

            value = 0;
        }

        // clamp between min max
        if (this.min !== null && value < this.min) {
            value = this.min;
        }
        if (this.max !== null && value > this.max) {
            value = this.max;
        }

        // fix precision
        if (this.precision !== null) {
            value = parseFloat(Number(value).toFixed(this.precision));
        }

        return value;
    }

    _updateValue(value, force) {
        const different = (value !== this._oldValue || force);

        // always set the value to the input because
        // we always want it to show an actual number or nothing
        this._oldValue = value;
        this._domInput.value = value;

        this.class.remove(MULTIPLE_VALUES);

        if (different) {
            this.emit('change', value);
        }

        return different;
    }

    set value(value) {
        value = this._normalizeValue(value);

        const forceUpdate = this.class.contains(MULTIPLE_VALUES) && value === null && this._allowNull;
        const changed = this._updateValue(value, forceUpdate);

        if (changed && this.binding) {
            this.binding.setValue(value);
        }
        if (this._sliderControl) {
            this._sliderControl.class.remove(CLASS_NUMERIC_INPUT_SLIDER_CONTROL_HIDDEN);
        }
    }

    get value() {
        const val = super.value;
        return val !== '' ? parseFloat(val) : null;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        let different = false;
        const value = this._normalizeValue(values[0]);
        for (let i = 1; i < values.length; i++) {
            if (value !== this._normalizeValue(values[i])) {
                different = true;
                break;
            }
        }

        if (different) {
            this._updateValue(null);
            this.class.add(MULTIPLE_VALUES);
            if (this._sliderControl) {
                this._sliderControl.class.add(CLASS_NUMERIC_INPUT_SLIDER_CONTROL_HIDDEN);
            }
        } else {
            this._updateValue(value);
            if (this._sliderControl) {
                this._sliderControl.class.remove(CLASS_NUMERIC_INPUT_SLIDER_CONTROL_HIDDEN);
            }
        }
    }

    set min(value) {
        if (this._min === value) return;
        this._min = value;

        // reset value
        if (this._min !== null) {
            this.value = this.value; // eslint-disable-line no-self-assign
        }
    }

    get min() {
        return this._min;
    }

    set max(value) {
        if (this._max === value) return;
        this._max = value;

        // reset value
        if (this._max !== null) {
            this.value = this.value; // eslint-disable-line no-self-assign
        }
    }

    get max() {
        return this._max;
    }

    set precision(value) {
        if (this._precision === value) return;
        this._precision = value;

        // reset value
        if (this._precision !== null) {
            this.value = this.value; // eslint-disable-line no-self-assign
        }
    }

    get precision() {
        return this._precision;
    }

    set step(value) {
        this._step = value;
    }

    get step() {
        return this._step;
    }

    destroy() {
        if (this.destroyed) return;

        if (this._domEvtSliderMouseDown) {
            this._sliderControl.dom.removeEventListener('mousedown', this._domEvtSliderMouseDown);
            this._sliderControl.dom.removeEventListener('mouseup', this._domEvtSliderMouseUp);
        }

        if (this._domEvtMouseWheel) {
            this._sliderControl.dom.removeEventListener("mousemove", this._domEvtMouseWheel, false);
            this._sliderControl.dom.removeEventListener("wheel", this._domEvtMouseWheel, false);
        }

        if (this._domEvtPointerLock) {
            document.removeEventListener('pointerlockchange', this._domEvtPointerLock, false);
            document.removeEventListener('mozpointerlockchange', this._domEvtPointerLock, false);
        }

        super.destroy();
    }
}

Element$1$1.register('number', NumericInput$1, { renderChanges: true });

var NumericInput$1$1 = NumericInput$1;

const CLASS_ARRAY_INPUT = 'pcui-array-input';
const CLASS_ARRAY_EMPTY = 'pcui-array-empty';
const CLASS_ARRAY_SIZE = CLASS_ARRAY_INPUT + '-size';
const CLASS_ARRAY_CONTAINER = CLASS_ARRAY_INPUT + '-items';
const CLASS_ARRAY_ELEMENT = CLASS_ARRAY_INPUT + '-item';
const CLASS_ARRAY_DELETE = CLASS_ARRAY_ELEMENT + '-delete';

/**
 * @event
 * @name ArrayInput#linkElement
 * @param {Element} element - The array element
 * @param {number} index - The index of the array element
 * @param {string} path - The path linked
 * @description Fired when an array element is linked to observers
 */

/**
 * @event
 * @name ArrayInput#unlinkElement
 * @param {Element} element - The array element
 * @param {number} index - The index of the array element
 * @description Fired when an array element is unlinked from observers
 */

/**
 * @name ArrayInput
 * @class
 * @classdesc Element that allows editing an array of values.
 * @property {boolean} renderChanges - If true the input will flash when changed.
 * @augments Element
 * @mixes IBindable
 * @mixes IFocusable
 */
class ArrayInput$1 extends Element$1$1 {
    /**
     * Creates a new ArrayInput.
     *
     * @param {object} args - The arguments.
     * @param {string} [args.type] - The type of values that the array can hold.
     * @param {boolean} [args.fixedSize] - If true then editing the number of elements that the array has will not be allowed.
     * @param {object} [args.elementArgs] - Arguments for each array Element.
     */
    constructor(args) {
        args = Object.assign({}, args);

        // remove binding because we want to set it later
        const binding = args.binding;
        delete args.binding;

        const container = new Container$1$1({
            dom: args.dom,
            flex: true
        });

        super(container.dom, args);

        this._container = container;
        this._container.parent = this;

        this.class.add(CLASS_ARRAY_INPUT, CLASS_ARRAY_EMPTY);

        this._usePanels = args.usePanels || false;

        this._fixedSize = !!args.fixedSize;

        this._inputSize = new NumericInput$1$1({
            class: [CLASS_ARRAY_SIZE],
            placeholder: 'Array Size',
            value: 0,
            hideSlider: true,
            step: 1,
            precision: 0,
            min: 0,
            readOnly: this._fixedSize
        });
        this._inputSize.on('change', this._onSizeChange.bind(this));
        this._inputSize.on('focus', this._onFocus.bind(this));
        this._inputSize.on('blur', this._onBlur.bind(this));
        this._suspendSizeChangeEvt = false;
        this._container.append(this._inputSize);

        this._containerArray = new Container$1$1({
            class: CLASS_ARRAY_CONTAINER,
            hidden: true
        });
        this._containerArray.on('append', () => {
            this._containerArray.hidden = false;
        });
        this._containerArray.on('remove', () => {
            this._containerArray.hidden = this._arrayElements.length === 0;
        });
        this._container.append(this._containerArray);
        this._suspendArrayElementEvts = false;
        this._arrayElementChangeTimeout = null;

        this._getDefaultFn = args.getDefaultFn || null;

        let valueType = args.elementArgs && args.elementArgs.type || args.type;
        if (!ArrayInput$1.DEFAULTS.hasOwnProperty(valueType)) {
            valueType = 'string';
        }

        delete args.dom;

        this._valueType = valueType;
        this._elementType = args.type;
        this._elementArgs = args.elementArgs || args;

        this._arrayElements = [];

        // set binding now
        this.binding = binding;

        this._values = [];

        if (args.value) {
            this.value = args.value;
        }

        this.renderChanges = args.renderChanges || false;
    }

    _onSizeChange(size) {
        // if size is explicitely 0 then add empty class
        // size can also be null with multi-select so do not
        // check just !size
        if (size === 0) {
            this.class.add(CLASS_ARRAY_EMPTY);
        } else {
            this.class.remove(CLASS_ARRAY_EMPTY);
        }

        if (size === null) return;
        if (this._suspendSizeChangeEvt) return;

        // initialize default value for each new array element
        let defaultValue;
        const initDefaultValue = () => {
            if (this._getDefaultFn) {
                defaultValue = this._getDefaultFn();
            } else {
                defaultValue = ArrayInput$1.DEFAULTS[this._valueType];
                if (this._valueType === 'curveset') {
                    defaultValue = utils$1.deepCopy(defaultValue);
                    if (Array.isArray(this._elementArgs.curves)) {
                        for (let i = 0; i < this._elementArgs.curves.length; i++) {
                            defaultValue.keys.push([0, 0]);
                        }
                    }
                } else if (this._valueType === 'gradient') {
                    defaultValue = utils$1.deepCopy(defaultValue);
                    if (this._elementArgs.channels) {
                        for (let i = 0; i < this._elementArgs.channels; i++) {
                            defaultValue.keys.push([0, 1]);
                        }
                    }
                }
            }
        };

        // resize array
        const values = this._values.map((array) => {
            if (!array) {
                array = new Array(size);
                for (let i = 0; i < size; i++) {
                    array[i] = utils$1.deepCopy(ArrayInput$1.DEFAULTS[this._valueType]);
                    if (defaultValue === undefined) initDefaultValue();
                    array[i] = utils$1.deepCopy(defaultValue);
                }
            } else if (array.length < size) {
                const newArray = new Array(size - array.length);
                for (let i = 0; i < newArray.length; i++) {
                    newArray[i] = utils$1.deepCopy(ArrayInput$1.DEFAULTS[this._valueType]);
                    if (defaultValue === undefined) initDefaultValue();
                    newArray[i] = utils$1.deepCopy(defaultValue);
                }
                array = array.concat(newArray);
            } else {
                const newArray = new Array(size);
                for (let i = 0; i < size; i++) {
                    newArray[i] = utils$1.deepCopy(array[i]);
                }
                array = newArray;
            }

            return array;
        });

        if (!values.length) {
            const array = new Array(size);
            for (let i = 0; i < size; i++) {
                array[i] = utils$1.deepCopy(ArrayInput$1.DEFAULTS[this._valueType]);
                if (defaultValue === undefined) initDefaultValue();
                array[i] = utils$1.deepCopy(defaultValue);
            }
            values.push(array);
        }

        this._updateValues(values, true);
    }

    _onFocus() {
        this.emit('focus');
    }

    _onBlur() {
        this.emit('blur');
    }

    _createArrayElement() {
        const args = Object.assign({}, this._elementArgs);
        if (args.binding) {
            args.binding = args.binding.clone();
        } else if (this._binding) {
            args.binding = this._binding.clone();
        }

        // set renderChanges after value is set
        // to prevent flashing on initial value set
        args.renderChanges = false;

        let container;
        if (this._usePanels) {
            container = new Element$l({
                headerText: `[${this._arrayElements.length}]`,
                removable: !this._fixedSize,
                collapsible: true,
                class: [CLASS_ARRAY_ELEMENT, CLASS_ARRAY_ELEMENT + '-' + this._elementType]
            });
        } else {
            container = new Container$1$1({
                flex: true,
                flexDirection: 'row',
                alignItems: 'center',
                class: [CLASS_ARRAY_ELEMENT, CLASS_ARRAY_ELEMENT + '-' + this._elementType]
            });
        }

        if (this._elementType === 'json' && args.attributes) {
            args.attributes = args.attributes.map((attr) => {
                if (!attr.path) return attr;

                // fix paths to include array element index
                attr = Object.assign({}, attr);
                const parts = attr.path.split('.');
                parts.splice(parts.length - 1, 0, this._arrayElements.length);
                attr.path = parts.join('.');

                return attr;
            });
        }

        const element = Element$1$1.create(this._elementType, args);
        container.append(element);

        element.renderChanges = this.renderChanges;

        const entry = {
            container: container,
            element: element
        };

        this._arrayElements.push(entry);

        if (!this._usePanels) {
            if (!this._fixedSize) {
                const btnDelete = new Button$1$1({
                    icon: 'E289',
                    size: 'small',
                    class: CLASS_ARRAY_DELETE,
                    tabIndex: -1 // skip buttons on tab
                });
                btnDelete.on('click', () => {
                    this._removeArrayElement(entry);
                });

                container.append(btnDelete);
            }
        } else {
            container.on('click:remove', () => {
                this._removeArrayElement(entry);
            });
        }

        element.on('change', (value) => {
            this._onArrayElementChange(entry, value);
        });

        this._containerArray.append(container);

        return entry;
    }

    _removeArrayElement(entry) {
        const index = this._arrayElements.indexOf(entry);
        if (index === -1) return;

        // remove row from every array in values
        const values = this._values.map((array) => {
            if (!array) return null;
            array.splice(index, 1);
            return array;
        });

        this._updateValues(values, true);
    }

    _onArrayElementChange(entry, value) {
        if (this._suspendArrayElementEvts) return;

        const index = this._arrayElements.indexOf(entry);
        if (index === -1) return;

        // Set the value to the same row of every array in values.
        this._values.forEach((array) => {
            if (array && array.length > index) {
                array[index] = value;
            }
        });

        // use a timeout here because when our values change they will
        // first emit change events on each array element. However since the
        // whole array changed we are going to fire a 'change' event later from
        // our '_updateValues' function. We only want to emit a 'change' event
        // here when only the array element changed value and not the whole array so
        // wait a bit and fire the change event later otherwise the _updateValues function
        // will cancel this timeout and fire a change event for the whole array instead
        this._arrayElementChangeTimeout = setTimeout(() => {
            this._arrayElementChangeTimeout = null;
            this.emit('change', this.value);
        });
    }

    _linkArrayElement(element, index) {
        const observers = this._binding.observers;
        const paths = this._binding.paths;
        const useSinglePath = paths.length === 1 || observers.length !== paths.length;
        element.unlink();
        element.value = null;

        this.emit('unlinkElement', element, index);

        const path = (useSinglePath ? paths[0] + `.${index}` : paths.map(path => `${path}.${index}`));
        element.link(observers, path);

        this.emit('linkElement', element, index, path);
    }

    _updateValues(values, applyToBinding) {
        this._values = values || [];

        this._suspendArrayElementEvts = true;
        this._suspendSizeChangeEvt = true;

        // apply values to the binding
        if (applyToBinding && this._binding) {
            this._binding.setValues(values);
        }

        // each row of this array holds
        // all the values for that row
        const valuesPerRow = [];
        // holds the length of each array
        const arrayLengths = [];

        values.forEach((array) => {
            if (!array) return;

            arrayLengths.push(array.length);

            array.forEach((item, i) => {
                if (!valuesPerRow[i]) {
                    valuesPerRow[i] = [];
                }

                valuesPerRow[i].push(item);
            });
        });

        let lastElementIndex = -1;
        for (let i = 0; i < valuesPerRow.length; i++) {
            // if the number of values on this row does not match
            // the number of arrays then stop adding rows
            if (valuesPerRow[i].length !== values.length) {
                break;
            }

            // create row if it doesn't exist
            if (!this._arrayElements[i]) {
                this._createArrayElement();
            }

            // bind to observers for that row or just display the values
            if (this._binding && this._binding.observers) {
                this._linkArrayElement(this._arrayElements[i].element, i);
            } else {
                if (valuesPerRow[i].length > 1) {
                    this._arrayElements[i].element.values = valuesPerRow[i];
                } else {
                    this._arrayElements[i].element.value = valuesPerRow[i][0];
                }
            }

            lastElementIndex = i;
        }

        // destory elements that are no longer in our values
        for (let i = this._arrayElements.length - 1; i > lastElementIndex; i--) {
            this._arrayElements[i].container.destroy();
            this._arrayElements.splice(i, 1);
        }


        this._inputSize.values = arrayLengths;

        this._suspendSizeChangeEvt = false;
        this._suspendArrayElementEvts = false;

        if (this._arrayElementChangeTimeout) {
            clearTimeout(this._arrayElementChangeTimeout);
            this._arrayElementChangeTimeout = null;
        }

        this.emit('change', this.value);
    }

    focus() {
        this._inputSize.focus();
    }

    blur() {
        this._inputSize.blur();
    }

    /**
     * @name ArrayInput#forEachArrayElement
     * @description Executes the specified function for each array element.
     * @param {Function} fn - The function with signature (element, index) => bool to execute. If the function returns
     * false then the iteration will early out.
     */
    forEachArrayElement(fn) {
        this._containerArray.forEachChild((container, i) => {
            return fn(container.dom.firstChild.ui, i);
        });
    }

    destroy() {
        if (this._destroyed) return;
        this._arrayElements.length = 0;
        super.destroy();
    }

    // override binding setter to create
    // the same type of binding on each array element too
    set binding(value) {
        super.binding = value;

        this._arrayElements.forEach((entry) => {
            entry.element.binding = value ? value.clone() : null;
        });
    }

    get binding() {
        return super.binding;
    }

    set value(value) {
        if (!Array.isArray(value)) {
            value = [];
        }

        const current = this.value || [];
        if (utils$1.arrayEquals(current, value)) return;

        // update values and binding
        this._updateValues(new Array(this._values.length || 1).fill(value), true);
    }

    get value() {
        // construct value from values of array elements
        return this._arrayElements.map(entry => entry.element.value);
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        if (utils$1.arrayEquals(this._values, values)) return;
        // update values but do not update binding
        this._updateValues(values, false);
    }

    set renderChanges(value) {
        this._renderChanges = value;
        this._arrayElements.forEach((entry) => {
            entry.element.renderChanges = value;
        });
    }

    get renderChanges() {
        return this._renderChanges;
    }
}

ArrayInput$1.DEFAULTS = {
    boolean: false,
    number: 0,
    string: '',
    vec2: [0, 0],
    vec3: [0, 0, 0],
    vec4: [0, 0, 0, 0]
};

for (const type in ArrayInput$1.DEFAULTS) {
    Element$1$1.register(`array:${type}`, ArrayInput$1, { type: type, renderChanges: true });
}
Element$1$1.register('array:select', ArrayInput$1, { type: 'select', renderChanges: true });

var Element$k = ArrayInput$1;

class ElementComponent extends React.Component {
    constructor(props) {
        super(props);
        this.attachElement = (nodeElement, containerElement) => {
            if (!nodeElement)
                return;
            if (this.elementClass === Element$1$1) {
                this.element = new this.elementClass(nodeElement, Object.assign(Object.assign({}, this.props), { container: containerElement, parent: undefined }));
            }
            else {
                this.element = new this.elementClass(Object.assign(Object.assign({}, this.props), { dom: nodeElement, container: containerElement, parent: undefined }));
            }
            if (this.onClick) {
                this.element.on('click', this.onClick);
            }
            if (this.onRemove) {
                this.element.on('click:remove', this.onRemove);
            }
            if (this.onChange) {
                this.element.on('change', this.onChange);
            }
            if (this.props.parent) {
                this.element.parent = this.props.parent;
            }
            if (this.onAttach) {
                this.onAttach();
            }
        };
        this.getPropertyDescriptor = (obj, prop) => {
            let desc;
            do {
                desc = Object.getOwnPropertyDescriptor(obj, prop);
            } while (!desc && (obj = Object.getPrototypeOf(obj)));
            return desc;
        };
        this.elementClass = Element$1$1;
        if (props.onClick) {
            this.onClick = props.onClick;
        }
        if (props.onRemove) {
            this.onRemove = props.onRemove;
        }
        if (props.onChange) {
            this.onChange = props.onChange;
        }
        if (props.link) {
            this.link = props.link;
        }
    }
    componentDidMount() {
        if (this.link) {
            this.element.link(this.link.observer, this.link.path);
        }
    }
    componentDidUpdate(prevProps) {
        Object.keys(this.props).forEach(prop => {
            var propDescriptor = this.getPropertyDescriptor(this.element, prop);
            if (propDescriptor && propDescriptor.set) {
                if (prop === 'value') {
                    this.element._suppressChange = true;
                    // @ts-ignore
                    this.element[prop] = this.props[prop];
                    this.element._suppressChange = false;
                }
                else {
                    // @ts-ignore
                    this.element[prop] = this.props[prop];
                }
            }
        });
        if (prevProps.link !== this.props.link && this.props.link) {
            this.element.link(this.props.link.observer, this.props.link.path);
        }
    }
    render() {
        // @ts-ignore
        return React.createElement("div", { ref: this.attachElement });
    }
}
var ElementComponent$1 = ElementComponent;

class ArrayInput extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$k;
    }
    render() {
        return super.render();
    }
}
ArrayInput.ctor = Element$k;

const CLASS_BOOLEAN_INPUT = 'pcui-boolean-input';
const CLASS_BOOLEAN_INPUT_TICKED = CLASS_BOOLEAN_INPUT + '-ticked';
const CLASS_BOOLEAN_INPUT_TOGGLE = CLASS_BOOLEAN_INPUT + '-toggle';

/**
 * @name BooleanInput
 * @class
 * @classdesc A checkbox element.
 * @property {boolean} renderChanges If true the input will flash when changed.
 * @augments Element
 * @mixes IBindable
 * @mixes IFocusable
 */
class BooleanInput$2 extends Element$1$1 {
    /**
     * Creates a new pcui.BooleanInput.
     *
     * @param {object} args - The arguments.
     * @param {string} [args.type] - The type of checkbox currently can be null or 'toggle'.
     */
    constructor(args) {
        args = Object.assign({
            tabIndex: 0
        }, args);

        super(args.dom ? args.dom : document.createElement('div'), args);

        if (args.type === 'toggle') {
            this.class.add(CLASS_BOOLEAN_INPUT_TOGGLE);
        } else {
            this.class.add(CLASS_BOOLEAN_INPUT);
        }
        this.class.add(NOT_FLEXIBLE);

        this._domEventKeyDown = this._onKeyDown.bind(this);
        this._domEventFocus = this._onFocus.bind(this);
        this._domEventBlur = this._onBlur.bind(this);

        this.dom.addEventListener('keydown', this._domEventKeyDown);
        this.dom.addEventListener('focus', this._domEventFocus);
        this.dom.addEventListener('blur', this._domEventBlur);

        this._value = null;
        if (args.value !== undefined) {
            this.value = args.value;
        }

        this.renderChanges = args.renderChanges;
    }

    _onClick(evt) {
        if (this.enabled) {
            this.focus();
        }

        if (this.enabled && !this.readOnly) {
            this.value = !this.value;
        }

        return super._onClick(evt);
    }

    _onKeyDown(evt) {
        if (evt.keyCode === 27) {
            this.blur();
            return;
        }

        if (!this.enabled || this.readOnly) return;

        if (evt.keyCode === 32) {
            evt.stopPropagation();
            evt.preventDefault();
            this.value = !this.value;
        }
    }

    _onFocus() {
        this.emit('focus');
    }

    _onBlur() {
        this.emit('blur');
    }

    _updateValue(value) {
        this.class.remove(MULTIPLE_VALUES);

        if (value === this.value) return false;

        this._value = value;

        if (value) {
            this.class.add(CLASS_BOOLEAN_INPUT_TICKED);
        } else {
            this.class.remove(CLASS_BOOLEAN_INPUT_TICKED);
        }

        if (this.renderChanges) {
            this.flash();
        }

        this.emit('change', value);

        return true;
    }

    focus() {
        this.dom.focus();
    }

    blur() {
        this.dom.blur();
    }

    destroy() {
        if (this._destroyed) return;

        this.dom.removeEventListener('keydown', this._domEventKeyDown);
        this.dom.removeEventListener('focus', this._domEventFocus);
        this.dom.removeEventListener('blur', this._domEventBlur);

        super.destroy();
    }

    set value(value) {
        const changed = this._updateValue(value);
        if (changed && this._binding) {
            this._binding.setValue(value);
        }
    }

    get value() {
        return this._value;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        let different = false;
        const value = values[0];
        for (let i = 1; i < values.length; i++) {
            if (values[i] !== value) {
                different = true;
                break;
            }
        }

        if (different) {
            this._updateValue(null);
            this.class.add(MULTIPLE_VALUES);
        } else {
            this._updateValue(values[0]);
        }
    }
}

Element$1$1.register('boolean', BooleanInput$2, { renderChanges: true });

var Element$j = BooleanInput$2;

class BooleanInput extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$j;
    }
    render() {
        return super.render();
    }
}
BooleanInput.ctor = Element$j;
var BooleanInput$1 = BooleanInput;

class Button extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Button$1$1;
    }
    render() {
        // @ts-ignore
        return React.createElement("button", { ref: this.attachElement });
    }
}
Button.ctor = Button$1$1;
var Button$1 = Button;

/**
 * @name Canvas
 * @augments Element
 * @class
 * @property {number} id the id to be given to the canvas in the dom
 * @classdesc Represents a Canvas
 */
class Canvas$1 extends Element$1$1 {
    /**
     * Creates a new Canvas.
     *
     * @param {object} args - The arguments. Extends the Element arguments. Any settable property can also be set through the constructor.
     */
    constructor(args) {
        if (!args) args = {};

        super(args.dom ? args.dom : document.createElement('canvas'), args);

        this.dom.classList.add('pcui-canvas');

        if (args.id !== undefined)
            this.dom.id = args.id;

        if (args.tabindex !== undefined)
            this.dom.setAttribute('tabindex', args.tabindex);

        this._width = 300;
        this._height = 150;
        this._ratio = (args.useDevicePixelRatio !== undefined && args.useDevicePixelRatio) ? window.devicePixelRatio : 1;

        // Disable I-bar cursor on click+drag
        this.dom.onselectstart = this.onselectstart;
    }

    onselectstart() {
        return false;
    }

    resize(width, height) {
        if (this._width === width && this._height === height)
            return;

        this._width = width;
        this._height = height;
        this.dom.width = this.pixelWidth;
        this.dom.height = this.pixelHeight;
        this.dom.style.width = width + 'px';
        this.dom.style.height = height + 'px';
        this.emit('resize', width, height);
    }

    set width(value) {
        if (this._width === value)
            return;

        this._width = value;
        this.dom.width = this.pixelWidth;
        this.dom.style.width = value * 'px';
        this.emit('resize', this._width, this._height);
    }

    get width() {
        return this._width;
    }

    set height(value) {
        if (this._height === value)
            return;

        this._height = value;
        this.dom.height = this.pixelHeight;
        this.dom.style.height = value + 'px';
        this.emit('resize', this._width, this._height);
    }

    get height() {
        return this._height;
    }

    get pixelWidth() {
        return Math.floor(this._width * this._ratio);
    }

    get pixelHeight() {
        return Math.floor(this._height * this._ratio);
    }

    get pixelRatio() {
        return this._ratio;
    }
}

Element$1$1.register('canvas', Canvas$1);

var Canvas$1$1 = Canvas$1;

class Canvas extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Canvas$1$1;
    }
    render() {
        //@ts-ignore
        return React.createElement("canvas", { ref: this.attachElement });
    }
}
Canvas.ctor = Canvas$1$1;

const CLASS_ROOT$7 = 'pcui-code';
const CLASS_INNER$1 = CLASS_ROOT$7 + '-inner';

/**
 * @name Code
 * @augments Container
 * @property {string} text The Text to display in the code block
 * @class
 * @classdesc Represents a code block.
 */
class Code$1 extends Container$1$1 {
    /**
     * Creates a new spinner.
     *
     * @param {object} [args] - The arguments
     * @param {string} [args.text] - The text to display in the code block;
     */
    constructor(args) {
        if (!args) args = {};
        super(args);
        this.class.add(CLASS_ROOT$7);

        this._inner = new Label$1$1();
        this.append(this._inner);
        this._inner.class.add(CLASS_INNER$1);
        if (args.text) {
            this.text = args.text;
        }
    }

    set text(value) {
        this._text = value;
        this._inner.text = value;
    }

    get text() {
        return this._text;
    }
}

Element$1$1.register('code', Code$1);

var Element$i = Code$1;

class Code extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$i;
    }
    render() {
        return super.render();
    }
}
Code.ctor = Element$i;
Code.defaultProps = {
    text: 'console.log("hello world");'
};

const CLASS_OVERLAY = 'pcui-overlay';
const CLASS_OVERLAY_INNER = CLASS_OVERLAY + '-inner';
const CLASS_OVERLAY_CLICKABLE = CLASS_OVERLAY + '-clickable';
const CLASS_OVERLAY_TRANSPARENT = CLASS_OVERLAY + '-transparent';
const CLASS_OVERLAY_CONTENT = CLASS_OVERLAY + '-content';

/**
 * @name Overlay
 * @class
 * @classdesc An overlay element.
 * @property {boolean} clickable Whether the overlay can be hidden by clicking on it.
 * @property {boolean} transparent Whether the overlay is transparent.
 * @augments Container
 */
class Overlay$1 extends Container$1$1 {
    /**
     * Creates a new pcui.Overlay.
     *
     * @param {object} args - The arguments.
     */
    constructor(args) {
        if (!args) args = {};
        super(args);

        this.class.add(CLASS_OVERLAY);

        this._domClickableOverlay = document.createElement('div');
        this._domClickableOverlay.ui = this;
        this._domClickableOverlay.classList = CLASS_OVERLAY_INNER;
        this.dom.appendChild(this._domClickableOverlay);

        this._domEventMouseDown = this._onMouseDown.bind(this);
        this._domClickableOverlay.addEventListener('mousedown', this._domEventMouseDown);

        this.domContent = document.createElement('div');
        this.domContent.ui = this;
        this.domContent.classList.add(CLASS_OVERLAY_CONTENT);
        this.dom.appendChild(this.domContent);

        this.clickable = args.clickable || false;
        this.transparent = args.transparent || false;
    }

    _onMouseDown(evt) {
        if (!this.clickable) return;

        // some field might be in focus
        document.body.blur();

        // wait till blur is done
        requestAnimationFrame(() => {
            this.hidden = true;
        });

        evt.preventDefault();
    }

    /**
     * @name Overlay#position
     * @description Position the overlay at specific x, y coordinates.
     * @param {number} x - The x coordinate
     * @param {number} y - The y coordinate
     */
    position(x, y) {
        const area = this._domClickableOverlay.getBoundingClientRect();
        const rect = this.domContent.getBoundingClientRect();

        x = Math.max(0, Math.min(area.width - rect.width, x));
        y = Math.max(0, Math.min(area.height - rect.height, y));

        this.domContent.style.position = 'absolute';
        this.domContent.style.left = `${x}px`;
        this.domContent.style.top = `${y}px`;
    }

    destroy() {
        if (this._destroyed) return;
        this._domClickableOverlay.removeEventListener('mousedown', this._domEventMouseDown);
        super.destroy();
    }

    set clickable(value) {
        if (value) {
            this.class.add(CLASS_OVERLAY_CLICKABLE);
        } else {
            this.class.remove(CLASS_OVERLAY_CLICKABLE);
        }
    }

    get clickable() {
        return this.class.contains(CLASS_OVERLAY_CLICKABLE);
    }

    set transparent(value) {
        if (value) {
            this.class.add(CLASS_OVERLAY_TRANSPARENT);
        } else {
            this.class.remove(CLASS_OVERLAY_TRANSPARENT);
        }
    }

    get transparent() {
        return this.class.contains(CLASS_OVERLAY_TRANSPARENT);
    }
}

Element$1$1.register('overlay', Overlay$1);

var Element$h = Overlay$1;

function _rgb2hsv(rgb) {
    let rr, gg, bb;
    const r = rgb[0] / 255,
        g = rgb[1] / 255,
        b = rgb[2] / 255;
    let h, s;
    const v = Math.max(r, g, b),
        diff = v - Math.min(r, g, b),
        diffc = function (c) {
            return (v - c) / 6 / diff + 1 / 2;
        };

    if (diff === 0) {
        h = s = 0;
    } else {
        s = diff / v;
        rr = diffc(r);
        gg = diffc(g);
        bb = diffc(b);

        if (r === v) {
            h = bb - gg;
        } else if (g === v) {
            h = (1 / 3) + rr - bb;
        } else if (b === v) {
            h = (2 / 3) + gg - rr;
        }
        if (h < 0) {
            h += 1;
        } else if (h > 1) {
            h -= 1;
        }
    }
    return [h, s, v];
}

function _hsv2rgb(hsv) {
    let h = hsv[0];
    let s = hsv[1];
    let v = hsv[2];
    let r, g, b;
    if (h && s === undefined && v === undefined) {
        s = h.s;
        v = h.v;
        h = h.h;
    }
    const i = Math.floor(h * 6);
    const f = h * 6 - i;
    const p = v * (1 - s);
    const q = v * (1 - f * s);
    const t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0:
            r = v;
            g = t;
            b = p;
            break;
        case 1:
            r = q;
            g = v;
            b = p;
            break;
        case 2:
            r = p;
            g = v;
            b = t;
            break;
        case 3:
            r = p;
            g = q;
            b = v;
            break;
        case 4:
            r = t;
            g = p;
            b = v;
            break;
        case 5:
            r = v;
            g = p;
            b = q;
            break;
    }
    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}

const CLASS_COLOR_INPUT = 'pcui-color-input';
const CLASS_NOT_FLEXIBLE = 'pcui-not-flexible';
const CLASS_MULTIPLE_VALUES$1 = 'pcui-multiple-values';

/**
 * @name ColorPicker
 * @augments Element
 * @class
 * @classdesc Represents a color picker
 * @property {number[]} value An optional array of 4 integers containing the RGBA values the picker should be initialised to
 * @property {number} channels=3 Number of color channels; default is 3, changing to 4 adds the option to change the alpha value
 */
class ColorPicker$1 extends Element$1$1 {
    /**
     * Creates a new ColorPicker.
     *
     * @param {object} args - The arguments. Extends the Element arguments. Any settable property can also be set through the constructor.
     */
    constructor(args = {}) {

        super(args.dom ? args.dom : document.createElement('div'), args);

        this.size = 144;
        this.directInput = true;
        this.colorHSV = [0, 0, 0];
        this.pickerChannels = [];
        this.channelsNumber = 4;
        this.changing = false;
        this.dragging = false;

        this.callingCallback = false;

        this.dom.classList.add(CLASS_COLOR_INPUT);
        this.dom.classList.add(CLASS_NOT_FLEXIBLE);

        // this element shows the actual color. The
        // parent element shows the checkerboard pattern
        this._domColor = document.createElement('div');
        this.dom.appendChild(this._domColor);

        this._domEventKeyDown = this._onKeyDown.bind(this);
        this._domEventFocus = this._onFocus.bind(this);
        this._domEventBlur = this._onBlur.bind(this);

        this._pickRectMouseMove = this._pickRectMouseMove.bind(this);
        this._pickRectMouseUp = this._pickRectMouseUp.bind(this);

        this._pickHueMouseMove = this._pickHueMouseMove.bind(this);
        this._pickHueMouseUp = this._pickHueMouseUp.bind(this);

        this._pickOpacityMouseMove = this._pickOpacityMouseMove.bind(this);
        this._pickOpacityMouseUp = this._pickOpacityMouseUp.bind(this);

        this._closePicker = this._closePicker.bind(this);

        this.dom.addEventListener('keydown', this._domEventKeyDown);
        this.dom.addEventListener('focus', this._domEventFocus);
        this.dom.addEventListener('blur', this._domEventBlur);

        this.on('click', () => {
            if (!this.enabled || this.readOnly) return;
            this._openColorPicker();
        });

        this._historyCombine = false;
        this._historyPostfix = null;

        this._value = args.value || [0, 0, 255, 1];
        this._channels = args.channels || 3;
        this._setValue(this._value);

        this._isColorPickerOpen = false;

        this.renderChanges = args.renderChanges || false;

        this.on('change', () => {
            if (this.renderChanges) {
                this.flash();
            }
        });

        // overlay
        this.overlay = new Element$h();
        this.overlay.clickable = true;
        this.overlay.class.add('picker-color');
        this.overlay.center = false;
        this.overlay.transparent = true;
        this.overlay.hidden = true;
        this.dom.appendChild(this.overlay.element);

        // rectangular picker
        this.pickRect = document.createElement('div');
        this.pickRect.classList.add('pick-rect');
        this.overlay.append(this.pickRect);

        this.pickRect.addEventListener('mousedown', function (evt) {
            this._pickRectMouseMove(evt);

            window.addEventListener('mousemove', this._pickRectMouseMove, false);
            window.addEventListener('mouseup', this._pickRectMouseUp, false);

            evt.stopPropagation();
            evt.preventDefault();
            this.dragging = true;
            this.emit('picker:color:start');
        }.bind(this));

        // white
        this.pickRectWhite = document.createElement('div');
        this.pickRectWhite.classList.add('white');
        this.pickRect.appendChild(this.pickRectWhite);

        // black
        this.pickRectBlack = document.createElement('div');
        this.pickRectBlack.classList.add('black');
        this.pickRect.appendChild(this.pickRectBlack);

        // handle
        this.pickRectHandle = document.createElement('div');
        this.pickRectHandle.classList.add('handle');
        this.pickRect.appendChild(this.pickRectHandle);

        // hue (rainbow) picker
        this.pickHue = document.createElement('div');
        this.pickHue.classList.add('pick-hue');
        this.overlay.append(this.pickHue);

        // hue drag start
        this.pickHue.addEventListener('mousedown', function (evt) {
            this._pickHueMouseMove(evt);

            window.addEventListener('mousemove', this._pickHueMouseMove, false);
            window.addEventListener('mouseup', this._pickHueMouseUp, false);

            evt.stopPropagation();
            evt.preventDefault();
            this.dragging = true;
            this.emit('picker:color:start');
        }.bind(this));

        // handle
        this.pickHueHandle = document.createElement('div');
        this.pickHueHandle.classList.add('handle');
        this.pickHue.appendChild(this.pickHueHandle);


        // opacity (gradient) picker
        this.pickOpacity = document.createElement('div');
        this.pickOpacity.classList.add('pick-opacity');
        this.overlay.append(this.pickOpacity);

        // opacoty drag start
        this.pickOpacity.addEventListener('mousedown', function (evt) {
            this._pickOpacityMouseMove(evt);

            window.addEventListener('mousemove', this._pickOpacityMouseMove, false);
            window.addEventListener('mouseup', this._pickOpacityMouseUp, false);

            evt.stopPropagation();
            evt.preventDefault();
            this.dragging = true;
            this.emit('picker:color:start');
        }.bind(this));

        // handle
        this.pickOpacityHandle = document.createElement('div');
        this.pickOpacityHandle.classList.add('handle');
        this.pickOpacity.appendChild(this.pickOpacityHandle);


        // fields
        this.panelFields = document.createElement('div');
        this.panelFields.classList.add('fields');
        this.overlay.append(this.panelFields);

        this.evtColorPick = null;
        this.evtColorToPicker = null;
        this.evtColorPickStart = null;
        this.evtColorPickEnd = null;

        this.overlay.on('hide', function () {
            this.evtColorPick.unbind();
            this.evtColorPick = null;

            this.evtColorToPicker.unbind();
            this.evtColorToPicker = null;

            this.evtColorPickStart.unbind();
            this.evtColorPickStart = null;

            this.evtColorPickEnd.unbind();
            this.evtColorPickEnd = null;
        }.bind(this));

        // R
        this.fieldR = new NumericInput$1$1({
            precision: 1,
            step: 1,
            min: 0,
            max: 255
        });

        this.pickerChannels.push(this.fieldR);
        this.fieldR.renderChanges = false;
        this.fieldR.placeholder = 'r';
        this.fieldR.flexGrow = 1;
        this.fieldR.class.add('field', 'field-r');
        this.fieldR.on('change', this._updateRects.bind(this));
        this.panelFields.appendChild(this.fieldR.element);

        // G
        this.fieldG = new NumericInput$1$1({
            precision: 1,
            step: 1,
            min: 0,
            max: 255
        });
        this.pickerChannels.push(this.fieldG);
        this.fieldG.renderChanges = false;
        this.fieldG.placeholder = 'g';
        this.fieldG.class.add('field', 'field-g');
        this.fieldG.on('change', this._updateRects.bind(this));
        this.panelFields.appendChild(this.fieldG.element);

        // B
        this.fieldB = new NumericInput$1$1({
            precision: 1,
            step: 1,
            min: 0,
            max: 255
        });
        this.pickerChannels.push(this.fieldB);
        this.fieldB.renderChanges = false;
        this.fieldB.placeholder = 'b';
        this.fieldB.class.add('field', 'field-b');
        this.fieldB.on('change', this._updateRects.bind(this));
        this.panelFields.appendChild(this.fieldB.element);

        this.fieldA = new NumericInput$1$1({
            precision: 1,
            step: 1,
            min: 0,
            max: 255
        });
        this.pickerChannels.push(this.fieldA);
        this.fieldA.renderChanges = false;
        this.fieldA.placeholder = 'a';
        this.fieldA.class.add('field', 'field-a');
        this.fieldA.on('change', this._updateRectAlpha.bind(this));
        this.panelFields.appendChild(this.fieldA.element);


        // HEX
        this.fieldHex = new TextInput$1$1();
        this.fieldHex.renderChanges = false;
        this.fieldHex.placeholder = '#';
        this.fieldHex.class.add('field', 'field-hex');
        this.fieldHex.on('change', this._updateHex.bind(this));
        this.panelFields.appendChild(this.fieldHex.element);
    }

    focus() {
        this.dom.focus();
    }

    blur() {
        this.dom.blur();
    }

    _onKeyDown(evt) {
        // escape blurs the field
        if (evt.keyCode === 27) {
            this.blur();
        }

        // enter opens the color picker
        if (evt.keyCode !== 13 || !this.enabled || this.readOnly) {
            return;
        }

        evt.stopPropagation();
        evt.preventDefault();

    }

    _onFocus(evt) {
        this.emit('focus');
    }

    _onBlur(evt) {
        this.emit('blur');
    }

    _closePicker() {
        this.overlay.hidden = true;
        this._isColorPickerOpen = false;
        this.focus();
    }

    _getColorRect() {
        return this.overlay.rect;
    }

    _setColorPickerPosition(x, y) {
        this.overlay.position(x, y);
    }

    _setPickerColor(color) {
        if (this.changing || this.dragging)
            return;

        if (this.channelsNumber >= 3) {
            const hsv = _rgb2hsv(color);
            this.colorHSV[0] = hsv[0];
            this.colorHSV[1] = hsv[1];
            this.colorHSV[2] = hsv[2];
        }

        // set fields
        this.directInput = false;
        for (let i = 0; i < color.length; i++) {
            this.pickerChannels[i].value = color[i];
        }
        this.fieldHex.value = this._getHex();
        this.directInput = true;
    }

    _openColorPicker() {
        this._isColorPickerOpen = true;

        // open color picker
        this._callPicker(this.value.map(c => Math.floor(c * 255)));

        // picked color
        this.evtColorPick = this.on('picker:color', (color) => {
            this.value = color.map(c => c / 255);
        });

        this.evtColorPickStart = this.on('picker:color:start', () => {
            if (this.binding) {
                this._historyCombine = this.binding.historyCombine;
                this._historyPostfix = this.binding.historyPostfix;

                this.binding.historyCombine = true;
                this._binding.historyPostfix = `(${Date.now()})`;

            } else {
                this._historyCombine = false;
                this._historyPostfix = null;
            }
        });

        this.evtColorPickEnd = this.on('picker:color:end', () => {
            if (this.binding) {
                this.binding.historyCombine = this._historyCombine;
                this.binding.historyPostfix = this._historyPostfix;
            }
        });

        // position picker
        const rectPicker = this.overlay.dom.getBoundingClientRect();
        const rectElement = this.dom.getBoundingClientRect();
        this._setColorPickerPosition(rectElement.left - rectPicker.width, rectElement.top + 25);

        // color changed, update picker
        this.evtColorToPicker = this.on('change', () => {
            this._setPickerColor(this.value.map(c => Math.floor(c * 255)));
        });
    }

    _callPicker(color) {
        // class for channels
        for (let i = 0; i < 4; i++) {
            if (color.length - 1 < i) {
                this.overlay.class.remove('c-' + (i + 1));
            } else {
                this.overlay.class.add('c-' + (i + 1));
            }
        }

        // number of channels
        this.channelsNumber = color.length;

        if (this.channelsNumber >= 3) {
            const hsv = _rgb2hsv(color);
            this.colorHSV[0] = hsv[0];
            this.colorHSV[1] = hsv[1];
            this.colorHSV[2] = hsv[2];
        }

        // set fields
        this.directInput = false;
        for (let i = 0; i < color.length; i++) {
            this.pickerChannels[i].value = color[i];
        }
        this.fieldHex.value = this._getHex();
        this.directInput = true;

        // show overlay
        this.overlay.hidden = false;

        // focus on hex field
        // TODO
        this.fieldHex._dom.focus();

        setTimeout(function () {
            this.fieldHex._dom.focus();
        }.bind(this), 100);
    }

    _valueToColor(value) {
        value = Math.floor(value * 255);
        return Math.max(0, Math.min(value, 255));

    }

    _setValue(value) {
        const r = this._valueToColor(value[0]);
        const g = this._valueToColor(value[1]);
        const b = this._valueToColor(value[2]);
        const a = value[3];

        if (this._channels === 1) {
            this._domColor.style.backgroundColor = `rgb(${r}, ${r}, ${r})`;
        } else if (this._channels === 3) {
            this._domColor.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
        } else if (this._channels === 4) {
            this._domColor.style.backgroundColor = `rgba(${r}, ${g}, ${b}, ${a})`;
        }
    }

    _updateValue(value) {
        let dirty = false;
        for (let i = 0; i < value.length; i++) {
            if (this._value[i] !== value[i]) {
                dirty = true;
                this._value[i] = value[i];
            }
        }

        this.dom.classList.remove(CLASS_MULTIPLE_VALUES$1);

        if (dirty) {
            this._setValue(value);

            this.emit('change', value);
        }

        return dirty;
    }

    // get hex from channels
    _getHex() {
        let hex = '';
        for (let i = 0; i < this.channelsNumber; i++) {
            hex += ('00' + this.pickerChannels[i].value.toString(16)).slice(-2).toUpperCase();
        }
        return hex;
    }

    // rect drag
    _pickRectMouseMove(evt) {
        this.changing = true;
        const rect = this.pickRect.getBoundingClientRect();
        const x = Math.max(0, Math.min(this.size, Math.floor(evt.clientX - rect.left)));
        const y = Math.max(0, Math.min(this.size, Math.floor(evt.clientY - rect.top)));

        this.colorHSV[1] = x / this.size;
        this.colorHSV[2] = 1.0 - (y / this.size);

        this.directInput = false;
        const rgb = _hsv2rgb([this.colorHSV[0], this.colorHSV[1], this.colorHSV[2]]);
        for (let i = 0; i < 3; i++) {
            this.pickerChannels[i].value = rgb[i];
        }
        this.fieldHex.value = this._getHex();
        this.directInput = true;

        this.pickRectHandle.style.left = Math.max(4, Math.min(this.size - 4, x)) + 'px';
        this.pickRectHandle.style.top = Math.max(4, Math.min(this.size - 4, y)) + 'px';
        this.changing = false;
    }

    // rect drag stop
    _pickRectMouseUp() {
        window.removeEventListener('mousemove', this._pickRectMouseMove, false);
        window.removeEventListener('mouseup', this._pickRectMouseUp, false);
        this.dragging = false;
        this.emit('picker:color:end');
    }

    // hue drag
    _pickHueMouseMove(evt) {
        this.changing = true;
        const rect = this.pickHue.getBoundingClientRect();
        const y = Math.max(0, Math.min(this.size, Math.floor(evt.clientY - rect.top)));
        const h = y / this.size;

        const rgb = _hsv2rgb([h, this.colorHSV[1], this.colorHSV[2]]);
        this.colorHSV[0] = h;

        this.directInput = false;
        for (let i = 0; i < 3; i++) {
            this.pickerChannels[i].value = rgb[i];
        }
        this.fieldHex.value = this._getHex();
        this._updateRects();
        this.directInput = true;
        this.changing = false;
    }

    // hue drag stop
    _pickHueMouseUp() {
        window.removeEventListener('mousemove', this._pickHueMouseMove, false);
        window.removeEventListener('mouseup', this._pickHueMouseUp, false);
        this.dragging = false;
        this.emit('picker:color:end');
    }

    // opacity drag
    _pickOpacityMouseMove(evt) {
        this.changing = true;
        const rect = this.pickOpacity.getBoundingClientRect();
        const y = Math.max(0, Math.min(this.size, Math.floor(evt.clientY - rect.top)));
        const o = 1.0 - y / this.size;

        this.directInput = false;
        this.fieldA.value = Math.max(0, Math.min(255, Math.round(o * 255)));
        this.fieldHex.value = this._getHex();
        this.directInput = true;
        this.changing = false;
    }

    _pickOpacityMouseUp() {
        window.removeEventListener('mousemove', this._pickOpacityMouseMove, false);
        window.removeEventListener('mouseup', this._pickOpacityMouseUp, false);
        this.dragging = false;
        this.emit('picker:color:end');
    }

    _updateHex() {
        if (!this.directInput)
            return;

        this.changing = true;

        const hex = this.fieldHex.value.trim().toLowerCase();
        if (/^([0-9a-f]{2}){3,4}$/.test(hex)) {
            for (let i = 0; i < this.channelsNumber; i++) {
                this.pickerChannels[i].value = parseInt(hex.slice(i * 2, i * 2 + 2), 16);
            }
        }
        this.changing = false;
    }

    _updateRects() {
        const color = this.pickerChannels.map(function (channel) {
            return channel.value || 0;
        }).slice(0, this.channelsNumber);

        const hsv = _rgb2hsv(color);
        if (this.directInput) {
            const sum = color[0] + color[1] + color[2];
            if (sum !== 765 && sum !== 0)
                this.colorHSV[0] = hsv[0];

            this.colorHSV[1] = hsv[1];
            this.colorHSV[2] = hsv[2];

            this.dragging = true;
            this.emit('picker:color:start');
        }

        // hue position
        this.pickHueHandle.style.top = Math.floor(this.size * this.colorHSV[0]) + 'px'; // h

        // rect position
        this.pickRectHandle.style.left = Math.max(4, Math.min(this.size - 4, this.size * this.colorHSV[1])) + 'px'; // s
        this.pickRectHandle.style.top = Math.max(4, Math.min(this.size - 4, this.size * (1.0 - this.colorHSV[2]))) + 'px'; // v

        if (this.channelsNumber >= 3) {
            const plainColor = _hsv2rgb([this.colorHSV[0], 1, 1]).join(',');

            // rect background color
            this.pickRect.style.backgroundColor = 'rgb(' + plainColor + ')';

            // rect handle color
            this.pickRectHandle.style.backgroundColor = 'rgb(' + color.slice(0, 3).join(',') + ')';

            // hue handle color
            this.pickHueHandle.style.backgroundColor = 'rgb(' + plainColor + ')';
        }

        this.callCallback();
    }

    // update alpha handle
    _updateRectAlpha(value) {
        if (this.channelsNumber !== 4)
            return;

        // position
        this.pickOpacityHandle.style.top = Math.floor(this.size * (1.0 - (Math.max(0, Math.min(255, value)) / 255))) + 'px';

        // color
        this.pickOpacityHandle.style.backgroundColor = 'rgb(' + [value, value, value].join(',') + ')';

        this.callCallback();
    }


    callbackHandle() {
        this.callingCallback = false;

        this.emit('picker:color', this.pickerChannels.map(function (channel) {
            return channel.value || 0;
        }).slice(0, this.channelsNumber));
    }

    callCallback() {
        if (this.callingCallback)
            return;

        this.callingCallback = true;
        setTimeout(this.callbackHandle.bind(this), 1000 / 60);
    }

    destroy() {
        if (this._destroyed) return;
        this.dom.removeEventListener('keydown', this._domEventKeyDown);
        this.dom.removeEventListener('focus', this._domEventFocus);
        this.dom.removeEventListener('blur', this._domEventBlur);
        super.destroy();
    }

    set value(value) {
        value = value || [0, 0, 0, 0];
        const changed = this._updateValue(value);

        if (changed && this._binding) {
            this._binding.setValue(value);
        }
    }

    get value() {
        return this._value.slice(0, this._channels);
    }

    set values(values) {
        let different = false;
        const value = values[0];
        for (let i = 1; i < values.length; i++) {
            if (Array.isArray(value)) {
                if (!value.equals(values[i])) {
                    different = true;
                    break;
                }
            } else {
                if (value !== values[i]) {
                    different = true;
                    break;
                }
            }
        }

        if (different) {
            this.value = null;
            this.dom.classList.add(CLASS_MULTIPLE_VALUES$1);
        } else {
            this.value = values[0];
        }
    }

    get values() {
        return this.values;
    }

    set channels(value) {
        if (this._channels === value) return;
        this._channels = Math.max(0, Math.min(value, 4));
        this._setValue(this.value);
    }

    get channels() {
        return this._channels;
    }
}

Element$1$1.register('div', ColorPicker$1);

var Element$g = ColorPicker$1;

class ColorPicker extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$g;
    }
    render() {
        // @ts-ignore
        return React.createElement("div", { ref: this.attachElement });
    }
}
ColorPicker.ctor = Element$g;

class Container extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.getParent = () => {
            return this;
        };
        this.elementClass = Container$1$1;
    }
    componentDidMount() {
        if (this.props.onResize) {
            this.element.on('resize', this.props.onResize);
        }
    }
    render() {
        let elements = React.Children.toArray(this.props.children);
        if (elements.length === 1) {
            elements = React.cloneElement(elements[0], { parent: this.element });
        }
        else if (elements.length > 0) {
            elements = elements.map((element) => React.cloneElement(element, { parent: this.element }));
        }
        // @ts-ignore
        return React.createElement("div", { ref: this.attachElement }, elements);
    }
}
Container.ctor = Container$1$1;
var Container$1 = Container;

const CLASS_ContextMenu = 'pcui-contextmenu';
const CLASS_ContextMenu_active = CLASS_ContextMenu + '-active';
const CLASS_ContextMenu_parent = CLASS_ContextMenu + '-parent';
const CLASS_ContextMenu_child = CLASS_ContextMenu + '-child';
const CLASS_ContextMenu_parent_active = CLASS_ContextMenu_parent + '-active';

/**
 * @name ContextMenu
 * @class
 * @classdesc Represents a context menu.
 */
class ContextMenu$1 {
    /**
     * Creates a new ContextMenu.
     *
     * @param {object} args - The arguments. Extends the pcui.Container constructor arguments. All settable properties can also be set through the constructor.
     * @param {object[]} [args.items] - The array of items used to populate the array. Example item: { 'text': 'Hello World', 'onClick': () => console.log('Hello World') }.
     * @param {object} [args.dom] - The dom element to attach this context menu to.
     * @param {object} [args.triggerElement] - The dom element that will trigger the context menu to open when right clicked. If undefined args.dom will be used.
     */
    constructor(args) {
        if (!args) args = {};

        this._menu = new Container$1$1({ dom: args.dom });
        this._menu.contextMenu = this;
        this.args = args;
        this._menu.class.add(CLASS_ContextMenu);
        var menu = this._menu;

        var removeMenu = () => {
            this._menu.class.remove(CLASS_ContextMenu_active);
            document.removeEventListener('click', removeMenu);
        };

        var triggerElement = args.triggerElement || args.dom.parentElement;
        if (triggerElement) {
            this._contextMenuEvent = triggerElement.addEventListener('contextmenu', (e) => {
                e.preventDefault();
                e.stopPropagation();
                menu.class.add(CLASS_ContextMenu_active);
                var maxMenuHeight = args.items.length * 27.0;
                var maxMenuWidth = 150.0;
                var left = e.clientX;
                var top = e.clientY;
                if (maxMenuHeight + top > window.innerHeight) {
                    var topDiff = (maxMenuHeight + top) - window.innerHeight;
                    top -= topDiff;
                }
                if (maxMenuWidth + left > window.innerWidth) {
                    var leftDiff = (maxMenuWidth + left) - window.innerWidth;
                    left -= leftDiff;
                }
                menu.dom.setAttribute("style", `left: ${left}px; top: ${top}px`);
                document.addEventListener('click', removeMenu);
            });

            var mouseLeaveTimeout;
            menu.dom.addEventListener('mouseleave', () => {
                mouseLeaveTimeout = setTimeout(() => {
                    removeMenu();
                }, 500);
            });
            menu.dom.addEventListener('mouseenter', () => {
                if (mouseLeaveTimeout) {
                    clearTimeout(mouseLeaveTimeout);

                }
            });
        }

        if (!args.items) return;

        args.items.forEach((menuItem, i) => {
            var menuItemElement = new Container$1$1();
            menuItemElement.dom.setAttribute("style", `top: ${i * 27.0}px`);
            if (menuItem.onClick) {
                menuItemElement.on('click', (e) => {
                    e.stopPropagation();
                    removeMenu();
                    menuItem.onClick(e);
                });
            }
            var menuItemLabel = new Label$1$1({ text: menuItem.text });
            menuItemElement.append(menuItemLabel);
            this._menu.dom.append(menuItemElement.dom);
            if (menuItem.items) {
                menuItem.items.forEach((childItem, j) => {
                    var childMenuItemElement = new Container$1$1({ class: CLASS_ContextMenu_child });
                    childMenuItemElement.dom.setAttribute("style", `top: ${j * 27.0}px; left: 150px;`);
                    childMenuItemElement.on('click', (e) => {
                        e.stopPropagation();
                        removeMenu();
                        childItem.onClick(e);
                    });
                    var childMenuItemLabel = new Label$1$1({ text: childItem.text });
                    childMenuItemElement.append(childMenuItemLabel);
                    menuItemElement.append(childMenuItemElement);
                });
                menuItemElement.class.add(CLASS_ContextMenu_parent);
            }
            menuItemElement.dom.addEventListener('mouseover', (e) => {
                // if (!e.fromElement.classList.contains('pcui-contextmenu-parent')) return;
                this._menu.forEachChild(node => node.class.remove(CLASS_ContextMenu_parent_active));
                menuItemElement.class.add(CLASS_ContextMenu_parent_active);

                var maxMenuHeight = menuItem.items ? menuItem.items.length * 27.0 : 0.0;
                var maxMenuWidth = 150.0;
                var left = e.clientX + maxMenuWidth > window.innerWidth ? -maxMenuWidth + 2.0 : maxMenuWidth;
                var top = 0;
                if (e.clientY + maxMenuHeight > window.innerHeight) {
                    top = -maxMenuHeight + 27.0;
                }
                menuItemElement.forEachChild((node, j) => {
                    if (j === 0) return;
                    node.dom.setAttribute("style", `top: ${top + (j - 1) * 27.0}px; left: ${left}px;`);
                });
            });
        });
    }
}

Element$1$1.register('contextmenu', ContextMenu$1);

var Element$f = ContextMenu$1;

class ContextMenu extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.onDivLoaded = (element) => {
            this.element = new Element$f(Object.assign(Object.assign({}, this.props), { dom: element }));
        };
        this.elementClass = Element$f;
    }
    render() {
        return React.createElement("div", { ref: this.onDivLoaded });
    }
}
ContextMenu.ctor = Element$f;

const CLASS_ROOT$6 = 'pcui-divider';

/**
 * @name Divider
 * @augments Element
 * @class
 * @classdesc Represents a vertical division between two elements
 */
class Divider$1 extends Element$1$1 {
    constructor(args) {
        if (!args) args = {};
        super(args.dom ? args.dom : document.createElement('div'), args);

        this.class.add(CLASS_ROOT$6);
    }
}

Element$1$1.register('divider', Divider$1);

var Element$e = Divider$1;

class Divider extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$e;
    }
    render() {
        return super.render();
    }
}
Divider.ctor = Element$e;

// calculate, how many string `a`
// requires edits, to become string `b`
const searchStringEditDistance = function (a, b) {
    // Levenshtein distance
    // https://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
    if (a.length === 0) return b.length;
    if (b.length === 0) return a.length;
    if (a === b) return 0;

    var i, j;
    var matrix = [];

    for (i = 0; i <= b.length; i++)
        matrix[i] = [i];

    for (j = 0; j <= a.length; j++)
        matrix[0][j] = j;

    for (i = 1; i <= b.length; i++) {
        for (j = 1; j <= a.length; j++) {
            if (b.charAt(i - 1) === a.charAt(j - 1)) {
                matrix[i][j] = matrix[i - 1][j - 1];
            } else {
                matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1));
            }
        }
    }

    return matrix[b.length][a.length];
};


// calculate, how many characters string `b`
// contains of a string `a`
const searchCharsContains = function (a, b) {
    if (a === b)
        return a.length;

    var contains = 0;
    var ind = { };
    var i;

    for (i = 0; i < b.length; i++)
        ind[b.charAt(i)] = true;

    for (i = 0; i < a.length; i++) {
        if (ind[a.charAt(i)])
            contains++;
    }

    return contains;
};


// tokenize string into array of tokens
const searchStringTokenize = function (name) {
    var tokens = [];

    // camelCase
    // upperCASE123
    var string = name.replace(/([^A-Z])([A-Z][^A-Z])/g, '$1 $2').replace(/([A-Z0-9]{2,})/g, ' $1');

    // space notation
    // dash-notation
    // underscore_notation
    var parts = string.split(/(\s|\-|_)/g);

    // filter valid tokens
    for (var i = 0; i < parts.length; i++) {
        parts[i] = parts[i].toLowerCase().trim();
        if (parts[i] && parts[i] !== '-' && parts[i] !== '_')
            tokens.push(parts[i]);
    }

    return tokens;
};


const _searchItems = function (items, search, args) {
    var results = [];

    for (var i = 0; i < items.length; i++) {
        var item = items[i];

        // direct hit
        if (item.subFull !== Infinity) {
            results.push(item);

            if (item.edits === Infinity)
                item.edits = 0;

            if (item.sub === Infinity)
                item.sub = item.subFull;

            continue;
        } else if (item.name === search || item.name.indexOf(search) === 0) {
            results.push(item);

            if (item.edits === Infinity)
                item.edits = 0;

            if (item.sub === Infinity)
                item.sub = 0;

            continue;
        }

        // check if name contains enough of search characters
        var contains = searchCharsContains(search, item.name);
        if (contains / search.length < args.containsCharsTolerance)
            continue;

        var editsCandidate = Infinity;
        var subCandidate = Infinity;

        // for each token
        for (var t = 0; t < item.tokens.length; t++) {
            // direct token match
            if (item.tokens[t] === search) {
                editsCandidate = 0;
                subCandidate = t;
                break;
            }

            var edits = searchStringEditDistance(search, item.tokens[t]);

            if ((subCandidate === Infinity || edits < editsCandidate) && item.tokens[t].indexOf(search) !== -1) {
                // search is a substring of a token
                subCandidate = t;
                editsCandidate = edits;
                continue;
            } else if (subCandidate === Infinity && edits < editsCandidate) {
                // new edits candidate, not a substring of a token
                if ((edits / Math.max(search.length, item.tokens[t].length)) <= args.editsDistanceTolerance) {
                    // check if edits tolerance is satisfied
                    editsCandidate = edits;
                }
            }
        }

        // no match candidate
        if (editsCandidate === Infinity)
            continue;

        // add new result
        results.push(item);
        item.edits = item.edits === Infinity ? editsCandidate : item.edits + editsCandidate;
        item.sub = item.sub === Infinity ? subCandidate : item.sub + subCandidate;
    }

    return results;
};

// perform search through items
// items is an array with arrays of two values
// where first value is a string to be searched by
// and second value is an object to be found
//
// [
//     [ 'camera', {object} ],
//     [ 'New Entity', {object} ],
//     [ 'Sun', {object} ]
// ]
//
const searchItems = function (items, search, args) {
    let i;

    search = (search || '').toLowerCase().trim();

    if (!search)
        return [];

    var searchTokens = searchStringTokenize(search);
    if (!searchTokens.length)
        return [];

    args = args || { };
    args.containsCharsTolerance = args.containsCharsTolerance || 0.5;
    args.editsDistanceTolerance = args.editsDistanceTolerance || 0.5;

    var records = [];

    for (i = 0; i < items.length; i++) {
        var subInd = items[i][0].toLowerCase().trim().indexOf(search);

        records.push({
            name: items[i][0],
            item: items[i][1],
            tokens: searchStringTokenize(items[i][0]),
            edits: Infinity,
            subFull: (subInd !== -1) ? subInd : Infinity,
            sub: Infinity
        });
    }

    // search each token
    for (i = 0; i < searchTokens.length; i++)
        records = _searchItems(records, searchTokens[i], args);

    // sort result first by substring? then by edits number
    records.sort((a, b) => {
        if (a.subFull !== b.subFull) {
            return a.subFull - b.subFull;
        } else if (a.sub !== b.sub) {
            return a.sub - b.sub;
        } else if (a.edits !== b.edits) {
            return a.edits - b.edits;
        }
        return a.name.length - b.name.length;
    });

    // return only items without match information
    for (i = 0; i < records.length; i++)
        records[i] = records[i].item;

    // limit number of results
    if (args.hasOwnProperty('limitResults') && records.length > args.limitResults) {
        records = records.slice(0, args.limitResults);
    }

    return records;
};

const CLASS_SELECT_INPUT = 'pcui-select-input';
const CLASS_SELECT_INPUT_CONTAINER_VALUE = CLASS_SELECT_INPUT + '-container-value';
const CLASS_MULTI_SELECT = CLASS_SELECT_INPUT + '-multi';
const CLASS_ALLOW_INPUT = 'pcui-select-input-allow-input';
const CLASS_VALUE = CLASS_SELECT_INPUT + '-value';
const CLASS_ICON$1 = CLASS_SELECT_INPUT + '-icon';
const CLASS_INPUT = CLASS_SELECT_INPUT + '-textinput';
const CLASS_LIST = CLASS_SELECT_INPUT + '-list';
const CLASS_TAGS = CLASS_SELECT_INPUT + '-tags';
const CLASS_TAGS_EMPTY = CLASS_SELECT_INPUT + '-tags-empty';
const CLASS_TAG = CLASS_SELECT_INPUT + '-tag';
const CLASS_TAG_NOT_EVERYWHERE = CLASS_SELECT_INPUT + '-tag-not-everywhere';
const CLASS_SHADOW = CLASS_SELECT_INPUT + '-shadow';
const CLASS_FIT_HEIGHT = CLASS_SELECT_INPUT + '-fit-height';
const CLASS_SELECTED$2 = 'pcui-selected';
const CLASS_HIGHLIGHTED = CLASS_SELECT_INPUT + '-label-highlighted';
const CLASS_CREATE_NEW = CLASS_SELECT_INPUT + '-create-new';
const CLASS_OPEN$1 = 'pcui-open';

const DEFAULT_BOTTOM_OFFSET = 25;


/**
 * @name SelectInput
 * @class
 * @classdesc An input that allows selecting from a dropdown or entering tags.
 * @property {boolean} renderChanges If true then the input will flash when its value changes.
 * @property {string} placeholder The placeholder text to show next to the current value.
 * @property {boolean} multiSelect If true then the input value becomes an array allowing the selection of multiple options. Defaults to false.
 * @property {object[]} options The dropdown options of the input. Contains an array of objects with the following format {v: Any, t: String} where v is the value and t is the text of the option.
 * @property {Array} invalidOptions An array of values against which new values are checked before they are created. If a value is in the array it will not be created.
 * @augments Element
 * @mixes IBindable
 * @mixes IFocusable
 */
class SelectInput$2 extends Element$1$1 {
    /**
     * Creates a new SelectInput.
     *
     * @param {object} args - The arguments. Extends the pcui.Element constructor arguments.
     * @param {boolean} [args.allowNull] - If true then null is a valid input value. Defaults to false.
     * @param {boolean} [args.allowInput] - If true then a text field is shown for the user to search for values or enter new ones. Defaults to false.
     * @param {boolean} [args.allowCreate] - If true then the input allows creating new values from the text field. Only used when allowInput is true. Defaults to false.
     * @param {Function} [args.createFn] - A function to be executed when the user selects to create a new value. The function takes the new value as a parameter.
     * @param {string} [args.createLabelText] - The placeholder text to show when creating a new value. Used when allowInput and allowCreate are both true.
     * @param {string} [args.type] - The type of each value. Can be one of 'string', 'number' or 'boolean'.
     */
    constructor(args) {
        if (!args) args = {};

        // main container
        const container = new Container$1$1({ dom: args.dom });
        super(container.dom, args);
        this._container = container;
        this._container.parent = this;

        this.class.add(CLASS_SELECT_INPUT);

        this._containerValue = new Container$1$1({
            class: CLASS_SELECT_INPUT_CONTAINER_VALUE
        });
        this._container.append(this._containerValue);

        // focus / hover shadow element
        this._domShadow = document.createElement('div');
        this._domShadow.classList.add(CLASS_SHADOW);
        this._containerValue.append(this._domShadow);

        this._allowInput = args.allowInput || false;
        if (this._allowInput) {
            this.class.add(CLASS_ALLOW_INPUT);
        }

        this._allowCreate = args.allowCreate || false;
        this._createFn = args.createFn;
        this._createLabelText = args.createLabelText || null;

        // displays current value
        this._labelValue = new Label$1$1({
            class: CLASS_VALUE,
            tabIndex: 0
        });
        this._labelValue.on('click', this._onValueClick.bind(this));
        this._containerValue.append(this._labelValue);

        this._timeoutLabelValueTabIndex = null;

        // dropdown icon
        this._labelIcon = new Label$1$1({
            class: CLASS_ICON$1,
            hidden: args.allowInput && args.multiSelect
        });
        this._containerValue.append(this._labelIcon);

        // input for searching or adding new entries
        this._input = new TextInput$1$1({
            class: CLASS_INPUT,
            blurOnEnter: false,
            keyChange: true
        });
        this._containerValue.append(this._input);

        this._lastInputValue = '';
        this._suspendInputChange = false;
        this._input.on('change', this._onInputChange.bind(this));
        this._input.on('keydown', this._onInputKeyDown.bind(this));
        this._input.on('focus', this._onFocus.bind(this));
        this._input.on('blur', this._onBlur.bind(this));

        if (args.placeholder) {
            this.placeholder = args.placeholder;
        }

        // dropdown list
        this._containerOptions = new Container$1$1({
            class: CLASS_LIST,
            hidden: true
        });
        this._containerValue.append(this._containerOptions);

        // tags container
        this._containerTags = new Container$1$1({
            class: CLASS_TAGS,
            flex: true,
            flexDirection: 'row',
            hidden: true
        });
        this._container.append(this._containerTags);

        if (args.multiSelect) {
            this.class.add(CLASS_MULTI_SELECT);
            this._containerTags.hidden = false;
        }

        // events
        this._domEvtKeyDown = this._onKeyDown.bind(this);
        this._domEvtFocus = this._onFocus.bind(this);
        this._domEvtBlur = this._onBlur.bind(this);
        this._domEvtMouseDown = this._onMouseDown.bind(this);
        this._domEvtWindowMouseDown = this._onWindowMouseDown.bind(this);
        this._domEvtWheel = this._onWheel.bind(this);

        this._labelValue.dom.addEventListener('keydown', this._domEvtKeyDown);
        this._labelValue.dom.addEventListener('focus', this._domEvtFocus);
        this._labelValue.dom.addEventListener('blur', this._domEvtBlur);
        this._labelValue.dom.addEventListener('mousedown', this._domEvtMouseDown);

        this._containerOptions.dom.addEventListener('wheel', this._domEvtWheel, { passive: true });

        this.on('hide', this.close.bind(this));

        this._type = args.type || 'string';

        this._optionsIndex = {};
        this._labelsIndex = {};
        this._labelHighlighted = null;
        this.invalidOptions = args.invalidOptions;
        this.options = args.options || [];
        this._optionsFn = args.optionsFn;

        this._allowNull = args.allowNull || false;

        this._values = null;

        if (args.value !== undefined) {
            this.value = args.value;
        } else if (args.defaultValue) {
            this.value = args.defaultValue;
        } else {
            this.value = null;
        }

        this.renderChanges = args.renderChanges || false;

        this.on('change', () => {
            this._updateInputFieldsVisibility();

            if (this.renderChanges && !this.multiSelect) {
                this._labelValue.flash();
            }
        });

        this._updateInputFieldsVisibility(false);
    }

    _initializeCreateLabel() {
        const container = new Container$1$1({
            class: CLASS_CREATE_NEW,
            flex: true,
            flexDirection: 'row'
        });

        const label = new Label$1$1({
            text: this._input.value,
            tabIndex: -1
        });
        container.append(label);

        let evtChange = this._input.on('change', (value) => {
            // check if label is destroyed
            // during change event
            if (label.destroyed) return;
            label.text = value;
            if (this.invalidOptions && this.invalidOptions.indexOf(value) !== -1) {
                if (!container.hidden) {
                    container.hidden = true;
                    this._resizeShadow();
                }
            } else {
                if (container.hidden) {
                    container.hidden = false;
                    this._resizeShadow();
                }
            }
        });

        container.on('click', (e) => {
            e.stopPropagation();

            const text = label.text;

            this.focus();
            this.close();

            if (this._createFn) {
                this._createFn(text);
            } else if (text) {
                this._onSelectValue(text);
            }
        });

        label.on('destroy', () => {
            evtChange.unbind();
            evtChange = null;
        });

        const labelCreateText = new Label$1$1({
            text: this._createLabelText
        });
        container.append(labelCreateText);

        this._containerOptions.append(container);

        return container;
    }

    _convertSingleValue(value) {
        if (value === null && this._allowNull) return value;

        if (this._type === 'string') {
            if (!value) {
                value = '';
            } else {
                value = value.toString();
            }
        } else if (this._type === 'number') {
            if (!value) {
                value = 0;
            } else {
                value = parseInt(value, 10);
            }
        } else if (this._type === 'boolean') {
            return !!value;
        }

        return value;
    }

    _convertValue(value) {
        if (value === null && this._allowNull) return value;

        if (this.multiSelect) {
            if (!Array.isArray(value)) return value;

            return value.map(val => this._convertSingleValue(val));
        }

        return this._convertSingleValue(value);
    }

    // toggle dropdown list
    _onValueClick() {
        if (!this.enabled || this.readOnly) return;

        this.toggle();
    }

    // Update our value with the specified selected option
    _onSelectValue(value) {
        value = this._convertSingleValue(value);

        if (!this.multiSelect) {
            this.value = value;
            return;
        }

        if (this._values) {
            let dirty = false;
            this._values.forEach((arr) => {
                if (!arr) {
                    arr = [value];
                    dirty = true;
                } else {
                    if (arr.indexOf(value) === -1) {
                        arr.push(value);
                        dirty = true;
                    }
                }
            });

            if (dirty) {
                this._onMultipleValuesChange(this._values);

                this.emit('change', this.value);

                if (this._binding) {
                    this._binding.addValues([value]);
                }
            }
        } else {
            if (!this._value || !Array.isArray(this._value)) {
                this.value = [value];
            } else {
                if (this._value.indexOf(value) === -1) {
                    this._value.push(value);

                    this._addTag(value);

                    this.emit('change', this.value);

                    if (this._binding) {
                        this._binding.addValues([value]);
                    }
                }
            }
        }
    }

    _highlightLabel(label) {
        if (this._labelHighlighted === label) return;

        if (this._labelHighlighted) {
            this._labelHighlighted.class.remove(CLASS_HIGHLIGHTED);
        }

        this._labelHighlighted = label;

        if (this._labelHighlighted) {
            this._labelHighlighted.class.add(CLASS_HIGHLIGHTED);

                // scroll into view if necessary
            const labelTop = this._labelHighlighted.dom.offsetTop;
            const scrollTop = this._containerOptions.dom.scrollTop;
            if (labelTop < scrollTop) {
                this._containerOptions.dom.scrollTop = labelTop;
            } else if (labelTop + this._labelHighlighted.height > this._containerOptions.height + scrollTop) {
                this._containerOptions.dom.scrollTop = labelTop + this._labelHighlighted.height - this._containerOptions.height;
            }
        }
    }

    // when the value is changed show the correct title
    _onValueChange(value) {
        if (!this.multiSelect) {
            this._labelValue.value = this._optionsIndex[value] || '';

            value = '' + value;
            for (var key in this._labelsIndex) {
                if (key === value) {
                    this._labelsIndex[key].class.add(CLASS_SELECTED$2);
                } else {
                    this._labelsIndex[key].class.remove(CLASS_SELECTED$2);
                }
            }
        } else {
            this._labelValue.value = '';
            this._containerTags.clear();
            this._containerTags.class.add(CLASS_TAGS_EMPTY);

            if (value && Array.isArray(value)) {
                value.forEach((val) => {
                    this._addTag(val);
                    if (this._labelsIndex[val]) {
                        this._labelsIndex[val].class.add(CLASS_SELECTED$2);
                    }
                });

                for (const key in this._labelsIndex) {
                    if (value.indexOf(this._convertSingleValue(key)) !== -1) {
                        this._labelsIndex[key].class.add(CLASS_SELECTED$2);
                    } else {
                        this._labelsIndex[key].class.remove(CLASS_SELECTED$2);
                    }
                }
            }
        }
    }

    _onMultipleValuesChange(values) {
        this._labelValue.value = '';
        this._containerTags.clear();
        this._containerTags.class.add(CLASS_TAGS_EMPTY);

        const tags = {};
        const valueCounts = {};
        values.forEach((arr) => {
            if (!arr) return;
            arr.forEach((val) => {
                if (!tags[val]) {
                    tags[val] = this._addTag(val);
                    valueCounts[val] = 1;
                } else {
                    valueCounts[val]++;
                }
            });
        });

        // add special class to tags that do not exist everywhere
        for (var val in valueCounts) {
            if (valueCounts[val] !== values.length) {
                tags[val].class.add(CLASS_TAG_NOT_EVERYWHERE);
                if (this._labelsIndex[val]) {
                    this._labelsIndex[val].class.remove(CLASS_SELECTED$2);
                }
            }
        }
    }

    _addTag(value) {
        const container = new Container$1$1({
            flex: true,
            flexDirection: 'row',
            class: CLASS_TAG
        });

        container.append(new Label$1$1({
            text: this._optionsIndex[value] || value
        }));

        const btnRemove = new Button$1$1({
            size: 'small',
            icon: 'E132',
            tabIndex: -1
        });

        container.append(btnRemove);

        btnRemove.on('click', () => this._removeTag(container, value));

        this._containerTags.append(container);
        this._containerTags.class.remove(CLASS_TAGS_EMPTY);

        if (this._labelsIndex[value]) {
            this._labelsIndex[value].class.add(CLASS_SELECTED$2);
        }

        container.value = value;

        return container;
    }

    _removeTag(tagElement, value) {
        tagElement.destroy();

        if (this._labelsIndex[value]) {
            this._labelsIndex[value].class.remove(CLASS_SELECTED$2);
        }

        if (this._values) {
            this._values.forEach((arr) => {
                if (!arr) return;
                const idx = arr.indexOf(value);
                if (idx !== -1) {
                    arr.splice(idx, 1);
                }
            });
        } else if (this._value && Array.isArray(this._value)) {
            const idx = this._value.indexOf(value);
            if (idx !== -1) {
                this._value.splice(idx, 1);
            }
        }

        this.emit('change', this.value);

        if (this._binding) {
            this._binding.removeValues([value]);
        }
    }

    _onInputChange(value) {
        if (this._suspendInputChange) return;

        if (this._lastInputValue === value) return;

        this.open();

        this._lastInputValue = value;

        this._filterOptions(value);
    }

    _filterOptions(filter) {
        // first remove all options
        // then search the options for best matches
        // and add them back in best match order
        const containerDom = this._containerOptions.dom;
        while (containerDom.firstChild) {
            containerDom.removeChild(containerDom.lastChild);
        }

        if (filter) {
            const searchOptions = this.options.map((option) => {
                return [option.t, option.v];
            });
            const searchResults = searchItems(searchOptions, filter);
            searchResults.forEach((value) => {
                containerDom.appendChild(this._labelsIndex[value].dom);
            });

        } else {
            this.options.forEach((option) => {
                containerDom.appendChild(this._labelsIndex[option.v].dom);
            });
        }

        // append create label in the end
        if (this._createLabelContainer) {
            containerDom.appendChild(this._createLabelContainer.dom);
        }

        if (containerDom.firstChild) {
            this._highlightLabel(containerDom.firstChild.ui);
        }

        this._resizeShadow();
    }

    _onInputKeyDown(evt) {
        if (evt.keyCode === 13 && this.enabled && !this.readOnly) {
            evt.stopPropagation();
            evt.preventDefault();

            // on enter
            let value;

            if (this._labelHighlighted && this._labelHighlighted._optionValue !== undefined) {
                value = this._labelHighlighted._optionValue;
            } else {
                value = this._input.value;
            }

            if (value !== undefined) {
                this.focus();
                this.close();

                if (this._optionsIndex[value]) {
                    this._onSelectValue(value);
                } else if (this._allowCreate) {
                    if (this._createFn) {
                        this._createFn(value);
                    } else {
                        this._onSelectValue(value);
                    }
                }

                return;
            }
        }

        this._onKeyDown(evt);
    }

    _onWindowMouseDown(evt) {
        if (this.dom.contains(evt.target)) return;
        this.close();
    }

    _onKeyDown(evt) {
        // close options on ESC and blur
        if (evt.keyCode === 27) {
            this.close();
            return;
        }

        // handle tab
        if (evt.keyCode === 9) {
            this.close();
            return;
        }

        if (!this.enabled || this.readOnly) return;

        if (evt.keyCode === 13 && !this._allowInput) {
            if (this._labelHighlighted && this._labelHighlighted._optionValue !== undefined) {
                this._onSelectValue(this._labelHighlighted._optionValue);
                this.close();
            }

            return;
        }

        if ([38, 40].indexOf(evt.keyCode) === -1) {
            return;
        }

        evt.stopPropagation();
        evt.preventDefault();

        if ((this._allowInput || this.multiSelect) && this._containerOptions.hidden) {
            this.open();
            return;
        }

        if (this._containerOptions.hidden) {
            if (!this._options.length) return;

            let index = -1;
            for (let i = 0; i < this._options.length; i++) {
                if (this._options[i].v === this.value) {
                    index = i;
                    break;
                }
            }

            if (evt.keyCode === 38) {
                index--;
            } else if (evt.keyCode === 40) {
                index++;
            }

            if (index >= 0 && index < this._options.length) {
                this._onSelectValue(this._options[index].v);
            }
        } else {
            if (!this._containerOptions.dom.childNodes.length) return;

            if (!this._labelHighlighted) {
                this._highlightLabel(this._containerOptions.dom.childNodes[0].ui);
            } else {
                let highlightedLabelDom = this._labelHighlighted.dom;
                do {
                    if (evt.keyCode === 38) {
                        highlightedLabelDom = highlightedLabelDom.previousSibling;
                    } else if (evt.keyCode === 40) {
                        highlightedLabelDom = highlightedLabelDom.nextSibling;
                    }
                } while (highlightedLabelDom && highlightedLabelDom.ui.hidden);

                if (highlightedLabelDom) {
                    this._highlightLabel(highlightedLabelDom.ui);
                }
            }
        }
    }

    _resizeShadow() {
        this._domShadow.style.height = (this._containerValue.height + this._containerOptions.height) + 'px';
    }

    _onMouseDown() {
        if (!this._allowInput) {
            this.focus();
        }
    }

    _onFocus() {
        this.class.add(FOCUS);
        this.emit('focus');
        if (!this._input.hidden) {
            this.open();
        }
    }

    _onBlur() {
        this.class.remove(FOCUS);
        this.emit('blur');
    }

    _onWheel(evt) {
        // prevent scrolling on other stuff like the viewport
        // when we are scrolling on the select input
        evt.stopPropagation();
    }

    _updateInputFieldsVisibility(focused) {
        let showInput = false;
        let focusInput = false;

        if (this._allowInput) {
            if (focused) {
                showInput = true;
                focusInput = true;
            } else {
                showInput = this.multiSelect || !this._labelsIndex[this.value];
            }
        }

        this._labelValue.hidden = showInput;
        this._labelIcon.hidden = showInput;
        this._input.hidden = !showInput;

        if (focusInput) {
            this._input.focus();
        }

        if (!this._labelValue.hidden) {
            // prevent label from being focused
            // right after input gets unfocused
            this._labelValue.tabIndex = -1;

            if (!this._timeoutLabelValueTabIndex) {
                this._timeoutLabelValueTabIndex = requestAnimationFrame(() => {
                    this._timeoutLabelValueTabIndex = null;
                    this._labelValue.tabIndex = 0;
                });
            }
        }

    }

    focus() {
        if (this._input.hidden) {
            this._labelValue.dom.focus();
        } else {
            this._input.focus();
        }
    }

    blur() {
        if (this._allowInput) {
            this._input.blur();
        } else {
            this._labelValue.dom.blur();
        }
    }

    /**
     * @name SelectInput#open
     * @description Opens the dropdown menu
     */
    open() {
        if (!this._containerOptions.hidden || !this.enabled || this.readOnly) return;

        this._updateInputFieldsVisibility(true);

        // auto-update options if necessary
        if (this._optionsFn) {
            this.options = this._optionsFn();
        }

        if (this._containerOptions.dom.childNodes.length === 0) return;

        // highlight label that displays current value
        this._containerOptions.forEachChild((label) => {
            label.hidden = false;
            if (label._optionValue === this.value) {
                this._highlightLabel(label);
            }
        });
        if (!this._labelHighlighted) {
            this._highlightLabel(this._containerOptions.dom.childNodes[0].ui);
        }

        // show options
        this._containerOptions.hidden = false;
        this.class.add(CLASS_OPEN$1);

        // register keydown on entire window
        window.addEventListener('keydown', this._domEvtKeyDown);
        // register mousedown on entire window
        window.addEventListener('mousedown', this._domEvtWindowMouseDown);

        // if the dropdown list goes below the window show it above the field
        const startField = this._allowInput ? this._input.dom : this._labelValue.dom;
        const rect = startField.getBoundingClientRect();
        let fitHeight = (rect.bottom + this._containerOptions.height + DEFAULT_BOTTOM_OFFSET >= window.innerHeight);
        if (fitHeight && rect.top - this._containerOptions.height < 0) {
            // if showing it above the field means that some of it will not be visible
            // then show it below instead and adjust the max height to the maximum available space
            fitHeight = false;
            this._containerOptions.style.maxHeight = (window.innerHeight - rect.bottom - DEFAULT_BOTTOM_OFFSET) + 'px';
        }

        if (fitHeight) {
            this.class.add(CLASS_FIT_HEIGHT);
        } else {
            this.class.remove(CLASS_FIT_HEIGHT);
        }

        // resize the outer shadow to fit the element and the dropdown list
        // we need this because the dropdown list is position: absolute
        this._resizeShadow();
    }

    /**
     * @name SelectInput#close
     * @description Closes the dropdown menu
     */
    close() {
        // there is a potential bug here if the user has set a max height
        // themselves then this will be overriden
        this._containerOptions.style.maxHeight = '';

        this._highlightLabel(null);

        this._updateInputFieldsVisibility(false);

        this._suspendInputChange = true;
        this._input.value = '';
        if (this._lastInputValue) {
            this._lastInputValue = '';
            this._filterOptions(null);
        }
        this._suspendInputChange = false;

        if (this._containerOptions.hidden) return;

        this._containerOptions.hidden = true;

        this._domShadow.style.height = '';

        this.class.remove(CLASS_OPEN$1);
        window.removeEventListener('keydown', this._domEvtKeyDown);
        window.removeEventListener('mousedown', this._domEvtWindowMouseDown);
    }

    /**
     * @name SelectInput#toggle
     * @description Toggles the dropdown menu
     */
    toggle() {
        if (this._containerOptions.hidden) {
            this.open();
        } else {
            this.close();
        }
    }

    unlink() {
        super.unlink();

        if (!this._containerOptions.hidden) {
            this.close();
        }
    }

    destroy() {
        if (this._destroyed) return;

        this._labelValue.dom.removeEventListener('keydown', this._domEvtKeyDown);
        this._labelValue.dom.removeEventListener('mousedown', this._domEvtMouseDown);
        this._labelValue.dom.removeEventListener('focus', this._domEvtFocus);
        this._labelValue.dom.removeEventListener('blur', this._domEvtBlur);

        this._containerOptions.dom.removeEventListener('wheel', this._domEvtWheel);

        window.removeEventListener('keydown', this._domEvtKeyDown);
        window.removeEventListener('mousedown', this._domEvtWindowMouseDown);

        if (this._timeoutLabelValueTabIndex) {
            cancelAnimationFrame(this._timeoutLabelValueTabIndex);
            this._timeoutLabelValueTabIndex = null;
        }

        super.destroy();
    }

    set options(value) {
        if (this._options && this._options === value) return;

        this._containerOptions.clear();
        this._labelHighlighted = null;
        this._optionsIndex = {};
        this._labelsIndex = {};
        this._options = value;

        // store each option value -> title pair in the optionsIndex
        this._options.forEach((option) => {
            this._optionsIndex[option.v] = option.t;
            if (option.v === '') return;

            const label = new Label$1$1({
                text: option.t,
                tabIndex: -1
            });

            label._optionValue = option.v;

            // store labels in an index too
            this._labelsIndex[option.v] = label;

            // on clicking an option set it as the value and close the dropdown list
            label.on('click', (e) => {
                e.stopPropagation();
                this._onSelectValue(option.v);
                this.close();
            });
            this._containerOptions.append(label);
        });

        this._createLabelContainer = null;
        if (this._createLabelText) {
            this._createLabelContainer = this._initializeCreateLabel();
        }

        if (this.multiSelect && this._values) {
            this._onMultipleValuesChange(this._values);
        } else {
            this._onValueChange(this.value);
        }

        if (this._lastInputValue) {
            this._filterOptions(this._lastInputValue);
        }
    }

    get options() {
        return this._options.slice();
    }

    set invalidOptions(value) {
        this._invalidOptions = value || null;
    }

    get invalidOptions() {
        return this._invalidOptions;
    }

    get multiSelect() {
        return this.class.contains(CLASS_MULTI_SELECT);
    }

    set value(value) {
        this._values = null;

        this._suspendInputChange = true;
        this._input.value = '';
        if (this._lastInputValue) {
            this._lastInputValue = '';
            this._filterOptions(null);
        }
        this._suspendInputChange = false;

        this.class.remove(MULTIPLE_VALUES);

        value = this._convertValue(value);

        if (this._value === value || this.multiSelect && this._value && this._value.equals(value)) {
            // if the value is null because we are showing multiple values
            // but someone wants to actually set the value of all observers to null
            // then make sure we do not return early
            if (value !== null || !this._allowNull || !this.class.contains(MULTIPLE_VALUES)) {
                return;
            }
        }

        this._value = value;
        this._onValueChange(value);

        if (!this._suppressChange) {
            this.emit('change', value);
        }

        if (this._binding) {
            this._binding.setValue(value);
        }
    }

    get value() {
        if (!this.multiSelect) {
            return this._value;
        }

        // if multi-select then construct an array
        // value from the tags that are currently visible
        const result = [];
        this._containerTags.dom.childNodes.forEach((dom) => {
            result.push(dom.ui.value);
        });

        return result;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        values = values.map(this._convertValue.bind(this));

        let different = false;
        const value = values[0];
        const multiSelect = this.multiSelect;

        this._values = null;

        for (let i = 1; i < values.length; i++) {
            if (values[i] !== value && (!multiSelect || !values[i] || !values[i].equals(value))) {
                different = true;
                break;
            }
        }

        if (different) {
            this._labelValue.values = values;

            // show all different tags
            if (multiSelect) {
                this._values = values;
                this._value = null;
                this._onMultipleValuesChange(this._values);
                this.emit('change', this.value);
            } else {
                if (this._value !== null) {
                    this._value = null;
                    this.emit('change', null);
                }
            }

            this.class.add(MULTIPLE_VALUES);
        } else {
            this.value = values[0];
        }
    }

    set placeholder(value) {
        this._input.placeholder = value;
    }

    get placeholder() {
        return this._input.placeholder;
    }
}

Element$1$1.register('select', SelectInput$2, { renderChanges: true });
Element$1$1.register('multiselect', SelectInput$2, { multiSelect: true, renderChanges: true });
Element$1$1.register('tags', SelectInput$2, { allowInput: true, allowCreate: true, multiSelect: true, renderChanges: true });

var Element$d = SelectInput$2;

const CURVE_LINEAR$1 = 0;
const CURVE_SMOOTHSTEP = 1;
const CURVE_CATMULL = 2;
const CURVE_CARDINAL = 3;
const CURVE_SPLINE$1 = 4;
const CURVE_STEP$1 = 5;

const _typeLookup = function () {
  const result = {};
  const names = ['Array', 'Object', 'Function', 'Date', 'RegExp', 'Float32Array'];

  for (let i = 0; i < names.length; i++) result['[object ' + names[i] + ']'] = names[i].toLowerCase();

  return result;
}();

function type(obj) {
  if (obj === null) {
    return 'null';
  }

  const type = typeof obj;

  if (type === 'undefined' || type === 'number' || type === 'string' || type === 'boolean') {
    return type;
  }

  return _typeLookup[Object.prototype.toString.call(obj)];
}

function extend(target, ex) {
  for (const prop in ex) {
    const copy = ex[prop];

    if (type(copy) === 'object') {
      target[prop] = extend({}, copy);
    } else if (type(copy) === 'array') {
      target[prop] = extend([], copy);
    } else {
      target[prop] = copy;
    }
  }

  return target;
}

const math = {
  DEG_TO_RAD: Math.PI / 180,
  RAD_TO_DEG: 180 / Math.PI,
  clamp: function (value, min, max) {
    if (value >= max) return max;
    if (value <= min) return min;
    return value;
  },
  intToBytes24: function (i) {
    const r = i >> 16 & 0xff;
    const g = i >> 8 & 0xff;
    const b = i & 0xff;
    return [r, g, b];
  },
  intToBytes32: function (i) {
    const r = i >> 24 & 0xff;
    const g = i >> 16 & 0xff;
    const b = i >> 8 & 0xff;
    const a = i & 0xff;
    return [r, g, b, a];
  },
  bytesToInt24: function (r, g, b) {
    if (r.length) {
      b = r[2];
      g = r[1];
      r = r[0];
    }

    return r << 16 | g << 8 | b;
  },
  bytesToInt32: function (r, g, b, a) {
    if (r.length) {
      a = r[3];
      b = r[2];
      g = r[1];
      r = r[0];
    }

    return (r << 24 | g << 16 | b << 8 | a) >>> 0;
  },
  lerp: function (a, b, alpha) {
    return a + (b - a) * math.clamp(alpha, 0, 1);
  },
  lerpAngle: function (a, b, alpha) {
    if (b - a > 180) {
      b -= 360;
    }

    if (b - a < -180) {
      b += 360;
    }

    return math.lerp(a, b, math.clamp(alpha, 0, 1));
  },
  powerOfTwo: function (x) {
    return x !== 0 && !(x & x - 1);
  },
  nextPowerOfTwo: function (val) {
    val--;
    val |= val >> 1;
    val |= val >> 2;
    val |= val >> 4;
    val |= val >> 8;
    val |= val >> 16;
    val++;
    return val;
  },
  random: function (min, max) {
    const diff = max - min;
    return Math.random() * diff + min;
  },
  smoothstep: function (min, max, x) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  },
  smootherstep: function (min, max, x) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  },
  roundUp: function (numToRound, multiple) {
    if (multiple === 0) return numToRound;
    return Math.ceil(numToRound / multiple) * multiple;
  },
  between: function (num, a, b, inclusive) {
    const min = Math.min(a, b);
    const max = Math.max(a, b);
    return inclusive ? num >= min && num <= max : num > min && num < max;
  }
};

class CurveEvaluator {
  constructor(curve, time = 0) {
    this._curve = curve;
    this._left = -Infinity;
    this._right = Infinity;
    this._recip = 0;
    this._p0 = 0;
    this._p1 = 0;
    this._m0 = 0;
    this._m1 = 0;

    this._reset(time);
  }

  evaluate(time, forceReset = false) {
    if (forceReset || time < this._left || time >= this._right) {
      this._reset(time);
    }

    let result;
    const type = this._curve.type;

    if (type === CURVE_STEP$1) {
      result = this._p0;
    } else {
      const t = this._recip === 0 ? 0 : (time - this._left) * this._recip;

      if (type === CURVE_LINEAR$1) {
        result = math.lerp(this._p0, this._p1, t);
      } else if (type === CURVE_SMOOTHSTEP) {
        result = math.lerp(this._p0, this._p1, t * t * (3 - 2 * t));
      } else {
        result = this._evaluateHermite(this._p0, this._p1, this._m0, this._m1, t);
      }
    }

    return result;
  }

  _reset(time) {
    const keys = this._curve.keys;
    const len = keys.length;

    if (!len) {
      this._left = -Infinity;
      this._right = Infinity;
      this._recip = 0;
      this._p0 = this._p1 = this._m0 = this._m1 = 0;
    } else {
      if (time < keys[0][0]) {
        this._left = -Infinity;
        this._right = keys[0][0];
        this._recip = 0;
        this._p0 = this._p1 = keys[0][1];
        this._m0 = this._m1 = 0;
      } else if (time >= keys[len - 1][0]) {
        this._left = keys[len - 1][0];
        this._right = Infinity;
        this._recip = 0;
        this._p0 = this._p1 = keys[len - 1][1];
        this._m0 = this._m1 = 0;
      } else {
        let index = 0;

        while (time >= keys[index + 1][0]) {
          index++;
        }

        this._left = keys[index][0];
        this._right = keys[index + 1][0];
        const diff = 1.0 / (this._right - this._left);
        this._recip = isFinite(diff) ? diff : 0;
        this._p0 = keys[index][1];
        this._p1 = keys[index + 1][1];

        if (this._isHermite()) {
          this._calcTangents(keys, index);
        }
      }
    }
  }

  _isHermite() {
    return this._curve.type === CURVE_CATMULL || this._curve.type === CURVE_CARDINAL || this._curve.type === CURVE_SPLINE$1;
  }

  _calcTangents(keys, index) {
    let a;
    const b = keys[index];
    const c = keys[index + 1];
    let d;

    if (index === 0) {
      a = [keys[0][0] + (keys[0][0] - keys[1][0]), keys[0][1] + (keys[0][1] - keys[1][1])];
    } else {
      a = keys[index - 1];
    }

    if (index === keys.length - 2) {
      d = [keys[index + 1][0] + (keys[index + 1][0] - keys[index][0]), keys[index + 1][1] + (keys[index + 1][1] - keys[index][1])];
    } else {
      d = keys[index + 2];
    }

    if (this._curve.type === CURVE_SPLINE$1) {
      const s1_ = 2 * (c[0] - b[0]) / (c[0] - a[0]);
      const s2_ = 2 * (c[0] - b[0]) / (d[0] - b[0]);
      this._m0 = this._curve.tension * (isFinite(s1_) ? s1_ : 0) * (c[1] - a[1]);
      this._m1 = this._curve.tension * (isFinite(s2_) ? s2_ : 0) * (d[1] - b[1]);
    } else {
      const s1 = (c[0] - b[0]) / (b[0] - a[0]);
      const s2 = (c[0] - b[0]) / (d[0] - c[0]);
      const a_ = b[1] + (a[1] - b[1]) * (isFinite(s1) ? s1 : 0);
      const d_ = c[1] + (d[1] - c[1]) * (isFinite(s2) ? s2 : 0);
      const tension = this._curve.type === CURVE_CATMULL ? 0.5 : this._curve.tension;
      this._m0 = tension * (c[1] - a_);
      this._m1 = tension * (d_ - b[1]);
    }
  }

  _evaluateHermite(p0, p1, m0, m1, t) {
    const t2 = t * t;
    const twot = t + t;
    const omt = 1 - t;
    const omt2 = omt * omt;
    return p0 * ((1 + twot) * omt2) + m0 * (t * omt2) + p1 * (t2 * (3 - twot)) + m1 * (t2 * (t - 1));
  }

}

class Curve {
  constructor(data) {
    this.keys = [];
    this.type = CURVE_SMOOTHSTEP;
    this.tension = 0.5;
    this._eval = new CurveEvaluator(this);

    if (data) {
      for (let i = 0; i < data.length - 1; i += 2) {
        this.keys.push([data[i], data[i + 1]]);
      }
    }

    this.sort();
  }

  get length() {
    return this.keys.length;
  }

  add(time, value) {
    const keys = this.keys;
    const len = keys.length;
    let i = 0;

    for (; i < len; i++) {
      if (keys[i][0] > time) {
        break;
      }
    }

    const key = [time, value];
    this.keys.splice(i, 0, key);
    return key;
  }

  get(index) {
    return this.keys[index];
  }

  sort() {
    this.keys.sort(function (a, b) {
      return a[0] - b[0];
    });
  }

  value(time) {
    return this._eval.evaluate(time, true);
  }

  closest(time) {
    const keys = this.keys;
    const length = keys.length;
    let min = 2;
    let result = null;

    for (let i = 0; i < length; i++) {
      const diff = Math.abs(time - keys[i][0]);

      if (min >= diff) {
        min = diff;
        result = keys[i];
      } else {
        break;
      }
    }

    return result;
  }

  clone() {
    const result = new this.constructor();
    result.keys = extend(result.keys, this.keys);
    result.type = this.type;
    result.tension = this.tension;
    return result;
  }

  quantize(precision) {
    precision = Math.max(precision, 2);
    const values = new Float32Array(precision);
    const step = 1.0 / (precision - 1);
    values[0] = this._eval.evaluate(0, true);

    for (let i = 1; i < precision; i++) {
      values[i] = this._eval.evaluate(step * i);
    }

    return values;
  }

  quantizeClamped(precision, min, max) {
    const result = this.quantize(precision);

    for (let i = 0; i < result.length; ++i) {
      result[i] = Math.min(max, Math.max(min, result[i]));
    }

    return result;
  }

}

class CurveSet {
  constructor() {
    this.curves = [];
    this._type = CURVE_SMOOTHSTEP;

    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++) {
        this.curves.push(new Curve(arguments[i]));
      }
    } else {
      if (arguments.length === 0) {
        this.curves.push(new Curve());
      } else {
        const arg = arguments[0];

        if (typeof arg === 'number') {
          for (let i = 0; i < arg; i++) {
            this.curves.push(new Curve());
          }
        } else {
          for (let i = 0; i < arg.length; i++) {
            this.curves.push(new Curve(arg[i]));
          }
        }
      }
    }
  }

  get length() {
    return this.curves.length;
  }

  set type(value) {
    this._type = value;

    for (let i = 0; i < this.curves.length; i++) {
      this.curves[i].type = value;
    }
  }

  get type() {
    return this._type;
  }

  get(index) {
    return this.curves[index];
  }

  value(time, result = []) {
    const length = this.curves.length;
    result.length = length;

    for (let i = 0; i < length; i++) {
      result[i] = this.curves[i].value(time);
    }

    return result;
  }

  clone() {
    const result = new this.constructor();
    result.curves = [];

    for (let i = 0; i < this.curves.length; i++) {
      result.curves.push(this.curves[i].clone());
    }

    result._type = this._type;
    return result;
  }

  quantize(precision) {
    precision = Math.max(precision, 2);
    const numCurves = this.curves.length;
    const values = new Float32Array(precision * numCurves);
    const step = 1.0 / (precision - 1);

    for (let c = 0; c < numCurves; c++) {
      const ev = new CurveEvaluator(this.curves[c]);

      for (let i = 0; i < precision; i++) {
        values[i * numCurves + c] = ev.evaluate(step * i);
      }
    }

    return values;
  }

  quantizeClamped(precision, min, max) {
    const result = this.quantize(precision);

    for (let i = 0; i < result.length; ++i) {
      result[i] = Math.min(max, Math.max(min, result[i]));
    }

    return result;
  }

}

const CLASS_MULTIPLE_VALUES = 'pcui-multiple-values';

const CURVE_LINEAR = 0;
const CURVE_SPLINE = 4;
const CURVE_STEP = 5;

const REGEX_KEYS = /keys/;
const REGEX_TYPE = /type/;
const CLASS_GRADIENT = 'pcui-gradient';

/**
 * @name GradientPicker
 * @augments Element
 * @property {object} value An optional object containing the curves the picker should be initialised to
 * @property {number[]} channels=3 Number of color channels; default is 3, changing to 4 adds the option to change the alpha value
 * @classdesc Represents a gradient picker
 */
class GradientPicker$1 extends Element$1$1 {
    /**
     * Creates a new GradientPicker.
     *
     * @param {object} args - The arguments. Extends the Element arguments. Any settable property can also be set through the constructor.
     */
    constructor(args = {}) {

        super(args.dom ? args.dom : document.createElement('div'), args);

        this.class.add(CLASS_GRADIENT);

        this._canvas = new Canvas$1$1({ useDevicePixelRatio: true });
        this.dom.appendChild(this._canvas.dom);
        this._canvas.parent = this;
        this._canvas.on('resize', this._renderGradient.bind(this));
        this._checkerboardPattern = this.createCheckerboardPattern(this._canvas.dom.getContext('2d'));


        // make sure canvas is the same size as the container element
        // 20 times a second
        this._resizeInterval = setInterval(() => {
            this._canvas.resize(this.width, this.height);
        }, 1000 / 20);

        this._domEventKeyDown = this._onKeyDown.bind(this);
        this._domEventFocus = this._onFocus.bind(this);
        this._domEventBlur = this._onBlur.bind(this);

        this.dom.addEventListener('keydown', this._domEventKeyDown);
        this.dom.addEventListener('focus', this._domEventFocus);
        this.dom.addEventListener('blur', this._domEventBlur);

        this.on('click', () => {
            if (!this.enabled || this.readOnly || this.class.contains(CLASS_MULTIPLE_VALUES)) return;
            this._openGradientPicker();
        });

        this.renderChanges = args.renderChanges || false;

        this.on('change', () => {
            if (this.renderChanges) {
                this.flash();
            }
        });

        // capture this for the event handler
        function genEvtHandler(self, func) {
            return function (evt) {
                func.apply(self, [evt]);
            };
        }

        this.Helpers = {
            rgbaStr: function (colour, scale) {
                if (!scale) {
                    scale = 1;
                }
                let rgba = colour.map(function (element, index) {
                    return index < 3 ? Math.round(element * scale) : element;
                }).join(',');
                for (let i = colour.length; i < 4; ++i) {
                    rgba += ',' + (i < 3 ? scale : 1);
                }
                return 'rgba(' + rgba + ')';
            },

            hexStr: function (clr) {
                return clr.map(function (v) {
                    return ('00' + v.toString(16)).slice(-2).toUpperCase();
                }).join('');
            },

            // rgb(a) -> hsva
            toHsva: function (rgba) {
                const hsva = _rgb2hsv(rgba.map(function (v) {
                    return v * 255;
                }));
                hsva.push(rgba.length > 3 ? rgba[3] : 1);
                return hsva;
            },

            // hsv(1) -> rgba
            toRgba: function (hsva) {
                const rgba = _hsv2rgb(hsva).map(function (v) {
                    return v / 255;
                });
                rgba.push(hsva.length > 3 ? hsva[3] : 1);
                return rgba;
            },

            // calculate the normalized coordinate [x,y] relative to rect
            normalizedCoord: function (widget, x, y) {
                const rect = widget.element.getBoundingClientRect();
                return [
                    (x - rect.left) / rect.width,
                    (y - rect.top) / rect.height
                ];
            }
        };

        this.panel = new Element$l();
        this.panel.class.add('color-panel');
        this.dom.appendChild(this.panel.element);

        this.colorRect = new Canvas$1$1({ useDevicePixelRatio: true });
        this.colorRect.class.add('color-rect');
        this.panel.append(this.colorRect.element);
        this.colorRect.resize(140, 140);

        this.colorHandle = document.createElement('div');
        this.colorHandle.classList.add('color-handle');
        this.panel.append(this.colorHandle);

        this.hueRect = new Canvas$1$1({ useDevicePixelRatio: true });
        this.hueRect.class.add('hue-rect');
        this.panel.append(this.hueRect.element);
        this.hueRect.resize(20, 140);

        this.hueHandle = document.createElement('div');
        this.hueHandle.classList.add('hue-handle');
        this.panel.append(this.hueHandle);

        this.alphaRect = new Canvas$1$1({ useDevicePixelRatio: true });
        this.alphaRect.class.add('alpha-rect');
        this.panel.append(this.alphaRect.element);
        this.alphaRect.resize(20, 140);

        this.alphaHandle = document.createElement('div');
        this.alphaHandle.classList.add('alpha-handle');
        this.panel.append(this.alphaHandle);

        this.fields = document.createElement('div');
        this.fields.classList.add('fields');
        this.panel.append(this.fields);

        this.fieldChangeHandler = genEvtHandler(this, this._onFieldChanged);
        this.hexChangeHandler = genEvtHandler(this, this._onHexChanged);
        this.downHandler = genEvtHandler(this, this._onMouseDown);
        this.moveHandler = genEvtHandler(this, this._onMouseMove);
        this.upHandler = genEvtHandler(this, this._onMouseUp);

        function numberField(label) {
            const field = new NumericInput$1$1({
                precision: 1,
                step: 1,
                min: 0,
                max: 255
            });
            field.renderChanges = false;
            field.placeholder = label;
            field.on('change', this.fieldChangeHandler);
            this.fields.appendChild(field.element);
            return field;
        }

        this.rField = numberField.call(this, 'r');
        this.gField = numberField.call(this, 'g');
        this.bField = numberField.call(this, 'b');
        this.aField = numberField.call(this, 'a');

        this.hexField = new TextInput$1$1({});
        this.hexField.renderChanges = false;
        this.hexField.placeholder = '#';
        this.hexField.on('change', this.hexChangeHandler);
        this.fields.appendChild(this.hexField.element);

        // hook up mouse handlers
        this.colorRect.element.addEventListener('mousedown', this.downHandler);
        this.hueRect.element.addEventListener('mousedown', this.downHandler);
        this.alphaRect.element.addEventListener('mousedown', this.downHandler);

        this._generateHue(this.hueRect);
        this._generateAlpha(this.alphaRect);

        this._hsva = [-1, -1, -1, 1];
        this._storeHsva = [0, 0, 0, 1];
        this._dragMode = 0;
        this._changing = false;

        this.CONSTANTS = {
            bg: '#2c393c',
            anchorRadius: 5,
            selectedRadius: 7
        };

        this.UI = {
            root: this.dom,
            overlay: new Element$h(),
            panel: document.createElement('div'),
            gradient: new Canvas$1$1({ useDevicePixelRatio: true }),
            checkerPattern: this.createCheckerPattern(),
            anchors: new Canvas$1$1({ useDevicePixelRatio: true }),
            footer: new Element$l(),
            typeLabel: new Label$1$1({ text: 'Type' }),
            typeCombo: new Element$d({
                options: [{ t: 0, v: 'placeholder' }],
                type: 'number'
            }),
            positionLabel: new Label$1$1({ text: 'Position' }),
            positionEdit: new NumericInput$1$1({ min: 0, max: 100, step: 1 }),
            copyButton: new Button$1$1({}),
            pasteButton: new Button$1$1({}),
            deleteButton: new Button$1$1({}),
            showSelectedPosition: new NumericInput$1$1({ min: 0, max: 100, step: 1, hideSlider: true }),
            showCrosshairPosition: document.createElement('div'),
            anchorAddCrossHair: document.createElement('div'),
            // copyButton: new Button({ text: '&#58193' }),
            // pasteButton: new Button({ text: '&#58184' }),
            colorPicker: null
        };

        // this.UI.panel.appendChild(this.panel.element);

        this.doCopy = this.doCopy.bind(this);
        this.doPaste = this.doPaste.bind(this);
        this.doDelete = this.doDelete.bind(this);

        // current state
        this.STATE = {
            curves: [],            // holds all the gradient curves (either 3 or 4 of them)
            keystore: [],          // holds the curve during edit
            anchors: [],           // holds the times of the anchors
            hoveredAnchor: -1,     // index of the hovered anchor
            selectedAnchor: -1,    // index of selected anchor
            selectedValue: [],     // value being dragged
            changing: false,       // UI is currently changing
            draggingAnchor: false,
            typeMap: { }          // map from curve type dropdown to engine curve enum
        };

        // initialize overlay
        this.UI.root.appendChild(this.UI.overlay.element);
        this.UI.overlay.class.add('picker-gradient');
        this.UI.overlay.center = false;
        this.UI.overlay.transparent = true;
        this.UI.overlay.hidden = true;
        this.UI.overlay.clickable = true;
        this.UI.overlay.element.style.position = "fixed";

        this.UI.overlay.on('show', function () {
            this.onOpen();
        }.bind(this));

        this.UI.overlay.on('hide', function () {
            this.onClose();
        }.bind(this));

        // panel
        this.UI.panel.classList.add('picker-gradient-panel');
        this.UI.overlay.append(this.UI.panel);

        // gradient
        this.UI.panel.appendChild(this.UI.gradient.element);
        this.UI.gradient.class.add('picker-gradient-gradient');
        this.UI.gradient.resize(320, 28);

        // anchors
        this.UI.panel.appendChild(this.UI.anchors.element);
        this.UI.anchors.class.add('picker-gradient-anchors');
        this.UI.anchors.resize(320, 28);

        // footer
        this.UI.panel.appendChild(this.UI.footer.element);
        this.UI.footer.append(this.UI.typeLabel);
        this.UI.footer.class.add('picker-gradient-footer');

        this.UI.footer.append(this.UI.typeCombo);
        this.UI.typeCombo.value = -1;
        this.UI.typeCombo.on('change', this.onTypeChanged.bind(this));

        // this.UI.footer.append(this.UI.positionLabel);

        // this.UI.footer.append(this.UI.positionEdit);
        this.UI.positionEdit.style.width = '40px';
        this.UI.positionEdit.renderChanges = false;
        this.UI.showSelectedPosition.on('change', function (value) {
            if (!this.STATE.changing) {
                this.moveSelectedAnchor(value / 100);
            }
        }.bind(this));

        this.UI.copyButton.on('click', this.doCopy);
        this.UI.copyButton.class.add('copy-curve-button');
        this.UI.footer.append(this.UI.copyButton);
        // Tooltip.attach({
        //     target: this.UI.copyButton.element,
        //     text: 'Copy',
        //     align: 'bottom',
        //     root: this.UI.root
        // });

        this.UI.pasteButton.on('click', this.doPaste);
        this.UI.pasteButton.class.add('paste-curve-button');
        this.UI.footer.append(this.UI.pasteButton);

        this.UI.deleteButton.on('click', this.doDelete);
        this.UI.deleteButton.class.add('delete-curve-button');
        this.UI.footer.append(this.UI.deleteButton);

        this.UI.panel.appendChild(this.panel.element);

        this.UI.panel.append(this.UI.showSelectedPosition.element);
        this.UI.showSelectedPosition.class.add('show-selected-position');
        this.UI.showSelectedPosition._domInput.classList.add('show-selected-position-input');

        const crosshairPath = document.createElementNS("http://www.w3.org/2000/svg", "path");

        crosshairPath.setAttribute('fill-rule', 'evenodd');
        crosshairPath.setAttribute('clip-rule', 'evenodd');
        crosshairPath.setAttribute('d', 'M8.5 17C7.35596 17 6.26043 16.7741 5.2134 16.3222C4.16637 15.8703 3.26152 15.2629 2.49882 14.4997C1.73612 13.7366 1.12899 12.8312 0.677391 11.7835C0.225795 10.7359 0 9.6397 0 8.49498C0 7.35026 0.225795 6.25409 0.677391 5.20644C1.12899 4.15879 1.73612 3.25507 2.49882 2.49527C3.26152 1.73548 4.16637 1.12965 5.2134 0.677791C6.26043 0.225928 7.35596 0 8.5 0C9.64404 0 10.7396 0.225928 11.7866 0.677791C12.8336 1.12965 13.7385 1.73548 14.5012 2.49527C15.2639 3.25507 15.871 4.15879 16.3226 5.20644C16.7742 6.25409 17 7.35026 17 8.49498C17 9.6397 16.7742 10.7359 16.3226 11.7835C15.871 12.8312 15.2639 13.7366 14.5012 14.4997C13.7385 15.2629 12.8336 15.8703 11.7866 16.3222C10.7396 16.7741 9.64404 17 8.5 17ZM8.5 2.2593C7.64364 2.2593 6.82576 2.42498 6.04634 2.75635C5.26692 3.08772 4.59622 3.53288 4.03424 4.09185C3.47225 4.65082 3.02568 5.31354 2.69451 6.08004C2.36334 6.84653 2.19776 7.6515 2.19776 8.49498C2.19776 9.6397 2.47875 10.6957 3.04073 11.663C3.60272 12.6303 4.36707 13.3952 5.33383 13.9575C6.30058 14.5198 7.35596 14.8009 8.5 14.8009C9.34298 14.8009 10.1475 14.6353 10.9135 14.3039C11.6796 13.9725 12.3419 13.5257 12.9005 12.9634C13.4592 12.4011 13.9041 11.73 14.2352 10.9501C14.5664 10.1702 14.732 9.35184 14.732 8.49498C14.732 7.6515 14.5664 6.84653 14.2352 6.08004C13.9041 5.31354 13.4592 4.65082 12.9005 4.09185C12.3419 3.53288 11.6796 3.08772 10.9135 2.75635C10.1475 2.42498 9.34298 2.2593 8.5 2.2593ZM9.52361 9.73007V12.9533H7.40614V9.73007H4.11452V7.61134H7.40614V4.31778H9.52361V7.61134H12.745V9.73007H9.52361Z');
        crosshairPath.setAttribute('fill', '#FF6600');

        const crosshairHolder = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        const crosshairBar = document.createElement('div');

        crosshairHolder.appendChild(crosshairPath);
        crosshairHolder.setAttribute('width', '17');
        crosshairHolder.setAttribute('height', '17');
        crosshairHolder.setAttribute('viewBox', '0 0 17 17');

        this.UI.showCrosshairPosition.classList.add('show-crosshair-position');
        crosshairBar.classList.add('crosshair-bar');

        this.UI.anchorAddCrossHair.appendChild(crosshairHolder);
        this.UI.anchorAddCrossHair.appendChild(crosshairBar);
        this.UI.anchorAddCrossHair.appendChild(this.UI.showCrosshairPosition);
        this.UI.anchorAddCrossHair.classList.add('anchor-crosshair');
        this.UI.anchorAddCrossHair.style.visibility = 'hidden';

        this.UI.panel.append(this.UI.anchorAddCrossHair);

        // Tooltip.attach({
        //     target: this.UI.pasteButton.element,
        //     text: 'Paste',
        //     align: 'bottom',
        //     root: this.UI.root
        // });

        // construct the color picker
        /* this.on('change', this.colorSelectedAnchor);*/
        this.on('changing', function (color) {
            this.colorSelectedAnchor(color, true);
        });

        this.anchorsOnMouseDown = this.anchorsOnMouseDown.bind(this);
        this.anchorsOnMouseMove = this.anchorsOnMouseMove.bind(this);
        this.anchorsOnMouseUp = this.anchorsOnMouseUp.bind(this);

        this.emitCurveChange = this.emitCurveChange.bind(this);

        this.copiedData = null;

        this._channels = args.channels || 3;
        this._value = this._getDefaultValue();
        if (args.value) {
            this.value = args.value;
        }
    }

    createCheckerboardPattern(context) {
        // create checkerboard pattern
        const canvas = document.createElement('canvas');
        const size = 24;
        const halfSize = size / 2;
        canvas.width = size;
        canvas.height = size;

        const ctx = canvas.getContext('2d');
        ctx.fillStyle = '#';
        ctx.fillStyle = "#949a9c";
        ctx.fillRect(0, 0, halfSize, halfSize);
        ctx.fillRect(halfSize, halfSize, halfSize, halfSize);
        ctx.fillStyle = "#657375";
        ctx.fillRect(halfSize, 0, halfSize, halfSize);
        ctx.fillRect(0, halfSize, halfSize, halfSize);

        return context.createPattern(canvas, 'repeat');
    }

    _onKeyDown(evt) {
        // escape blurs the field
        if (evt.keyCode === 27) {
            this.blur();
        }

        // enter opens the gradient picker
        if (evt.keyCode !== 13 || !this.enabled || this.readOnly || this.class.contains(CLASS_MULTIPLE_VALUES)) {
            return;
        }

        evt.stopPropagation();
        evt.preventDefault();

        this._openGradientPicker();
    }

    _onFocus(evt) {
        this.emit('focus');
    }

    _onBlur(evt) {
        this.emit('blur');
    }

    _getDefaultValue() {
        return {
            type: 4,
            keys: (new Array(this._channels)).fill([0, 0]),
            betweenCurves: false
        };
    }

    _openGradientPicker() {
        this.callOpenGradientPicker([this.value || this._getDefaultValue()]);

        // position picker
        const rectPicker = this.getGradientPickerRect();
        const rectField = this.dom.getBoundingClientRect();

        this.positionGradientPicker(rectField.right - rectPicker.width, rectField.bottom);

        // change event from the picker sets the new value
        this.evtPickerChanged = this.on('picker:curve:change', this._onPickerChange.bind(this));

        // refreshing the value resets the picker
        this.evtRefreshPicker = this.on('change', this.setGradientPicker([this.value]));
    }

    _onPickerChange(paths, values) {
        const value = this.value || this._getDefaultValue();

        // TODO: this is all kinda hacky. We need to clear up
        // the events raised by the picker
        if (REGEX_KEYS.test(paths[0])) {
            // set new value with new keys but same type
            this.value = {
                type: value.type,
                keys: values,
                betweenCurves: false
            };
        } else if (REGEX_TYPE.test(paths[0])) {
            // set new value with new type but same keys
            this.value = {
                type: values[0],
                keys: value.keys,
                betweenCurves: false
            };
        }
    }

    _renderGradient() {
        const canvas = this._canvas.dom;
        const context = canvas.getContext('2d');

        const width = this._canvas.width;
        const height = this._canvas.height;
        const ratio = this._canvas.pixelRatio;

        context.setTransform(ratio, 0, 0, ratio, 0, 0);

        context.fillStyle = this._checkerboardPattern;
        context.fillRect(0, 0, width, height);

        if (!this.value || !this.value.keys || !this.value.keys.length) {
            return;
        }

        const rgba = [];

        const curve = this.channels === 1 ? new CurveSet([this.value.keys]) : new CurveSet(this.value.keys);
        curve.type = this.value.type;

        const precision = 2;

        const gradient = context.createLinearGradient(0, 0, width, 0);

        for (let t = precision; t < width; t += precision) {
            curve.value(t / width, rgba);

            const r = Math.round((rgba[0] || 0) * 255);
            const g = Math.round((rgba[1] || 0) * 255);
            const b = Math.round((rgba[2] || 0) * 255);
            const a = this.channels === 4 ? (rgba[3] || 0) : 1;

            gradient.addColorStop(t / width, `rgba(${r}, ${g}, ${b}, ${a})`);
        }

        context.fillStyle = gradient;
        context.fillRect(0, 0, width, height);
    }

    focus() {
        this.dom.focus();
    }

    blur() {
        this.dom.blur();
    }

    destroy() {
        if (this._destroyed) return;
        this.dom.removeEventListener('keydown', this._domEventKeyDown);
        this.dom.removeEventListener('focus', this._domEventFocus);
        this.dom.removeEventListener('blur', this._domEventBlur);

        clearInterval(this._resizeInterval);
        this._resizeInterval = null;

        super.destroy();
    }

    set channels(value) {
        if (this._channels === value) return;
        this._channels = Math.max(1, Math.min(value, 4));

        // change default value

        if (this.value) {
            this._renderGradient();
        }
    }

    get channels() {
        return this._channels;
    }

    set value(value) {
        // TODO: maybe we should check for equality
        // but since this value will almost always be set using
        // the picker it's not worth the effort
        this._value = value;

        this.class.remove(CLASS_MULTIPLE_VALUES);

        this._renderGradient();

        this.emit('change', value);

        this.setValue([value]);
    }

    get value() {
        return this._value;
    }

    set values(values) { // eslint-disable-line accessor-pairs
        // we do not support multiple values so just
        // add the multiple values class which essentially disables
        // the input
        this.class.add(CLASS_MULTIPLE_VALUES);
        this._renderGradient();
    }

    _generateHue(canvas) {
        const ctx = canvas.element.getContext('2d');
        const w = canvas.pixelWidth;
        const h = canvas.pixelHeight;
        const gradient = ctx.createLinearGradient(0, 0, 0, h);
        for (let t = 0; t <= 6; t += 1) {
            gradient.addColorStop(t / 6, this.Helpers.rgbaStr(_hsv2rgb([t / 6, 1, 1])));
        }
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, w, h);
    }

    _generateAlpha(canvas) {
        const ctx = canvas.element.getContext('2d');
        const w = canvas.pixelWidth;
        const h = canvas.pixelHeight;
        const gradient = ctx.createLinearGradient(0, 0, 0, h);
        gradient.addColorStop(0, 'rgb(255, 255, 255)');
        gradient.addColorStop(1, 'rgb(0, 0, 0)');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, w, h);
    }

    _generateGradient(canvas, clr) {
        const ctx = canvas.element.getContext('2d');
        const w = canvas.pixelWidth;
        const h = canvas.pixelHeight;

        let gradient = ctx.createLinearGradient(0, 0, w, 0);
        gradient.addColorStop(0, this.Helpers.rgbaStr([255, 255, 255, 255]));
        gradient.addColorStop(1, this.Helpers.rgbaStr([clr[0], clr[1], clr[2], 255]));
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, w, h);

        gradient = ctx.createLinearGradient(0, 0, 0, h);
        gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
        gradient.addColorStop(1, 'rgba(0, 0, 0, 255)');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, w, h);
    }

    _onFieldChanged() {
        if (!this._changing) {
            const rgba = [
                this.rField.value,
                this.gField.value,
                this.bField.value,
                this.aField.value
            ].map(function (v) {
                return v / 255;
            });
            this.hsva = this.Helpers.toHsva(rgba);
            this.colorSelectedAnchor(this.color);
        }
    }

    _onHexChanged() {
        if (!this._changing) {
            const hex = this.hexField.value.trim().toLowerCase();
            if (/^([0-9a-f]{2}){3,4}$/.test(hex)) {
                const rgb = [parseInt(hex.substring(0, 2), 16),
                    parseInt(hex.substring(2, 4), 16),
                    parseInt(hex.substring(4, 6), 16)];
                this.hsva = _rgb2hsv(rgb).concat([this.hsva[3]]);
                this.colorSelectedAnchor(this.color);
            }
        }
    }

    _onMouseDown(evt) {
        if (evt.currentTarget === this.colorRect.element) {
            this._dragMode = 1;     // drag color
        } else if (evt.currentTarget === this.hueRect.element) {
            this._dragMode = 2;     // drag hue
        } else {
            this._dragMode = 3;     // drag alpha
        }

        this._storeHsva = this._hsva.slice();
        this._onMouseMove(evt);

        // hook up mouse
        window.addEventListener('mousemove', this.moveHandler);
        window.addEventListener('mouseup', this.upHandler);
    }

    _onMouseMove(evt) {
        let newhsva;
        if (this._dragMode === 1) {
            const m = this.Helpers.normalizedCoord(this.colorRect, evt.pageX, evt.pageY);
            const s = math.clamp(m[0], 0, 1);
            const v = math.clamp(m[1], 0, 1);
            newhsva = [this.hsva[0], s, 1 - v, this._hsva[3]];
        } else if (this._dragMode === 2) {
            const m = this.Helpers.normalizedCoord(this.hueRect, evt.pageX, evt.pageY);
            const h = math.clamp(m[1], 0, 1);
            newhsva = [h, this.hsva[1], this.hsva[2], this.hsva[3]];
        } else {
            const m = this.Helpers.normalizedCoord(this.alphaRect, evt.pageX, evt.pageY);
            const a = math.clamp(m[1], 0, 1);
            newhsva = [this.hsva[0], this.hsva[1], this.hsva[2], 1 - a];
        }
        if (newhsva[0] !== this._hsva[0] ||
            newhsva[1] !== this._hsva[1] ||
            newhsva[2] !== this._hsva[2] ||
            newhsva[3] !== this._hsva[3]) {
            this.hsva = newhsva;
            this.emit('changing', this.color);
        }
    }

    _onMouseUp(evt) {
        window.removeEventListener('mousemove', this.moveHandler);
        window.removeEventListener('mouseup', this.upHandler);

        if (this._storeHsva[0] !== this._hsva[0] ||
            this._storeHsva[1] !== this._hsva[1] ||
            this._storeHsva[2] !== this._hsva[2] ||
            this._storeHsva[3] !== this._hsva[3]) {
            this.colorSelectedAnchor(this.color);
        }
    }

    set hsva(hsva) {
        const rgb = _hsv2rgb(hsva);
        const hueRgb = _hsv2rgb([hsva[0], 1, 1]);

        // regenerate gradient canvas if hue changes
        if (hsva[0] !== this._hsva[0]) {
            this._generateGradient(this.colorRect, hueRgb);
        }

        const e = this.colorRect.element;
        const r = e.getBoundingClientRect();
        const w = r.width - 2;
        const h = r.height - 2;

        this.colorHandle.style.backgroundColor = this.Helpers.rgbaStr(rgb);
        this.colorHandle.style.left = e.offsetLeft - 7 + Math.floor(w * hsva[1]) + 'px';
        this.colorHandle.style.top = e.offsetTop - 7 + Math.floor(h * (1 - hsva[2])) + 'px';

        this.hueHandle.style.backgroundColor = this.Helpers.rgbaStr(hueRgb);
        this.hueHandle.style.top = e.offsetTop - 3 + Math.floor(140 * hsva[0]) + 'px';
        this.hueHandle.style.left = '162px';

        this.alphaHandle.style.backgroundColor = this.Helpers.rgbaStr(_hsv2rgb([0, 0, hsva[3]]));
        this.alphaHandle.style.top = e.offsetTop - 3 + Math.floor(140 * (1 - hsva[3]))  + 'px';
        this.alphaHandle.style.left = '194px';

        this._changing = true;
        this.rField.value = rgb[0];
        this.gField.value = rgb[1];
        this.bField.value = rgb[2];
        this.aField.value = Math.round(hsva[3] * 255);
        this.hexField.value = this.Helpers.hexStr(rgb);
        this._changing = false;

        this._hsva = hsva;
    }

    get hsva() {
        return this._hsva;
    }

    set color(clr) {
        const hsva = this.Helpers.toHsva(clr);
        if (hsva[0] === 0 && hsva[1] === 0 && this._hsva[0] !== -1) {
            // if the incoming RGB is a shade of grey (without hue),
            // use the current active hue instead.
            hsva[0] = this._hsva[0];
        }
        this.hsva = hsva;
    }

    get color() {
        return this.Helpers.toRgba(this._hsva);
    }

    set editAlpha(editAlpha) {
        if (editAlpha) {
            this.alphaRect.element.style.display = 'inline';
            this.alphaHandle.style.display = 'block';
            this.aField.element.style.display = 'inline-block';
        } else {
            this.alphaRect.element.style.display = 'none';
            this.alphaHandle.style.display = 'none';
            this.aField.element.style.display = 'none';
        }
    }

    get editAlpha() {
        return this.editAlpha;
    }

        // open the picker
    open() {
        this.UI.overlay.hidden = false;
    }

    // close the picker
    close() {
        this.UI.overlay.hidden = true;
    }

    // handle the picker being opened
    onOpen() {
        window.addEventListener('mousemove', this.anchorsOnMouseMove);
        window.addEventListener('mouseup', this.anchorsOnMouseUp);
        this.UI.anchors.element.addEventListener('mousedown', this.anchorsOnMouseDown);
        // editor.emit('picker:gradient:open');
        // editor.emit('picker:open', 'gradient');
    }

    // handle the picker being closed
    onClose() {
        this.STATE.hoveredAnchor = -1;
        window.removeEventListener('mousemove', this.anchorsOnMouseMove);
        window.removeEventListener('mouseup', this.anchorsOnMouseUp);
        this.UI.anchors.element.removeEventListener('mousedown', this.anchorsOnMouseDown);

        this.evtRefreshPicker.unbind();
        this.evtRefreshPicker = null;
        this.evtPickerChanged.unbind();
        this.evtPickerChanged = null;
    }

    onDeleteKey() {
        if (!this.UI.overlay.hidden) {
            if (this.STATE.selectedAnchor !== -1) {
                const deleteTime = this.STATE.anchors[this.STATE.selectedAnchor];
                this.STATE.selectedAnchor = -1;
                this.deleteAnchor(deleteTime);
            }
        }
    }

    onTypeChanged(value) {
        value = this.STATE.typeMap[value];
        const paths = [];
        const values = [];
        for (let i = 0; i < this.STATE.curves.length; ++i) {
            paths.push(i.toString() + '.type');
            values.push(value);
        }
        this.emit('picker:curve:change', paths, values);
    }

    render() {
        this.renderGradient();
        this.renderAnchors();
    }

    renderGradient() {
        const ctx = this.UI.gradient.element.getContext('2d');
        const w = this.UI.gradient.width;
        const h = this.UI.gradient.height;
        const r = this.UI.gradient.pixelRatio;

        ctx.setTransform(r, 0, 0, r, 0, 0);

        // fill background
        ctx.fillStyle = this.UI.checkerPattern;
        ctx.fillRect(0, 0, w, h);

        // fill gradient
        const gradient = ctx.createLinearGradient(0, 0, w, 0);
        for (let t = 0; t <= w; t += 2) {
            const x = t / w;
            gradient.addColorStop(x, this.Helpers.rgbaStr(this.evaluateGradient(x), 255));
        }

        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, w, h);

        // render the tip of the selected anchor
        if (this.STATE.selectedAnchor !== -1) {
            const time = this.STATE.anchors[this.STATE.selectedAnchor];
            const coords = [time * w, h];

            const rectHeight = this.UI.draggingAnchor ? -30 : -6;

            ctx.beginPath();
            ctx.rect(coords[0] - 0.5,
                     coords[1],
                     1,
                     rectHeight);
            ctx.fillStyle = 'rgb(41, 53, 56)';
            ctx.fill();
        }
    }

    renderAnchors() {
        const ctx = this.UI.anchors.element.getContext('2d');
        const w = this.UI.anchors.width;
        const h = this.UI.anchors.height;
        const r = this.UI.anchors.pixelRatio;

        ctx.setTransform(r, 0, 0, r, 0, 0);

        ctx.fillStyle = this.CONSTANTS.bg;
        ctx.fillRect(0, 0, w, h);

        // render plain anchors
        for (let index = 0; index < this.STATE.anchors.length; ++index) {

            if (index !== this.STATE.hoveredAnchor &&
                index !== this.STATE.selectedAnchor) {
                this.renderAnchor(ctx, this.STATE.anchors[index]);
            }
        }

        if ((this.STATE.hoveredAnchor !== -1) &&
            (this.STATE.hoveredAnchor !== this.STATE.selectedAnchor)) {
            this.renderAnchor(ctx, this.STATE.anchors[this.STATE.hoveredAnchor], "hovered");
        }

        if (this.STATE.selectedAnchor !== -1) {
            this.renderAnchor(ctx, this.STATE.anchors[this.STATE.selectedAnchor], "selected");
        }
    }

    renderAnchor(ctx, time, type) {
        const coords = [time * this.UI.anchors.width, this.UI.anchors.height / 2];
        const radius = (type === "selected" ? this.CONSTANTS.selectedRadius : this.CONSTANTS.anchorRadius);

        // render selected arrow
        if (type === "selected") {

            ctx.beginPath();
            ctx.rect(coords[0] - 0.5,
                     coords[1],
                     1,
                     -coords[1]);
            ctx.fillStyle = 'rgb(41, 53, 56)';
            ctx.fill();
        }

        // render selection highlight
        if (type === "selected" || type === "hovered") {
            ctx.beginPath();
            ctx.arc(coords[0], coords[1], (radius + 2), 0, 2 * Math.PI, false);
            ctx.fillStyle = 'rgb(255, 255, 255)';
            ctx.fill();
        }

        ctx.beginPath();
        ctx.arc(coords[0], coords[1], (radius + 1), 0, 2 * Math.PI, false);
        ctx.fillStyle = this.Helpers.rgbaStr(this.evaluateGradient(time, 1), 255);
        ctx.fill();
    }

    evaluateGradient(time, alphaOverride) {
        const result = [];
        for (let i = 0; i < 3; ++i) {
            result.push(this.STATE.curves[i].value(time));
        }

        if (alphaOverride) {
            result.push(alphaOverride);
        } else if (this.STATE.curves.length > 3) {
            result.push(this.STATE.curves[3].value(time));
        } else {
            result.push(1);
        }

        return result;
    }

    calcAnchorTimes() {
        // get curve anchor points
        let times = [];
        for (let i = 0; i < this.STATE.curves.length; i++) {
            const curve = this.STATE.curves[i];
            for (let j = 0; j < curve.keys.length; ++j) {
                times.push(curve.keys[j][0]);
            }
        }

        // sort anchors and remove duplicates
        times.sort();
        times = times.filter(function (item, pos, ary) {
            return !pos || item !== ary[pos - 1];
        });

        return times;
    }

    // helper function for calculating the normalized coordinate
    // x,y relative to rect
    calcNormalizedCoord(x, y, rect) {
        return [(x - rect.left) / rect.width,
            (y - rect.top) / rect.height];
    }

    // get the bounding client rect minus padding
    getClientRect(element) {
        const styles = window.getComputedStyle(element);

        const paddingTop = parseFloat(styles.paddingTop);
        const paddingRight = parseFloat(styles.paddingRight);
        const paddingBottom = parseFloat(styles.paddingBottom);
        const paddingLeft = parseFloat(styles.paddingLeft);

        const rect = element.getBoundingClientRect();

        return new DOMRect(rect.x + paddingLeft,
                           rect.y + paddingTop,
                           rect.width - paddingRight - paddingLeft,
                           rect.height - paddingTop - paddingBottom);
    }

    anchorsOnMouseDown(e) {
        if (this.STATE.hoveredAnchor === -1) {
            // user clicked in empty space, create new anchor and select it
            const coord = this.calcNormalizedCoord(e.clientX,
                                                   e.clientY,
                                                   this.getClientRect(this.UI.anchors.element));
            this.insertAnchor(coord[0], this.evaluateGradient(coord[0]));
            this.STATE.anchors = this.calcAnchorTimes();
            this.selectAnchor(this.STATE.anchors.indexOf(coord[0]));
        } else if (this.STATE.hoveredAnchor !== this.STATE.selectedAnchor) {
            // select the hovered anchor
            this.selectAnchor(this.STATE.hoveredAnchor);
        }

        this.UI.anchors.element.style.cursor = 'grabbing';
        this.UI.anchorAddCrossHair.style.visibility = 'hidden';

        // drag the selected anchor
        this.dragStart();
        this.UI.draggingAnchor = true;
    }

    anchorsOnMouseMove(e) {
        const coord = this.calcNormalizedCoord(e.clientX,
                                               e.clientY,
                                               this.getClientRect(this.UI.anchors.element));

        if (this.UI.draggingAnchor) {
            this.dragUpdate(math.clamp(coord[0], 0, 1));
            this.UI.anchorAddCrossHair.style.visibility = 'hidden';
        } else if (coord[0] >= 0 &&
                   coord[0] <= 1 &&
                   coord[1] >= 0 &&
                   coord[1] <= 1) {
            let closest = -1;
            let closestDist = 0;
            for (let index = 0; index < this.STATE.anchors.length; ++index) {
                const dist = Math.abs(this.STATE.anchors[index] - coord[0]);
                if (closest === -1 || dist < closestDist) {
                    closest = index;
                    closestDist = dist;
                }
            }

            const hoveredAnchor = (closest !== -1 && closestDist < 0.02) ? closest : -1;
            if (hoveredAnchor !== this.STATE.hoveredAnchor) {
                this.selectHovered(hoveredAnchor);
                this.render();
            }

            if (hoveredAnchor === -1) {
                this.UI.anchorAddCrossHair.style.visibility = 'visible';
                this.UI.anchors.element.style.cursor = 'none';
            } else {
                this.UI.anchorAddCrossHair.style.visibility = 'hidden';
            }


            this.UI.showCrosshairPosition.innerText = (Math.round(coord[0] * 100)).toString();

            this.UI.anchorAddCrossHair.style.left = (2.5 + 320 * coord[0]).toString() + "px";

        } else if (this.STATE.hoveredAnchor !== -1) {
            this.UI.anchorAddCrossHair.style.visibility = 'hidden';
            this.selectHovered(-1);
            this.render();
        } else {
            this.UI.anchorAddCrossHair.style.visibility = 'hidden';
        }
    }

    anchorsOnMouseUp(e) {
        if (this.UI.draggingAnchor) {
            this.dragEnd();
            this.UI.draggingAnchor = false;
        }

        this.UI.anchors.element.style.cursor = 'pointer';
    }

    selectHovered(index) {
        this.STATE.hoveredAnchor = index;
        this.UI.anchors.element.style.cursor = (index === -1 ? '' : 'pointer');
    }

    selectAnchor(index) {
        this.STATE.selectedAnchor = index;
        this.STATE.changing = true;
        if (index === -1) {
            this.UI.positionEdit.value = "";
            this.color = [0, 0, 0];
        } else {
            const time = this.STATE.anchors[index];
            this.UI.positionEdit.value = Math.round(time * 100);
            this.STATE.selectedValue = this.evaluateGradient(time);
            this.color = this.STATE.selectedValue;
            this.UI.showSelectedPosition.element.style.left = (this.STATE.anchors[index] * this.UI.gradient.width - 4).toString() + "px";
            this.UI.showSelectedPosition.value = Math.round(this.STATE.anchors[index] * 100);
        }
        this.STATE.changing = false;
        this.render();
    }

    dragStart() {
        if (this.STATE.selectedAnchor === -1) {
            return;
        }
        const time = this.STATE.anchors[this.STATE.selectedAnchor];
        // make a copy of the curve data before editing starts
        this.STATE.keystore = [];
        for (let i = 0; i < this.STATE.curves.length; ++i) {
            const keys = [];
            this.STATE.curves[i].keys.forEach(function (element) {
                if (element[0] !== time) {
                    keys.push([element[0], element[1]]);
                }
            });
            this.STATE.keystore.push(keys);
        }
    }

    dragUpdate(time) {
        if (this.STATE.selectedAnchor === -1) {
            return;
        }
        for (let i = 0; i < this.STATE.curves.length; ++i) {
            const curve = this.STATE.curves[i];
            const keystore = this.STATE.keystore[i];

            // merge keystore with the drag anchor (ignoring existing anchors at
            // the current anchor location)
            curve.keys = keystore.map(function (element) {
                return [element[0], element[1]];
            })
                .filter(function (element) {
                    return element[0] !== time;
                });
            curve.keys.push([time, this.STATE.selectedValue[i]]);
            curve.sort();
        }

        this.STATE.anchors = this.calcAnchorTimes();
        this.selectAnchor(this.STATE.anchors.indexOf(time));
    }

    dragEnd() {
        if (this.STATE.selectedAnchor !== -1) {
            this.emitCurveChange();
        }
    }

    // insert an anchor at the given time with the given color
    insertAnchor(time, color) {
        for (let i = 0; i < this.STATE.curves.length; ++i) {
            const keys = this.STATE.curves[i].keys;

            let j = 0;
            while (j < keys.length) {
                if (keys[j][0] >= time) {
                    break;
                }
                ++j;
            }

            if (j < keys.length && keys[j][0] === time) {
                keys[j][1] = color[i];
            } else {
                keys.splice(j, 0, [time, color[i]]);
            }
        }
        this.emitCurveChange();
    }

    // delete the anchor(s) at the given time
    deleteAnchor(time) {
        for (let i = 0; i < this.STATE.curves.length; ++i) {
            const curve = this.STATE.curves[i];

            for (let j = 0; j < curve.keys.length; ++j) {
                if (curve.keys[j][0] === time) {
                    curve.keys.splice(j, 1);
                    break;
                }
            }
        }
        this.selectHovered(-1);
        this.emitCurveChange();
    }

    moveSelectedAnchor(time) {
        if (this.STATE.selectedAnchor !== -1) {
            this.dragStart();
            this.dragUpdate(time);
            this.dragEnd();
        }
    }

    colorSelectedAnchor(clr, dragging) {
        if (this.STATE.selectedAnchor !== -1) {
            const time = this.STATE.anchors[this.STATE.selectedAnchor];

            for (let i = 0; i < this.STATE.curves.length; ++i) {
                const curve = this.STATE.curves[i];

                for (let j = 0; j < curve.keys.length; ++j) {
                    if (curve.keys[j][0] === time) {
                        curve.keys[j][1] = clr[i];
                        break;
                    }
                }
            }
            this.STATE.selectedValue = clr;
            if (dragging) {
                this.render();
            } else {
                this.emitCurveChange();
            }
        }
    }

    emitCurveChange() {
        const paths = [];
        const values = [];
        this.STATE.curves.forEach(function (curve, index) {
            paths.push('0.keys.' + index);
            const keys = [];
            curve.keys.forEach(function (key) {
                keys.push(key[0], key[1]);
            });
            values.push(keys);
        });
        this.emit('picker:curve:change', paths, values);
    }

    doCopy() {
        const data = {
            type: this.STATE.curves[0].type,
            keys: this.STATE.curves.map(function (c) {
                return [].concat(...c.keys);
            })
        };
        this.copiedData = data;
    }

    doPaste() {
        const data = this.copiedData;
        if (data !== null) {
            // only paste the number of curves we're currently editing
            const pasteData = {
                type: data.type,
                keys: []
            };

            for (let index = 0; index < this.STATE.curves.length; ++index) {
                if (index < data.keys.length) {
                    pasteData.keys.push(data.keys[index]);
                } else {
                    pasteData.keys.push([].concat(...this.STATE.curves[index].keys));
                }
            }

            this.setValue([pasteData]);
            this.emitCurveChange();
        }
    }

    doDelete() {
        const toDelete = this.STATE.selectedAnchor;

        if (toDelete === -1 || this.STATE.curves[0].keys.length === 1) {
            return;
        }

        for (let i = 0; i < this.STATE.curves.length; ++i) {
            const keys = this.STATE.curves[i].keys;

            keys.splice(toDelete, 1);
        }


        this.emitCurveChange();
    }

    createCheckerPattern() {
        const canvas = new Canvas$1$1();
        canvas.width = 16;
        canvas.height = 16;
        const ctx = canvas.element.getContext('2d');
        ctx.fillStyle = "#949a9c";
        ctx.fillRect(0, 0, 8, 8);
        ctx.fillRect(8, 8, 8, 8);
        ctx.fillStyle = "#657375";
        ctx.fillRect(8, 0, 8, 8);
        ctx.fillRect(0, 8, 8, 8);
        return ctx.createPattern(canvas.element, 'repeat');
    }

    setValue(value, args) {
        // sanity checks mostly for script 'curve' attributes
        if (!(value instanceof Array) ||
            value.length !== 1 ||
            value[0].keys === undefined ||
            (value[0].keys.length !== 3 && value[0].keys.length !== 4))
            return;

        this.STATE.typeMap = {
            0: CURVE_STEP,
            1: CURVE_LINEAR,
            2: CURVE_SPLINE
        };
        const indexMap = Object.fromEntries(
            Object
                .entries(this.STATE.typeMap)
                .map(([key, value]) => [value, key])
        );
        // check if curve is using a legacy curve type
        if (value[0].type !== CURVE_STEP &&
            value[0].type !== CURVE_LINEAR &&
            value[0].type !== CURVE_SPLINE) {
            this.STATE.typeMap[3] = value[0].type;
        }
        this.UI.typeCombo.options = [{ v: 0, t: 'Step' }, { v: 1, t: 'Linear' }, { v: 2, t: 'Spline' }];
        this.UI.typeCombo.value = this.UI.typeCombo.value === -1 ? indexMap[this.value.type] : this.UI.typeCombo.value;

        // store the curves
        this.STATE.curves = [];
        value[0].keys.forEach(function (keys) {
            const curve = new Curve(keys);
            curve.type = value[0].type;
            this.STATE.curves.push(curve);
        }.bind(this));

        // calculate the anchor times
        this.STATE.anchors = this.calcAnchorTimes();

        // select the anchor
        if (this.STATE.anchors.length === 0) {
            this.selectAnchor(-1);
        } else {
            this.selectAnchor(math.clamp(this.STATE.selectedAnchor, 0, this.STATE.anchors.length - 1));
        }

        this.editAlpha = this.STATE.curves.length > 3;
    }

    callOpenGradientPicker(value, args) {
        this.setValue(value, args);
        this.open();
    }

    getGradientPickerRect() {
        return this.UI.overlay.element.getBoundingClientRect();
    }

    positionGradientPicker(x, y) {
        if (y + this.UI.panel.clientHeight > window.innerHeight) {
            y = window.innerHeight - this.UI.panel.clientHeight;
        }
        this.UI.overlay.position(x, y);
    }

    setGradientPicker(value, args) {
        this.setValue(value, args);
    }
}

Element$1$1.register('div', GradientPicker$1);

var Element$c = GradientPicker$1;

class GradientPicker extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$c;
    }
    render() {
        // @ts-ignore
        return React.createElement("div", { ref: this.attachElement });
    }
}
GradientPicker.ctor = Element$c;

/**
 * @name BindingBase
 * @class
 * @classdesc Base class for data binding between IBindable Elements and Observers.
 * @property {Element} element The element
 * @property {Observer[]} observers The linked observers
 * @property {string[]} paths The linked paths
 * @property {boolean} applyingChange Whether the binding is currently applying a change either to the observers or the element.
 * @property {boolean} linked Whether the binding is linked to observers.
 * @property {boolean} historyEnabled Whether history is enabled for the binding. A valid history object must have been provided first.
 * @property {boolean} historyCombine If a history module is used whether to combine history actions when applying changes to observers.
 * @property {string} historyName The name of the history action when applying changes to observers.
 * @property {string} historyPrefix A string to prefix the historyName with.
 * @property {string} historyPostfix A string to postfix the historyName with.
 */
class BindingBase extends Events {
    /**
     * Creates a new binding.
     *
     * @param {object} args - The arguments.
     * @param {IBindable} [args.element] - The IBindable element.
     * @param {History} [args.history] - The history object which will be used to record undo / redo actions.
     * If none is provided then no history will be recorded.
     * @param {string} [args.historyPrefix] - A prefix that will be used for the name of every history action.
     * @param {string} [args.historyPostfix] - A postfix that will be used for the name of every history action.
     * @param {string} [args.historyName] - The name of each history action.
     * @param {boolean} [args.historyCombine] - Whether to combine history actions.
     */
    constructor(args) {
        super();

        if (!args) args = {};

        // the observers we are binding to
        this._observers = null;
        // the paths to use for the observers
        this._paths = null;

        this._applyingChange = false;
        this._element = args.element || null;

        this._history = args.history || null;
        this._historyPrefix = args.historyPrefix || null;
        this._historyPostfix = args.historyPostfix || null;
        this._historyName = args.historyName || null;
        this._historyCombine = args.historyCombine || false;

        this._linked = false;
    }

    // Returns the path at the specified index
    // or the path at the first index if it doesn't exist.
    _pathAt(paths, index) {
        return paths[index] || paths[0];
    }

    /**
     * @name BindingBase#link
     * @description Links the specified observers to the specified paths.
     * @param {Observer[]|Observer} observers - The observer(s).
     * @param {string[]|string} paths - The path(s). The behaviour of the binding depends on how many paths are passed.
     * If an equal amount of paths and observers are passed then the binding will map each path to each observer at each index.
     * If more observers than paths are passed then the path at index 0 will be used for all observers.
     * If one observer and multiple paths are passed then all of the paths will be used for the observer (e.g. for curves).
     */
    link(observers, paths) {
        if (this._observers) {
            this.unlink();
        }

        this._observers = Array.isArray(observers) ? observers : [observers];
        this._paths = Array.isArray(paths) ? paths : [paths];

        this._linked = true;
    }

    /**
     * @name BindingBase#unlink
     * @description Unlinks the observers and paths.
     */
    unlink() {
        this._observers = null;
        this._paths = null;
        this._linked = false;
    }

    /**
     * @name BindingBase#clone
     * @description Clones the binding. To be implemented by derived classes.
     */
    clone() {
        throw new Error('pcui.BindingBase#clone: Not implemented');
    }

    /**
     * @name BindingBase#setValue
     * @description Sets a value to the linked observers at the linked paths.
     * @param {*} value - The value
     */
    setValue(value) {
    }

    /**
     * @name BindingBase#setValues
     * @description Sets an array of values to the linked observers at the linked paths.
     * @param {Array<*>} values - The values
     */
    setValues(values) {
    }

    /**
     * @name BindingBase#addValue
     * @description Adds (inserts) a value to the linked observers at the linked paths.
     * @param {*} value - The value
     */
    addValue(value) {
    }

    /**
     * @name BindingBase#addValues
     * @description Adds (inserts) multiple values to the linked observers at the linked paths.
     * @param {Array<*>} values - The values
     */
    addValues(values) {
    }

    /**
     * @name BindingBase#removeValue
     * @description Removes a value from the linked observers at the linked paths.
     * @param {*} value - The value
     */
    removeValue(value) {
    }

    /**
     * @name BindingBase#removeValues
     * @description Removes multiple values from the linked observers from the linked paths.
     * @param {Array<*>} values - The values
     */
    removeValues(values) {
    }

    set element(value) {
        this._element = value;
    }

    get element() {
        return this._element;
    }

    set applyingChange(value) {
        if (this._applyingChange === value) return;

        this._applyingChange = value;
        this.emit('applyingChange', value);
    }

    get applyingChange() {
        return this._applyingChange;
    }

    get linked() {
        return this._linked;
    }

    set historyCombine(value) {
        this._historyCombine = value;
    }

    get historyCombine() {
        return this._historyCombine;
    }

    set historyName(value) {
        this._historyName = value;
    }

    get historyName() {
        return this._historyName;
    }

    set historyPrefix(value) {
        this._historyPrefix = value;
    }

    get historyPrefix() {
        return this._historyPrefix;
    }

    set historyPostfix(value) {
        this._historyPostfix = value;
    }

    get historyPostfix() {
        return this._historyPostfix;
    }

    set historyEnabled(value) {
        if (this._history) {
            this._history.enabled = value;
        }
    }

    get historyEnabled() {
        return this._history && this._history.enabled;
    }

    get observers() {
        return this._observers;
    }

    get paths() {
        return this._paths;
    }
}

var BindingBase$1 = BindingBase;

/**
 * @name BindingObserversToElement
 * @class
 * @classdesc Provides one way binding between Observers and an IBindable element and Observers. Any changes from the observers
 * will be propagated to the element.
 * @augments BindingBase
 */
class BindingObserversToElement extends BindingBase$1 {
    /**
     * Creates a new BindingObserversToElement instance.
     *
     * @param {object} args - The arguments.
     * @param {Function} args.customUpdate - Custom update function
     */
    constructor({ customUpdate, ...args } = {}) {
        super(args);

        this._customUpdate = customUpdate;
        this._events = [];
        this._updateElementHandler = this._updateElement.bind(this);
        this._updateTimeout = null;
    }

    _linkObserver(observer, path) {
        this._events.push(observer.on(path + ':set', this._deferUpdateElement.bind(this)));
        this._events.push(observer.on(path + ':unset', this._deferUpdateElement.bind(this)));
        this._events.push(observer.on(path + ':insert', this._deferUpdateElement.bind(this)));
        this._events.push(observer.on(path + ':remove', this._deferUpdateElement.bind(this)));
    }

    _deferUpdateElement() {
        if (this.applyingChange) return;
        this.applyingChange = true;

        this._updateTimeout = setTimeout(this._updateElementHandler);
    }

    _updateElement() {
        if (this._updateTimeout) {
            clearTimeout(this._updateTimeout);
            this._updateTimeout = null;
        }

        this._updateTimeout = null;
        this.applyingChange = true;

        if (typeof this._customUpdate === 'function') {
            this._customUpdate(this._element, this._observers, this._paths);
        } else if (this._observers.length === 1) {
            if (this._paths.length > 1) {
                // if using multiple paths for the single observer (e.g. curves)
                // then return an array of values for each path
                this._element.value = this._paths.map((path) => {
                    return this._observers[0].has(path) ? this._observers[0].get(path) : undefined;
                });
            } else {
                this._element.value = (this._observers[0].has(this._paths[0]) ? this._observers[0].get(this._paths[0]) : undefined);
            }
        } else {
            this._element.values = this._observers.map((observer, i) => {
                const path = this._pathAt(this._paths, i);
                return observer.has(path) ? observer.get(path) : undefined;
            });
        }

        this.applyingChange = false;
    }

    link(observers, paths) {
        super.link(observers, paths);

        // don't render changes when we link
        const renderChanges = this._element.renderChanges;
        if (renderChanges) {
            this._element.renderChanges = false;
        }

        this._updateElement();

        if (renderChanges) {
            this._element.renderChanges = renderChanges;
        }

        if (this._observers.length === 1) {
            if (this._paths.length > 1) {
                for (let i = 0; i < this._paths.length; i++) {
                    this._linkObserver(this._observers[0], this._paths[i]);
                }
                return;
            }
        }

        for (let i = 0; i < this._observers.length; i++) {
            this._linkObserver(this._observers[i], this._pathAt(this._paths, i));
        }
    }

    unlink() {
        for (let i = 0; i < this._events.length; i++) {
            this._events[i].unbind();
        }
        this._events.length = 0;

        if (this._updateTimeout) {
            clearTimeout(this._updateTimeout);
            this._updateTimeout = null;
        }

        super.unlink();
    }

    clone() {
        return new BindingObserversToElement({
            customUpdate: this._customUpdate
        });
    }
}

var BindingObserversToElement$1 = BindingObserversToElement;

const CLASS_RADIO_BUTTON$1 = 'pcui-radio-button';
const CLASS_RADIO_BUTTON_SELECTED = CLASS_RADIO_BUTTON$1 + '-selected';

/**
 * @name RadioButton
 * @class
 * @classdesc A radio button element.
 * @property {boolean} renderChanges If true the input will flash when changed.
 * @augments Element
 * @mixes IBindable
 * @mixes IFocusable
 */
class RadioButton$1 extends Element$1$1 {
    /**
     * Creates a new pcui.RadioButton.
     *
     * @param {object} args - The arguments.
     */
    constructor(args) {
        args = Object.assign({
            tabIndex: 0
        }, args);

        super(args.dom ? args.dom : document.createElement('div'), args);

        this._text = args.text || '';

        this.class.add(CLASS_RADIO_BUTTON$1);
        this.class.add(NOT_FLEXIBLE);

        this._domEventKeyDown = this._onKeyDown.bind(this);
        this._domEventFocus = this._onFocus.bind(this);
        this._domEventBlur = this._onBlur.bind(this);

        this.dom.addEventListener('keydown', this._domEventKeyDown);
        this.dom.addEventListener('focus', this._domEventFocus);
        this.dom.addEventListener('blur', this._domEventBlur);

        this._value = null;
        if (args.value !== undefined) {
            this.value = args.value;
        }

        this.renderChanges = args.renderChanges;
    }

    _onClick(evt) {
        if (this.enabled) {
            this.focus();
        }

        if (this.enabled && !this.readOnly) {
            this.value = !this.value;
        }

        return super._onClick(evt);
    }

    _onKeyDown(evt) {
        if (evt.keyCode === 27) {
            this.blur();
            return;
        }

        if (!this.enabled || this.readOnly) return;

        if (evt.keyCode === 32) {
            evt.stopPropagation();
            evt.preventDefault();
            this.value = !this.value;
        }
    }

    _onFocus() {
        this.emit('focus');
    }

    _onBlur() {
        this.emit('blur');
    }

    _updateValue(value) {
        this.class.remove(MULTIPLE_VALUES);

        if (value === this.value) return false;

        this._value = value;

        if (value) {
            this.class.add(CLASS_RADIO_BUTTON_SELECTED);
        } else {
            this.class.remove(CLASS_RADIO_BUTTON_SELECTED);
        }

        if (this.renderChanges) {
            this.flash();
        }

        this.emit('change', value);

        return true;
    }

    focus() {
        this.dom.focus();
    }

    blur() {
        this.dom.blur();
    }

    destroy() {
        if (this._destroyed) return;

        this.dom.removeEventListener('keydown', this._domEventKeyDown);
        this.dom.removeEventListener('focus', this._domEventFocus);
        this.dom.removeEventListener('blur', this._domEventBlur);

        super.destroy();
    }

    set value(value) {
        const changed = this._updateValue(value);
        if (changed && this._binding) {
            this._binding.setValue(value);
        }
    }

    get value() {
        return this._value;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        let different = false;
        const value = values[0];
        for (let i = 1; i < values.length; i++) {
            if (values[i] !== value) {
                different = true;
                break;
            }
        }

        if (different) {
            this._updateValue(null);
            this.class.add(MULTIPLE_VALUES);
        } else {
            this._updateValue(values[0]);
        }
    }
}

Element$1$1.register('radio', RadioButton$1, { renderChanges: true });

var Element$b = RadioButton$1;

const CLASS_ROOT$5 = 'pcui-gridview-item';
const CLASS_ROOT_RADIO = 'pcui-gridview-radio-container';
const CLASS_SELECTED$1 = CLASS_ROOT$5 + '-selected';
const CLASS_TEXT$1 = CLASS_ROOT$5 + '-text';
const CLASS_RADIO_BUTTON = 'pcui-gridview-radiobtn';

/**
 * @name GridViewItem
 * @augments Container
 * @mixes IFocusable
 * @class
 * @classdesc Represents a grid view item used in GridView.
 * @property {boolean} allowSelect - If true allow selecting the item. Defaults to true.
 * @property {boolean} selected - Whether the item is selected.
 * @property {string} text - The text of the item.
 * @property {GridViewItem} previousSibling - Returns the previous visible sibling grid view item.
 * @property {GridViewItem} nextSibling - Returns the next visible sibling grid view item.
 */
class GridViewItem$1 extends Container$1$1 {
    /**
     * Creates new pcui.GridViewItem
     *
     * @param {object} args - The arguments
     * @param {string} [args.type] - The type of gridview item, can be null or 'radio'
     */
    constructor(args) {
        args = Object.assign({
            tabIndex: 0
        }, args);

        super(args);

        this.allowSelect = args.allowSelect !== undefined ? args.allowSelect : true;
        this._selected = false;

        if (args.type === 'radio') {
            this.class.add(CLASS_ROOT_RADIO);

            this._radioButton = new Element$b({
                class: CLASS_RADIO_BUTTON,
                binding: new BindingObserversToElement$1()
            });

            this._radioButtonClickEvt = this._radioButtonClick.bind(this);

            // Remove radio button click event listener
            this._radioButton.dom.removeEventListener('click', this._radioButton._onClick);
            this._radioButton.dom.addEventListener('click', this._radioButtonClickEvt);

            this.append(this._radioButton);
        } else {
            this.class.add(CLASS_ROOT$5);
        }

        this._labelText = new Label$1$1({
            class: CLASS_TEXT$1,
            binding: new BindingObserversToElement$1()
        });

        this.append(this._labelText);

        this.text = args.text;
        this._type = args.type;

        this._domEvtFocus = this._onFocus.bind(this);
        this._domEvtBlur = this._onBlur.bind(this);

        this.dom.addEventListener('focus', this._domEvtFocus);
        this.dom.addEventListener('blur', this._domEvtBlur);
    }

    _radioButtonClick() {
        this._radioButton.value = this.selected;
    }

    _onFocus() {
        this.emit('focus');
    }

    _onBlur() {
        this.emit('blur');
    }

    focus() {
        this.dom.focus();
    }

    blur() {
        this.dom.blur();
    }

    link(observers, paths) {
        this._labelText.link(observers, paths);
    }

    unlink() {
        this._labelText.unlink();
    }

    destroy() {
        if (this._destroyed) return;

        this.dom.removeEventListener('focus', this._domEvtFocus);
        this.dom.removeEventListener('blur', this._domEvtBlur);

        super.destroy();
    }

    set allowSelect(value) {
        this._allowSelect = value;
    }

    get allowSelect() {
        return this._allowSelect;
    }

    set selected(value) {
        if (value) {
            this.focus();
        }

        if (this._selected === value) return;

        this._selected = value;

        if (value) {
            // Update radio button if it exists
            if (this._radioButton)
                this._radioButton.value = value;
            else
                this.classAdd(CLASS_SELECTED$1);

            this.emit('select', this);
        } else {
            // Update radio button if it exists
            if (this._radioButton)
                this._radioButton.value = false;
            else
                this.classRemove(CLASS_SELECTED$1);

            this.emit('deselect', this);
        }
    }

    get selected() {
        return this._selected;
    }

    set text(value) {
        this._labelText.text = value;
    }

    get text() {
        return this._labelText.text;
    }

    get nextSibling() {
        let sibling = this.dom.nextSibling;
        while (sibling) {
            if (sibling.ui instanceof GridViewItem$1 && !sibling.ui.hidden) {
                return sibling.ui;
            }

            sibling = sibling.nextSibling;
        }

        return null;
    }

    get previousSibling() {
        let sibling = this.dom.previousSibling;
        while (sibling) {
            if (sibling.ui instanceof GridViewItem$1 && !sibling.ui.hidden) {
                return sibling.ui;
            }

            sibling = sibling.previousSibling;
        }

        return null;
    }
}

var Element$a = GridViewItem$1;

const CLASS_ROOT$4 = 'pcui-gridview';
const CLASS_VERTICAL = CLASS_ROOT$4 + '-vertical';

/**
 * @name GridView
 * @augments Container
 * @class
 * @classdesc Represents a container that shows a flexible wrappable
 * list of items that looks like a grid. Contains GridViewItem's.
 * @property {GridViewItem[]} selected Gets the selected grid view items.
 * @property {boolean} vertical If true the gridview layout will be vertical.
 * @property {boolean} multiSelect=true If true, the layout will allow for multiple options to be selected.
 * @property {boolean} allowDeselect=true If true and multiSelect is set to false, the layout will allow options to be deselected.
 */
class GridView$1 extends Container$1$1 {
    /**
     * Creates new GridView.
     *
     * @param {object} [args] - The arguments
     * @param {Function} [args.filterFn] - A filter function to filter gridview items with signature (GridViewItem) => boolean.
     * @param {boolean} [args.vertical] - Whether or not the layout will be vertically aligned
     * @param {boolean} [args.multiSelect] - Whether or not the layout will allow for multiple items to be selected at once.
     * @param {boolean} [args.allowDeselect] - Whether or not the layout will allow for options to be deselected.
     */
    constructor(args) {
        if (!args) args = {};

        super(args);

        this._vertical = !!args.vertical;
        if (this._vertical) {
            this.class.add(CLASS_VERTICAL);
        } else {
            this.class.add(CLASS_ROOT$4);
        }

        this.on('append', this._onAppendGridViewItem.bind(this));
        this.on('remove', this._onRemoveGridViewItem.bind(this));

        this._filterFn = args.filterFn;
        this._filterAnimationFrame = null;
        this._filterCanceled = false;

        // Default options for GridView layout
        this._multiSelect = args.hasOwnProperty('multiSelect') ? args.multiSelect : true;
        this._allowDeselect = args.hasOwnProperty('allowDeselect') ? args.allowDeselect : true;

        this._selected = [];
    }

    _onAppendGridViewItem(item) {
        if (!(item instanceof Element$a)) return;

        let evtClick;
        if (this._clickFn)
            evtClick = item.on('click', evt => this._clickFn(evt, item));
        else
            evtClick = item.on('click', evt => this._onClickItem(evt, item));
        let evtSelect = item.on('select', () => this._onSelectItem(item));

        let evtDeselect;
        if (this._allowDeselect)
            evtDeselect = item.on('deselect', () => this._onDeselectItem(item));

        if (this._filterFn && !this._filterFn(item)) {
            item.hidden = true;
        }

        item.once('griditem:remove', () => {
            evtClick.unbind();
            evtClick = null;

            evtSelect.unbind();
            evtSelect = null;

            if (this._allowDeselect) {
                evtDeselect.unbind();
                evtDeselect = null;
            }
        });
    }

    _onRemoveGridViewItem(item) {
        if (!(item instanceof Element$a)) return;

        item.selected = false;

        item.emit('griditem:remove');
        item.unbind('griditem:remove');
    }

    _onClickItem(evt, item) {
        if ((evt.ctrlKey || evt.metaKey) && this._multiSelect) {
            item.selected = !item.selected;
        } else if (evt.shiftKey && this._multiSelect) {
            const lastSelected = this._selected[this._selected.length - 1];
            if (lastSelected) {
                const comparePosition = lastSelected.dom.compareDocumentPosition(item.dom);
                if (comparePosition & Node.DOCUMENT_POSITION_FOLLOWING) {
                    let sibling = lastSelected.nextSibling;
                    while (sibling) {
                        sibling.selected = true;
                        if (sibling === item) break;

                        sibling = sibling.nextSibling;
                    }
                } else {
                    let sibling = lastSelected.previousSibling;
                    while (sibling) {
                        sibling.selected = true;
                        if (sibling === item) break;

                        sibling = sibling.previousSibling;
                    }
                }
            } else {
                item.selected = true;
            }
        } else {
            let othersSelected = false;
            let i = this._selected.length;
            while (i--) {
                if (this._selected[i] && this._selected[i] !== item) {
                    this._selected[i].selected = false;
                    othersSelected = true;
                }
            }

            if (othersSelected) {
                item.selected = true;
            } else {
                item.selected = !item.selected;
            }
        }
    }

    _onSelectItem(item) {
        this._selected.push(item);
        this.emit('select', item);
    }

    _onDeselectItem(item) {
        const index = this._selected.indexOf(item);
        if (index !== -1) {
            this._selected.splice(index, 1);
            this.emit('deselect', item);
        }
    }

    /**
     * @name GridView#deselect
     * @description Deselects all selected grid view items.
     */
    deselect() {
        let i = this._selected.length;
        while (i--) {
            if (this._selected[i]) {
                this._selected[i].selected = false;
            }
        }
    }

    /**
     * @name GridView#filter
     * @description Filters grid view items with the filter function provided in the constructor.
     */
    filter() {
        this.forEachChild((child) => {
            if (child instanceof Element$a) {
                child.hidden = this._filterFn && !this._filterFn(child);
            }
        });
    }

    /**
     * @name GridView#filterAsync
     * @description Filters grid view items asynchronously by only allowing up to the specified
     * number of grid view item operations. Fires following events:
     * filter:start - When filtering starts
     * filter:end - When filtering ends
     * filter:delay - When an animation frame is requested to process another batch.
     * filter:cancel - When filtering is canceled.
     * @param {number} batchLimit - The maximum number of items to show
     * before requesting another animation frame.
     */
    filterAsync(batchLimit) {
        let i = 0;
        batchLimit = batchLimit || 100;
        const children = this.dom.childNodes;
        const len = children.length;

        this.emit('filter:start');

        this._filterCanceled = false;

        const next = () => {
            this._filterAnimationFrame = null;
            let visible = 0;
            for (; i < len && visible < batchLimit; i++) {
                if (this._filterCanceled) {
                    this._filterCanceled = false;
                    this.emit('filter:cancel');
                    return;
                }

                const child = children[i].ui;
                if (child instanceof Element$a) {
                    if (this._filterFn && !this._filterFn(child)) {
                        child.hidden = true;
                    } else {
                        child.hidden = false;
                        visible++;
                    }
                }
            }

            if (i < len) {
                this.emit('filter:delay');
                this._filterAnimationFrame = requestAnimationFrame(next);
            } else {
                this.emit('filter:end');
            }
        };

        next();
    }

    /**
     * @name GridView#filterAsyncCancel
     * @description Cancels asynchronous filtering.
     */
    filterAsyncCancel() {
        if (this._filterAnimationFrame) {
            cancelAnimationFrame(this._filterAnimationFrame);
            this._filterAnimationFrame = null;
        } else {
            this._filterCanceled = true;
        }
    }

    destroy() {
        if (this._destroyed) return;

        if (this._filterAnimationFrame) {
            cancelAnimationFrame(this._filterAnimationFrame);
            this._filterAnimationFrame = null;
        }

        super.destroy();
    }

    get selected() {
        return this._selected.slice();
    }

    get vertical() {
        return this._vertical;
    }
}

var GridViewElement = GridView$1;

class GridView extends ElementComponent$1 {
    constructor(props) {
        super(props);
        // @ts-ignore
        this.element = new GridViewElement(Object.assign({}, props));
        this.loadChildren(this.props.children, this.element);
    }
    loadChildren(children, element) {
        if (!children)
            return;
        if (!Array.isArray(children)) {
            children = [children];
        }
        children.forEach((child) => {
            // @ts-ignore
            var childElement = new Element$a({ text: child.props.text, open: false });
            element.append(childElement);
            this.loadChildren(child.props.children, childElement);
        });
    }
    render() {
        return React.createElement("div", { ref: (nodeElement) => { nodeElement && nodeElement.appendChild(this.element.dom); } });
    }
}
GridView.ctor = GridViewElement;

class GridViewItem extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$a;
    }
    render() {
        return super.render();
    }
}
GridViewItem.ctor = Element$a;

const CLASS_INFOBOX = 'pcui-infobox';

/**
 * @name InfoBox
 * @class
 * @classdesc Represents an information box.
 * @augments Container
 * @property {string} icon=E401 The CSS code for an icon for the info box. e.g. E401 (notice we omit the '\' character).
 * @property {string} title=Title Gets / sets the 'title' of the info box
 * @property {string} text=Text Gets / sets the 'text' of the info box
 */
class InfoBox$2 extends Container$1$1 {
    /**
     * Creates a new InfoBox.
     *
     * @param {object} args - The arguments. Extends the pcui.Container constructor arguments. All settable properties can also be set through the constructor.
     * @param {boolean} [args.unsafe] - If true then the innerHTML property will be used to set the title/text. Otherwise textContent will be used instead.
     */
    constructor(args) {
        if (!args) args = {};
        super(args);

        this.class.add(CLASS_INFOBOX);
        this._titleElement = new Element$1$1();
        this._textElement = new Element$1$1();
        this.append(this._titleElement);
        this.append(this._textElement);

        this._unsafe = args.unsafe || false;

        this.icon = args.icon || '';
        this.title = args.title || '';
        this.text = args.text || '';
    }

    set icon(value) {
        if (this._icon === value) return;
        this._icon = value;
        if (value) {
            // set data-icon attribute but first convert the value to a code point
            this.dom.setAttribute('data-icon', String.fromCodePoint(parseInt(value, 16)));
        } else {
            this.dom.removeAttribute('data-icon');
        }
    }

    get icon() {
        return this._icon;
    }

    set title(value) {
        if (this._title === value) return;
        this._title = value;
        if (this._unsafe) {
            this._titleElement.dom.innerHTML = value;
        } else {
            this._titleElement.dom.textContent = value;
        }
    }

    get title() {
        return this._title;
    }

    set text(value) {
        if (this._text === value) return;
        this._text = value;
        if (this._unsafe) {
            this._textElement.dom.innerHTML = value;
        } else {
            this._textElement.dom.textContent = value;
        }
    }

    get text() {
        return this._text;
    }
}

Element$1$1.register('infobox', InfoBox$2);

var Element$9 = InfoBox$2;

class InfoBox extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$9;
    }
    render() {
        // @ts-ignore
        return React.createElement("span", { ref: this.attachElement });
    }
}
InfoBox.ctor = Element$9;
InfoBox.defaultProps = {
    icon: 'E401',
    title: 'Hello World',
    text: 'foobar'
};
var InfoBox$1 = InfoBox;

class Label extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Label$1$1;
    }
    render() {
        // @ts-ignore
        return React.createElement("span", { ref: this.attachElement });
    }
}
Label.ctor = Label$1$1;
var Label$1 = Label;

const CLASS_LABEL_GROUP = 'pcui-label-group';
const CLASS_LABEL_TOP = CLASS_LABEL_GROUP + '-align-top';

/**
 * @name LabelGroup
 * @class
 * @classdesc Represents a group of a Label and a Element. Useful for rows of labeled fields.
 * @augments Container
 * @property {string} text - Gets / sets the label text.
 * @property {Element} field - Gets the field. This can only be set through the constructor by passing it in the arguments.
 * @property {Element} label - Gets the label element.
 * @property {boolean} labelAlignTop - Whether to align the label at the top of the group. Defaults to false which aligns it at the center.
 */
class LabelGroup$1 extends Container$1$1 {
    /**
     * Creates a new LabelGroup.
     *
     * @param {object} args - The arguments. Extends the Element arguments. Any settable property can also be set through the constructor.
     * @param {boolean} [args.nativeTooltip] - If true then use the text as the HTML tooltip of the label.
     */
    constructor(args) {
        if (!args) args = {};

        super(args);

        this.class.add(CLASS_LABEL_GROUP);

        this._label = new Label$1$1({
            text: args.text || 'Label',
            nativeTooltip: args.nativeTooltip
        });
        this.append(this._label);

        this._field = args.field;
        if (this._field) {
            this.append(this._field);
        }

        this.labelAlignTop = args.labelAlignTop || false;
    }

    get label() {
        return this._label;
    }

    get field() {
        return this._field;
    }

    set text(value) {
        this._label.text = value;
    }

    get text() {
        return this._label.text;
    }

    set labelAlignTop(value) {
        if (value) {
            this.class.add(CLASS_LABEL_TOP);
        } else {
            this.class.remove(CLASS_LABEL_TOP);
        }
    }

    get labelAlignTop() {
        return this.class.contains(CLASS_LABEL_TOP);
    }
}

Element$1$1.register('labelgroup', LabelGroup$1);

var Element$8 = LabelGroup$1;

class LabelGroup extends react.exports.Component {
    constructor(props) {
        super(props);
        // @ts-ignore
        this.element = new Element$8(Object.assign({}, props));
    }
    render() {
        return React.createElement("div", { className: 'pcui-label-group' },
            React.createElement(Label$1, { text: this.props.text }),
            this.props.children);
    }
}
LabelGroup.ctor = Element$8;

const CLASS_MENU_ITEM = 'pcui-menu-item';
const CLASS_MENU_ITEM_CONTENT = CLASS_MENU_ITEM + '-content';
const CLASS_MENU_ITEM_CHILDREN = CLASS_MENU_ITEM + '-children';
const CLASS_MENU_ITEM_HAS_CHILDREN = CLASS_MENU_ITEM + '-has-children';

/**
 * @name MenuItem
 * @class
 * @classdesc The MenuItem is a selectable option that is appended to a Menu.
 * A MenuItem can also contain child MenuItems (by appending them to the MenuItem). This
 * can be useful to show nested Menus.
 * @augments Container
 * @mixes IBindable
 *
 * @property {boolean} hasChildren - Whether the MenuItem has any child MenuItems.
 * @property {string} text - Gets / sets the text shown on the MenuItem.
 * @property {string} icon - Gets / sets the CSS code for an icon for the MenuItem. e.g. E401 (notice we omit the '\' character).
 * @property {Menu} menu Gets / sets the parent Menu Element.
 * @property {Function} onSelect Gets / sets the function called when we select the MenuItem.
 * @property {Function} onIsEnabled Gets / sets the function that determines whether the MenuItem should be enabled when the Menu is shown.
 * @property {Function} onIsVisible Gets / sets the function that determines whether the MenuItem should be visible when the Menu is shown.
 */
class MenuItem extends Container$1$1 {
    /**
     * Creates new MenuItem.
     *
     * @param {object} args - The arguments. Extends the pcui.Container constructor arguments. All settable properties can also be set through the constructor.
     * @param {object[]} args.items - An array of MenuItem constructor data. If defined then child MenuItems will be created and added to the MenuItem.
     */
    constructor(args) {
        if (!args) args = {};

        super(args);

        this.class.add(CLASS_MENU_ITEM);

        this._containerContent = new Container$1$1({
            class: CLASS_MENU_ITEM_CONTENT,
            flex: true,
            flexDirection: 'row'
        });
        this.append(this._containerContent);

        this._numChildren = 0;

        this._icon = null;

        this._labelText = new Label$1$1();
        this._containerContent.append(this._labelText);

        this._containerItems = new Container$1$1({
            class: CLASS_MENU_ITEM_CHILDREN
        });
        this.append(this._containerItems);
        this.domContent = this._containerItems.dom;

        this.text = args.text || 'Untitled';

        this._domEvtMenuItemClick = this._onClickMenuItem.bind(this);
        this.dom.addEventListener('click', this._domEvtMenuItemClick);

        if (args.value) {
            this.value = args.value;
        }
        if (args.icon) {
            this.icon = args.icon;
        }
        if (args.binding) {
            this.binding = args.binding;
        }

        this.onIsEnabled = args.onIsEnabled;
        this.onSelect = args.onSelect;
        this.onIsVisible = args.onIsVisible;

        this._menu = null;

        if (args.items) {
            args.items.forEach((item) => {
                const menuItem = new MenuItem(item);
                this.append(menuItem);
            });
        }
    }

    _onAppendChild(element) {
        super._onAppendChild(element);

        this._numChildren++;
        if (element instanceof MenuItem) {
            this.class.add(CLASS_MENU_ITEM_HAS_CHILDREN);
            element.menu = this.menu;
        }
    }

    _onRemoveChild(element) {
        if (element instanceof MenuItem) {
            this._numChildren--;
            if (this._numChildren === 0) {
                this.class.remove(CLASS_MENU_ITEM_HAS_CHILDREN);
            }
            element.menu = null;
        }
        super._onRemoveChild(element);
    }

    _onClickMenuItem(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        if (!this.disabled) {
            this.select();
        }
    }

    link(observers, paths) {
        super.link(observers, paths);
        this._labelText.link(observers, paths);
    }

    unlink() {
        super.unlink();
        this._labelText.unlink();
    }

    /**
     * Selects the MenuItem which also happens automatically
     * when the user clicks on the MenuItem.
     */
    select() {
        if (!this.enabled) return;
        if (this._onSelect) {
            this._onSelect();
        }
        this.emit('select');

        if (this.menu) {
            this.menu.hidden = true;
        }
    }

    destroy() {
        if (this.destroyed) return;

        this.dom.removeEventListener('click', this._domEvtMenuItemClick);

        super.destroy();
    }

    set text(value) {
        this._labelText.text = value;
    }

    get text() {
        return this._labelText.text;
    }

    set value(value) {
        this.text = value;
    }

    get value() {
        return this.text;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        this._labelText.values = values;
    }

    set icon(value) {
        if (this._icon === value || !value.match(/^E[0-9]{0,4}$/)) return;
        this._icon = value;
        if (value) {
            // set data-icon attribute but first convert the value to a code point
            this._labelText.dom.setAttribute('data-icon', String.fromCodePoint(parseInt(value, 16)));
        } else {
            this._labelText.dom.removeAttribute('data-icon');
        }
    }

    get icon() {
        return this._icon;
    }

    set binding(value) {
        this._labelText.binding = value;
    }

    get binding() {
        return this._labelText.binding;
    }

    set menu(value) {
        this._menu = value;

        // set menu on child menu items
        if (!this._containerItems.destroyed) {
            this._containerItems.dom.childNodes.forEach((child) => {
                if (child.ui instanceof MenuItem) {
                    child.ui.menu = value;
                }
            });
        }
    }

    get menu() {
        return this._menu;
    }

    set onSelect(value) {
        this._onSelect = value;
    }

    get onSelect() {
        return this._onSelect;
    }

    set onIsEnabled(value) {
        this._onIsEnabled = value;
    }

    get onIsEnabled() {
        return this._onIsEnabled;
    }

    set onIsVisible(value) {
        this._onIsVisible = value;
    }

    get onIsVisible() {
        return this._onIsVisible;
    }

    get hasChildren() {
        return this._numChildren > 0;
    }
}

var MenuItem$1 = MenuItem;

const CLASS_MENU = 'pcui-menu';
const CLASS_MENU_ITEMS = CLASS_MENU + '-items';

/**
 * @name Menu
 * @class
 * @classdesc A Menu is a list of MenuItems which can contain child MenuItems. Useful
 * to show context menus and nested menus. Note that a Menu must be appended to the root Element
 * and then positioned accordingly.
 * @augments Container
 * @mixes IFocusable
 */
class Menu$1 extends Container$1$1 {
    /**
     * Creates a new Menu.
     *
     * @param {object} args - The arguments. Extends the pcui.Container constructor arguments. All settable properties can also be set through the constructor.
     * @param {object[]} args.items - An optional array of MenuItem data. If these are passed then new MenuItems will be created and appended to the menu.
     */
    constructor(args) {
        if (!args) args = {};

        if (args.hidden === undefined) {
            args.hidden = true;
        }

        if (args.tabIndex === undefined) {
            args.tabIndex = 1;
        }

        super(args);

        this.class.add(CLASS_MENU);

        this._containerMenuItems = new Container$1$1({
            class: CLASS_MENU_ITEMS,
            flex: true,
            flexDirection: 'column'
        });
        this.append(this._containerMenuItems);

        this.domContent = this._containerMenuItems.dom;

        this._domEvtContextMenu = this._onClickMenu.bind(this);
        this._domEvtKeyDown = this._onKeyDown.bind(this);
        this._domEvtFocus = this._onFocus.bind(this);
        this._domEvtBlur = this._onBlur.bind(this);

        this.on('click', this._onClickMenu.bind(this));
        this.on('show', this._onShowMenu.bind(this));
        this.dom.addEventListener('contextmenu', this._domEvtContextMenu);
        this.dom.addEventListener('keydown', this._domEvtKeyDown);

        if (args.items) {
            args.items.forEach((item) => {
                const menuItem = new MenuItem$1(item);
                this.append(menuItem);
            });
        }
    }

    _onAppendChild(element) {
        if (element instanceof MenuItem$1) {
            element.menu = this;
        }
    }

    _onRemoveChild(element) {
        if (element instanceof MenuItem$1) {
            element.menu = null;
        }
    }

    _onClickMenu(evt) {
        if (!this._containerMenuItems.dom.contains(evt.target)) {
            this.hidden = true;
        }
    }

    _onFocus(evt) {
        this.emit('focus');
    }

    _onBlur(evt) {
        this.emit('blur');
    }

    _onShowMenu() {
        this.focus();

        // filter child menu items
        this._containerMenuItems.dom.childNodes.forEach((child) => {
            this._filterMenuItems(child.ui);
        });
    }

    _filterMenuItems(item) {
        if (!(item instanceof MenuItem$1)) return;

        if (item.onIsEnabled) {
            item.enabled = item.onIsEnabled();
        }
        if (item.onIsVisible) {
            item.hidden = !item.onIsVisible();
        }

        item._containerItems.dom.childNodes.forEach((child) => {
            this._filterMenuItems(child.ui);
        });
    }

    _onKeyDown(evt) {
        if (this.hidden) return;

        // hide on esc
        if (evt.keyCode === 27) {
            this.hidden = true;
        }
    }

    _limitSubmenuAtScreenEdges(item) {
        if (!(item instanceof MenuItem$1) || !item.hasChildren) return;

        item._containerItems.style.top = '';
        item._containerItems.style.left = '';
        item._containerItems.style.right = '';

        const rect = item._containerItems.dom.getBoundingClientRect();
        // limit to bottom / top of screen
        if (rect.bottom > window.innerHeight) {
            item._containerItems.style.top = -(rect.bottom - window.innerHeight) + 'px';
        }
        if (rect.right > window.innerWidth) {
            item._containerItems.style.left = 'auto';
            item._containerItems.style.right = '100%';
        }

        item._containerItems.dom.childNodes.forEach((child) => {
            this._limitSubmenuAtScreenEdges(child.ui);
        });
    }

    focus() {
        this.dom.focus();
    }

    blur() {
        this.dom.blur();
    }

    /**
     * Positions the menu at the specified coordinates.
     *
     * @param {number} x - The x coordinate.
     * @param {number} y - The y coordinate.
     */
    position(x, y) {
        const rect = this._containerMenuItems.dom.getBoundingClientRect();

        let left = (x || 0);
        let top = (y || 0);

        // limit to bottom / top of screen
        if (top + rect.height > window.innerHeight) {
            top = window.innerHeight - rect.height;
        } else if (top < 0) {
            top = 0;
        }
        if (left + rect.width > window.innerWidth) {
            left = window.innerWidth - rect.width;
        } else if (left < 0) {
            left = 0;
        }

        this._containerMenuItems.style.left = left + 'px';
        this._containerMenuItems.style.top = top + 'px';

        this._containerMenuItems.dom.childNodes.forEach((child) => {
            this._limitSubmenuAtScreenEdges(child.ui);
        });
    }

    destroy() {
        if (this.destroyed) return;

        this.dom.removeEventListener('keydown', this._domEvtKeyDown);
        this.dom.removeEventListener('contextmenu', this._domEvtContextMenu);
        this.dom.removeEventListener('focus', this._domEvtFocus);
        this.dom.removeEventListener('blur', this._domEvtBlur);

        super.destroy();
    }
}

var Element$7 = Menu$1;

class Menu extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.onDivLoaded = (element) => {
            // @ts-ignore
            this.element = new Element$7(Object.assign(Object.assign({}, this.props), { dom: element }));
        };
        this.elementClass = Element$7;
    }
    render() {
        return React.createElement("div", { ref: this.onDivLoaded });
    }
}
Menu.ctor = Element$7;

class NumericInput extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = NumericInput$1$1;
        if (props.onValidate) {
            this.onValidate = props.onValidate;
        }
        this.onAttach = this.onAttachFn.bind(this);
    }
    onAttachFn() {
        if (this.onValidate) {
            this.element.onValidate = this.onValidate;
        }
    }
    render() {
        return super.render();
    }
}
NumericInput.ctor = NumericInput$1$1;

class Overlay extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$h;
    }
    render() {
        return super.render();
    }
}
Overlay.ctor = Element$h;

class Panel extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$l;
    }
    componentDidMount() {
        this.attachElement(this.nodeElement, this.containerElement);
    }
    render() {
        let elements = React.Children.toArray(this.props.children);
        if (elements.length === 1) {
            elements = React.cloneElement(elements[0], { parent: this.element });
        }
        else if (elements.length > 0) {
            elements = elements.map((element) => React.cloneElement(element, { parent: this.element }));
        }
        return React.createElement("div", { ref: (nodeElement) => this.nodeElement = nodeElement },
            React.createElement("div", { ref: (containerElement) => this.containerElement = containerElement }, elements));
    }
}
Panel.ctor = Element$l;
var Panel$1 = Panel;

const CLASS_ROOT$3 = 'pcui-progress';
const CLASS_INNER = CLASS_ROOT$3 + '-inner';
/**
 * @name Progress
 * @class
 * @classdesc Represents a bar that can highlight progress of an activity.
 * @augments Container
 * @property {number} value Gets / sets the value of the progress bar (between 0 and 100).
 */
class Progress$1 extends Container$1$1 {
    constructor(args) {
        if (!args) args = {};
        super(args);
        this.class.add(CLASS_ROOT$3);

        this._inner = new Element$1$1();
        this.append(this._inner);
        this._inner.class.add(CLASS_INNER);

        if (args.value !== undefined) {
            this.value = args.value;
        }
    }

    set value(val) {
        if (this._value === val) return;

        this._value = val;
        this._inner.width = `${this._value}%`;
        this.emit('change', val);
    }

    get value() {
        return this._value;
    }
}

Element$1$1.register('progress', Progress$1);

var Element$6 = Progress$1;

class Progress extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$6;
    }
    render() {
        return super.render();
    }
}
Progress.ctor = Element$6;

class RadioButton extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$b;
    }
    render() {
        return super.render();
    }
}
RadioButton.ctor = Element$b;

class SelectInput extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$d;
    }
    render() {
        return super.render();
    }
}
SelectInput.ctor = Element$d;
SelectInput.defaultProps = {
    options: [
        {
            v: 'Foo',
            t: 'Foo'
        },
        {
            v: 'Bar',
            t: 'Bar'
        }
    ]
};
var SelectInput$1 = SelectInput;

const CLASS_SLIDER = 'pcui-slider';
const CLASS_SLIDER_CONTAINER = CLASS_SLIDER + '-container';
const CLASS_SLIDER_BAR = CLASS_SLIDER + '-bar';
const CLASS_SLIDER_HANDLE = CLASS_SLIDER + '-handle';
const CLASS_SLIDER_ACTIVE = CLASS_SLIDER + '-active';

const IS_CHROME = /Chrome\//.test(navigator.userAgent);

// fields that are proxied between the slider and the numeric input
const PROXY_FIELDS = [
    'allowNull',
    'max',
    'min',
    'keyChange',
    'placeholder',
    'precision',
    'renderChanges',
    'step'
];

/**
 * @name SliderInput
 * @class
 * @classdesc The SliderInput shows a pcui.NumericInput and a slider widget next to it. It acts as a proxy
 * of the NumericInput.
 * @property {number} min=0 Gets / sets the minimum value that the numeric input field can take.
 * @property {number} max=1 Gets / sets the maximum value that the numeric input field can take.
 * @property {number} sliderMin=0 Gets / sets the minimum value that the slider field can take.
 * @property {number} sliderMax=1 Gets / sets the maximum value that the slider field can take.
 * @property {number} pre Gets / sets the maximum number of decimals a value can take.
 * @property {number} step Gets / sets the amount that the value will be increased or decreased when using the arrow keys. Holding Shift will use 10x the step.
 * @property {boolean} allowNull Gets / sets whether the value can be null. If not then it will be 0 instead of null.
 * @augments Element
 * @mixes IBindable
 * @mixes IFocusable
 */
class SliderInput$2 extends Element$1$1 {
    /**
     * Creates a new SliderInput.
     *
     * @param {object} args - The arguments. Extends the pcui.NumericInput constructor arguments.
     */
    constructor(args) {
        args = Object.assign({}, args);

        const inputArgs = {};
        PROXY_FIELDS.forEach((field) => {
            inputArgs[field] = args[field];
        });

        if (inputArgs.precision === undefined) {
            inputArgs.precision = 2;
        }

        // binding should only go to the slider
        // and the slider will propagate changes to the numeric input
        delete inputArgs.binding;

        super(args.dom ? args.dom : document.createElement('div'), args);

        if (args.pre) this.precision = args.pre;

        this.class.add(CLASS_SLIDER);

        this._historyCombine = false;
        this._historyPostfix = null;

        this._numericInput = new NumericInput$1$1({ ...inputArgs, hideSlider: true });

        // propagate change event
        this._numericInput.on('change', this._onValueChange.bind(this));
        // propagate focus / blur events
        this._numericInput.on('focus', () => {
            this.emit('focus');
        });

        this._numericInput.on('blur', () => {
            this.emit('blur');
        });

        this._sliderMin = (args.sliderMin !== undefined ? args.sliderMin : this.min || 0);
        this._sliderMax = (args.sliderMax !== undefined ? args.sliderMax : this.max || 1);

        this.dom.appendChild(this._numericInput.dom);
        this._numericInput.parent = this;

        this._domSlider = document.createElement('div');
        this._domSlider.classList.add(CLASS_SLIDER_CONTAINER);
        this.dom.appendChild(this._domSlider);

        this._domBar = document.createElement('div');
        this._domBar.classList.add(CLASS_SLIDER_BAR);
        this._domBar.ui = this;
        this._domSlider.appendChild(this._domBar);

        this._domHandle = document.createElement('div');
        this._domHandle.ui = this;
        this._domHandle.tabIndex = 0;
        this._domHandle.classList.add(CLASS_SLIDER_HANDLE);
        this._domBar.appendChild(this._domHandle);
        this._cursorHandleOffset = 0;

        this._domMouseDown = this._onMouseDown.bind(this);
        this._domMouseMove = this._onMouseMove.bind(this);
        this._domMouseUp = this._onMouseUp.bind(this);
        this._domTouchStart = this._onTouchStart.bind(this);
        this._domTouchMove = this._onTouchMove.bind(this);
        this._domTouchEnd = this._onTouchEnd.bind(this);
        this._domKeyDown = this._onKeyDown.bind(this);

        this._touchId = null;

        this._domSlider.addEventListener('mousedown', this._domMouseDown);
        this._domSlider.addEventListener('touchstart', this._domTouchStart, { passive: true });
        this._domHandle.addEventListener('keydown', this._domKeyDown);

        if (args.value !== undefined) {
            this.value = args.value;
        }

        // update the handle in case a 0 value has been
        // passed through the constructor
        if (this.value === 0) {
            this._updateHandle(0);
        }
    }

    _onMouseDown(evt) {
        if (evt.button !== 0 || !this.enabled || this.readOnly) return;
        this._onSlideStart(evt.pageX);
    }

    _onMouseMove(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        this._onSlideMove(evt.pageX);
    }

    _onMouseUp(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        this._onSlideEnd(evt.pageX);
    }

    _onTouchStart(evt) {
        if (!this.enabled || this.readOnly) return;

        for (let i = 0; i < evt.changedTouches.length; i++) {
            const touch = evt.changedTouches[i];
            if (!touch.target.ui || touch.target.ui !== this)
                continue;

            this._touchId = touch.identifier;
            this._onSlideStart(touch.pageX);
            break;
        }
    }

    _onTouchMove(evt) {
        for (let i = 0; i < evt.changedTouches.length; i++) {
            const touch = evt.changedTouches[i];

            if (touch.identifier !== this._touchId)
                continue;

            evt.stopPropagation();
            evt.preventDefault();

            this._onSlideMove(touch.pageX);
            break;
        }
    }

    _onTouchEnd(evt) {
        for (let i = 0; i < evt.changedTouches.length; i++) {
            const touch = evt.changedTouches[i];

            if (touch.identifier !== this._touchId)
                continue;

            evt.stopPropagation();
            evt.preventDefault();

            this._onSlideEnd(touch.pageX);
            this._touchId = null;
            break;
        }
    }

    _onKeyDown(evt) {
        if (evt.keyCode === 27) {
            this.blur();
            return;
        }

        if (!this.enabled || this.readOnly) return;

        // move slider with left / right arrow keys
        if (evt.keyCode !== 37 && evt.keyCode !== 39) return;

        evt.stopPropagation();
        evt.preventDefault();
        let x = evt.keyCode === 37 ? -1 : 1;
        if (evt.shiftKey) {
            x *= 10;
        }

        this.value += x * this.step;
    }

    _updateHandle(value) {
        const left = Math.max(0, Math.min(1, ((value || 0) - this._sliderMin) / (this._sliderMax - this._sliderMin))) * 100;
        const handleWidth = this._domHandle.getBoundingClientRect().width;
        this._domHandle.style.left = `calc(${left}% + ${handleWidth / 2}px)`;
    }

    _onValueChange(value) {
        this._updateHandle(value);
        if (!this._suppressChange) {
            this.emit('change', value);
        }

        if (this._binding) {
            this._binding.setValue(value);
        }
    }

    // Calculates the distance in pixels between
    // the cursor x and the middle of the handle.
    // If the cursor is not on the handle sets the offset to 0
    _calculateCursorHandleOffset(pageX) {
        // not sure why but the left side needs a margin of a couple of pixels
        // to properly determine if the cursor is on the handle (in Chrome)
        const margin = IS_CHROME ? 2 : 0;
        const rect = this._domHandle.getBoundingClientRect();
        const left = rect.left - margin;
        const right = rect.right;
        if (pageX >= left && pageX <= right) {
            this._cursorHandleOffset = pageX - (left + (right - left) / 2);
        } else {
            this._cursorHandleOffset = 0;
        }

        return this._cursorHandleOffset;
    }

    _onSlideStart(pageX) {
        this._domHandle.focus();
        if (this._touchId === null) {
            window.addEventListener('mousemove', this._domMouseMove);
            window.addEventListener('mouseup', this._domMouseUp);
        } else {
            window.addEventListener('touchmove', this._domTouchMove);
            window.addEventListener('touchend', this._domTouchEnd);
        }

        this.class.add(CLASS_SLIDER_ACTIVE);

        // calculate the cursor - handle offset. If there is
        // an offset that means the cursor is on the handle so
        // do not move the handle until the cursor moves.
        if (!this._calculateCursorHandleOffset(pageX)) {
            this._onSlideMove(pageX);
        }

        if (this.binding) {
            this._historyCombine = this.binding.historyCombine;
            this._historyPostfix = this.binding.historyPostfix;

            this.binding.historyCombine = true;
            this.binding.historyPostfix = `(${Date.now()})`;
        }
    }

    _onSlideMove(pageX) {
        const rect = this._domBar.getBoundingClientRect();
        // reduce pageX by the initial cursor - handle offset
        pageX -= this._cursorHandleOffset;
        const x = Math.max(0, Math.min(1, (pageX - rect.left) / rect.width));

        const range = this._sliderMax - this._sliderMin;
        let value = (x * range) + this._sliderMin;
        value = parseFloat(value.toFixed(this.precision));

        this.value = value;
    }

    _onSlideEnd(pageX) {
        // when slide ends only move the handle if the cursor is no longer
        // on the handle
        if (!this._calculateCursorHandleOffset(pageX)) {
            this._onSlideMove(pageX);
        }

        this.class.remove(CLASS_SLIDER_ACTIVE);

        if (this._touchId === null) {
            window.removeEventListener('mousemove', this._domMouseMove);
            window.removeEventListener('mouseup', this._domMouseUp);
        } else {
            window.removeEventListener('touchmove', this._domTouchMove);
            window.removeEventListener('touchend', this._domTouchEnd);
        }

        if (this.binding) {
            this.binding.historyCombine = this._historyCombine;
            this.binding.historyPostfix = this._historyPostfix;

            this._historyCombine = false;
            this._historyPostfix = null;
        }

    }

    focus() {
        this._numericInput.focus();
    }

    blur() {
        this._domHandle.blur();
        this._numericInput.blur();
    }

    destroy() {
        if (this._destroyed) return;
        this._domSlider.removeEventListener('mousedown', this._domMouseDown);
        this._domSlider.removeEventListener('touchstart', this._domTouchStart);

        this._domHandle.removeEventListener('keydown', this._domKeyDown);

        this.dom.removeEventListener('mouseup', this._domMouseUp);
        this.dom.removeEventListener('mousemove', this._domMouseMove);
        this.dom.removeEventListener('touchmove', this._domTouchMove);
        this.dom.removeEventListener('touchend', this._domTouchEnd);
        super.destroy();
    }

    set sliderMin(value) {
        if (this._sliderMin === value) return;

        this._sliderMin = value;
        this._updateHandle(this.value);
    }

    get sliderMin() {
        return this._sliderMin;
    }

    set sliderMax(value) {
        if (this._sliderMax === value) return;

        this._sliderMax = value;
        this._updateHandle(this.value);
    }

    get sliderMax() {
        return this._sliderMax;
    }

    set value(value) {
        this._numericInput.value = value;
        if (this._numericInput.class.contains(MULTIPLE_VALUES)) {
            this.class.add(MULTIPLE_VALUES);
        } else {
            this.class.remove(MULTIPLE_VALUES);
        }
    }

    get value() {
        return this._numericInput.value;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        this._numericInput.values = values;
        if (this._numericInput.class.contains(MULTIPLE_VALUES)) {
            this.class.add(MULTIPLE_VALUES);
        } else {
            this.class.remove(MULTIPLE_VALUES);
        }
    }
}

utils$1.proxy(SliderInput$2, '_numericInput', PROXY_FIELDS);

Element$1$1.register('slider', SliderInput$2, { renderChanges: true });

var Element$5 = SliderInput$2;

class SliderInput extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$5;
    }
    render() {
        return super.render();
    }
}
SliderInput.ctor = Element$5;
var SliderInput$1 = SliderInput;

const CLASS_ROOT$2 = 'pcui-spinner';

function createSmallThick(size, dom) {
    const spinner = dom || document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    spinner.classList.add('spin');
    spinner.setAttribute('width', size);
    spinner.setAttribute('height', size);
    spinner.setAttribute('viewBox', '0 0 14 14');
    spinner.setAttribute('fill', 'none');
    spinner.innerHTML = '<path d="M7 14C3.13871 14 0 10.8613 0 7C0 3.13871 3.13871 0 7 0C10.8613 0 14 3.13871 14 7C14 10.8613 10.8613 14 7 14ZM7 2.25806C4.38064 2.25806 2.25806 4.38064 2.25806 7C2.25806 9.61935 4.38064 11.7419 7 11.7419C9.61935 11.7419 11.7419 9.61935 11.7419 7C11.7419 4.38064 9.61935 2.25806 7 2.25806Z" fill="#773417"/><path class="pcui-spinner-highlight" d="M7 14V11.7419C9.61935 11.7419 11.7419 9.61935 11.7419 7H14C14 10.8613 10.8613 14 7 14Z" fill="#FF6600"/>';
    return spinner;
}
/**
 * @name Spinner
 * @augments Element
 * @class
 * @classdesc Represents a spinning icon
 */
class Spinner$2 extends Element$1$1 {
    /**
     * Creates a new spinner.
     *
     * @param {object} [args] - The arguments
     * @param {number} [args.size=12] - The pixel size of the spinner
     */
    constructor(args) {
        args = Object.assign({
            type: Spinner$2.TYPE_SMALL_THICK
        }, args);

        let dom = null;

        if (args.type === Spinner$2.TYPE_SMALL_THICK) {
            dom = createSmallThick(args.size || 12, args.dom);
        }

        super(dom, args);

        this.class.add(CLASS_ROOT$2);
    }
}

Spinner$2.TYPE_SMALL_THICK = 'small-thick';
// add more types here

var Element$4 = Spinner$2;

class Spinner extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$4;
    }
    render() {
        // @ts-ignore
        return React.createElement("svg", { ref: this.attachElement });
    }
}
Spinner.ctor = Element$4;
Spinner.defaultProps = {
    size: 12
};
var Spinner$1 = Spinner;

const CLASS_TEXT_AREA_INPUT = 'pcui-text-area-input';
const CLASS_TEXT_AREA_INPUT_RESIZABLE = CLASS_TEXT_AREA_INPUT + '-resizable';
const CLASS_TEXT_AREA_INPUT_RESIZABLE_NONE = CLASS_TEXT_AREA_INPUT_RESIZABLE + '-none';
const CLASS_TEXT_AREA_INPUT_RESIZABLE_BOTH = CLASS_TEXT_AREA_INPUT_RESIZABLE + '-both';
const CLASS_TEXT_AREA_INPUT_RESIZABLE_HORIZONTAL = CLASS_TEXT_AREA_INPUT_RESIZABLE + '-horizontal';
const CLASS_TEXT_AREA_INPUT_RESIZABLE_VERTICAL = CLASS_TEXT_AREA_INPUT_RESIZABLE + '-vertical';

/**
 * @name TextAreaInput
 * @class
 * @classdesc The TextAreaInput wraps a textarea element. It has the same interface as pcui.TextInput.
 * @augments TextInput
 * @property {string} [resizable=none] Sets whether the size of the text area input can be modified by the user. Can be one of 'none', 'both', 'horizontal' or 'vertical'.
 */
class TextAreaInput$1 extends TextInput$1$1 {
    /**
     * Creates a new TextAreaInput.
     *
     * @param {object} args - The arguments. Extends the pcui.TextInput constructor arguments.
     */
    constructor(args) {
        args = Object.assign({
            input: document.createElement('textarea')
        }, args);

        super(args);

        this.class.add(CLASS_TEXT_AREA_INPUT);
        switch (args.resizable) {
            case 'both':
                this.class.add(CLASS_TEXT_AREA_INPUT_RESIZABLE_BOTH);
                break;
            case 'horizontal':
                this.class.add(CLASS_TEXT_AREA_INPUT_RESIZABLE_HORIZONTAL);
                break;
            case 'vertical':
                this.class.add(CLASS_TEXT_AREA_INPUT_RESIZABLE_VERTICAL);
                break;
            case 'none':
            default:
                this.class.add(CLASS_TEXT_AREA_INPUT_RESIZABLE_NONE);
                break;
        }
    }

    _onInputKeyDown(evt) {
        if ((evt.keyCode === 27 && this.blurOnEscape) || (evt.keyCode === 13 && this.blurOnEnter && !evt.shiftKey)) {
            this._domInput.blur();
        }

        this.emit('keydown', evt);
    }
}

Element$1$1.register('text', TextAreaInput$1, { renderChanges: true });

var Element$3 = TextAreaInput$1;

class TextAreaInput extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$3;
    }
    render() {
        return super.render();
    }
}
TextAreaInput.ctor = Element$3;

class TextInput extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = TextInput$1$1;
        if (props.onValidate) {
            this.onValidate = props.onValidate;
        }
        this.onAttach = this.onAttachFn.bind(this);
    }
    onAttachFn() {
        if (this.onValidate) {
            this.element.onValidate = this.onValidate;
        }
    }
    render() {
        return super.render();
    }
}
TextInput.ctor = TextInput$1$1;
var TextInput$1 = TextInput;

const CLASS_ROOT$1 = 'pcui-treeview-item';
const CLASS_ICON = CLASS_ROOT$1 + '-icon';
const CLASS_TEXT = CLASS_ROOT$1 + '-text';
const CLASS_SELECTED = CLASS_ROOT$1 + '-selected';
const CLASS_OPEN = CLASS_ROOT$1 + '-open';
const CLASS_CONTENTS = CLASS_ROOT$1 + '-contents';
const CLASS_EMPTY = CLASS_ROOT$1 + '-empty';
const CLASS_RENAME = CLASS_ROOT$1 + '-rename';

/**
 * @event
 * @name TreeViewItem#select
 * @description Fired when we select the TreeViewItem.
 * @param {TreeViewItem} item - The item
 */

/**
 * @event
 * @name TreeViewItem#deselect
 * @description Fired when we deselect the TreeViewItem.
 * @param {TreeViewItem} item - The item
 */

/**
 * @event
 * @name TreeViewItem#open
 * @description Fired when we open a TreeViewItem
 * @param {TreeViewItem} item - The item
 */

/**
 * @event
 * @name TreeViewItem#close
 * @description Fired when we close the TreeViewItem.
 * @param {TreeViewItem} item - The item
 */

/**
 * @name TreeViewItem
 * @class
 * @classdesc Represents a Tree View Item to be added to a pcui.TreeView.
 * @mixes IFocusable
 * @property {boolean} selected Whether the item is selected.
 * @property {boolean} allowSelect=true Whether the item can be selected.
 * @property {boolean} open Whether the item is open meaning showing its children.
 * @property {boolean} parentsOpen Whether the parents of the item are open or closed.
 * @property {boolean} allowDrag=true Whether this tree item can be dragged. Only considered if the parent treeview has allowDrag true.
 * @property {boolean} allowDrop=true Whether dropping is allowed on the tree item.
 * @property {string} text The text shown by the TreeViewItem.
 * @property {string} icon The icon shown before the text in the TreeViewItem.
 * @property {number} The number of direct children.
 * @property {Label} textLabel Gets the internal label that shows the text.
 * @property {Label} iconLabel Gets the internal label that shows the icon.
 * @property {TreeView} treeView Gets / sets the parent TreeView.
 * @property {TreeViewItem} firstChild Gets the first child item.
 * @property {TreeViewItem} lastChild Gets the last child item.
 * @property {TreeViewItem} nextSibling Gets the first sibling item.
 * @property {TreeViewItem} previousSibling Gets the last sibling item.
 */
class TreeViewItem$1 extends Container$1$1 {
    /**
     * Creates a new TreeViewItem.
     *
     * @param {object} [args] - The arguments.
     */
    constructor(args) {
        if (!args) {
            args = {};
        }

        args.flex = true;

        super(args);

        this.class.add(CLASS_ROOT$1, CLASS_EMPTY);

        this._containerContents = new Container$1$1({
            class: CLASS_CONTENTS,
            flex: true,
            flexDirection: 'row',
            tabIndex: 0
        });
        this.append(this._containerContents);

        this._containerContents.dom.draggable = true;

        this._labelIcon = new Label$1$1({
            class: CLASS_ICON
        });
        this._containerContents.append(this._labelIcon);

        this.icon = args.icon || 'E360';

        this._labelText = new Label$1$1({
            class: CLASS_TEXT
        });
        this._containerContents.append(this._labelText);

        this.allowSelect = (args.allowSelect !== undefined ? args.allowSelect : true);
        this.allowDrop = (args.allowDrop !== undefined ? args.allowDrop : true);
        this.allowDrag = (args.allowDrag !== undefined ? args.allowDrag : true);
        if (args.text) {
            this.text = args.text;
        }

        if (args.selected) {
            this.selected = args.selected;
        }

        this._numChildren = 0;

        // used the the parent treeview
        this._treeOrder = -1;

        this._domEvtFocus = this._onContentFocus.bind(this);
        this._domEvtBlur = this._onContentBlur.bind(this);
        this._domEvtKeyDown = this._onContentKeyDown.bind(this);
        this._domEvtDragStart = this._onContentDragStart.bind(this);
        this._domEvtMouseDown = this._onContentMouseDown.bind(this);
        this._domEvtMouseUp = this._onContentMouseUp.bind(this);
        this._domEvtMouseOver = this._onContentMouseOver.bind(this);
        this._domEvtClick = this._onContentClick.bind(this);
        this._domEvtDblClick = this._onContentDblClick.bind(this);
        this._domEvtContextMenu = this._onContentContextMenu.bind(this);

        this._containerContents.dom.addEventListener('focus', this._domEvtFocus);
        this._containerContents.dom.addEventListener('blur', this._domEvtBlur);
        this._containerContents.dom.addEventListener('keydown', this._domEvtKeyDown);
        this._containerContents.dom.addEventListener('dragstart', this._domEvtDragStart);
        this._containerContents.dom.addEventListener('mousedown', this._domEvtMouseDown);
        this._containerContents.dom.addEventListener('mouseover', this._domEvtMouseOver);
        this._containerContents.dom.addEventListener('click', this._domEvtClick);
        this._containerContents.dom.addEventListener('dblclick', this._domEvtDblClick);
        this._containerContents.dom.addEventListener('contextmenu', this._domEvtContextMenu);
    }

    _onAppendChild(element) {
        super._onAppendChild(element);

        if (!(element instanceof TreeViewItem$1)) return;

        this._numChildren++;
        if (this._parent !== this._treeView) this.classRemove(CLASS_EMPTY);

        if (this._treeView) {
            this._treeView._onAppendTreeViewItem(element);
        }
    }

    _onRemoveChild(element) {
        if (element instanceof TreeViewItem$1) {
            this._numChildren--;
            if (this._numChildren === 0) {
                this.classAdd(CLASS_EMPTY);
            }

            if (this._treeView) {
                this._treeView._onRemoveTreeViewItem(element);
            }
        }

        super._onRemoveChild(element);
    }

    _onContentKeyDown(evt) {
        if (evt.target.tagName.toLowerCase() === 'input') return;

        if (!this.allowSelect) return;

        if (this._treeView) {
            this._treeView._onChildKeyDown(evt, this);
        }
    }

    _onContentMouseDown(evt) {
        if (!this._treeView || !this._treeView.allowDrag || !this._allowDrag) return;

        this._treeView._updateModifierKeys(evt);
        evt.stopPropagation();
    }

    _onContentMouseUp(evt) {
        evt.stopPropagation();
        evt.preventDefault();

        window.removeEventListener('mouseup', this._domEvtMouseUp);
        if (this._treeView) {
            this._treeView._onChildDragEnd(evt, this);
        }
    }

    _onContentMouseOver(evt) {
        evt.stopPropagation();

        if (this._treeView) {
            this._treeView._onChildDragOver(evt, this);
        }

        // allow hover event
        super._onMouseOver(evt);
    }

    _onContentDragStart(evt) {
        evt.stopPropagation();
        evt.preventDefault();

        if (!this._treeView || !this._treeView.allowDrag) return;

        if (this.class.contains(CLASS_RENAME)) return;

        this._treeView._onChildDragStart(evt, this);

        window.addEventListener('mouseup', this._domEvtMouseUp);
    }

    _onContentClick(evt) {
        if (!this.allowSelect || evt.button !== 0) return;
        if (evt.target.tagName.toLowerCase() === 'input') return;

        evt.stopPropagation();

        const rect = this._containerContents.dom.getBoundingClientRect();
        if (this._numChildren > 0 && evt.clientX - rect.left < 0) {
            this.open = !this.open;
            if (evt.altKey) {
                // apply to all children as well
                this._dfs((node) => {
                    node.open = this.open;
                });
            }
            this.focus();
        } else if (this._treeView) {
            this._treeView._onChildClick(evt, this);
        }
    }

    _dfs(fn) {
        fn(this);
        let child = this.firstChild;
        while (child) {
            child._dfs(fn);
            child = child.nextSibling;
        }
    }

    _onContentDblClick(evt) {
        if (!this._treeView || !this._treeView.allowRenaming || evt.button !== 0) return;
        if (evt.target.tagName.toLowerCase() === 'input') return;

        evt.stopPropagation();
        const rect = this._containerContents.dom.getBoundingClientRect();
        if (this.numChildren && evt.clientX - rect.left < 0) {
            return;
        }

        if (this.allowSelect) {
            this._treeView.deselect();
            this._treeView._onChildClick(evt, this);
        }

        this.rename();
    }

    _onContentContextMenu(evt) {
        if (this._treeView && this._treeView._onContextMenu) {
            this._treeView._onContextMenu(evt, this);
        }
    }

    _onContentFocus(evt) {
        this.emit('focus');
    }

    _onContentBlur(evt) {
        this.emit('blur');
    }

    rename() {
        this.classAdd(CLASS_RENAME);

        // show text input to enter new text
        const textInput = new TextInput$1$1({
            renderChanges: false,
            value: this.text,
            class: FONT_REGULAR
        });

        textInput.on('blur', () => {
            textInput.destroy();
        });

        textInput.on('destroy', () => {
            this.classRemove(CLASS_RENAME);
            this.focus();
        });

        textInput.on('change', (value) => {
            value = value.trim();
            if (value) {
                this.text = value;
                textInput.destroy();
            }
        });

        textInput.on('disable', () => {
            // make sure text input is editable even if this
            // tree item is disabled
            textInput.input.removeAttribute('readonly');
        });

        this._containerContents.append(textInput);

        textInput.focus(true);
    }

    focus() {
        this._containerContents.dom.focus();
    }

    blur() {
        this._containerContents.dom.blur();
    }

    destroy() {
        if (this._destroyed) return;

        this._containerContents.dom.removeEventListener('focus', this._domEvtFocus);
        this._containerContents.dom.removeEventListener('blur', this._domEvtBlur);
        this._containerContents.dom.removeEventListener('keydown', this._domEvtKeyDown);
        this._containerContents.dom.removeEventListener('mousedown', this._domEvtMouseDown);
        this._containerContents.dom.removeEventListener('dragstart', this._domEvtDragStart);
        this._containerContents.dom.removeEventListener('mouseover', this._domEvtMouseOver);
        this._containerContents.dom.removeEventListener('click', this._domEvtClick);
        this._containerContents.dom.removeEventListener('dblclick', this._domEvtDblClick);
        this._containerContents.dom.removeEventListener('contextmenu', this._domEvtContextMenu);

        window.removeEventListener('mouseup', this._domEvtMouseUp);

        super.destroy();
    }

    set selected(value) {
        if (value === this.selected) {
            if (value) {
                this.focus();
            }

            return;
        }

        if (value) {
            this._containerContents.classAdd(CLASS_SELECTED);
            this.emit('select', this);
            if (this._treeView) {
                this._treeView._onChildSelected(this);
            }

            this.focus();
        } else {
            this._containerContents.classRemove(CLASS_SELECTED);
            this.blur();
            this.emit('deselect', this);
            if (this._treeView) {
                this._treeView._onChildDeselected(this);
            }
        }
    }

    get selected() {
        return this._containerContents.class.contains(CLASS_SELECTED);
    }

    set text(value) {
        if (this._labelText.value !== value) {
            this._labelText.value = value;
            if (this._treeView) {
                this._treeView._onChildRename(this, value);
            }
        }
    }

    get text() {
        return this._labelText.value;
    }

    get textLabel() {
        return this._labelText;
    }

    get iconLabel() {
        return this._labelIcon;
    }

    set open(value) {
        if (this.open === value) return;
        if (value) {
            if (!this.numChildren) return;

            this.classAdd(CLASS_OPEN);
            this.emit('open', this);
        } else {
            this.classRemove(CLASS_OPEN);
            this.emit('close', this);
        }
    }

    get open() {
        return this.class.contains(CLASS_OPEN) || this.parent === this._treeView;
    }

    set parentsOpen(value) {
        let parent = this.parent;
        while (parent && parent instanceof TreeViewItem$1) {
            parent.open = value;
            parent = parent.parent;
        }
    }

    get parentsOpen() {
        let parent = this.parent;
        while (parent && parent instanceof TreeViewItem$1) {
            if (!parent.open) return false;
            parent = parent.parent;
        }

        return true;
    }

    set allowDrop(value) {
        this._allowDrop = value;
    }

    get allowDrop() {
        return this._allowDrop;
    }

    set allowDrag(value) {
        this._allowDrag = value;
    }

    get allowDrag() {
        return this._allowDrag;
    }

    set allowSelect(value) {
        this._allowSelect = value;
    }

    get allowSelect() {
        return this._allowSelect;
    }

    set treeView(value) {
        this._treeView = value;
    }

    get treeView() {
        return this._treeView;
    }

    get numChildren() {
        return this._numChildren;
    }

    get firstChild() {
        if (this._numChildren) {
            for (let i = 0; i < this.dom.childNodes.length; i++) {
                if (this.dom.childNodes[i].ui instanceof TreeViewItem$1) {
                    return this.dom.childNodes[i].ui;
                }
            }
        }

        return null;
    }

    get lastChild() {
        if (this._numChildren) {
            for (let i = this.dom.childNodes.length - 1; i >= 0; i--) {
                if (this.dom.childNodes[i].ui instanceof TreeViewItem$1) {
                    return this.dom.childNodes[i].ui;
                }
            }
        }

        return null;
    }

    get nextSibling() {
        let sibling = this.dom.nextSibling;
        while (sibling && !(sibling.ui instanceof TreeViewItem$1)) {
            sibling = sibling.nextSibling;
        }

        return sibling && sibling.ui;
    }

    get previousSibling() {
        let sibling = this.dom.previousSibling;
        while (sibling && !(sibling.ui instanceof TreeViewItem$1)) {
            sibling = sibling.previousSibling;
        }

        return sibling && sibling.ui;
    }

    set icon(value) {
        if (this._icon === value || !value.match(/^E[0-9]{0,4}$/)) return;
        this._icon = value;
        if (value) {
            // set data-icon attribute but first convert the value to a code point
            this._labelIcon.dom.setAttribute('data-icon', String.fromCodePoint(parseInt(value, 16)));
        } else {
            this._labelIcon.dom.removeAttribute('data-icon');
        }
    }

    get icon() {
        return this._icon;
    }
}

var Element$2 = TreeViewItem$1;

const CLASS_ROOT = 'pcui-treeview';
const CLASS_DRAGGED_ITEM = CLASS_ROOT + '-item-dragged';
const CLASS_DRAGGED_HANDLE = CLASS_ROOT + '-drag-handle';
const CLASS_FILTERING = CLASS_ROOT + '-filtering';
const CLASS_FILTER_RESULT = CLASS_FILTERING + '-result';

const DRAG_AREA_INSIDE = 'inside';
const DRAG_AREA_BEFORE = 'before';
const DRAG_AREA_AFTER = 'after';

/**
 * @event
 * @name TreeView#dragstart
 * @param {TreeViewItem[]} items - The dragged items
 * @description Fired when we start dragging a TreeViewItem
 */

/**
 * @event
 * @name TreeView#dragend
 * @description Fired when we stop dragging a TreeViewItem
 */

/**
 * @event
 * @name TreeView#reparent
 * @description Fired when we reparent TreeViewItems
 * @param {object[]} items - An array of items we reparented. Each array element contains an object like so: {item, newParent, newChildIndex, oldParent}.
 */

/**
 * @event
 * @name TreeView#select
 * @description Fired when we select a TreeViewItem
 * @param {TreeViewItem} item - The item
 */

/**
 * @event
 * @name TreeView#deselect
 * @description Fired when we deselect a TreeViewItem
 * @param {TreeViewItem} item - The item
 */

/**
 * @event
 * @name TreeView#rename
 * @description Fired when we rename a TreeViewItem
 * @param {TreeViewItem} item - The item
 * @param {string} name - The new name
 */

/**
 * @name TreeView
 * @class
 * @classdesc A container that can show a treeview like a hierarchy. The treeview contains
 * pcui.TreeViewItems.
 * @augments Container
 * @property {boolean} allowDrag=true Whether dragging a TreeViewItem is allowed.
 * @property {boolean} allowReordering=true Whether reordering TreeViewItems is allowed.
 * @property {boolean} allowRenaming Whether renaming TreeViewItems is allowed by double clicking on them.
 * @property {boolean} isDragging Whether we are currently dragging a TreeViewItem.
 * @property {string} filter Gets / sets a filter that searches TreeViewItems and only shows the ones that are relevant to the filter.
 * @property {TreeViewItem[]} selected Gets the selected TreeViewItems.
 */
class TreeView$1 extends Container$1$1 {
    /**
     * Creates a new TreeView.
     *
     * @param {object} [args] - The arguments. All properties can be set through the arguments as well.
     * @param {Function} [args.onContextMenu] - A function to be called when we right click on a TreeViewItem.
     * @param {Function} [args.onReparent] - A function to be called when we try to reparent tree items. If a function is provided then the
     * @param {Element} [args.dragScrollElement] - An element (usually a container of the tree view) that will be scrolled when the user
     * drags towards the edges of the treeview. Defaults to the TreeView itself.
     * tree items will not be reparented by the TreeView but instead will rely on the function to reparent them as it sees fit.
     */
    constructor(args) {
        if (!args) args = {};

        super(args);

        this.class.add(CLASS_ROOT);

        this._selectedItems = [];
        this._dragItems = [];
        this._allowDrag = (args.allowDrag !== undefined ? args.allowDrag : true);
        this._allowReordering = (args.allowReordering !== undefined ? args.allowReordering : true);
        this._allowRenaming = (args.allowRenaming !== undefined ? args.allowRenaming : false);
        this._dragging = false;
        this._dragOverItem = null;
        this._dragArea = DRAG_AREA_INSIDE;
        this._dragScroll = 0;
        this._dragScrollInterval = null;
        this._dragHandle = new Element$1$1(document.createElement('div'), {
            class: CLASS_DRAGGED_HANDLE
        });
        this._dragScrollElement = args.dragScrollElement || this;
        this.append(this._dragHandle);

        this._onContextMenu = args.onContextMenu;
        this._onReparentFn = args.onReparent;

        this._pressedCtrl = false;
        this._pressedShift = false;

        this._filter = null;
        this._filterResults = [];
        this._wasDraggingAllowedBeforeFiltering = this._allowDrag;

        this._domEvtModifierKeys = this._updateModifierKeys.bind(this);
        this._domEvtMouseLeave = this._onMouseLeave.bind(this);
        this._domEvtDragMove = this._onDragMove.bind(this);
        this._domEvtMouseMove = this._onMouseMove.bind(this);

        window.addEventListener('keydown', this._domEvtModifierKeys);
        window.addEventListener('keyup', this._domEvtModifierKeys);
        window.addEventListener('mousedown', this._domEvtModifierKeys);

        this.dom.addEventListener('mouseleave', this._domEvtMouseLeave);

        this._dragHandle.dom.addEventListener('mousemove', this._domEvtDragMove);
        this._dragHandle.on('destroy', (dom) => {
            dom.removeEventListener('mousemove', this._domEvtDragMove);
        });
    }

    _updateModifierKeys(evt) {
        this._pressedCtrl = evt.ctrlKey || evt.metaKey;
        this._pressedShift = evt.shiftKey;
    }

    /**
     * Finds the next tree item that is not currently hidden
     *
     * @param {TreeViewItem} currentItem - The current tree item
     * @returns {TreeViewItem} The next tree item.
     */
    _findNextVisibleTreeItem(currentItem) {
        if (currentItem.numChildren > 0 && currentItem.open) {
            return currentItem.firstChild;
        }

        const sibling = currentItem.nextSibling;
        if (sibling) return sibling;

        let parent = currentItem.parent;
        if (!(parent instanceof Element$2)) return null;

        let parentSibling = parent.nextSibling;
        while (!parentSibling) {
            parent = parent.parent;
            if (!(parent instanceof Element$2)) {
                break;
            }

            parentSibling = parent.nextSibling;
        }

        return parentSibling;
    }

    /**
     * Finds the last visible child tree item of the specified tree item.
     *
     * @param {TreeViewItem} currentItem - The current item.
     * @returns {TreeViewItem} The last child item.
     */
    _findLastVisibleChildTreeItem(currentItem) {
        if (!currentItem.numChildren || !currentItem.open) return null;

        let lastChild = currentItem.lastChild;
        while (lastChild && lastChild.numChildren && lastChild.open) {
            lastChild = lastChild.lastChild;
        }

        return lastChild;
    }

    /**
     * Finds the previous visible tree item of the specified tree item.
     *
     * @param {TreeViewItem} currentItem - The current tree item.
     * @returns {TreeViewItem} The previous item.
     */
    _findPreviousVisibleTreeItem(currentItem) {
        const sibling = currentItem.previousSibling;
        if (sibling) {
            if (sibling.numChildren > 0 && sibling.open)  {
                return this._findLastVisibleChildTreeItem(sibling);
            }

            return sibling;
        }

        const parent = currentItem.parent;
        if (!(parent instanceof Element$2)) return null;

        return parent;
    }

    /**
     * Gets the visible tree items between the specified start and end tree items.
     *
     * @param {TreeViewItem} startChild - The start tree item.
     * @param {TreeViewItem} endChild - The end tree item.
     * @returns {TreeViewItem[]} The tree items.
     */
    _getChildrenRange(startChild, endChild) {
        const result = [];

        // select search results if we are currently filtering tree view items
        if (this._filterResults.length) {
            const filterResults = this.dom.querySelectorAll(`.${CLASS_ROOT}-item.${CLASS_FILTER_RESULT}`);

            let startIndex = -1;
            let endIndex = -1;

            for (let i = 0; i < filterResults.length; i++) {
                const item = filterResults[i].ui;

                if (item === startChild) {
                    startIndex = i;
                } else if (item === endChild) {
                    endIndex = i;
                }

                if (startIndex !== -1 && endIndex !== -1) {
                    const start = (startIndex < endIndex ? startIndex : endIndex);
                    const end = (startIndex < endIndex ? endIndex : startIndex);
                    for (let j = start; j <= end; j++) {
                        result.push(filterResults[j].ui);
                    }

                    break;
                }
            }
        } else {
            // if we are not filtering the tree view then find the next visible tree item
            let current = startChild;

            const rectStart = startChild.dom.getBoundingClientRect();
            const rectEnd = endChild.dom.getBoundingClientRect();

            if (rectStart.top < rectEnd.top) {
                while (current && current !== endChild) {
                    current = this._findNextVisibleTreeItem(current);
                    if (current && current !== endChild) {
                        result.push(current);
                    }
                }
            } else {
                while (current && current !== endChild) {
                    current = this._findPreviousVisibleTreeItem(current);
                    if (current && current !== endChild) {
                        result.push(current);
                    }
                }
            }

            result.push(endChild);

        }

        return result;
    }

    _onAppendChild(element) {
        super._onAppendChild(element);

        if (element instanceof Element$2) {
            this._onAppendTreeViewItem(element);
        }
    }

    _onRemoveChild(element) {
        if (element instanceof Element$2) {
            this._onRemoveTreeViewItem(element);
        }

        super._onRemoveChild(element);
    }

    _onAppendTreeViewItem(element) {
        element.treeView = this;

        if (this._filter) {
            // add new item to filtered results if it
            // satisfies the current filter
            this._searchItems([[element.text, element]], this._filter);
        }

        // do the same for all children of the element
        element.forEachChild((child) => {
            if (child instanceof Element$2) {
                this._onAppendTreeViewItem(child);
            }
        });
    }

    _onRemoveTreeViewItem(element) {
        element.selected = false;

        // do the same for all children of the element
        element.forEachChild((child) => {
            if (child instanceof Element$2) {
                this._onRemoveTreeViewItem(child);
            }
        });
    }

    // Called when a key is down on a child TreeViewItem.
    _onChildKeyDown(evt, element) {
        if ([9, 37, 38, 39, 40].indexOf(evt.keyCode) === -1) return;

        evt.preventDefault();
        evt.stopPropagation();

        if (evt.keyCode === 40) {
            // down - select next tree item
            if (this._selectedItems.length) {
                const next = this._findNextVisibleTreeItem(element);
                if (next) {
                    if (this._pressedShift || this._pressedCtrl) {
                        next.selected = true;
                    } else {
                        this._selectSingleItem(next);
                    }
                }
            }
        } else if (evt.keyCode === 38) {
            // up - select previous tree item
            if (this._selectedItems.length) {
                const prev = this._findPreviousVisibleTreeItem(element);
                if (prev) {
                    if (this._pressedShift || this._pressedCtrl) {
                        prev.selected = true;
                    } else {
                        this._selectSingleItem(prev);
                    }
                }
            }

        } else if (evt.keyCode === 37) {
            // left (close)
            if (element.parent !== this) {
                element.open = false;
            }
        } else if (evt.keyCode === 39) {
            // right (open)
            element.open = true;
        } else ;
    }

    // Called when we click on a child TreeViewItem
    _onChildClick(evt, element) {
        if (evt.button !== 0) return;
        if (!element.allowSelect) return;

        if (this._pressedCtrl) {
            // toggle selection when Ctrl is pressed
            element.selected = !element.selected;
        } else if (this._pressedShift) {
            // on shift add to selection
            if (!this._selectedItems.length || this._selectedItems.length === 1 && this._selectedItems[0] === element) {
                element.selected = true;
                return;
            }

            const selected = this._selectedItems[this._selectedItems.length - 1];
            this._openHierarchy(selected);

            const children = this._getChildrenRange(selected, element);
            children.forEach((child) => {
                if (child.allowSelect) {
                    child.selected = true;
                }
            });

        } else {
            // deselect other items
            this._selectSingleItem(element);
        }
    }

    /**
     * Call specified function on every child TreeViewItem by traversing the hierarchy depth first.
     *
     * @param {Function} fn - The function to call. The function takes the TreeViewItem as an argument.
     */
    _traverseDepthFirst(fn) {
        function traverse(item) {
            if (!item || !(item instanceof Element$2)) return;

            fn(item);

            if (item.numChildren) {
                for (let i = 0; i < item.dom.childNodes.length; i++) {
                    traverse(item.dom.childNodes[i].ui);
                }
            }
        }

        for (let i = 0; i < this.dom.childNodes.length; i++) {
            traverse(this.dom.childNodes[i].ui);
        }
    }

    /**
     * Do a depth first traversal of all tree items
     * and assign an order to them so that we know which one
     * is above the other. Performance wise this means it traverses
     * all tree items every time however seems to be pretty fast even with 15 - 20 K entities.
     */
    _updateTreeOrder() {
        let order = 0;

        this._traverseDepthFirst((item) => {
            item._treeOrder = order++;
        });
    }

    _getChildIndex(item, parent) {
        return Array.prototype.indexOf.call(parent.dom.childNodes, item.dom) - 1;
    }

    // Called when we start dragging a TreeViewItem.
    _onChildDragStart(evt, element) {
        if (!this.allowDrag || this._dragging) return;

        this._dragItems = [];

        if (this._selectedItems.indexOf(element) !== -1) {
            const dragged = [];

            // check that all selected items to be dragged are
            // at the same depth from the root
            let desiredDepth = -1;
            for (let i = 0; i < this._selectedItems.length; i++) {
                let parent = this._selectedItems[i].parent;
                let depth = 0;
                let isChild = false;
                while (parent && parent instanceof Element$2) {
                    // if parent is already in dragged items then skip
                    // depth calculation for this item
                    if (this._selectedItems.indexOf(parent) !== -1) {
                        isChild = true;
                        break;
                    }

                    depth++;
                    parent = parent.parent;
                }

                if (!isChild) {
                    if (desiredDepth === -1) {
                        desiredDepth = depth;
                    } else if (desiredDepth !== depth) {
                        return;
                    }

                    dragged.push(this._selectedItems[i]);
                }
            }

            // add dragged class to each item
            this._dragItems = dragged;
        } else {
            element.class.add(CLASS_DRAGGED_ITEM);
            this._dragItems.push(element);
        }

        if (this._dragItems.length) {
            this._dragItems.forEach((item) => {
                item.class.add(CLASS_DRAGGED_ITEM);
            });

            this.isDragging = true;

            this.emit('dragstart', this._dragItems.slice());
        }
    }

    // Called when we stop dragging a TreeViewItem.
    _onChildDragEnd(evt, element) {
        if (!this.allowDrag || !this._dragging) return;

        this._dragItems.forEach(item => item.class.remove(CLASS_DRAGGED_ITEM));

        // if the root is being dragged then
        // do not allow reparenting because we do not
        // want to reparent the root
        let isRootDragged = false;
        for (let i = 0; i < this._dragItems.length; i++) {
            if (this._dragItems[i].parent === this)  {
                isRootDragged = true;
                break;
            }
        }

        if (!isRootDragged && this._dragOverItem) {
            if (this._dragItems.length > 1) {
                // sort items based on order in the hierarchy
                this._updateTreeOrder();
                this._dragItems.sort((a, b) => {
                    return a._treeOrder - b._treeOrder;
                });
            }

            if (this._dragItems.length) {
                // reparent items
                const reparented = [];

                // if we do not have _onReparentFn then reparent all the dragged items
                // in the DOM
                if (!this._onReparentFn) {
                    // first remove all items from their parent
                    this._dragItems.forEach((item) => {
                        if (item.parent === this._dragOverItem && this._dragArea === DRAG_AREA_INSIDE) return;

                        reparented.push({
                            item: item,
                            oldParent: item.parent
                        });
                        item.parent.remove(item);
                    });

                    // now reparent items
                    reparented.forEach((r, i) => {
                        if (this._dragArea === DRAG_AREA_BEFORE) {
                            // If dragged before a TreeViewItem...
                            r.newParent = this._dragOverItem.parent;
                            this._dragOverItem.parent.appendBefore(r.item, this._dragOverItem);
                            r.newChildIndex = this._getChildIndex(r.item, r.newParent);
                        } else if (this._dragArea === DRAG_AREA_INSIDE) {
                            // If dragged inside a TreeViewItem...
                            r.newParent = this._dragOverItem;
                            this._dragOverItem.append(r.item);
                            this._dragOverItem.open = true;
                            r.newChildIndex = this._getChildIndex(r.item, r.newParent);
                        } else if (this._dragArea === DRAG_AREA_AFTER) {
                            // If dragged after a TreeViewItem...
                            r.newParent = this._dragOverItem.parent;
                            this._dragOverItem.parent.appendAfter(r.item, i > 0 ? reparented[i - 1].item : this._dragOverItem);
                            r.newChildIndex = this._getChildIndex(r.item, r.newParent);
                        }
                    });

                } else {
                    // if we have an _onReparentFn then we will not perform the reparenting here
                    // but will instead calculate the new indexes and pass that data to the reparent function
                    // to perform the reparenting

                    const fakeDom = [];

                    const getChildren = (treeviewItem) => {
                        let idx = fakeDom.findIndex(entry => entry.parent === treeviewItem);
                        if (idx === -1) {
                            fakeDom.push({ parent: treeviewItem, children: [...treeviewItem.dom.childNodes] });
                            idx = fakeDom.length - 1;
                        }

                        return fakeDom[idx].children;
                    };

                    this._dragItems.forEach((item) => {
                        if (item.parent === this._dragOverItem && this._dragArea === DRAG_AREA_INSIDE) return;

                        reparented.push({
                            item: item,
                            oldParent: item.parent
                        });

                        // add array of parent's child nodes to fakeDom array
                        const parentChildren = getChildren(item.parent);

                        // remove this item from the children array in fakeDom
                        const childIdx = parentChildren.indexOf(item.dom);
                        parentChildren.splice(childIdx, 1);
                    });

                    // now reparent items
                    reparented.forEach((r, i) => {
                        if (this._dragArea === DRAG_AREA_BEFORE) {
                            // If dragged before a TreeViewItem...
                            r.newParent = this._dragOverItem.parent;
                            const parentChildren = getChildren(this._dragOverItem.parent);
                            const index = parentChildren.indexOf(this._dragOverItem.dom);
                            parentChildren.splice(index, 0, r.item.dom);
                            r.newChildIndex = index;
                        } else if (this._dragArea === DRAG_AREA_INSIDE) {
                            // If dragged inside a TreeViewItem...
                            r.newParent = this._dragOverItem;
                            const parentChildren = getChildren(this._dragOverItem);
                            parentChildren.push(r.item.dom);
                            r.newChildIndex = parentChildren.length - 1;
                        } else if (this._dragArea === DRAG_AREA_AFTER) {
                            // If dragged after a TreeViewItem...
                            r.newParent = this._dragOverItem.parent;
                            const parentChildren = getChildren(this._dragOverItem.parent);
                            const after = i > 0 ? reparented[i - 1].item : this._dragOverItem;
                            const index = parentChildren.indexOf(after.dom);
                            parentChildren.splice(index + 1, 0, r.item.dom);
                            r.newChildIndex = index + 1;
                        }

                        // substract 1 from new child index to account for the extra node that
                        // each tree view item has inside
                        r.newChildIndex--;
                    });
                }

                if (reparented.length) {
                    if (this._onReparentFn) {
                        this._onReparentFn(reparented);
                    }

                    this.emit('reparent', reparented);
                }
            }
        }

        this._dragItems = [];

        this.isDragging = false;

        this.emit('dragend');
    }

    // Called when we drag over a TreeViewItem.
    _onChildDragOver(evt, element) {
        if (!this._allowDrag || !this._dragging) return;

        if (element.allowDrop && this._dragItems.indexOf(element) === -1) {
            this._dragOverItem = element;
        } else {
            this._dragOverItem = null;
        }

        this._updateDragHandle();
        this._onDragMove(evt);
    }

    // Called when the mouse cursor leaves the tree view.
    _onMouseLeave(evt) {
        if (!this._allowDrag || !this._dragging) return;

        this._dragOverItem = null;
        this._updateDragHandle();
    }

    // Called when the mouse moves while dragging
    _onMouseMove(evt) {
        if (!this._dragging) return;

        // Determine if we need to scroll the treeview if we are dragging towards the edges
        const rect = this.dom.getBoundingClientRect();
        this._dragScroll = 0;
        let top = rect.top;

        let bottom = rect.bottom;
        if (this._dragScrollElement !== this) {
            const dragScrollRect = this._dragScrollElement.dom.getBoundingClientRect();
            top = Math.max(top + this._dragScrollElement.dom.scrollTop, dragScrollRect.top);
            bottom = Math.min(bottom + this._dragScrollElement.dom.scrollTop, dragScrollRect.bottom);
        }

        top = Math.max(0, top);
        bottom = Math.min(bottom, document.body.clientHeight);

        if (evt.pageY < top + 32 && this._dragScrollElement.dom.scrollTop > 0) {
            this._dragScroll = -1;
        } else if (evt.pageY > bottom - 32 && this._dragScrollElement.dom.scrollHeight > this._dragScrollElement.height + this._dragScrollElement.dom.scrollTop) {
            this._dragScroll = 1;
        }
    }

    // Scroll treeview if we are dragging towards the edges
    _scrollWhileDragging() {
        if (!this._dragging) return;
        if (this._dragScroll === 0) return;

        this._dragScrollElement.dom.scrollTop += this._dragScroll * 8;
        this._dragOverItem = null;
        this._updateDragHandle();
    }

    // Called while we drag the drag handle
    _onDragMove(evt) {
        evt.preventDefault();
        evt.stopPropagation();

        if (!this._allowDrag || !this._dragOverItem) return;

        const rect = this._dragHandle.dom.getBoundingClientRect();
        const area = Math.floor((evt.clientY - rect.top) / rect.height * 5);

        const oldArea = this._dragArea;
        const oldDragOver = this._dragOverItem;

        if (this._dragOverItem.parent === this) {
            let parent = false;
            for (let i = 0; i < this._dragItems.length; i++) {
                if (this._dragItems[i].parent === this._dragOverItem) {
                    parent = true;
                    this._dragOverItem = null;
                    break;
                }
            }

            if (!parent) {
                this._dragArea = DRAG_AREA_INSIDE;
            }
        } else {
            // check if we are trying to drag item inside any of its children
            let invalid = false;
            for (let i = 0; i < this._dragItems.length; i++) {
                if (this._dragItems[i].dom.contains(this._dragOverItem.dom)) {
                    invalid = true;
                    break;
                }
            }

            if (invalid) {
                this._dragOverItem = null;
            } else if (this._allowReordering && area <= 1 && this._dragItems.indexOf(this._dragOverItem.previousSibling) === -1) {
                this._dragArea = DRAG_AREA_BEFORE;
            } else if (this._allowReordering && area >= 4 && this._dragItems.indexOf(this._dragOverItem.nextSibling) === -1 && (this._dragOverItem.numChildren === 0 || !this._dragOverItem.open)) {
                this._dragArea = DRAG_AREA_AFTER;
            } else {
                let parent = false;
                if (this._allowReordering && this._dragOverItem.open) {
                    for (var i = 0; i < this._dragItems.length; i++) {
                        if (this._dragItems[i].parent === this._dragOverItem) {
                            parent = true;
                            this._dragArea = DRAG_AREA_BEFORE;
                            break;
                        }
                    }
                }
                if (!parent)
                    this._dragArea = DRAG_AREA_INSIDE;
            }
        }

        if (oldArea !== this._dragArea || oldDragOver !== this._dragOverItem) {
            this._updateDragHandle();
        }
    }

    // Updates the drag handle position and size
    _updateDragHandle(dragOverItem, force) {
        if (!force && (!this._allowDrag || !this._dragging)) return;

        if (!dragOverItem) {
            dragOverItem = this._dragOverItem;
        }

        if (!dragOverItem || dragOverItem.hidden || !dragOverItem.parentsOpen) {
            this._dragHandle.hidden = true;
        } else {
            const rect = dragOverItem._containerContents.dom.getBoundingClientRect();

            this._dragHandle.hidden = false;
            this._dragHandle.class.remove(DRAG_AREA_AFTER, DRAG_AREA_BEFORE, DRAG_AREA_INSIDE);
            this._dragHandle.class.add(this._dragArea);

            const top = rect.top;
            let left = rect.left;
            let width = rect.width;
            if (this.dom.parentElement) {
                const parentRect = this.dom.parentElement.getBoundingClientRect();
                left = Math.max(left, parentRect.left);
                width = Math.min(width, this.dom.parentElement.clientWidth - left + parentRect.left);
            }

            this._dragHandle.style.top = top  + 'px';
            this._dragHandle.style.left = left + 'px';
            this._dragHandle.style.width = (width - 7) + 'px';
        }
    }

    /**
     * Opens all the parents of the specified item
     *
     * @param {TreeViewItem} endItem - The end tree view item
     */
    _openHierarchy(endItem) {
        endItem.parentsOpen = true;
    }

    /**
     * Selects a tree view item
     *
     * @param {TreeViewItem} item - The tree view item
     */
    _selectSingleItem(item) {
        let i = this._selectedItems.length;
        let othersSelected = false;
        while (i--) {
            if (this._selectedItems[i] && this._selectedItems[i] !== item) {
                this._selectedItems[i].selected = false;
                othersSelected = true;
            }
        }

        if (othersSelected) {
            item.selected = true;
        } else {
            item.selected = !item.selected;
        }
    }

    /**
     * Called when a child tree view item is selected.
     *
     * @param {TreeViewItem} item - The tree view item.
     */
    _onChildSelected(item) {
        this._selectedItems.push(item);
        this._openHierarchy(item);
        this.emit('select', item);
    }

    /**
     * Called when a child tree view item is deselected.
     *
     * @param {TreeViewItem} item - The tree view item.
     * @param {Element} element - The element.
     */
    _onChildDeselected(element) {
        const index = this._selectedItems.indexOf(element);
        if (index !== -1) {
            this._selectedItems.splice(index, 1);
            this.emit('deselect', element);
        }
    }

    /**
     * Called when a child tree view item is renamed.
     *
     * @param {TreeViewItem} item - The tree view item.
     * @param {string} newName - The new name.
     */
    _onChildRename(item, newName) {
        if (this._filter) {
            // unfilter this item
            item.class.remove(CLASS_FILTER_RESULT);
            const index = this._filterResults.indexOf(item);
            if (index !== -1) {
                this._filterResults.splice(index, 1);
            }

            // see if we can include it in the current filter
            this._searchItems([[item.text, item]], this._filter);
        }
        this.emit('rename', item, newName);
    }

    _searchItems(searchArr, filter) {
        const results = searchItems(searchArr, filter);
        if (!results.length) return;

        results.forEach((item) => {
            this._filterResults.push(item);
            item.class.add(CLASS_FILTER_RESULT);
        });

    }

    /**
     * Searches treeview
     *
     * @param {string} filter - The search filter
     */
    _applyFilter(filter) {
        this._clearFilter();

        this._wasDraggingAllowedBeforeFiltering = this._allowDrag;
        this._allowDrag = false;

        this.class.add(CLASS_FILTERING);

        const search = [];
        this._traverseDepthFirst((item) => {
            search.push([item.text, item]);
        });

        this._searchItems(search, filter);
    }

    /**
     * Clears search filter.
     */
    _clearFilter() {
        this._filterResults.forEach((item) => {
            if (item.destroyed) return;
            item.class.remove(CLASS_FILTER_RESULT);
        });
        this._filterResults.length = 0;

        this.class.remove(CLASS_FILTERING);

        this._allowDrag = this._wasDraggingAllowedBeforeFiltering;
    }

    showDragHandle(treeItem) {
        this._updateDragHandle(treeItem, true);
    }

    /**
     * @name TreeView#deselect
     * @description Deselects all selected tree view items.
     */
    deselect() {
        let i = this._selectedItems.length;
        while (i--) {
            if (this._selectedItems[i]) {
                this._selectedItems[i].selected = false;
            }
        }
    }

    /**
     * @name TreeView#clearTreeItems
     * @description Removes all child tree view items
     */
    clearTreeItems() {
        let i = this.dom.childNodes.length;
        while (i--) {
            const dom = this.dom.childNodes[i];
            if (!dom) continue;
            const ui = dom.ui;
            if (ui instanceof Element$2) {
                ui.destroy();
            }
        }

        this._selectedItems = [];
        this._dragItems = [];
        this._allowDrag = this._wasDraggingAllowedBeforeFiltering;
    }

    destroy() {
        if (this._destroyed) return;

        window.removeEventListener('keydown', this._domEvtModifierKeys);
        window.removeEventListener('keyup', this._domEvtModifierKeys);
        window.removeEventListener('mousedown', this._domEvtModifierKeys);
        window.removeEventListener('mousemove', this._domEvtMouseMove);

        this.dom.removeEventListener('mouseleave', this._domEvtMouseLeave);

        if (this._dragScrollInterval) {
            clearInterval(this._dragScrollInterval);
            this._dragScrollInterval = null;
        }

        super.destroy();
    }

    set allowDrag(value) {
        this._allowDrag = value;
        if (this._filter) {
            this._wasDraggingAllowedBeforeFiltering = value;
        }
    }

    get allowDrag() {
        return this._allowDrag;
    }

    set allowReordering(value) {
        this._allowReordering = value;
    }

    get allowReordering() {
        return this._allowReordering;
    }

    set allowRenaming(value) {
        this._allowRenaming = value;
    }

    get allowRenaming() {
        return this._allowRenaming;
    }

    set isDragging(value) {
        if (this._dragging === value) return;

        if (value) {
            this._dragging = true;
            this._updateDragHandle();

            // handle mouse move to scroll when dragging if necessary
            if (this.scrollable || this._dragScrollElement !== this) {
                window.removeEventListener('mousemove', this._domEvtMouseMove);
                window.addEventListener('mousemove', this._domEvtMouseMove);
                if (!this._dragScrollInterval) {
                    this._dragScrollInterval = setInterval(this._scrollWhileDragging.bind(this), 1000 / 60);
                }
            }
        } else {
            this._dragOverItem = null;
            this._updateDragHandle();

            this._dragging = false;

            window.removeEventListener('mousemove', this._domEvtMouseMove);
            if (this._dragScrollInterval) {
                clearInterval(this._dragScrollInterval);
                this._dragScrollInterval = null;
            }
        }
    }

    get isDragging() {
        return this._dragging;
    }

    get selected() {
        return this._selectedItems.slice();
    }

    set filter(value) {
        if (this._filter === value) return;

        this._filter = value;

        if (value) {
            this._applyFilter(value);
        } else {
            this._clearFilter();
        }
    }

    get filter() {
        return this._filter;
    }

    get pressedCtrl() {
        return this._pressedCtrl;
    }

    get pressedShift() {
        return this._pressedShift;
    }
}

var TreeViewElement = TreeView$1;

class TreeView extends ElementComponent$1 {
    constructor(props) {
        super(props);
        // @ts-ignore
        this.element = new TreeViewElement(Object.assign({}, props));
        this.loadChildren(this.props.children, this.element);
    }
    loadChildren(children, element) {
        if (!children)
            return;
        if (!Array.isArray(children)) {
            children = [children];
        }
        children.forEach((child) => {
            var childElement = new Element$2({ text: child.props.text, icon: child.props.icon, open: false });
            if (child.props.onSelect) {
                childElement.on('select', child.props.onSelect);
            }
            if (child.props.onDeselect) {
                childElement.on('deselect', child.props.onDeselect);
            }
            element.append(childElement);
            this.loadChildren(child.props.children, childElement);
        });
    }
    componentDidUpdate() {
        this.parentElement.removeChild(this.element.dom);
        // @ts-ignore
        this.element = new TreeViewElement(Object.assign({}, this.props));
        this.loadChildren(this.props.children, this.element);
        this.parentElement.appendChild(this.element.dom);
    }
    parentElementRendered(element) {
        if (!element)
            return;
        this.parentElement = element;
        this.parentElement.appendChild(this.element.dom);
    }
    render() {
        return React.createElement("div", { ref: this.parentElementRendered.bind(this) });
    }
}
TreeView.ctor = TreeViewElement;

class TreeViewItem extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$2;
        this.onSelect = () => {
            if (props.onSelect) {
                props.onSelect(() => {
                    this.element.selected = false;
                });
            }
        };
        if (props.onDeselect) {
            this.onDeselect = props.onDeselect;
        }
        this.onAttach = this.onAttachFn.bind(this);
    }
    onAttachFn() {
        if (this.props.onSelect) {
            this.element.on('select', this.onSelect);
        }
        if (this.props.onDeselect) {
            this.element.on('deselect', this.onDeselect);
        }
    }
    render() {
        return super.render();
    }
}
TreeViewItem.ctor = Element$2;

const CLASS_VECTOR_INPUT = 'pcui-vector-input';

/**
 * @name VectorInput
 * @class
 * @classdesc A vector input
 * @augments Element
 * @mixes IBindable
 * @mixes IFocusable
 */
class VectorInput$2 extends Element$1$1 {
    /**
     * Creates a new pcui.VectorInput.
     *
     * @param {object} args - The arguments.
     * @param {number} [args.dimensions=3] - The number of dimensions in the vector. Can be between 2 to 4. Defaults to 3.
     * @param {number} [args.min] - The minimum value for each vector element.
     * @param {number} [args.max] - The maximum value for each vector element.
     * @param {number} [args.precision] - The decimal precision for each vector element.
     * @param {number} [args.step] - The incremental step when using arrow keys for each vector element.
     * @param {boolean} [args.renderChanges] - If true each vector element will flash on changes.
     * @param {string[]|string} [args.placeholder] - The placeholder string for each vector element.
     */
    constructor(args) {
        args = Object.assign({}, args);

        // set binding after inputs have been created
        const binding = args.binding;
        delete args.binding;

        super(args.dom ? args.dom : document.createElement('div'), args);

        this.class.add(CLASS_VECTOR_INPUT);

        const dimensions = Math.max(2, Math.min(4, args.dimensions || 3));

        const onInputChange = this._onInputChange.bind(this);
        this._inputs = new Array(dimensions);
        for (let i = 0; i < this._inputs.length; i++) {
            this._inputs[i] = new NumericInput$1$1({
                min: args.min,
                max: args.max,
                precision: args.precision,
                step: args.step,
                renderChanges: args.renderChanges,
                placeholder: args.placeholder ? (Array.isArray(args.placeholder) ? args.placeholder[i] : args.placeholder) : null
            });
            this._inputs[i].on('change', onInputChange);
            this._inputs[i].on('focus', () => {
                this.emit('focus');
            });
            this._inputs[i].on('blur', () => {
                this.emit('blur');
            });
            this.dom.appendChild(this._inputs[i].dom);
            this._inputs[i].parent = this;
        }

        // set the binding after the inputs have been created
        // because we rely on them in the overriden setter
        if (binding) {
            this.binding = binding;
        }

        this._applyingChange = false;

        if (args.value !== undefined) {
            this.value = args.value;
        }

    }

    _onInputChange() {
        if (this._applyingChange) return;

        // check if any of our inputs have the multiple_values class
        // and if so inherit it for us as well
        let showingMultipleValues = false;
        for (let i = 0; i < this._inputs.length; i++) {
            if (this._inputs[i].class.contains(MULTIPLE_VALUES)) {
                showingMultipleValues = true;
                break;
            }
        }

        if (showingMultipleValues) {
            this.class.add(MULTIPLE_VALUES);
        } else {
            this.class.remove(MULTIPLE_VALUES);
        }

        this.emit('change', this.value);
    }

    _updateValue(value) {
        this.class.remove(MULTIPLE_VALUES);

        if (JSON.stringify(this.value) === JSON.stringify(value)) return false;

        this._applyingChange = true;

        for (let i = 0; i < this._inputs.length; i++) {
            // disable binding for each individual input when we use
            // the 'value' setter for the whole vector value. That is because
            // we do not want the individual inputs to emit their own binding events
            // since we are setting the whole vector value here
            const binding = this._inputs[i].binding;
            let applyingChange = false;
            if (binding) {
                applyingChange = binding.applyingChange;
                binding.applyingChange = true;
            }
            this._inputs[i].value = (value && value[i] !== undefined ? value[i] : null);
            if (binding) {
                binding.applyingChange = applyingChange;
            }
        }

        this.emit('change', this.value);

        this._applyingChange = false;

        return true;
    }

    link(observers, paths) {
        super.link(observers, paths);
        observers = Array.isArray(observers) ? observers : [observers];
        paths = Array.isArray(paths) ? paths : [paths];

        const useSinglePath = paths.length === 1 || observers.length !== paths.length;
        if (useSinglePath) {
            for (let i = 0; i < this._inputs.length; i++) {
                // link observers to path.i for each dimension
                this._inputs[i].link(observers, paths[0] + `.${i}`);
            }
        } else {
            for (let i = 0; i < this._inputs.length; i++) {
                // link observers to paths[i].i for each dimension
                this._inputs[i].link(observers, paths.map(path => `${path}.${i}`));
            }

        }
    }

    unlink() {
        super.unlink();
        for (let i = 0; i < this._inputs.length; i++) {
            this._inputs[i].unlink();
        }
    }

    focus() {
        this._inputs[0].focus();
    }

    blur() {
        for (let i = 0; i < this._inputs.length; i++) {
            this._inputs[i].blur();
        }
    }

    set value(value) {
        if (typeof value === 'string') {
            try {
                // try to parse the string
                value = JSON.parse(value);
                // if the string could be converted to an array but some of it's values aren't numbers
                // then use a default array also
                if (Array.isArray(value) && value.some(i => !Number.isFinite(i))) {
                    throw new Error('VectorInput value set to string which doesn\'t contain an array of numbers');
                }
            } catch (e) {
                console.error(e);
                value = [];
            }
        }
        if (!Array.isArray(value)) {
            value = [];
        }

        const changed = this._updateValue(value);

        if (changed && this._binding) {
            this._binding.setValue(value);
        }
    }

    get value() {
        const value = new Array(this._inputs.length);
        for (let i = 0; i < this._inputs.length; i++) {
            value[i] = this._inputs[i].value;
        }

        return value;
    }

    /* eslint accessor-pairs: 0 */
    set values(values) {
        // create an array for each dimension (e.g. one array for x one for y one for z)
        values = this._inputs.map((_, i) => values.map((arr) => {
            return arr ? arr[i] : undefined;
        }));

        this._inputs.forEach((input, i) => {
            input.values = values[i];
        });
    }

    // override binding setter to set a binding clone to
    // each input
    set binding(value) {
        super.binding = value;
        for (let i = 0; i < this._inputs.length; i++) {
            this._inputs[i].binding = (value ? value.clone() : null);
        }
    }

    // we have to override the getter too because
    // we have overriden the setter
    get binding() {
        return super.binding;
    }

    set placeholder(value) {
        for (let i = 0; i < this._inputs.length; i++) {
            this._inputs[i].placeholder = value[i] || value || null;
        }
    }

    get placeholder() {
        return this._inputs.map(input => input.placeholder);
    }

    get inputs() {
        return this._inputs.slice();
    }
}

// add proxied properties
[
    'min',
    'max',
    'precision',
    'step',
    'renderChanges'
].forEach((property) => {
    Object.defineProperty(VectorInput$2.prototype, property, {
        get: function () {
            return this._inputs[0][property];
        },
        set: function (value) {
            for (let i = 0; i < this._inputs.length; i++) {
                this._inputs[i][property] = value;
            }
        }
    });
});

Element$1$1.register('vec2', VectorInput$2, { dimensions: 2, renderChanges: true });
Element$1$1.register('vec3', VectorInput$2, { dimensions: 3, renderChanges: true });
Element$1$1.register('vec4', VectorInput$2, { dimensions: 4, renderChanges: true });

var Element$1 = VectorInput$2;

class VectorInput extends ElementComponent$1 {
    constructor(props) {
        super(props);
        this.elementClass = Element$1;
    }
    render() {
        return super.render();
    }
}
VectorInput.ctor = Element$1;
VectorInput.defaultProps = {};
var VectorInput$1 = VectorInput;

var Detail = function (props) {
    return React.createElement(Container$1, { class: 'panel-option' },
        React.createElement(Label$1, { class: 'panel-label', text: props.label }),
        React.createElement(Label$1, { class: 'panel-value', text: props.value }));
};
var Vector = function (props) {
    return React.createElement(Container$1, { class: 'panel-option' },
        React.createElement(Label$1, { class: 'panel-label', text: props.label }),
        React.createElement(VectorInput$1, { class: 'panel-value', dimensions: props.dimensions, enabled: props.enabled, value: props.value }));
};
var Toggle = function (props) {
    return React.createElement(Container$1, { class: 'panel-option' },
        React.createElement(Label$1, { class: 'panel-label', text: props.label }),
        React.createElement(BooleanInput$1, { class: 'panel-value-boolean', type: 'toggle', enabled: props.enabled, value: props.value, onChange: function (value) { return props.setProperty(value); } }));
};
Toggle.defaultProps = { enabled: true };
var Slider = function (props) {
    return React.createElement(Container$1, { class: 'panel-option' },
        React.createElement(Label$1, { class: 'panel-label', text: props.label }),
        React.createElement(SliderInput$1, { class: 'panel-value', min: props.min, max: props.max, sliderMin: props.min, sliderMax: props.max, precision: props.precision, step: 0.01, enabled: props.enabled, onChange: function (value) {
                props.setProperty(value);
            }, value: props.value }));
};
Slider.defaultProps = { enabled: true };
var Select = function (props) {
    return React.createElement(Container$1, { class: 'panel-option' },
        React.createElement(Label$1, { class: 'panel-label', text: props.label }),
        React.createElement(SelectInput$1, { class: 'panel-value', type: props.type, options: props.options, enabled: props.enabled, value: props.value, onChange: function (value) {
                props.setProperty(value);
            } }));
};
Select.defaultProps = { enabled: true };

var toggleCollapsed = function () {
    var leftPanel = document.getElementById('panel-left');
    if (leftPanel) {
        leftPanel.classList.toggle('collapsed');
    }
};
var ScenePanel = /** @class */ (function (_super) {
    __extends(ScenePanel, _super);
    function ScenePanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScenePanel.prototype.shouldComponentUpdate = function (nextProps) {
        return (nextProps.sceneData.loadTime !== this.props.sceneData.loadTime ||
            nextProps.sceneData.meshCount !== this.props.sceneData.meshCount ||
            nextProps.sceneData.vertexCount !== this.props.sceneData.vertexCount ||
            nextProps.sceneData.primitiveCount !== this.props.sceneData.primitiveCount ||
            nextProps.sceneData.bounds !== this.props.sceneData.bounds ||
            nextProps.sceneData.variant.selected !== this.props.sceneData.variant.selected ||
            nextProps.sceneData.variants.list !== this.props.sceneData.variants.list);
    };
    ScenePanel.prototype.render = function () {
        var _this = this;
        var scene = this.props.sceneData;
        var variantListOptions = JSON.parse(scene.variants.list).map(function (variant) { return ({ v: variant, t: variant }); });
        return (React.createElement(Panel$1, { headerText: 'SCENE', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true },
            React.createElement(Detail, { label: 'NAME', value: scene.name }),
            React.createElement(Detail, { label: 'Load time', value: scene.loadTime }),
            React.createElement(Detail, { label: 'Meshes', value: scene.meshCount }),
            React.createElement(Detail, { label: 'Verts', value: scene.vertexCount }),
            React.createElement(Detail, { label: 'Primitives', value: scene.primitiveCount }),
            React.createElement(Vector, { label: 'Bounds', dimensions: 3, value: scene.bounds, enabled: false }),
            React.createElement(Select, { label: 'Variant', type: 'string', options: variantListOptions, value: scene.variant.selected, setProperty: function (value) {
                    _this.props.setProperty('scene.variant.selected', value);
                }, enabled: variantListOptions.length > 0 })));
    };
    return ScenePanel;
}(React.Component));
var CameraPanel = /** @class */ (function (_super) {
    __extends(CameraPanel, _super);
    function CameraPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CameraPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.observerData) !== JSON.stringify(this.props.observerData);
    };
    CameraPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'CAMERA', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Slider, { label: 'Fov', precision: 0, min: 20, max: 70, value: props.observerData.show.fov, setProperty: function (value) { return props.setProperty('show.fov', value); } }),
            React.createElement(Select, { label: 'Tonemap', type: 'string', options: ['Linear', 'Filmic', 'Hejl', 'ACES'].map(function (v) { return ({ v: v, t: v }); }), value: props.observerData.lighting.tonemapping, setProperty: function (value) { return props.setProperty('lighting.tonemapping', value); } }),
            React.createElement(Toggle, { label: 'FXAA', value: props.observerData.scripts.fxaa.enabled, setProperty: function (value) { return props.setProperty('scripts.fxaa.enabled', value); } }),
            React.createElement(Toggle, { label: 'Post Process', value: props.observerData.show.postprocess, setProperty: function (value) { return props.setProperty('show.postprocess', value); } })));
    };
    return CameraPanel;
}(React.Component));
var EnvironmentPanel = /** @class */ (function (_super) {
    __extends(EnvironmentPanel, _super);
    function EnvironmentPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EnvironmentPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.lightingData) !== JSON.stringify(this.props.lightingData) || JSON.stringify(nextProps.uiData) !== JSON.stringify(this.props.uiData);
    };
    EnvironmentPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'ENVIRONMENT', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Select, { label: 'Environment', type: 'string', options: JSON.parse(props.lightingData.env.options), value: props.lightingData.env.value, setProperty: function (value) { return props.setProperty('lighting.env.value', value); } }),
            React.createElement(Select, { label: 'Skybox Level', type: 'number', options: [0, 1, 2, 3, 4, 5, 6].map(function (v) { return ({ v: v, t: v === 0 ? 'Disable' : Number(v - 1).toString() }); }), value: props.lightingData.env.skyboxMip, setProperty: function (value) { return props.setProperty('lighting.env.skyboxMip', value); } }),
            React.createElement(Slider, { label: 'Exposure', precision: 2, min: -6, max: 6, value: props.lightingData.env.exposure, setProperty: function (value) { return props.setProperty('lighting.env.exposure', value); } }),
            React.createElement(Slider, { label: 'Rotation', precision: 0, min: -180, max: 180, value: props.lightingData.env.rotation, setProperty: function (value) { return props.setProperty('lighting.env.rotation', value); } })));
    };
    return EnvironmentPanel;
}(React.Component));
var LightingPanel = /** @class */ (function (_super) {
    __extends(LightingPanel, _super);
    function LightingPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LightingPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.lightingData) !== JSON.stringify(this.props.lightingData) || JSON.stringify(nextProps.uiData) !== JSON.stringify(this.props.uiData);
    };
    LightingPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'LIGHTING', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Slider, { label: 'Intencity', precision: 2, min: 0, max: 6, value: props.lightingData.mainLight.intencity, setProperty: function (value) { return props.setProperty('lighting.mainLight.intencity', value); } }),
            React.createElement(Slider, { label: 'Color_R', precision: 0, min: 0, max: 255, value: props.lightingData.mainLight.color_r, setProperty: function (value) { return props.setProperty('lighting.mainLight.color_r', value); } }),
            React.createElement(Slider, { label: 'Color_G', precision: 0, min: 0, max: 255, value: props.lightingData.mainLight.color_g, setProperty: function (value) { return props.setProperty('lighting.mainLight.color_g', value); } }),
            React.createElement(Slider, { label: 'Color_B', precision: 0, min: 0, max: 255, value: props.lightingData.mainLight.color_b, setProperty: function (value) { return props.setProperty('lighting.mainLight.color_b', value); } }),
            React.createElement(Slider, { label: 'Rotation_x', precision: 0, min: -180, max: 180, value: props.lightingData.mainLight.rotation_x, setProperty: function (value) { return props.setProperty('lighting.mainLight.rotation_x', value); } }),
            React.createElement(Slider, { label: 'Rotation_y', precision: 0, min: -180, max: 180, value: props.lightingData.mainLight.rotation_y, setProperty: function (value) { return props.setProperty('lighting.mainLight.rotation_y', value); } }),
            React.createElement(Slider, { label: 'Rotation_z', precision: 0, min: -180, max: 180, value: props.lightingData.mainLight.rotation_z, setProperty: function (value) { return props.setProperty('lighting.mainLight.rotation_z', value); } }),
            React.createElement(Toggle, { label: 'Shadow', value: props.lightingData.mainLight.shadow, setProperty: function (value) { return props.setProperty('lighting.mainLight.shadow', value); } }),
            React.createElement(Select, { label: 'Shadow Resolution', value: props.lightingData.mainLight.shadowResolution, type: 'number', options: [512, 1024, 2048, 4096].map(function (v) { return ({ v: v, t: Number(v).toString() }); }), setProperty: function (value) { return props.setProperty('lighting.mainLight.shadowResolution', value); } }),
            React.createElement(Slider, { label: 'Shadow Intencity', precision: 2, min: 0, max: 5, value: props.lightingData.mainLight.shadowIntencity, setProperty: function (value) { return props.setProperty('lighting.mainLight.shadowIntencity', value); } })));
    };
    return LightingPanel;
}(React.Component));
/** @class */ ((function (_super) {
    __extends(SubLightingPanel, _super);
    function SubLightingPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubLightingPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.lightingData) !== JSON.stringify(this.props.lightingData) || JSON.stringify(nextProps.uiData) !== JSON.stringify(this.props.uiData);
    };
    SubLightingPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'SUB LIGHTING', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Slider, { label: 'Intencity', precision: 2, min: 0, max: 6, value: props.lightingData.subLight.intencity, setProperty: function (value) { return props.setProperty('lighting.subLight.intencity', value); } }),
            React.createElement(Slider, { label: 'Color_R', precision: 0, min: 0, max: 255, value: props.lightingData.subLight.color_r, setProperty: function (value) { return props.setProperty('lighting.subLight.color_r', value); } }),
            React.createElement(Slider, { label: 'Color_G', precision: 0, min: 0, max: 255, value: props.lightingData.subLight.color_g, setProperty: function (value) { return props.setProperty('lighting.subLight.color_g', value); } }),
            React.createElement(Slider, { label: 'Color_B', precision: 0, min: 0, max: 255, value: props.lightingData.subLight.color_b, setProperty: function (value) { return props.setProperty('lighting.subLight.color_b', value); } }),
            React.createElement(Slider, { label: 'Rotation_x', precision: 0, min: -180, max: 180, value: props.lightingData.subLight.rotation_x, setProperty: function (value) { return props.setProperty('lighting.subLight.rotation_x', value); } }),
            React.createElement(Slider, { label: 'Rotation_y', precision: 0, min: -180, max: 180, value: props.lightingData.subLight.rotation_y, setProperty: function (value) { return props.setProperty('lighting.subLight.rotation_y', value); } }),
            React.createElement(Slider, { label: 'Rotation_z', precision: 0, min: -180, max: 180, value: props.lightingData.subLight.rotation_z, setProperty: function (value) { return props.setProperty('lighting.subLight.rotation_z', value); } })));
    };
    return SubLightingPanel;
})(React.Component));
var SSAOPanel = /** @class */ (function (_super) {
    __extends(SSAOPanel, _super);
    function SSAOPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SSAOPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.scripts) !== JSON.stringify(this.props.scripts);
    };
    SSAOPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'SSAO', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Toggle, { label: 'Enable', value: props.scripts.ssao.enabled, setProperty: function (value) { return props.setProperty('scripts.ssao.enabled', value); } }),
            React.createElement(Slider, { label: 'Radius', precision: 2, min: 0, max: 10, value: props.scripts.ssao.radius, setProperty: function (value) { return props.setProperty('scripts.ssao.radius', value); } }),
            React.createElement(Slider, { label: 'Samples', precision: 2, min: 0, max: 32, value: props.scripts.ssao.samples, setProperty: function (value) { return props.setProperty('scripts.ssao.samples', value); } }),
            React.createElement(Slider, { label: 'Brightness', precision: 2, min: 0, max: 1, value: props.scripts.ssao.brightness, setProperty: function (value) { return props.setProperty('scripts.ssao.brightness', value); } }),
            React.createElement(Select, { label: 'Downscale', value: props.scripts.ssao.downscale, type: 'number', options: [{ v: 1, t: 'None' }, { v: 2, t: '50%' }, { v: '4', t: '25%' }], setProperty: function (value) { return props.setProperty('scripts.ssao.downscale', value); } })));
    };
    return SSAOPanel;
}(React.Component));
var BloomPanel = /** @class */ (function (_super) {
    __extends(BloomPanel, _super);
    function BloomPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BloomPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.scripts) !== JSON.stringify(this.props.scripts);
    };
    BloomPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'BLOOM', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Toggle, { label: 'Enable', value: props.scripts.bloom.enabled, setProperty: function (value) { return props.setProperty('scripts.bloom.enabled', value); } }),
            React.createElement(Slider, { label: 'Intensity', precision: 2, min: 0, max: 1, value: props.scripts.bloom.bloomIntensity, setProperty: function (value) { return props.setProperty('scripts.bloom.bloomIntensity', value); } }),
            React.createElement(Slider, { label: 'Threshold', precision: 2, min: 0, max: 1, value: props.scripts.bloom.bloomThreshold, setProperty: function (value) { return props.setProperty('scripts.bloom.bloomThreshold', value); } }),
            React.createElement(Slider, { label: 'Amount', precision: 2, min: 1, max: 30, value: props.scripts.bloom.blurAmount, setProperty: function (value) { return props.setProperty('scripts.bloom.blurAmount', value); } })));
    };
    return BloomPanel;
}(React.Component));
var ColorAdjustPanel = /** @class */ (function (_super) {
    __extends(ColorAdjustPanel, _super);
    function ColorAdjustPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorAdjustPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.scripts) !== JSON.stringify(this.props.scripts);
    };
    ColorAdjustPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'COLOR', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Toggle, { label: 'Enable', value: props.scripts.brightnesscontrast.enabled, setProperty: function (value) { return props.setProperty('scripts.brightnesscontrast.enabled', value); } }),
            React.createElement(Slider, { label: 'Brightness', precision: 2, min: -1, max: 1, value: props.scripts.brightnesscontrast.brightness, setProperty: function (value) { return props.setProperty('scripts.brightnesscontrast.brightness', value); } }),
            React.createElement(Slider, { label: 'Contrast', precision: 2, min: -1, max: 1, value: props.scripts.brightnesscontrast.contrast, setProperty: function (value) { return props.setProperty('scripts.brightnesscontrast.contrast', value); } }),
            React.createElement(Toggle, { label: 'Enable', value: props.scripts.huesaturation.enabled, setProperty: function (value) { return props.setProperty('scripts.huesaturation.enabled', value); } }),
            React.createElement(Slider, { label: 'Hue', precision: 2, min: -1, max: 1, value: props.scripts.huesaturation.hue, setProperty: function (value) { return props.setProperty('scripts.huesaturation.hue', value); } }),
            React.createElement(Slider, { label: 'Saturation', precision: 2, min: -1, max: 1, value: props.scripts.huesaturation.saturation, setProperty: function (value) { return props.setProperty('scripts.huesaturation.saturation', value); } })));
    };
    return ColorAdjustPanel;
}(React.Component));
var VinettePanel = /** @class */ (function (_super) {
    __extends(VinettePanel, _super);
    function VinettePanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VinettePanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.scripts) !== JSON.stringify(this.props.scripts);
    };
    VinettePanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'VINETTE', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Toggle, { label: 'Enable', value: props.scripts.vignette.enabled, setProperty: function (value) { return props.setProperty('scripts.vignette.enabled', value); } }),
            React.createElement(Slider, { label: 'Offset', precision: 2, min: 0, max: 2, value: props.scripts.vignette.offset, setProperty: function (value) { return props.setProperty('scripts.vignette.offset', value); } }),
            React.createElement(Slider, { label: 'Darkness', precision: 2, min: 0, max: 1, value: props.scripts.vignette.darkness, setProperty: function (value) { return props.setProperty('scripts.vignette.darkness', value); } })));
    };
    return VinettePanel;
}(React.Component));
var DOFPanel = /** @class */ (function (_super) {
    __extends(DOFPanel, _super);
    function DOFPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DOFPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.scripts) !== JSON.stringify(this.props.scripts);
    };
    DOFPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'DOF', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Toggle, { label: 'Enable', value: props.scripts.bokeh.enabled, setProperty: function (value) { return props.setProperty('scripts.bokeh.enabled', value); } }),
            React.createElement(Slider, { label: 'MaxBlur', precision: 3, min: 0, max: 0.1, value: props.scripts.bokeh.maxBlur, setProperty: function (value) { return props.setProperty('scripts.bokeh.maxBlur', value); } }),
            React.createElement(Slider, { label: 'Aperture', precision: 3, min: 0, max: 0.2, value: props.scripts.bokeh.aperture, setProperty: function (value) { return props.setProperty('scripts.bokeh.aperture', value); } })));
    };
    return DOFPanel;
}(React.Component));
var ShowPanel = /** @class */ (function (_super) {
    __extends(ShowPanel, _super);
    function ShowPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.showData) !== JSON.stringify(this.props.showData);
    };
    ShowPanel.prototype.render = function () {
        var props = this.props;
        return (React.createElement(Panel$1, { headerText: 'DEBUG', id: 'scene-panel', flexShrink: 0, flexGrow: 0, collapsible: true, collapsed: true },
            React.createElement(Toggle, { label: 'Grid', value: props.showData.grid, setProperty: function (value) { return props.setProperty('show.grid', value); } }),
            React.createElement(Toggle, { label: 'Stats', value: props.showData.stats, setProperty: function (value) { return props.setProperty('show.stats', value); } }),
            React.createElement(Toggle, { label: 'Depth', value: props.showData.depth, setProperty: function (value) { return props.setProperty('show.depth', value); } })));
    };
    return ShowPanel;
}(React.Component));
var LeftPanel = /** @class */ (function (_super) {
    __extends(LeftPanel, _super);
    function LeftPanel(props) {
        var _this = _super.call(this, props) || this;
        _this.isMobile = (/Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
        return _this;
    }
    LeftPanel.prototype.shouldComponentUpdate = function (nextProps) {
        return JSON.stringify(nextProps.observerData.scene) !== JSON.stringify(this.props.observerData.scene);
    };
    LeftPanel.prototype.componentDidMount = function () {
        // set up the control panel toggle button
        // @ts-ignore
        document.getElementById('panel-toggle').addEventListener('click', function () {
            toggleCollapsed();
        });
        // @ts-ignore
        document.getElementById('title').addEventListener('click', function () {
            toggleCollapsed();
        });
        // we require this setTimeout because panel isn't yet created and so fails
        // otherwise.
        setTimeout(function () { return toggleCollapsed(); });
    };
    LeftPanel.prototype.componentDidUpdate = function (prevProps) {
        if (!this.isMobile && prevProps.observerData.scene.nodes === '[]' && this.props.observerData.scene.nodes !== '[]') ;
    };
    LeftPanel.prototype.render = function () {
        var scene = this.props.observerData.scene;
        return (React.createElement(Container$1, { id: 'scene-container', flex: true },
            React.createElement("div", { id: 'scene-scrolly-bits' },
                React.createElement(ScenePanel, { sceneData: scene, setProperty: this.props.setProperty }),
                React.createElement(CameraPanel, { setProperty: this.props.setProperty, observerData: this.props.observerData }),
                React.createElement(EnvironmentPanel, { setProperty: this.props.setProperty, lightingData: this.props.observerData.lighting, uiData: this.props.observerData.ui }),
                React.createElement(LightingPanel, { setProperty: this.props.setProperty, lightingData: this.props.observerData.lighting, uiData: this.props.observerData.ui }),
                React.createElement(ColorAdjustPanel, { setProperty: this.props.setProperty, scripts: this.props.observerData.scripts }),
                React.createElement(BloomPanel, { setProperty: this.props.setProperty, scripts: this.props.observerData.scripts }),
                React.createElement(DOFPanel, { setProperty: this.props.setProperty, scripts: this.props.observerData.scripts }),
                React.createElement(VinettePanel, { setProperty: this.props.setProperty, scripts: this.props.observerData.scripts }),
                React.createElement(SSAOPanel, { setProperty: this.props.setProperty, scripts: this.props.observerData.scripts }),
                React.createElement(ShowPanel, { setProperty: this.props.setProperty, showData: this.props.observerData.show }))));
    };
    return LeftPanel;
}(React.Component));

var LoadControls = function (props) {
    var onLoadModel = function () {
        // @ts-ignore
        var danjiId = document.getElementById('input-danjiId').ui.value;
        // @ts-ignore
        var roomTypeId = document.getElementById('input-roomtypeId').ui.value;
        // @ts-ignore
        var level = document.getElementById('input-level').ui.value;
        var asset_path = "https://raw.githubusercontent.com/sehyun-zigbang/zigbang-zed-viewer/feature/playcanvas-based/assets";
        var model_path = "".concat(asset_path, "/glTF/").concat(danjiId, "/").concat(roomTypeId);
        var model_name = "".concat(danjiId, "_").concat(roomTypeId, "_").concat(level);
        var name_glTF = "".concat(model_name, ".gltf");
        var name_bin = "".concat(model_name, ".bin");
        var url_glTF = "".concat(model_path, "/").concat(name_glTF);
        var url_bin = "".concat(model_path, "/").concat(name_bin);
        props.setProperty('scene.name', model_name);
        var viewer = window.viewer;
        var loadList = [];
        loadList.push({
            url: url_glTF,
            filename: name_glTF
        });
        loadList.push({
            url: url_bin,
            filename: name_bin
        });
        viewer.loadFiles(loadList);
    };
    return (React.createElement("div", { id: 'load-controls' },
        React.createElement(Container$1, { class: "load-button-panel", enabled: true, flex: true },
            React.createElement("div", { className: 'header' },
                React.createElement("img", { src: getAssetPath('zigbang-logo.jpg') }),
                React.createElement("div", null,
                    React.createElement(Label$1, { text: 'ZIGBANG MODEL VIEWER' }))),
            React.createElement(TextInput$1, { class: 'secondary', id: 'input-danjiId', placeholder: 'input danjiID', value: '19931' }),
            React.createElement(TextInput$1, { class: 'secondary', id: 'input-roomtypeId', placeholder: 'input roomtypeID', value: '17493' }),
            React.createElement(TextInput$1, { class: 'secondary', id: 'input-level', placeholder: 'input level', value: '0' }),
            React.createElement(Button$1, { class: 'secondary', id: 'glb-url-button', text: 'LOAD MODEL', onClick: onLoadModel }))));
};
var ErrorBox = function (props) {
    return React.createElement(InfoBox$1, { class: "pcui-error", title: 'Error', hidden: !props.observerData.error, text: props.observerData.error, icon: 'E218' });
};
var App = /** @class */ (function (_super) {
    __extends(App, _super);
    function App(props) {
        var _this = _super.call(this, props) || this;
        _this._retrieveState = function () {
            var state = {};
            _this.props.observer._keys.forEach(function (key) {
                state[key] = _this.props.observer.get(key);
            });
            return state;
        };
        _this._setStateProperty = function (path, value) {
            _this.props.observer.set(path, value);
        };
        _this.canvasRef = React.createRef();
        _this.state = _this._retrieveState();
        props.observer.on('*:set', function () {
            // update the state
            _this.setState(_this._retrieveState());
        });
        return _this;
    }
    App.prototype.componentDidMount = function () {
        var resizeCanvas = function () {
            var _a;
            (_a = window.viewer) === null || _a === void 0 ? void 0 : _a.observer.emit('canvasResized');
        };
        new ResizeObserver(resizeCanvas).observe(this.canvasRef.current);
    };
    App.prototype.render = function () {
        var _this = this;
        return React.createElement("div", { id: "application-container" },
            React.createElement(Container$1, { id: "panel-left", class: this.state.scene.nodes === '[]' ? 'empty' : null, flex: true, resizable: 'right', resizeMin: 220, resizeMax: 800, onResize: function () { return _this.props.observer.emit('canvasResized'); } },
                React.createElement("div", { className: "header", style: { display: 'none' } },
                    React.createElement("div", { id: "title" },
                        React.createElement("img", { src: getAssetPath('zigbang-logo.jpg') }),
                        React.createElement("div", null, "ZIGBANG MODEL VIEWER"))),
                React.createElement("div", { id: "panel-toggle" },
                    React.createElement("img", { src: getAssetPath('zigbang-logo.jpg') })),
                React.createElement(LeftPanel, { observerData: this.state, setProperty: this._setStateProperty })),
            React.createElement("div", { id: 'canvas-wrapper' },
                React.createElement("canvas", { id: "application-canvas", ref: this.canvasRef }),
                React.createElement(LoadControls, { setProperty: this._setStateProperty }),
                React.createElement(ErrorBox, { observerData: this.state }),
                React.createElement(Spinner$1, { id: "spinner", size: 30, hidden: true })));
    };
    return App;
}(React.Component));
var initializeUI = (function (observer) {
    // render out the app
    ReactDOM.render(React.createElement(App, { observer: observer }), document.getElementById('app'));
});

var playcanvasExtras = {exports: {}};

/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */

(function (module, exports) {
	(function (global, factory) {
		factory(exports) ;
	})(commonjsGlobal, (function (exports) {
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}

		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  Object.defineProperty(Constructor, "prototype", {
		    writable: false
		  });
		  return Constructor;
		}

		function _inheritsLoose(subClass, superClass) {
		  subClass.prototype = Object.create(superClass.prototype);
		  subClass.prototype.constructor = subClass;

		  _setPrototypeOf(subClass, superClass);
		}

		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}

		var CpuTimer = function () {
		  function CpuTimer(app) {
		    this._frameIndex = 0;
		    this._frameTimings = [];
		    this._timings = [];
		    this._prevTimings = [];
		    this.unitsName = 'ms';
		    this.decimalPlaces = 1;
		    this.enabled = true;
		    app.on('frameupdate', this.begin.bind(this, 'update'));
		    app.on('framerender', this.mark.bind(this, 'render'));
		    app.on('frameend', this.mark.bind(this, 'other'));
		  }

		  var _proto = CpuTimer.prototype;

		  _proto.begin = function begin(name) {
		    if (!this.enabled) {
		      return;
		    }

		    if (this._frameIndex < this._frameTimings.length) {
		      this._frameTimings.splice(this._frameIndex);
		    }

		    var tmp = this._prevTimings;
		    this._prevTimings = this._timings;
		    this._timings = this._frameTimings;
		    this._frameTimings = tmp;
		    this._frameIndex = 0;
		    this.mark(name);
		  };

		  _proto.mark = function mark(name) {
		    if (!this.enabled) {
		      return;
		    }

		    var timestamp = pc.now();

		    if (this._frameIndex > 0) {
		      var prev = this._frameTimings[this._frameIndex - 1];
		      prev[1] = timestamp - prev[1];
		    } else if (this._timings.length > 0) {
		      var _prev = this._timings[this._timings.length - 1];
		      _prev[1] = timestamp - _prev[1];
		    }

		    if (this._frameIndex >= this._frameTimings.length) {
		      this._frameTimings.push([name, timestamp]);
		    } else {
		      var timing = this._frameTimings[this._frameIndex];
		      timing[0] = name;
		      timing[1] = timestamp;
		    }

		    this._frameIndex++;
		  };

		  _createClass(CpuTimer, [{
		    key: "timings",
		    get: function get() {
		      return this._timings.slice(0, -1).map(function (v) {
		        return v[1];
		      });
		    }
		  }]);

		  return CpuTimer;
		}();

		var GpuTimer = function () {
		  function GpuTimer(app) {
		    this._gl = app.graphicsDevice.gl;
		    this._ext = app.graphicsDevice.extDisjointTimerQuery;
		    this._freeQueries = [];
		    this._frameQueries = [];
		    this._frames = [];
		    this._timings = [];
		    this._prevTimings = [];
		    this.enabled = true;
		    this.unitsName = 'ms';
		    this.decimalPlaces = 1;
		    app.on('frameupdate', this.begin.bind(this, 'update'));
		    app.on('framerender', this.mark.bind(this, 'render'));
		    app.on('frameend', this.end.bind(this));
		  }

		  var _proto = GpuTimer.prototype;

		  _proto.loseContext = function loseContext() {
		    this._freeQueries = [];
		    this._frameQueries = [];
		    this._frames = [];
		  };

		  _proto.begin = function begin(name) {
		    if (!this.enabled) {
		      return;
		    }

		    if (this._frameQueries.length > 0) {
		      this.end();
		    }

		    this._checkDisjoint();

		    if (this._frames.length > 0) {
		      if (this._resolveFrameTimings(this._frames[0], this._prevTimings)) {
		        var tmp = this._prevTimings;
		        this._prevTimings = this._timings;
		        this._timings = tmp;
		        this._freeQueries = this._freeQueries.concat(this._frames.splice(0, 1)[0]);
		      }
		    }

		    this.mark(name);
		  };

		  _proto.mark = function mark(name) {
		    if (!this.enabled) {
		      return;
		    }

		    if (this._frameQueries.length > 0) {
		      this._gl.endQuery(this._ext.TIME_ELAPSED_EXT);
		    }

		    var query = this._allocateQuery();

		    query[0] = name;

		    this._gl.beginQuery(this._ext.TIME_ELAPSED_EXT, query[1]);

		    this._frameQueries.push(query);
		  };

		  _proto.end = function end() {
		    if (!this.enabled) {
		      return;
		    }

		    this._gl.endQuery(this._ext.TIME_ELAPSED_EXT);

		    this._frames.push(this._frameQueries);

		    this._frameQueries = [];
		  };

		  _proto._checkDisjoint = function _checkDisjoint() {
		    var disjoint = this._gl.getParameter(this._ext.GPU_DISJOINT_EXT);

		    if (disjoint) {
		      this._freeQueries = [this._frames, [this._frameQueries], [this._freeQueries]].flat(2);
		      this._frameQueries = [];
		      this._frames = [];
		    }
		  };

		  _proto._allocateQuery = function _allocateQuery() {
		    return this._freeQueries.length > 0 ? this._freeQueries.splice(-1, 1)[0] : ['', this._gl.createQuery()];
		  };

		  _proto._resolveFrameTimings = function _resolveFrameTimings(frame, timings) {
		    if (!this._gl.getQueryParameter(frame[frame.length - 1][1], this._gl.QUERY_RESULT_AVAILABLE)) {
		      return false;
		    }

		    for (var i = 0; i < frame.length; ++i) {
		      timings[i] = [frame[i][0], this._gl.getQueryParameter(frame[i][1], this._gl.QUERY_RESULT) * 0.000001];
		    }

		    return true;
		  };

		  _createClass(GpuTimer, [{
		    key: "timings",
		    get: function get() {
		      return this._timings.map(function (v) {
		        return v[1];
		      });
		    }
		  }]);

		  return GpuTimer;
		}();

		var StatsTimer = function () {
		  function StatsTimer(app, statNames, decimalPlaces, unitsName, multiplier) {
		    var _this = this;

		    this.app = app;
		    this.values = [];
		    this.statNames = statNames;
		    if (this.statNames.length > 3) this.statNames.length = 3;
		    this.unitsName = unitsName;
		    this.decimalPlaces = decimalPlaces;
		    this.multiplier = multiplier || 1;

		    var resolve = function resolve(path, obj) {
		      return path.split('.').reduce(function (prev, curr) {
		        return prev ? prev[curr] : null;
		      }, obj || _this);
		    };

		    app.on('frameupdate', function (ms) {
		      for (var i = 0; i < _this.statNames.length; i++) {
		        _this.values[i] = resolve(_this.statNames[i], _this.app.stats) * _this.multiplier;
		      }
		    });
		  }

		  _createClass(StatsTimer, [{
		    key: "timings",
		    get: function get() {
		      return this.values;
		    }
		  }]);

		  return StatsTimer;
		}();

		var Graph = function () {
		  function Graph(name, app, watermark, textRefreshRate, timer) {
		    this.name = name;
		    this.device = app.graphicsDevice;
		    this.timer = timer;
		    this.watermark = watermark;
		    this.enabled = false;
		    this.textRefreshRate = textRefreshRate;
		    this.avgTotal = 0;
		    this.avgTimer = 0;
		    this.avgCount = 0;
		    this.timingText = '';
		    this.texture = null;
		    this.yOffset = 0;
		    this.cursor = 0;
		    this.sample = new Uint8ClampedArray(4);
		    this.sample.set([0, 0, 0, 255]);
		    app.on('frameupdate', this.update.bind(this));
		    this.counter = 0;
		  }

		  var _proto = Graph.prototype;

		  _proto.loseContext = function loseContext() {
		    if (this.timer && typeof this.timer.loseContext === 'function') {
		      this.timer.loseContext();
		    }
		  };

		  _proto.update = function update(ms) {
		    var timings = this.timer.timings;
		    var total = timings.reduce(function (a, v) {
		      return a + v;
		    }, 0);
		    this.avgTotal += total;
		    this.avgTimer += ms;
		    this.avgCount++;

		    if (this.avgTimer > this.textRefreshRate) {
		      this.timingText = (this.avgTotal / this.avgCount).toFixed(this.timer.decimalPlaces);
		      this.avgTimer = 0;
		      this.avgTotal = 0;
		      this.avgCount = 0;
		    }

		    if (this.enabled) {
		      var value = 0;
		      var range = 1.5 * this.watermark;

		      for (var i = 0; i < timings.length; ++i) {
		        value += Math.floor(timings[i] / range * 255);
		        this.sample[i] = value;
		      }

		      this.sample[3] = this.watermark / range * 255;
		      var gl = this.device.gl;
		      this.device.bindTexture(this.texture);
		      gl.texSubImage2D(gl.TEXTURE_2D, 0, this.cursor, this.yOffset, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, this.sample);
		      this.cursor++;

		      if (this.cursor === this.texture.width) {
		        this.cursor = 0;
		      }
		    }
		  };

		  _proto.render = function render(render2d, x, y, w, h) {
		    render2d.quad(this.texture, x + w, y, -w, h, this.cursor, 0.5 + this.yOffset, -w, 0, this.enabled);
		  };

		  return Graph;
		}();

		var WordAtlas = function () {
		  function WordAtlas(texture, words) {
		    var canvas = document.createElement('canvas');
		    canvas.width = texture.width;
		    canvas.height = texture.height;
		    var context = canvas.getContext('2d', {
		      alpha: true
		    });
		    context.font = '10px "Lucida Console", Monaco, monospace';
		    context.textAlign = 'left';
		    context.textBaseline = 'alphabetic';
		    context.fillStyle = 'rgb(255, 255, 255)';
		    var padding = 5;
		    var x = padding;
		    var y = padding;
		    var placements = [];

		    for (var i = 0; i < words.length; ++i) {
		      var measurement = context.measureText(words[i]);
		      var l = Math.ceil(-measurement.actualBoundingBoxLeft);
		      var r = Math.ceil(measurement.actualBoundingBoxRight);
		      var a = Math.ceil(measurement.actualBoundingBoxAscent);
		      var d = Math.ceil(measurement.actualBoundingBoxDescent);
		      var w = l + r;
		      var h = a + d;

		      if (x + w >= canvas.width) {
		        x = padding;
		        y += 16;
		      }

		      context.fillStyle = words[i].length === 1 ? 'rgb(255, 255, 255)' : 'rgb(150, 150, 150)';
		      context.fillText(words[i], x - l, y + a);
		      placements.push({
		        l: l,
		        r: r,
		        a: a,
		        d: d,
		        x: x,
		        y: y,
		        w: w,
		        h: h
		      });
		      x += w + padding;
		    }

		    var wordMap = {};
		    words.forEach(function (w, i) {
		      wordMap[w] = i;
		    });
		    this.words = words;
		    this.wordMap = wordMap;
		    this.placements = placements;
		    this.texture = texture;
		    var source = context.getImageData(0, 0, canvas.width, canvas.height);
		    var dest = texture.lock();

		    for (var _y = 0; _y < source.height; ++_y) {
		      for (var _x = 0; _x < source.width; ++_x) {
		        var offset = (_x + _y * texture.width) * 4;
		        dest[offset] = 255;
		        dest[offset + 1] = 255;
		        dest[offset + 2] = 255;
		        var red = source.data[(_x + (source.height - 1 - _y) * source.width) * 4];
		        var alpha = source.data[(_x + (source.height - 1 - _y) * source.width) * 4 + 3];
		        dest[offset + 3] = alpha * (red > 150 ? 1 : 0.7);
		      }
		    }
		  }

		  var _proto = WordAtlas.prototype;

		  _proto.render = function render(render2d, word, x, y) {
		    var p = this.placements[this.wordMap[word]];

		    if (p) {
		      var padding = 1;
		      render2d.quad(this.texture, x + p.l - padding, y - p.d + padding, p.w + padding * 2, p.h + padding * 2, p.x - padding, 64 - p.y - p.h - padding, undefined, undefined, true);
		      return p.w;
		    }

		    return 0;
		  };

		  return WordAtlas;
		}();

		var Render2d = function () {
		  function Render2d(device, colors, maxQuads) {
		    var _this = this;

		    if (maxQuads === void 0) {
		      maxQuads = 512;
		    }

		    var vertexShader = 'attribute vec3 vertex_position;\n' + 'attribute vec4 vertex_texCoord0;\n' + 'uniform vec4 screenAndTextureSize;\n' + 'varying vec4 uv0;\n' + 'varying float enabled;\n' + 'void main(void) {\n' + '    vec2 pos = vertex_position.xy / screenAndTextureSize.xy;\n' + '    gl_Position = vec4(pos * 2.0 - 1.0, 0.5, 1.0);\n' + '    uv0 = vec4(vertex_texCoord0.xy / screenAndTextureSize.zw, vertex_texCoord0.zw);\n' + '    enabled = vertex_position.z;\n' + '}\n';
		    var fragmentShader = 'varying vec4 uv0;\n' + 'varying float enabled;\n' + 'uniform vec4 clr;\n' + 'uniform vec4 col0;\n' + 'uniform vec4 col1;\n' + 'uniform vec4 col2;\n' + 'uniform vec4 watermark;\n' + 'uniform float watermarkSize;\n' + 'uniform vec4 background;\n' + 'uniform sampler2D source;\n' + 'void main (void) {\n' + '    vec4 tex = texture2D(source, uv0.xy);\n' + '    if (!(tex.rgb == vec3(1.0, 1.0, 1.0))) {\n' + '       if (enabled < 0.5)\n' + '           tex = background;\n' + '       else if (abs(uv0.w - tex.a) < watermarkSize)\n' + '           tex = watermark;\n' + '       else if (uv0.w < tex.r)\n' + '           tex = col0;\n' + '       else if (uv0.w < tex.g)\n' + '           tex = col1;\n' + '       else if (uv0.w < tex.b)\n' + '           tex = col2;\n' + '       else\n' + '           tex = background;\n' + '    }\n' + '    gl_FragColor = tex * clr;\n' + '}\n';
		    var format = new pc.VertexFormat(device, [{
		      semantic: pc.SEMANTIC_POSITION,
		      components: 3,
		      type: pc.TYPE_FLOAT32
		    }, {
		      semantic: pc.SEMANTIC_TEXCOORD0,
		      components: 4,
		      type: pc.TYPE_FLOAT32
		    }]);
		    var indices = new Uint16Array(maxQuads * 6);

		    for (var i = 0; i < maxQuads; ++i) {
		      indices[i * 6 + 0] = i * 4;
		      indices[i * 6 + 1] = i * 4 + 1;
		      indices[i * 6 + 2] = i * 4 + 2;
		      indices[i * 6 + 3] = i * 4;
		      indices[i * 6 + 4] = i * 4 + 2;
		      indices[i * 6 + 5] = i * 4 + 3;
		    }

		    this.device = device;
		    this.shader = pc.shaderChunks.createShaderFromCode(device, vertexShader, fragmentShader, 'mini-stats');
		    this.buffer = new pc.VertexBuffer(device, format, maxQuads * 4, pc.BUFFER_STREAM);
		    this.data = new Float32Array(this.buffer.numBytes / 4);
		    this.indexBuffer = new pc.IndexBuffer(device, pc.INDEXFORMAT_UINT16, maxQuads * 6, pc.BUFFER_STATIC, indices);
		    this.prims = [];
		    this.prim = null;
		    this.primIndex = -1;
		    this.quads = 0;

		    var setupColor = function setupColor(name, value) {
		      _this[name] = new Float32Array([value.r, value.g, value.b, value.a]);
		      _this[name + 'Id'] = device.scope.resolve(name);
		    };

		    setupColor('col0', colors.graph0);
		    setupColor('col1', colors.graph1);
		    setupColor('col2', colors.graph2);
		    setupColor('watermark', colors.watermark);
		    setupColor('background', colors.background);
		    this.watermarkSizeId = device.scope.resolve('watermarkSize');
		    this.clrId = device.scope.resolve('clr');
		    this.clr = new Float32Array(4);
		    this.screenTextureSizeId = device.scope.resolve('screenAndTextureSize');
		    this.screenTextureSize = new Float32Array(4);
		  }

		  var _proto = Render2d.prototype;

		  _proto.quad = function quad(texture, x, y, w, h, u, v, uw, uh, enabled) {
		    var quad = this.quads++;
		    var prim = this.prim;

		    if (prim && prim.texture === texture) {
		      prim.count += 6;
		    } else {
		      this.primIndex++;

		      if (this.primIndex === this.prims.length) {
		        prim = {
		          type: pc.PRIMITIVE_TRIANGLES,
		          indexed: true,
		          base: quad * 6,
		          count: 6,
		          texture: texture
		        };
		        this.prims.push(prim);
		      } else {
		        prim = this.prims[this.primIndex];
		        prim.base = quad * 6;
		        prim.count = 6;
		        prim.texture = texture;
		      }

		      this.prim = prim;
		    }

		    var x1 = x + w;
		    var y1 = y + h;
		    var u1 = u + (uw === undefined ? w : uw);
		    var v1 = v + (uh === undefined ? h : uh);
		    var colorize = enabled ? 1 : 0;
		    this.data.set([x, y, colorize, u, v, 0, 0, x1, y, colorize, u1, v, 1, 0, x1, y1, colorize, u1, v1, 1, 1, x, y1, colorize, u, v1, 0, 1], 4 * 7 * quad);
		  };

		  _proto.render = function render(clr, height) {
		    var device = this.device;
		    var buffer = this.buffer;
		    buffer.setData(this.data.buffer);
		    device.updateBegin();
		    device.setDepthTest(false);
		    device.setDepthWrite(false);
		    device.setCullMode(pc.CULLFACE_NONE);
		    device.setBlending(true);
		    device.setBlendFunctionSeparate(pc.BLENDMODE_SRC_ALPHA, pc.BLENDMODE_ONE_MINUS_SRC_ALPHA, pc.BLENDMODE_ONE, pc.BLENDMODE_ONE);
		    device.setBlendEquationSeparate(pc.BLENDEQUATION_ADD, pc.BLENDEQUATION_ADD);
		    device.setVertexBuffer(buffer, 0);
		    device.setIndexBuffer(this.indexBuffer);
		    device.setShader(this.shader);
		    var pr = Math.min(device.maxPixelRatio, window.devicePixelRatio);
		    this.clr.set(clr, 0);
		    this.clrId.setValue(this.clr);
		    this.screenTextureSize[0] = device.width / pr;
		    this.screenTextureSize[1] = device.height / pr;
		    this.col0Id.setValue(this.col0);
		    this.col1Id.setValue(this.col1);
		    this.col2Id.setValue(this.col2);
		    this.watermarkId.setValue(this.watermark);
		    this.backgroundId.setValue(this.background);

		    for (var i = 0; i <= this.primIndex; ++i) {
		      var prim = this.prims[i];
		      this.screenTextureSize[2] = prim.texture.width;
		      this.screenTextureSize[3] = prim.texture.height;
		      this.screenTextureSizeId.setValue(this.screenTextureSize);
		      device.constantTexSource.setValue(prim.texture);
		      this.watermarkSizeId.setValue(0.5 / height);
		      device.draw(prim);
		    }

		    device.updateEnd();
		    this.prim = null;
		    this.primIndex = -1;
		    this.quads = 0;
		  };

		  return Render2d;
		}();

		var MiniStats = function () {
		  function MiniStats(app, options) {
		    var _this = this;

		    var device = app.graphicsDevice;

		    this._contextLostHandler = function (event) {
		      event.preventDefault();

		      if (_this.graphs) {
		        for (var i = 0; i < _this.graphs.length; i++) {
		          _this.graphs[i].loseContext();
		        }
		      }
		    };

		    device.canvas.addEventListener('webglcontextlost', this._contextLostHandler, false);
		    options = options || MiniStats.getDefaultOptions();
		    var graphs = this.initGraphs(app, device, options);
		    var words = ['', 'ms', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'];
		    graphs.forEach(function (graph) {
		      words.push(graph.name);
		    });

		    if (options.stats) {
		      options.stats.forEach(function (stat) {
		        if (stat.unitsName) words.push(stat.unitsName);
		      });
		    }

		    words = words.filter(function (item, index) {
		      return words.indexOf(item) >= index;
		    });
		    var maxWidth = options.sizes.reduce(function (max, v) {
		      return v.width > max ? v.width : max;
		    }, 0);
		    var wordAtlasData = this.initWordAtlas(device, words, maxWidth, graphs.length);
		    var texture = wordAtlasData.texture;
		    graphs.forEach(function (graph, i) {
		      graph.texture = texture;
		      graph.yOffset = i;
		    });
		    this.sizes = options.sizes;
		    this._activeSizeIndex = options.startSizeIndex;
		    var div = document.createElement('div');
		    div.style.cssText = 'position:fixed;bottom:0;left:0;background:transparent;';
		    document.body.appendChild(div);
		    div.addEventListener('mouseenter', function (event) {
		      _this.opacity = 1.0;
		    });
		    div.addEventListener('mouseleave', function (event) {
		      _this.opacity = 0.5;
		    });
		    div.addEventListener('click', function (event) {
		      event.preventDefault();

		      if (_this._enabled) {
		        _this.activeSizeIndex = (_this.activeSizeIndex + 1) % _this.sizes.length;

		        _this.resize(_this.sizes[_this.activeSizeIndex].width, _this.sizes[_this.activeSizeIndex].height, _this.sizes[_this.activeSizeIndex].graphs);
		      }
		    });
		    device.on('resizecanvas', function () {
		      _this.updateDiv();
		    });
		    app.on('postrender', function () {
		      if (_this._enabled) {
		        _this.render();
		      }
		    });
		    this.device = device;
		    this.texture = texture;
		    this.wordAtlas = wordAtlasData.atlas;
		    this.render2d = new Render2d(device, options.colors);
		    this.graphs = graphs;
		    this.div = div;
		    this.width = 0;
		    this.height = 0;
		    this.gspacing = 2;
		    this.clr = [1, 1, 1, 0.5];
		    this._enabled = true;
		    this.activeSizeIndex = this._activeSizeIndex;
		  }

		  MiniStats.getDefaultOptions = function getDefaultOptions() {
		    return {
		      sizes: [{
		        width: 100,
		        height: 16,
		        spacing: 0,
		        graphs: false
		      }, {
		        width: 128,
		        height: 32,
		        spacing: 2,
		        graphs: true
		      }, {
		        width: 256,
		        height: 64,
		        spacing: 2,
		        graphs: true
		      }],
		      startSizeIndex: 0,
		      textRefreshRate: 500,
		      colors: {
		        graph0: new pc.Color(0.7, 0.2, 0.2, 1),
		        graph1: new pc.Color(0.2, 0.7, 0.2, 1),
		        graph2: new pc.Color(0.2, 0.2, 0.7, 1),
		        watermark: new pc.Color(0.4, 0.4, 0.2, 1),
		        background: new pc.Color(0, 0, 0, 1.0)
		      },
		      cpu: {
		        enabled: true,
		        watermark: 33
		      },
		      gpu: {
		        enabled: true,
		        watermark: 33
		      },
		      stats: [{
		        name: 'Frame',
		        stats: ['frame.ms'],
		        decimalPlaces: 1,
		        unitsName: 'ms',
		        watermark: 33
		      }, {
		        name: 'DrawCalls',
		        stats: ['drawCalls.total'],
		        watermark: 1000
		      }]
		    };
		  };

		  var _proto = MiniStats.prototype;

		  _proto.initWordAtlas = function initWordAtlas(device, words, maxWidth, numGraphs) {
		    var texture = new pc.Texture(device, {
		      name: 'mini-stats',
		      width: pc.math.nextPowerOfTwo(maxWidth),
		      height: 64,
		      mipmaps: false,
		      minFilter: pc.FILTER_NEAREST,
		      magFilter: pc.FILTER_NEAREST
		    });
		    var wordAtlas = new WordAtlas(texture, words);
		    var dest = texture.lock();

		    for (var i = 0; i < texture.width * numGraphs; ++i) {
		      dest.set([0, 0, 0, 255], i * 4);
		    }

		    texture.unlock();
		    device.setTexture(texture, 0);
		    return {
		      atlas: wordAtlas,
		      texture: texture
		    };
		  };

		  _proto.initGraphs = function initGraphs(app, device, options) {
		    var graphs = [];

		    if (options.cpu.enabled) {
		      var timer = new CpuTimer(app);
		      var graph = new Graph('CPU', app, options.cpu.watermark, options.textRefreshRate, timer);
		      graphs.push(graph);
		    }

		    if (options.gpu.enabled && device.extDisjointTimerQuery) {
		      var _timer = new GpuTimer(app);

		      var _graph = new Graph('GPU', app, options.gpu.watermark, options.textRefreshRate, _timer);

		      graphs.push(_graph);
		    }

		    if (options.stats) {
		      options.stats.forEach(function (entry) {
		        var timer = new StatsTimer(app, entry.stats, entry.decimalPlaces, entry.unitsName, entry.multiplier);
		        var graph = new Graph(entry.name, app, entry.watermark, options.textRefreshRate, timer);
		        graphs.push(graph);
		      });
		    }

		    return graphs;
		  };

		  _proto.render = function render() {
		    var graphs = this.graphs;
		    var wordAtlas = this.wordAtlas;
		    var render2d = this.render2d;
		    var width = this.width;
		    var height = this.height;
		    var gspacing = this.gspacing;

		    for (var i = 0; i < graphs.length; ++i) {
		      var graph = graphs[i];
		      var y = i * (height + gspacing);
		      graph.render(render2d, 0, y, width, height);
		      var x = 1;
		      y += height - 13;
		      x += wordAtlas.render(render2d, graph.name, x, y) + 10;
		      var timingText = graph.timingText;

		      for (var j = 0; j < timingText.length; ++j) {
		        x += wordAtlas.render(render2d, timingText[j], x, y);
		      }

		      if (graph.timer.unitsName) {
		        x += 3;
		        wordAtlas.render(render2d, graph.timer.unitsName, x, y);
		      }
		    }

		    render2d.render(this.clr, height);
		  };

		  _proto.resize = function resize(width, height, showGraphs) {
		    var graphs = this.graphs;

		    for (var i = 0; i < graphs.length; ++i) {
		      graphs[i].enabled = showGraphs;
		    }

		    this.width = width;
		    this.height = height;
		    this.updateDiv();
		  };

		  _proto.updateDiv = function updateDiv() {
		    var rect = this.device.canvas.getBoundingClientRect();
		    this.div.style.left = rect.left + 'px';
		    this.div.style.bottom = window.innerHeight - rect.bottom + 'px';
		    this.div.style.width = this.width + 'px';
		    this.div.style.height = this.overallHeight + 'px';
		  };

		  _createClass(MiniStats, [{
		    key: "activeSizeIndex",
		    get: function get() {
		      return this._activeSizeIndex;
		    },
		    set: function set(value) {
		      this._activeSizeIndex = value;
		      this.gspacing = this.sizes[value].spacing;
		      this.resize(this.sizes[value].width, this.sizes[value].height, this.sizes[value].graphs);
		    }
		  }, {
		    key: "opacity",
		    get: function get() {
		      return this.clr[3];
		    },
		    set: function set(value) {
		      this.clr[3] = value;
		    }
		  }, {
		    key: "overallHeight",
		    get: function get() {
		      var graphs = this.graphs;
		      var spacing = this.gspacing;
		      return this.height * graphs.length + spacing * (graphs.length - 1);
		    }
		  }, {
		    key: "enabled",
		    get: function get() {
		      return this._enabled;
		    },
		    set: function set(value) {
		      if (value !== this._enabled) {
		        this._enabled = value;

		        for (var i = 0; i < this.graphs.length; ++i) {
		          this.graphs[i].enabled = value;
		          this.graphs[i].timer.enabled = value;
		        }
		      }
		    }
		  }]);

		  return MiniStats;
		}();

		var CoreExporter = function () {
		  function CoreExporter() {}

		  var _proto = CoreExporter.prototype;

		  _proto.imageToCanvas = function imageToCanvas(image, options) {
		    if (options === void 0) {
		      options = {};
		    }

		    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
		      var width = image.width,
		          height = image.height;
		      var maxTextureSize = options.maxTextureSize;

		      if (maxTextureSize) {
		        var scale = Math.min(maxTextureSize / Math.max(width, height), 1);
		        width = Math.round(width * scale);
		        height = Math.round(height * scale);
		      }

		      var canvas = document.createElement('canvas');
		      canvas.width = width;
		      canvas.height = height;
		      var context = canvas.getContext('2d');
		      context.drawImage(image, 0, 0, canvas.width, canvas.height);

		      if (options.color) {
		        var _options$color = options.color,
		            r = _options$color.r,
		            g = _options$color.g,
		            b = _options$color.b;
		        var imagedata = context.getImageData(0, 0, width, height);
		        var data = imagedata.data;

		        for (var i = 0; i < data.length; i += 4) {
		          data[i + 0] = data[i + 0] * r;
		          data[i + 1] = data[i + 1] * g;
		          data[i + 2] = data[i + 2] * b;
		        }

		        context.putImageData(imagedata, 0, 0);
		      }

		      return canvas;
		    }
		  };

		  return CoreExporter;
		}();

		var u8 = Uint8Array,
		    u16 = Uint16Array,
		    u32 = Uint32Array;
		var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
		var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
		var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);

		var freb = function freb(eb, start) {
		  var b = new u16(31);

		  for (var i = 0; i < 31; ++i) {
		    b[i] = start += 1 << eb[i - 1];
		  }

		  var r = new u32(b[30]);

		  for (var i = 1; i < 30; ++i) {
		    for (var j = b[i]; j < b[i + 1]; ++j) {
		      r[j] = j - b[i] << 5 | i;
		    }
		  }

		  return [b, r];
		};

		var _a = freb(fleb, 2),
		    fl = _a[0],
		    revfl = _a[1];

		fl[28] = 258, revfl[258] = 28;

		var _b = freb(fdeb, 0),
		    revfd = _b[1];

		var rev = new u16(32768);

		for (var i = 0; i < 32768; ++i) {
		  var x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
		  x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
		  x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
		  rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
		}

		var hMap = function hMap(cd, mb, r) {
		  var s = cd.length;
		  var i = 0;
		  var l = new u16(mb);

		  for (; i < s; ++i) {
		    if (cd[i]) ++l[cd[i] - 1];
		  }

		  var le = new u16(mb);

		  for (i = 0; i < mb; ++i) {
		    le[i] = le[i - 1] + l[i - 1] << 1;
		  }

		  var co;

		  if (r) {
		    co = new u16(1 << mb);
		    var rvb = 15 - mb;

		    for (i = 0; i < s; ++i) {
		      if (cd[i]) {
		        var sv = i << 4 | cd[i];
		        var r_1 = mb - cd[i];
		        var v = le[cd[i] - 1]++ << r_1;

		        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
		          co[rev[v] >>> rvb] = sv;
		        }
		      }
		    }
		  } else {
		    co = new u16(s);

		    for (i = 0; i < s; ++i) {
		      if (cd[i]) {
		        co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
		      }
		    }
		  }

		  return co;
		};

		var flt = new u8(288);

		for (var i = 0; i < 144; ++i) {
		  flt[i] = 8;
		}

		for (var i = 144; i < 256; ++i) {
		  flt[i] = 9;
		}

		for (var i = 256; i < 280; ++i) {
		  flt[i] = 7;
		}

		for (var i = 280; i < 288; ++i) {
		  flt[i] = 8;
		}

		var fdt = new u8(32);

		for (var i = 0; i < 32; ++i) {
		  fdt[i] = 5;
		}

		var flm = hMap(flt, 9, 0);
		    hMap(flt, 9, 1);
		var fdm = hMap(fdt, 5, 0);
		    hMap(fdt, 5, 1);

		var shft = function shft(p) {
		  return (p + 7) / 8 | 0;
		};

		var slc = function slc(v, s, e) {
		  if (s == null || s < 0) s = 0;
		  if (e == null || e > v.length) e = v.length;
		  var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);
		  n.set(v.subarray(s, e));
		  return n;
		};
		var ec = ['unexpected EOF', 'invalid block type', 'invalid length/literal', 'invalid distance', 'stream finished', 'no stream handler',, 'no callback', 'invalid UTF-8 data', 'extra field too long', 'date not in range 1980-2099', 'filename too long', 'stream finishing', 'invalid zip data'];

		var err = function err(ind, msg, nt) {
		  var e = new Error(msg || ec[ind]);
		  e.code = ind;
		  if (Error.captureStackTrace) Error.captureStackTrace(e, err);
		  if (!nt) throw e;
		  return e;
		};

		var wbits = function wbits(d, p, v) {
		  v <<= p & 7;
		  var o = p / 8 | 0;
		  d[o] |= v;
		  d[o + 1] |= v >>> 8;
		};

		var wbits16 = function wbits16(d, p, v) {
		  v <<= p & 7;
		  var o = p / 8 | 0;
		  d[o] |= v;
		  d[o + 1] |= v >>> 8;
		  d[o + 2] |= v >>> 16;
		};

		var hTree = function hTree(d, mb) {
		  var t = [];

		  for (var i = 0; i < d.length; ++i) {
		    if (d[i]) t.push({
		      s: i,
		      f: d[i]
		    });
		  }

		  var s = t.length;
		  var t2 = t.slice();
		  if (!s) return [et, 0];

		  if (s == 1) {
		    var v = new u8(t[0].s + 1);
		    v[t[0].s] = 1;
		    return [v, 1];
		  }

		  t.sort(function (a, b) {
		    return a.f - b.f;
		  });
		  t.push({
		    s: -1,
		    f: 25001
		  });
		  var l = t[0],
		      r = t[1],
		      i0 = 0,
		      i1 = 1,
		      i2 = 2;
		  t[0] = {
		    s: -1,
		    f: l.f + r.f,
		    l: l,
		    r: r
		  };

		  while (i1 != s - 1) {
		    l = t[t[i0].f < t[i2].f ? i0++ : i2++];
		    r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
		    t[i1++] = {
		      s: -1,
		      f: l.f + r.f,
		      l: l,
		      r: r
		    };
		  }

		  var maxSym = t2[0].s;

		  for (var i = 1; i < s; ++i) {
		    if (t2[i].s > maxSym) maxSym = t2[i].s;
		  }

		  var tr = new u16(maxSym + 1);
		  var mbt = ln(t[i1 - 1], tr, 0);

		  if (mbt > mb) {
		    var i = 0,
		        dt = 0;
		    var lft = mbt - mb,
		        cst = 1 << lft;
		    t2.sort(function (a, b) {
		      return tr[b.s] - tr[a.s] || a.f - b.f;
		    });

		    for (; i < s; ++i) {
		      var i2_1 = t2[i].s;

		      if (tr[i2_1] > mb) {
		        dt += cst - (1 << mbt - tr[i2_1]);
		        tr[i2_1] = mb;
		      } else break;
		    }

		    dt >>>= lft;

		    while (dt > 0) {
		      var i2_2 = t2[i].s;
		      if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;else ++i;
		    }

		    for (; i >= 0 && dt; --i) {
		      var i2_3 = t2[i].s;

		      if (tr[i2_3] == mb) {
		        --tr[i2_3];
		        ++dt;
		      }
		    }

		    mbt = mb;
		  }

		  return [new u8(tr), mbt];
		};

		var ln = function ln(n, l, d) {
		  return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
		};

		var lc = function lc(c) {
		  var s = c.length;

		  while (s && !c[--s]) {
		  }

		  var cl = new u16(++s);
		  var cli = 0,
		      cln = c[0],
		      cls = 1;

		  var w = function w(v) {
		    cl[cli++] = v;
		  };

		  for (var i = 1; i <= s; ++i) {
		    if (c[i] == cln && i != s) ++cls;else {
		      if (!cln && cls > 2) {
		        for (; cls > 138; cls -= 138) {
		          w(32754);
		        }

		        if (cls > 2) {
		          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
		          cls = 0;
		        }
		      } else if (cls > 3) {
		        w(cln), --cls;

		        for (; cls > 6; cls -= 6) {
		          w(8304);
		        }

		        if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;
		      }

		      while (cls--) {
		        w(cln);
		      }

		      cls = 1;
		      cln = c[i];
		    }
		  }

		  return [cl.subarray(0, cli), s];
		};

		var clen = function clen(cf, cl) {
		  var l = 0;

		  for (var i = 0; i < cl.length; ++i) {
		    l += cf[i] * cl[i];
		  }

		  return l;
		};

		var wfblk = function wfblk(out, pos, dat) {
		  var s = dat.length;
		  var o = shft(pos + 2);
		  out[o] = s & 255;
		  out[o + 1] = s >>> 8;
		  out[o + 2] = out[o] ^ 255;
		  out[o + 3] = out[o + 1] ^ 255;

		  for (var i = 0; i < s; ++i) {
		    out[o + i + 4] = dat[i];
		  }

		  return (o + 4 + s) * 8;
		};

		var wblk = function wblk(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
		  wbits(out, p++, final);
		  ++lf[256];

		  var _a = hTree(lf, 15),
		      dlt = _a[0],
		      mlb = _a[1];

		  var _b = hTree(df, 15),
		      ddt = _b[0],
		      mdb = _b[1];

		  var _c = lc(dlt),
		      lclt = _c[0],
		      nlc = _c[1];

		  var _d = lc(ddt),
		      lcdt = _d[0],
		      ndc = _d[1];

		  var lcfreq = new u16(19);

		  for (var i = 0; i < lclt.length; ++i) {
		    lcfreq[lclt[i] & 31]++;
		  }

		  for (var i = 0; i < lcdt.length; ++i) {
		    lcfreq[lcdt[i] & 31]++;
		  }

		  var _e = hTree(lcfreq, 7),
		      lct = _e[0],
		      mlcb = _e[1];

		  var nlcc = 19;

		  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc) {
		  }

		  var flen = bl + 5 << 3;
		  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
		  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
		  if (flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));
		  var lm, ll, dm, dl;
		  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;

		  if (dtlen < ftlen) {
		    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
		    var llm = hMap(lct, mlcb, 0);
		    wbits(out, p, nlc - 257);
		    wbits(out, p + 5, ndc - 1);
		    wbits(out, p + 10, nlcc - 4);
		    p += 14;

		    for (var i = 0; i < nlcc; ++i) {
		      wbits(out, p + 3 * i, lct[clim[i]]);
		    }

		    p += 3 * nlcc;
		    var lcts = [lclt, lcdt];

		    for (var it = 0; it < 2; ++it) {
		      var clct = lcts[it];

		      for (var i = 0; i < clct.length; ++i) {
		        var len = clct[i] & 31;
		        wbits(out, p, llm[len]), p += lct[len];
		        if (len > 15) wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;
		      }
		    }
		  } else {
		    lm = flm, ll = flt, dm = fdm, dl = fdt;
		  }

		  for (var i = 0; i < li; ++i) {
		    if (syms[i] > 255) {
		      var len = syms[i] >>> 18 & 31;
		      wbits16(out, p, lm[len + 257]), p += ll[len + 257];
		      if (len > 7) wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];
		      var dst = syms[i] & 31;
		      wbits16(out, p, dm[dst]), p += dl[dst];
		      if (dst > 3) wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];
		    } else {
		      wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];
		    }
		  }

		  wbits16(out, p, lm[256]);
		  return p + ll[256];
		};

		var deo = new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
		var et = new u8(0);

		var dflt = function dflt(dat, lvl, plvl, pre, post, lst) {
		  var s = dat.length;
		  var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);
		  var w = o.subarray(pre, o.length - post);
		  var pos = 0;

		  if (!lvl || s < 8) {
		    for (var i = 0; i <= s; i += 65535) {
		      var e = i + 65535;

		      if (e >= s) {
		        w[pos >> 3] = lst;
		      }

		      pos = wfblk(w, pos + 1, dat.subarray(i, e));
		    }
		  } else {
		    var opt = deo[lvl - 1];
		    var n = opt >>> 13,
		        c = opt & 8191;
		    var msk_1 = (1 << plvl) - 1;
		    var prev = new u16(32768),
		        head = new u16(msk_1 + 1);
		    var bs1_1 = Math.ceil(plvl / 3),
		        bs2_1 = 2 * bs1_1;

		    var hsh = function hsh(i) {
		      return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;
		    };

		    var syms = new u32(25000);
		    var lf = new u16(288),
		        df = new u16(32);
		    var lc_1 = 0,
		        eb = 0,
		        i = 0,
		        li = 0,
		        wi = 0,
		        bs = 0;

		    for (; i < s; ++i) {
		      var hv = hsh(i);
		      var imod = i & 32767,
		          pimod = head[hv];
		      prev[imod] = pimod;
		      head[hv] = imod;

		      if (wi <= i) {
		        var rem = s - i;

		        if ((lc_1 > 7000 || li > 24576) && rem > 423) {
		          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
		          li = lc_1 = eb = 0, bs = i;

		          for (var j = 0; j < 286; ++j) {
		            lf[j] = 0;
		          }

		          for (var j = 0; j < 30; ++j) {
		            df[j] = 0;
		          }
		        }

		        var l = 2,
		            d = 0,
		            ch_1 = c,
		            dif = imod - pimod & 32767;

		        if (rem > 2 && hv == hsh(i - dif)) {
		          var maxn = Math.min(n, rem) - 1;
		          var maxd = Math.min(32767, i);
		          var ml = Math.min(258, rem);

		          while (dif <= maxd && --ch_1 && imod != pimod) {
		            if (dat[i + l] == dat[i + l - dif]) {
		              var nl = 0;

		              for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl) {
		              }

		              if (nl > l) {
		                l = nl, d = dif;
		                if (nl > maxn) break;
		                var mmd = Math.min(dif, nl - 2);
		                var md = 0;

		                for (var j = 0; j < mmd; ++j) {
		                  var ti = i - dif + j + 32768 & 32767;
		                  var pti = prev[ti];
		                  var cd = ti - pti + 32768 & 32767;
		                  if (cd > md) md = cd, pimod = ti;
		                }
		              }
		            }

		            imod = pimod, pimod = prev[imod];
		            dif += imod - pimod + 32768 & 32767;
		          }
		        }

		        if (d) {
		          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
		          var lin = revfl[l] & 31,
		              din = revfd[d] & 31;
		          eb += fleb[lin] + fdeb[din];
		          ++lf[257 + lin];
		          ++df[din];
		          wi = i + l;
		          ++lc_1;
		        } else {
		          syms[li++] = dat[i];
		          ++lf[dat[i]];
		        }
		      }
		    }

		    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
		    if (!lst && pos & 7) pos = wfblk(w, pos + 1, et);
		  }

		  return slc(o, 0, pre + shft(pos) + post);
		};

		var crct = function () {
		  var t = new Int32Array(256);

		  for (var i = 0; i < 256; ++i) {
		    var c = i,
		        k = 9;

		    while (--k) {
		      c = (c & 1 && -306674912) ^ c >>> 1;
		    }

		    t[i] = c;
		  }

		  return t;
		}();

		var crc = function crc() {
		  var c = -1;
		  return {
		    p: function p(d) {
		      var cr = c;

		      for (var i = 0; i < d.length; ++i) {
		        cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;
		      }

		      c = cr;
		    },
		    d: function d() {
		      return ~c;
		    }
		  };
		};

		var dopt = function dopt(dat, opt, pre, post, st) {
		  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);
		};

		var mrg = function mrg(a, b) {
		  var o = {};

		  for (var k in a) {
		    o[k] = a[k];
		  }

		  for (var k in b) {
		    o[k] = b[k];
		  }

		  return o;
		};

		var wbytes = function wbytes(d, b, v) {
		  for (; v; ++b) {
		    d[b] = v, v >>>= 8;
		  }
		};
		function deflateSync(data, opts) {
		  return dopt(data, opts || {}, 0, 0);
		}

		var fltn = function fltn(d, p, t, o) {
		  for (var k in d) {
		    var val = d[k],
		        n = p + k,
		        op = o;
		    if (Array.isArray(val)) op = mrg(o, val[1]), val = val[0];
		    if (val instanceof u8) t[n] = [val, op];else {
		      t[n += '/'] = [new u8(0), op];
		      fltn(val, n, t, o);
		    }
		  }
		};

		var te = typeof TextEncoder != 'undefined' && new TextEncoder();
		var td = typeof TextDecoder != 'undefined' && new TextDecoder();
		var tds = 0;

		try {
		  td.decode(et, {
		    stream: true
		  });
		  tds = 1;
		} catch (e) {}
		function strToU8(str, latin1) {
		  if (latin1) {
		    var ar_1 = new u8(str.length);

		    for (var i = 0; i < str.length; ++i) {
		      ar_1[i] = str.charCodeAt(i);
		    }

		    return ar_1;
		  }

		  if (te) return te.encode(str);
		  var l = str.length;
		  var ar = new u8(str.length + (str.length >> 1));
		  var ai = 0;

		  var w = function w(v) {
		    ar[ai++] = v;
		  };

		  for (var i = 0; i < l; ++i) {
		    if (ai + 5 > ar.length) {
		      var n = new u8(ai + 8 + (l - i << 1));
		      n.set(ar);
		      ar = n;
		    }

		    var c = str.charCodeAt(i);
		    if (c < 128 || latin1) w(c);else if (c < 2048) w(192 | c >> 6), w(128 | c & 63);else if (c > 55295 && c < 57344) c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >> 18), w(128 | c >> 12 & 63), w(128 | c >> 6 & 63), w(128 | c & 63);else w(224 | c >> 12), w(128 | c >> 6 & 63), w(128 | c & 63);
		  }

		  return slc(ar, 0, ai);
		}

		var exfl = function exfl(ex) {
		  var le = 0;

		  if (ex) {
		    for (var k in ex) {
		      var l = ex[k].length;
		      if (l > 65535) err(9);
		      le += l + 4;
		    }
		  }

		  return le;
		};

		var wzh = function wzh(d, b, f, fn, u, c, ce, co) {
		  var fl = fn.length,
		      ex = f.extra,
		      col = co && co.length;
		  var exl = exfl(ex);
		  wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;
		  if (ce != null) d[b++] = 20, d[b++] = f.os;
		  d[b] = 20, b += 2;
		  d[b++] = f.flag << 1 | (c < 0 && 8), d[b++] = u && 8;
		  d[b++] = f.compression & 255, d[b++] = f.compression >> 8;
		  var dt = new Date(f.mtime == null ? Date.now() : f.mtime),
		      y = dt.getFullYear() - 1980;
		  if (y < 0 || y > 119) err(10);
		  wbytes(d, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >>> 1), b += 4;

		  if (c != -1) {
		    wbytes(d, b, f.crc);
		    wbytes(d, b + 4, c < 0 ? -c - 2 : c);
		    wbytes(d, b + 8, f.size);
		  }

		  wbytes(d, b + 12, fl);
		  wbytes(d, b + 14, exl), b += 16;

		  if (ce != null) {
		    wbytes(d, b, col);
		    wbytes(d, b + 6, f.attrs);
		    wbytes(d, b + 10, ce), b += 14;
		  }

		  d.set(fn, b);
		  b += fl;

		  if (exl) {
		    for (var k in ex) {
		      var exf = ex[k],
		          l = exf.length;
		      wbytes(d, b, +k);
		      wbytes(d, b + 2, l);
		      d.set(exf, b + 4), b += 4 + l;
		    }
		  }

		  if (col) d.set(co, b), b += col;
		  return b;
		};

		var wzf = function wzf(o, b, c, d, e) {
		  wbytes(o, b, 0x6054B50);
		  wbytes(o, b + 8, c);
		  wbytes(o, b + 10, c);
		  wbytes(o, b + 12, d);
		  wbytes(o, b + 16, e);
		};
		function zipSync(data, opts) {
		  if (!opts) opts = {};
		  var r = {};
		  var files = [];
		  fltn(data, '', r, opts);
		  var o = 0;
		  var tot = 0;

		  for (var fn in r) {
		    var _a = r[fn],
		        file = _a[0],
		        p = _a[1];
		    var compression = p.level == 0 ? 0 : 8;
		    var f = strToU8(fn),
		        s = f.length;
		    var com = p.comment,
		        m = com && strToU8(com),
		        ms = m && m.length;
		    var exl = exfl(p.extra);
		    if (s > 65535) err(11);
		    var d = compression ? deflateSync(file, p) : file,
		        l = d.length;
		    var c = crc();
		    c.p(file);
		    files.push(mrg(p, {
		      size: file.length,
		      crc: c.d(),
		      c: d,
		      f: f,
		      m: m,
		      u: s != fn.length || m && com.length != ms,
		      o: o,
		      compression: compression
		    }));
		    o += 30 + s + exl + l;
		    tot += 76 + 2 * (s + exl) + (ms || 0) + l;
		  }

		  var out = new u8(tot + 22),
		      oe = o,
		      cdl = tot - o;

		  for (var i = 0; i < files.length; ++i) {
		    var f = files[i];
		    wzh(out, f.o, f, f.f, f.u, f.c.length);
		    var badd = 30 + f.f.length + exfl(f.extra);
		    out.set(f.c, f.o + badd);
		    wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);
		  }

		  wzf(out, o, files.length, cdl, oe);
		  return out;
		}

		var ROOT_FILE_NAME = 'root';
		var header = "#usda 1.0\n(\n    customLayerData = {\n        string creator = \"PlayCanvas UsdzExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n";

		var materialListTemplate = function materialListTemplate(materials) {
		  return "\ndef \"Materials\"\n{\n    " + materials.join('\n') + "\n}\n";
		};

		var meshTemplate = function meshTemplate(faceVertexCounts, indices, normals, positions, uv0, uv1) {
		  return "\ndef \"Mesh\"\n{\n    def Mesh \"Mesh\"\n    {\n        int[] faceVertexCounts = [" + faceVertexCounts + "]\n        int[] faceVertexIndices = [" + indices + "]\n        normal3f[] normals = [" + normals + "] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [" + positions + "]\n        texCoord2f[] primvars:st = [" + uv0 + "] (\n            interpolation = \"vertex\"\n        )\n        texCoord2f[] primvars:st1 = [" + uv1 + "] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n}\n";
		};

		var meshInstanceTemplate = function meshInstanceTemplate(nodeName, meshRefPath, worldMatrix, materialRefPath) {
		  return "\ndef Xform \"" + nodeName + "\" (\n    prepend references = " + meshRefPath + "\n)\n{\n    matrix4d xformOp:transform = " + worldMatrix + "\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n    rel material:binding = " + materialRefPath + "\n}\n";
		};

		var materialValueTemplate = function materialValueTemplate(type, name, value) {
		  return "                    " + type + " inputs:" + name + " = " + value;
		};

		var UsdzExporter = function (_CoreExporter) {
		  _inheritsLoose(UsdzExporter, _CoreExporter);

		  function UsdzExporter() {
		    var _this;

		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    _this = _CoreExporter.call.apply(_CoreExporter, [this].concat(args)) || this;
		    _this.meshMap = void 0;
		    _this.materialMap = void 0;
		    _this.materials = void 0;
		    _this.textureMap = void 0;
		    _this.nodeNames = void 0;
		    _this.files = void 0;
		    return _this;
		  }

		  var _proto = UsdzExporter.prototype;

		  _proto.init = function init() {
		    this.meshMap = new Map();
		    this.textureMap = new Map();
		    this.materialMap = new Map();
		    this.materials = [];
		    this.files = {};
		    this.nodeNames = new Set();
		  };

		  _proto.done = function done() {
		    this.meshMap = null;
		    this.textureMap = null;
		    this.materialMap = null;
		    this.materials = null;
		    this.files = null;
		    this.nodeNames = null;
		  };

		  _proto.build = function build(entity, options) {
		    var _this2 = this;

		    if (options === void 0) {
		      options = {};
		    }

		    this.init();
		    this.addFile(null, ROOT_FILE_NAME);
		    var allMeshInstances = [];

		    if (entity) {
		      var renders = entity.findComponents("render");
		      renders.forEach(function (render) {
		        allMeshInstances.push.apply(allMeshInstances, render.meshInstances);
		      });
		    }

		    var rootContent = '';
		    allMeshInstances.forEach(function (meshInstance) {
		      rootContent += _this2.buildMeshInstance(meshInstance);
		    });
		    rootContent += materialListTemplate(this.materials);
		    this.addFile(null, ROOT_FILE_NAME, '', rootContent);
		    var textureOptions = {
		      maxTextureSize: options.maxTextureSize
		    };
		    var textureArray = Array.from(this.textureMap.keys());
		    var promises = [];

		    var _loop = function _loop(i) {
		      var mimeType = 'image/png' ;
		      var texture = textureArray[i];
		      var mipObject = texture._levels[0];

		      var canvas = _this2.imageToCanvas(mipObject, textureOptions);

		      promises.push(new Promise(function (resolve) {
		        return canvas.toBlob(resolve, mimeType, 1);
		      }).then(function (blob) {
		        return blob.arrayBuffer();
		      }));
		    };

		    for (var i = 0; i < textureArray.length; i++) {
		      _loop(i);
		    }

		    var finalData = Promise.all(promises).then(function (values) {
		      values.forEach(function (textureArrayBuffer, index) {
		        var texture = textureArray[index];

		        var ids = _this2.getTextureFileIds(texture);

		        _this2.files[ids.fileName] = new Uint8Array(textureArrayBuffer);
		      });

		      _this2.alignFiles();

		      var arraybuffer = zipSync(_this2.files, {
		        level: 0
		      });

		      _this2.done();

		      return arraybuffer;
		    });
		    return finalData;
		  };

		  _proto.alignFiles = function alignFiles() {
		    var offset = 0;

		    for (var filename in this.files) {
		      var file = this.files[filename];
		      var headerSize = 34 + filename.length;
		      offset += headerSize;
		      var offsetMod64 = offset & 63;

		      if (offsetMod64 !== 4) {
		        var padLength = 64 - offsetMod64;
		        var padding = new Uint8Array(padLength);
		        this.files[filename] = [file, {
		          extra: {
		            12345: padding
		          }
		        }];
		      }

		      offset = file.length;
		    }
		  };

		  _proto.getFileIds = function getFileIds(category, name, ref, extension) {
		    if (extension === void 0) {
		      extension = 'usda';
		    }

		    var fileName = (category ? category + "/" : '') + (name + "." + extension);
		    var refName = "@./" + fileName + "@</" + ref + ">";
		    return {
		      name: name,
		      fileName: fileName,
		      refName: refName
		    };
		  };

		  _proto.getTextureFileIds = function getTextureFileIds(texture) {
		    return this.getFileIds('texture', "Texture_" + texture.id, 'Texture', 'png');
		  };

		  _proto.addFile = function addFile(category, uniqueId, refName, content) {
		    if (refName === void 0) {
		      refName = '';
		    }

		    if (content === void 0) {
		      content = null;
		    }

		    var contentU8 = null;

		    if (content) {
		      content = header + '\n' + content;
		      contentU8 = strToU8(content);
		    }

		    var ids = this.getFileIds(category, uniqueId, refName);
		    this.files[ids.fileName] = contentU8;
		    return ids.refName;
		  };

		  _proto.getMaterialRef = function getMaterialRef(material) {
		    var materialRef = this.materialMap.get(material);

		    if (!materialRef) {
		      materialRef = this.buildMaterial(material);
		      this.materialMap.set(material, materialRef);
		    }

		    return materialRef;
		  };

		  _proto.getMeshRef = function getMeshRef(mesh) {
		    var meshRef = this.meshMap.get(mesh);

		    if (!meshRef) {
		      meshRef = this.buildMesh(mesh);
		      this.meshMap.set(mesh, meshRef);
		    }

		    return meshRef;
		  };

		  _proto.buildArray2 = function buildArray2(array) {
		    var components = [];
		    var count = array.length;

		    for (var i = 0; i < count; i += 2) {
		      components.push("(" + array[i] + ", " + (1 - array[i + 1]) + ")");
		    }

		    return components.join(', ');
		  };

		  _proto.buildArray3 = function buildArray3(array) {
		    var components = [];
		    var count = array.length;

		    for (var i = 0; i < count; i += 3) {
		      components.push("(" + array[i] + ", " + array[i + 1] + ", " + array[i + 2] + ")");
		    }

		    return components.join(', ');
		  };

		  _proto.buildMat4 = function buildMat4(mat) {
		    var data = mat.data;
		    var vectors = [];

		    for (var i = 0; i < 16; i += 4) {
		      vectors.push("(" + data[i] + ", " + data[i + 1] + ", " + data[i + 2] + ", " + data[i + 3] + ")");
		    }

		    return "( " + vectors.join(', ') + " )";
		  };

		  _proto.buildMaterial = function buildMaterial(material) {
		    var _this3 = this;

		    var materialName = "Material_" + material.id;
		    var materialPath = "/Materials/" + materialName;

		    var materialPropertyPath = function materialPropertyPath(property) {
		      return "<" + materialPath + property + ">";
		    };

		    var buildTexture = function buildTexture(texture, textureIds, mapType, uvChannel, tiling, offset, rotation, tintColor) {
		      return "\n                def Shader \"Transform2d_" + mapType + "\" (\n                    sdrMetadata = {\n                        string role = \"math\"\n                    }\n                )\n                {\n                    uniform token info:id = \"UsdTransform2d\"\n                    float2 inputs:in.connect = " + materialPropertyPath("/uvReader_" + uvChannel + ".outputs:result") + "\n                    float inputs:rotation = " + rotation + "\n                    float2 inputs:scale = (" + tiling.x + ", " + tiling.y + ")\n                    float2 inputs:translation = (" + offset.x + ", " + offset.y + ")\n                    float2 outputs:result\n                }\n\n                def Shader \"Texture_" + texture.id + "_" + mapType + "\"\n                {\n                    uniform token info:id = \"UsdUVTexture\"\n                    asset inputs:file = @" + textureIds.fileName + "@\n                    float2 inputs:st.connect = " + materialPropertyPath("/Transform2d_" + mapType + ".outputs:result") + "\n                    token inputs:wrapS = \"repeat\"\n                    token inputs:wrapT = \"repeat\"\n                    float4 inputs:scale = (" + tintColor.r + ", " + tintColor.g + ", " + tintColor.b + ", " + tintColor.a + ")\n                    float outputs:r\n                    float outputs:g\n                    float outputs:b\n                    float3 outputs:rgb\n                    float outputs:a\n                }\n            ";
		    };

		    var inputs = [];
		    var samplers = [];

		    var addTexture = function addTexture(textureSlot, uniform, propType, propName, valueName, handleOpacity, tintTexture) {
		      if (handleOpacity === void 0) {
		        handleOpacity = false;
		      }

		      if (tintTexture === void 0) {
		        tintTexture = false;
		      }

		      var texture = material[textureSlot];

		      if (texture) {
		        var textureIds = _this3.getTextureFileIds(texture);

		        _this3.textureMap.set(texture, textureIds.refName);

		        var channel = material[textureSlot + 'Channel'] || 'rgb';
		        var textureValue = materialPropertyPath("/" + textureIds.name + "_" + valueName + ".outputs:" + channel);
		        inputs.push(materialValueTemplate(propType, propName + ".connect", textureValue));

		        if (handleOpacity) {
		          if (material.alphaTest > 0.0) ;
		        }

		        var tiling = material[textureSlot + 'Tiling'];
		        var offset = material[textureSlot + 'Offset'];
		        var rotation = material[textureSlot + 'Rotation'];
		        var uvChannel = material[textureSlot + 'Uv'] === 1 ? 'st1' : 'st';
		        var tintColor = tintTexture && uniform ? uniform : pc.Color.WHITE;
		        samplers.push(buildTexture(texture, textureIds, valueName, uvChannel, tiling, offset, rotation, tintColor));
		      } else if (uniform) {
		        var value = propType === 'float' ? "" + uniform : "(" + uniform.r + ", " + uniform.g + ", " + uniform.b + ")";
		        inputs.push(materialValueTemplate(propType, propName, value));
		      }
		    };

		    addTexture('diffuseMap', material.diffuse, 'color3f', 'diffuseColor', 'diffuse', false, true);

		    if (material.transparent || material.alphaTest > 0.0) {
		      addTexture('opacityMap', material.opacity, 'float', 'opacity', 'opacity', true);
		    }

		    addTexture('normalMap', null, 'normal3f', 'normal', 'normal');
		    addTexture('emissiveMap', material.emissive, 'color3f', 'emissiveColor', 'emissive', false, true);
		    addTexture('aoMap', null, 'float', 'occlusion', 'occlusion');
		    addTexture('metalnessMap', material.metalness, 'float', 'metallic', 'metallic');
		    addTexture('glossMap', material.shininess / 100, 'float', 'roughness', 'roughness');
		    var materialObject = "\n            def Material \"" + materialName + "\"\n            {\n                def Shader \"PreviewSurface\"\n                {\n                    uniform token info:id = \"UsdPreviewSurface\"\n" + inputs.join('\n') + "\n                    int inputs:useSpecularWorkflow = 0\n                    token outputs:surface\n                }\n\n                token outputs:surface.connect = " + materialPropertyPath('/PreviewSurface.outputs:surface') + "\n\n                def Shader \"uvReader_st\"\n                {\n                    uniform token info:id = \"UsdPrimvarReader_float2\"\n                    token inputs:varname = \"st\"\n                    float2 inputs:fallback = (0.0, 0.0)\n                    float2 outputs:result\n                }\n\n                def Shader \"uvReader_st1\"\n                {\n                    uniform token info:id = \"UsdPrimvarReader_float2\"\n                    token inputs:varname = \"st1\"\n                    float2 inputs:fallback = (0.0, 0.0)\n                    float2 outputs:result\n                }\n\n                " + samplers.join('\n') + "\n            }\n        ";
		    this.materials.push(materialObject);
		    return materialPropertyPath('');
		  };

		  _proto.buildMesh = function buildMesh(mesh) {
		    var positions = [];
		    var indices = [];
		    var normals = [];
		    var uv0 = [];
		    var uv1 = [];
		    mesh.getVertexStream(pc.SEMANTIC_POSITION, positions);
		    mesh.getVertexStream(pc.SEMANTIC_NORMAL, normals);
		    mesh.getVertexStream(pc.SEMANTIC_TEXCOORD0, uv0);
		    mesh.getVertexStream(pc.SEMANTIC_TEXCOORD1, uv1);
		    mesh.getIndices(indices);
		    var indicesCount = indices.length || positions.length;
		    var faceVertexCounts = Array(indicesCount / 3).fill(3).join(', ');

		    if (!indices.length) {
		      for (var i = 0; i < indicesCount; i++) {
		        indices[i] = i;
		      }
		    }

		    var numVerts = positions.length / 3;
		    normals = normals.length ? normals : Array(numVerts * 3).fill(0);
		    uv0 = uv0.length ? uv0 : Array(numVerts * 2).fill(0);
		    uv1 = uv1.length ? uv1 : Array(numVerts * 2).fill(0);
		    positions = this.buildArray3(positions);
		    normals = this.buildArray3(normals);
		    uv0 = this.buildArray2(uv0);
		    uv1 = this.buildArray2(uv1);
		    var meshObject = meshTemplate(faceVertexCounts, indices, normals, positions, uv0, uv1);
		    var refPath = this.addFile('mesh', "Mesh_" + mesh.id, 'Mesh', meshObject);
		    return refPath;
		  };

		  _proto.buildMeshInstance = function buildMeshInstance(meshInstance) {
		    var meshRefPath = this.getMeshRef(meshInstance.mesh);
		    var materialRefPath = this.getMaterialRef(meshInstance.material);
		    var worldMatrix = this.buildMat4(meshInstance.node.getWorldTransform());
		    var name = meshInstance.node.name.replace(/[^a-z0-9]/gi, '_');
		    var nodeName = name;

		    while (this.nodeNames.has(nodeName)) {
		      nodeName = name + "_" + Math.random().toString(36).slice(2, 7);
		    }

		    this.nodeNames.add(nodeName);
		    return meshInstanceTemplate(nodeName, meshRefPath, worldMatrix, materialRefPath);
		  };

		  return UsdzExporter;
		}(CoreExporter);

		var ARRAY_BUFFER = 34962;
		var ELEMENT_ARRAY_BUFFER = 34963;

		var getIndexComponentType = function getIndexComponentType(indexFormat) {
		  switch (indexFormat) {
		    case pc.INDEXFORMAT_UINT8:
		      return 5121;

		    case pc.INDEXFORMAT_UINT16:
		      return 5123;

		    case pc.INDEXFORMAT_UINT32:
		      return 5125;
		  }

		  return 0;
		};

		var getComponentType = function getComponentType(dataType) {
		  switch (dataType) {
		    case pc.TYPE_INT8:
		      return 5120;

		    case pc.TYPE_UINT8:
		      return 5121;

		    case pc.TYPE_INT16:
		      return 5122;

		    case pc.TYPE_UINT16:
		      return 5123;

		    case pc.TYPE_INT32:
		      return 5124;

		    case pc.TYPE_UINT32:
		      return 5125;

		    case pc.TYPE_FLOAT32:
		      return 5126;
		  }

		  return 0;
		};

		var getAccessorType = function getAccessorType(componentCount) {
		  switch (componentCount) {
		    case 1:
		      return 'SCALAR';

		    case 2:
		      return 'VEC2';

		    case 3:
		      return 'VEC3';

		    case 4:
		      return 'VEC4';
		  }

		  return 0;
		};

		var getSemantic = function getSemantic(engineSemantic) {
		  switch (engineSemantic) {
		    case pc.SEMANTIC_POSITION:
		      return 'POSITION';

		    case pc.SEMANTIC_NORMAL:
		      return 'NORMAL';

		    case pc.SEMANTIC_TANGENT:
		      return 'TANGENT';

		    case pc.SEMANTIC_COLOR:
		      return 'COLOR_0';

		    case pc.SEMANTIC_BLENDINDICES:
		      return 'JOINTS_0';

		    case pc.SEMANTIC_BLENDWEIGHT:
		      return 'WEIGHTS_0';

		    case pc.SEMANTIC_TEXCOORD0:
		      return 'TEXCOORD_0';

		    case pc.SEMANTIC_TEXCOORD1:
		      return 'TEXCOORD_1';

		    case pc.SEMANTIC_TEXCOORD2:
		      return 'TEXCOORD_2';

		    case pc.SEMANTIC_TEXCOORD3:
		      return 'TEXCOORD_3';

		    case pc.SEMANTIC_TEXCOORD4:
		      return 'TEXCOORD_4';

		    case pc.SEMANTIC_TEXCOORD5:
		      return 'TEXCOORD_5';

		    case pc.SEMANTIC_TEXCOORD6:
		      return 'TEXCOORD_6';

		    case pc.SEMANTIC_TEXCOORD7:
		      return 'TEXCOORD_7';
		  }
		};

		var getFilter = function getFilter(filter) {
		  switch (filter) {
		    case pc.FILTER_NEAREST:
		      return 9728;

		    case pc.FILTER_LINEAR:
		      return 9729;

		    case pc.FILTER_NEAREST_MIPMAP_NEAREST:
		      return 9984;

		    case pc.FILTER_LINEAR_MIPMAP_NEAREST:
		      return 9985;

		    case pc.FILTER_NEAREST_MIPMAP_LINEAR:
		      return 9986;

		    case pc.FILTER_LINEAR_MIPMAP_LINEAR:
		      return 9987;
		  }
		};

		var getWrap = function getWrap(wrap) {
		  switch (wrap) {
		    case pc.ADDRESS_CLAMP_TO_EDGE:
		      return 33071;

		    case pc.ADDRESS_MIRRORED_REPEAT:
		      return 33648;

		    case pc.ADDRESS_REPEAT:
		      return 10497;
		  }
		};

		var textureSemantics = ['diffuseMap'];

		var GltfExporter = function (_CoreExporter) {
		  _inheritsLoose(GltfExporter, _CoreExporter);

		  function GltfExporter() {
		    return _CoreExporter.apply(this, arguments) || this;
		  }

		  var _proto = GltfExporter.prototype;

		  _proto.collectResources = function collectResources(root) {
		    var resources = {
		      buffers: [],
		      cameras: [],
		      entities: [],
		      materials: [],
		      textures: [],
		      entityMeshInstances: []
		    };
		    var materials = resources.materials,
		        buffers = resources.buffers,
		        entityMeshInstances = resources.entityMeshInstances,
		        textures = resources.textures;
		    root.forEach(function (entity) {
		      resources.entities.push(entity);
		    });

		    var collectMeshInstances = function collectMeshInstances(meshInstances) {
		      meshInstances.forEach(function (meshInstance) {
		        var material = meshInstance.material;

		        if (materials.indexOf(material) < 0) {
		          resources.materials.push(material);
		          textureSemantics.forEach(function (semantic) {
		            var texture = material[semantic];

		            if (texture && textures.indexOf(texture) < 0) {
		              textures.push(texture);
		            }
		          });
		        }

		        var node = meshInstance.node;
		        var nodeMeshInstances = entityMeshInstances.find(function (e) {
		          return e.node === node;
		        });

		        if (!nodeMeshInstances) {
		          nodeMeshInstances = {
		            node: node,
		            meshInstances: []
		          };
		          entityMeshInstances.push(nodeMeshInstances);
		        }

		        nodeMeshInstances.meshInstances.push(meshInstance);
		        var mesh = meshInstance.mesh;
		        var vertexBuffer = mesh.vertexBuffer;

		        if (buffers.indexOf(vertexBuffer) < 0) {
		          buffers.unshift(vertexBuffer);
		        }

		        var indexBuffer = mesh.indexBuffer[0];

		        if (buffers.indexOf(indexBuffer) < 0) {
		          buffers.push(indexBuffer);
		        }
		      });
		    };

		    resources.entities.forEach(function (entity) {
		      if (entity.camera) {
		        resources.cameras.push(entity.camera);
		      }

		      if (entity.render && entity.render.enabled) {
		        collectMeshInstances(entity.render.meshInstances);
		      }

		      if (entity.model && entity.model.enabled && entity.model.meshInstances) {
		        collectMeshInstances(entity.model.meshInstances);
		      }
		    });
		    return resources;
		  };

		  _proto.writeBuffers = function writeBuffers(resources, json) {
		    if (resources.buffers.length > 0) {
		      json.buffers = [];
		      var byteLength = 0;
		      resources.buffers.forEach(function (buffer) {
		        var arrayBuffer = buffer.lock();
		        byteLength += arrayBuffer.byteLength;
		      });
		      var buffer = {
		        byteLength: byteLength
		      };
		      json.buffers.push(buffer);
		    }
		  };

		  _proto.writeBufferViews = function writeBufferViews(resources, json) {
		    if (resources.buffers.length > 0) {
		      var offset = 0;
		      json.bufferViews = resources.buffers.map(function (buffer) {
		        var arrayBuffer = buffer.lock();
		        var bufferView = {
		          buffer: 0,
		          byteLength: arrayBuffer.byteLength,
		          byteOffset: offset
		        };

		        if (buffer instanceof pc.VertexBuffer) {
		          bufferView.target = ARRAY_BUFFER;
		          var format = buffer.getFormat();

		          if (format.interleaved) {
		            bufferView.byteStride = format.size;
		          }
		        } else {
		          bufferView.target = ELEMENT_ARRAY_BUFFER;
		        }

		        offset += arrayBuffer.byteLength;
		        return bufferView;
		      });
		    }
		  };

		  _proto.writeCameras = function writeCameras(resources, json) {
		    if (resources.cameras.length > 0) {
		      json.cameras = resources.cameras.map(function (cam) {
		        var projection = cam.projection;
		        var nearClip = cam.nearClip;
		        var farClip = cam.farClip;
		        var camera = {};

		        if (projection === pc.PROJECTION_ORTHOGRAPHIC) {
		          camera.type = "orthographic";
		          camera.orthographic = {
		            xmag: 1,
		            ymag: 1,
		            znear: nearClip,
		            zfar: farClip
		          };
		        } else {
		          var fov = cam.fov;
		          camera.type = "perspective";
		          camera.perspective = {
		            yfov: fov * Math.PI / 180,
		            znear: nearClip,
		            zfar: farClip
		          };
		        }

		        return camera;
		      });
		    }
		  };

		  _proto.writeMaterials = function writeMaterials(resources, json) {
		    var attachTexture = function attachTexture(material, destination, name, textureSemantic) {
		      var texture = material[textureSemantic];

		      if (texture) {
		        var textureIndex = resources.textures.indexOf(texture);
		        if (textureIndex < 0) console.logWarn("Texture " + texture.name + " wasn't collected.");
		        destination[name] = {
		          "index": textureIndex
		        };
		      }
		    };

		    if (resources.materials.length > 0) {
		      json.materials = resources.materials.map(function (mat) {
		        var name = mat.name,
		            diffuse = mat.diffuse,
		            emissive = mat.emissive,
		            opacity = mat.opacity,
		            blendType = mat.blendType,
		            cull = mat.cull;
		        var material = {
		          pbrMetallicRoughness: {}
		        };
		        var pbr = material.pbrMetallicRoughness;

		        if (name && name.length > 0) {
		          material.name = name;
		        }

		        if (!diffuse.equals(pc.Color.WHITE) || opacity !== 1) {
		          pbr.baseColorFactor = [diffuse.r, diffuse.g, diffuse.b, opacity];
		        }

		        attachTexture(mat, pbr, 'baseColorTexture', 'diffuseMap');

		        if (!emissive.equals(pc.Color.BLACK)) {
		          material.emissiveFactor = [emissive.r, emissive.g, emissive.b];
		        }

		        if (blendType === pc.BLEND_NORMAL) {
		          material.alphaMode = "BLEND";
		        }

		        if (cull === pc.CULLFACE_NONE) {
		          material.doubleSided = true;
		        }

		        return material;
		      });
		    }
		  };

		  _proto.writeNodes = function writeNodes(resources, json) {
		    if (resources.entities.length > 0) {
		      json.nodes = resources.entities.map(function (entity) {
		        var name = entity.name;
		        var t = entity.getLocalPosition();
		        var r = entity.getLocalRotation();
		        var s = entity.getLocalScale();
		        var node = {};

		        if (name && name.length > 0) {
		          node.name = name;
		        }

		        if (!t.equals(pc.Vec3.ZERO)) {
		          node.translation = [t.x, t.y, t.z];
		        }

		        if (!r.equals(pc.Quat.IDENTITY)) {
		          node.rotation = [r.x, r.y, r.z, r.w];
		        }

		        if (!s.equals(pc.Vec3.ONE)) {
		          node.scale = [s.x, s.y, s.z];
		        }

		        if (entity.camera && entity.camera.enabled) {
		          node.camera = resources.cameras.indexOf(entity.camera);
		        }

		        var entityMeshInstance = resources.entityMeshInstances.find(function (e) {
		          return e.node === entity;
		        });

		        if (entityMeshInstance) {
		          node.mesh = resources.entityMeshInstances.indexOf(entityMeshInstance);
		        }

		        if (entity.children.length > 0) {
		          node.children = [];
		          entity.children.forEach(function (child) {
		            node.children.push(resources.entities.indexOf(child));
		          });
		        }

		        return node;
		      });
		    }
		  };

		  _proto.writeMeshes = function writeMeshes(resources, json) {
		    if (resources.entityMeshInstances.length > 0) {
		      json.accessors = [];
		      json.meshes = [];
		      resources.entityMeshInstances.forEach(function (entityMeshInstances) {
		        var mesh = {
		          primitives: []
		        };
		        var meshInstances = entityMeshInstances.meshInstances;
		        meshInstances.forEach(function (meshInstance) {
		          var indexBuffer = meshInstance.mesh.indexBuffer[0];
		          var vertexBuffer = meshInstance.mesh.vertexBuffer;
		          var vertexFormat = vertexBuffer.getFormat();
		          var numVertices = vertexBuffer.getNumVertices();
		          var primitive = {
		            attributes: {},
		            material: resources.materials.indexOf(meshInstance.material)
		          };
		          mesh.primitives.push(primitive);

		          var writeAccessor = function writeAccessor(element) {
		            var accessor = {
		              bufferView: resources.buffers.indexOf(vertexBuffer),
		              byteOffset: element.offset,
		              componentType: getComponentType(element.dataType),
		              type: getAccessorType(element.numComponents),
		              count: numVertices
		            };
		            var idx = json.accessors.length;
		            json.accessors.push(accessor);
		            var semantic = getSemantic(element.name);
		            primitive.attributes[semantic] = idx;

		            if (element.name === pc.SEMANTIC_POSITION) {
		              var positions = [];
		              meshInstance.mesh.getPositions(positions);
		              var min = new pc.Vec3(),
		                  max = new pc.Vec3();
		              pc.BoundingBox.computeMinMax(positions, min, max);
		              accessor.min = [min.x, min.y, min.z];
		              accessor.max = [max.x, max.y, max.z];
		            }
		          };

		          vertexFormat.elements.forEach(writeAccessor);

		          if (indexBuffer) {
		            var ibIdx = resources.buffers.indexOf(indexBuffer);
		            var accessor = {
		              bufferView: ibIdx,
		              componentType: getIndexComponentType(indexBuffer.getFormat()),
		              count: indexBuffer.getNumIndices(),
		              type: "SCALAR"
		            };
		            json.accessors.push(accessor);
		            var idx = json.accessors.indexOf(accessor);
		            primitive.indices = idx;
		          }
		        });
		        json.meshes.push(mesh);
		      });
		    }
		  };

		  _proto.convertTextures = function convertTextures(textures, json, options) {
		    var textureOptions = {
		      maxTextureSize: options.maxTextureSize
		    };

		    for (var i = 0; i < textures.length; i++) {
		      var isRGBA = true;
		      var mimeType = isRGBA ? 'image/png' : 'image/jpeg';
		      var texture = textures[i];
		      var mipObject = texture._levels[0];
		      var canvas = this.imageToCanvas(mipObject, textureOptions);
		      var uri = canvas.toDataURL(mimeType);
		      json.images[i] = {
		        'uri': uri
		      };
		      json.samplers[i] = {
		        'minFilter': getFilter(texture.minFilter),
		        'magFilter': getFilter(texture.magFilter),
		        'wrapS': getWrap(texture.addressU),
		        'wrapT': getWrap(texture.addressV)
		      };
		      json.textures[i] = {
		        'sampler': i,
		        'source': i
		      };
		    }
		  };

		  _proto.buildJson = function buildJson(resources, options) {
		    var json = {
		      asset: {
		        version: "2.0",
		        generator: "PlayCanvas GltfExporter"
		      },
		      scenes: [{
		        nodes: [0]
		      }],
		      images: [],
		      samplers: [],
		      textures: [],
		      scene: 0
		    };
		    this.writeBuffers(resources, json);
		    this.writeBufferViews(resources, json);
		    this.writeCameras(resources, json);
		    this.writeNodes(resources, json);
		    this.writeMaterials(resources, json);
		    this.writeMeshes(resources, json);
		    this.convertTextures(resources.textures, json, options);
		    return json;
		  };

		  _proto.build = function build(entity, options) {
		    if (options === void 0) {
		      options = {};
		    }

		    var resources = this.collectResources(entity);
		    var json = this.buildJson(resources, options);
		    var jsonText = JSON.stringify(json);
		    var headerLength = 12;
		    var jsonHeaderLength = 8;
		    var jsonDataLength = jsonText.length;
		    var jsonPaddingLength = 4 - (jsonDataLength & 3) & 3;
		    var binaryHeaderLength = 8;
		    var binaryDataLength = 0;
		    resources.buffers.forEach(function (buffer) {
		      binaryDataLength += buffer.lock().byteLength;
		    });
		    binaryDataLength = pc.math.roundUp(binaryDataLength, 4);
		    var totalLength = headerLength + jsonHeaderLength + jsonDataLength + jsonPaddingLength;

		    if (binaryDataLength > 0) {
		      totalLength += binaryHeaderLength + binaryDataLength;
		    }

		    var glbBuffer = new ArrayBuffer(totalLength);
		    var glbView = new DataView(glbBuffer);
		    glbView.setUint32(0, 0x46546C67, true);
		    glbView.setUint32(4, 2, true);
		    glbView.setUint32(8, totalLength, true);
		    glbView.setUint32(12, jsonDataLength + jsonPaddingLength, true);
		    glbView.setUint32(16, 0x4E4F534A, true);
		    var offset = headerLength + jsonHeaderLength;

		    for (var i = 0; i < jsonDataLength; i++) {
		      glbView.setUint8(offset + i, jsonText.charCodeAt(i));
		    }

		    offset += jsonDataLength;

		    for (var _i = 0; _i < jsonPaddingLength; _i++) {
		      glbView.setUint8(offset + _i, 0x20);
		    }

		    offset += jsonPaddingLength;

		    if (binaryDataLength > 0) {
		      glbView.setUint32(offset, binaryDataLength, true);
		      glbView.setUint32(offset + 4, 0x004E4942, true);
		      offset += binaryHeaderLength;
		      resources.buffers.forEach(function (buffer) {
		        var srcBuffer = buffer.lock();
		        var src;

		        if (srcBuffer instanceof ArrayBuffer) {
		          src = new Uint8Array(srcBuffer);
		        } else {
		          src = new Uint8Array(srcBuffer.buffer, srcBuffer.byteOffset, srcBuffer.byteLength);
		        }

		        var dst = new Uint8Array(glbBuffer, offset, srcBuffer.byteLength);
		        dst.set(src);
		        offset += srcBuffer.byteLength;
		      });
		    }

		    return Promise.resolve(glbBuffer);
		  };

		  return GltfExporter;
		}(CoreExporter);

		exports.GltfExporter = GltfExporter;
		exports.MiniStats = MiniStats;
		exports.UsdzExporter = UsdzExporter;

		Object.defineProperty(exports, '__esModule', { value: true });

	}));
} (playcanvasExtras, playcanvasExtras.exports));

var meshopt_decoder$1 = {exports: {}};

(function (module, exports) {
	// This file is part of meshoptimizer library and is distributed under the terms of MIT License.
	// Copyright (C) 2016-2020, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)
	var MeshoptDecoder = (function() {

		// Built with clang version 11.0.0 (https://github.com/llvm/llvm-project.git 0160ad802e899c2922bc9b29564080c22eb0908c)
		// Built from meshoptimizer 0.15
		var wasm_base = "B9h9z9tFBBBF8fL9gBB9gLaaaaaFa9gEaaaB9gFaFa9gEaaaFaEMcBFFFGGGEIIILF9wFFFLEFBFKNFaFCx/IFMO/LFVK9tv9t9vq95GBt9f9f939h9z9t9f9j9h9s9s9f9jW9vq9zBBp9tv9z9o9v9wW9f9kv9j9v9kv9WvqWv94h919m9mvqBF8Z9tv9z9o9v9wW9f9kv9j9v9kv9J9u9kv94h919m9mvqBGy9tv9z9o9v9wW9f9kv9j9v9kv9J9u9kv949TvZ91v9u9jvBEn9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9P9jWBIi9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9R919hWBLn9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9F949wBKI9z9iqlBOc+x8ycGBM/qQFTa8jUUUUBCU/EBlHL8kUUUUBC9+RKGXAGCFJAI9LQBCaRKAE2BBC+gF9HQBALAEAIJHOAGlAGTkUUUBRNCUoBAG9uC/wgBZHKCUGAKCUG9JyRVAECFJRICBRcGXEXAcAF9PQFAVAFAclAcAVJAF9JyRMGXGXAG9FQBAMCbJHKC9wZRSAKCIrCEJCGrRQANCUGJRfCBRbAIRTEXGXAOATlAQ9PQBCBRISEMATAQJRIGXAS9FQBCBRtCBREEXGXAOAIlCi9PQBCBRISLMANCU/CBJAEJRKGXGXGXGXGXATAECKrJ2BBAtCKZrCEZfIBFGEBMAKhB83EBAKCNJhB83EBSEMAKAI2BIAI2BBHmCKrHYAYCE6HYy86BBAKCFJAICIJAYJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCGJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCEJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCIJAYAmJHY2BBAI2BFHmCKrHPAPCE6HPy86BBAKCLJAYAPJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCKJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCOJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCNJAYAmJHY2BBAI2BGHmCKrHPAPCE6HPy86BBAKCVJAYAPJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCcJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCMJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCSJAYAmJHm2BBAI2BEHICKrHYAYCE6HYy86BBAKCQJAmAYJHm2BBAICIrCEZHYAYCE6HYy86BBAKCfJAmAYJHm2BBAICGrCEZHYAYCE6HYy86BBAKCbJAmAYJHK2BBAICEZHIAICE6HIy86BBAKAIJRISGMAKAI2BNAI2BBHmCIrHYAYCb6HYy86BBAKCFJAICNJAYJHY2BBAmCbZHmAmCb6Hmy86BBAKCGJAYAmJHm2BBAI2BFHYCIrHPAPCb6HPy86BBAKCEJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCIJAmAYJHm2BBAI2BGHYCIrHPAPCb6HPy86BBAKCLJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCKJAmAYJHm2BBAI2BEHYCIrHPAPCb6HPy86BBAKCOJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCNJAmAYJHm2BBAI2BIHYCIrHPAPCb6HPy86BBAKCVJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCcJAmAYJHm2BBAI2BLHYCIrHPAPCb6HPy86BBAKCMJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCSJAmAYJHm2BBAI2BKHYCIrHPAPCb6HPy86BBAKCQJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCfJAmAYJHm2BBAI2BOHICIrHYAYCb6HYy86BBAKCbJAmAYJHK2BBAICbZHIAICb6HIy86BBAKAIJRISFMAKAI8pBB83BBAKCNJAICNJ8pBB83BBAICTJRIMAtCGJRtAECTJHEAS9JQBMMGXAIQBCBRISEMGXAM9FQBANAbJ2BBRtCBRKAfREEXAEANCU/CBJAKJ2BBHTCFrCBATCFZl9zAtJHt86BBAEAGJREAKCFJHKAM9HQBMMAfCFJRfAIRTAbCFJHbAG9HQBMMABAcAG9sJANCUGJAMAG9sTkUUUBpANANCUGJAMCaJAG9sJAGTkUUUBpMAMCBAIyAcJRcAIQBMC9+RKSFMCBC99AOAIlAGCAAGCA9Ly6yRKMALCU/EBJ8kUUUUBAKM+OmFTa8jUUUUBCoFlHL8kUUUUBC9+RKGXAFCE9uHOCtJAI9LQBCaRKAE2BBHNC/wFZC/gF9HQBANCbZHVCF9LQBALCoBJCgFCUFT+JUUUBpALC84Jha83EBALC8wJha83EBALC8oJha83EBALCAJha83EBALCiJha83EBALCTJha83EBALha83ENALha83EBAEAIJC9wJRcAECFJHNAOJRMGXAF9FQBCQCbAVCF6yRSABRECBRVCBRQCBRfCBRICBRKEXGXAMAcuQBC9+RKSEMGXGXAN2BBHOC/vF9LQBALCoBJAOCIrCa9zAKJCbZCEWJHb8oGIRTAb8oGBRtGXAOCbZHbAS9PQBALAOCa9zAIJCbZCGWJ8oGBAVAbyROAb9FRbGXGXAGCG9HQBABAt87FBABCIJAO87FBABCGJAT87FBSFMAEAtjGBAECNJAOjGBAECIJATjGBMAVAbJRVALCoBJAKCEWJHmAOjGBAmATjGIALAICGWJAOjGBALCoBJAKCFJCbZHKCEWJHTAtjGBATAOjGIAIAbJRIAKCFJRKSGMGXGXAbCb6QBAQAbJAbC989zJCFJRQSFMAM1BBHbCgFZROGXGXAbCa9MQBAMCFJRMSFMAM1BFHbCgBZCOWAOCgBZqROGXAbCa9MQBAMCGJRMSFMAM1BGHbCgBZCfWAOqROGXAbCa9MQBAMCEJRMSFMAM1BEHbCgBZCdWAOqROGXAbCa9MQBAMCIJRMSFMAM2BIC8cWAOqROAMCLJRMMAOCFrCBAOCFZl9zAQJRQMGXGXAGCG9HQBABAt87FBABCIJAQ87FBABCGJAT87FBSFMAEAtjGBAECNJAQjGBAECIJATjGBMALCoBJAKCEWJHOAQjGBAOATjGIALAICGWJAQjGBALCoBJAKCFJCbZHKCEWJHOAtjGBAOAQjGIAICFJRIAKCFJRKSFMGXAOCDF9LQBALAIAcAOCbZJ2BBHbCIrHTlCbZCGWJ8oGBAVCFJHtATyROALAIAblCbZCGWJ8oGBAtAT9FHmJHtAbCbZHTyRbAT9FRTGXGXAGCG9HQBABAV87FBABCIJAb87FBABCGJAO87FBSFMAEAVjGBAECNJAbjGBAECIJAOjGBMALAICGWJAVjGBALCoBJAKCEWJHYAOjGBAYAVjGIALAICFJHICbZCGWJAOjGBALCoBJAKCFJCbZCEWJHYAbjGBAYAOjGIALAIAmJCbZHICGWJAbjGBALCoBJAKCGJCbZHKCEWJHOAVjGBAOAbjGIAKCFJRKAIATJRIAtATJRVSFMAVCBAM2BBHYyHTAOC/+F6HPJROAYCbZRtGXGXAYCIrHmQBAOCFJRbSFMAORbALAIAmlCbZCGWJ8oGBROMGXGXAtQBAbCFJRVSFMAbRVALAIAYlCbZCGWJ8oGBRbMGXGXAP9FQBAMCFJRYSFMAM1BFHYCgFZRTGXGXAYCa9MQBAMCGJRYSFMAM1BGHYCgBZCOWATCgBZqRTGXAYCa9MQBAMCEJRYSFMAM1BEHYCgBZCfWATqRTGXAYCa9MQBAMCIJRYSFMAM1BIHYCgBZCdWATqRTGXAYCa9MQBAMCLJRYSFMAMCKJRYAM2BLC8cWATqRTMATCFrCBATCFZl9zAQJHQRTMGXGXAmCb6QBAYRPSFMAY1BBHMCgFZROGXGXAMCa9MQBAYCFJRPSFMAY1BFHMCgBZCOWAOCgBZqROGXAMCa9MQBAYCGJRPSFMAY1BGHMCgBZCfWAOqROGXAMCa9MQBAYCEJRPSFMAY1BEHMCgBZCdWAOqROGXAMCa9MQBAYCIJRPSFMAYCLJRPAY2BIC8cWAOqROMAOCFrCBAOCFZl9zAQJHQROMGXGXAtCb6QBAPRMSFMAP1BBHMCgFZRbGXGXAMCa9MQBAPCFJRMSFMAP1BFHMCgBZCOWAbCgBZqRbGXAMCa9MQBAPCGJRMSFMAP1BGHMCgBZCfWAbqRbGXAMCa9MQBAPCEJRMSFMAP1BEHMCgBZCdWAbqRbGXAMCa9MQBAPCIJRMSFMAPCLJRMAP2BIC8cWAbqRbMAbCFrCBAbCFZl9zAQJHQRbMGXGXAGCG9HQBABAT87FBABCIJAb87FBABCGJAO87FBSFMAEATjGBAECNJAbjGBAECIJAOjGBMALCoBJAKCEWJHYAOjGBAYATjGIALAICGWJATjGBALCoBJAKCFJCbZCEWJHYAbjGBAYAOjGIALAICFJHICbZCGWJAOjGBALCoBJAKCGJCbZCEWJHOATjGBAOAbjGIALAIAm9FAmCb6qJHICbZCGWJAbjGBAIAt9FAtCb6qJRIAKCEJRKMANCFJRNABCKJRBAECSJREAKCbZRKAICbZRIAfCEJHfAF9JQBMMCBC99AMAc6yRKMALCoFJ8kUUUUBAKM/tIFGa8jUUUUBCTlRLC9+RKGXAFCLJAI9LQBCaRKAE2BBC/+FZC/QF9HQBALhB83ENAECFJRKAEAIJC98JREGXAF9FQBGXAGCG6QBEXGXAKAE9JQBC9+bMAK1BBHGCgFZRIGXGXAGCa9MQBAKCFJRKSFMAK1BFHGCgBZCOWAICgBZqRIGXAGCa9MQBAKCGJRKSFMAK1BGHGCgBZCfWAIqRIGXAGCa9MQBAKCEJRKSFMAK1BEHGCgBZCdWAIqRIGXAGCa9MQBAKCIJRKSFMAK2BIC8cWAIqRIAKCLJRKMALCNJAICFZCGWqHGAICGrCBAICFrCFZl9zAG8oGBJHIjGBABAIjGBABCIJRBAFCaJHFQBSGMMEXGXAKAE9JQBC9+bMAK1BBHGCgFZRIGXGXAGCa9MQBAKCFJRKSFMAK1BFHGCgBZCOWAICgBZqRIGXAGCa9MQBAKCGJRKSFMAK1BGHGCgBZCfWAIqRIGXAGCa9MQBAKCEJRKSFMAK1BEHGCgBZCdWAIqRIGXAGCa9MQBAKCIJRKSFMAK2BIC8cWAIqRIAKCLJRKMABAICGrCBAICFrCFZl9zALCNJAICFZCGWqHI8oGBJHG87FBAIAGjGBABCGJRBAFCaJHFQBMMCBC99AKAE6yRKMAKM+lLKFaF99GaG99FaG99GXGXAGCI9HQBAF9FQFEXGXGX9DBBB8/9DBBB+/ABCGJHG1BB+yAB1BBHE+yHI+L+TABCFJHL1BBHK+yHO+L+THN9DBBBB9gHVyAN9DBB/+hANAN+U9DBBBBANAVyHcAc+MHMAECa3yAI+SHIAI+UAcAMAKCa3yAO+SHcAc+U+S+S+R+VHO+U+SHN+L9DBBB9P9d9FQBAN+oRESFMCUUUU94REMAGAE86BBGXGX9DBBB8/9DBBB+/Ac9DBBBB9gyAcAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMALAG86BBGXGX9DBBB8/9DBBB+/AI9DBBBB9gyAIAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMABAG86BBABCIJRBAFCaJHFQBSGMMAF9FQBEXGXGX9DBBB8/9DBBB+/ABCIJHG8uFB+yAB8uFBHE+yHI+L+TABCGJHL8uFBHK+yHO+L+THN9DBBBB9gHVyAN9DB/+g6ANAN+U9DBBBBANAVyHcAc+MHMAECa3yAI+SHIAI+UAcAMAKCa3yAO+SHcAc+U+S+S+R+VHO+U+SHN+L9DBBB9P9d9FQBAN+oRESFMCUUUU94REMAGAE87FBGXGX9DBBB8/9DBBB+/Ac9DBBBB9gyAcAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMALAG87FBGXGX9DBBB8/9DBBB+/AI9DBBBB9gyAIAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMABAG87FBABCNJRBAFCaJHFQBMMM/SEIEaE99EaF99GXAF9FQBCBREABRIEXGXGX9D/zI818/AICKJ8uFBHLCEq+y+VHKAI8uFB+y+UHO9DB/+g6+U9DBBB8/9DBBB+/AO9DBBBB9gy+SHN+L9DBBB9P9d9FQBAN+oRVSFMCUUUU94RVMAICIJ8uFBRcAICGJ8uFBRMABALCFJCEZAEqCFWJAV87FBGXGXAKAM+y+UHN9DB/+g6+U9DBBB8/9DBBB+/AN9DBBBB9gy+SHS+L9DBBB9P9d9FQBAS+oRMSFMCUUUU94RMMABALCGJCEZAEqCFWJAM87FBGXGXAKAc+y+UHK9DB/+g6+U9DBBB8/9DBBB+/AK9DBBBB9gy+SHS+L9DBBB9P9d9FQBAS+oRcSFMCUUUU94RcMABALCaJCEZAEqCFWJAc87FBGXGX9DBBU8/AOAO+U+TANAN+U+TAKAK+U+THO9DBBBBAO9DBBBB9gy+R9DB/+g6+U9DBBB8/+SHO+L9DBBB9P9d9FQBAO+oRcSFMCUUUU94RcMABALCEZAEqCFWJAc87FBAICNJRIAECIJREAFCaJHFQBMMM9JBGXAGCGrAF9sHF9FQBEXABAB8oGBHGCNWCN91+yAGCi91CnWCUUU/8EJ+++U84GBABCIJRBAFCaJHFQBMMM9TFEaCBCB8oGUkUUBHFABCEJC98ZJHBjGUkUUBGXGXAB8/BCTWHGuQBCaREABAGlCggEJCTrXBCa6QFMAFREMAEM/lFFFaGXGXAFABqCEZ9FQBABRESFMGXGXAGCT9PQBABRESFMABREEXAEAF8oGBjGBAECIJAFCIJ8oGBjGBAECNJAFCNJ8oGBjGBAECSJAFCSJ8oGBjGBAECTJREAFCTJRFAGC9wJHGCb9LQBMMAGCI9JQBEXAEAF8oGBjGBAFCIJRFAECIJREAGC98JHGCE9LQBMMGXAG9FQBEXAEAF2BB86BBAECFJREAFCFJRFAGCaJHGQBMMABMoFFGaGXGXABCEZ9FQBABRESFMAFCgFZC+BwsN9sRIGXGXAGCT9PQBABRESFMABREEXAEAIjGBAECSJAIjGBAECNJAIjGBAECIJAIjGBAECTJREAGC9wJHGCb9LQBMMAGCI9JQBEXAEAIjGBAECIJREAGC98JHGCE9LQBMMGXAG9FQBEXAEAF86BBAECFJREAGCaJHGQBMMABMMMFBCUNMIT9kBB";
		var wasm_simd = "";

		// Uses bulk-memory and simd extensions
		var detector = new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,3,2,0,0,5,3,1,0,1,12,1,0,10,22,2,12,0,65,0,65,0,65,0,252,10,0,0,11,7,0,65,0,253,15,26,11]);

		// Used to unpack wasm
		var wasmpack = new Uint8Array([32,0,65,253,3,1,2,34,4,106,6,5,11,8,7,20,13,33,12,16,128,9,116,64,19,113,127,15,10,21,22,14,255,66,24,54,136,107,18,23,192,26,114,118,132,17,77,101,130,144,27,87,131,44,45,74,156,154,70,167]);

		if (typeof WebAssembly !== 'object') {
			// This module requires WebAssembly to function
			return {
				supported: false,
			};
		}

		var wasm = wasm_base;

		if (WebAssembly.validate(detector)) {
			wasm = wasm_simd;
			console.log("Warning: meshopt_decoder is using experimental SIMD support");
		}

		var instance;

		var promise =
			WebAssembly.instantiate(unpack(wasm), {})
			.then(function(result) {
				instance = result.instance;
				instance.exports.__wasm_call_ctors();
			});

		function unpack(data) {
			var result = new Uint8Array(data.length);
			for (var i = 0; i < data.length; ++i) {
				var ch = data.charCodeAt(i);
				result[i] = ch > 96 ? ch - 71 : ch > 64 ? ch - 65 : ch > 47 ? ch + 4 : ch > 46 ? 63 : 62;
			}
			var write = 0;
			for (var i = 0; i < data.length; ++i) {
				result[write++] = (result[i] < 60) ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];
			}
			return result.buffer.slice(0, write);
		}

		function decode(fun, target, count, size, source, filter) {
			var sbrk = instance.exports.sbrk;
			var count4 = (count + 3) & ~3; // pad for SIMD filter
			var tp = sbrk(count4 * size);
			var sp = sbrk(source.length);
			var heap = new Uint8Array(instance.exports.memory.buffer);
			heap.set(source, sp);
			var res = fun(tp, count, size, sp, source.length);
			if (res == 0 && filter) {
				filter(tp, count4, size);
			}
			target.set(heap.subarray(tp, tp + count * size));
			sbrk(tp - sbrk(0));
			if (res != 0) {
				throw new Error("Malformed buffer data: " + res);
			}
		}
		var filters = {
			// legacy index-based enums for glTF
			0: "",
			1: "meshopt_decodeFilterOct",
			2: "meshopt_decodeFilterQuat",
			3: "meshopt_decodeFilterExp",
			// string-based enums for glTF
			NONE: "",
			OCTAHEDRAL: "meshopt_decodeFilterOct",
			QUATERNION: "meshopt_decodeFilterQuat",
			EXPONENTIAL: "meshopt_decodeFilterExp",
		};

		var decoders = {
			// legacy index-based enums for glTF
			0: "meshopt_decodeVertexBuffer",
			1: "meshopt_decodeIndexBuffer",
			2: "meshopt_decodeIndexSequence",
			// string-based enums for glTF
			ATTRIBUTES: "meshopt_decodeVertexBuffer",
			TRIANGLES: "meshopt_decodeIndexBuffer",
			INDICES: "meshopt_decodeIndexSequence",
		};

		return {
			ready: promise,
			supported: true,
			decodeVertexBuffer: function(target, count, size, source, filter) {
				decode(instance.exports.meshopt_decodeVertexBuffer, target, count, size, source, instance.exports[filters[filter]]);
			},
			decodeIndexBuffer: function(target, count, size, source) {
				decode(instance.exports.meshopt_decodeIndexBuffer, target, count, size, source);
			},
			decodeIndexSequence: function(target, count, size, source) {
				decode(instance.exports.meshopt_decodeIndexSequence, target, count, size, source);
			},
			decodeGltfBuffer: function(target, count, size, source, mode, filter) {
				decode(instance.exports[decoders[mode]], target, count, size, source, instance.exports[filters[filter]]);
			}
		};
	})();

	// UMD-style export
	module.exports = MeshoptDecoder;
} (meshopt_decoder$1));

var meshopt_decoder = meshopt_decoder$1.exports;

var MeshoptDecoder = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  'default': meshopt_decoder
}, [meshopt_decoder$1.exports]);

var DropHandler = /** @class */ (function () {
    function DropHandler(dropHandler) {
        var _this = this;
        this.dropHandler = dropHandler;
        // configure drag and drop
        window.addEventListener('dragstart', function (ev) {
            ev.preventDefault();
            ev.stopPropagation();
            ev.dataTransfer.effectAllowed = "all";
        }, false);
        window.addEventListener('dragover', function (ev) {
            ev.preventDefault();
            ev.stopPropagation();
            ev.dataTransfer.effectAllowed = "all";
        }, false);
        window.addEventListener('drop', function (event) { return _this.handleDrop(event); }, false);
    }
    // use webkitGetAsEntry to extract files so we can include folders
    DropHandler.prototype.handleDrop = function (event) {
        var _this = this;
        var removeCommonPrefix = function (urls) {
            var split = function (pathname) {
                var parts = pathname.split(path.delimiter);
                var base = parts[0];
                var rest = parts.slice(1).join(path.delimiter);
                return [base, rest];
            };
            while (true) {
                var parts = split(urls[0].filename);
                if (parts[1].length === 0) {
                    return;
                }
                for (var i = 1; i < urls.length; ++i) {
                    var other = split(urls[i].filename);
                    if (parts[0] !== other[0]) {
                        return;
                    }
                }
                for (var i = 0; i < urls.length; ++i) {
                    urls[i].filename = split(urls[i].filename)[1];
                }
            }
        };
        var resolveFiles = function (entries) {
            var files = [];
            entries.forEach(function (entry) {
                entry.file(function (entryFile) {
                    files.push({
                        url: URL.createObjectURL(entryFile),
                        filename: entry.fullPath.substring(1)
                    });
                    if (files.length === entries.length) {
                        // remove common prefix from files in order to support dragging in the
                        // root of a folder containing related assets
                        if (files.length > 1) {
                            removeCommonPrefix(files);
                        }
                        // keep shift in to add files to the scene
                        _this.dropHandler(files, !event.shiftKey);
                    }
                });
            });
        };
        var resolveDirectories = function (entries) {
            var awaiting = 0;
            var files = [];
            var recurse = function (entries) {
                entries.forEach(function (entry) {
                    if (entry.isFile) {
                        files.push(entry);
                    }
                    else if (entry.isDirectory) {
                        awaiting++;
                        var reader = entry.createReader();
                        reader.readEntries(function (subEntries) {
                            awaiting--;
                            recurse(subEntries);
                        });
                    }
                });
                if (awaiting === 0) {
                    resolveFiles(files);
                }
            };
            recurse(entries);
        };
        // first things first
        event.preventDefault();
        var items = event.dataTransfer.items;
        if (!items) {
            return;
        }
        var entries = [];
        for (var i = 0; i < items.length; ++i) {
            entries.push(items[i].webkitGetAsEntry());
        }
        resolveDirectories(entries);
    };
    return DropHandler;
}());

var SmoothedValue = /** @class */ (function () {
    function SmoothedValue(value, transitionTime, type) {
        this.value = value.clone();
        this.start = value.clone();
        this.target = value.clone();
        this.transitionTime = transitionTime;
        this.timer = 0;
        this.type = type;
    }
    SmoothedValue.prototype.goto = function (target) {
        this.timer = 0;
        this.start.copy(this.value);
        this.target.copy(target);
    };
    SmoothedValue.prototype.snapto = function (value) {
        this.timer = this.transitionTime;
        this.target.copy(value);
        this.snaptoPoint = value;
    };
    SmoothedValue.prototype.update = function (deltaTime) {
        if (this.bounds != null) {
            if (this.type == 1) {
                var offset = -50;
                var x = this.bounds.halfExtents.x + offset;
                this.target.x = Math.max(Math.min(x, this.target.x), -x);
                this.target.y = this.snaptoPoint.y;
                var z = this.bounds.halfExtents.z + offset;
                this.target.z = Math.max(Math.min(z, this.target.z), -z);
            }
            else if (this.type == 2) {
                //this.target = pc.Vec3.ZERO;
                this.target.y = Math.min(0, this.target.y);
                this.target.z = Math.max(Math.min(this.target.z, this.maxDistance), 150);
            }
        }
        if (this.timer < this.transitionTime) {
            this.timer = Math.min(this.timer + deltaTime, this.transitionTime);
            var n = this.timer / this.transitionTime;
            // const t = Math.sin(n * Math.PI / 2.0);        // sinosidal
            // const t = n * (2 - n);                        // quadratic
            // const t = 1 - --n * n * n * n;                // quartic
            var t = Math.pow(n - 1, 5) + 1; // quintic
            this.value.lerp(this.start, this.target, t);
        }
        else {
            this.value.copy(this.target);
        }
    };
    SmoothedValue.prototype.setBounds = function (bounds, distance) {
        this.bounds = bounds;
        this.maxDistance = distance;
    };
    return SmoothedValue;
}());
var vec = new Vec3();
var fromWorldPoint = new Vec3();
var toWorldPoint = new Vec3();
var worldDiff = new Vec3();
var OrbitCamera = /** @class */ (function () {
    function OrbitCamera(cameraNode, transitionTime) {
        this.cameraNode = cameraNode;
        this.focalPoint = new SmoothedValue(new Vec3(0, 0, 0), transitionTime, 1);
        this.azimElevDistance = new SmoothedValue(new Vec3(0, 0, 10000), transitionTime, 2);
    }
    OrbitCamera.prototype.vecToAzimElevDistance = function (vec, azimElevDistance) {
        var distance = vec.length();
        var azim = Math.atan2(-vec.x / distance, -vec.z / distance) * math$1.RAD_TO_DEG;
        var elev = Math.asin(vec.y / distance) * math$1.RAD_TO_DEG;
        azimElevDistance.set(azim, elev, distance);
    };
    // calculate the current forward vector
    OrbitCamera.prototype.calcForwardVec = function (result) {
        var ex = this.azimElevDistance.value.y * math$1.DEG_TO_RAD;
        var ey = this.azimElevDistance.value.x * math$1.DEG_TO_RAD;
        var s1 = Math.sin(-ex);
        var c1 = Math.cos(-ex);
        var s2 = Math.sin(-ey);
        var c2 = Math.cos(-ey);
        result.set(-c1 * s2, s1, c1 * c2);
    };
    OrbitCamera.prototype.update = function (deltaTime) {
        // update underlying values
        this.focalPoint.update(deltaTime);
        this.azimElevDistance.update(deltaTime);
        var aed = this.azimElevDistance.value;
        //console.log(this.focalPoint.value)
        //console.log(aed);
        this.calcForwardVec(vec);
        vec.mulScalar(aed.z);
        vec.add(this.focalPoint.value);
        this.cameraNode.setLocalPosition(vec);
        this.cameraNode.setLocalEulerAngles(aed.y, aed.x, 0);
    };
    OrbitCamera.prototype.init = function (bounds, distance) {
        this.sceneBounds = bounds;
        this.maxDistance = distance;
        this.focalPoint.setBounds(bounds, distance);
        this.azimElevDistance.setBounds(bounds, distance);
    };
    return OrbitCamera;
}());
// OrbitCameraInputMouse
var OrbitCameraInputMouse = /** @class */ (function () {
    function OrbitCameraInputMouse(app, orbitCamera) {
        var _this = this;
        this.orbitSensitivity = 0.3;
        this.distanceSensitivity = 0.4;
        this.lookButtonDown = false;
        this.panButtonDown = false;
        this.lastPoint = new Vec2();
        this.onMouseOutFunc = function () {
            _this.onMouseOut();
        };
        this.app = app;
        this.orbitCamera = orbitCamera;
        this.app.mouse.on(EVENT_MOUSEDOWN, this.onMouseDown, this);
        this.app.mouse.on(EVENT_MOUSEUP, this.onMouseUp, this);
        this.app.mouse.on(EVENT_MOUSEMOVE, this.onMouseMove, this);
        this.app.mouse.on(EVENT_MOUSEWHEEL, this.onMouseWheel, this);
        // Listen to when the mouse travels out of the window
        window.addEventListener('mouseout', this.onMouseOutFunc, false);
        // Disabling the context menu stops the browser displaying a menu when
        // you right-click the page
        this.app.mouse.disableContextMenu();
    }
    OrbitCameraInputMouse.prototype.destroy = function () {
        this.app.mouse.off(EVENT_MOUSEDOWN, this.onMouseDown, this);
        this.app.mouse.off(EVENT_MOUSEUP, this.onMouseUp, this);
        this.app.mouse.off(EVENT_MOUSEMOVE, this.onMouseMove, this);
        this.app.mouse.off(EVENT_MOUSEWHEEL, this.onMouseWheel, this);
        window.removeEventListener('mouseout', this.onMouseOutFunc, false);
    };
    OrbitCameraInputMouse.prototype.pan = function (screenPoint) {
        // For panning to work at any zoom level, we use screen point to world projection
        // to work out how far we need to pan the pivotEntity in world space
        var camera = this.orbitCamera.cameraNode.camera;
        var distance = this.orbitCamera.azimElevDistance.value.z;
        camera.screenToWorld(screenPoint.x, screenPoint.y, distance, fromWorldPoint);
        camera.screenToWorld(this.lastPoint.x, this.lastPoint.y, distance, toWorldPoint);
        worldDiff.sub2(toWorldPoint, fromWorldPoint);
        worldDiff.add(this.orbitCamera.focalPoint.target);
        this.orbitCamera.focalPoint.goto(worldDiff);
    };
    OrbitCameraInputMouse.prototype.onMouseDown = function (event) {
        switch (event.button) {
            case MOUSEBUTTON_LEFT:
                this.lookButtonDown = true;
                break;
            case MOUSEBUTTON_MIDDLE:
            case MOUSEBUTTON_RIGHT:
                this.panButtonDown = true;
                break;
        }
    };
    OrbitCameraInputMouse.prototype.onMouseUp = function (event) {
        switch (event.button) {
            case MOUSEBUTTON_LEFT:
                this.lookButtonDown = false;
                break;
            case MOUSEBUTTON_MIDDLE:
            case MOUSEBUTTON_RIGHT:
                this.panButtonDown = false;
                break;
        }
    };
    OrbitCameraInputMouse.prototype.onMouseMove = function (event) {
        if (this.lookButtonDown) {
            vec.copy(this.orbitCamera.azimElevDistance.target);
            vec.y -= event.dy * this.orbitSensitivity;
            vec.x -= event.dx * this.orbitSensitivity;
            this.orbitCamera.azimElevDistance.goto(vec);
        }
        else if (this.panButtonDown) {
            this.pan(event);
        }
        this.lastPoint.set(event.x, event.y);
    };
    OrbitCameraInputMouse.prototype.onMouseWheel = function (event) {
        vec.copy(this.orbitCamera.azimElevDistance.target);
        vec.z -= event.wheelDelta * -2 * this.distanceSensitivity * (vec.z * 0.1);
        this.orbitCamera.azimElevDistance.goto(vec);
        event.event.preventDefault();
    };
    OrbitCameraInputMouse.prototype.onMouseOut = function () {
        this.lookButtonDown = false;
        this.panButtonDown = false;
    };
    return OrbitCameraInputMouse;
}());
// OrbitCameraInputTouch
var OrbitCameraInputTouch = /** @class */ (function () {
    function OrbitCameraInputTouch(app, orbitCamera) {
        this.orbitSensitivity = 0.3;
        this.distanceSensitivity = 0.4;
        this.lastTouchPoint = new Vec2();
        this.lastPinchMidPoint = new Vec2();
        this.lastPinchDistance = 0;
        this.pinchMidPoint = new Vec2();
        this.app = app;
        this.orbitCamera = orbitCamera;
        if (this.app.touch) {
            // Use the same callback for the touchStart, touchEnd and touchCancel events as they
            // all do the same thing which is to deal the possible multiple touches to the screen
            this.app.touch.on(EVENT_TOUCHSTART, this.onTouchStartEndCancel, this);
            this.app.touch.on(EVENT_TOUCHEND, this.onTouchStartEndCancel, this);
            this.app.touch.on(EVENT_TOUCHCANCEL, this.onTouchStartEndCancel, this);
            this.app.touch.on(EVENT_TOUCHMOVE, this.onTouchMove, this);
        }
    }
    OrbitCameraInputTouch.prototype.destroy = function () {
        this.app.touch.off(EVENT_TOUCHSTART, this.onTouchStartEndCancel, this);
        this.app.touch.off(EVENT_TOUCHEND, this.onTouchStartEndCancel, this);
        this.app.touch.off(EVENT_TOUCHCANCEL, this.onTouchStartEndCancel, this);
        this.app.touch.off(EVENT_TOUCHMOVE, this.onTouchMove, this);
    };
    OrbitCameraInputTouch.prototype.getPinchDistance = function (pointA, pointB) {
        // Return the distance between the two points
        var dx = pointA.x - pointB.x;
        var dy = pointA.y - pointB.y;
        return Math.sqrt((dx * dx) + (dy * dy));
    };
    OrbitCameraInputTouch.prototype.calcMidPoint = function (pointA, pointB, result) {
        result.set(pointB.x - pointA.x, pointB.y - pointA.y);
        result.mulScalar(0.5);
        result.x += pointA.x;
        result.y += pointA.y;
    };
    OrbitCameraInputTouch.prototype.onTouchStartEndCancel = function (event) {
        // We only care about the first touch for camera rotation. As the user touches the screen,
        // we stored the current touch position
        var touches = event.touches;
        if (touches.length === 1) {
            this.lastTouchPoint.set(touches[0].x, touches[0].y);
        }
        else if (touches.length === 2) {
            // If there are 2 touches on the screen, then set the pinch distance
            this.lastPinchDistance = this.getPinchDistance(touches[0], touches[1]);
            this.calcMidPoint(touches[0], touches[1], this.lastPinchMidPoint);
        }
    };
    OrbitCameraInputTouch.prototype.pan = function (midPoint) {
        // For panning to work at any zoom level, we use screen point to world projection
        // to work out how far we need to pan the pivotEntity in world space
        var camera = this.orbitCamera.cameraNode.camera;
        var distance = this.orbitCamera.azimElevDistance.target.z;
        camera.screenToWorld(midPoint.x, midPoint.y, distance, fromWorldPoint);
        camera.screenToWorld(this.lastPinchMidPoint.x, this.lastPinchMidPoint.y, distance, toWorldPoint);
        worldDiff.sub2(toWorldPoint, fromWorldPoint);
        worldDiff.add(this.orbitCamera.focalPoint.target);
        this.orbitCamera.focalPoint.goto(worldDiff);
    };
    OrbitCameraInputTouch.prototype.onTouchMove = function (event) {
        var pinchMidPoint = this.pinchMidPoint;
        var aed = this.orbitCamera.azimElevDistance.target.clone();
        // We only care about the first touch for camera rotation. Work out the difference moved since the last event
        // and use that to update the camera target position
        var touches = event.touches;
        if (touches.length === 1) {
            var touch = touches[0];
            aed.y -= (touch.y - this.lastTouchPoint.y) * this.orbitSensitivity;
            aed.x -= (touch.x - this.lastTouchPoint.x) * this.orbitSensitivity;
            this.orbitCamera.azimElevDistance.goto(aed);
            this.lastTouchPoint.set(touch.x, touch.y);
        }
        else if (touches.length === 2) {
            // Calculate the difference in pinch distance since the last event
            var currentPinchDistance = this.getPinchDistance(touches[0], touches[1]);
            var diffInPinchDistance = currentPinchDistance - this.lastPinchDistance;
            this.lastPinchDistance = currentPinchDistance;
            aed.z -= (diffInPinchDistance * this.distanceSensitivity * 0.1) * (aed.z * 0.1);
            this.orbitCamera.azimElevDistance.goto(aed);
            // Calculate pan difference
            this.calcMidPoint(touches[0], touches[1], pinchMidPoint);
            this.pan(pinchMidPoint);
            this.lastPinchMidPoint.copy(pinchMidPoint);
        }
    };
    return OrbitCameraInputTouch;
}());

// model filename extensions
var modelExtensions = ['.gltf', '.glb'];
var defaultSceneBounds = new BoundingBox(new Vec3(0, 1, 0), new Vec3(1, 1, 1));
var Viewer = /** @class */ (function () {
    function Viewer(canvas, observer) {
        var _this = this;
        this.loadTimestamp = null;
        this.canvas = canvas;
        this.observer = observer;
        this.init_app();
        this.init_skyBox();
        this.init_object();
        this.init_camera();
        this.init_light();
        this.init_dropHandler();
        this.init_stats();
        // Create Post-Process Component
        var assets = {
            "fxaa": new Asset('fxaa', 'script', { url: getAssetPath('effect/fxaa.js') }),
            'bloom': new Asset('bloom', 'script', { url: getAssetPath('effect/bloom.js') }),
            'brightnesscontrast': new Asset('brightnesscontrast', 'script', { url: getAssetPath('effect/brightnesscontrast.js') }),
            'huesaturation': new Asset('huesaturation', 'script', { url: getAssetPath('effect/huesaturation.js') }),
            'vignette': new Asset('vignette', 'script', { url: getAssetPath('effect/vignette.js') }),
            'bokeh': new Asset('bokeh', 'script', { url: getAssetPath('effect/bokeh.js') }),
            'ssao': new Asset('ssao', 'script', { url: getAssetPath('effect/ssao.js') })
        };
        var assetListLoader = new AssetListLoader(Object.values(assets), this.app.assets);
        assetListLoader.load(function () {
            var camera = _this.camera;
            camera.addComponent("script");
            Object.keys(observer.get('scripts')).forEach(function (key) {
                camera.script.create(key, {
                    attributes: observer.get("scripts.".concat(key))
                });
            });
            var controlEvents = {
                // bloom
                'scripts.bloom.bloomIntensity': _this.setBloomIntensity.bind(_this),
                'scripts.bloom.bloomThreshold': _this.setBloomThreshold.bind(_this),
                'scripts.bloom.blurAmount': _this.setBlurAmount.bind(_this),
                // color adjust
                'scripts.brightnesscontrast.brightness': _this.setBrightness.bind(_this),
                'scripts.brightnesscontrast.contrast': _this.setContrast.bind(_this),
                'scripts.huesaturation.hue': _this.setHue.bind(_this),
                'scripts.huesaturation.saturation': _this.setSaturation.bind(_this),
                // dof
                'scripts.bokeh.maxBlur': _this.setBokehMaxBlur.bind(_this),
                'scripts.bokeh.aperture': _this.setBokehAperture.bind(_this),
                // vignette
                'scripts.vignette.offset': _this.setVignetteOffset.bind(_this),
                'scripts.vignette.darkness': _this.setVignetteDarkness.bind(_this),
                // ssao
                'scripts.ssao.radius': _this.setSSAORadius.bind(_this),
                'scripts.ssao.samples': _this.setSSAOSamples.bind(_this),
                'scripts.ssao.brightness': _this.setSSAOBrightness.bind(_this),
                'scripts.ssao.downscale': _this.setSSAODownscale.bind(_this)
            };
            // register control events
            Object.keys(controlEvents).forEach(function (e) {
                observer.on("".concat(e, ":set"), controlEvents[e]);
                observer.set(e, observer.get(e), false, false, true);
            });
            observer.set('scripts.fxaa.enabled', observer.get('scripts.fxaa.enabled'), false, false, true);
            observer.set('scripts.ssao.enabled', observer.get('scripts.ssao.enabled'), false, false, true);
            observer.set('scripts.bloom.enabled', observer.get('scripts.bloom.enabled'), false, false, true);
            observer.set('scripts.brightnesscontrast.enabled', observer.get('scripts.brightnesscontrast.enabled'), false, false, true);
            observer.set('scripts.huesaturation.enabled', observer.get('scripts.huesaturation.enabled'), false, false, true);
            observer.set('scripts.bokeh.enabled', observer.get('scripts.bokeh.enabled'), false, false, true);
            observer.set('scripts.vignette.enabled', observer.get('scripts.vignette.enabled'), false, false, true);
            var stateEvents = {
                'show.postprocess': _this.setPostProcessEnabled.bind(_this),
                // fxaa
                'scripts.fxaa.enabled': _this.setFxaaEnabled.bind(_this),
                // bloom
                'scripts.bloom.enabled': _this.setBloomEnabled.bind(_this),
                // // color adjust
                'scripts.brightnesscontrast.enabled': _this.setBrightnessContrastEnabled.bind(_this),
                'scripts.huesaturation.enabled': _this.setHueSaturationEnabled.bind(_this),
                // dof
                'scripts.bokeh.enabled': _this.setBokehEnabled.bind(_this),
                // // vignette
                'scripts.vignette.enabled': _this.setVignetteEnabled.bind(_this),
                //  // ssao
                'scripts.ssao.enabled': _this.setSSAOEnabled.bind(_this)
            };
            // register control events
            Object.keys(stateEvents).forEach(function (e) {
                observer.on("".concat(e, ":set"), stateEvents[e]);
            });
            observer.set('show.postprocess', observer.get('show.postprocess'), false, false, true);
            observer.on('canvasResized', function () {
                _this.resizeCanvas();
            });
            _this.resizeCanvas();
            _this.app.start();
        });
    }
    Viewer.prototype.init_app = function () {
        var canvas = this.canvas;
        // create the application
        var app = this.app = new Application(canvas, {
            mouse: new Mouse(canvas),
            touch: new TouchDevice(canvas),
            graphicsDeviceOptions: {
                preferWebGl2: true,
                alpha: true,
                // the following aren't needed since we're rendering to an offscreen render target
                // and would only result in extra memory usage.
                antialias: true,
                depth: true,
                preserveDrawingBuffer: false
            }
        });
        app.autoRender = false;
        this.prevCameraMat = new Mat4();
    };
    Viewer.prototype.init_camera = function () {
        var _this = this;
        var app = this.app;
        var observer = this.observer;
        // Create Camera Entity
        var camera = this.camera = new Entity("Camera");
        camera.addComponent("camera", {
            fov: 45,
            frustumCulling: true,
            clearColor: new Color(0, 0, 0, 0)
        });
        //camera.camera.requestSceneColorMap(true);
        camera.camera.requestSceneDepthMap(true);
        // Create OrbitCamera Component
        this.orbitCamera = new OrbitCamera(camera, 0.25);
        this.orbitCameraInputMouse = new OrbitCameraInputMouse(app, this.orbitCamera);
        this.orbitCameraInputTouch = new OrbitCameraInputTouch(app, this.orbitCamera);
        this.orbitCamera.focalPoint.snapto(new Vec3(0, 1, 0));
        // Add 
        this.app.root.addChild(camera);
        // store app things
        this.cameraFocusBBox = null;
        this.cameraPosition = null;
        var controlEvents = {
            'show.fov': this.setFov.bind(this),
        };
        // register control events
        Object.keys(controlEvents).forEach(function (e) {
            observer.on("".concat(e, ":set"), controlEvents[e]);
            observer.set(e, _this.observer.get(e), false, false, true);
        });
    };
    Viewer.prototype.focusCamera = function () {
        var camera = this.camera.camera;
        var bbox = this.calcSceneBounds();
        if (this.cameraFocusBBox) {
            var intersection = Viewer.calcBoundingBoxIntersection(this.cameraFocusBBox, bbox);
            if (intersection) {
                var len1 = bbox.halfExtents.length();
                var len2 = this.cameraFocusBBox.halfExtents.length();
                var len3 = intersection.halfExtents.length();
                if ((Math.abs(len3 - len1) / len1 < 0.1) &&
                    (Math.abs(len3 - len2) / len2 < 0.1)) {
                    this.renderNextFrame();
                    return;
                }
            }
        }
        // calculate scene bounding box
        var radius = bbox.halfExtents.length();
        //const distance = (radius * 1.4) / Math.sin(0.5 * camera.fov * camera.aspectRatio  * pc.math.DEG_TO_RAD);
        var distance = (radius * 1.1) / Math.sin(0.5 * camera.fov * math$1.DEG_TO_RAD) / camera.aspectRatio;
        if (this.cameraPosition) {
            var vec = bbox.center.clone().sub(this.cameraPosition);
            this.orbitCamera.vecToAzimElevDistance(vec, vec);
            this.orbitCamera.azimElevDistance.snapto(vec);
            this.cameraPosition = null;
        }
        else {
            var aed = this.orbitCamera.azimElevDistance.target.clone();
            aed.x = 0;
            aed.y = -30;
            aed.z = distance;
            this.orbitCamera.azimElevDistance.snapto(aed);
        }
        this.sceneBounds = bbox;
        var v = new Vec3(Math.round((this.sceneBounds.halfExtents.x * 2) * 100) / 100, Math.round((this.sceneBounds.halfExtents.y * 2) * 100) / 100, Math.round((this.sceneBounds.halfExtents.z * 2) * 100) / 100);
        this.observer.set('scene.bounds', v.toString());
        this.orbitCamera.init(bbox, distance * 1.3);
        this.orbitCamera.focalPoint.snapto(Vec3.ZERO);
        camera.nearClip = distance / 100;
        camera.farClip = distance * 2;
        var light = this.light;
        light.light.shadowDistance = distance * 2;
        this.cameraFocusBBox = bbox;
        this.prevCameraMat.copy(this.camera.getWorldTransform());
        this.resizeCanvas();
        this.app.on('update', this.update, this);
    };
    Viewer.prototype.calcSceneBounds = function () {
        return this.meshInstances.length ?
            this.calcMeshBoundingBox(this.meshInstances) :
            (this.sceneRoot.children.length ?
                this.calcHierBoundingBox(this.sceneRoot) : defaultSceneBounds);
    };
    // calculate the bounding box of the given mesh
    Viewer.prototype.calcMeshBoundingBox = function (meshInstances) {
        var bbox = new BoundingBox();
        for (var i = 0; i < meshInstances.length; ++i) {
            if (i === 0) {
                bbox.copy(meshInstances[i].aabb);
            }
            else {
                bbox.add(meshInstances[i].aabb);
            }
        }
        return bbox;
    };
    // calculate the bounding box of the graph-node hierarchy
    Viewer.prototype.calcHierBoundingBox = function (rootNode) {
        var position = rootNode.getPosition();
        var min_x = position.x;
        var min_y = position.y;
        var min_z = position.z;
        var max_x = position.x;
        var max_y = position.y;
        var max_z = position.z;
        var recurse = function (node) {
            var p = node.getPosition();
            if (p.x < min_x)
                min_x = p.x;
            else if (p.x > max_x)
                max_x = p.x;
            if (p.y < min_y)
                min_y = p.y;
            else if (p.y > max_y)
                max_y = p.y;
            if (p.z < min_z)
                min_z = p.z;
            else if (p.z > max_z)
                max_z = p.z;
            for (var i = 0; i < node.children.length; ++i) {
                recurse(node.children[i]);
            }
        };
        recurse(rootNode);
        var result = new BoundingBox();
        result.setMinMax(new Vec3(min_x, min_y, min_z), new Vec3(max_x, max_y, max_z));
        return result;
    };
    Viewer.prototype.init_light = function () {
        var _this = this;
        var app = this.app;
        // create the light
        var light = this.light = new Entity();
        var lightColor = new Color(1, 1, 1);
        var intensity = 1;
        var rotation = new Vec3(45, 30, 0);
        light.addComponent("light", {
            type: "directional",
            color: lightColor,
            castShadows: true,
            intensity: intensity,
            shadowBias: 0.2,
            shadowDistance: 5,
            normalOffsetBias: 0.05,
            shadowResolution: 2048
        });
        light.setLocalEulerAngles(rotation);
        app.root.addChild(light);
        // const sublight = this.sublight = new pc.Entity();
        // sublight.addComponent("light", {
        //     type: "directional",
        //     color: lightColor,
        //     castShadows: false,
        //     intensity: intensity
        // });
        // sublight.setLocalEulerAngles(rotation);
        // app.root.addChild(sublight);
        var controlEvents = {
            // main light
            'lighting.mainLight.intencity': this.setMainLightingIntencity.bind(this),
            'lighting.mainLight.color_r': this.setMainLightingColor_r.bind(this),
            'lighting.mainLight.color_g': this.setMainLightingColor_g.bind(this),
            'lighting.mainLight.color_b': this.setMainLightingColor_b.bind(this),
            'lighting.mainLight.rotation_x': this.setMainLightingRotation_x.bind(this),
            'lighting.mainLight.rotation_y': this.setMainLightingRotation_y.bind(this),
            'lighting.mainLight.rotation_z': this.setMainLightingRotation_z.bind(this),
            'lighting.mainLight.shadow': this.setMainLightShadow.bind(this),
            'lighting.mainLight.shadowResolution': this.setMainLightShadowResulution.bind(this),
            'lighting.mainLight.shadowIntencity': this.setMainLightShadowIntencity.bind(this),
            // main light
            // 'lighting.subLight.intencity': this.setSubLightingIntencity.bind(this),
            // 'lighting.subLight.color_r': this.setSubLightingColor_r.bind(this),
            // 'lighting.subLight.color_g': this.setSubLightingColor_g.bind(this),
            // 'lighting.subLight.color_b': this.setSubLightingColor_b.bind(this),
            // 'lighting.subLight.rotation_x': this.setSubLightingRotation_x.bind(this),
            // 'lighting.subLight.rotation_y': this.setSubLightingRotation_y.bind(this),
            // 'lighting.subLight.rotation_z': this.setSubLightingRotation_z.bind(this)
        };
        // register control events
        Object.keys(controlEvents).forEach(function (e) {
            _this.observer.on("".concat(e, ":set"), controlEvents[e]);
            _this.observer.set(e, _this.observer.get(e), false, false, true);
        });
    };
    Viewer.prototype.init_skyBox = function () {
        var _this = this;
        var observer = this.observer;
        this.skyboxLoaded = false;
        this.setTonemapping(observer.get('lighting.tonemapping'));
        this.setBackgroundColor(observer.get('lighting.env.backgroundColor'));
        var controlEvents = {
            // tone
            'lighting.tonemapping': this.setTonemapping.bind(this),
            // env
            'lighting.env.value': function (value) {
                if (value && value !== 'None') {
                    _this.loadFiles([{ url: value, filename: value }]);
                }
                else {
                    _this.clearSkybox();
                }
            },
            'lighting.env.skyboxMip': this.setSkyboxMip.bind(this),
            'lighting.env.exposure': this.setEnvExposure.bind(this),
            'lighting.env.backgroundColor': this.setBackgroundColor.bind(this),
            'lighting.env.rotation': this.setEnvRotation.bind(this),
        };
        // register control events
        Object.keys(controlEvents).forEach(function (e) {
            observer.on("".concat(e, ":set"), controlEvents[e]);
            observer.set(e, observer.get(e), false, false, true);
        });
    };
    Viewer.prototype.clearSkybox = function () {
        this.app.scene.envAtlas = null;
        this.app.scene.setSkybox(null);
        this.skyboxLoaded = false;
        this.renderNextFrame();
    };
    // initialize the faces and prefiltered lighting data from the given
    // skybox texture, which is either a cubemap or equirect texture.
    Viewer.prototype.initSkyboxFromTextureNew = function (env) {
        var skybox = EnvLighting.generateSkyboxCubemap(env);
        var lighting = EnvLighting.generateLightingSource(env);
        // The second options parameter should not be necessary but the TS declarations require it for now
        var envAtlas = EnvLighting.generateAtlas(lighting, {});
        lighting.destroy();
        this.app.scene.envAtlas = envAtlas;
        this.app.scene.skybox = skybox;
    };
    // initialize the faces and prefiltered lighting data from the given
    // skybox texture, which is either a cubemap or equirect texture.
    Viewer.prototype.initSkyboxFromTexture = function (skybox) {
        if (EnvLighting) {
            this.renderNextFrame();
            return this.initSkyboxFromTextureNew(skybox);
        }
        var app = this.app;
        var device = app.graphicsDevice;
        var createCubemap = function (size) {
            return new Texture(device, {
                name: "skyboxFaces-".concat(size),
                cubemap: true,
                width: size,
                height: size,
                type: TEXTURETYPE_RGBM,
                addressU: ADDRESS_CLAMP_TO_EDGE,
                addressV: ADDRESS_CLAMP_TO_EDGE,
                fixCubemapSeams: true,
                mipmaps: false
            });
        };
        var cubemaps = [];
        cubemaps.push(EnvLighting.generateSkyboxCubemap(skybox));
        var lightingSource = EnvLighting.generateLightingSource(skybox);
        // create top level
        var top = createCubemap(128);
        reprojectTexture(lightingSource, top, {
            numSamples: 1
        });
        cubemaps.push(top);
        // generate prefiltered lighting data
        var sizes = [128, 64, 32, 16, 8, 4];
        var specPower = [1, 512, 128, 32, 8, 2];
        for (var i = 1; i < sizes.length; ++i) {
            var level = createCubemap(sizes[i]);
            reprojectTexture(lightingSource, level, {
                numSamples: 1024,
                specularPower: specPower[i],
                distribution: 'ggx'
            });
            cubemaps.push(level);
        }
        lightingSource.destroy();
        // assign the textures to the scene
        app.scene.setSkybox(cubemaps);
        this.renderNextFrame();
    };
    // load the image files into the skybox. this function supports loading a single equirectangular
    // skybox image or 6 cubemap faces.
    Viewer.prototype.loadSkybox = function (files) {
        var _this = this;
        var app = this.app;
        if (files.length !== 6) {
            // load equirectangular skybox
            var textureAsset_1 = new Asset('skybox_equi', 'texture', {
                url: files[0].url,
                filename: files[0].filename
            });
            textureAsset_1.ready(function () {
                var texture = textureAsset_1.resource;
                if (texture.type === TEXTURETYPE_DEFAULT && texture.format === PIXELFORMAT_R8_G8_B8_A8) {
                    // assume RGBA data (pngs) are RGBM
                    texture.type = TEXTURETYPE_RGBM;
                }
                _this.initSkyboxFromTexture(texture);
            });
            app.assets.add(textureAsset_1);
            app.assets.load(textureAsset_1);
        }
        else {
            // sort files into the correct order based on filename
            var names_1 = [
                ['posx', 'negx', 'posy', 'negy', 'posz', 'negz'],
                ['px', 'nx', 'py', 'ny', 'pz', 'nz'],
                ['right', 'left', 'up', 'down', 'front', 'back'],
                ['right', 'left', 'top', 'bottom', 'forward', 'backward'],
                ['0', '1', '2', '3', '4', '5']
            ];
            var getOrder_1 = function (filename) {
                var fn = filename.toLowerCase();
                for (var i = 0; i < names_1.length; ++i) {
                    var nameList = names_1[i];
                    for (var j = 0; j < nameList.length; ++j) {
                        if (fn.indexOf(nameList[j] + '.') !== -1) {
                            return j;
                        }
                    }
                }
                return 0;
            };
            var sortPred = function (first, second) {
                var firstOrder = getOrder_1(first.filename);
                var secondOrder = getOrder_1(second.filename);
                return firstOrder < secondOrder ? -1 : (secondOrder < firstOrder ? 1 : 0);
            };
            files.sort(sortPred);
            // construct an asset for each cubemap face
            var faceAssets = files.map(function (file, index) {
                var faceAsset = new Asset('skybox_face' + index, 'texture', file);
                app.assets.add(faceAsset);
                app.assets.load(faceAsset);
                return faceAsset;
            });
            // construct the cubemap asset
            var cubemapAsset_1 = new Asset('skybox_cubemap', 'cubemap', null, {
                textures: faceAssets.map(function (faceAsset) { return faceAsset.id; })
            });
            cubemapAsset_1.loadFaces = true;
            cubemapAsset_1.on('load', function () {
                _this.initSkyboxFromTexture(cubemapAsset_1.resource);
            });
            app.assets.add(cubemapAsset_1);
            app.assets.load(cubemapAsset_1);
        }
        this.skyboxLoaded = true;
        this.renderNextFrame();
    };
    Viewer.prototype.init_dropHandler = function () {
        var _this = this;
        var app = this.app;
        var canvas = this.canvas;
        // monkeypatch the mouse and touch input devices to ignore touch events
        // when they don't originate from the canvas.
        var origMouseHandler = app.mouse._moveHandler;
        app.mouse.detach();
        app.mouse._moveHandler = function (event) {
            if (event.target === canvas) {
                origMouseHandler(event);
            }
        };
        app.mouse.attach(canvas);
        var origTouchHandler = app.touch._moveHandler;
        app.touch.detach();
        app.touch._moveHandler = function (event) {
            if (event.target === canvas) {
                origTouchHandler(event);
            }
        };
        app.touch.attach(canvas);
        // create drop handler
        this.dropHandler = new DropHandler(function (files, resetScene) {
            _this.loadFiles(files, resetScene);
            if (resetScene) {
                _this.observer.set('glbUrl', '');
            }
        });
        app.on('frameend', this.onFrameend, this);
        // Set the canvas to fill the window and automatically change resolution to be the same as the canvas size
        var canvasSize = this.getCanvasSize();
        app.setCanvasFillMode(FILLMODE_NONE, canvasSize.width, canvasSize.height);
        app.setCanvasResolution(RESOLUTION_AUTO);
        window.addEventListener("resize", function () {
            _this.resizeCanvas();
        });
    };
    Viewer.prototype.init_object = function () {
        var _this = this;
        var app = this.app;
        var observer = this.observer;
        // create the scene and debug root nodes
        var sceneRoot = new Entity("sceneRoot", app);
        app.root.addChild(sceneRoot);
        this.sceneRoot = sceneRoot;
        this.entities = [];
        this.entityAssets = [];
        this.assets = [];
        this.meshInstances = [];
        this.sceneBounds = null;
        var controlEvents = {
            'scene.variant.selected': this.setSelectedVariant.bind(this)
        };
        // register control events
        Object.keys(controlEvents).forEach(function (e) {
            observer.on("".concat(e, ":set"), controlEvents[e]);
            observer.set(e, _this.observer.get(e), false, false, true);
        });
    };
    // Events
    Viewer.prototype.setSelectedVariant = function (variant) {
        if (variant) {
            this.entityAssets.forEach(function (entityAsset) {
                if (entityAsset.asset.resource.getMaterialVariants().indexOf(variant) !== -1) {
                    entityAsset.asset.resource.applyMaterialVariant(entityAsset.entity, variant);
                }
            });
        }
    };
    Viewer.prototype.init_stats = function () {
        var _this = this;
        var app = this.app;
        var observer = this.observer;
        // construct ministats, default off
        this.miniStats = new playcanvasExtras.exports.MiniStats(app);
        this.miniStats.enabled = observer.get('show.stats');
        var controlEvents = {
            'show.stats': this.setStats.bind(this),
            'show.grid': this.setGrid.bind(this),
            'show.depth': this.setDepth.bind(this),
        };
        // register control events
        Object.keys(controlEvents).forEach(function (e) {
            observer.on("".concat(e, ":set"), controlEvents[e]);
            observer.set(e, _this.observer.get(e), false, false, true);
        });
    };
    //#endregion
    //-----------------------------------
    //#region canvas
    Viewer.prototype.getCanvasSize = function () {
        return {
            width: document.body.clientWidth - document.getElementById("panel-left").offsetWidth,
            height: document.body.clientHeight
        };
    };
    Viewer.prototype.resizeCanvas = function () {
        var device = this.app.graphicsDevice;
        var canvasSize = this.getCanvasSize();
        device.maxPixelRatio = window.devicePixelRatio;
        this.app.resizeCanvas(canvasSize.width, canvasSize.height);
        this.renderNextFrame();
    };
    Viewer.prototype.update = function (deltaTime) {
        var _a;
        // update the orbit camera
        this.orbitCamera.update(deltaTime);
        var showStats = this.observer.get('show.stats');
        var showDepth = this.observer.get('show.depth');
        var showGrid = this.observer.get('show.grid');
        var maxdiff = function (a, b) {
            var result = 0;
            for (var i = 0; i < 16; ++i) {
                result = Math.max(result, Math.abs(a.data[i] - b.data[i]));
            }
            return result;
        };
        // if the camera has moved since the last render
        var cameraWorldTransform = this.camera.getWorldTransform();
        if (maxdiff(cameraWorldTransform, this.prevCameraMat) > 1e-04) {
            this.prevCameraMat.copy(cameraWorldTransform);
            //const current = this.app.graphicsDevice.maxPixelRatio;
            this.app.graphicsDevice.maxPixelRatio = 1;
            this.moved = true;
            this.renderOnlyNextFrame();
            if (this.observer.get('scripts.bokeh.enabled') && ((_a = this.camera.script) === null || _a === void 0 ? void 0 : _a.has('bokeh'))) {
                var fPoint = this.orbitCamera.focalPoint.snaptoPoint.clone();
                var cPoint = this.orbitCamera.cameraNode.getPosition();
                var focus = -fPoint.sub(cPoint).length();
                this.setBokehFocus(focus);
            }
        }
        else {
            var maxRatio = window.devicePixelRatio;
            var current = this.app.graphicsDevice.maxPixelRatio;
            var per = (maxRatio - 1) / 5;
            if (current != maxRatio && this.moved) {
                this.app.graphicsDevice.maxPixelRatio = Math.min(maxRatio, current + per);
                this.renderOnlyNextFrame();
            }
            else {
                this.moved = false;
                if (showStats)
                    this.renderOnlyNextFrame();
                else
                    this.app.graphicsDevice.maxPixelRatio = maxRatio;
            }
        }
        if (showDepth) {
            // @ts-ignore engine-tsd
            this.app.drawDepthTexture(0.7, -0.7, 0.5, 0.5);
            this.renderOnlyNextFrame();
        }
        if (this.sceneBounds && showGrid) {
            var color1 = Color.BLACK;
            var color2 = Color.WHITE;
            var spacing = 100; // Math.pow(10, Math.floor(Math.log10(this.sceneBounds.halfExtents.length())));
            var v0 = new Vec3(0, -0.2, 0);
            var v1 = new Vec3(0, -0.2, 0);
            var numGrids = 10;
            var a = numGrids * spacing;
            for (var x = -numGrids; x < numGrids + 1; ++x) {
                var b = x * spacing;
                v0.set(-a, -0.2, b);
                v1.set(a, -0.2, b);
                this.app.drawLine(v0, v1, b === 0 ? color1 : color2);
                v0.set(b, -0.2, -a);
                v1.set(b, -0.2, a);
                this.app.drawLine(v0, v1, b === 0 ? color1 : color2);
            }
        }
    };
    Viewer.prototype.onFrameend = function () {
        if (this.firstFrame) {
            this.firstFrame = false;
            // focus camera after first frame otherwise skinned model bounding
            // boxes are incorrect
            this.focusCamera();
        }
        else if (this.loadTimestamp !== null) {
            this.observer.set('scene.loadTime', "".concat(Date.now() - this.loadTimestamp, " ms"));
            this.loadTimestamp = null;
            this.observer.set('spinner', false);
        }
    };
    //#endregion
    //-----------------------------------
    //#region SceneData
    // reset the viewer, unloading resources
    Viewer.prototype.resetScene = function () {
        var _this = this;
        var app = this.app;
        this.entities.forEach(function (entity) {
            _this.sceneRoot.removeChild(entity);
            entity.destroy();
        });
        this.entities = [];
        this.entityAssets = [];
        this.assets.forEach(function (asset) {
            app.assets.remove(asset);
            asset.unload();
        });
        this.assets = [];
        this.meshInstances = [];
        this.observer.set('scene.variants.list', '[]');
        this.updateSceneInfo();
    };
    Viewer.prototype.updateSceneInfo = function () {
        var meshCount = 0;
        var vertexCount = 0;
        var primitiveCount = 0;
        var variants = [];
        // update mesh stats
        this.assets.forEach(function (asset) {
            variants = variants.concat(asset.resource.getMaterialVariants());
            asset.resource.renders.forEach(function (renderAsset) {
                renderAsset.resource.meshes.forEach(function (mesh) {
                    meshCount++;
                    vertexCount += mesh.vertexBuffer.getNumVertices();
                    primitiveCount += mesh.primitive[0].count;
                });
            });
        });
        var graph = this.entities.map(function (entity) {
            return {
                name: entity.name,
                path: entity.path,
                children: []
            };
        });
        // hierarchy
        // 추후 이 부분 지우면 패널 제거 가능
        this.observer.set('scene.nodes', JSON.stringify(graph));
        // mesh stats
        this.observer.set('scene.meshCount', meshCount);
        this.observer.set('scene.vertexCount', vertexCount);
        this.observer.set('scene.primitiveCount', primitiveCount);
        // variant stats
        this.observer.set('scene.variants.list', JSON.stringify(variants));
        this.observer.set('scene.variant.selected', variants[0]);
    };
    // add a loaded asset to the scene
    // asset is a container asset with renders and/or animations
    Viewer.prototype.addToScene = function (err, asset) {
        //this.observer.set('spinner', false);
        if (err) {
            this.observer.set('error', err);
            return;
        }
        var resource = asset.resource;
        var meshesLoaded = resource.renders && resource.renders.length > 0;
        var prevEntity = this.entities.length === 0 ? null : this.entities[this.entities.length - 1];
        var entity;
        // create entity
        if (!meshesLoaded && prevEntity && prevEntity.findComponent("render")) {
            entity = prevEntity;
        }
        else {
            entity = asset.resource.instantiateRenderEntity();
            this.entities.push(entity);
            this.entityAssets.push({ entity: entity, asset: asset });
            this.sceneRoot.addChild(entity);
        }
        // store the loaded asset
        this.assets.push(asset);
        // update
        this.updateSceneInfo();
        // construct a list of meshInstances so we can quickly access them when configuring wireframe rendering etc.
        this.updateMeshInstanceList();
        // we can't refocus the camera here because the scene hierarchy only gets updated
        // during render. we must instead set a flag, wait for a render to take place and
        // then focus the camera.
        this.firstFrame = true;
    };
    //#endregion
    //#region Load Model
    // load gltf model given its url and list of external urls
    Viewer.prototype.loadGltf = function (gltfUrl, externalUrls, finishedCallback) {
        var _this = this;
        // provide buffer view callback so we can handle models compressed with MeshOptimizer
        // https://github.com/zeux/meshoptimizer
        var processBufferView = function (gltfBuffer, buffers, continuation) {
            if (gltfBuffer.extensions && gltfBuffer.extensions.EXT_meshopt_compression) {
                var extensionDef_1 = gltfBuffer.extensions.EXT_meshopt_compression;
                var decoder_1 = MeshoptDecoder;
                decoder_1.ready.then(function () {
                    var byteOffset = extensionDef_1.byteOffset || 0;
                    var byteLength = extensionDef_1.byteLength || 0;
                    var count = extensionDef_1.count;
                    var stride = extensionDef_1.byteStride;
                    var result = new Uint8Array(count * stride);
                    var source = new Uint8Array(buffers[extensionDef_1.buffer].buffer, buffers[extensionDef_1.buffer].byteOffset + byteOffset, byteLength);
                    decoder_1.decodeGltfBuffer(result, count, stride, source, extensionDef_1.mode, extensionDef_1.filter);
                    continuation(null, result);
                });
            }
            else {
                continuation(null, null);
            }
        };
        var processImage = function (gltfImage, continuation) {
            var u = externalUrls.find(function (url) {
                return url.filename === path.normalize(gltfImage.uri || "");
            });
            if (u) {
                var textureAsset_2 = new Asset(u.filename, 'texture', {
                    url: u.url,
                    filename: u.filename
                });
                textureAsset_2.on('load', function () {
                    continuation(null, textureAsset_2);
                });
                this.app.assets.add(textureAsset_2);
                this.app.assets.load(textureAsset_2);
            }
            else {
                continuation(null, null);
            }
        };
        var postProcessImage = function (gltfImage, textureAsset) {
            // max anisotropy on all textures
            textureAsset.resource.anisotropy = _this.app.graphicsDevice.maxAnisotropy;
        };
        var processBuffer = function (gltfBuffer, continuation) {
            var u = externalUrls.find(function (url) {
                return url.filename === path.normalize(gltfBuffer.uri || "");
            });
            if (u) {
                var bufferAsset_1 = new Asset(u.filename, 'binary', {
                    url: u.url,
                    filename: u.filename
                });
                bufferAsset_1.on('load', function () {
                    continuation(null, new Uint8Array(bufferAsset_1.resource));
                });
                this.app.assets.add(bufferAsset_1);
                this.app.assets.load(bufferAsset_1);
            }
            else {
                continuation(null, null);
            }
        };
        var containerAsset = new Asset(gltfUrl.filename, 'container', gltfUrl, null, {
            // @ts-ignore TODO no definition in pc
            bufferView: {
                processAsync: processBufferView.bind(this)
            },
            image: {
                processAsync: processImage.bind(this),
                postprocess: postProcessImage
            },
            buffer: {
                processAsync: processBuffer.bind(this)
            }
        });
        containerAsset.on('load', function () {
            finishedCallback(null, containerAsset);
        });
        containerAsset.on('error', function (err) {
            finishedCallback(err, containerAsset);
        });
        this.observer.set('spinner', true);
        this.observer.set('error', null);
        // clearCta
        document.querySelector('#panel-left').classList.add('no-cta');
        document.querySelector('#application-canvas').classList.add('no-cta');
        document.querySelector('.load-button-panel').classList.add('hide');
        this.app.assets.add(containerAsset);
        this.app.assets.load(containerAsset);
    };
    // returns true if the filename has one of the recognized model extensions
    Viewer.prototype.isModelFilename = function (filename) {
        var filenameExt = path.getExtension(filename).toLowerCase();
        return modelExtensions.indexOf(filenameExt) !== -1;
    };
    // load the list of urls.
    // urls can reference glTF files, glb files and skybox textures.
    // returns true if a model was loaded.
    Viewer.prototype.loadFiles = function (files, resetScene) {
        var _this = this;
        if (resetScene === void 0) { resetScene = false; }
        // convert single url to list
        if (!Array.isArray(files)) {
            files = [files];
        }
        // check if any file is a model
        var hasModelFilename = files.reduce(function (p, f) { return p || _this.isModelFilename(f.filename); }, false);
        if (hasModelFilename) {
            if (resetScene) {
                this.resetScene();
            }
            var loadTimestamp_1 = Date.now();
            // kick off simultaneous asset load
            var awaiting_1 = 0;
            var assets_1 = [];
            files.forEach(function (file, index) {
                if (_this.isModelFilename(file.filename)) {
                    awaiting_1++;
                    _this.loadGltf(file, files, function (err, asset) {
                        assets_1[index] = { err: err, asset: asset };
                        if (--awaiting_1 === 0) {
                            _this.loadTimestamp = loadTimestamp_1;
                            // done loading assets, add them to the scene
                            assets_1.forEach(function (asset) {
                                if (asset) {
                                    _this.addToScene(asset.err, asset.asset);
                                }
                            });
                        }
                    });
                }
            });
        }
        else {
            // load skybox
            this.loadSkybox(files);
        }
        // return true if a model/scene was loaded and false otherwise
        return hasModelFilename;
    };
    //#endregion
    //#region calcBoundingBox
    // collects all mesh instances from entity hierarchy
    Viewer.prototype.collectMeshInstances = function (entity) {
        var meshInstances = [];
        if (entity) {
            var components = entity.findComponents("render");
            for (var i = 0; i < components.length; i++) {
                var render = components[i];
                var name_1 = components[i].entity.name.toLowerCase();
                if (name_1.includes('wall')) {
                    if (name_1.includes('deleted')) {
                        render.enabled = false;
                    }
                    render.castShadows = true;
                }
                else if (name_1.includes('roof') || name_1.includes('window') || name_1.includes('edge')) {
                    render.castShadows = true;
                }
                else {
                    render.castShadows = false;
                }
                if (render.meshInstances) {
                    for (var m = 0; m < render.meshInstances.length; m++) {
                        var meshInstance = render.meshInstances[m];
                        meshInstances.push(meshInstance);
                    }
                }
            }
        }
        return meshInstances;
    };
    Viewer.prototype.updateMeshInstanceList = function () {
        this.meshInstances = [];
        for (var e = 0; e < this.entities.length; e++) {
            var meshInstances = this.collectMeshInstances(this.entities[e]);
            this.meshInstances = this.meshInstances.concat(meshInstances);
        }
    };
    // calculate the intersection of the two bounding boxes
    Viewer.calcBoundingBoxIntersection = function (bbox1, bbox2) {
        // bounds don't intersect
        if (!bbox1.intersects(bbox2)) {
            return null;
        }
        var min1 = bbox1.getMin();
        var max1 = bbox1.getMax();
        var min2 = bbox2.getMin();
        var max2 = bbox2.getMax();
        var result = new BoundingBox();
        result.setMinMax(new Vec3(Math.max(min1.x, min2.x), Math.max(min1.y, min2.y), Math.max(min1.z, min2.z)), new Vec3(Math.min(max1.x, max2.x), Math.min(max1.y, max2.y), Math.min(max1.z, max2.z)));
        return result;
    };
    //#endregion
    //#region Set Property
    Viewer.prototype.setStats = function (show) {
        this.miniStats.enabled = show;
        this.renderNextFrame();
    };
    Viewer.prototype.setGrid = function (show) {
        this.renderNextFrame();
    };
    Viewer.prototype.setDepth = function (show) {
        this.renderNextFrame();
    };
    Viewer.prototype.setFov = function (fov) {
        this.camera.camera.fov = fov;
        this.renderNextFrame();
    };
    Viewer.prototype.setEnvRotation = function (factor) {
        // update skybox
        var rot = new Quat();
        rot.setFromEulerAngles(0, factor, 0);
        this.app.scene.skyboxRotation = rot;
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightingIntencity = function (factor) {
        this.light.light.intensity = factor;
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightingColor_r = function (value) {
        var color = this.light.light.color;
        color.r = value / 255;
        this.light.light.color = color;
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightingColor_g = function (value) {
        var color = this.light.light.color;
        color.g = value / 255;
        this.light.light.color = color;
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightingColor_b = function (value) {
        var color = this.light.light.color;
        color.b = value / 255;
        this.light.light.color = color;
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightingRotation_x = function (factor) {
        var angle = this.light.getLocalEulerAngles();
        angle.x = factor;
        this.light.setLocalEulerAngles(angle);
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightingRotation_y = function (factor) {
        var angle = this.light.getLocalEulerAngles();
        angle.y = factor;
        this.light.setLocalEulerAngles(angle);
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightingRotation_z = function (factor) {
        var angle = this.light.getLocalEulerAngles();
        angle.z = factor;
        this.light.setLocalEulerAngles(angle);
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightShadow = function (enable) {
        this.light.light.castShadows = enable;
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightShadowIntencity = function (value) {
        this.light.light.shadowIntensity = value;
        this.renderNextFrame();
    };
    Viewer.prototype.setMainLightShadowResulution = function (value) {
        this.light.light.shadowResolution = value;
        this.renderNextFrame();
    };
    Viewer.prototype.setSubLightingIntencity = function (factor) {
        this.sublight.light.intensity = factor;
        this.renderNextFrame();
    };
    Viewer.prototype.setSubLightingColor_r = function (value) {
        var color = this.sublight.light.color;
        color.r = value / 255;
        this.sublight.light.color = color;
        this.renderNextFrame();
    };
    Viewer.prototype.setSubLightingColor_g = function (value) {
        var color = this.sublight.light.color;
        color.g = value / 255;
        this.sublight.light.color = color;
        this.renderNextFrame();
    };
    Viewer.prototype.setSubLightingColor_b = function (value) {
        var color = this.sublight.light.color;
        color.b = value / 255;
        this.sublight.light.color = color;
        this.renderNextFrame();
    };
    Viewer.prototype.setSubLightingRotation_x = function (factor) {
        var angle = this.sublight.getLocalEulerAngles();
        angle.x = factor;
        this.sublight.setLocalEulerAngles(angle);
        this.renderNextFrame();
    };
    Viewer.prototype.setSubLightingRotation_y = function (factor) {
        var angle = this.sublight.getLocalEulerAngles();
        angle.y = factor;
        this.sublight.setLocalEulerAngles(angle);
        this.renderNextFrame();
    };
    Viewer.prototype.setSubLightingRotation_z = function (factor) {
        var angle = this.sublight.getLocalEulerAngles();
        angle.z = factor;
        this.sublight.setLocalEulerAngles(angle);
        this.renderNextFrame();
    };
    Viewer.prototype.setEnvExposure = function (factor) {
        this.app.scene.skyboxIntensity = Math.pow(2, factor);
        this.renderNextFrame();
    };
    Viewer.prototype.setTonemapping = function (tonemapping) {
        var mapping = {
            Linear: TONEMAP_LINEAR,
            Filmic: TONEMAP_FILMIC,
            Hejl: TONEMAP_HEJL,
            ACES: TONEMAP_ACES
        };
        this.app.scene.toneMapping = mapping.hasOwnProperty(tonemapping) ? mapping[tonemapping] : TONEMAP_ACES;
        this.renderNextFrame();
    };
    Viewer.prototype.setBackgroundColor = function (color) {
        var cnv = function (value) { return Math.max(0, Math.min(255, Math.floor(value * 255))); };
        document.getElementById('canvas-wrapper').style.backgroundColor = "rgb(".concat(cnv(color.r), ", ").concat(cnv(color.g), ", ").concat(cnv(color.b), ")");
        this.renderNextFrame();
    };
    Viewer.prototype.setSkyboxMip = function (mip) {
        this.app.scene.layers.getLayerById(LAYERID_SKYBOX).enabled = (mip !== 0);
        this.app.scene.skyboxMip = mip - 1;
        this.renderNextFrame();
    };
    Viewer.prototype.setPostProcessInit = function (FXAA, SSAO, Bloom, HS, BC, DOF, Vignette) {
        this.camera.script.get('fxaa').fire('state', false);
        this.camera.script.get('ssao').fire('state', false);
        this.camera.script.get('bloom').fire('state', false);
        this.camera.script.get('brightnesscontrast').fire('state', false);
        this.camera.script.get('huesaturation').fire('state', false);
        this.camera.script.get('bokeh').fire('state', false);
        this.camera.script.get('vignette').fire('state', false);
        if (FXAA != false)
            this.camera.script.get('fxaa').fire('state', FXAA);
        if (this.observer.get("show.postprocess")) {
            if (SSAO != false)
                this.camera.script.get('ssao').fire('state', SSAO);
            if (Bloom != false)
                this.camera.script.get('bloom').fire('state', Bloom);
            if (HS != false)
                this.camera.script.get('huesaturation').fire('state', HS);
            if (BC != false)
                this.camera.script.get('brightnesscontrast').fire('state', BC);
            if (DOF != false)
                this.camera.script.get('bokeh').fire('state', DOF);
            if (Vignette != false)
                this.camera.script.get('vignette').fire('state', Vignette);
        }
        this.renderNextFrame();
    };
    Viewer.prototype.setPostProcessEnabled = function (value) {
        //this.camera.script.get('fxaa').fire('state', value ? this.observer.get("scripts.fxaa.enabled") : false);
        this.camera.script.get('ssao').fire('state', value ? this.observer.get("scripts.ssao.enabled") : false);
        this.camera.script.get('bloom').fire('state', value ? this.observer.get("scripts.bloom.enabled") : false);
        this.camera.script.get('brightnesscontrast').fire('state', value ? this.observer.get("scripts.brightnesscontrast.enabled") : false);
        this.camera.script.get('huesaturation').fire('state', value ? this.observer.get("scripts.huesaturation.enabled") : false);
        this.camera.script.get('bokeh').fire('state', value ? this.observer.get("scripts.bokeh.enabled") : false);
        this.camera.script.get('vignette').fire('state', value ? this.observer.get("scripts.vignette.enabled") : false);
        this.renderNextFrame();
    };
    Viewer.prototype.setFxaaEnabled = function (value) {
        this.setPostProcessInit(value, this.observer.get('scripts.ssao.enabled'), this.observer.get('scripts.bloom.enabled'), this.observer.get('scripts.huesaturation.enabled'), this.observer.get('scripts.brightnesscontrast.enabled'), this.observer.get('scripts.bokeh.enabled'), this.observer.get('scripts.vignette.enabled'));
    };
    Viewer.prototype.setBloomEnabled = function (value) {
        this.setPostProcessInit(this.observer.get('scripts.fxaa.enabled'), this.observer.get('scripts.ssao.enabled'), value, this.observer.get('scripts.huesaturation.enabled'), this.observer.get('scripts.brightnesscontrast.enabled'), this.observer.get('scripts.bokeh.enabled'), this.observer.get('scripts.vignette.enabled'));
    };
    Viewer.prototype.setBloomIntensity = function (value) {
        this.camera.script.get('bloom').fire('attr', 'bloomIntensity', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setBloomThreshold = function (value) {
        this.camera.script.get('bloom').fire('attr', 'bloomThreshold', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setBlurAmount = function (value) {
        this.camera.script.get('bloom').fire('attr', 'blurAmount', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setBrightnessContrastEnabled = function (value) {
        this.setPostProcessInit(this.observer.get('scripts.fxaa.enabled'), this.observer.get('scripts.ssao.enabled'), this.observer.get('scripts.bloom.enabled'), this.observer.get('scripts.huesaturation.enabled'), value, this.observer.get('scripts.bokeh.enabled'), this.observer.get('scripts.vignette.enabled'));
    };
    Viewer.prototype.setBrightness = function (value) {
        this.camera.script.get('brightnesscontrast').fire('attr', 'brightness', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setContrast = function (value) {
        this.camera.script.get('brightnesscontrast').fire('attr', 'contrast', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setHueSaturationEnabled = function (value) {
        this.setPostProcessInit(this.observer.get('scripts.fxaa.enabled'), this.observer.get('scripts.ssao.enabled'), this.observer.get('scripts.bloom.enabled'), value, this.observer.get('scripts.brightnesscontrast.enabled'), this.observer.get('scripts.bokeh.enabled'), this.observer.get('scripts.vignette.enabled'));
    };
    Viewer.prototype.setHue = function (value) {
        this.camera.script.get('huesaturation').fire('attr', 'hue', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setSaturation = function (value) {
        this.camera.script.get('huesaturation').fire('attr', 'saturation', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setVignetteEnabled = function (value) {
        this.setPostProcessInit(this.observer.get('scripts.fxaa.enabled'), this.observer.get('scripts.ssao.enabled'), this.observer.get('scripts.bloom.enabled'), this.observer.get('scripts.huesaturation.enabled'), this.observer.get('scripts.brightnesscontrast.enabled'), this.observer.get('scripts.bokeh.enabled'), value);
    };
    Viewer.prototype.setVignetteOffset = function (value) {
        this.camera.script.get('vignette').fire('attr', 'offset', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setVignetteDarkness = function (value) {
        this.camera.script.get('vignette').fire('attr', 'darkness', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setBokehEnabled = function (value) {
        this.setPostProcessInit(this.observer.get('scripts.fxaa.enabled'), this.observer.get('scripts.ssao.enabled'), this.observer.get('scripts.bloom.enabled'), this.observer.get('scripts.huesaturation.enabled'), this.observer.get('scripts.brightnesscontrast.enabled'), value, this.observer.get('scripts.vignette.enabled'));
    };
    Viewer.prototype.setBokehMaxBlur = function (value) {
        this.camera.script.get('bokeh').fire('attr', 'maxBlur', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setBokehAperture = function (value) {
        this.camera.script.get('bokeh').fire('attr', 'aperture', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setBokehFocus = function (value) {
        this.camera.script.get('bokeh').fire('attr', 'focus', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setSSAOEnabled = function (value) {
        this.setPostProcessInit(this.observer.get('scripts.fxaa.enabled'), value, this.observer.get('scripts.bloom.enabled'), this.observer.get('scripts.huesaturation.enabled'), this.observer.get('scripts.brightnesscontrast.enabled'), this.observer.get('scripts.bokeh.enabled'), this.observer.get('scripts.vignette.enabled'));
    };
    Viewer.prototype.setSSAORadius = function (value) {
        this.camera.script.get('ssao').fire('attr', 'radius', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setSSAOSamples = function (value) {
        this.camera.script.get('ssao').fire('attr', 'samples', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setSSAOBrightness = function (value) {
        this.camera.script.get('ssao').fire('attr', 'brightness', value);
        this.renderNextFrame();
    };
    Viewer.prototype.setSSAODownscale = function (value) {
        this.camera.script.get('ssao').fire('attr', 'downscale', value);
        this.renderNextFrame();
    };
    //#endregion
    //#region Util
    // extract query params. taken from https://stackoverflow.com/a/21152762
    // handleUrlParams() {
    //     const urlParams: any = {};
    //     if (location.search) {
    //         location.search.substring(1).split("&").forEach((item) => {
    //             const s = item.split("="),
    //                 k = s[0],
    //                 v = s[1] && decodeURIComponent(s[1]);
    //             (urlParams[k] = urlParams[k] || []).push(v);
    //         });
    //     }
    //     // handle load url param
    //     const loadUrls = (urlParams.load || []).concat(urlParams.assetUrl || []);
    //     if (loadUrls.length > 0) {
    //         this.loadFiles(
    //             loadUrls.map((url: string) => {
    //                 return { url, filename: url };
    //             })
    //         );
    //     }
    //     if (loadUrls.length === 1) {
    //         this.observer.set('glbUrl', loadUrls[0]);
    //     }
    //     // set camera position
    //     if (urlParams.hasOwnProperty('cameraPosition')) {
    //         const pos = urlParams.cameraPosition[0].split(',').map(Number);
    //         if (pos.length === 3) {
    //             this.cameraPosition = new pc.Vec3(pos);
    //         }
    //     }
    // }
    //#endregion
    Viewer.prototype.renderNextFrame = function () {
        this.app.graphicsDevice.maxPixelRatio = window.devicePixelRatio;
        this.app.renderNextFrame = true;
    };
    Viewer.prototype.renderOnlyNextFrame = function () {
        this.app.renderNextFrame = true;
    };
    Viewer.prototype.handleUrlParams = function () {
        if (location.search) {
            var s = location.search.substring(1).split("=");
            var api = s[0];
            if (api.toLowerCase() == 'load') {
                var values = (s[1] && decodeURIComponent(s[1])).split('/');
                if (values.length == 3)
                    this.LoadModel(values[0], values[1], values[2]);
            }
        }
    };
    Viewer.prototype.LoadModel = function (danjiId, roomTypeId, level) {
        var asset_path = "https://raw.githubusercontent.com/sehyun-zigbang/zigbang-zed-viewer/feature/playcanvas-based/assets";
        var model_path = "".concat(asset_path, "/glTF/").concat(danjiId, "/").concat(roomTypeId);
        var model_name = "".concat(danjiId, "_").concat(roomTypeId, "_").concat(level);
        var name_glTF = "".concat(model_name, ".gltf");
        var name_bin = "".concat(model_name, ".bin");
        var url_glTF = "".concat(model_path, "/").concat(name_glTF);
        var url_bin = "".concat(model_path, "/").concat(name_bin);
        //this.observer.setProperty('scene.name', model_name);
        var loadList = [];
        loadList.push({
            url: url_glTF,
            filename: name_glTF
        });
        loadList.push({
            url: url_bin,
            filename: name_bin
        });
        this.loadFiles(loadList);
    };
    return Viewer;
}());

var observerData = {
    ui: {
        active: null
    },
    show: {
        stats: false,
        depth: false,
        grid: true,
        fov: 35,
        postprocess: true,
    },
    lighting: {
        direct: 0.6,
        env: {
            value: getAssetPath('./skybox/photo_studio_broadway_hall_2k.hdr'),
            options: null,
            default: null,
            skyboxMip: '0',
            exposure: -1,
            backgroundColor: { r: 0.4, g: 0.45, b: 0.5 },
            rotation: 0
        },
        mainLight: {
            intencity: 1,
            color_r: 255,
            color_g: 255,
            color_b: 255,
            rotation_x: 50,
            rotation_y: 15,
            rotation_z: 0,
            shadow: true,
            shadowResolution: 4096,
            shadowIntencity: 1
        },
        subLight: {
            intencity: 0.45,
            color_r: 100,
            color_g: 255,
            color_b: 255,
            rotation_x: -50,
            rotation_y: -150,
            rotation_z: 0,
        },
        tonemapping: 'ACES'
    },
    scene: {
        nodes: '[]',
        selectedNode: {
            path: '',
            name: null,
            position: {
                0: 0,
                1: 0,
                2: 0
            },
            rotation: {
                0: 0,
                1: 0,
                2: 0,
                3: 0
            },
            scale: {
                0: 0,
                1: 0,
                2: 0
            }
        },
        meshCount: null,
        vertexCount: null,
        primitiveCount: null,
        bounds: null,
        variant: {
            selected: 0
        },
        variants: {
            list: '[]'
        },
        loadTime: null,
        name: null
    },
    scripts: {
        fxaa: {
            enabled: true,
        },
        brightnesscontrast: {
            enabled: true,
            brightness: -0.1,
            contrast: 0.05,
        },
        huesaturation: {
            enabled: true,
            hue: 0,
            saturation: 0.2
        },
        bloom: {
            enabled: true,
            bloomIntensity: 0.5,
            bloomThreshold: 0.7,
            blurAmount: 15
        },
        bokeh: {
            enabled: false,
            maxBlur: 0.003,
            aperture: 0.1,
            focus: 1,
        },
        ssao: {
            enabled: false,
            radius: 5,
            samples: 16,
            brightness: 0.2,
            downscale: 1
        },
        vignette: {
            enabled: true,
            offset: 0.8,
            darkness: 1,
        }
    },
    spinner: false,
    error: null,
    glbUrl: null
};
// initialize the apps state
var observer = new Observer(observerData);
initMaterials();
initializeUI(observer);
window.pc = pc$1;
basisInitialize({
    glueUrl: getAssetPath('lib/basis/basis.wasm.js'),
    wasmUrl: getAssetPath('lib/basis/basis.wasm.wasm'),
    fallbackUrl: getAssetPath('lib/basis/basis.js'),
    lazyInit: true
});
// @ts-ignore
WasmModule.setConfig('DracoDecoderModule', {
    glueUrl: getAssetPath('lib/draco/draco.wasm.js'),
    wasmUrl: getAssetPath('lib/draco/draco.wasm.wasm'),
    fallbackUrl: getAssetPath('lib/draco/draco.js')
});
// hide / show spinner when loading files
observer.on('spinner:set', function (value) {
    var spinner = document.getElementById('spinner');
    if (value) {
        spinner.classList.remove('pcui-hidden');
    }
    else {
        spinner.classList.add('pcui-hidden');
    }
});
var url = getAssetPath("asset_manifest.json");
new Http().get(url, {
    cache: true,
    responseType: "text",
    retry: false
}, function (err, result) {
    if (err) {
        console.warn(err);
    }
    else {
        var skyboxes = result.skyboxes;
        var skyboxOptions_1 = [{
                v: 'None', t: 'None'
            }];
        skyboxes.forEach(function (skybox) {
            skyboxOptions_1.push({ v: getAssetPath(skybox.url), t: skybox.label });
        });
        var skyboxData = observer.get('lighting.env');
        skyboxData.options = JSON.stringify(skyboxOptions_1);
        skyboxData.default = getAssetPath(result.defaultSkybox);
        observer.set('lighting.env', skyboxData);
        // loadOptions('uistate');
        // observer.on('*:set', () => {
        //     saveOptions('uistate');
        // });
        var canvas = document.getElementById("application-canvas");
        window.viewer = new Viewer(canvas, observer);
        window.viewer.handleUrlParams();
    }
});
//# sourceMappingURL=index.js.map
